
Linting "angularexampleapp"...
[{"filePath":"/home/migudel/Documentos/TFG/repos/propios/angular-example-app/src/app/core/components/theme-button/theme-button.component.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","message":"Definition for rule '@typescript-eslint/prefer-nullish-coalescing' was not found.","line":40,"column":7,"endLine":40,"endColumn":79,"severity":2,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  ChangeDetectionStrategy,\n  Component,\n  CUSTOM_ELEMENTS_SCHEMA,\n  effect,\n  inject,\n} from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthenticationService } from '~features/authentication/services/authentication.service';\nimport { Theme, ThemeManagerService } from '~core/services/theme-manager.service';\n\nimport '@shoelace-style/shoelace/dist/components/button/button.js';\nimport '@shoelace-style/shoelace/dist/components/icon/icon.js';\n\n@Component({\n  selector: 'app-theme-button',\n  templateUrl: './theme-button.component.html',\n  standalone: true,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class ThemeButtonComponent {\n  private readonly authenticationService = inject(AuthenticationService);\n  private readonly themeManagerService = inject(ThemeManagerService);\n\n  readonly router = inject(Router);\n  readonly Theme = Theme;\n\n  isUserLoggedIn = this.authenticationService.isUserLoggedIn();\n  themeSelected = this.themeManagerService.getThemeFromLocalStorageValue();\n\n  constructor() {\n    effect(() => {\n      this.isUserLoggedIn = this.authenticationService.isUserLoggedIn();\n    });\n  }\n\n  toggleTheme() {\n    this.themeSelected =\n      // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n      this.themeManagerService.getThemeFromLocalStorageValue() === Theme.DARK ||\n      this.themeSelected === null\n        ? Theme.LIGHT\n        : Theme.DARK;\n    this.themeManagerService.setTheme(this.themeSelected);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documentos/TFG/repos/propios/angular-example-app/src/app/core/directives/sl-checkbox-control.directive.ts","messages":[{"ruleId":"@typescript-eslint/no-empty-function","message":"Definition for rule '@typescript-eslint/no-empty-function' was not found.","line":23,"column":3,"endLine":23,"endColumn":101,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/no-unused-vars","message":"Definition for rule '@typescript-eslint/no-unused-vars' was not found.","line":23,"column":3,"endLine":23,"endColumn":101,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/no-empty-function","message":"Definition for rule '@typescript-eslint/no-empty-function' was not found.","line":26,"column":3,"endLine":26,"endColumn":67,"severity":2,"nodeType":null}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Directive, ElementRef, inject, model } from '@angular/core';\nimport type { ControlValueAccessor } from '@angular/forms';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Directive({\n  selector: '[appSlCheckboxControl]',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: AppSlCheckboxControlDirective,\n      multi: true,\n    },\n  ],\n  standalone: true,\n  host: {\n    '[attr.checked]': 'checked()',\n    '(sl-change)': 'onSlChange()',\n  },\n})\nexport class AppSlCheckboxControlDirective implements ControlValueAccessor {\n  private readonly el = inject(ElementRef);\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function,@typescript-eslint/no-unused-vars\n  private onChangeFn = (value: boolean) => {};\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  private onTouchedFn = () => {};\n\n  readonly checked = model(false);\n\n  writeValue(value: boolean): void {\n    this.checked.set(value);\n  }\n\n  registerOnChange(function_: () => void): void {\n    this.onChangeFn = function_;\n  }\n\n  registerOnTouched(function_: () => void): void {\n    this.onTouchedFn = function_;\n  }\n\n  onSlChange(): void {\n    const { checked } = this.el.nativeElement;\n    this.onChangeFn(checked);\n    this.onTouchedFn();\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documentos/TFG/repos/propios/angular-example-app/src/app/core/directives/sl-select-control.directive.ts","messages":[{"ruleId":"@typescript-eslint/no-empty-function","message":"Definition for rule '@typescript-eslint/no-empty-function' was not found.","line":23,"column":3,"endLine":23,"endColumn":101,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/no-unused-vars","message":"Definition for rule '@typescript-eslint/no-unused-vars' was not found.","line":23,"column":3,"endLine":23,"endColumn":101,"severity":2,"nodeType":null},{"ruleId":"@typescript-eslint/no-empty-function","message":"Definition for rule '@typescript-eslint/no-empty-function' was not found.","line":26,"column":3,"endLine":26,"endColumn":67,"severity":2,"nodeType":null}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Directive, ElementRef, inject, model } from '@angular/core';\nimport type { ControlValueAccessor } from '@angular/forms';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Directive({\n  selector: '[appSlSelectControl]',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: AppSlSelectControlDirective,\n      multi: true,\n    },\n  ],\n  standalone: true,\n  host: {\n    '[attr.value]': 'value()',\n    '(sl-change)': 'onSlChange()',\n  },\n})\nexport class AppSlSelectControlDirective implements ControlValueAccessor {\n  private readonly el = inject(ElementRef);\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function,@typescript-eslint/no-unused-vars\n  private onChangeFn = (value: unknown) => {};\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  private onTouchedFn = () => {};\n\n  readonly value = model('');\n\n  writeValue(value: string): void {\n    this.value.set(value);\n  }\n\n  registerOnChange(function_: () => void): void {\n    this.onChangeFn = function_;\n  }\n\n  registerOnTouched(function_: () => void): void {\n    this.onTouchedFn = function_;\n  }\n\n  onSlChange(): void {\n    const { value } = this.el.nativeElement;\n    this.onChangeFn(value);\n    this.onTouchedFn();\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documentos/TFG/repos/propios/angular-example-app/src/app/core/services/alert.service.ts","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","message":"Definition for rule '@typescript-eslint/consistent-type-imports' was not found.","line":1,"column":1,"endLine":1,"endColumn":71,"severity":2,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// eslint-disable-next-line @typescript-eslint/consistent-type-imports\nimport { Injectable, Renderer2, RendererFactory2 } from '@angular/core';\n\nenum AlertType {\n  SUCCESS = 'success',\n  ERROR = 'error',\n}\n\ntype Alert = {\n  message: string;\n  type: AlertType;\n  hasCountdown?: boolean;\n  duration?: number;\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AlertService {\n  private readonly renderer: Renderer2;\n\n  constructor(rendererFactory: RendererFactory2) {\n    this.renderer = rendererFactory.createRenderer(null, null);\n  }\n\n  createSuccessAlert(message: string) {\n    this.createAlert({ message, type: AlertType.SUCCESS, duration: 7000, hasCountdown: true });\n  }\n\n  createErrorAlert(message: string) {\n    this.createAlert({ message, type: AlertType.ERROR });\n  }\n\n  private createAlert(alert: Alert): void {\n    const alertElement = this.createAlertElement(alert);\n    const container = document.body;\n    this.renderer.appendChild(container, alertElement);\n    alertElement.toast();\n  }\n\n  private createAlertElement(alert: Alert): HTMLElement & { toast: () => void } {\n    const alertElement = this.renderer.createElement('sl-alert');\n    alertElement.classList.add(`alert--${alert.type}`);\n    this.renderer.setAttribute(alertElement, 'closable', '');\n    this.renderer.setAttribute(alertElement, 'variant', alert.type);\n    if (alert.duration) {\n      this.renderer.setAttribute(alertElement, 'duration', alert.duration.toString());\n    }\n    if (alert.hasCountdown) {\n      this.renderer.setAttribute(alertElement, 'countdown', 'rtl');\n    }\n    this.renderer.setProperty(alertElement, 'innerHTML', alert.message);\n    return alertElement as HTMLElement & { toast: () => void };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documentos/TFG/repos/propios/angular-example-app/src/app/core/services/cookie-consent.service.ts","messages":[{"ruleId":"@typescript-eslint/max-params","message":"Definition for rule '@typescript-eslint/max-params' was not found.","line":5,"column":3,"endLine":5,"endColumn":60,"severity":2,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { inject, Injectable } from '@angular/core';\nimport { LOCAL_STORAGE } from '~core/providers/local-storage';\n\ndeclare const window: Window &\n  // eslint-disable-next-line @typescript-eslint/max-params\n  typeof globalThis & { gtag?: (a: string, b: string, o: object) => void };\n\nconst CONSENT_COOKIE_KEY = 'isCookiesConsentAccepted';\nconst CONSENT_COOKIE_VALUE = 'true';\n\nexport enum ConsentState {\n  DENIED = 'denied',\n  GRANTED = 'granted',\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CookieConsentService {\n  private readonly localStorage: Storage | null = inject(LOCAL_STORAGE);\n\n  setCookieConsent(state: ConsentState): boolean {\n    if (!this.setConsentInLocalStorage()) {\n      return false;\n    }\n    return this.updateGtagConsent(state);\n  }\n\n  getCookieState(): boolean {\n    return this.localStorage?.getItem(CONSENT_COOKIE_KEY) === CONSENT_COOKIE_VALUE;\n  }\n\n  private setConsentInLocalStorage(): boolean {\n    try {\n      this.localStorage?.setItem(CONSENT_COOKIE_KEY, CONSENT_COOKIE_VALUE);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  private updateGtagConsent(state: ConsentState): boolean {\n    try {\n      if (window.gtag) {\n        const consentOptions = {\n           \n          ad_user_data: state,\n          ad_personalization: state,\n          ad_storage: state,\n          analytics_storage: state,\n        };\n\n        if (state === ConsentState.DENIED) {\n          window.gtag('consent', 'default', {\n            ...consentOptions,\n            wait_for_update: 500,\n             \n          });\n        } else {\n          window.gtag('consent', 'update', {\n            ...consentOptions,\n          });\n        }\n      }\n      return true;\n    } catch {\n      return false;\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documentos/TFG/repos/propios/angular-example-app/src/locale/translations.ts","messages":[{"ruleId":"@angular-eslint/runtime-localize","severity":2,"message":"$localize could be called before translations are loaded","line":2,"column":10,"nodeType":null,"messageId":"runtimeLocalize","endLine":2,"endColumn":19},{"ruleId":"@angular-eslint/runtime-localize","severity":2,"message":"$localize could be called before translations are loaded","line":3,"column":9,"nodeType":null,"messageId":"runtimeLocalize","endLine":3,"endColumn":18},{"ruleId":"@angular-eslint/runtime-localize","severity":2,"message":"$localize could be called before translations are loaded","line":4,"column":10,"nodeType":null,"messageId":"runtimeLocalize","endLine":4,"endColumn":19},{"ruleId":"@angular-eslint/runtime-localize","severity":2,"message":"$localize could be called before translations are loaded","line":5,"column":13,"nodeType":null,"messageId":"runtimeLocalize","endLine":5,"endColumn":22},{"ruleId":"@angular-eslint/runtime-localize","severity":2,"message":"$localize could be called before translations are loaded","line":6,"column":14,"nodeType":null,"messageId":"runtimeLocalize","endLine":6,"endColumn":23},{"ruleId":"@angular-eslint/runtime-localize","severity":2,"message":"$localize could be called before translations are loaded","line":7,"column":14,"nodeType":null,"messageId":"runtimeLocalize","endLine":7,"endColumn":23},{"ruleId":"@angular-eslint/runtime-localize","severity":2,"message":"$localize could be called before translations are loaded","line":8,"column":11,"nodeType":null,"messageId":"runtimeLocalize","endLine":8,"endColumn":20},{"ruleId":"@angular-eslint/runtime-localize","severity":2,"message":"$localize could be called before translations are loaded","line":9,"column":18,"nodeType":null,"messageId":"runtimeLocalize","endLine":9,"endColumn":27},{"ruleId":"@angular-eslint/runtime-localize","severity":2,"message":"$localize could be called before translations are loaded","line":10,"column":18,"nodeType":null,"messageId":"runtimeLocalize","endLine":10,"endColumn":27},{"ruleId":"@angular-eslint/runtime-localize","severity":2,"message":"$localize could be called before translations are loaded","line":11,"column":21,"nodeType":null,"messageId":"runtimeLocalize","endLine":11,"endColumn":30},{"ruleId":"@angular-eslint/runtime-localize","severity":2,"message":"$localize could be called before translations are loaded","line":12,"column":28,"nodeType":null,"messageId":"runtimeLocalize","endLine":12,"endColumn":37},{"ruleId":"@angular-eslint/runtime-localize","severity":2,"message":"$localize could be called before translations are loaded","line":13,"column":20,"nodeType":null,"messageId":"runtimeLocalize","endLine":13,"endColumn":29},{"ruleId":"@angular-eslint/runtime-localize","severity":2,"message":"$localize could be called before translations are loaded","line":14,"column":11,"nodeType":null,"messageId":"runtimeLocalize","endLine":14,"endColumn":20},{"ruleId":"@angular-eslint/runtime-localize","severity":2,"message":"$localize could be called before translations are loaded","line":15,"column":13,"nodeType":null,"messageId":"runtimeLocalize","endLine":15,"endColumn":22},{"ruleId":"@angular-eslint/runtime-localize","severity":2,"message":"$localize could be called before translations are loaded","line":16,"column":16,"nodeType":null,"messageId":"runtimeLocalize","endLine":16,"endColumn":25},{"ruleId":"@angular-eslint/runtime-localize","severity":2,"message":"$localize could be called before translations are loaded","line":17,"column":26,"nodeType":null,"messageId":"runtimeLocalize","endLine":17,"endColumn":35},{"ruleId":"@angular-eslint/runtime-localize","severity":2,"message":"$localize could be called before translations are loaded","line":18,"column":22,"nodeType":null,"messageId":"runtimeLocalize","endLine":18,"endColumn":31},{"ruleId":"@angular-eslint/runtime-localize","severity":2,"message":"$localize could be called before translations are loaded","line":19,"column":26,"nodeType":null,"messageId":"runtimeLocalize","endLine":19,"endColumn":35},{"ruleId":"@angular-eslint/runtime-localize","severity":2,"message":"$localize could be called before translations are loaded","line":20,"column":25,"nodeType":null,"messageId":"runtimeLocalize","endLine":20,"endColumn":34},{"ruleId":"@angular-eslint/runtime-localize","severity":2,"message":"$localize could be called before translations are loaded","line":21,"column":25,"nodeType":null,"messageId":"runtimeLocalize","endLine":21,"endColumn":34},{"ruleId":"@angular-eslint/runtime-localize","severity":2,"message":"$localize could be called before translations are loaded","line":22,"column":19,"nodeType":null,"messageId":"runtimeLocalize","endLine":22,"endColumn":28}],"suppressedMessages":[],"errorCount":21,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export const translations = {\n  title: $localize`Angular Example App`,\n  home: $localize`Home`,\n  logIn: $localize`Log in`,\n  register: $localize`Register`,\n  myAccount: $localize`My account`,\n  myPokemon: $localize`My pokemon`,\n  logOut: $localize`Log out`,\n  fieldRequired: $localize`Field required.`,\n  emailHelpText: $localize`No real email validation. Field required. Format: example@domain.com`,\n  passwordHelpText: $localize`Must contain at least one lowercase letter, one uppercase letter and one number. No special characters.`,\n  confirmPasswordHelpText: $localize`Passwords do not match.`,\n  pokemonHelpText: $localize`Field required. PokeAPI does not found that pokemon name.`,\n  logout: $localize`Log out`,\n  findMore: $localize`Find more!`,\n  findPokemon: $localize`Find a pokemon`,\n  myAccountSuccessAlert: $localize`Account settings saved. You're all set!`,\n  genericErrorAlert: $localize`Oops! Something went wrong. Please try again later or leave an issue if it persists.`,\n  loginCredentialsError: $localize`Invalid credentials. Not very effective, try again!`,\n  genericRegisterError: $localize`Register failed. This attempt wasn’t very effective, try again!`,\n  pokemonNotFoundError: $localize`Pokémon not found. Double-check the name and try again!`,\n  sessionExpired: $localize`Session expired. Please log in.`,\n};\n","usedDeprecatedRules":[]}]
