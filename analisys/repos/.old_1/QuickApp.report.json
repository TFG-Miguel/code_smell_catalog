{
  "repo": {
    "HEAD": {
      "commit": "2433e0ed57628d9b8a6426694116586f86a2226b",
      "author": "migudel",
      "date": "Sat Mar 29 20:53:21 2025 +0100",
      "message": "INICIO DE PRUEBAS"
    },
    "url": "https://github.com/emonney/QuickApp"
  },
  "before": {
    "quickapp.client": {
      "recommended": [
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/controls/statistics-demo.component.ts",
          "messages": [
            {
              "ruleId": "@typescript-eslint/no-unused-vars",
              "message": "Definition for rule '@typescript-eslint/no-unused-vars' was not found.",
              "line": 123,
              "column": 3,
              "endLine": 123,
              "endColumn": 64,
              "severity": 2,
              "nodeType": null
            },
            {
              "ruleId": "@typescript-eslint/no-unused-vars",
              "message": "Definition for rule '@typescript-eslint/no-unused-vars' was not found.",
              "line": 128,
              "column": 3,
              "endLine": 128,
              "endColumn": 64,
              "severity": 2,
              "nodeType": null
            }
          ],
          "suppressedMessages": [],
          "errorCount": 2,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component, OnInit, OnDestroy, inject, viewChild } from '@angular/core';\nimport { AlertService, DialogType, MessageSeverity } from '../../services/alert.service';\nimport { BaseChartDirective } from 'ng2-charts';\nimport { ChartEvent, ChartType } from 'chart.js';\nimport { NgbDropdown, NgbDropdownToggle, NgbDropdownMenu, NgbDropdownButtonItem, NgbDropdownItem }\n from '@ng-bootstrap/ng-bootstrap';\n\ninterface ChartEventArgs { event: ChartEvent; active: object[] }\n\n@Component({\n selector: 'app-statistics-demo',\n templateUrl: './statistics-demo.component.html',\n styleUrl: './statistics-demo.component.scss',\n imports: [BaseChartDirective, NgbDropdown, NgbDropdownToggle, NgbDropdownMenu, NgbDropdownButtonItem, NgbDropdownItem]\n})\nexport class StatisticsDemoComponent implements OnInit, OnDestroy {\n private alertService = inject(AlertService);\n\n chartOptions: object | undefined;\n chartType: ChartType = 'line';\n chartLabels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'];\n chartData = [\n {\n data: [65, 59, 80, 81, 56, 55],\n label: 'Series A',\n fill: 'origin',\n },\n {\n data: [28, 48, 40, 19, 86, 27],\n label: 'Series B',\n fill: 'origin',\n },\n {\n data: [18, 48, 77, 9, 100, 27],\n label: 'Series C',\n fill: 'origin',\n }\n ];\n\n timerReference: ReturnType<typeof setInterval> | undefined;\n\n readonly chart = viewChild.required(BaseChartDirective);\n\n ngOnInit() {\n this.refreshChartOptions();\n this.timerReference = setInterval(() => this.randomize(), 5000);\n }\n\n ngOnDestroy() {\n clearInterval(this.timerReference);\n }\n\n refreshChartOptions() {\n const baseOptions = {\n responsive: true,\n maintainAspectRatio: false,\n title: {\n display: false,\n fontSize: 16,\n text: 'Important Stuff'\n }\n };\n\n if (this.chartType != 'line') {\n this.chartOptions = baseOptions;\n }\n else {\n const lineChartOptions = {\n elements: {\n line: {\n tension: 0.5\n }\n }\n };\n\n this.chartOptions = { ...baseOptions, ...lineChartOptions };\n }\n }\n\n randomize(): void {\n for (const series of this.chartData) {\n for (let j = 0; j < series.data.length; j++) {\n series.data[j] = Math.floor((Math.random() angular.json aspnetcore-https.js eslint.config.js karma.conf.js lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules nuget.config package.json package-lock.json public quickapp.client.esproj QuickApp.report.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json 100) + 1);\n }\n }\n\n this.chart().update();\n }\n\n changeChartType(type: ChartType) {\n this.chartType = type;\n this.refreshChartOptions();\n }\n\n showMessage(msg: string): void {\n this.alertService.showMessage('Demo', msg, MessageSeverity.info);\n }\n\n showDialog(msg: string): void {\n this.alertService.showDialog(msg, DialogType.prompt, (val) => this.configure(true, val), () => this.configure(false));\n }\n\n configure(response: boolean, value?: string) {\n if (response) {\n this.alertService.showStickyMessage('Simulating...', '', MessageSeverity.wait);\n\n setTimeout(() => {\n this.alertService.resetStickyMessage();\n this.alertService.showMessage('Demo', `Your settings was successfully configured to \"${value}\"`, MessageSeverity.success);\n }, 2000);\n } else {\n this.alertService.showMessage('Demo', 'Operation cancelled by user', MessageSeverity.default);\n }\n }\n\n\n // eslint-disable-next-line @typescript-eslint/no-unused-vars\n chartHovered(e: ChartEventArgs): void {\n // Demo\n }\n\n // eslint-disable-next-line @typescript-eslint/no-unused-vars\n chartClicked(e: Partial<ChartEventArgs>): void {\n // Demo\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/services/notification-endpoint.service.ts",
          "messages": [
            {
              "ruleId": "@typescript-eslint/no-unused-vars",
              "message": "Definition for rule '@typescript-eslint/no-unused-vars' was not found.",
              "line": 98,
              "column": 3,
              "endLine": 98,
              "endColumn": 64,
              "severity": 2,
              "nodeType": null
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Observable, of, throwError } from 'rxjs';\n\n@Injectable({\n providedIn: 'root'\n})\nexport class NotificationEndpoint {\n private demoNotifications = [\n {\n id: 1,\n header: '20 New Products were added to your inventory by \"administrator\"',\n body: '20 new \"BMW M6\" were added to your stock by \"administrator\" on 5/28/2017 4:54:13 PM',\n isRead: true,\n isPinned: true,\n date: '2017-05-28T16:29:13.5877958'\n },\n {\n id: 2,\n header: '1 Product running low',\n body: 'You are running low on \"Nissan Patrol\". 2 Items remaining',\n isRead: false,\n isPinned: false,\n date: '2017-05-28T19:54:42.4144502'\n },\n {\n id: 3,\n header: 'Tomorrow is half day',\n body: 'Guys, tomorrow we close by midday. Please check in your sales before noon. Thanks. Alex.',\n isRead: false,\n isPinned: false,\n date: '2017-05-30T11:13:42.4144502'\n }\n ];\n\n\n getNotificationEndpoint<T>(notificationId: number) {\n const notification = this.demoNotifications.find(val => val.id === notificationId);\n return this.createDemoResponse(notification as T, notification ? null : 404);\n }\n\n getNotificationsEndpoint<T>(page: number, pageSize: number) {\n return this.createDemoResponse(this.demoNotifications as T, null, page, pageSize);\n }\n\n getUnreadNotificationsEndpoint<T>(userId?: string) {\n const unreadNotifications = this.demoNotifications.filter(val => !val.isRead);\n return this.createDemoResponse(unreadNotifications as T, null, userId);\n }\n\n getNewNotificationsEndpoint<T>(lastNotificationDate?: Date) {\n return this.createDemoResponse(this.demoNotifications as T, null, lastNotificationDate);\n }\n\n getPinUnpinNotificationEndpoint(notificationId: number, isPinned?: boolean) {\n const notification = this.demoNotifications.find(val => val.id === notificationId);\n\n if (notification) {\n if (isPinned == null) {\n isPinned = !notification.isPinned;\n }\n\n notification.isPinned = isPinned;\n notification.isRead = true;\n\n return this.createDemoResponse(null);\n } else {\n return this.createDemoResponse(null, 404);\n }\n }\n\n getReadUnreadNotificationEndpoint(notificationIds: number[], isRead: boolean) {\n for (const notificationId of notificationIds) {\n const notification = this.demoNotifications.find(val => val.id === notificationId);\n\n if (notification)\n notification.isRead = isRead;\n }\n\n return this.createDemoResponse(null);\n }\n\n getDeleteNotificationEndpoint<T>(notificationId: number) {\n const notification = this.demoNotifications.find(val => val.id === notificationId);\n\n if (notification)\n this.demoNotifications = this.demoNotifications.filter(val => val.id !== notificationId);\n\n return this.createDemoResponse(notification as T, notification ? null : 404);\n }\n\n // eslint-disable-next-line @typescript-eslint/no-unused-vars\n private createDemoResponse<T>(data: T, errorCode: number | null = null, ...args: unknown[]): Observable<T> {\n if (errorCode == null)\n return of(data);\n else\n return throwError(() => new HttpErrorResponse({ status: errorCode, error: 'Demo. An error occurred' }));\n }\n}\n",
          "usedDeprecatedRules": []
        }
      ],
      "all": [
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/controls/statistics-demo.component.ts",
          "messages": [
            {
              "ruleId": "@typescript-eslint/no-unused-vars",
              "message": "Definition for rule '@typescript-eslint/no-unused-vars' was not found.",
              "line": 123,
              "column": 3,
              "endLine": 123,
              "endColumn": 64,
              "severity": 2,
              "nodeType": null
            },
            {
              "ruleId": "@typescript-eslint/no-unused-vars",
              "message": "Definition for rule '@typescript-eslint/no-unused-vars' was not found.",
              "line": 128,
              "column": 3,
              "endLine": 128,
              "endColumn": 64,
              "severity": 2,
              "nodeType": null
            }
          ],
          "suppressedMessages": [],
          "errorCount": 2,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component, OnInit, OnDestroy, inject, viewChild } from '@angular/core';\nimport { AlertService, DialogType, MessageSeverity } from '../../services/alert.service';\nimport { BaseChartDirective } from 'ng2-charts';\nimport { ChartEvent, ChartType } from 'chart.js';\nimport { NgbDropdown, NgbDropdownToggle, NgbDropdownMenu, NgbDropdownButtonItem, NgbDropdownItem }\n from '@ng-bootstrap/ng-bootstrap';\n\ninterface ChartEventArgs { event: ChartEvent; active: object[] }\n\n@Component({\n selector: 'app-statistics-demo',\n templateUrl: './statistics-demo.component.html',\n styleUrl: './statistics-demo.component.scss',\n imports: [BaseChartDirective, NgbDropdown, NgbDropdownToggle, NgbDropdownMenu, NgbDropdownButtonItem, NgbDropdownItem]\n})\nexport class StatisticsDemoComponent implements OnInit, OnDestroy {\n private alertService = inject(AlertService);\n\n chartOptions: object | undefined;\n chartType: ChartType = 'line';\n chartLabels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'];\n chartData = [\n {\n data: [65, 59, 80, 81, 56, 55],\n label: 'Series A',\n fill: 'origin',\n },\n {\n data: [28, 48, 40, 19, 86, 27],\n label: 'Series B',\n fill: 'origin',\n },\n {\n data: [18, 48, 77, 9, 100, 27],\n label: 'Series C',\n fill: 'origin',\n }\n ];\n\n timerReference: ReturnType<typeof setInterval> | undefined;\n\n readonly chart = viewChild.required(BaseChartDirective);\n\n ngOnInit() {\n this.refreshChartOptions();\n this.timerReference = setInterval(() => this.randomize(), 5000);\n }\n\n ngOnDestroy() {\n clearInterval(this.timerReference);\n }\n\n refreshChartOptions() {\n const baseOptions = {\n responsive: true,\n maintainAspectRatio: false,\n title: {\n display: false,\n fontSize: 16,\n text: 'Important Stuff'\n }\n };\n\n if (this.chartType != 'line') {\n this.chartOptions = baseOptions;\n }\n else {\n const lineChartOptions = {\n elements: {\n line: {\n tension: 0.5\n }\n }\n };\n\n this.chartOptions = { ...baseOptions, ...lineChartOptions };\n }\n }\n\n randomize(): void {\n for (const series of this.chartData) {\n for (let j = 0; j < series.data.length; j++) {\n series.data[j] = Math.floor((Math.random() angular.json aspnetcore-https.js eslint.config.js karma.conf.js lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules nuget.config package.json package-lock.json public quickapp.client.esproj QuickApp.report.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json 100) + 1);\n }\n }\n\n this.chart().update();\n }\n\n changeChartType(type: ChartType) {\n this.chartType = type;\n this.refreshChartOptions();\n }\n\n showMessage(msg: string): void {\n this.alertService.showMessage('Demo', msg, MessageSeverity.info);\n }\n\n showDialog(msg: string): void {\n this.alertService.showDialog(msg, DialogType.prompt, (val) => this.configure(true, val), () => this.configure(false));\n }\n\n configure(response: boolean, value?: string) {\n if (response) {\n this.alertService.showStickyMessage('Simulating...', '', MessageSeverity.wait);\n\n setTimeout(() => {\n this.alertService.resetStickyMessage();\n this.alertService.showMessage('Demo', `Your settings was successfully configured to \"${value}\"`, MessageSeverity.success);\n }, 2000);\n } else {\n this.alertService.showMessage('Demo', 'Operation cancelled by user', MessageSeverity.default);\n }\n }\n\n\n // eslint-disable-next-line @typescript-eslint/no-unused-vars\n chartHovered(e: ChartEventArgs): void {\n // Demo\n }\n\n // eslint-disable-next-line @typescript-eslint/no-unused-vars\n chartClicked(e: Partial<ChartEventArgs>): void {\n // Demo\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/services/notification-endpoint.service.ts",
          "messages": [
            {
              "ruleId": "@typescript-eslint/no-unused-vars",
              "message": "Definition for rule '@typescript-eslint/no-unused-vars' was not found.",
              "line": 98,
              "column": 3,
              "endLine": 98,
              "endColumn": 64,
              "severity": 2,
              "nodeType": null
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Observable, of, throwError } from 'rxjs';\n\n@Injectable({\n providedIn: 'root'\n})\nexport class NotificationEndpoint {\n private demoNotifications = [\n {\n id: 1,\n header: '20 New Products were added to your inventory by \"administrator\"',\n body: '20 new \"BMW M6\" were added to your stock by \"administrator\" on 5/28/2017 4:54:13 PM',\n isRead: true,\n isPinned: true,\n date: '2017-05-28T16:29:13.5877958'\n },\n {\n id: 2,\n header: '1 Product running low',\n body: 'You are running low on \"Nissan Patrol\". 2 Items remaining',\n isRead: false,\n isPinned: false,\n date: '2017-05-28T19:54:42.4144502'\n },\n {\n id: 3,\n header: 'Tomorrow is half day',\n body: 'Guys, tomorrow we close by midday. Please check in your sales before noon. Thanks. Alex.',\n isRead: false,\n isPinned: false,\n date: '2017-05-30T11:13:42.4144502'\n }\n ];\n\n\n getNotificationEndpoint<T>(notificationId: number) {\n const notification = this.demoNotifications.find(val => val.id === notificationId);\n return this.createDemoResponse(notification as T, notification ? null : 404);\n }\n\n getNotificationsEndpoint<T>(page: number, pageSize: number) {\n return this.createDemoResponse(this.demoNotifications as T, null, page, pageSize);\n }\n\n getUnreadNotificationsEndpoint<T>(userId?: string) {\n const unreadNotifications = this.demoNotifications.filter(val => !val.isRead);\n return this.createDemoResponse(unreadNotifications as T, null, userId);\n }\n\n getNewNotificationsEndpoint<T>(lastNotificationDate?: Date) {\n return this.createDemoResponse(this.demoNotifications as T, null, lastNotificationDate);\n }\n\n getPinUnpinNotificationEndpoint(notificationId: number, isPinned?: boolean) {\n const notification = this.demoNotifications.find(val => val.id === notificationId);\n\n if (notification) {\n if (isPinned == null) {\n isPinned = !notification.isPinned;\n }\n\n notification.isPinned = isPinned;\n notification.isRead = true;\n\n return this.createDemoResponse(null);\n } else {\n return this.createDemoResponse(null, 404);\n }\n }\n\n getReadUnreadNotificationEndpoint(notificationIds: number[], isRead: boolean) {\n for (const notificationId of notificationIds) {\n const notification = this.demoNotifications.find(val => val.id === notificationId);\n\n if (notification)\n notification.isRead = isRead;\n }\n\n return this.createDemoResponse(null);\n }\n\n getDeleteNotificationEndpoint<T>(notificationId: number) {\n const notification = this.demoNotifications.find(val => val.id === notificationId);\n\n if (notification)\n this.demoNotifications = this.demoNotifications.filter(val => val.id !== notificationId);\n\n return this.createDemoResponse(notification as T, notification ? null : 404);\n }\n\n // eslint-disable-next-line @typescript-eslint/no-unused-vars\n private createDemoResponse<T>(data: T, errorCode: number | null = null, ...args: unknown[]): Observable<T> {\n if (errorCode == null)\n return of(data);\n else\n return throwError(() => new HttpErrorResponse({ status: errorCode, error: 'Demo. An error occurred' }));\n }\n}\n",
          "usedDeprecatedRules": []
        }
      ]
    }
  },
  "after": {
    "quickapp.client": {
      "recommended": [
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/controls/statistics-demo.component.ts",
          "messages": [
            {
              "ruleId": "@typescript-eslint/no-unused-vars",
              "message": "Definition for rule '@typescript-eslint/no-unused-vars' was not found.",
              "line": 123,
              "column": 3,
              "endLine": 123,
              "endColumn": 64,
              "severity": 2,
              "nodeType": null
            },
            {
              "ruleId": "@typescript-eslint/no-unused-vars",
              "message": "Definition for rule '@typescript-eslint/no-unused-vars' was not found.",
              "line": 128,
              "column": 3,
              "endLine": 128,
              "endColumn": 64,
              "severity": 2,
              "nodeType": null
            }
          ],
          "suppressedMessages": [],
          "errorCount": 2,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component, OnInit, OnDestroy, inject, viewChild } from '@angular/core';\nimport { AlertService, DialogType, MessageSeverity } from '../../services/alert.service';\nimport { BaseChartDirective } from 'ng2-charts';\nimport { ChartEvent, ChartType } from 'chart.js';\nimport { NgbDropdown, NgbDropdownToggle, NgbDropdownMenu, NgbDropdownButtonItem, NgbDropdownItem }\n from '@ng-bootstrap/ng-bootstrap';\n\ninterface ChartEventArgs { event: ChartEvent; active: object[] }\n\n@Component({\n selector: 'app-statistics-demo',\n templateUrl: './statistics-demo.component.html',\n styleUrl: './statistics-demo.component.scss',\n imports: [BaseChartDirective, NgbDropdown, NgbDropdownToggle, NgbDropdownMenu, NgbDropdownButtonItem, NgbDropdownItem]\n})\nexport class StatisticsDemoComponent implements OnInit, OnDestroy {\n private alertService = inject(AlertService);\n\n chartOptions: object | undefined;\n chartType: ChartType = 'line';\n chartLabels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'];\n chartData = [\n {\n data: [65, 59, 80, 81, 56, 55],\n label: 'Series A',\n fill: 'origin',\n },\n {\n data: [28, 48, 40, 19, 86, 27],\n label: 'Series B',\n fill: 'origin',\n },\n {\n data: [18, 48, 77, 9, 100, 27],\n label: 'Series C',\n fill: 'origin',\n }\n ];\n\n timerReference: ReturnType<typeof setInterval> | undefined;\n\n readonly chart = viewChild.required(BaseChartDirective);\n\n ngOnInit() {\n this.refreshChartOptions();\n this.timerReference = setInterval(() => this.randomize(), 5000);\n }\n\n ngOnDestroy() {\n clearInterval(this.timerReference);\n }\n\n refreshChartOptions() {\n const baseOptions = {\n responsive: true,\n maintainAspectRatio: false,\n title: {\n display: false,\n fontSize: 16,\n text: 'Important Stuff'\n }\n };\n\n if (this.chartType != 'line') {\n this.chartOptions = baseOptions;\n }\n else {\n const lineChartOptions = {\n elements: {\n line: {\n tension: 0.5\n }\n }\n };\n\n this.chartOptions = { ...baseOptions, ...lineChartOptions };\n }\n }\n\n randomize(): void {\n for (const series of this.chartData) {\n for (let j = 0; j < series.data.length; j++) {\n series.data[j] = Math.floor((Math.random() angular.json aspnetcore-https.js eslint.config.js karma.conf.js lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules nuget.config package.json package-lock.json public quickapp.client.esproj QuickApp.report.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json 100) + 1);\n }\n }\n\n this.chart().update();\n }\n\n changeChartType(type: ChartType) {\n this.chartType = type;\n this.refreshChartOptions();\n }\n\n showMessage(msg: string): void {\n this.alertService.showMessage('Demo', msg, MessageSeverity.info);\n }\n\n showDialog(msg: string): void {\n this.alertService.showDialog(msg, DialogType.prompt, (val) => this.configure(true, val), () => this.configure(false));\n }\n\n configure(response: boolean, value?: string) {\n if (response) {\n this.alertService.showStickyMessage('Simulating...', '', MessageSeverity.wait);\n\n setTimeout(() => {\n this.alertService.resetStickyMessage();\n this.alertService.showMessage('Demo', `Your settings was successfully configured to \"${value}\"`, MessageSeverity.success);\n }, 2000);\n } else {\n this.alertService.showMessage('Demo', 'Operation cancelled by user', MessageSeverity.default);\n }\n }\n\n\n // eslint-disable-next-line @typescript-eslint/no-unused-vars\n chartHovered(e: ChartEventArgs): void {\n // Demo\n }\n\n // eslint-disable-next-line @typescript-eslint/no-unused-vars\n chartClicked(e: Partial<ChartEventArgs>): void {\n // Demo\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/services/notification-endpoint.service.ts",
          "messages": [
            {
              "ruleId": "@typescript-eslint/no-unused-vars",
              "message": "Definition for rule '@typescript-eslint/no-unused-vars' was not found.",
              "line": 98,
              "column": 3,
              "endLine": 98,
              "endColumn": 64,
              "severity": 2,
              "nodeType": null
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Observable, of, throwError } from 'rxjs';\n\n@Injectable({\n providedIn: 'root'\n})\nexport class NotificationEndpoint {\n private demoNotifications = [\n {\n id: 1,\n header: '20 New Products were added to your inventory by \"administrator\"',\n body: '20 new \"BMW M6\" were added to your stock by \"administrator\" on 5/28/2017 4:54:13 PM',\n isRead: true,\n isPinned: true,\n date: '2017-05-28T16:29:13.5877958'\n },\n {\n id: 2,\n header: '1 Product running low',\n body: 'You are running low on \"Nissan Patrol\". 2 Items remaining',\n isRead: false,\n isPinned: false,\n date: '2017-05-28T19:54:42.4144502'\n },\n {\n id: 3,\n header: 'Tomorrow is half day',\n body: 'Guys, tomorrow we close by midday. Please check in your sales before noon. Thanks. Alex.',\n isRead: false,\n isPinned: false,\n date: '2017-05-30T11:13:42.4144502'\n }\n ];\n\n\n getNotificationEndpoint<T>(notificationId: number) {\n const notification = this.demoNotifications.find(val => val.id === notificationId);\n return this.createDemoResponse(notification as T, notification ? null : 404);\n }\n\n getNotificationsEndpoint<T>(page: number, pageSize: number) {\n return this.createDemoResponse(this.demoNotifications as T, null, page, pageSize);\n }\n\n getUnreadNotificationsEndpoint<T>(userId?: string) {\n const unreadNotifications = this.demoNotifications.filter(val => !val.isRead);\n return this.createDemoResponse(unreadNotifications as T, null, userId);\n }\n\n getNewNotificationsEndpoint<T>(lastNotificationDate?: Date) {\n return this.createDemoResponse(this.demoNotifications as T, null, lastNotificationDate);\n }\n\n getPinUnpinNotificationEndpoint(notificationId: number, isPinned?: boolean) {\n const notification = this.demoNotifications.find(val => val.id === notificationId);\n\n if (notification) {\n if (isPinned == null) {\n isPinned = !notification.isPinned;\n }\n\n notification.isPinned = isPinned;\n notification.isRead = true;\n\n return this.createDemoResponse(null);\n } else {\n return this.createDemoResponse(null, 404);\n }\n }\n\n getReadUnreadNotificationEndpoint(notificationIds: number[], isRead: boolean) {\n for (const notificationId of notificationIds) {\n const notification = this.demoNotifications.find(val => val.id === notificationId);\n\n if (notification)\n notification.isRead = isRead;\n }\n\n return this.createDemoResponse(null);\n }\n\n getDeleteNotificationEndpoint<T>(notificationId: number) {\n const notification = this.demoNotifications.find(val => val.id === notificationId);\n\n if (notification)\n this.demoNotifications = this.demoNotifications.filter(val => val.id !== notificationId);\n\n return this.createDemoResponse(notification as T, notification ? null : 404);\n }\n\n // eslint-disable-next-line @typescript-eslint/no-unused-vars\n private createDemoResponse<T>(data: T, errorCode: number | null = null, ...args: unknown[]): Observable<T> {\n if (errorCode == null)\n return of(data);\n else\n return throwError(() => new HttpErrorResponse({ status: errorCode, error: 'Demo. An error occurred' }));\n }\n}\n",
          "usedDeprecatedRules": []
        }
      ],
      "all": [
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/controls/statistics-demo.component.ts",
          "messages": [
            {
              "ruleId": "@typescript-eslint/no-unused-vars",
              "message": "Definition for rule '@typescript-eslint/no-unused-vars' was not found.",
              "line": 123,
              "column": 3,
              "endLine": 123,
              "endColumn": 64,
              "severity": 2,
              "nodeType": null
            },
            {
              "ruleId": "@typescript-eslint/no-unused-vars",
              "message": "Definition for rule '@typescript-eslint/no-unused-vars' was not found.",
              "line": 128,
              "column": 3,
              "endLine": 128,
              "endColumn": 64,
              "severity": 2,
              "nodeType": null
            }
          ],
          "suppressedMessages": [],
          "errorCount": 2,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component, OnInit, OnDestroy, inject, viewChild } from '@angular/core';\nimport { AlertService, DialogType, MessageSeverity } from '../../services/alert.service';\nimport { BaseChartDirective } from 'ng2-charts';\nimport { ChartEvent, ChartType } from 'chart.js';\nimport { NgbDropdown, NgbDropdownToggle, NgbDropdownMenu, NgbDropdownButtonItem, NgbDropdownItem }\n from '@ng-bootstrap/ng-bootstrap';\n\ninterface ChartEventArgs { event: ChartEvent; active: object[] }\n\n@Component({\n selector: 'app-statistics-demo',\n templateUrl: './statistics-demo.component.html',\n styleUrl: './statistics-demo.component.scss',\n imports: [BaseChartDirective, NgbDropdown, NgbDropdownToggle, NgbDropdownMenu, NgbDropdownButtonItem, NgbDropdownItem]\n})\nexport class StatisticsDemoComponent implements OnInit, OnDestroy {\n private alertService = inject(AlertService);\n\n chartOptions: object | undefined;\n chartType: ChartType = 'line';\n chartLabels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'];\n chartData = [\n {\n data: [65, 59, 80, 81, 56, 55],\n label: 'Series A',\n fill: 'origin',\n },\n {\n data: [28, 48, 40, 19, 86, 27],\n label: 'Series B',\n fill: 'origin',\n },\n {\n data: [18, 48, 77, 9, 100, 27],\n label: 'Series C',\n fill: 'origin',\n }\n ];\n\n timerReference: ReturnType<typeof setInterval> | undefined;\n\n readonly chart = viewChild.required(BaseChartDirective);\n\n ngOnInit() {\n this.refreshChartOptions();\n this.timerReference = setInterval(() => this.randomize(), 5000);\n }\n\n ngOnDestroy() {\n clearInterval(this.timerReference);\n }\n\n refreshChartOptions() {\n const baseOptions = {\n responsive: true,\n maintainAspectRatio: false,\n title: {\n display: false,\n fontSize: 16,\n text: 'Important Stuff'\n }\n };\n\n if (this.chartType != 'line') {\n this.chartOptions = baseOptions;\n }\n else {\n const lineChartOptions = {\n elements: {\n line: {\n tension: 0.5\n }\n }\n };\n\n this.chartOptions = { ...baseOptions, ...lineChartOptions };\n }\n }\n\n randomize(): void {\n for (const series of this.chartData) {\n for (let j = 0; j < series.data.length; j++) {\n series.data[j] = Math.floor((Math.random() angular.json aspnetcore-https.js eslint.config.js karma.conf.js lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules nuget.config package.json package-lock.json public quickapp.client.esproj QuickApp.report.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json 100) + 1);\n }\n }\n\n this.chart().update();\n }\n\n changeChartType(type: ChartType) {\n this.chartType = type;\n this.refreshChartOptions();\n }\n\n showMessage(msg: string): void {\n this.alertService.showMessage('Demo', msg, MessageSeverity.info);\n }\n\n showDialog(msg: string): void {\n this.alertService.showDialog(msg, DialogType.prompt, (val) => this.configure(true, val), () => this.configure(false));\n }\n\n configure(response: boolean, value?: string) {\n if (response) {\n this.alertService.showStickyMessage('Simulating...', '', MessageSeverity.wait);\n\n setTimeout(() => {\n this.alertService.resetStickyMessage();\n this.alertService.showMessage('Demo', `Your settings was successfully configured to \"${value}\"`, MessageSeverity.success);\n }, 2000);\n } else {\n this.alertService.showMessage('Demo', 'Operation cancelled by user', MessageSeverity.default);\n }\n }\n\n\n // eslint-disable-next-line @typescript-eslint/no-unused-vars\n chartHovered(e: ChartEventArgs): void {\n // Demo\n }\n\n // eslint-disable-next-line @typescript-eslint/no-unused-vars\n chartClicked(e: Partial<ChartEventArgs>): void {\n // Demo\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/services/notification-endpoint.service.ts",
          "messages": [
            {
              "ruleId": "@typescript-eslint/no-unused-vars",
              "message": "Definition for rule '@typescript-eslint/no-unused-vars' was not found.",
              "line": 98,
              "column": 3,
              "endLine": 98,
              "endColumn": 64,
              "severity": 2,
              "nodeType": null
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Observable, of, throwError } from 'rxjs';\n\n@Injectable({\n providedIn: 'root'\n})\nexport class NotificationEndpoint {\n private demoNotifications = [\n {\n id: 1,\n header: '20 New Products were added to your inventory by \"administrator\"',\n body: '20 new \"BMW M6\" were added to your stock by \"administrator\" on 5/28/2017 4:54:13 PM',\n isRead: true,\n isPinned: true,\n date: '2017-05-28T16:29:13.5877958'\n },\n {\n id: 2,\n header: '1 Product running low',\n body: 'You are running low on \"Nissan Patrol\". 2 Items remaining',\n isRead: false,\n isPinned: false,\n date: '2017-05-28T19:54:42.4144502'\n },\n {\n id: 3,\n header: 'Tomorrow is half day',\n body: 'Guys, tomorrow we close by midday. Please check in your sales before noon. Thanks. Alex.',\n isRead: false,\n isPinned: false,\n date: '2017-05-30T11:13:42.4144502'\n }\n ];\n\n\n getNotificationEndpoint<T>(notificationId: number) {\n const notification = this.demoNotifications.find(val => val.id === notificationId);\n return this.createDemoResponse(notification as T, notification ? null : 404);\n }\n\n getNotificationsEndpoint<T>(page: number, pageSize: number) {\n return this.createDemoResponse(this.demoNotifications as T, null, page, pageSize);\n }\n\n getUnreadNotificationsEndpoint<T>(userId?: string) {\n const unreadNotifications = this.demoNotifications.filter(val => !val.isRead);\n return this.createDemoResponse(unreadNotifications as T, null, userId);\n }\n\n getNewNotificationsEndpoint<T>(lastNotificationDate?: Date) {\n return this.createDemoResponse(this.demoNotifications as T, null, lastNotificationDate);\n }\n\n getPinUnpinNotificationEndpoint(notificationId: number, isPinned?: boolean) {\n const notification = this.demoNotifications.find(val => val.id === notificationId);\n\n if (notification) {\n if (isPinned == null) {\n isPinned = !notification.isPinned;\n }\n\n notification.isPinned = isPinned;\n notification.isRead = true;\n\n return this.createDemoResponse(null);\n } else {\n return this.createDemoResponse(null, 404);\n }\n }\n\n getReadUnreadNotificationEndpoint(notificationIds: number[], isRead: boolean) {\n for (const notificationId of notificationIds) {\n const notification = this.demoNotifications.find(val => val.id === notificationId);\n\n if (notification)\n notification.isRead = isRead;\n }\n\n return this.createDemoResponse(null);\n }\n\n getDeleteNotificationEndpoint<T>(notificationId: number) {\n const notification = this.demoNotifications.find(val => val.id === notificationId);\n\n if (notification)\n this.demoNotifications = this.demoNotifications.filter(val => val.id !== notificationId);\n\n return this.createDemoResponse(notification as T, notification ? null : 404);\n }\n\n // eslint-disable-next-line @typescript-eslint/no-unused-vars\n private createDemoResponse<T>(data: T, errorCode: number | null = null, ...args: unknown[]): Observable<T> {\n if (errorCode == null)\n return of(data);\n else\n return throwError(() => new HttpErrorResponse({ status: errorCode, error: 'Demo. An error occurred' }));\n }\n}\n",
          "usedDeprecatedRules": []
        }
      ]
    }
  }
}
