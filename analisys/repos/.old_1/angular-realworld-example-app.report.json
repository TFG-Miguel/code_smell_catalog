{
  "repo": {
    "HEAD": {
      "commit": "4f9faa79ff31ce3598929e04e352bfeaa9fc9c7a",
      "author": "migudel",
      "date": "Sat Mar 29 20:44:27 2025 +0100",
      "message": "INICIO DE PRUEBAS"
    },
    "url": "https://github.com/gothinkster/angular-realworld-example-app"
  },
  "before": {
    "angular-conduit": {
      "recommended": [
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/core/auth/if-authenticated.directive.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/directive-selector",
              "severity": 2,
              "message": "The selector should start with one of these prefixes: \"app\" (https://angular.dev/style-guide#style-02-08)",
              "line": 14,
              "column": 13,
              "nodeType": "Literal",
              "messageId": "prefixFailure",
              "endLine": 14,
              "endColumn": 32
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n DestroyRef,\n Directive,\n inject,\n Input,\n OnInit,\n TemplateRef,\n ViewContainerRef,\n} from \"@angular/core\";\nimport { UserService } from \"./services/user.service\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Directive({\n selector: \"[ifAuthenticated]\",\n standalone: true,\n})\nexport class IfAuthenticatedDirective<T> implements OnInit {\n destroyRef = inject(DestroyRef);\n constructor(\n private templateRef: TemplateRef<T>,\n private userService: UserService,\n private viewContainer: ViewContainerRef,\n ) {}\n\n condition: boolean = false;\n hasView = false;\n\n ngOnInit() {\n this.userService.isAuthenticated\n .pipe(takeUntilDestroyed(this.destroyRef))\n .subscribe((isAuthenticated: boolean) => {\n const authRequired = isAuthenticated && this.condition;\n const unauthRequired = !isAuthenticated && !this.condition;\n\n if ((authRequired || unauthRequired) && !this.hasView) {\n this.viewContainer.createEmbeddedView(this.templateRef);\n this.hasView = true;\n } else if (this.hasView) {\n this.viewContainer.clear();\n this.hasView = false;\n }\n });\n }\n\n @Input() set ifAuthenticated(condition: boolean) {\n this.condition = condition;\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/features/article/components/favorite-button.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/no-output-native",
              "severity": 2,
              "message": "Output bindings, including aliases, should not be named as standard DOM events",
              "line": 40,
              "column": 13,
              "nodeType": "Identifier",
              "messageId": "noOutputNative",
              "endLine": 40,
              "endColumn": 19
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n Component,\n DestroyRef,\n EventEmitter,\n inject,\n Input,\n Output,\n} from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { EMPTY, switchMap } from \"rxjs\";\nimport { NgClass } from \"@angular/common\";\nimport { ArticlesService } from \"../services/articles.service\";\nimport { UserService } from \"../../../core/auth/services/user.service\";\nimport { Article } from \"../models/article.model\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Component({\n selector: \"app-favorite-button\",\n template: `\n <button\n class=\"btn btn-sm\"\n [ngClass]=\"{\n disabled: isSubmitting,\n 'btn-outline-primary': !article.favorited,\n 'btn-primary': article.favorited\n }\"\n (click)=\"toggleFavorite()\"\n >\n <i class=\"ion-heart\"></i> <ng-content></ng-content>\n </button>\n `,\n imports: [NgClass],\n standalone: true,\n})\nexport class FavoriteButtonComponent {\n destroyRef = inject(DestroyRef);\n isSubmitting = false;\n\n @Input() article!: Article;\n @Output() toggle = new EventEmitter<boolean>();\n\n constructor(\n private readonly articleService: ArticlesService,\n private readonly router: Router,\n private readonly userService: UserService,\n ) {}\n\n toggleFavorite(): void {\n this.isSubmitting = true;\n\n this.userService.isAuthenticated\n .pipe(\n switchMap((authenticated) => {\n if (!authenticated) {\n void this.router.navigate([\"/register\"]);\n return EMPTY;\n }\n\n if (!this.article.favorited) {\n return this.articleService.favorite(this.article.slug);\n } else {\n return this.articleService.unfavorite(this.article.slug);\n }\n }),\n takeUntilDestroyed(this.destroyRef),\n )\n .subscribe({\n next: () => {\n this.isSubmitting = false;\n this.toggle.emit(!this.article.favorited);\n },\n error: () => (this.isSubmitting = false),\n });\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/features/profile/components/follow-button.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/no-output-native",
              "severity": 2,
              "message": "Output bindings, including aliases, should not be named as standard DOM events",
              "line": 40,
              "column": 13,
              "nodeType": "Identifier",
              "messageId": "noOutputNative",
              "endLine": 40,
              "endColumn": 19
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n Component,\n DestroyRef,\n EventEmitter,\n inject,\n Input,\n Output,\n} from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { switchMap } from \"rxjs/operators\";\nimport { EMPTY } from \"rxjs\";\nimport { ProfileService } from \"../services/profile.service\";\nimport { UserService } from \"../../../core/auth/services/user.service\";\nimport { Profile } from \"../models/profile.model\";\nimport { NgClass } from \"@angular/common\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Component({\n selector: \"app-follow-button\",\n template: `\n <button\n class=\"btn btn-sm action-btn\"\n [ngClass]=\"{\n disabled: isSubmitting,\n 'btn-outline-secondary': !profile.following,\n 'btn-secondary': profile.following\n }\"\n (click)=\"toggleFollowing()\"\n >\n <i class=\"ion-plus-round\"></i>\n &nbsp;\n {{ profile.following ? \"Unfollow\" : \"Follow\" }} {{ profile.username }}\n </button>\n `,\n imports: [NgClass],\n standalone: true,\n})\nexport class FollowButtonComponent {\n @Input() profile!: Profile;\n @Output() toggle = new EventEmitter<Profile>();\n isSubmitting = false;\n destroyRef = inject(DestroyRef);\n\n constructor(\n private readonly profileService: ProfileService,\n private readonly router: Router,\n private readonly userService: UserService,\n ) {}\n\n toggleFollowing(): void {\n this.isSubmitting = true;\n\n this.userService.isAuthenticated\n .pipe(\n switchMap((isAuthenticated: boolean) => {\n if (!isAuthenticated) {\n void this.router.navigate([\"/login\"]);\n return EMPTY;\n }\n\n if (!this.profile.following) {\n return this.profileService.follow(this.profile.username);\n } else {\n return this.profileService.unfollow(this.profile.username);\n }\n }),\n takeUntilDestroyed(this.destroyRef),\n )\n .subscribe({\n next: (profile) => {\n this.isSubmitting = false;\n this.toggle.emit(profile);\n },\n error: () => (this.isSubmitting = false),\n });\n }\n}\n",
          "usedDeprecatedRules": []
        }
      ],
      "all": [
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/core/auth/if-authenticated.directive.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/directive-selector",
              "severity": 2,
              "message": "The selector should start with one of these prefixes: \"app\" (https://angular.dev/style-guide#style-02-08)",
              "line": 14,
              "column": 13,
              "nodeType": "Literal",
              "messageId": "prefixFailure",
              "endLine": 14,
              "endColumn": 32
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n DestroyRef,\n Directive,\n inject,\n Input,\n OnInit,\n TemplateRef,\n ViewContainerRef,\n} from \"@angular/core\";\nimport { UserService } from \"./services/user.service\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Directive({\n selector: \"[ifAuthenticated]\",\n standalone: true,\n})\nexport class IfAuthenticatedDirective<T> implements OnInit {\n destroyRef = inject(DestroyRef);\n constructor(\n private templateRef: TemplateRef<T>,\n private userService: UserService,\n private viewContainer: ViewContainerRef,\n ) {}\n\n condition: boolean = false;\n hasView = false;\n\n ngOnInit() {\n this.userService.isAuthenticated\n .pipe(takeUntilDestroyed(this.destroyRef))\n .subscribe((isAuthenticated: boolean) => {\n const authRequired = isAuthenticated && this.condition;\n const unauthRequired = !isAuthenticated && !this.condition;\n\n if ((authRequired || unauthRequired) && !this.hasView) {\n this.viewContainer.createEmbeddedView(this.templateRef);\n this.hasView = true;\n } else if (this.hasView) {\n this.viewContainer.clear();\n this.hasView = false;\n }\n });\n }\n\n @Input() set ifAuthenticated(condition: boolean) {\n this.condition = condition;\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/features/article/components/favorite-button.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/no-output-native",
              "severity": 2,
              "message": "Output bindings, including aliases, should not be named as standard DOM events",
              "line": 40,
              "column": 13,
              "nodeType": "Identifier",
              "messageId": "noOutputNative",
              "endLine": 40,
              "endColumn": 19
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n Component,\n DestroyRef,\n EventEmitter,\n inject,\n Input,\n Output,\n} from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { EMPTY, switchMap } from \"rxjs\";\nimport { NgClass } from \"@angular/common\";\nimport { ArticlesService } from \"../services/articles.service\";\nimport { UserService } from \"../../../core/auth/services/user.service\";\nimport { Article } from \"../models/article.model\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Component({\n selector: \"app-favorite-button\",\n template: `\n <button\n class=\"btn btn-sm\"\n [ngClass]=\"{\n disabled: isSubmitting,\n 'btn-outline-primary': !article.favorited,\n 'btn-primary': article.favorited\n }\"\n (click)=\"toggleFavorite()\"\n >\n <i class=\"ion-heart\"></i> <ng-content></ng-content>\n </button>\n `,\n imports: [NgClass],\n standalone: true,\n})\nexport class FavoriteButtonComponent {\n destroyRef = inject(DestroyRef);\n isSubmitting = false;\n\n @Input() article!: Article;\n @Output() toggle = new EventEmitter<boolean>();\n\n constructor(\n private readonly articleService: ArticlesService,\n private readonly router: Router,\n private readonly userService: UserService,\n ) {}\n\n toggleFavorite(): void {\n this.isSubmitting = true;\n\n this.userService.isAuthenticated\n .pipe(\n switchMap((authenticated) => {\n if (!authenticated) {\n void this.router.navigate([\"/register\"]);\n return EMPTY;\n }\n\n if (!this.article.favorited) {\n return this.articleService.favorite(this.article.slug);\n } else {\n return this.articleService.unfavorite(this.article.slug);\n }\n }),\n takeUntilDestroyed(this.destroyRef),\n )\n .subscribe({\n next: () => {\n this.isSubmitting = false;\n this.toggle.emit(!this.article.favorited);\n },\n error: () => (this.isSubmitting = false),\n });\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/features/profile/components/follow-button.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/no-output-native",
              "severity": 2,
              "message": "Output bindings, including aliases, should not be named as standard DOM events",
              "line": 40,
              "column": 13,
              "nodeType": "Identifier",
              "messageId": "noOutputNative",
              "endLine": 40,
              "endColumn": 19
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n Component,\n DestroyRef,\n EventEmitter,\n inject,\n Input,\n Output,\n} from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { switchMap } from \"rxjs/operators\";\nimport { EMPTY } from \"rxjs\";\nimport { ProfileService } from \"../services/profile.service\";\nimport { UserService } from \"../../../core/auth/services/user.service\";\nimport { Profile } from \"../models/profile.model\";\nimport { NgClass } from \"@angular/common\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Component({\n selector: \"app-follow-button\",\n template: `\n <button\n class=\"btn btn-sm action-btn\"\n [ngClass]=\"{\n disabled: isSubmitting,\n 'btn-outline-secondary': !profile.following,\n 'btn-secondary': profile.following\n }\"\n (click)=\"toggleFollowing()\"\n >\n <i class=\"ion-plus-round\"></i>\n &nbsp;\n {{ profile.following ? \"Unfollow\" : \"Follow\" }} {{ profile.username }}\n </button>\n `,\n imports: [NgClass],\n standalone: true,\n})\nexport class FollowButtonComponent {\n @Input() profile!: Profile;\n @Output() toggle = new EventEmitter<Profile>();\n isSubmitting = false;\n destroyRef = inject(DestroyRef);\n\n constructor(\n private readonly profileService: ProfileService,\n private readonly router: Router,\n private readonly userService: UserService,\n ) {}\n\n toggleFollowing(): void {\n this.isSubmitting = true;\n\n this.userService.isAuthenticated\n .pipe(\n switchMap((isAuthenticated: boolean) => {\n if (!isAuthenticated) {\n void this.router.navigate([\"/login\"]);\n return EMPTY;\n }\n\n if (!this.profile.following) {\n return this.profileService.follow(this.profile.username);\n } else {\n return this.profileService.unfollow(this.profile.username);\n }\n }),\n takeUntilDestroyed(this.destroyRef),\n )\n .subscribe({\n next: (profile) => {\n this.isSubmitting = false;\n this.toggle.emit(profile);\n },\n error: () => (this.isSubmitting = false),\n });\n }\n}\n",
          "usedDeprecatedRules": []
        }
      ]
    }
  },
  "after": {
    "angular-conduit": {
      "recommended": [
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/core/auth/if-authenticated.directive.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/directive-selector",
              "severity": 2,
              "message": "The selector should start with one of these prefixes: \"app\" (https://angular.dev/style-guide#style-02-08)",
              "line": 14,
              "column": 13,
              "nodeType": "Literal",
              "messageId": "prefixFailure",
              "endLine": 14,
              "endColumn": 32
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n DestroyRef,\n Directive,\n inject,\n Input,\n OnInit,\n TemplateRef,\n ViewContainerRef,\n} from \"@angular/core\";\nimport { UserService } from \"./services/user.service\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Directive({\n selector: \"[ifAuthenticated]\",\n standalone: true,\n})\nexport class IfAuthenticatedDirective<T> implements OnInit {\n destroyRef = inject(DestroyRef);\n constructor(\n private templateRef: TemplateRef<T>,\n private userService: UserService,\n private viewContainer: ViewContainerRef,\n ) {}\n\n condition: boolean = false;\n hasView = false;\n\n ngOnInit() {\n this.userService.isAuthenticated\n .pipe(takeUntilDestroyed(this.destroyRef))\n .subscribe((isAuthenticated: boolean) => {\n const authRequired = isAuthenticated && this.condition;\n const unauthRequired = !isAuthenticated && !this.condition;\n\n if ((authRequired || unauthRequired) && !this.hasView) {\n this.viewContainer.createEmbeddedView(this.templateRef);\n this.hasView = true;\n } else if (this.hasView) {\n this.viewContainer.clear();\n this.hasView = false;\n }\n });\n }\n\n @Input() set ifAuthenticated(condition: boolean) {\n this.condition = condition;\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/features/article/components/favorite-button.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/no-output-native",
              "severity": 2,
              "message": "Output bindings, including aliases, should not be named as standard DOM events",
              "line": 40,
              "column": 13,
              "nodeType": "Identifier",
              "messageId": "noOutputNative",
              "endLine": 40,
              "endColumn": 19
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n Component,\n DestroyRef,\n EventEmitter,\n inject,\n Input,\n Output,\n} from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { EMPTY, switchMap } from \"rxjs\";\nimport { NgClass } from \"@angular/common\";\nimport { ArticlesService } from \"../services/articles.service\";\nimport { UserService } from \"../../../core/auth/services/user.service\";\nimport { Article } from \"../models/article.model\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Component({\n selector: \"app-favorite-button\",\n template: `\n <button\n class=\"btn btn-sm\"\n [ngClass]=\"{\n disabled: isSubmitting,\n 'btn-outline-primary': !article.favorited,\n 'btn-primary': article.favorited\n }\"\n (click)=\"toggleFavorite()\"\n >\n <i class=\"ion-heart\"></i> <ng-content></ng-content>\n </button>\n `,\n imports: [NgClass],\n standalone: true,\n})\nexport class FavoriteButtonComponent {\n destroyRef = inject(DestroyRef);\n isSubmitting = false;\n\n @Input() article!: Article;\n @Output() toggle = new EventEmitter<boolean>();\n\n constructor(\n private readonly articleService: ArticlesService,\n private readonly router: Router,\n private readonly userService: UserService,\n ) {}\n\n toggleFavorite(): void {\n this.isSubmitting = true;\n\n this.userService.isAuthenticated\n .pipe(\n switchMap((authenticated) => {\n if (!authenticated) {\n void this.router.navigate([\"/register\"]);\n return EMPTY;\n }\n\n if (!this.article.favorited) {\n return this.articleService.favorite(this.article.slug);\n } else {\n return this.articleService.unfavorite(this.article.slug);\n }\n }),\n takeUntilDestroyed(this.destroyRef),\n )\n .subscribe({\n next: () => {\n this.isSubmitting = false;\n this.toggle.emit(!this.article.favorited);\n },\n error: () => (this.isSubmitting = false),\n });\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/features/profile/components/follow-button.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/no-output-native",
              "severity": 2,
              "message": "Output bindings, including aliases, should not be named as standard DOM events",
              "line": 40,
              "column": 13,
              "nodeType": "Identifier",
              "messageId": "noOutputNative",
              "endLine": 40,
              "endColumn": 19
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n Component,\n DestroyRef,\n EventEmitter,\n inject,\n Input,\n Output,\n} from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { switchMap } from \"rxjs/operators\";\nimport { EMPTY } from \"rxjs\";\nimport { ProfileService } from \"../services/profile.service\";\nimport { UserService } from \"../../../core/auth/services/user.service\";\nimport { Profile } from \"../models/profile.model\";\nimport { NgClass } from \"@angular/common\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Component({\n selector: \"app-follow-button\",\n template: `\n <button\n class=\"btn btn-sm action-btn\"\n [ngClass]=\"{\n disabled: isSubmitting,\n 'btn-outline-secondary': !profile.following,\n 'btn-secondary': profile.following\n }\"\n (click)=\"toggleFollowing()\"\n >\n <i class=\"ion-plus-round\"></i>\n &nbsp;\n {{ profile.following ? \"Unfollow\" : \"Follow\" }} {{ profile.username }}\n </button>\n `,\n imports: [NgClass],\n standalone: true,\n})\nexport class FollowButtonComponent {\n @Input() profile!: Profile;\n @Output() toggle = new EventEmitter<Profile>();\n isSubmitting = false;\n destroyRef = inject(DestroyRef);\n\n constructor(\n private readonly profileService: ProfileService,\n private readonly router: Router,\n private readonly userService: UserService,\n ) {}\n\n toggleFollowing(): void {\n this.isSubmitting = true;\n\n this.userService.isAuthenticated\n .pipe(\n switchMap((isAuthenticated: boolean) => {\n if (!isAuthenticated) {\n void this.router.navigate([\"/login\"]);\n return EMPTY;\n }\n\n if (!this.profile.following) {\n return this.profileService.follow(this.profile.username);\n } else {\n return this.profileService.unfollow(this.profile.username);\n }\n }),\n takeUntilDestroyed(this.destroyRef),\n )\n .subscribe({\n next: (profile) => {\n this.isSubmitting = false;\n this.toggle.emit(profile);\n },\n error: () => (this.isSubmitting = false),\n });\n }\n}\n",
          "usedDeprecatedRules": []
        }
      ],
      "all": [
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/core/auth/if-authenticated.directive.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/directive-selector",
              "severity": 2,
              "message": "The selector should start with one of these prefixes: \"app\" (https://angular.dev/style-guide#style-02-08)",
              "line": 14,
              "column": 13,
              "nodeType": "Literal",
              "messageId": "prefixFailure",
              "endLine": 14,
              "endColumn": 32
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n DestroyRef,\n Directive,\n inject,\n Input,\n OnInit,\n TemplateRef,\n ViewContainerRef,\n} from \"@angular/core\";\nimport { UserService } from \"./services/user.service\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Directive({\n selector: \"[ifAuthenticated]\",\n standalone: true,\n})\nexport class IfAuthenticatedDirective<T> implements OnInit {\n destroyRef = inject(DestroyRef);\n constructor(\n private templateRef: TemplateRef<T>,\n private userService: UserService,\n private viewContainer: ViewContainerRef,\n ) {}\n\n condition: boolean = false;\n hasView = false;\n\n ngOnInit() {\n this.userService.isAuthenticated\n .pipe(takeUntilDestroyed(this.destroyRef))\n .subscribe((isAuthenticated: boolean) => {\n const authRequired = isAuthenticated && this.condition;\n const unauthRequired = !isAuthenticated && !this.condition;\n\n if ((authRequired || unauthRequired) && !this.hasView) {\n this.viewContainer.createEmbeddedView(this.templateRef);\n this.hasView = true;\n } else if (this.hasView) {\n this.viewContainer.clear();\n this.hasView = false;\n }\n });\n }\n\n @Input() set ifAuthenticated(condition: boolean) {\n this.condition = condition;\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/features/article/components/favorite-button.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/no-output-native",
              "severity": 2,
              "message": "Output bindings, including aliases, should not be named as standard DOM events",
              "line": 40,
              "column": 13,
              "nodeType": "Identifier",
              "messageId": "noOutputNative",
              "endLine": 40,
              "endColumn": 19
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n Component,\n DestroyRef,\n EventEmitter,\n inject,\n Input,\n Output,\n} from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { EMPTY, switchMap } from \"rxjs\";\nimport { NgClass } from \"@angular/common\";\nimport { ArticlesService } from \"../services/articles.service\";\nimport { UserService } from \"../../../core/auth/services/user.service\";\nimport { Article } from \"../models/article.model\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Component({\n selector: \"app-favorite-button\",\n template: `\n <button\n class=\"btn btn-sm\"\n [ngClass]=\"{\n disabled: isSubmitting,\n 'btn-outline-primary': !article.favorited,\n 'btn-primary': article.favorited\n }\"\n (click)=\"toggleFavorite()\"\n >\n <i class=\"ion-heart\"></i> <ng-content></ng-content>\n </button>\n `,\n imports: [NgClass],\n standalone: true,\n})\nexport class FavoriteButtonComponent {\n destroyRef = inject(DestroyRef);\n isSubmitting = false;\n\n @Input() article!: Article;\n @Output() toggle = new EventEmitter<boolean>();\n\n constructor(\n private readonly articleService: ArticlesService,\n private readonly router: Router,\n private readonly userService: UserService,\n ) {}\n\n toggleFavorite(): void {\n this.isSubmitting = true;\n\n this.userService.isAuthenticated\n .pipe(\n switchMap((authenticated) => {\n if (!authenticated) {\n void this.router.navigate([\"/register\"]);\n return EMPTY;\n }\n\n if (!this.article.favorited) {\n return this.articleService.favorite(this.article.slug);\n } else {\n return this.articleService.unfavorite(this.article.slug);\n }\n }),\n takeUntilDestroyed(this.destroyRef),\n )\n .subscribe({\n next: () => {\n this.isSubmitting = false;\n this.toggle.emit(!this.article.favorited);\n },\n error: () => (this.isSubmitting = false),\n });\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/features/profile/components/follow-button.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/no-output-native",
              "severity": 2,
              "message": "Output bindings, including aliases, should not be named as standard DOM events",
              "line": 40,
              "column": 13,
              "nodeType": "Identifier",
              "messageId": "noOutputNative",
              "endLine": 40,
              "endColumn": 19
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n Component,\n DestroyRef,\n EventEmitter,\n inject,\n Input,\n Output,\n} from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { switchMap } from \"rxjs/operators\";\nimport { EMPTY } from \"rxjs\";\nimport { ProfileService } from \"../services/profile.service\";\nimport { UserService } from \"../../../core/auth/services/user.service\";\nimport { Profile } from \"../models/profile.model\";\nimport { NgClass } from \"@angular/common\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Component({\n selector: \"app-follow-button\",\n template: `\n <button\n class=\"btn btn-sm action-btn\"\n [ngClass]=\"{\n disabled: isSubmitting,\n 'btn-outline-secondary': !profile.following,\n 'btn-secondary': profile.following\n }\"\n (click)=\"toggleFollowing()\"\n >\n <i class=\"ion-plus-round\"></i>\n &nbsp;\n {{ profile.following ? \"Unfollow\" : \"Follow\" }} {{ profile.username }}\n </button>\n `,\n imports: [NgClass],\n standalone: true,\n})\nexport class FollowButtonComponent {\n @Input() profile!: Profile;\n @Output() toggle = new EventEmitter<Profile>();\n isSubmitting = false;\n destroyRef = inject(DestroyRef);\n\n constructor(\n private readonly profileService: ProfileService,\n private readonly router: Router,\n private readonly userService: UserService,\n ) {}\n\n toggleFollowing(): void {\n this.isSubmitting = true;\n\n this.userService.isAuthenticated\n .pipe(\n switchMap((isAuthenticated: boolean) => {\n if (!isAuthenticated) {\n void this.router.navigate([\"/login\"]);\n return EMPTY;\n }\n\n if (!this.profile.following) {\n return this.profileService.follow(this.profile.username);\n } else {\n return this.profileService.unfollow(this.profile.username);\n }\n }),\n takeUntilDestroyed(this.destroyRef),\n )\n .subscribe({\n next: (profile) => {\n this.isSubmitting = false;\n this.toggle.emit(profile);\n },\n error: () => (this.isSubmitting = false),\n });\n }\n}\n",
          "usedDeprecatedRules": []
        }
      ]
    }
  }
}
