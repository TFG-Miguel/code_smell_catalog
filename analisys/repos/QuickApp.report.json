{
  "repo": {
    "HEAD": {
      "commit": "435f959f6d3ef510fef831e64cb6ebe03494a944",
      "author": "Ebenezer Monney",
      "date": "Sun Dec 1 13:21:23 2024 +0000",
      "message": "removed stylePreprocessorOptions from test config"
    },
    "url": "https://github.com/emonney/QuickApp"
  },
  "report": {
    "quickapp.client": {
      "recommended": [
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/controls/statistics-demo.component.ts",
          "messages": [
            {
              "ruleId": "@typescript-eslint/no-unused-vars",
              "message": "Definition for rule '@typescript-eslint/no-unused-vars' was not found.",
              "line": 123,
              "column": 3,
              "endLine": 123,
              "endColumn": 64,
              "severity": 2,
              "nodeType": null
            },
            {
              "ruleId": "@typescript-eslint/no-unused-vars",
              "message": "Definition for rule '@typescript-eslint/no-unused-vars' was not found.",
              "line": 128,
              "column": 3,
              "endLine": 128,
              "endColumn": 64,
              "severity": 2,
              "nodeType": null
            }
          ],
          "suppressedMessages": [],
          "errorCount": 2,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component, OnInit, OnDestroy, inject, viewChild } from '@angular/core';\nimport { AlertService, DialogType, MessageSeverity } from '../../services/alert.service';\nimport { BaseChartDirective } from 'ng2-charts';\nimport { ChartEvent, ChartType } from 'chart.js';\nimport { NgbDropdown, NgbDropdownToggle, NgbDropdownMenu, NgbDropdownButtonItem, NgbDropdownItem }\n from '@ng-bootstrap/ng-bootstrap';\n\ninterface ChartEventArgs { event: ChartEvent; active: object[] }\n\n@Component({\n selector: 'app-statistics-demo',\n templateUrl: './statistics-demo.component.html',\n styleUrl: './statistics-demo.component.scss',\n imports: [BaseChartDirective, NgbDropdown, NgbDropdownToggle, NgbDropdownMenu, NgbDropdownButtonItem, NgbDropdownItem]\n})\nexport class StatisticsDemoComponent implements OnInit, OnDestroy {\n private alertService = inject(AlertService);\n\n chartOptions: object | undefined;\n chartType: ChartType = 'line';\n chartLabels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'];\n chartData = [\n {\n data: [65, 59, 80, 81, 56, 55],\n label: 'Series A',\n fill: 'origin',\n },\n {\n data: [28, 48, 40, 19, 86, 27],\n label: 'Series B',\n fill: 'origin',\n },\n {\n data: [18, 48, 77, 9, 100, 27],\n label: 'Series C',\n fill: 'origin',\n }\n ];\n\n timerReference: ReturnType<typeof setInterval> | undefined;\n\n readonly chart = viewChild.required(BaseChartDirective);\n\n ngOnInit() {\n this.refreshChartOptions();\n this.timerReference = setInterval(() => this.randomize(), 5000);\n }\n\n ngOnDestroy() {\n clearInterval(this.timerReference);\n }\n\n refreshChartOptions() {\n const baseOptions = {\n responsive: true,\n maintainAspectRatio: false,\n title: {\n display: false,\n fontSize: 16,\n text: 'Important Stuff'\n }\n };\n\n if (this.chartType != 'line') {\n this.chartOptions = baseOptions;\n }\n else {\n const lineChartOptions = {\n elements: {\n line: {\n tension: 0.5\n }\n }\n };\n\n this.chartOptions = { ...baseOptions, ...lineChartOptions };\n }\n }\n\n randomize(): void {\n for (const series of this.chartData) {\n for (let j = 0; j < series.data.length; j++) {\n series.data[j] = Math.floor((Math.random() angular.json aspnetcore-https.js eslint.config.js karma.conf.js lint.res.all lint.res.recommended node_modules nuget.config package.json package-lock.json public quickapp.client.esproj QuickApp.report.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json 100) + 1);\n }\n }\n\n this.chart().update();\n }\n\n changeChartType(type: ChartType) {\n this.chartType = type;\n this.refreshChartOptions();\n }\n\n showMessage(msg: string): void {\n this.alertService.showMessage('Demo', msg, MessageSeverity.info);\n }\n\n showDialog(msg: string): void {\n this.alertService.showDialog(msg, DialogType.prompt, (val) => this.configure(true, val), () => this.configure(false));\n }\n\n configure(response: boolean, value?: string) {\n if (response) {\n this.alertService.showStickyMessage('Simulating...', '', MessageSeverity.wait);\n\n setTimeout(() => {\n this.alertService.resetStickyMessage();\n this.alertService.showMessage('Demo', `Your settings was successfully configured to \"${value}\"`, MessageSeverity.success);\n }, 2000);\n } else {\n this.alertService.showMessage('Demo', 'Operation cancelled by user', MessageSeverity.default);\n }\n }\n\n\n // eslint-disable-next-line @typescript-eslint/no-unused-vars\n chartHovered(e: ChartEventArgs): void {\n // Demo\n }\n\n // eslint-disable-next-line @typescript-eslint/no-unused-vars\n chartClicked(e: Partial<ChartEventArgs>): void {\n // Demo\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/services/notification-endpoint.service.ts",
          "messages": [
            {
              "ruleId": "@typescript-eslint/no-unused-vars",
              "message": "Definition for rule '@typescript-eslint/no-unused-vars' was not found.",
              "line": 98,
              "column": 3,
              "endLine": 98,
              "endColumn": 64,
              "severity": 2,
              "nodeType": null
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Observable, of, throwError } from 'rxjs';\n\n@Injectable({\n providedIn: 'root'\n})\nexport class NotificationEndpoint {\n private demoNotifications = [\n {\n id: 1,\n header: '20 New Products were added to your inventory by \"administrator\"',\n body: '20 new \"BMW M6\" were added to your stock by \"administrator\" on 5/28/2017 4:54:13 PM',\n isRead: true,\n isPinned: true,\n date: '2017-05-28T16:29:13.5877958'\n },\n {\n id: 2,\n header: '1 Product running low',\n body: 'You are running low on \"Nissan Patrol\". 2 Items remaining',\n isRead: false,\n isPinned: false,\n date: '2017-05-28T19:54:42.4144502'\n },\n {\n id: 3,\n header: 'Tomorrow is half day',\n body: 'Guys, tomorrow we close by midday. Please check in your sales before noon. Thanks. Alex.',\n isRead: false,\n isPinned: false,\n date: '2017-05-30T11:13:42.4144502'\n }\n ];\n\n\n getNotificationEndpoint<T>(notificationId: number) {\n const notification = this.demoNotifications.find(val => val.id === notificationId);\n return this.createDemoResponse(notification as T, notification ? null : 404);\n }\n\n getNotificationsEndpoint<T>(page: number, pageSize: number) {\n return this.createDemoResponse(this.demoNotifications as T, null, page, pageSize);\n }\n\n getUnreadNotificationsEndpoint<T>(userId?: string) {\n const unreadNotifications = this.demoNotifications.filter(val => !val.isRead);\n return this.createDemoResponse(unreadNotifications as T, null, userId);\n }\n\n getNewNotificationsEndpoint<T>(lastNotificationDate?: Date) {\n return this.createDemoResponse(this.demoNotifications as T, null, lastNotificationDate);\n }\n\n getPinUnpinNotificationEndpoint(notificationId: number, isPinned?: boolean) {\n const notification = this.demoNotifications.find(val => val.id === notificationId);\n\n if (notification) {\n if (isPinned == null) {\n isPinned = !notification.isPinned;\n }\n\n notification.isPinned = isPinned;\n notification.isRead = true;\n\n return this.createDemoResponse(null);\n } else {\n return this.createDemoResponse(null, 404);\n }\n }\n\n getReadUnreadNotificationEndpoint(notificationIds: number[], isRead: boolean) {\n for (const notificationId of notificationIds) {\n const notification = this.demoNotifications.find(val => val.id === notificationId);\n\n if (notification)\n notification.isRead = isRead;\n }\n\n return this.createDemoResponse(null);\n }\n\n getDeleteNotificationEndpoint<T>(notificationId: number) {\n const notification = this.demoNotifications.find(val => val.id === notificationId);\n\n if (notification)\n this.demoNotifications = this.demoNotifications.filter(val => val.id !== notificationId);\n\n return this.createDemoResponse(notification as T, notification ? null : 404);\n }\n\n // eslint-disable-next-line @typescript-eslint/no-unused-vars\n private createDemoResponse<T>(data: T, errorCode: number | null = null, ...args: unknown[]): Observable<T> {\n if (errorCode == null)\n return of(data);\n else\n return throwError(() => new HttpErrorResponse({ status: errorCode, error: 'Demo. An error occurred' }));\n }\n}\n",
          "usedDeprecatedRules": []
        }
      ],
      "all": [
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/app-error.handler.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-injectable-provided-in",
              "severity": 2,
              "message": "The `providedIn` property is mandatory for `Injectables`",
              "line": 9,
              "column": 1,
              "nodeType": "Decorator",
              "messageId": "useInjectableProvidedIn",
              "endLine": 9,
              "endColumn": 14,
              "suggestions": [
                {
                  "messageId": "suggestInjector",
                  "fix": {
                    "range": [
                      278,
                      278
                    ],
                    "text": "{providedIn: 'any'}"
                  },
                  "data": {
                    "injector": "any"
                  },
                  "desc": "Use `providedIn: 'any'`"
                },
                {
                  "messageId": "suggestInjector",
                  "fix": {
                    "range": [
                      278,
                      278
                    ],
                    "text": "{providedIn: 'platform'}"
                  },
                  "data": {
                    "injector": "platform"
                  },
                  "desc": "Use `providedIn: 'platform'`"
                },
                {
                  "messageId": "suggestInjector",
                  "fix": {
                    "range": [
                      278,
                      278
                    ],
                    "text": "{providedIn: 'root'}"
                  },
                  "data": {
                    "injector": "root"
                  },
                  "desc": "Use `providedIn: 'root'`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Injectable, ErrorHandler } from '@angular/core';\n\n@Injectable()\nexport class AppErrorHandler extends ErrorHandler {\n constructor() {\n super();\n }\n\n override handleError(error: Error) {\n if (confirm(\"Fatal Error!\\nAn unresolved error has occurred. Do you want to reload the page to correct this?\\n\\n\" +\n `Error: ${error.message}`)) {\n window.location.reload();\n }\n\n super.handleError(error);\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/app.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
              "severity": 2,
              "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
              "line": 29,
              "column": 1,
              "nodeType": "Decorator",
              "messageId": "preferOnPushComponentChangeDetection",
              "endLine": 37,
              "endColumn": 3,
              "suggestions": [
                {
                  "messageId": "suggestAddChangeDetectionOnPush",
                  "fix": {
                    "range": [
                      263,
                      1563
                    ],
                    "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { Router, RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ToastaService, ToastaConfig, ToastOptions, ToastData, ToastaModule } from 'ngx-toasta';\nimport { NgbCollapseModule, NgbModal, NgbPopover } from '@ng-bootstrap/ng-bootstrap';\n\nimport { AlertService, AlertDialog, DialogType, AlertCommand, MessageSeverity } from './services/alert.service';\nimport { NotificationService } from './services/notification.service';\nimport { AppTranslationService } from './services/app-translation.service';\nimport { AccountService } from './services/account.service';\nimport { LocalStoreManager } from './services/local-store-manager.service';\nimport { AppTitleService } from './services/app-title.service';\nimport { AuthService } from './services/auth.service';\nimport { ConfigurationService } from './services/configuration.service';\nimport { Alertify } from './models/Alertify';\nimport { Permissions } from './models/permission.model';\nimport { LoginComponent } from './components/login/login.component';\nimport { NotificationsViewerComponent } from './components/controls/notifications-viewer.component';\n\ndeclare let alertify: Alertify;\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                  },
                  "desc": "Add `ChangeDetectionStrategy.OnPush`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component, OnInit, OnDestroy, inject, Renderer2 } from '@angular/core';\nimport { Router, RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ToastaService, ToastaConfig, ToastOptions, ToastData, ToastaModule } from 'ngx-toasta';\nimport { NgbCollapseModule, NgbModal, NgbPopover } from '@ng-bootstrap/ng-bootstrap';\n\nimport { AlertService, AlertDialog, DialogType, AlertCommand, MessageSeverity } from './services/alert.service';\nimport { NotificationService } from './services/notification.service';\nimport { AppTranslationService } from './services/app-translation.service';\nimport { AccountService } from './services/account.service';\nimport { LocalStoreManager } from './services/local-store-manager.service';\nimport { AppTitleService } from './services/app-title.service';\nimport { AuthService } from './services/auth.service';\nimport { ConfigurationService } from './services/configuration.service';\nimport { Alertify } from './models/Alertify';\nimport { Permissions } from './models/permission.model';\nimport { LoginComponent } from './components/login/login.component';\nimport { NotificationsViewerComponent } from './components/controls/notifications-viewer.component';\n\ndeclare let alertify: Alertify;\n\n@Component({\n selector: 'app-root',\n templateUrl: './app.component.html',\n styleUrl: './app.component.scss',\n imports: [\n ToastaModule, RouterLink, RouterLinkActive, NgbCollapseModule, NgbPopover, NotificationsViewerComponent,\n RouterOutlet, TranslateModule\n ]\n})\nexport class AppComponent implements OnInit, OnDestroy {\n private toastaService = inject(ToastaService);\n private toastaConfig = inject(ToastaConfig);\n private accountService = inject(AccountService);\n private alertService = inject(AlertService);\n private modalService = inject(NgbModal);\n private notificationService = inject(NotificationService);\n private authService = inject(AuthService);\n private translationService = inject(AppTranslationService);\n configurations = inject(ConfigurationService);\n router = inject(Router);\n renderer = inject(Renderer2);\n\n isMenuCollapsed = true;\n isAppLoaded = false;\n isUserLoggedIn = false;\n newNotificationCount = 0;\n appTitle = 'QuickApp';\n\n stickyToasties: number[] = [];\n\n dataLoadingConsecutiveFailures = 0;\n notificationsLoadingSubscription: Subscription | undefined;\n languageChangedSubscription: Subscription | undefined;\n\n loginControl: LoginComponent | undefined;\n\n gT = (key: string | string[], interpolateParams?: object) =>\n this.translationService.getTranslation(key, interpolateParams);\n\n get notificationsTitle() {\n if (this.newNotificationCount) {\n return `${this.gT('app.Notifications')} (${this.newNotificationCount} ${this.gT('app.New')})`;\n } else {\n return this.gT('app.Notifications');\n }\n }\n\n constructor() {\n const storageManager = inject(LocalStoreManager);\n\n storageManager.initialiseStorageSyncListener();\n\n this.toastaConfig.theme = 'bootstrap';\n this.toastaConfig.position = 'top-right';\n this.toastaConfig.limit = 100;\n this.toastaConfig.showClose = true;\n this.toastaConfig.showDuration = false;\n\n AppTitleService.appName = this.appTitle;\n }\n\n ngOnInit() {\n this.isUserLoggedIn = this.authService.isLoggedIn;\n\n // Extra sec to display preboot loaded information\n setTimeout(() => this.isAppLoaded = true, 1000);\n\n setTimeout(() => {\n if (this.isUserLoggedIn) {\n this.alertService.resetStickyMessage();\n this.alertService.showMessage(this.gT('app.alerts.Login'), this.gT('app.alerts.WelcomeBack',\n { username: this.userName }), MessageSeverity.default);\n }\n }, 2000);\n\n this.languageChangedSubscription = this.translationService.languageChanged$\n .subscribe(event => {\n this.renderer.setAttribute(document.documentElement, 'dir', event.lang === 'ar' ? 'rtl' : 'ltr');\n this.renderer.setAttribute(document.documentElement, 'lang', event.lang);\n });\n\n this.alertService.getDialogEvent().subscribe(alert => this.showDialog(alert));\n this.alertService.getMessageEvent().subscribe(message => this.showToast(message));\n\n this.authService.reLoginDelegate = () => this.openLoginModal();\n\n this.authService.getLoginStatusEvent().subscribe(isLoggedIn => {\n this.isUserLoggedIn = isLoggedIn;\n\n if (this.isUserLoggedIn) {\n this.initNotificationsLoading();\n } else {\n this.unsubscribeNotifications();\n }\n\n setTimeout(() => {\n if (!this.isUserLoggedIn) {\n this.alertService.showMessage(this.gT('app.alerts.SessionEnded'), '', MessageSeverity.default);\n }\n }, 500);\n });\n }\n\n ngOnDestroy() {\n this.unsubscribeNotifications();\n this.languageChangedSubscription?.unsubscribe();\n }\n\n private unsubscribeNotifications() {\n this.notificationsLoadingSubscription?.unsubscribe();\n }\n\n initNotificationsLoading() {\n this.notificationsLoadingSubscription = this.notificationService.getNewNotificationsPeriodically()\n .subscribe({\n next: notifications => {\n this.dataLoadingConsecutiveFailures = 0;\n this.newNotificationCount = notifications.filter(n => !n.isRead).length;\n },\n error: error => {\n this.alertService.logError(error);\n\n if (this.dataLoadingConsecutiveFailures++ < 20) {\n setTimeout(() => this.initNotificationsLoading(), 5000);\n } else {\n this.alertService.showStickyMessage(this.gT('app.alerts.LoadingError'),\n this.gT('app.alerts.LoadingNewNotificationsFailed'), MessageSeverity.error);\n }\n }\n });\n }\n\n markNotificationsAsRead() {\n const newNotifications = this.notificationService.newNotifications;\n\n if (newNotifications) {\n this.notificationService.readUnreadNotification(newNotifications.map(n => n.id), true)\n .subscribe({\n next: () => {\n for (const n of newNotifications) {\n n.isRead = true;\n }\n\n this.newNotificationCount = newNotifications.filter(n => !n.isRead).length;\n },\n error: error => {\n this.alertService.logError(error);\n this.alertService.showMessage(this.gT('app.alerts.NotificationError'),\n this.gT('app.alerts.MarkingReadNotificationsFailed'), MessageSeverity.error);\n }\n });\n }\n }\n\n openLoginModal() {\n const modalRef = this.modalService.open(LoginComponent, {\n windowClass: 'login-control',\n modalDialogClass: 'h-75 d-flex flex-column justify-content-center my-0',\n size: 'lg',\n backdrop: 'static'\n });\n\n this.loginControl = modalRef.componentInstance as LoginComponent;\n this.loginControl.isModal = true;\n\n this.loginControl.modalClosedCallback = () => modalRef.close();\n\n modalRef.shown.subscribe(() => {\n this.alertService.showStickyMessage(this.gT('app.alerts.SessionExpired'),\n this.gT('app.alerts.SessionExpiredLoginAgain'), MessageSeverity.info);\n });\n\n modalRef.hidden.subscribe(() => {\n this.alertService.resetStickyMessage();\n this.loginControl?.reset();\n\n if (this.authService.isSessionExpired) {\n this.alertService.showStickyMessage(this.gT('app.alerts.SessionExpired'),\n this.gT('app.alerts.SessionExpiredLoginToRenewSession'), MessageSeverity.warn);\n }\n });\n }\n\n showDialog(dialog: AlertDialog) {\n alertify.set({\n labels: {\n ok: dialog.okLabel || this.gT('app.alerts.OK'),\n cancel: dialog.cancelLabel || this.gT('app.alerts.Cancel')\n }\n });\n\n switch (dialog.type) {\n case DialogType.alert:\n alertify.alert(dialog.message);\n break;\n case DialogType.confirm:\n alertify.confirm(dialog.message, ok => {\n if (ok) {\n if (dialog.okCallback)\n dialog.okCallback();\n } else {\n if (dialog.cancelCallback) {\n dialog.cancelCallback();\n }\n }\n });\n break;\n case DialogType.prompt:\n alertify.prompt(dialog.message, (ok, val) => {\n if (ok) {\n if (dialog.okCallback)\n dialog.okCallback(val);\n } else {\n if (dialog.cancelCallback) {\n dialog.cancelCallback();\n }\n }\n }, dialog.defaultValue);\n break;\n }\n }\n\n showToast(alert: AlertCommand) {\n if (alert.operation === 'clear') {\n for (const id of this.stickyToasties.slice(0)) {\n this.toastaService.clear(id);\n }\n return;\n }\n\n const toastOptions: ToastOptions = {\n title: alert.message?.summary,\n msg: alert.message?.detail,\n };\n\n if (alert.operation === 'add_sticky') {\n toastOptions.timeout = 0;\n\n toastOptions.onAdd = (toast: ToastData) => {\n this.stickyToasties.push(toast.id);\n };\n\n toastOptions.onRemove = (toast: ToastData) => {\n const index = this.stickyToasties.indexOf(toast.id, 0);\n\n if (index > -1) {\n this.stickyToasties.splice(index, 1);\n }\n\n if (alert.onRemove) {\n alert.onRemove();\n }\n\n toast.onAdd = undefined;\n toast.onRemove = undefined;\n };\n } else {\n toastOptions.timeout = 4000;\n }\n\n switch (alert.message?.severity) {\n case MessageSeverity.default: this.toastaService.default(toastOptions); break;\n case MessageSeverity.info: this.toastaService.info(toastOptions); break;\n case MessageSeverity.success: this.toastaService.success(toastOptions); break;\n case MessageSeverity.error: this.toastaService.error(toastOptions); break;\n case MessageSeverity.warn: this.toastaService.warning(toastOptions); break;\n case MessageSeverity.wait: this.toastaService.wait(toastOptions); break;\n }\n }\n\n logout() {\n this.authService.logout();\n this.authService.redirectLogoutUser();\n }\n\n getYear() {\n return new Date().getUTCFullYear();\n }\n\n get userName(): string {\n return this.authService.currentUser?.userName ?? '';\n }\n\n get fullName(): string {\n return this.authService.currentUser?.fullName ?? '';\n }\n\n get canViewCustomers() {\n return this.accountService.userHasPermission(Permissions.viewUsers); // eg. viewCustomersPermission\n }\n\n get canViewProducts() {\n return this.accountService.userHasPermission(Permissions.viewUsers); // eg. viewProductsPermission\n }\n\n get canViewOrders() {\n return !!true; // eg. viewOrdersPermission\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/about/about.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
              "severity": 2,
              "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
              "line": 12,
              "column": 1,
              "nodeType": "Decorator",
              "messageId": "preferOnPushComponentChangeDetection",
              "endLine": 18,
              "endColumn": 3,
              "suggestions": [
                {
                  "messageId": "suggestAddChangeDetectionOnPush",
                  "fix": {
                    "range": [
                      225,
                      379
                    ],
                    "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { fadeInOut } from '../../services/animations';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                  },
                  "desc": "Add `ChangeDetectionStrategy.OnPush`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { fadeInOut } from '../../services/animations';\n\n@Component({\n selector: 'app-about',\n templateUrl: './about.component.html',\n styleUrl: './about.component.scss',\n animations: [fadeInOut],\n imports: [TranslateModule]\n})\nexport class AboutComponent {\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/controls/banner-demo.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
              "severity": 2,
              "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
              "line": 11,
              "column": 1,
              "nodeType": "Decorator",
              "messageId": "preferOnPushComponentChangeDetection",
              "endLine": 16,
              "endColumn": 3,
              "suggestions": [
                {
                  "messageId": "suggestAddChangeDetectionOnPush",
                  "fix": {
                    "range": [
                      225,
                      379
                    ],
                    "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { NgClass } from '@angular/common';\nimport { NgbCarousel, NgbSlide } from '@ng-bootstrap/ng-bootstrap';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                  },
                  "desc": "Add `ChangeDetectionStrategy.OnPush`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component } from '@angular/core';\nimport { NgClass } from '@angular/common';\nimport { NgbCarousel, NgbSlide } from '@ng-bootstrap/ng-bootstrap';\n\n@Component({\n selector: 'app-banner-demo',\n templateUrl: './banner-demo.component.html',\n styleUrl: './banner-demo.component.scss',\n imports: [NgbCarousel, NgbSlide, NgClass]\n})\nexport class BannerDemoComponent {\n\n carouselSlides = [\n {\n img: 'images/demo/banner1.png',\n alt: 'ASP.NET',\n caption: 'Learn how to build ASP.NET apps that can run anywhere',\n class: 'btn btn-outline-info btn-sm',\n link: 'http://go.microsoft.com/fwlink/?LinkID=525028&clcid=0x409'\n },\n {\n img: 'images/demo/banner2.png',\n alt: 'Visual Studio',\n caption: 'One platform for building modern web, native mobile and native desktop applications',\n class: 'btn btn-outline-primary btn-sm',\n link: 'http://angular.dev'\n },\n {\n img: 'images/demo/banner3.png',\n alt: 'Package Management',\n caption: 'Bring in libraries from NuGet and npm, and bundle with angular/cli',\n class: 'btn btn-outline-success btn-sm',\n link: 'http://go.microsoft.com/fwlink/?LinkID=525029&clcid=0x409'\n },\n {\n img: 'images/demo/banner4.png',\n alt: 'Eben Monney',\n caption: 'Follow me on social media for updates and tips on using this startup project',\n class: 'btn btn-outline-secondary btn-sm',\n link: 'https://www.ebenmonney.com/about'\n }\n ];\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/controls/notifications-viewer.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
              "severity": 2,
              "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
              "line": 22,
              "column": 1,
              "nodeType": "Decorator",
              "messageId": "preferOnPushComponentChangeDetection",
              "endLine": 27,
              "endColumn": 3,
              "suggestions": [
                {
                  "messageId": "suggestAddChangeDetectionOnPush",
                  "fix": {
                    "range": [
                      283,
                      1080
                    ],
                    "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { NgClass } from '@angular/common';\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\nimport { Subscription } from 'rxjs';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { TableColumn, NgxDatatableModule } from '@siemens/ngx-datatable';\n\nimport { AlertService, DialogType, MessageSeverity } from '../../services/alert.service';\nimport { AppTranslationService } from '../../services/app-translation.service';\nimport { NotificationService } from '../../services/notification.service';\nimport { AccountService } from '../../services/account.service';\nimport { Permissions } from '../../models/permission.model';\nimport { Utilities } from '../../services/utilities';\nimport { Notification } from '../../models/notification.model';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                  },
                  "desc": "Add `ChangeDetectionStrategy.OnPush`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component, OnInit, OnDestroy, TemplateRef, inject, input, viewChild } from '@angular/core';\nimport { NgClass } from '@angular/common';\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\nimport { Subscription } from 'rxjs';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { TableColumn, NgxDatatableModule } from '@siemens/ngx-datatable';\n\nimport { AlertService, DialogType, MessageSeverity } from '../../services/alert.service';\nimport { AppTranslationService } from '../../services/app-translation.service';\nimport { NotificationService } from '../../services/notification.service';\nimport { AccountService } from '../../services/account.service';\nimport { Permissions } from '../../models/permission.model';\nimport { Utilities } from '../../services/utilities';\nimport { Notification } from '../../models/notification.model';\n\n@Component({\n selector: 'app-notifications-viewer',\n templateUrl: './notifications-viewer.component.html',\n styleUrl: './notifications-viewer.component.scss',\n imports: [NgxDatatableModule, NgbTooltip, NgClass, TranslateModule]\n})\nexport class NotificationsViewerComponent implements OnInit, OnDestroy {\n private alertService = inject(AlertService);\n private translationService = inject(AppTranslationService);\n private accountService = inject(AccountService);\n private notificationService = inject(NotificationService);\n\n columns: TableColumn[] = [];\n rows: Notification[] = [];\n loadingIndicator = false;\n\n dataLoadingConsecutiveFailurs = 0;\n dataLoadingSubscription: Subscription | undefined;\n\n readonly isViewOnly = input(false);\n readonly verticalScrollbar = input(false);\n\n readonly statusHeaderTemplate = viewChild.required<TemplateRef<unknown>>('statusHeaderTemplate');\n\n readonly statusTemplate = viewChild.required<TemplateRef<unknown>>('statusTemplate');\n\n readonly dateTemplate = viewChild.required<TemplateRef<unknown>>('dateTemplate');\n\n readonly contentHeaderTemplate = viewChild.required<TemplateRef<unknown>>('contentHeaderTemplate');\n\n readonly contenBodytTemplate = viewChild.required<TemplateRef<unknown>>('contenBodytTemplate');\n\n readonly actionsTemplate = viewChild.required<TemplateRef<unknown>>('actionsTemplate');\n\n ngOnInit() {\n if (this.isViewOnly()) {\n this.columns = [\n { prop: 'header', cellTemplate: this.contentHeaderTemplate(), width: 200, resizeable: false, sortable: false, draggable: false },\n ];\n } else {\n const gT = (key: string) => this.translationService.getTranslation(key);\n\n this.columns = [\n { prop: '', name: '', width: 10, headerTemplate: this.statusHeaderTemplate(), cellTemplate: this.statusTemplate(), resizeable: false, canAutoResize: false, sortable: false, draggable: false },\n { prop: 'date', name: gT('notifications.Date'), cellTemplate: this.dateTemplate(), width: 30 },\n { prop: 'body', name: gT('notifications.Notification'), cellTemplate: this.contenBodytTemplate(), width: 500 },\n { name: '', width: 80, cellTemplate: this.actionsTemplate(), resizeable: false, canAutoResize: false, sortable: false, draggable: false }\n ];\n }\n\n this.initDataLoading();\n }\n\n ngOnDestroy() {\n this.dataLoadingSubscription?.unsubscribe();\n }\n\n initDataLoading() {\n const isViewOnly = this.isViewOnly();\n if (isViewOnly && this.notificationService.newNotifications) {\n this.rows = this.processResults(this.notificationService.newNotifications);\n return;\n }\n\n this.loadingIndicator = true;\n\n this.dataLoadingSubscription = (isViewOnly ?\n this.notificationService.getNewNotifications() : this.notificationService.getNewNotificationsPeriodically())\n .subscribe({\n next: notifications => {\n this.loadingIndicator = false;\n this.dataLoadingConsecutiveFailurs = 0;\n\n this.rows = this.processResults(notifications);\n },\n error: error => {\n this.loadingIndicator = false;\n\n this.alertService.showMessage('Load Error', 'Loading new notifications from the server failed!', MessageSeverity.warn);\n this.alertService.logError(error);\n\n if (this.dataLoadingConsecutiveFailurs++ < 5) {\n setTimeout(() => this.initDataLoading(), 5000);\n } else {\n this.alertService.showStickyMessage('Load Error', 'Loading new notifications from the server failed!', MessageSeverity.error);\n }\n }\n });\n }\n\n private processResults(notifications: Notification[]) {\n if (this.isViewOnly()) {\n notifications.sort((a, b) => {\n return b.date.valueOf() - a.date.valueOf();\n });\n }\n\n return notifications;\n }\n\n getPrintedDate(value: Date) {\n if (value) {\n return Utilities.printTimeOnly(value) + ' on ' + Utilities.printDateOnly(value);\n }\n\n return '';\n }\n\n deleteNotification(row: Notification) {\n this.alertService.showDialog(`Are you sure you want to delete the notification \"${row.header}\"?`,\n DialogType.confirm, () => this.deleteNotificationHelper(row));\n }\n\n deleteNotificationHelper(row: Notification) {\n this.alertService.startLoadingMessage('Deleting...');\n this.loadingIndicator = true;\n\n this.notificationService.deleteNotification(row)\n .subscribe({\n next: () => {\n this.alertService.stopLoadingMessage();\n this.loadingIndicator = false;\n\n this.rows = this.rows.filter(item => item.id !== row.id);\n },\n error: error => {\n this.alertService.stopLoadingMessage();\n this.loadingIndicator = false;\n\n this.alertService.showStickyMessage('Delete Error',\n `An error occurred whilst deleting the notification.\\r\\nError: \"${Utilities.getHttpResponseMessage(error)}\"`,\n MessageSeverity.error, error);\n }\n });\n }\n\n togglePin(row: Notification) {\n const pin = !row.isPinned;\n const opText = pin ? 'Pinning' : 'Unpinning';\n\n this.alertService.startLoadingMessage(opText + '...');\n this.loadingIndicator = true;\n\n this.notificationService.pinUnpinNotification(row, pin)\n .subscribe({\n next: () => {\n this.alertService.stopLoadingMessage();\n this.loadingIndicator = false;\n\n row.isPinned = pin;\n },\n error: error => {\n this.alertService.stopLoadingMessage();\n this.loadingIndicator = false;\n\n this.alertService.showStickyMessage(opText + ' Error',\n `An error occurred whilst ${opText} the notification.\\r\\nError: \"${Utilities.getHttpResponseMessage(error)}\"`,\n MessageSeverity.error, error);\n }\n });\n }\n\n get canManageNotifications() {\n return this.accountService.userHasPermission(Permissions.manageRoles); // Todo: Create separate permissions for notifications\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/controls/role-editor.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
              "severity": 2,
              "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
              "line": 20,
              "column": 1,
              "nodeType": "Decorator",
              "messageId": "preferOnPushComponentChangeDetection",
              "endLine": 25,
              "endColumn": 3,
              "suggestions": [
                {
                  "messageId": "suggestAddChangeDetectionOnPush",
                  "fix": {
                    "range": [
                      260,
                      890
                    ],
                    "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { NgClass } from '@angular/common';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { NgForm, FormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\n\nimport { AlertService, MessageSeverity } from '../../services/alert.service';\nimport { AccountService } from '../../services/account.service';\nimport { Role } from '../../models/role.model';\nimport { Permission, Permissions } from '../../models/permission.model';\nimport { GroupByPipe } from '../../pipes/group-by.pipe';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                  },
                  "desc": "Add `ChangeDetectionStrategy.OnPush`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component, OnInit, inject, output, viewChild } from '@angular/core';\nimport { NgClass } from '@angular/common';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { NgForm, FormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\n\nimport { AlertService, MessageSeverity } from '../../services/alert.service';\nimport { AccountService } from '../../services/account.service';\nimport { Role } from '../../models/role.model';\nimport { Permission, Permissions } from '../../models/permission.model';\nimport { GroupByPipe } from '../../pipes/group-by.pipe';\n\n@Component({\n selector: 'app-role-editor',\n templateUrl: './role-editor.component.html',\n styleUrl: './role-editor.component.scss',\n imports: [FormsModule, NgClass, NgbTooltip, TranslateModule, GroupByPipe]\n})\nexport class RoleEditorComponent implements OnInit {\n private alertService = inject(AlertService);\n private accountService = inject(AccountService);\n\n private isNewRole = false;\n public isSaving = false;\n public showValidationErrors = true;\n public roleEdit = new Role();\n public allPermissions: Permission[] = [];\n public selectedValues: Record<string, boolean> = {};\n private editingRoleName: string | null = null;\n\n public formResetToggle = true;\n\n public changesSavedCallback: (() => void) | undefined;\n public changesFailedCallback: (() => void) | undefined;\n public changesCancelledCallback: (() => void) | undefined;\n\n // Outupt to broadcast this instance so it can be accessible from within ng-bootstrap modal template\n readonly afterOnInit = output<RoleEditorComponent>();\n\n readonly form = viewChild.required<NgForm>('f');\n\n ngOnInit() {\n this.afterOnInit.emit(this);\n }\n\n showErrorAlert(caption: string, message: string) {\n this.alertService.showMessage(caption, message, MessageSeverity.error);\n }\n\n save() {\n this.isSaving = true;\n this.alertService.startLoadingMessage('Saving changes...');\n\n this.roleEdit.permissions = this.getSelectedPermissions();\n\n if (this.isNewRole) {\n this.accountService.newRole(this.roleEdit)\n .subscribe({ next: role => this.saveSuccessHelper(role), error: error => this.saveFailedHelper(error) });\n } else {\n this.accountService.updateRole(this.roleEdit)\n .subscribe({ next: () => this.saveSuccessHelper(), error: error => this.saveFailedHelper(error) });\n }\n }\n\n private saveSuccessHelper(role?: Role) {\n if (role) {\n Object.assign(this.roleEdit, role);\n }\n\n this.isSaving = false;\n this.alertService.stopLoadingMessage();\n this.showValidationErrors = false;\n\n if (this.isNewRole) {\n this.alertService.showMessage('Success', `Role \"${this.roleEdit.name}\" was created successfully`, MessageSeverity.success);\n } else {\n this.alertService.showMessage('Success', `Changes to role \"${this.roleEdit.name}\" was saved successfully`, MessageSeverity.success);\n }\n\n this.roleEdit = new Role();\n this.resetForm();\n\n if (!this.isNewRole && this.accountService.currentUser?.roles.some(r => r === this.editingRoleName)) {\n this.refreshLoggedInUser();\n }\n\n if (this.changesSavedCallback) {\n this.changesSavedCallback();\n }\n }\n\n private refreshLoggedInUser() {\n this.accountService.refreshLoggedInUser()\n .subscribe({\n error: error => {\n this.alertService.resetStickyMessage();\n this.alertService.showStickyMessage('Refresh failed', 'An error occurred whilst refreshing logged in user information from the server', MessageSeverity.error, error);\n }\n });\n }\n\n private saveFailedHelper(error: HttpErrorResponse) {\n this.isSaving = false;\n this.alertService.stopLoadingMessage();\n this.alertService.showStickyMessage('Save Error', 'The below errors occurred whilst saving your changes:', MessageSeverity.error, error);\n this.alertService.showStickyMessage(error, null, MessageSeverity.error);\n\n if (this.changesFailedCallback) {\n this.changesFailedCallback();\n }\n }\n\n cancel() {\n this.roleEdit = new Role();\n\n this.showValidationErrors = false;\n this.resetForm();\n\n this.alertService.showMessage('Cancelled', 'Operation cancelled by user', MessageSeverity.default);\n this.alertService.resetStickyMessage();\n\n if (this.changesCancelledCallback) {\n this.changesCancelledCallback();\n }\n }\n\n selectAll() {\n this.allPermissions.forEach(p => this.selectedValues[p.value] = true);\n }\n\n selectNone() {\n this.allPermissions.forEach(p => this.selectedValues[p.value] = false);\n }\n\n toggleGroup(groupName: string) {\n let firstMemberValue: boolean;\n\n this.allPermissions.forEach(p => {\n if (p.groupName !== groupName) {\n return;\n }\n\n if (firstMemberValue == null) {\n firstMemberValue = this.selectedValues[p.value] === true;\n }\n\n this.selectedValues[p.value] = !firstMemberValue;\n });\n }\n\n private getSelectedPermissions() {\n return this.allPermissions.filter(p => this.selectedValues[p.value] === true);\n }\n\n resetForm(replace = false) {\n if (!replace) {\n this.form().reset();\n } else {\n this.formResetToggle = false;\n\n setTimeout(() => {\n this.formResetToggle = true;\n });\n }\n }\n\n newRole(allPermissions: Permission[]) {\n this.isNewRole = true;\n this.showValidationErrors = true;\n\n this.editingRoleName = null;\n this.allPermissions = allPermissions;\n this.selectedValues = {};\n this.roleEdit = new Role();\n\n return this.roleEdit;\n }\n\n editRole(role: Role, allPermissions: Permission[]) {\n if (role) {\n this.isNewRole = false;\n this.showValidationErrors = true;\n\n this.editingRoleName = role.name;\n this.allPermissions = allPermissions;\n this.selectedValues = {};\n role.permissions.forEach(p => this.selectedValues[p.value] = true);\n this.roleEdit = new Role();\n Object.assign(this.roleEdit, role);\n\n return this.roleEdit;\n } else {\n return this.newRole(allPermissions);\n }\n }\n\n get canManageRoles() {\n return this.accountService.userHasPermission(Permissions.manageRoles);\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/controls/roles-management.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
              "severity": 2,
              "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
              "line": 25,
              "column": 1,
              "nodeType": "Decorator",
              "messageId": "preferOnPushComponentChangeDetection",
              "endLine": 30,
              "endColumn": 3,
              "suggestions": [
                {
                  "messageId": "suggestAddChangeDetectionOnPush",
                  "fix": {
                    "range": [
                      265,
                      1080
                    ],
                    "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { TableColumn, NgxDatatableModule } from '@siemens/ngx-datatable';\n\nimport { AlertService, DialogType, MessageSeverity } from '../../services/alert.service';\nimport { AppTranslationService } from '../../services/app-translation.service';\nimport { AccountService } from '../../services/account.service';\nimport { Utilities } from '../../services/utilities';\nimport { Role } from '../../models/role.model';\nimport { Permission, Permissions } from '../../models/permission.model';\nimport { RoleEditorComponent } from './role-editor.component';\nimport { SearchBoxComponent } from './search-box.component';\n\ninterface RoleIndex extends Role {\n index: number;\n}\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                  },
                  "desc": "Add `ChangeDetectionStrategy.OnPush`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component, OnInit, TemplateRef, inject, viewChild } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { TableColumn, NgxDatatableModule } from '@siemens/ngx-datatable';\n\nimport { AlertService, DialogType, MessageSeverity } from '../../services/alert.service';\nimport { AppTranslationService } from '../../services/app-translation.service';\nimport { AccountService } from '../../services/account.service';\nimport { Utilities } from '../../services/utilities';\nimport { Role } from '../../models/role.model';\nimport { Permission, Permissions } from '../../models/permission.model';\nimport { RoleEditorComponent } from './role-editor.component';\nimport { SearchBoxComponent } from './search-box.component';\n\ninterface RoleIndex extends Role {\n index: number;\n}\n\n@Component({\n selector: 'app-roles-management',\n templateUrl: './roles-management.component.html',\n styleUrl: './roles-management.component.scss',\n imports: [SearchBoxComponent, NgxDatatableModule, RoleEditorComponent, TranslateModule]\n})\nexport class RolesManagementComponent implements OnInit {\n private alertService = inject(AlertService);\n private translationService = inject(AppTranslationService);\n private accountService = inject(AccountService);\n private modalService = inject(NgbModal);\n\n columns: TableColumn[] = [];\n rows: Role[] = [];\n rowsCache: Role[] = [];\n allPermissions: Permission[] = [];\n editedRole: Role | null = null;\n sourceRole: Role | null = null;\n editingRoleName: { name: string } | null = null;\n loadingIndicator = false;\n\n readonly indexTemplate = viewChild.required<TemplateRef<unknown>>('indexTemplate');\n\n readonly actionsTemplate = viewChild.required<TemplateRef<unknown>>('actionsTemplate');\n\n readonly editorModalTemplate = viewChild.required<TemplateRef<unknown>>('editorModal');\n\n roleEditor: RoleEditorComponent | null = null;\n\n ngOnInit() {\n const gT = (key: string) => this.translationService.getTranslation(key);\n\n this.columns = [\n { prop: 'index', name: '#', width: 50, cellTemplate: this.indexTemplate(), canAutoResize: false },\n { prop: 'name', name: gT('roles.management.Name'), width: 180 },\n { prop: 'description', name: gT('roles.management.Description'), width: 320 },\n { prop: 'usersCount', name: gT('roles.management.Users'), width: 50 },\n { name: '', width: 160, cellTemplate: this.actionsTemplate(), resizeable: false, canAutoResize: false, sortable: false, draggable: false }\n ];\n\n this.loadData();\n }\n\n setRoleEditorComponent(roleEditor: RoleEditorComponent) {\n this.roleEditor = roleEditor;\n\n if (this.sourceRole == null)\n this.editedRole = this.roleEditor.newRole(this.allPermissions);\n else\n this.editedRole = this.roleEditor.editRole(this.sourceRole, this.allPermissions);\n }\n\n addNewRoleToList() {\n if (this.sourceRole) {\n Object.assign(this.sourceRole, this.editedRole);\n\n let sourceIndex = this.rowsCache.indexOf(this.sourceRole, 0);\n if (sourceIndex > -1) {\n Utilities.moveArrayItem(this.rowsCache, sourceIndex, 0);\n }\n\n sourceIndex = this.rows.indexOf(this.sourceRole, 0);\n if (sourceIndex > -1) {\n Utilities.moveArrayItem(this.rows, sourceIndex, 0);\n }\n\n this.editedRole = null;\n this.sourceRole = null;\n } else {\n const role = new Role();\n Object.assign(role, this.editedRole);\n this.editedRole = null;\n\n let maxIndex = 0;\n for (const r of this.rowsCache) {\n if ((r as RoleIndex).index > maxIndex) {\n maxIndex = (r as RoleIndex).index;\n }\n }\n\n (role as RoleIndex).index = maxIndex + 1;\n\n this.rowsCache.splice(0, 0, role);\n this.rows.splice(0, 0, role);\n this.rows = [...this.rows];\n }\n }\n\n loadData() {\n this.alertService.startLoadingMessage();\n this.loadingIndicator = true;\n\n this.accountService.getRolesAndPermissions()\n .subscribe({\n next: results => {\n this.alertService.stopLoadingMessage();\n this.loadingIndicator = false;\n\n const roles = results[0];\n const permissions = results[1];\n\n roles.forEach((role, index) => {\n (role as RoleIndex).index = index + 1;\n });\n\n this.rowsCache = [...roles];\n this.rows = roles;\n\n this.allPermissions = permissions;\n },\n error: error => {\n this.alertService.stopLoadingMessage();\n this.loadingIndicator = false;\n\n this.alertService.showStickyMessage('Load Error',\n `Unable to retrieve roles from the server.\\r\\nError: \"${Utilities.getHttpResponseMessage(error)}\"`,\n MessageSeverity.error, error);\n }\n });\n }\n\n onSearchChanged(value: string) {\n this.rows = this.rowsCache.filter(r => Utilities.searchArray(value, false, r.name, r.description));\n }\n\n newRole() {\n this.editingRoleName = null;\n this.sourceRole = null;\n\n this.openRoleEditor();\n }\n\n editRole(row: Role) {\n this.editingRoleName = { name: row.name };\n this.sourceRole = row;\n\n this.openRoleEditor();\n }\n\n openRoleEditor() {\n const modalRef = this.modalService.open(this.editorModalTemplate(), {\n size: 'lg',\n backdrop: 'static'\n });\n\n modalRef.shown.subscribe(() => {\n if (!this.roleEditor)\n throw new Error('The role editor component was not set.');\n\n this.roleEditor.changesSavedCallback = () => {\n this.addNewRoleToList();\n modalRef.close();\n };\n\n this.roleEditor.changesCancelledCallback = () => {\n this.editedRole = null;\n this.sourceRole = null;\n modalRef.close();\n };\n });\n\n modalRef.hidden.subscribe(() => {\n if (!this.roleEditor)\n throw new Error('The role editor component was not set.');\n\n this.editingRoleName = null;\n this.roleEditor.resetForm(true);\n this.roleEditor = null;\n });\n }\n\n deleteRole(row: Role) {\n this.alertService.showDialog(`Are you sure you want to delete the \"${row.name}\" role?`,\n DialogType.confirm, () => this.deleteRoleHelper(row));\n }\n\n deleteRoleHelper(row: Role) {\n this.alertService.startLoadingMessage('Deleting...');\n this.loadingIndicator = true;\n\n this.accountService.deleteRole(row)\n .subscribe({\n next: () => {\n this.alertService.stopLoadingMessage();\n this.loadingIndicator = false;\n\n this.rowsCache = this.rowsCache.filter(item => item !== row);\n this.rows = this.rows.filter(item => item !== row);\n },\n error: error => {\n this.alertService.stopLoadingMessage();\n this.loadingIndicator = false;\n\n this.alertService.showStickyMessage('Delete Error',\n `An error occurred whilst deleting the role.\\r\\nError: \"${Utilities.getHttpResponseMessage(error)}\"`,\n MessageSeverity.error, error);\n }\n });\n }\n\n get canManageRoles() {\n return this.accountService.userHasPermission(Permissions.manageRoles);\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/controls/search-box.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
              "severity": 2,
              "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
              "line": 10,
              "column": 1,
              "nodeType": "Decorator",
              "messageId": "preferOnPushComponentChangeDetection",
              "endLine": 15,
              "endColumn": 3,
              "suggestions": [
                {
                  "messageId": "suggestAddChangeDetectionOnPush",
                  "fix": {
                    "range": [
                      277,
                      364
                    ],
                    "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                  },
                  "desc": "Add `ChangeDetectionStrategy.OnPush`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component, ElementRef, HostListener, input, output, viewChild } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n selector: 'app-search-box',\n templateUrl: './search-box.component.html',\n styleUrl: './search-box.component.scss',\n imports: [FormsModule]\n})\nexport class SearchBoxComponent {\n readonly placeholder = input('Search...');\n\n readonly searchChange = output<string>();\n\n readonly searchInput = viewChild.required<ElementRef>('searchInput');\n\n onValueChange(value: string) {\n setTimeout(() => this.searchChange.emit(value));\n }\n\n @HostListener('keydown.escape')\n clear() {\n const searchInput = this.searchInput();\n\n searchInput.nativeElement.value = '';\n this.onValueChange(searchInput.nativeElement.value);\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/controls/statistics-demo.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
              "severity": 2,
              "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
              "line": 16,
              "column": 1,
              "nodeType": "Decorator",
              "messageId": "preferOnPushComponentChangeDetection",
              "endLine": 21,
              "endColumn": 3,
              "suggestions": [
                {
                  "messageId": "suggestAddChangeDetectionOnPush",
                  "fix": {
                    "range": [
                      263,
                      695
                    ],
                    "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { AlertService, DialogType, MessageSeverity } from '../../services/alert.service';\nimport { BaseChartDirective } from 'ng2-charts';\nimport { ChartEvent, ChartType } from 'chart.js';\nimport { NgbDropdown, NgbDropdownToggle, NgbDropdownMenu, NgbDropdownButtonItem, NgbDropdownItem }\n from '@ng-bootstrap/ng-bootstrap';\n\ninterface ChartEventArgs { event: ChartEvent; active: object[] }\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                  },
                  "desc": "Add `ChangeDetectionStrategy.OnPush`"
                }
              ]
            },
            {
              "ruleId": "@typescript-eslint/no-unused-vars",
              "message": "Definition for rule '@typescript-eslint/no-unused-vars' was not found.",
              "line": 123,
              "column": 3,
              "endLine": 123,
              "endColumn": 64,
              "severity": 2,
              "nodeType": null
            },
            {
              "ruleId": "@typescript-eslint/no-unused-vars",
              "message": "Definition for rule '@typescript-eslint/no-unused-vars' was not found.",
              "line": 128,
              "column": 3,
              "endLine": 128,
              "endColumn": 64,
              "severity": 2,
              "nodeType": null
            }
          ],
          "suppressedMessages": [],
          "errorCount": 3,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component, OnInit, OnDestroy, inject, viewChild } from '@angular/core';\nimport { AlertService, DialogType, MessageSeverity } from '../../services/alert.service';\nimport { BaseChartDirective } from 'ng2-charts';\nimport { ChartEvent, ChartType } from 'chart.js';\nimport { NgbDropdown, NgbDropdownToggle, NgbDropdownMenu, NgbDropdownButtonItem, NgbDropdownItem }\n from '@ng-bootstrap/ng-bootstrap';\n\ninterface ChartEventArgs { event: ChartEvent; active: object[] }\n\n@Component({\n selector: 'app-statistics-demo',\n templateUrl: './statistics-demo.component.html',\n styleUrl: './statistics-demo.component.scss',\n imports: [BaseChartDirective, NgbDropdown, NgbDropdownToggle, NgbDropdownMenu, NgbDropdownButtonItem, NgbDropdownItem]\n})\nexport class StatisticsDemoComponent implements OnInit, OnDestroy {\n private alertService = inject(AlertService);\n\n chartOptions: object | undefined;\n chartType: ChartType = 'line';\n chartLabels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'];\n chartData = [\n {\n data: [65, 59, 80, 81, 56, 55],\n label: 'Series A',\n fill: 'origin',\n },\n {\n data: [28, 48, 40, 19, 86, 27],\n label: 'Series B',\n fill: 'origin',\n },\n {\n data: [18, 48, 77, 9, 100, 27],\n label: 'Series C',\n fill: 'origin',\n }\n ];\n\n timerReference: ReturnType<typeof setInterval> | undefined;\n\n readonly chart = viewChild.required(BaseChartDirective);\n\n ngOnInit() {\n this.refreshChartOptions();\n this.timerReference = setInterval(() => this.randomize(), 5000);\n }\n\n ngOnDestroy() {\n clearInterval(this.timerReference);\n }\n\n refreshChartOptions() {\n const baseOptions = {\n responsive: true,\n maintainAspectRatio: false,\n title: {\n display: false,\n fontSize: 16,\n text: 'Important Stuff'\n }\n };\n\n if (this.chartType != 'line') {\n this.chartOptions = baseOptions;\n }\n else {\n const lineChartOptions = {\n elements: {\n line: {\n tension: 0.5\n }\n }\n };\n\n this.chartOptions = { ...baseOptions, ...lineChartOptions };\n }\n }\n\n randomize(): void {\n for (const series of this.chartData) {\n for (let j = 0; j < series.data.length; j++) {\n series.data[j] = Math.floor((Math.random() angular.json aspnetcore-https.js eslint.config.js karma.conf.js lint.res.all lint.res.recommended node_modules nuget.config package.json package-lock.json public quickapp.client.esproj QuickApp.report.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json 100) + 1);\n }\n }\n\n this.chart().update();\n }\n\n changeChartType(type: ChartType) {\n this.chartType = type;\n this.refreshChartOptions();\n }\n\n showMessage(msg: string): void {\n this.alertService.showMessage('Demo', msg, MessageSeverity.info);\n }\n\n showDialog(msg: string): void {\n this.alertService.showDialog(msg, DialogType.prompt, (val) => this.configure(true, val), () => this.configure(false));\n }\n\n configure(response: boolean, value?: string) {\n if (response) {\n this.alertService.showStickyMessage('Simulating...', '', MessageSeverity.wait);\n\n setTimeout(() => {\n this.alertService.resetStickyMessage();\n this.alertService.showMessage('Demo', `Your settings was successfully configured to \"${value}\"`, MessageSeverity.success);\n }, 2000);\n } else {\n this.alertService.showMessage('Demo', 'Operation cancelled by user', MessageSeverity.default);\n }\n }\n\n\n // eslint-disable-next-line @typescript-eslint/no-unused-vars\n chartHovered(e: ChartEventArgs): void {\n // Demo\n }\n\n // eslint-disable-next-line @typescript-eslint/no-unused-vars\n chartClicked(e: Partial<ChartEventArgs>): void {\n // Demo\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/controls/todo-demo.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
              "severity": 2,
              "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
              "line": 30,
              "column": 1,
              "nodeType": "Decorator",
              "messageId": "preferOnPushComponentChangeDetection",
              "endLine": 35,
              "endColumn": 3,
              "suggestions": [
                {
                  "messageId": "suggestAddChangeDetectionOnPush",
                  "fix": {
                    "range": [
                      283,
                      1230
                    ],
                    "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { NgClass } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { NgbModal, NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\nimport { TableColumn, NgxDatatableModule } from '@siemens/ngx-datatable';\n\nimport { AuthService } from '../../services/auth.service';\nimport { AlertService, MessageSeverity, DialogType } from '../../services/alert.service';\nimport { AppTranslationService } from '../../services/app-translation.service';\nimport { LocalStoreManager } from '../../services/local-store-manager.service';\nimport { Utilities } from '../../services/utilities';\nimport { SearchBoxComponent } from './search-box.component';\nimport { AutofocusDirective } from '../../directives/autofocus.directive';\n\ninterface Todo {\n $$index?: number;\n completed: boolean;\n important: boolean\n name: string;\n description: string\n}\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                  },
                  "desc": "Add `ChangeDetectionStrategy.OnPush`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component, OnInit, OnDestroy, TemplateRef, inject, input, viewChild } from '@angular/core';\nimport { NgClass } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { NgbModal, NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\nimport { TableColumn, NgxDatatableModule } from '@siemens/ngx-datatable';\n\nimport { AuthService } from '../../services/auth.service';\nimport { AlertService, MessageSeverity, DialogType } from '../../services/alert.service';\nimport { AppTranslationService } from '../../services/app-translation.service';\nimport { LocalStoreManager } from '../../services/local-store-manager.service';\nimport { Utilities } from '../../services/utilities';\nimport { SearchBoxComponent } from './search-box.component';\nimport { AutofocusDirective } from '../../directives/autofocus.directive';\n\ninterface Todo {\n $$index?: number;\n completed: boolean;\n important: boolean\n name: string;\n description: string\n}\n\n@Component({\n selector: 'app-todo-demo',\n templateUrl: './todo-demo.component.html',\n styleUrl: './todo-demo.component.scss',\n imports: [SearchBoxComponent, NgxDatatableModule, FormsModule, AutofocusDirective, NgbTooltip, NgClass, TranslateModule]\n})\nexport class TodoDemoComponent implements OnInit, OnDestroy {\n private alertService = inject(AlertService);\n private translationService = inject(AppTranslationService);\n private localStorage = inject(LocalStoreManager);\n private authService = inject(AuthService);\n private modalService = inject(NgbModal);\n\n public static readonly DBKeyTodoDemo = 'todo-demo.todo_list';\n\n columns: TableColumn[] = [];\n rows: Todo[] = [];\n rowsCache: Todo[] = [];\n editing: Record<string, boolean> = {};\n taskEdit: Partial<Todo> = {};\n isDataLoaded = false;\n loadingIndicator = true;\n formResetToggle = true;\n private _currentUserId: string | undefined;\n private _hideCompletedTasks = false;\n\n get currentUserId() {\n if (this.authService.currentUser) {\n this._currentUserId = this.authService.currentUser.id;\n }\n\n return this._currentUserId;\n }\n\n set hideCompletedTasks(value: boolean) {\n if (value) {\n this.rows = this.rowsCache.filter(r => !r.completed);\n } else {\n this.rows = [...this.rowsCache];\n }\n\n this._hideCompletedTasks = value;\n }\n get hideCompletedTasks() {\n return this._hideCompletedTasks;\n }\n\n readonly verticalScrollbar = input(false);\n\n readonly statusHeaderTemplate = viewChild.required<TemplateRef<unknown>>('statusHeaderTemplate');\n\n readonly statusTemplate = viewChild.required<TemplateRef<unknown>>('statusTemplate');\n\n readonly nameTemplate = viewChild.required<TemplateRef<unknown>>('nameTemplate');\n\n readonly descriptionTemplate = viewChild.required<TemplateRef<unknown>>('descriptionTemplate');\n\n readonly actionsTemplate = viewChild.required<TemplateRef<unknown>>('actionsTemplate');\n\n readonly editorModalTemplate = viewChild.required<TemplateRef<unknown>>('editorModal');\n\n ngOnInit() {\n this.loadingIndicator = true;\n\n this.fetch(data => {\n this.refreshDataIndexes(data);\n this.rows = data;\n this.rowsCache = [...data];\n this.isDataLoaded = true;\n\n setTimeout(() => { this.loadingIndicator = false; }, 1500);\n });\n\n const gT = (key: string) => this.translationService.getTranslation(key);\n\n this.columns = [\n {\n prop: 'completed',\n name: '',\n width: 30,\n headerTemplate: this.statusHeaderTemplate(),\n cellTemplate: this.statusTemplate(),\n resizeable: false,\n canAutoResize: false,\n sortable: false,\n draggable: false\n },\n {\n prop: 'name',\n name: gT('todoDemo.management.Task'),\n width: 100,\n cellTemplate: this.nameTemplate()\n },\n {\n prop: 'description',\n name: gT('todoDemo.management.Description'),\n width: 300,\n cellTemplate: this.descriptionTemplate()\n },\n {\n name: '',\n width: 80,\n cellTemplate: this.actionsTemplate(),\n resizeable: false,\n canAutoResize: false,\n sortable: false,\n draggable: false\n }\n ];\n }\n\n ngOnDestroy() {\n this.saveToDisk();\n }\n\n fetch(callback: (data: Todo[]) => void) {\n let data = this.getFromDisk();\n\n if (data == null) {\n setTimeout(() => {\n data = this.getFromDisk();\n\n if (data == null) {\n data = [\n {\n completed: true,\n important: true,\n name: 'Create visual studio extension',\n description: 'Create a visual studio VSIX extension package that will add this project as an aspnet-core project template'\n },\n {\n completed: false,\n important: true,\n name: 'Do a quick how-to writeup',\n description: ''\n },\n {\n completed: false,\n important: false,\n name: 'Create aspnet-core/Angular tutorials based on this project',\n description: 'Create tutorials (blog/video/youtube) on how to build applications (full stack)' +\n ' using aspnet-core/Angular. The tutorial will focus on getting productive with the technology right' +\n ' away rather than the details on how and why they work so audience can get onboard quickly.'\n },\n ];\n }\n\n callback(data);\n }, 1000);\n } else {\n callback(data);\n }\n }\n\n refreshDataIndexes(data: Todo[]) {\n let index = 0;\n\n for (const i of data) {\n i.$$index = index++;\n }\n }\n\n onSearchChanged(value: string) {\n this.rows = this.rowsCache.filter(r =>\n Utilities.searchArray(value, false, r.name, r.description) ||\n value === 'important' && r.important ||\n value === 'not important' && !r.important);\n }\n\n showErrorAlert(caption: string, message: string) {\n this.alertService.showMessage(caption, message, MessageSeverity.error);\n }\n\n addTask() {\n this.formResetToggle = false;\n\n setTimeout(() => {\n this.formResetToggle = true;\n\n this.taskEdit = {};\n this.modalService.open(this.editorModalTemplate());\n });\n }\n\n save() {\n this.rowsCache.splice(0, 0, this.taskEdit as Todo);\n this.rows.splice(0, 0, this.taskEdit as Todo);\n this.refreshDataIndexes(this.rowsCache);\n this.rows = [...this.rows];\n\n this.saveToDisk();\n return true;\n }\n\n updateValue(event: Event, cell: 'name' | 'description', row: Todo) {\n this.editing[row.$$index + '-' + cell] = false;\n row[cell] = (event.target as HTMLInputElement).value;\n this.rows = [...this.rows];\n\n this.saveToDisk();\n }\n\n delete(row: Todo) {\n this.alertService.showDialog('Are you sure you want to delete the task?', DialogType.confirm, () => this.deleteHelper(row));\n }\n\n deleteHelper(row: Todo) {\n this.rowsCache = this.rowsCache.filter(item => item !== row);\n this.rows = this.rows.filter(item => item !== row);\n\n this.saveToDisk();\n }\n\n getFromDisk() {\n return this.localStorage.getDataObject<Todo[]>(`${TodoDemoComponent.DBKeyTodoDemo}:${this.currentUserId}`);\n }\n\n saveToDisk() {\n if (this.isDataLoaded) {\n this.localStorage.saveSyncedSessionData(this.rowsCache, `${TodoDemoComponent.DBKeyTodoDemo}:${this.currentUserId}`);\n }\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/controls/user-info.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
              "severity": 2,
              "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
              "line": 24,
              "column": 1,
              "nodeType": "Decorator",
              "messageId": "preferOnPushComponentChangeDetection",
              "endLine": 32,
              "endColumn": 3,
              "suggestions": [
                {
                  "messageId": "suggestAddChangeDetectionOnPush",
                  "fix": {
                    "range": [
                      274,
                      1209
                    ],
                    "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { NgModel, NgForm, FormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { NgSelectComponent, NgLabelTemplateDirective, NgOptionTemplateDirective } from '@ng-select/ng-select';\n\nimport { AlertService, MessageSeverity } from '../../services/alert.service';\nimport { AccountService } from '../../services/account.service';\nimport { Utilities } from '../../services/utilities';\nimport { User } from '../../models/user.model';\nimport { UserEdit } from '../../models/user-edit.model';\nimport { Role } from '../../models/role.model';\nimport { Permissions } from '../../models/permission.model';\nimport { NgClass } from '@angular/common';\nimport { AutofocusDirective } from '../../directives/autofocus.directive';\nimport { EqualValidator } from '../../directives/equal-validator.directive';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                  },
                  "desc": "Add `ChangeDetectionStrategy.OnPush`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component, OnInit, Input, inject, input, output, viewChild } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { NgModel, NgForm, FormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { NgSelectComponent, NgLabelTemplateDirective, NgOptionTemplateDirective } from '@ng-select/ng-select';\n\nimport { AlertService, MessageSeverity } from '../../services/alert.service';\nimport { AccountService } from '../../services/account.service';\nimport { Utilities } from '../../services/utilities';\nimport { User } from '../../models/user.model';\nimport { UserEdit } from '../../models/user-edit.model';\nimport { Role } from '../../models/role.model';\nimport { Permissions } from '../../models/permission.model';\nimport { NgClass } from '@angular/common';\nimport { AutofocusDirective } from '../../directives/autofocus.directive';\nimport { EqualValidator } from '../../directives/equal-validator.directive';\n\n@Component({\n selector: 'app-user-info',\n templateUrl: './user-info.component.html',\n styleUrl: './user-info.component.scss',\n imports: [\n FormsModule, AutofocusDirective, NgClass, EqualValidator, NgSelectComponent, NgLabelTemplateDirective,\n NgOptionTemplateDirective, TranslateModule\n ]\n})\nexport class UserInfoComponent implements OnInit {\n private alertService = inject(AlertService);\n private accountService = inject(AccountService);\n\n public isEditMode = false;\n public isNewUser = false;\n public isSaving = false;\n public isChangePassword = false;\n public isEditingSelf = false;\n public showValidationErrors = false;\n public uniqueId = Utilities.uniqueId();\n public user = new User();\n public userEdit = new UserEdit();\n public allRoles: Role[] = [];\n\n public formResetToggle = true;\n\n public changesSavedCallback: (() => void) | undefined;\n public changesFailedCallback: (() => void) | undefined;\n public changesCancelledCallback: (() => void) | undefined;\n\n readonly isViewOnly = input(false);\n @Input() isGeneralEditor = false;\n\n // Outupt to broadcast this instance so it can be accessible from within ng-bootstrap modal template\n readonly afterOnInit = output<UserInfoComponent>();\n\n readonly form = viewChild<NgForm>('f');\n\n readonly userName = viewChild<NgModel>('userName');\n\n readonly userPassword = viewChild<NgModel>('userPassword');\n\n readonly email = viewChild<NgModel>('email');\n\n readonly currentPassword = viewChild<NgModel>('currentPassword');\n\n readonly newPassword = viewChild<NgModel>('newPassword');\n\n readonly confirmPassword = viewChild<NgModel>('confirmPassword');\n\n readonly roles = viewChild<NgModel>('roles');\n\n ngOnInit() {\n if (!this.isGeneralEditor) {\n this.loadCurrentUserData();\n }\n\n this.afterOnInit.emit(this);\n }\n\n private loadCurrentUserData() {\n this.alertService.startLoadingMessage();\n\n if (this.canViewAllRoles) {\n this.accountService.getUserAndRoles()\n .subscribe({\n next: results => this.onCurrentUserDataLoadSuccessful(results[0], results[1]),\n error: error => this.onCurrentUserDataLoadFailed(error)\n });\n } else {\n this.accountService.getUser()\n .subscribe({\n next: user => this.onCurrentUserDataLoadSuccessful(user, user.roles.map(role => new Role(role))),\n error: error => this.onCurrentUserDataLoadFailed(error)\n });\n }\n }\n\n private onCurrentUserDataLoadSuccessful(user: User, roles: Role[]) {\n this.alertService.stopLoadingMessage();\n this.user = user;\n this.allRoles = roles;\n }\n\n private onCurrentUserDataLoadFailed(error: HttpErrorResponse) {\n this.alertService.stopLoadingMessage();\n this.alertService.showStickyMessage('Load Error',\n `Unable to retrieve user data from the server.\\r\\nError: \"${Utilities.getHttpResponseMessage(error)}\"`,\n MessageSeverity.error, error);\n\n this.user = new User();\n }\n\n getRoleByName(name: string) {\n return this.allRoles.find((r) => r.name === name);\n }\n\n showErrorAlert(caption: string, message: string) {\n this.alertService.showMessage(caption, message, MessageSeverity.error);\n }\n\n deletePasswordFromUser(user: UserEdit | User) {\n const userEdit = user as UserEdit;\n\n delete userEdit.currentPassword;\n delete userEdit.newPassword;\n delete userEdit.confirmPassword;\n }\n\n edit() {\n if (!this.isGeneralEditor) {\n this.isEditingSelf = true;\n this.userEdit = new UserEdit();\n Object.assign(this.userEdit, this.user);\n } else {\n if (!this.userEdit) {\n this.userEdit = new UserEdit();\n }\n\n this.isEditingSelf = this.accountService.currentUser ? this.userEdit.id === this.accountService.currentUser.id : false;\n }\n\n this.isEditMode = true;\n this.showValidationErrors = true;\n this.isChangePassword = false;\n }\n\n showValidationAlerts() {\n if (!this.userName()?.valid)\n this.showErrorAlert('User name is required', 'Please enter a user name (minimum of 2 and maximum of 200 characters)');\n\n if (this.userPassword() && !this.userPassword()?.valid)\n this.showErrorAlert('Password is required', 'Please enter the current password');\n\n if (this.email()?.errors?.['required'])\n this.showErrorAlert('Email is required', 'Please enter an email address (maximum of 200 characters)');\n\n if (this.email()?.errors?.['pattern'])\n this.showErrorAlert('Invalid Email', 'Please enter a valid email address');\n\n if (this.isChangePassword && this.isEditingSelf && !this.currentPassword()?.valid)\n this.showErrorAlert('Current password is required', 'Please enter the current password');\n\n if ((this.isChangePassword || this.isNewUser) && !this.newPassword()?.valid)\n this.showErrorAlert('New password is required', 'Please enter the new password (minimum of 6 characters)');\n\n if ((this.isChangePassword || this.isNewUser) && this.newPassword()?.valid && this.confirmPassword()?.errors?.['required'])\n this.showErrorAlert('Confirmation password is required', 'Please enter the confirmation password');\n\n if ((this.isChangePassword || this.isNewUser) && this.newPassword()?.valid && this.confirmPassword()?.errors?.['validateEqual'])\n this.showErrorAlert('Passwword mismatch', 'New password and confirmation password do not match');\n\n if (this.canAssignRoles && !this.roles()?.valid)\n this.showErrorAlert('Roles is required', 'Please select a minimum of 1 role');\n }\n\n save() {\n this.isSaving = true;\n this.alertService.startLoadingMessage('Saving changes...');\n\n if (this.isNewUser) {\n this.accountService.newUser(this.userEdit)\n .subscribe({\n next: user => this.saveSuccessHelper(user),\n error: error => this.saveFailedHelper(error)\n });\n } else {\n this.accountService.updateUser(this.userEdit)\n .subscribe({\n next: () => this.saveSuccessHelper(),\n error: error => this.saveFailedHelper(error)\n });\n }\n }\n\n private saveSuccessHelper(user?: User) {\n this.testIsRoleUserCountChanged(this.user, this.userEdit);\n\n if (user) {\n Object.assign(this.userEdit, user);\n }\n\n this.isSaving = false;\n this.alertService.stopLoadingMessage();\n this.isChangePassword = false;\n this.showValidationErrors = false;\n\n this.deletePasswordFromUser(this.userEdit);\n Object.assign(this.user, this.userEdit);\n this.userEdit = new UserEdit();\n this.resetForm();\n\n if (this.isGeneralEditor) {\n if (this.isNewUser) {\n this.alertService.showMessage('Success', `User \"${this.user.userName}\" was created successfully`, MessageSeverity.success);\n } else if (!this.isEditingSelf) {\n this.alertService.showMessage('Success', `Changes to user \"${this.user.userName}\" was saved successfully`, MessageSeverity.success);\n }\n }\n\n if (this.isEditingSelf) {\n this.alertService.showMessage('Success', 'Changes to your User Profile was saved successfully', MessageSeverity.success);\n this.refreshLoggedInUser();\n }\n\n this.isEditMode = false;\n\n if (this.changesSavedCallback) {\n this.changesSavedCallback();\n }\n }\n\n private saveFailedHelper(error: HttpErrorResponse) {\n this.isSaving = false;\n this.alertService.stopLoadingMessage();\n this.alertService.showStickyMessage('Save Error', 'The below errors occurred whilst saving your changes:', MessageSeverity.error, error);\n this.alertService.showStickyMessage(error, null, MessageSeverity.error);\n\n if (this.changesFailedCallback) {\n this.changesFailedCallback();\n }\n }\n\n private testIsRoleUserCountChanged(currentUser: User, editedUser: User) {\n const rolesAdded = this.isNewUser ? editedUser.roles : editedUser.roles.filter(role => currentUser.roles.indexOf(role) === -1);\n const rolesRemoved = this.isNewUser ? [] : currentUser.roles.filter(role => editedUser.roles.indexOf(role) === -1);\n\n const modifiedRoles = rolesAdded.concat(rolesRemoved);\n\n if (modifiedRoles.length) {\n setTimeout(() => this.accountService.onRolesUserCountChanged(modifiedRoles));\n }\n }\n\n cancel() {\n if (this.isGeneralEditor) {\n this.userEdit = this.user = new UserEdit();\n } else {\n this.userEdit = new UserEdit();\n }\n\n this.showValidationErrors = false;\n this.resetForm();\n\n this.alertService.showMessage('Cancelled', 'Operation cancelled by user', MessageSeverity.default);\n this.alertService.resetStickyMessage();\n\n if (!this.isGeneralEditor) {\n this.isEditMode = false;\n }\n\n if (this.changesCancelledCallback) {\n this.changesCancelledCallback();\n }\n }\n\n close() {\n this.userEdit = this.user = new UserEdit();\n this.showValidationErrors = false;\n this.resetForm();\n this.isEditMode = false;\n\n if (this.changesSavedCallback) {\n this.changesSavedCallback();\n }\n }\n\n private refreshLoggedInUser() {\n this.accountService.refreshLoggedInUser()\n .subscribe({\n next: () => {\n this.loadCurrentUserData();\n },\n error: error => {\n this.alertService.resetStickyMessage();\n this.alertService.showStickyMessage('Refresh failed',\n 'An error occurred whilst refreshing logged in user information from the server', MessageSeverity.error, error);\n }\n });\n }\n\n changePassword() {\n this.isChangePassword = true;\n }\n\n unlockUser() {\n this.isSaving = true;\n this.alertService.startLoadingMessage('Unblocking user...');\n\n this.accountService.unblockUser(this.userEdit.id)\n .subscribe({\n next: () => {\n this.isSaving = false;\n this.userEdit.isLockedOut = false;\n this.alertService.stopLoadingMessage();\n this.alertService.showMessage('Success', 'User has been successfully unblocked', MessageSeverity.success);\n },\n error: error => {\n this.isSaving = false;\n this.alertService.stopLoadingMessage();\n this.alertService.showStickyMessage('Unblock Error',\n 'The below errors occurred whilst unblocking the user:', MessageSeverity.error, error);\n this.alertService.showStickyMessage(error, null, MessageSeverity.error);\n }\n });\n }\n\n resetForm(replace = false) {\n this.isChangePassword = false;\n\n if (!replace) {\n this.form()?.reset();\n } else {\n this.formResetToggle = false;\n\n setTimeout(() => {\n this.formResetToggle = true;\n });\n }\n }\n\n newUser(allRoles: Role[]) {\n this.isGeneralEditor = true;\n this.isNewUser = true;\n\n this.allRoles = [...allRoles];\n this.user = this.userEdit = new UserEdit();\n this.userEdit.isEnabled = true;\n this.edit();\n\n return this.userEdit;\n }\n\n editUser(user: User, allRoles: Role[]) {\n if (user) {\n this.isGeneralEditor = true;\n this.isNewUser = false;\n\n this.setRoles(user, allRoles);\n this.user = new User();\n this.userEdit = new UserEdit();\n Object.assign(this.user, user);\n Object.assign(this.userEdit, user);\n this.edit();\n\n return this.userEdit;\n } else {\n return this.newUser(allRoles);\n }\n }\n\n displayUser(user: User, allRoles?: Role[]) {\n this.user = new User();\n Object.assign(this.user, user);\n this.deletePasswordFromUser(this.user);\n this.setRoles(user, allRoles);\n\n this.isEditMode = false;\n }\n\n private setRoles(user: User, allRoles?: Role[]) {\n this.allRoles = allRoles ? [...allRoles] : [];\n\n for (const role of user.roles) {\n if (!this.allRoles.some(r => r.name === role)) {\n this.allRoles.unshift(new Role(role));\n }\n }\n }\n\n get canViewAllRoles() {\n return this.accountService.userHasPermission(Permissions.viewRoles);\n }\n\n get canAssignRoles() {\n return this.accountService.userHasPermission(Permissions.assignRoles);\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/controls/user-preferences.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
              "severity": 2,
              "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
              "line": 19,
              "column": 1,
              "nodeType": "Decorator",
              "messageId": "preferOnPushComponentChangeDetection",
              "endLine": 24,
              "endColumn": 3,
              "suggestions": [
                {
                  "messageId": "suggestAddChangeDetectionOnPush",
                  "fix": {
                    "range": [
                      233,
                      863
                    ],
                    "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { NgSelectComponent, NgOptionComponent } from '@ng-select/ng-select';\n\nimport { AlertService, DialogType, MessageSeverity } from '../../services/alert.service';\nimport { ConfigurationService } from '../../services/configuration.service';\nimport { AccountService } from '../../services/account.service';\nimport { ThemeManager } from '../../services/theme-manager';\nimport { Utilities } from '../../services/utilities';\nimport { Permissions } from '../../models/permission.model';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                  },
                  "desc": "Add `ChangeDetectionStrategy.OnPush`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component, inject } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { NgSelectComponent, NgOptionComponent } from '@ng-select/ng-select';\n\nimport { AlertService, DialogType, MessageSeverity } from '../../services/alert.service';\nimport { ConfigurationService } from '../../services/configuration.service';\nimport { AccountService } from '../../services/account.service';\nimport { ThemeManager } from '../../services/theme-manager';\nimport { Utilities } from '../../services/utilities';\nimport { Permissions } from '../../models/permission.model';\n\n@Component({\n selector: 'app-user-preferences',\n templateUrl: './user-preferences.component.html',\n styleUrl: './user-preferences.component.scss',\n imports: [NgSelectComponent, FormsModule, NgOptionComponent, TranslateModule]\n})\nexport class UserPreferencesComponent {\n private alertService = inject(AlertService);\n private accountService = inject(AccountService);\n themeManager = inject(ThemeManager);\n configurations = inject(ConfigurationService);\n\n reloadFromServer() {\n this.alertService.startLoadingMessage();\n\n this.accountService.getUserPreferences()\n .subscribe({\n next: results => {\n this.alertService.stopLoadingMessage();\n\n this.configurations.import(results);\n\n this.alertService.showMessage('Defaults loaded!', '', MessageSeverity.info);\n },\n error: error => {\n this.alertService.stopLoadingMessage();\n this.alertService.showStickyMessage('Load Error',\n `Unable to retrieve user preferences from the server.\\r\\nError: \"${Utilities.getHttpResponseMessage(error)}\"`,\n MessageSeverity.error, error);\n }\n });\n }\n\n setAsDefault() {\n this.alertService.showDialog('Are you sure you want to set the current configuration as your new defaults?', DialogType.confirm,\n () => this.setAsDefaultHelper(),\n () => this.alertService.showMessage('Operation Cancelled!', '', MessageSeverity.default));\n }\n\n setAsDefaultHelper() {\n this.alertService.startLoadingMessage('', 'Saving new defaults');\n\n this.accountService.updateUserPreferences(this.configurations.export())\n .subscribe({\n next: () => {\n this.alertService.stopLoadingMessage();\n this.alertService.showMessage('New Defaults', 'Account defaults updated successfully', MessageSeverity.success);\n },\n error: error => {\n this.alertService.stopLoadingMessage();\n this.alertService.showStickyMessage('Save Error',\n `An error occurred whilst saving configuration defaults.\\r\\nError: \"${Utilities.getHttpResponseMessage(error)}\"`,\n MessageSeverity.error, error);\n }\n });\n }\n\n resetDefault() {\n this.alertService.showDialog('Are you sure you want to reset your defaults?', DialogType.confirm,\n () => this.resetDefaultHelper(),\n () => this.alertService.showMessage('Operation Cancelled!', '', MessageSeverity.default));\n }\n\n resetDefaultHelper() {\n this.alertService.startLoadingMessage('', 'Resetting defaults');\n\n this.accountService.updateUserPreferences(null)\n .subscribe({\n next: () => {\n this.alertService.stopLoadingMessage();\n this.configurations.import(null);\n this.alertService.showMessage('Defaults Reset', 'Account defaults reset completed successfully', MessageSeverity.success);\n },\n error: error => {\n this.alertService.stopLoadingMessage();\n this.alertService.showStickyMessage('Save Error',\n `An error occurred whilst resetting configuration defaults.\\r\\nError: \"${Utilities.getHttpResponseMessage(error)}\"`,\n MessageSeverity.error, error);\n }\n });\n }\n\n get canViewCustomers() {\n return this.accountService.userHasPermission(Permissions.viewUsers); // eg. viewCustomersPermission\n }\n\n get canViewProducts() {\n return this.accountService.userHasPermission(Permissions.viewUsers); // eg. viewProductsPermission\n }\n\n get canViewOrders() {\n return !!true; // eg. viewOrdersPermission\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/controls/users-management.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
              "severity": 2,
              "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
              "line": 28,
              "column": 1,
              "nodeType": "Decorator",
              "messageId": "preferOnPushComponentChangeDetection",
              "endLine": 33,
              "endColumn": 3,
              "suggestions": [
                {
                  "messageId": "suggestAddChangeDetectionOnPush",
                  "fix": {
                    "range": [
                      265,
                      1227
                    ],
                    "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { TableColumn, NgxDatatableModule } from '@siemens/ngx-datatable';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { AlertService, DialogType, MessageSeverity } from '../../services/alert.service';\nimport { AppTranslationService } from '../../services/app-translation.service';\nimport { AccountService } from '../../services/account.service';\nimport { Utilities } from '../../services/utilities';\nimport { User } from '../../models/user.model';\nimport { Role } from '../../models/role.model';\nimport { Permissions } from '../../models/permission.model';\nimport { UserEdit } from '../../models/user-edit.model';\nimport { UserInfoComponent } from './user-info.component';\nimport { SearchBoxComponent } from './search-box.component';\n\ninterface UserIndex extends User {\n index: number;\n}\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                  },
                  "desc": "Add `ChangeDetectionStrategy.OnPush`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component, OnInit, TemplateRef, inject, viewChild } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { TableColumn, NgxDatatableModule } from '@siemens/ngx-datatable';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { AlertService, DialogType, MessageSeverity } from '../../services/alert.service';\nimport { AppTranslationService } from '../../services/app-translation.service';\nimport { AccountService } from '../../services/account.service';\nimport { Utilities } from '../../services/utilities';\nimport { User } from '../../models/user.model';\nimport { Role } from '../../models/role.model';\nimport { Permissions } from '../../models/permission.model';\nimport { UserEdit } from '../../models/user-edit.model';\nimport { UserInfoComponent } from './user-info.component';\nimport { SearchBoxComponent } from './search-box.component';\n\ninterface UserIndex extends User {\n index: number;\n}\n\n@Component({\n selector: 'app-users-management',\n templateUrl: './users-management.component.html',\n styleUrl: './users-management.component.scss',\n imports: [SearchBoxComponent, NgxDatatableModule, UserInfoComponent, TranslateModule]\n})\nexport class UsersManagementComponent implements OnInit {\n private alertService = inject(AlertService);\n private translationService = inject(AppTranslationService);\n private accountService = inject(AccountService);\n private modalService = inject(NgbModal);\n\n columns: TableColumn[] = [];\n rows: User[] = [];\n rowsCache: User[] = [];\n editedUser: UserEdit | null = null;\n sourceUser: UserEdit | null = null;\n editingUserName: { name: string } | null = null;\n loadingIndicator = false;\n\n allRoles: Role[] = [];\n\n readonly indexTemplate = viewChild.required<TemplateRef<unknown>>('indexTemplate');\n\n readonly userNameTemplate = viewChild.required<TemplateRef<unknown>>('userNameTemplate');\n\n readonly rolesTemplate = viewChild.required<TemplateRef<unknown>>('rolesTemplate');\n\n readonly actionsTemplate = viewChild.required<TemplateRef<unknown>>('actionsTemplate');\n\n readonly editorModalTemplate = viewChild.required<TemplateRef<unknown>>('editorModal');\n\n userEditor: UserInfoComponent | null = null;\n\n ngOnInit() {\n const gT = (key: string) => this.translationService.getTranslation(key);\n\n this.columns = [\n { prop: 'index', name: '#', width: 40, cellTemplate: this.indexTemplate(), canAutoResize: false },\n { prop: 'jobTitle', name: gT('users.management.Title'), width: 50 },\n { prop: 'userName', name: gT('users.management.UserName'), width: 90, cellTemplate: this.userNameTemplate() },\n { prop: 'fullName', name: gT('users.management.FullName'), width: 120 },\n { prop: 'email', name: gT('users.management.Email'), width: 140 },\n { prop: 'roles', name: gT('users.management.Roles'), width: 120, cellTemplate: this.rolesTemplate() },\n { prop: 'phoneNumber', name: gT('users.management.PhoneNumber'), width: 100 }\n ];\n\n if (this.canManageUsers) {\n this.columns.push({\n name: '',\n width: 160,\n cellTemplate: this.actionsTemplate(),\n resizeable: false,\n canAutoResize: false,\n sortable: false,\n draggable: false\n });\n }\n\n this.loadData();\n }\n\n setUserEditorComponent(userEditor: UserInfoComponent) {\n this.userEditor = userEditor;\n\n if (this.sourceUser == null)\n this.editedUser = this.userEditor.newUser(this.allRoles);\n else\n this.editedUser = this.userEditor.editUser(this.sourceUser, this.allRoles);\n }\n\n addNewUserToList() {\n if (this.sourceUser) {\n Object.assign(this.sourceUser, this.editedUser);\n\n let sourceIndex = this.rowsCache.indexOf(this.sourceUser, 0);\n if (sourceIndex > -1) {\n Utilities.moveArrayItem(this.rowsCache, sourceIndex, 0);\n }\n\n sourceIndex = this.rows.indexOf(this.sourceUser, 0);\n if (sourceIndex > -1) {\n Utilities.moveArrayItem(this.rows, sourceIndex, 0);\n }\n\n this.editedUser = null;\n this.sourceUser = null;\n } else {\n const user = new User();\n Object.assign(user, this.editedUser);\n this.editedUser = null;\n\n let maxIndex = 0;\n for (const u of this.rowsCache) {\n if ((u as UserIndex).index > maxIndex) {\n maxIndex = (u as UserIndex).index;\n }\n }\n\n (user as UserIndex).index = maxIndex + 1;\n\n this.rowsCache.splice(0, 0, user);\n this.rows.splice(0, 0, user);\n this.rows = [...this.rows];\n }\n }\n\n loadData() {\n this.alertService.startLoadingMessage();\n this.loadingIndicator = true;\n\n if (this.canViewRoles) {\n this.accountService.getUsersAndRoles()\n .subscribe({\n next: results => this.onDataLoadSuccessful(results[0], results[1]),\n error: error => this.onDataLoadFailed(error)\n });\n } else {\n this.accountService.getUsers()\n .subscribe({\n next: users => this.onDataLoadSuccessful(users, this.accountService.currentUser?.roles.map(x => new Role(x)) ?? []),\n error: error => this.onDataLoadFailed(error)\n });\n }\n }\n\n onDataLoadSuccessful(users: User[], roles: Role[]) {\n this.alertService.stopLoadingMessage();\n this.loadingIndicator = false;\n\n users.forEach((user, index) => {\n (user as UserIndex).index = index + 1;\n });\n\n this.rowsCache = [...users];\n this.rows = users;\n\n this.allRoles = roles;\n }\n\n onDataLoadFailed(error: HttpErrorResponse) {\n this.alertService.stopLoadingMessage();\n this.loadingIndicator = false;\n\n this.alertService.showStickyMessage('Load Error',\n `Unable to retrieve users from the server.\\r\\nError: \"${Utilities.getHttpResponseMessage(error)}\"`,\n MessageSeverity.error, error);\n }\n\n onSearchChanged(value: string) {\n this.rows = this.rowsCache.filter(r =>\n Utilities.searchArray(value, false, r.userName, r.fullName, r.email, r.phoneNumber, r.jobTitle, r.roles));\n }\n\n newUser() {\n this.editingUserName = null;\n this.sourceUser = null;\n this.openUserEditor();\n }\n\n editUser(row: UserEdit) {\n this.editingUserName = { name: row.userName };\n this.sourceUser = row;\n this.openUserEditor();\n }\n\n openUserEditor() {\n const modalRef = this.modalService.open(this.editorModalTemplate(), {\n size: 'lg',\n backdrop: 'static'\n });\n\n modalRef.shown.subscribe(() => {\n if (!this.userEditor)\n throw new Error('The user editor component was not set.');\n\n this.userEditor.changesSavedCallback = () => {\n this.addNewUserToList();\n modalRef.close();\n };\n\n this.userEditor.changesCancelledCallback = () => {\n this.editedUser = null;\n this.sourceUser = null;\n modalRef.close();\n };\n });\n\n modalRef.hidden.subscribe(() => {\n if (!this.userEditor)\n throw new Error('The user editor component was not set.');\n\n this.editingUserName = null;\n this.userEditor.resetForm(true);\n this.userEditor = null;\n });\n }\n\n deleteUser(row: UserEdit) {\n this.alertService.showDialog(`Are you sure you want to delete \"${row.userName}\"?`,\n DialogType.confirm, () => this.deleteUserHelper(row));\n }\n\n deleteUserHelper(row: UserEdit) {\n this.alertService.startLoadingMessage('Deleting...');\n this.loadingIndicator = true;\n\n this.accountService.deleteUser(row)\n .subscribe({\n next: () => {\n this.alertService.stopLoadingMessage();\n this.loadingIndicator = false;\n\n this.rowsCache = this.rowsCache.filter(item => item !== row);\n this.rows = this.rows.filter(item => item !== row);\n },\n error: error => {\n this.alertService.stopLoadingMessage();\n this.loadingIndicator = false;\n\n this.alertService.showStickyMessage('Delete Error',\n `An error occurred whilst deleting the user.\\r\\nError: \"${Utilities.getHttpResponseMessage(error)}\"`,\n MessageSeverity.error, error);\n }\n });\n }\n\n get canAssignRoles() {\n return this.accountService.userHasPermission(Permissions.assignRoles);\n }\n\n get canViewRoles() {\n return this.accountService.userHasPermission(Permissions.viewRoles);\n }\n\n get canManageUsers() {\n return this.accountService.userHasPermission(Permissions.manageUsers);\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/customers/customers.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
              "severity": 2,
              "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
              "line": 13,
              "column": 1,
              "nodeType": "Decorator",
              "messageId": "preferOnPushComponentChangeDetection",
              "endLine": 19,
              "endColumn": 3,
              "suggestions": [
                {
                  "messageId": "suggestAddChangeDetectionOnPush",
                  "fix": {
                    "range": [
                      225,
                      448
                    ],
                    "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { fadeInOut } from '../../services/animations';\nimport { TodoDemoComponent } from '../controls/todo-demo.component';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                  },
                  "desc": "Add `ChangeDetectionStrategy.OnPush`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { fadeInOut } from '../../services/animations';\nimport { TodoDemoComponent } from '../controls/todo-demo.component';\n\n@Component({\n selector: 'app-customers',\n templateUrl: './customers.component.html',\n styleUrl: './customers.component.scss',\n animations: [fadeInOut],\n imports: [TodoDemoComponent, TranslateModule]\n})\nexport class CustomersComponent {\n\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/home/home.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
              "severity": 2,
              "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
              "line": 22,
              "column": 1,
              "nodeType": "Decorator",
              "messageId": "preferOnPushComponentChangeDetection",
              "endLine": 31,
              "endColumn": 3,
              "suggestions": [
                {
                  "messageId": "suggestAddChangeDetectionOnPush",
                  "fix": {
                    "range": [
                      271,
                      1090
                    ],
                    "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { RouterLink } from '@angular/router';\nimport { CdkDragDrop, moveItemInArray, CdkDropList, CdkDrag, CdkDragPlaceholder } from '@angular/cdk/drag-drop';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { fadeInOut } from '../../services/animations';\nimport { ConfigurationService } from '../../services/configuration.service';\nimport { AuthService } from '../../services/auth.service';\nimport { StatisticsDemoComponent } from '../controls/statistics-demo.component';\nimport { NotificationsViewerComponent } from '../controls/notifications-viewer.component';\nimport { TodoDemoComponent } from '../controls/todo-demo.component';\nimport { BannerDemoComponent } from '../controls/banner-demo.component';\n\ninterface WidgetIndex { element: string, index: number }\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                  },
                  "desc": "Add `ChangeDetectionStrategy.OnPush`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { AfterViewInit, Component, ElementRef, inject, viewChild } from '@angular/core';\nimport { RouterLink } from '@angular/router';\nimport { CdkDragDrop, moveItemInArray, CdkDropList, CdkDrag, CdkDragPlaceholder } from '@angular/cdk/drag-drop';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { fadeInOut } from '../../services/animations';\nimport { ConfigurationService } from '../../services/configuration.service';\nimport { AuthService } from '../../services/auth.service';\nimport { StatisticsDemoComponent } from '../controls/statistics-demo.component';\nimport { NotificationsViewerComponent } from '../controls/notifications-viewer.component';\nimport { TodoDemoComponent } from '../controls/todo-demo.component';\nimport { BannerDemoComponent } from '../controls/banner-demo.component';\n\ninterface WidgetIndex { element: string, index: number }\n\n@Component({\n selector: 'app-home',\n templateUrl: './home.component.html',\n styleUrl: './home.component.scss',\n animations: [fadeInOut],\n imports: [\n CdkDropList, RouterLink, CdkDrag, CdkDragPlaceholder, StatisticsDemoComponent, NotificationsViewerComponent,\n TodoDemoComponent, BannerDemoComponent, TranslateModule\n ]\n})\nexport class HomeComponent implements AfterViewInit {\n private authService = inject(AuthService);\n configurations = inject(ConfigurationService);\n\n dragStartDelay = 200;\n readonly DBKeyWidgetsOrder = 'home-component.widgets_order';\n\n readonly widgetsContainer = viewChild.required<ElementRef<HTMLDivElement>>('widgetsContainer');\n\n ngAfterViewInit(): void {\n this.restoreWidgetsOrder();\n }\n\n restoreWidgetsOrder() {\n const widgetIndexes = this.loadWidgetIndexes();\n\n if (widgetIndexes == null || widgetIndexes.length == 0)\n return;\n\n const parentEle = this.widgetsContainer().nativeElement;\n\n for (const widget of Array.from(parentEle.children)) {\n const index = widgetIndexes.find(w => w.element == widget.id)?.index;\n\n if (index != null)\n this.insertChildAtIndex(parentEle, widget, index);\n }\n }\n\n getPlaceholderMinHeight(placeholder: HTMLElement, widget: HTMLElement) {\n const placeholderMinHeight = parseInt(placeholder.style.minHeight, 10);\n return placeholderMinHeight || widget.offsetHeight;\n }\n\n insertChildAtIndex(parent: HTMLDivElement, child: Element, index: number) {\n if (!index)\n index = 0;\n\n if (index >= parent.children.length) {\n parent.appendChild(child);\n } else {\n parent.insertBefore(child, parent.children[index]);\n }\n }\n\n drop(event: CdkDragDrop<HTMLDivElement>) {\n const el = event.item.element.nativeElement;\n const parentEle = event.container.element.nativeElement;\n const anchorEle = parentEle.children[event.currentIndex];\n\n const widgetIndexes = new Array<WidgetIndex>(parentEle.children.length);\n\n for (let i = 0; i < parentEle.children.length; i++) {\n widgetIndexes[i] = { element: parentEle.children[i].id, index: i };\n }\n\n moveItemInArray(widgetIndexes, event.previousIndex, event.currentIndex);\n\n for (let i = 0; i < widgetIndexes.length; i++) {\n widgetIndexes[i].index = i;\n }\n\n if (event.currentIndex < event.previousIndex)\n parentEle.insertBefore(el, anchorEle);\n else\n parentEle.insertBefore(el, anchorEle.nextElementSibling);\n\n this.saveWidgetIndexes(widgetIndexes);\n }\n\n saveWidgetIndexes(indexes: WidgetIndex[]) {\n this.configurations\n .saveConfiguration(indexes, `${this.DBKeyWidgetsOrder}:${this.authService.currentUser?.id}`);\n }\n\n loadWidgetIndexes() {\n return this.configurations\n .getConfiguration<WidgetIndex[]>(`${this.DBKeyWidgetsOrder}:${this.authService.currentUser?.id}`);\n }\n\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/login/login.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
              "severity": 2,
              "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
              "line": 18,
              "column": 1,
              "nodeType": "Decorator",
              "messageId": "preferOnPushComponentChangeDetection",
              "endLine": 23,
              "endColumn": 3,
              "suggestions": [
                {
                  "messageId": "suggestAddChangeDetectionOnPush",
                  "fix": {
                    "range": [
                      259,
                      768
                    ],
                    "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { NgClass } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Subscription } from 'rxjs';\n\nimport { AlertService, MessageSeverity, DialogType } from '../../services/alert.service';\nimport { AuthService } from '../../services/auth.service';\nimport { ConfigurationService } from '../../services/configuration.service';\nimport { Utilities } from '../../services/utilities';\nimport { UserLogin } from '../../models/user-login.model';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                  },
                  "desc": "Add `ChangeDetectionStrategy.OnPush`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component, OnInit, OnDestroy, Input, inject } from '@angular/core';\nimport { NgClass } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Subscription } from 'rxjs';\n\nimport { AlertService, MessageSeverity, DialogType } from '../../services/alert.service';\nimport { AuthService } from '../../services/auth.service';\nimport { ConfigurationService } from '../../services/configuration.service';\nimport { Utilities } from '../../services/utilities';\nimport { UserLogin } from '../../models/user-login.model';\n\n@Component({\n selector: 'app-login',\n templateUrl: './login.component.html',\n styleUrl: './login.component.scss',\n imports: [FormsModule, NgClass]\n})\n\nexport class LoginComponent implements OnInit, OnDestroy {\n private alertService = inject(AlertService);\n private authService = inject(AuthService);\n private configurations = inject(ConfigurationService);\n\n userLogin = new UserLogin();\n isLoading = false;\n formResetToggle = true;\n modalClosedCallback: (() => void) | undefined;\n loginStatusSubscription: Subscription | undefined;\n\n @Input()\n isModal = false;\n\n ngOnInit() {\n this.userLogin.rememberMe = this.authService.rememberMe;\n\n if (this.getShouldRedirect()) {\n this.authService.redirectLoginUser();\n } else {\n this.loginStatusSubscription = this.authService.getLoginStatusEvent().subscribe(() => {\n if (this.getShouldRedirect()) {\n this.authService.redirectLoginUser();\n }\n });\n }\n }\n\n ngOnDestroy() {\n this.loginStatusSubscription?.unsubscribe();\n }\n\n getShouldRedirect() {\n return !this.isModal && this.authService.isLoggedIn && !this.authService.isSessionExpired;\n }\n\n showErrorAlert(caption: string, message: string) {\n this.alertService.showMessage(caption, message, MessageSeverity.error);\n }\n\n closeModal() {\n if (this.modalClosedCallback) {\n this.modalClosedCallback();\n }\n }\n\n login() {\n this.isLoading = true;\n this.alertService.startLoadingMessage('', 'Attempting login...');\n\n this.authService.loginWithPassword(this.userLogin.userName, this.userLogin.password, this.userLogin.rememberMe)\n .subscribe({\n next: user => {\n setTimeout(() => {\n this.alertService.stopLoadingMessage();\n this.isLoading = false;\n this.reset();\n\n if (!this.isModal) {\n this.alertService.showMessage('Login', `Welcome ${user.userName}!`, MessageSeverity.success);\n } else {\n this.alertService.showMessage('Login', `Session for ${user.userName} restored!`, MessageSeverity.success);\n setTimeout(() => {\n this.alertService.showStickyMessage('Session Restored', 'Please try your last operation again', MessageSeverity.default);\n }, 500);\n\n this.closeModal();\n }\n }, 500);\n },\n error: error => {\n this.alertService.stopLoadingMessage();\n\n if (Utilities.checkNoNetwork(error)) {\n this.alertService.showStickyMessage(Utilities.noNetworkMessageCaption, Utilities.noNetworkMessageDetail, MessageSeverity.error, error);\n this.offerBackendDevServer();\n } else {\n const errorMessage = Utilities.getHttpResponseMessage(error);\n\n if (errorMessage) {\n this.alertService.showStickyMessage('Unable to login', this.mapLoginErrorMessage(errorMessage), MessageSeverity.error, error);\n } else {\n this.alertService.showStickyMessage('Unable to login',\n 'An error occurred whilst logging in, please try again later.\\nError: ' + Utilities.stringify(error), MessageSeverity.error, error);\n }\n }\n\n setTimeout(() => {\n this.isLoading = false;\n }, 500);\n }\n });\n }\n\n offerBackendDevServer() {\n if (Utilities.checkIsLocalHost(location.origin) && Utilities.checkIsLocalHost(this.configurations.baseUrl)) {\n this.alertService.showDialog(\n 'Dear Developer!<br />' +\n 'It appears your backend Web API server is inaccessible or not running...<br />' +\n 'Would you want to temporarily switch to the fallback development API server below? (Or specify another)', DialogType.prompt, value => {\n this.configurations.baseUrl = value as string;\n this.alertService.showStickyMessage('API Changed!', 'The target Web API has been changed to: ' + value, MessageSeverity.warn);\n },\n null,\n null,\n null,\n this.configurations.fallbackBaseUrl);\n }\n }\n\n mapLoginErrorMessage(error: string) {\n if (error === 'invalid_username_or_password') {\n return 'Invalid username or password';\n }\n\n return error;\n }\n\n reset() {\n this.formResetToggle = false;\n\n setTimeout(() => {\n this.formResetToggle = true;\n });\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/not-found/not-found.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
              "severity": 2,
              "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
              "line": 13,
              "column": 1,
              "nodeType": "Decorator",
              "messageId": "preferOnPushComponentChangeDetection",
              "endLine": 19,
              "endColumn": 3,
              "suggestions": [
                {
                  "messageId": "suggestAddChangeDetectionOnPush",
                  "fix": {
                    "range": [
                      225,
                      425
                    ],
                    "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { RouterLink } from '@angular/router';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { fadeInOut } from '../../services/animations';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                  },
                  "desc": "Add `ChangeDetectionStrategy.OnPush`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component } from '@angular/core';\nimport { RouterLink } from '@angular/router';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { fadeInOut } from '../../services/animations';\n\n@Component({\n selector: 'app-not-found',\n templateUrl: './not-found.component.html',\n styleUrl: './not-found.component.scss',\n animations: [fadeInOut],\n imports: [RouterLink, TranslateModule]\n})\nexport class NotFoundComponent {\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/orders/orders.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
              "severity": 2,
              "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
              "line": 12,
              "column": 1,
              "nodeType": "Decorator",
              "messageId": "preferOnPushComponentChangeDetection",
              "endLine": 18,
              "endColumn": 3,
              "suggestions": [
                {
                  "messageId": "suggestAddChangeDetectionOnPush",
                  "fix": {
                    "range": [
                      225,
                      379
                    ],
                    "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { fadeInOut } from '../../services/animations';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                  },
                  "desc": "Add `ChangeDetectionStrategy.OnPush`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { fadeInOut } from '../../services/animations';\n\n@Component({\n selector: 'app-orders',\n templateUrl: './orders.component.html',\n styleUrl: './orders.component.scss',\n animations: [fadeInOut],\n imports: [TranslateModule]\n})\nexport class OrdersComponent {\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/products/products.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
              "severity": 2,
              "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
              "line": 12,
              "column": 1,
              "nodeType": "Decorator",
              "messageId": "preferOnPushComponentChangeDetection",
              "endLine": 18,
              "endColumn": 3,
              "suggestions": [
                {
                  "messageId": "suggestAddChangeDetectionOnPush",
                  "fix": {
                    "range": [
                      225,
                      379
                    ],
                    "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { fadeInOut } from '../../services/animations';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                  },
                  "desc": "Add `ChangeDetectionStrategy.OnPush`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { fadeInOut } from '../../services/animations';\n\n@Component({\n selector: 'app-products',\n templateUrl: './products.component.html',\n styleUrl: './products.component.scss',\n animations: [fadeInOut],\n imports: [TranslateModule]\n})\nexport class ProductsComponent {\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/settings/settings.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
              "severity": 2,
              "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
              "line": 21,
              "column": 1,
              "nodeType": "Decorator",
              "messageId": "preferOnPushComponentChangeDetection",
              "endLine": 30,
              "endColumn": 3,
              "suggestions": [
                {
                  "messageId": "suggestAddChangeDetectionOnPush",
                  "fix": {
                    "range": [
                      267,
                      1031
                    ],
                    "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { ActivatedRoute, Router, RouterLink } from '@angular/router';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { NgbNavModule } from '@ng-bootstrap/ng-bootstrap';\nimport { Subscription } from 'rxjs';\n\nimport { fadeInOut } from '../../services/animations';\nimport { AccountService } from '../../services/account.service';\nimport { Permissions } from '../../models/permission.model';\nimport { UserInfoComponent } from '../controls/user-info.component';\nimport { UserPreferencesComponent } from '../controls/user-preferences.component';\nimport { UsersManagementComponent } from '../controls/users-management.component';\nimport { RolesManagementComponent } from '../controls/roles-management.component';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                  },
                  "desc": "Add `ChangeDetectionStrategy.OnPush`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component, inject, OnInit, OnDestroy, AfterViewInit } from '@angular/core';\nimport { ActivatedRoute, Router, RouterLink } from '@angular/router';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { NgbNavModule } from '@ng-bootstrap/ng-bootstrap';\nimport { Subscription } from 'rxjs';\n\nimport { fadeInOut } from '../../services/animations';\nimport { AccountService } from '../../services/account.service';\nimport { Permissions } from '../../models/permission.model';\nimport { UserInfoComponent } from '../controls/user-info.component';\nimport { UserPreferencesComponent } from '../controls/user-preferences.component';\nimport { UsersManagementComponent } from '../controls/users-management.component';\nimport { RolesManagementComponent } from '../controls/roles-management.component';\n\n@Component({\n selector: 'app-settings',\n templateUrl: './settings.component.html',\n styleUrl: './settings.component.scss',\n animations: [fadeInOut],\n imports: [\n RouterLink, TranslateModule, NgbNavModule,\n UserInfoComponent, UserPreferencesComponent, UsersManagementComponent, RolesManagementComponent\n ]\n})\nexport class SettingsComponent implements OnInit, AfterViewInit, OnDestroy {\n private router = inject(Router);\n public route = inject(ActivatedRoute);\n private accountService = inject(AccountService);\n\n readonly profileTab = 'profile';\n readonly preferencesTab = 'preferences';\n readonly usersTab = 'users';\n readonly rolesTab = 'roles';\n activeTab = '';\n showDatatable = false; // Delays showing the table until tab is shown so column widths are calculated correctly\n fragmentSubscription: Subscription | undefined;\n\n ngOnInit() {\n this.fragmentSubscription = this.route.fragment.subscribe(fragment => this.setActiveTab(fragment));\n }\n\n ngAfterViewInit() {\n setTimeout(() => this.showDatatable = true);\n }\n\n ngOnDestroy() {\n this.fragmentSubscription?.unsubscribe();\n }\n\n setActiveTab(fragment: string | null) {\n fragment = fragment?.toLowerCase() ?? this.profileTab;\n\n const canViewTab = fragment === this.profileTab || fragment === this.preferencesTab ||\n (fragment === this.usersTab && this.canViewUsers) || (fragment === this.rolesTab && this.canViewRoles);\n\n if (canViewTab)\n this.activeTab = fragment;\n else\n this.router.navigate([], { fragment: this.profileTab });\n }\n\n get canViewUsers() {\n return this.accountService.userHasPermission(Permissions.viewUsers);\n }\n\n get canViewRoles() {\n return this.accountService.userHasPermission(Permissions.viewRoles);\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/directives/equal-validator.directive.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/no-forward-ref",
              "severity": 2,
              "message": "Avoid using `forwardRef`",
              "line": 13,
              "column": 44,
              "nodeType": "CallExpression",
              "messageId": "noForwardRef",
              "endLine": 13,
              "endColumn": 76
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Directive, forwardRef, HostAttributeToken, inject } from '@angular/core';\nimport { Validator, AbstractControl, NG_VALIDATORS, ValidationErrors } from '@angular/forms';\n\n@Directive({\n selector: '[appValidateEqual][formControlName],[appValidateEqual][formControl],[appValidateEqual][ngModel]',\n providers: [\n { provide: NG_VALIDATORS, useExisting: forwardRef(() => EqualValidator), multi: true }\n ],\n standalone: true\n})\nexport class EqualValidator implements Validator {\n validateEqual = inject(new HostAttributeToken('appValidateEqual'));\n reverse = inject(new HostAttributeToken('reverse'), { optional: true });\n\n validate(control: AbstractControl): ValidationErrors | null {\n const other = control.root.get(this.validateEqual);\n\n if (!other) {\n return null;\n }\n\n return this.reverse === 'true' ? this.validateReverse(control, other) : this.validateNoReverse(control, other);\n }\n\n private validateNoReverse(control: AbstractControl, other: AbstractControl): ValidationErrors | null {\n return other.value === control.value ? null : { validateEqual: true };\n }\n\n private validateReverse(control: AbstractControl, other: AbstractControl): ValidationErrors | null {\n if (control.value === other.value) {\n if (other.errors) {\n delete other.errors['validateEqual'];\n\n if (Object.keys(other.errors).length === 0) {\n other.setErrors(null);\n }\n }\n } else {\n other.setErrors({ validateEqual: true });\n }\n\n return null;\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/services/app-title.service.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-injectable-provided-in",
              "severity": 2,
              "message": "The `providedIn` property is mandatory for `Injectables`",
              "line": 13,
              "column": 1,
              "nodeType": "Decorator",
              "messageId": "useInjectableProvidedIn",
              "endLine": 13,
              "endColumn": 14,
              "suggestions": [
                {
                  "messageId": "suggestInjector",
                  "fix": {
                    "range": [
                      435,
                      435
                    ],
                    "text": "{providedIn: 'any'}"
                  },
                  "data": {
                    "injector": "any"
                  },
                  "desc": "Use `providedIn: 'any'`"
                },
                {
                  "messageId": "suggestInjector",
                  "fix": {
                    "range": [
                      435,
                      435
                    ],
                    "text": "{providedIn: 'platform'}"
                  },
                  "data": {
                    "injector": "platform"
                  },
                  "desc": "Use `providedIn: 'platform'`"
                },
                {
                  "messageId": "suggestInjector",
                  "fix": {
                    "range": [
                      435,
                      435
                    ],
                    "text": "{providedIn: 'root'}"
                  },
                  "data": {
                    "injector": "root"
                  },
                  "desc": "Use `providedIn: 'root'`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Injectable, inject } from '@angular/core';\nimport { TitleStrategy, RouterStateSnapshot } from '@angular/router';\nimport { Title } from '@angular/platform-browser';\n\nimport { Utilities } from './utilities';\n\n@Injectable()\nexport class AppTitleService extends TitleStrategy {\n private readonly titleService = inject(Title);\n\n static appName: string | undefined;\n\n override updateTitle(routerState: RouterStateSnapshot) {\n let title = this.buildTitle(routerState);\n\n if (title) {\n const fragment = routerState.url.split('#')[1];\n\n if (fragment) {\n title += ` | ${Utilities.toTitleCase(fragment)}`;\n }\n\n if (AppTitleService.appName) {\n title += ` - ${AppTitleService.appName}`;\n }\n\n this.titleService.setTitle(title);\n\n } else if (AppTitleService.appName) {\n this.titleService.setTitle(AppTitleService.appName);\n }\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/services/db-keys.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-injectable-provided-in",
              "severity": 2,
              "message": "The `providedIn` property is mandatory for `Injectables`",
              "line": 9,
              "column": 1,
              "nodeType": "Decorator",
              "messageId": "useInjectableProvidedIn",
              "endLine": 9,
              "endColumn": 14,
              "suggestions": [
                {
                  "messageId": "suggestInjector",
                  "fix": {
                    "range": [
                      264,
                      264
                    ],
                    "text": "{providedIn: 'any'}"
                  },
                  "data": {
                    "injector": "any"
                  },
                  "desc": "Use `providedIn: 'any'`"
                },
                {
                  "messageId": "suggestInjector",
                  "fix": {
                    "range": [
                      264,
                      264
                    ],
                    "text": "{providedIn: 'platform'}"
                  },
                  "data": {
                    "injector": "platform"
                  },
                  "desc": "Use `providedIn: 'platform'`"
                },
                {
                  "messageId": "suggestInjector",
                  "fix": {
                    "range": [
                      264,
                      264
                    ],
                    "text": "{providedIn: 'root'}"
                  },
                  "data": {
                    "injector": "root"
                  },
                  "desc": "Use `providedIn: 'root'`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class DBkeys {\n public static readonly CURRENT_USER = 'current_user';\n public static readonly USER_PERMISSIONS = 'user_permissions';\n public static readonly ACCESS_TOKEN = 'access_token';\n public static readonly REFRESH_TOKEN = 'refresh_token';\n public static readonly TOKEN_EXPIRES_IN = 'expires_in';\n\n public static readonly REMEMBER_ME = 'remember_me';\n\n public static readonly LANGUAGE = 'language';\n public static readonly HOME_URL = 'home_url';\n public static readonly THEME_ID = 'themeId';\n public static readonly SHOW_DASHBOARD_STATISTICS = 'show_dashboard_statistics';\n public static readonly SHOW_DASHBOARD_NOTIFICATIONS = 'show_dashboard_notifications';\n public static readonly SHOW_DASHBOARD_TODO = 'show_dashboard_todo';\n public static readonly SHOW_DASHBOARD_BANNER = 'show_dashboard_banner';\n\n public static readonly USER_CONFIG_KEYS = 'user_config_keys';\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/services/endpoint-base.service.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-injectable-provided-in",
              "severity": 2,
              "message": "The `providedIn` property is mandatory for `Injectables`",
              "line": 24,
              "column": 1,
              "nodeType": "Decorator",
              "messageId": "useInjectableProvidedIn",
              "endLine": 24,
              "endColumn": 14,
              "suggestions": [
                {
                  "messageId": "suggestInjector",
                  "fix": {
                    "range": [
                      656,
                      656
                    ],
                    "text": "{providedIn: 'any'}"
                  },
                  "data": {
                    "injector": "any"
                  },
                  "desc": "Use `providedIn: 'any'`"
                },
                {
                  "messageId": "suggestInjector",
                  "fix": {
                    "range": [
                      656,
                      656
                    ],
                    "text": "{providedIn: 'platform'}"
                  },
                  "data": {
                    "injector": "platform"
                  },
                  "desc": "Use `providedIn: 'platform'`"
                },
                {
                  "messageId": "suggestInjector",
                  "fix": {
                    "range": [
                      656,
                      656
                    ],
                    "text": "{providedIn: 'root'}"
                  },
                  "data": {
                    "injector": "root"
                  },
                  "desc": "Use `providedIn: 'root'`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Injectable, inject } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\nimport { Observable, Subject, from, throwError } from 'rxjs';\nimport { mergeMap, switchMap, catchError } from 'rxjs/operators';\n\nimport { AuthService } from './auth.service';\nimport { User } from '../models/user.model';\n\ninterface ServerError {\n status: number;\n error: {\n error: string;\n error_description: string;\n };\n}\n\n\n@Injectable()\nexport class EndpointBase {\n private authService = inject(AuthService);\n\n private taskPauser: Subject<boolean> | null = null;\n private isRefreshingLogin = false;\n\n protected get requestHeaders(): { headers: HttpHeaders | Record<string, string | string[]> } {\n const headers = new HttpHeaders({\n Authorization: `Bearer ${this.authService.accessToken}`,\n 'Content-Type': 'application/json',\n Accept: 'application/json, text/plain, */*'\n });\n\n return { headers };\n }\n\n public refreshLogin(): Observable<User> {\n return this.authService.refreshLogin().pipe(\n catchError((error: ServerError) => {\n return this.handleError(error, () => this.refreshLogin());\n }));\n }\n\n protected handleError<T>(error: ServerError, continuation: () => Observable<T>) {\n if (error.status === 401) {\n if (this.isRefreshingLogin) {\n return this.pauseTask(continuation);\n }\n\n this.isRefreshingLogin = true;\n\n return from(this.authService.refreshLogin()).pipe(\n mergeMap(() => {\n this.isRefreshingLogin = false;\n this.resumeTasks(true);\n\n return continuation();\n }),\n catchError(refreshLoginError => {\n this.isRefreshingLogin = false;\n this.resumeTasks(false);\n this.authService.reLogin();\n\n if (refreshLoginError.status === 401 || (refreshLoginError.error && refreshLoginError.error.error === 'invalid_grant')) {\n return throwError(() => new Error('session expired'));\n } else {\n return throwError(() => refreshLoginError || new Error('server error'));\n }\n }));\n }\n\n if (error.error && error.error.error === 'invalid_grant') {\n this.authService.reLogin();\n\n return throwError(() => (error.error && error.error.error_description) ? `session expired (${error.error.error_description})` : 'session expired');\n } else {\n return throwError(() => error);\n }\n }\n\n private pauseTask<T>(continuation: () => Observable<T>) {\n if (!this.taskPauser) {\n this.taskPauser = new Subject();\n }\n\n return this.taskPauser.pipe(switchMap(continueOp => {\n return continueOp ? continuation() : throwError(() => new Error('session expired'));\n }));\n }\n\n private resumeTasks(continueOp: boolean) {\n setTimeout(() => {\n if (this.taskPauser) {\n this.taskPauser.next(continueOp);\n this.taskPauser.complete();\n this.taskPauser = null;\n }\n });\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/services/jwt-helper.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-injectable-provided-in",
              "severity": 2,
              "message": "The `providedIn` property is mandatory for `Injectables`",
              "line": 13,
              "column": 1,
              "nodeType": "Decorator",
              "messageId": "useInjectableProvidedIn",
              "endLine": 13,
              "endColumn": 14,
              "suggestions": [
                {
                  "messageId": "suggestInjector",
                  "fix": {
                    "range": [
                      324,
                      324
                    ],
                    "text": "{providedIn: 'any'}"
                  },
                  "data": {
                    "injector": "any"
                  },
                  "desc": "Use `providedIn: 'any'`"
                },
                {
                  "messageId": "suggestInjector",
                  "fix": {
                    "range": [
                      324,
                      324
                    ],
                    "text": "{providedIn: 'platform'}"
                  },
                  "data": {
                    "injector": "platform"
                  },
                  "desc": "Use `providedIn: 'platform'`"
                },
                {
                  "messageId": "suggestInjector",
                  "fix": {
                    "range": [
                      324,
                      324
                    ],
                    "text": "{providedIn: 'root'}"
                  },
                  "data": {
                    "injector": "root"
                  },
                  "desc": "Use `providedIn: 'root'`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\n/**\n angular.json aspnetcore-https.js eslint.config.js karma.conf.js lint.res.all lint.res.recommended node_modules nuget.config package.json package-lock.json public quickapp.client.esproj QuickApp.report.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json Helper class to decode and find JWT expiration.\n */\nimport { Injectable } from '@angular/core';\n\n\n@Injectable()\nexport class JwtHelper {\n\n public urlBase64Decode(str: string): string {\n let output = str.replace(/-/g, '+').replace(/_/g, '/');\n switch (output.length % 4) {\n case 0: { break; }\n case 2: { output += '=='; break; }\n case 3: { output += '='; break; }\n default: {\n throw new Error('Illegal base64url string!');\n }\n }\n return this.b64DecodeUnicode(output);\n }\n\n // https://developer.mozilla.org/en/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#The_Unicode_Problem\n private b64DecodeUnicode(str: string) {\n return decodeURIComponent(Array.prototype.map.call(atob(str), c => {\n return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n }).join(''));\n }\n\n public decodeToken(token: string) {\n const parts = token.split('.');\n\n if (parts.length !== 3) {\n throw new Error('JWT must have 3 parts');\n }\n\n const decoded = this.urlBase64Decode(parts[1]);\n if (!decoded) {\n throw new Error('Cannot decode the token');\n }\n\n return JSON.parse(decoded);\n }\n\n public getTokenExpirationDate(token: string): Date | null {\n const decoded = this.decodeToken(token);\n\n if (!Object.prototype.hasOwnProperty.call(decoded, 'exp')) {\n return null;\n }\n\n const date = new Date(0); // The 0 here is the key, which sets the date to the epoch\n date.setUTCSeconds(decoded.exp);\n\n return date;\n }\n\n public isTokenExpired(token: string, offsetSeconds?: number): boolean {\n const date = this.getTokenExpirationDate(token);\n offsetSeconds = offsetSeconds || 0;\n\n if (date == null) {\n return false;\n }\n\n // Token expired?\n return !(date.valueOf() > (new Date().valueOf() + (offsetSeconds angular.json aspnetcore-https.js eslint.config.js karma.conf.js lint.res.all lint.res.recommended node_modules nuget.config package.json package-lock.json public quickapp.client.esproj QuickApp.report.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json 1000)));\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/services/lowercase-url-serializer.service.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-injectable-provided-in",
              "severity": 2,
              "message": "The `providedIn` property is mandatory for `Injectables`",
              "line": 11,
              "column": 1,
              "nodeType": "Decorator",
              "messageId": "useInjectableProvidedIn",
              "endLine": 11,
              "endColumn": 14,
              "suggestions": [
                {
                  "messageId": "suggestInjector",
                  "fix": {
                    "range": [
                      370,
                      370
                    ],
                    "text": "{providedIn: 'any'}"
                  },
                  "data": {
                    "injector": "any"
                  },
                  "desc": "Use `providedIn: 'any'`"
                },
                {
                  "messageId": "suggestInjector",
                  "fix": {
                    "range": [
                      370,
                      370
                    ],
                    "text": "{providedIn: 'platform'}"
                  },
                  "data": {
                    "injector": "platform"
                  },
                  "desc": "Use `providedIn: 'platform'`"
                },
                {
                  "messageId": "suggestInjector",
                  "fix": {
                    "range": [
                      370,
                      370
                    ],
                    "text": "{providedIn: 'root'}"
                  },
                  "data": {
                    "injector": "root"
                  },
                  "desc": "Use `providedIn: 'root'`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Injectable } from \"@angular/core\";\nimport { DefaultUrlSerializer, UrlTree } from \"@angular/router\";\nimport { Utilities } from \"./utilities\";\n\n@Injectable()\nexport class LowerCaseUrlSerializer extends DefaultUrlSerializer {\n override parse(url: string): UrlTree {\n const possibleSeparators = /[?;#]/;\n const indexOfSeparator = url.search(possibleSeparators);\n let processedUrl: string;\n\n if (indexOfSeparator > -1) {\n const separator = url.charAt(indexOfSeparator);\n const urlParts = Utilities.splitInTwo(url, separator);\n urlParts.firstPart = urlParts.firstPart.toLowerCase();\n\n processedUrl = urlParts.firstPart + separator + urlParts.secondPart;\n } else {\n processedUrl = url.toLowerCase();\n }\n\n return super.parse(processedUrl);\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/services/notification-endpoint.service.ts",
          "messages": [
            {
              "ruleId": "@typescript-eslint/no-unused-vars",
              "message": "Definition for rule '@typescript-eslint/no-unused-vars' was not found.",
              "line": 98,
              "column": 3,
              "endLine": 98,
              "endColumn": 64,
              "severity": 2,
              "nodeType": null
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Observable, of, throwError } from 'rxjs';\n\n@Injectable({\n providedIn: 'root'\n})\nexport class NotificationEndpoint {\n private demoNotifications = [\n {\n id: 1,\n header: '20 New Products were added to your inventory by \"administrator\"',\n body: '20 new \"BMW M6\" were added to your stock by \"administrator\" on 5/28/2017 4:54:13 PM',\n isRead: true,\n isPinned: true,\n date: '2017-05-28T16:29:13.5877958'\n },\n {\n id: 2,\n header: '1 Product running low',\n body: 'You are running low on \"Nissan Patrol\". 2 Items remaining',\n isRead: false,\n isPinned: false,\n date: '2017-05-28T19:54:42.4144502'\n },\n {\n id: 3,\n header: 'Tomorrow is half day',\n body: 'Guys, tomorrow we close by midday. Please check in your sales before noon. Thanks. Alex.',\n isRead: false,\n isPinned: false,\n date: '2017-05-30T11:13:42.4144502'\n }\n ];\n\n\n getNotificationEndpoint<T>(notificationId: number) {\n const notification = this.demoNotifications.find(val => val.id === notificationId);\n return this.createDemoResponse(notification as T, notification ? null : 404);\n }\n\n getNotificationsEndpoint<T>(page: number, pageSize: number) {\n return this.createDemoResponse(this.demoNotifications as T, null, page, pageSize);\n }\n\n getUnreadNotificationsEndpoint<T>(userId?: string) {\n const unreadNotifications = this.demoNotifications.filter(val => !val.isRead);\n return this.createDemoResponse(unreadNotifications as T, null, userId);\n }\n\n getNewNotificationsEndpoint<T>(lastNotificationDate?: Date) {\n return this.createDemoResponse(this.demoNotifications as T, null, lastNotificationDate);\n }\n\n getPinUnpinNotificationEndpoint(notificationId: number, isPinned?: boolean) {\n const notification = this.demoNotifications.find(val => val.id === notificationId);\n\n if (notification) {\n if (isPinned == null) {\n isPinned = !notification.isPinned;\n }\n\n notification.isPinned = isPinned;\n notification.isRead = true;\n\n return this.createDemoResponse(null);\n } else {\n return this.createDemoResponse(null, 404);\n }\n }\n\n getReadUnreadNotificationEndpoint(notificationIds: number[], isRead: boolean) {\n for (const notificationId of notificationIds) {\n const notification = this.demoNotifications.find(val => val.id === notificationId);\n\n if (notification)\n notification.isRead = isRead;\n }\n\n return this.createDemoResponse(null);\n }\n\n getDeleteNotificationEndpoint<T>(notificationId: number) {\n const notification = this.demoNotifications.find(val => val.id === notificationId);\n\n if (notification)\n this.demoNotifications = this.demoNotifications.filter(val => val.id !== notificationId);\n\n return this.createDemoResponse(notification as T, notification ? null : 404);\n }\n\n // eslint-disable-next-line @typescript-eslint/no-unused-vars\n private createDemoResponse<T>(data: T, errorCode: number | null = null, ...args: unknown[]): Observable<T> {\n if (errorCode == null)\n return of(data);\n else\n return throwError(() => new HttpErrorResponse({ status: errorCode, error: 'Demo. An error occurred' }));\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/services/utilities.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-injectable-provided-in",
              "severity": 2,
              "message": "The `providedIn` property is mandatory for `Injectables`",
              "line": 20,
              "column": 1,
              "nodeType": "Decorator",
              "messageId": "useInjectableProvidedIn",
              "endLine": 20,
              "endColumn": 14,
              "suggestions": [
                {
                  "messageId": "suggestInjector",
                  "fix": {
                    "range": [
                      605,
                      605
                    ],
                    "text": "{providedIn: 'any'}"
                  },
                  "data": {
                    "injector": "any"
                  },
                  "desc": "Use `providedIn: 'any'`"
                },
                {
                  "messageId": "suggestInjector",
                  "fix": {
                    "range": [
                      605,
                      605
                    ],
                    "text": "{providedIn: 'platform'}"
                  },
                  "data": {
                    "injector": "platform"
                  },
                  "desc": "Use `providedIn: 'platform'`"
                },
                {
                  "messageId": "suggestInjector",
                  "fix": {
                    "range": [
                      605,
                      605
                    ],
                    "text": "{providedIn: 'root'}"
                  },
                  "data": {
                    "injector": "root"
                  },
                  "desc": "Use `providedIn: 'root'`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Injectable } from '@angular/core';\nimport { HttpResponseBase, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\ntype HttpMessageSearchOptions = Readonly<{\n searchInCaption?: boolean;\n searchInMessage?: boolean;\n exactMatch?: boolean;\n startsWith?: boolean;\n endsWith?: boolean;\n contains?: boolean;\n resultType?: 'caption' | 'preferMessage' | 'both';\n}>;\n\n@Injectable()\nexport class Utilities {\n public static readonly captionAndMessageSeparator = ':';\n public static readonly noNetworkMessageCaption = 'No Network';\n public static readonly noNetworkMessageDetail = 'The server cannot be reached';\n public static readonly accessDeniedMessageCaption = 'Access Denied!';\n public static readonly accessDeniedMessageDetail = '';\n public static readonly notFoundMessageCaption = 'Not Found';\n public static readonly notFoundMessageDetail = 'The target resource cannot be found';\n\n public static readonly findHttpResponseMessageDefaultSearchOption: HttpMessageSearchOptions = {\n searchInCaption: true,\n searchInMessage: false,\n exactMatch: true,\n startsWith: false,\n endsWith: false,\n contains: false,\n resultType: 'preferMessage',\n };\n\n\n public static cookies =\n {\n getItem: (sKey: string) => {\n return decodeURIComponent(document.cookie.replace(new RegExp('(?:(?:^|.*;)\\\\s*' + encodeURIComponent(sKey)\n .replace(/[-.+*]/g, '\\\\$&') + '\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$'), '$1')) || null;\n },\n setItem: (sKey: string, sValue: string, vEnd: number | string | Date, sPath: string, sDomain: string, bSecure: boolean) => {\n if (!sKey || /^(?:expires|max-age|path|domain|secure)$/i.test(sKey)) {\n return false;\n }\n\n let sExpires = '';\n\n if (vEnd) {\n switch (vEnd.constructor) {\n case Number:\n sExpires = vEnd === Infinity ? '; expires=Fri, 31 Dec 9999 23:59:59 GMT' : '; max-age=' + vEnd;\n break;\n case String:\n sExpires = '; expires=' + vEnd;\n break;\n case Date:\n sExpires = '; expires=' + (vEnd as Date).toUTCString();\n break;\n }\n }\n\n document.cookie = encodeURIComponent(sKey) + '=' + encodeURIComponent(sValue) + sExpires +\n (sDomain ? '; domain=' + sDomain : '') + (sPath ? '; path=' + sPath : '') + (bSecure ? '; secure' : '');\n return true;\n },\n removeItem: (sKey: string, sPath: string, sDomain: string) => {\n if (!sKey) {\n return false;\n }\n document.cookie = encodeURIComponent(sKey) + '=; expires=Thu, 01 Jan 1970 00:00:00 GMT' +\n (sDomain ? '; domain=' + sDomain : '') + (sPath ? '; path=' + sPath : '');\n return true;\n },\n hasItem: (sKey: string) => {\n return (new RegExp('(?:^|;\\\\s*)' + encodeURIComponent(sKey).replace(/[-.+*]/g, '\\\\$&') + '\\\\s*\\\\=')).test(document.cookie);\n },\n keys: () => {\n const aKeys = document.cookie.replace(/((?:^|\\s*;)[^=]+)(?=;|$)|^\\s*|\\s*(?:=[^;]*)?(?:$)/g, '').split(/\\s*(?:=[^;]*)?;\\s*/);\n for (let nIdx = 0; nIdx < aKeys.length; nIdx++) { aKeys[nIdx] = decodeURIComponent(aKeys[nIdx]); }\n return aKeys;\n }\n };\n\n public static getHttpResponseMessages(data: HttpResponseBase): string[] {\n const responses: string[] = [];\n\n if (this.checkNoNetwork(data)) {\n responses.push(`${this.noNetworkMessageCaption}${this.captionAndMessageSeparator} ${this.noNetworkMessageDetail}`);\n } else {\n const responseData = this.getResponseData(data);\n\n if (responseData) {\n if (typeof responseData === 'object') {\n for (const key in responseData) {\n responses.push(`${key}${this.captionAndMessageSeparator} ${responseData[key]}`);\n }\n }\n else {\n responses.push(responseData);\n }\n }\n }\n\n if (this.checkAccessDenied(data)) {\n responses.splice(0, 0, `${this.accessDeniedMessageCaption}${this.captionAndMessageSeparator} ${this.accessDeniedMessageDetail}`);\n }\n\n if (this.checkNotFound(data)) {\n let message = `${this.notFoundMessageCaption}${this.captionAndMessageSeparator} ${this.notFoundMessageDetail}`;\n if (data.url) {\n message += `. ${data.url}`;\n }\n\n responses.splice(0, 0, message);\n }\n\n if (!responses.length) {\n const response = (data as HttpErrorResponse).message ?? data.statusText;\n\n if (response)\n responses.push(response);\n }\n\n return responses;\n }\n\n public static getHttpResponseMessage(data: HttpResponseBase, ...preferredMessageKeys: string[]): string | null {\n let httpMessage =\n Utilities.findHttpResponseMessage(Utilities.noNetworkMessageCaption, data) ||\n Utilities.findHttpResponseMessage(Utilities.notFoundMessageCaption, data) ||\n Utilities.findHttpResponseMessage('error_description', data);\n\n if (!httpMessage) {\n for (const msgKey of preferredMessageKeys) {\n httpMessage = Utilities.findHttpResponseMessage(msgKey, data);\n\n if (httpMessage?.trim() !== '')\n return httpMessage;\n }\n }\n\n if (!httpMessage) {\n httpMessage = Utilities.findHttpResponseMessage('error', data);\n }\n\n if (!httpMessage) {\n const responseMessages = Utilities.getHttpResponseMessages(data);\n\n if (responseMessages.length)\n httpMessage = responseMessages.join('\\n');\n }\n\n return httpMessage;\n }\n\n public static findHttpResponseMessage(searchString: string, data: HttpResponseBase,\n searchOptions?: HttpMessageSearchOptions): string | null {\n\n searchString = searchString.toUpperCase();\n searchOptions = { ...this.findHttpResponseMessageDefaultSearchOption, ...searchOptions };\n\n let result: string | null = null;\n let captionAndMessage = { caption: '', message: null as string | null };\n const httpMessages = this.getHttpResponseMessages(data);\n\n for (const httpMsg of httpMessages) {\n const splitMsg = Utilities.splitInTwo(httpMsg, this.captionAndMessageSeparator);\n captionAndMessage = { caption: splitMsg.firstPart, message: splitMsg.secondPart ?? null };\n\n let messageToSearch = '';\n\n if (searchOptions.searchInCaption && searchOptions.searchInMessage)\n messageToSearch = httpMsg;\n else if (searchOptions.searchInCaption)\n messageToSearch = captionAndMessage.caption;\n else if (searchOptions.searchInMessage)\n messageToSearch = captionAndMessage.message ?? '';\n\n messageToSearch = messageToSearch.toUpperCase();\n\n if (searchOptions.exactMatch && messageToSearch === searchString) {\n result = httpMsg;\n break;\n }\n\n if (searchOptions.startsWith && messageToSearch.startsWith(searchString)) {\n result = httpMsg;\n break;\n }\n\n if (searchOptions.endsWith && messageToSearch.endsWith(searchString)) {\n result = httpMsg;\n break;\n }\n\n if (searchOptions.contains && messageToSearch.includes(searchString)) {\n result = httpMsg;\n break;\n }\n }\n\n if (result && searchOptions.resultType)\n switch (searchOptions.resultType) {\n case 'preferMessage':\n return captionAndMessage.message ?? captionAndMessage.caption;\n case 'caption':\n return captionAndMessage.caption;\n case 'both':\n return result;\n }\n else\n return result;\n }\n\n public static getResponseData(response: HttpResponseBase) {\n let results;\n\n if (response instanceof HttpResponse) {\n results = response.body;\n }\n\n if (response instanceof HttpErrorResponse) {\n results = response.error || response.message || response.statusText;\n }\n\n return results;\n }\n\n public static checkNoNetwork(response: HttpResponseBase) {\n if (response instanceof HttpResponseBase) {\n return response.status === 0;\n }\n\n return false;\n }\n\n public static checkAccessDenied(response: HttpResponseBase) {\n if (response instanceof HttpResponseBase) {\n return response.status === 403;\n }\n\n return false;\n }\n\n public static checkNotFound(response: HttpResponseBase) {\n if (response instanceof HttpResponseBase) {\n return response.status === 404;\n }\n\n return false;\n }\n\n public static checkIsLocalHost(url: string, base?: string) {\n if (url) {\n const location = new URL(url, base);\n return location.hostname === 'localhost' || location.hostname === '127.0.0.1';\n }\n\n return false;\n }\n\n public static getQueryParamsFromString(paramString: string) {\n const params: Record<string, string | undefined> = {};\n\n for (const param of paramString.split('&')) {\n const keyValue = Utilities.splitInTwo(param, '=');\n params[keyValue.firstPart] = keyValue.secondPart;\n }\n\n return params;\n }\n\n public static splitInTwo(text: string, separator: string, splitFromEnd = false): { firstPart: string, secondPart: string | undefined } {\n let separatorIndex = -1;\n\n if (separator !== '') {\n if (!splitFromEnd)\n separatorIndex = text.indexOf(separator);\n else\n separatorIndex = text.lastIndexOf(separator);\n }\n\n if (separatorIndex === -1) {\n return { firstPart: text, secondPart: undefined };\n }\n\n const part1 = text.substring(0, separatorIndex).trim();\n const part2 = text.substring(separatorIndex + 1).trim();\n\n return { firstPart: part1, secondPart: part2 };\n }\n\n public static stringify(value: unknown, depth = 3): string {\n const worker = (value: unknown, depth: number, padding = ''): string => {\n if (value === null || value === undefined) {\n return '';\n }\n\n if (typeof value === 'object') {\n const objectobject = '[object Object]';\n\n const result = value.toString();\n if (result !== objectobject)\n return result;\n\n const keyValuePairs = [];\n let tab = `\\n${padding}`;\n\n for (const key in value) {\n if (Object.prototype.hasOwnProperty.call(value, key)) {\n const keyEntry = value[key as keyof object];\n\n if (typeof keyEntry !== 'function') {\n const keyValue = depth > 0 ? worker(keyEntry, depth - 1, padding + ' ') : String(keyEntry);\n keyValuePairs.push(`${tab}${key}: ${keyValue === objectobject ? '...' : keyValue}`);\n tab = padding;\n }\n }\n }\n\n return keyValuePairs.join('\\n');\n }\n\n return String(value);\n }\n\n return worker(value, depth); //.replace(/^\\s+/, '');\n }\n\n public static JsonTryParse(value: string) {\n try {\n return JSON.parse(value);\n } catch {\n return value;\n }\n }\n\n public static GetObjectWithLoweredPropertyNames<T extends Record<string, unknown>>(obj: T) {\n return Object.keys(obj).reduce((newObj, k) => {\n newObj[k.toLowerCase()] = obj[k];\n return newObj;\n }, {} as Record<string, unknown>) as T;\n }\n\n public static TestIsObjectEmpty(obj: object) {\n for (const prop in obj) {\n if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n return false;\n }\n }\n\n return true;\n }\n\n public static TestIsUndefined(value: unknown) {\n return typeof value === 'undefined';\n }\n\n public static TestIsString(value: unknown) {\n return typeof value === 'string';\n }\n\n public static capitalizeFirstLetter(text: string) {\n if (text) {\n return text.charAt(0).toUpperCase() + text.slice(1);\n } else {\n return text;\n }\n }\n\n public static toTitleCase(text: string) {\n return text.replace(/\\w\\S*/g, (subString) => {\n return subString.charAt(0).toUpperCase() + subString.substring(1).toLowerCase();\n });\n }\n\n public static toLowerCase(item: string | string[]) {\n if (Array.isArray(item)) {\n const loweredArray: string[] = [];\n\n for (let i = 0; i < item.length; i++) {\n loweredArray[i] = item[i].toLowerCase();\n }\n\n return loweredArray;\n } else {\n return item.toLowerCase();\n }\n }\n\n public static uniqueId() {\n return this.randomNumber(1000000, 9000000).toString();\n }\n\n public static randomNumber(min: number, max: number) {\n return Math.floor(Math.random() angular.json aspnetcore-https.js eslint.config.js karma.conf.js lint.res.all lint.res.recommended node_modules nuget.config package.json package-lock.json public quickapp.client.esproj QuickApp.report.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json (max - min + 1) + min);\n }\n\n public static baseUrl() {\n let base = '';\n\n if (window.location.origin) {\n base = window.location.origin;\n } else {\n base = window.location.protocol + '//' + window.location.hostname + (window.location.port ? ':' + window.location.port : '');\n }\n\n return base.replace(/\\/$/, '');\n }\n\n public static printDateOnly(date: Date) {\n date = new Date(date);\n\n const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\n const dayOfWeek = date.getDay();\n const dayOfMonth = date.getDate();\n let sup = '';\n const month = date.getMonth();\n const year = date.getFullYear();\n\n if (dayOfMonth === 1 || dayOfMonth === 21 || dayOfMonth === 31) {\n sup = 'st';\n } else if (dayOfMonth === 2 || dayOfMonth === 22) {\n sup = 'nd';\n } else if (dayOfMonth === 3 || dayOfMonth === 23) {\n sup = 'rd';\n } else {\n sup = 'th';\n }\n\n const dateString = dayNames[dayOfWeek] + ', ' + dayOfMonth + sup + ' ' + monthNames[month] + ' ' + year;\n\n return dateString;\n }\n\n public static printTimeOnly(date: Date) {\n date = new Date(date);\n\n let period = '';\n let minute = date.getMinutes().toString();\n let hour = date.getHours();\n\n period = hour < 12 ? 'AM' : 'PM';\n\n if (hour === 0) {\n hour = 12;\n }\n if (hour > 12) {\n hour = hour - 12;\n }\n\n if (minute.length === 1) {\n minute = '0' + minute;\n }\n\n const timeString = hour + ':' + minute + ' ' + period;\n\n return timeString;\n }\n\n public static printDate(date: Date, separator = 'at') {\n return `${Utilities.printDateOnly(date)} ${separator} ${Utilities.printTimeOnly(date)}`;\n }\n\n public static printFriendlyDate(date: Date, separator = '-') {\n const today = new Date(); today.setHours(0, 0, 0, 0);\n const yesterday = new Date(today); yesterday.setDate(yesterday.getDate() - 1);\n const test = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n\n if (test.toDateString() === today.toDateString()) {\n return `Today ${separator} ${Utilities.printTimeOnly(date)}`;\n }\n if (test.toDateString() === yesterday.toDateString()) {\n return `Yesterday ${separator} ${Utilities.printTimeOnly(date)}`;\n } else {\n return Utilities.printDate(date, separator);\n }\n }\n\n public static printShortDate(date: Date, separator = '/', dateTimeSeparator = '-') {\n let day = date.getDate().toString();\n let month = (date.getMonth() + 1).toString();\n const year = date.getFullYear();\n\n if (day.length === 1) {\n day = '0' + day;\n }\n\n if (month.length === 1) {\n month = '0' + month;\n }\n\n return `${month}${separator}${day}${separator}${year} ${dateTimeSeparator} ${Utilities.printTimeOnly(date)}`;\n }\n\n public static parseDate(input: string | number | Date) {\n if (input instanceof Date) {\n return input;\n }\n\n if (typeof input === 'string') {\n if (input.search(/[a-su-z+]/i) === -1) {\n input = input + 'Z';\n }\n\n return new Date(input);\n }\n\n return new Date(input);\n }\n\n public static printDuration(start: Date, end: Date) {\n start = new Date(start);\n end = new Date(end);\n\n // get total seconds between the times\n let delta = Math.abs(start.valueOf() - end.valueOf()) / 1000;\n\n // calculate (and subtract) whole days\n const days = Math.floor(delta / 86400);\n delta -= days angular.json aspnetcore-https.js eslint.config.js karma.conf.js lint.res.all lint.res.recommended node_modules nuget.config package.json package-lock.json public quickapp.client.esproj QuickApp.report.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json 86400;\n\n // calculate (and subtract) whole hours\n const hours = Math.floor(delta / 3600) % 24;\n delta -= hours angular.json aspnetcore-https.js eslint.config.js karma.conf.js lint.res.all lint.res.recommended node_modules nuget.config package.json package-lock.json public quickapp.client.esproj QuickApp.report.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json 3600;\n\n // calculate (and subtract) whole minutes\n const minutes = Math.floor(delta / 60) % 60;\n delta -= minutes angular.json aspnetcore-https.js eslint.config.js karma.conf.js lint.res.all lint.res.recommended node_modules nuget.config package.json package-lock.json public quickapp.client.esproj QuickApp.report.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json 60;\n\n // what's left is seconds\n const seconds = delta % 60; // in theory the modulus is not required\n\n let printedDays = '';\n\n if (days) {\n printedDays = `${days} days`;\n }\n\n if (hours) {\n printedDays += printedDays ? `, ${hours} hours` : `${hours} hours`;\n }\n\n if (minutes) {\n printedDays += printedDays ? `, ${minutes} minutes` : `${minutes} minutes`;\n }\n\n if (seconds) {\n printedDays += printedDays ? ` and ${seconds} seconds` : `${seconds} seconds`;\n }\n\n\n if (!printedDays) {\n printedDays = '0';\n }\n\n return printedDays;\n }\n\n public static getAge(birthDate: string | number | Date, otherDate: string | number | Date) {\n birthDate = new Date(birthDate);\n otherDate = new Date(otherDate);\n\n let years = (otherDate.getFullYear() - birthDate.getFullYear());\n\n if (otherDate.getMonth() < birthDate.getMonth() ||\n otherDate.getMonth() === birthDate.getMonth() && otherDate.getDate() < birthDate.getDate()) {\n years--;\n }\n\n return years;\n }\n\n public static searchArray(searchTerm: string, caseSensitive: boolean, ...values: unknown[]) {\n if (!searchTerm) {\n return true;\n }\n\n let filter = searchTerm.trim();\n let data = values.join();\n\n if (!caseSensitive) {\n filter = filter.toLowerCase();\n data = data.toLowerCase();\n }\n\n return data.indexOf(filter) !== -1;\n }\n\n public static moveArrayItem(array: unknown[], oldIndex: number, newIndex: number) {\n if (oldIndex < 0) {\n return;\n }\n\n if (newIndex < 0) {\n newIndex += array.length;\n }\n\n if (newIndex >= array.length) {\n let k = newIndex - array.length;\n while ((k--) + 1) {\n array.push(undefined);\n }\n }\n\n array.splice(newIndex, 0, array.splice(oldIndex, 1)[0]);\n }\n\n public static expandCamelCase(text: string) {\n if (!text) {\n return text;\n }\n\n return text.replace(/([A-Z][a-z]+)/g, ' $1')\n .replace(/([A-Z][A-Z]+)/g, ' $1')\n .replace(/([^A-Za-z ]+)/g, ' $1');\n }\n\n public static testIsAbsoluteUrl(url: string) {\n const r = new RegExp('^(?:[a-z]+:)?//', 'i');\n return r.test(url);\n }\n\n public static convertToAbsoluteUrl(url: string) {\n return Utilities.testIsAbsoluteUrl(url) ? url : '//' + url;\n }\n\n public static removeNulls<T extends object | unknown[]>(item: T) {\n const isArray = Array.isArray(item);\n\n for (const k in item) {\n if (Object.prototype.hasOwnProperty.call(item, k)) {\n const propertyValue = item[k as keyof typeof item];\n\n if (propertyValue === null) {\n if (isArray)\n item.splice(+k, 1)\n else\n delete item[k as keyof typeof item];\n } else if (typeof propertyValue === 'object') {\n Utilities.removeNulls(propertyValue);\n }\n\n if (isArray && item.length === +k) {\n Utilities.removeNulls(item);\n }\n }\n }\n\n return item;\n }\n\n public static debounce(fn: (...params: unknown[]) => unknown, delay: number, immediate?: boolean) {\n let timer: ReturnType<typeof setTimeout> | undefined;\n\n return function (this: unknown, ...args: unknown[]) {\n if (timer === undefined && immediate) {\n fn.apply(this, args);\n }\n\n clearTimeout(timer);\n timer = setTimeout(() => fn.apply(this, args), delay);\n return timer;\n }\n }\n}\n",
          "usedDeprecatedRules": []
        }
      ]
    }
  }
}
