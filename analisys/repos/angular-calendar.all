
Linting "demos"...
[{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/carbon-ad/carbon-ad.component.ts","messages":[{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":8,"column":1,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":13,"endColumn":3,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[72,114],"text":", ChangeDetectionStrategy,\n} from '@angular/core';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/use-component-view-encapsulation","severity":2,"message":"Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect","line":12,"column":36,"nodeType":"Identifier","messageId":"useComponentViewEncapsulation","endLine":12,"endColumn":40,"suggestions":[{"messageId":"suggestRemoveViewEncapsulationNone","fix":{"range":[51,271],"text":",\n} from '@angular/core';\n\n@Component({\n  selector: 'mwl-carbon-ad',\n  templateUrl: './carbon-ad.component.html',\n  styleUrls: ['./carbon-ad.component.scss'],\n  "},"desc":"Remove `ViewEncapsulation.None`"}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  ViewEncapsulation,\n} from '@angular/core';\n\n@Component({\n  selector: 'mwl-carbon-ad',\n  templateUrl: './carbon-ad.component.html',\n  styleUrls: ['./carbon-ad.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CarbonAdComponent implements AfterViewInit {\n  constructor(private elementRef: ElementRef<HTMLElement>) {}\n\n  ngAfterViewInit(): void {\n    const script = document.createElement('script');\n    script.src =\n      '//cdn.carbonads.com/carbon.js?serve=CESIVK3U&placement=mattlewis92githubio';\n    script.id = '_carbonads_js';\n    this.elementRef.nativeElement.append(script);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-app.component.ts","messages":[{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":84,"column":1,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":88,"endColumn":3,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[37,3124],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { Router, NavigationStart, NavigationEnd } from '@angular/router';\nimport { map, take, filter } from 'rxjs/operators';\nimport StackBlitzSDK from '@stackblitz/sdk';\nimport { Angulartics2GoogleGlobalSiteTag } from 'angulartics2';\nimport { sources as demoUtilsSources } from './demo-modules/demo-utils/sources';\nimport { Subject } from 'rxjs';\nimport { NgbNav } from '@ng-bootstrap/ng-bootstrap/nav/nav';\n\ninterface Source {\n  filename: string;\n  contents: {\n    raw: string;\n    highlighted: string;\n  };\n  language: string;\n}\n\ninterface Demo {\n  label: string;\n  path: string;\n  sources?: Source[];\n  darkTheme: boolean;\n  tags: string[];\n}\n\nfunction getSources(folder: string): Promise<Source[]> {\n  return import('./demo-modules/' + folder + '/sources.ts').then(\n    ({ sources }) => {\n      return sources.map(({ filename, contents }) => {\n        const [, extension]: RegExpMatchArray = filename.match(/^.+\\.(.+)$/);\n        const languages: { [extension: string]: string } = {\n          ts: 'typescript',\n          html: 'html',\n          css: 'css',\n        };\n        return {\n          filename,\n          contents: {\n            raw: contents.raw.default\n              .replace(\n                \",\\n    RouterModule.forChild([{ path: '', component: DemoComponent }])\",\n                ''\n              )\n              .replace(\"\\nimport { RouterModule } from '@angular/router';\", ''),\n            highlighted: contents.highlighted.default // TODO - move this into a regexp replace for both\n              .replace(\n                ',\\n    RouterModule.forChild([{ path: <span class=\"hljs-string\">\\'\\'</span>, component: DemoComponent }])',\n                ''\n              )\n              .replace(\n                '\\n<span class=\"hljs-keyword\">import</span> { RouterModule } from <span class=\"hljs-string\">\\'@angular/router\\'</span>;',\n                ''\n              ),\n          },\n          language: languages[extension],\n        };\n      });\n    }\n  );\n}\n\nconst dependencyVersions: any = {\n  angular: require('@angular/core/package.json').version,\n  angularRouter: require('@angular/router/package.json').version,\n  angularCalendar: require('../../../package.json').version,\n  calendarUtils: require('calendar-utils/package.json').version,\n  angularResizableElement: require('angular-resizable-element/package.json')\n    .version,\n  angularDraggableDroppable: require('angular-draggable-droppable/package.json')\n    .version,\n  dateFns: require('date-fns/package.json').version,\n  rxjs: require('rxjs/package.json').version,\n  bootstrap: require('bootstrap/package.json').version,\n  zoneJs: require('zone.js/package.json').version,\n  ngBootstrap: require('@ng-bootstrap/ng-bootstrap/package.json').version,\n  rrule: require('rrule/package.json').version,\n  fontAwesome: require('@fortawesome/fontawesome-free/package.json').version,\n  positioning: require('positioning/package.json').version,\n  flatpickr: require('flatpickr/package.json').version,\n  angularxFlatpickr: require('angularx-flatpickr/package.json').version,\n};\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, OnInit, ViewChild } from '@angular/core';\nimport { Router, NavigationStart, NavigationEnd } from '@angular/router';\nimport { map, take, filter } from 'rxjs/operators';\nimport StackBlitzSDK from '@stackblitz/sdk';\nimport { Angulartics2GoogleGlobalSiteTag } from 'angulartics2';\nimport { sources as demoUtilsSources } from './demo-modules/demo-utils/sources';\nimport { Subject } from 'rxjs';\nimport { NgbNav } from '@ng-bootstrap/ng-bootstrap/nav/nav';\n\ninterface Source {\n  filename: string;\n  contents: {\n    raw: string;\n    highlighted: string;\n  };\n  language: string;\n}\n\ninterface Demo {\n  label: string;\n  path: string;\n  sources?: Source[];\n  darkTheme: boolean;\n  tags: string[];\n}\n\nfunction getSources(folder: string): Promise<Source[]> {\n  return import('./demo-modules/' + folder + '/sources.ts').then(\n    ({ sources }) => {\n      return sources.map(({ filename, contents }) => {\n        const [, extension]: RegExpMatchArray = filename.match(/^.+\\.(.+)$/);\n        const languages: { [extension: string]: string } = {\n          ts: 'typescript',\n          html: 'html',\n          css: 'css',\n        };\n        return {\n          filename,\n          contents: {\n            raw: contents.raw.default\n              .replace(\n                \",\\n    RouterModule.forChild([{ path: '', component: DemoComponent }])\",\n                ''\n              )\n              .replace(\"\\nimport { RouterModule } from '@angular/router';\", ''),\n            highlighted: contents.highlighted.default // TODO - move this into a regexp replace for both\n              .replace(\n                ',\\n    RouterModule.forChild([{ path: <span class=\"hljs-string\">\\'\\'</span>, component: DemoComponent }])',\n                ''\n              )\n              .replace(\n                '\\n<span class=\"hljs-keyword\">import</span> { RouterModule } from <span class=\"hljs-string\">\\'@angular/router\\'</span>;',\n                ''\n              ),\n          },\n          language: languages[extension],\n        };\n      });\n    }\n  );\n}\n\nconst dependencyVersions: any = {\n  angular: require('@angular/core/package.json').version,\n  angularRouter: require('@angular/router/package.json').version,\n  angularCalendar: require('../../../package.json').version,\n  calendarUtils: require('calendar-utils/package.json').version,\n  angularResizableElement: require('angular-resizable-element/package.json')\n    .version,\n  angularDraggableDroppable: require('angular-draggable-droppable/package.json')\n    .version,\n  dateFns: require('date-fns/package.json').version,\n  rxjs: require('rxjs/package.json').version,\n  bootstrap: require('bootstrap/package.json').version,\n  zoneJs: require('zone.js/package.json').version,\n  ngBootstrap: require('@ng-bootstrap/ng-bootstrap/package.json').version,\n  rrule: require('rrule/package.json').version,\n  fontAwesome: require('@fortawesome/fontawesome-free/package.json').version,\n  positioning: require('positioning/package.json').version,\n  flatpickr: require('flatpickr/package.json').version,\n  angularxFlatpickr: require('angularx-flatpickr/package.json').version,\n};\n\n@Component({\n  selector: 'mwl-demo-app',\n  styleUrls: ['./demo-app.css'],\n  templateUrl: './demo-app.html',\n})\nexport class DemoAppComponent implements OnInit {\n  @ViewChild('nav') nav: NgbNav;\n  demos: Demo[] = [];\n  filteredDemos: Demo[] = [];\n  activeDemo: Demo;\n  isMenuVisible = false;\n  firstDemoLoaded = false;\n  searchText = '';\n  copied$ = new Subject<boolean>();\n\n  constructor(\n    private router: Router,\n    analytics: Angulartics2GoogleGlobalSiteTag\n  ) {\n    analytics.startTracking();\n  }\n\n  ngOnInit() {\n    const defaultRoute = this.router.config.find(\n      (route) => route.path === '**'\n    );\n\n    this.demos = this.router.config\n      .filter((route) => route.path !== '**')\n      .map((route) => ({\n        path: route.path,\n        label: route.data.label,\n        darkTheme: route.data.darkTheme,\n        tags: route.data.tags || [],\n      }));\n    this.updateFilteredDemos();\n\n    this.router.events\n      .pipe(filter((event) => event instanceof NavigationEnd))\n      .pipe(take(1))\n      .subscribe(() => {\n        this.firstDemoLoaded = true;\n      });\n\n    this.router.events\n      .pipe(filter((event) => event instanceof NavigationStart))\n      .pipe(\n        map((event: NavigationStart) => {\n          if (event.url === '/') {\n            return { url: `/${defaultRoute.redirectTo}` };\n          }\n          return event;\n        })\n      )\n      .subscribe((event: NavigationStart) => {\n        this.activeDemo = this.demos.find(\n          (demo) => `/${demo.path}` === event.url\n        );\n        getSources(this.activeDemo.path).then((sources) => {\n          this.activeDemo.sources = sources;\n        });\n      });\n\n    const script = document.createElement('script');\n    script.async = true;\n    script.setAttribute('data-uid', '7c1627e655');\n    script.src = 'https://angular-calendar.ck.page/7c1627e655/index.js';\n    document.getElementsByTagName('head')[0].appendChild(script);\n  }\n\n  updateFilteredDemos() {\n    this.filteredDemos = this.demos.filter(\n      (demo) =>\n        !this.searchText ||\n        [demo.label.toLowerCase(), ...demo.tags].some((tag) =>\n          tag.includes(this.searchText.toLowerCase())\n        )\n    );\n  }\n\n  editInStackblitz(demo: Demo): void {\n    const files: {\n      [path: string]: string;\n    } = {\n      'index.html': `\n<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@${dependencyVersions.bootstrap}/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n<link href=\"https://unpkg.com/@fortawesome/fontawesome-free@${dependencyVersions.fontAwesome}/css/all.css\" rel=\"stylesheet\">\n<link href=\"https://unpkg.com/angular-calendar@${dependencyVersions.angularCalendar}/css/angular-calendar.css\" rel=\"stylesheet\">\n<link href=\"https://unpkg.com/flatpickr@${dependencyVersions.flatpickr}/dist/flatpickr.css\" rel=\"stylesheet\">\n<mwl-demo-component>Loading...</mwl-demo-component>\n`.trim(),\n      'main.ts': `\nimport 'zone.js';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { NgModule } from '@angular/core';\nimport { DemoModule } from './demo/module';\nimport { DemoComponent } from './demo/component';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    DemoModule\n  ],\n  bootstrap: [DemoComponent]\n})\nexport class BootstrapModule {}\n\nplatformBrowserDynamic().bootstrapModule(BootstrapModule).then(ref => {\n  // Ensure Angular destroys itself on hot reloads.\n  if (window['ngRef']) {\n    window['ngRef'].destroy();\n  }\n  window['ngRef'] = ref;\n\n  // Otherwise, log the boot error\n}).catch(err => console.error(err));\n`.trim(),\n    };\n\n    demoUtilsSources.forEach((source) => {\n      files[`demo-utils/${source.filename}`] = source.contents.raw.default;\n    });\n\n    demo.sources.forEach((source) => {\n      files[`demo/${source.filename}`] = source.contents.raw;\n    });\n\n    StackBlitzSDK.openProject(\n      {\n        title: 'Angular Calendar Demo',\n        description: demo.label,\n        template: 'angular-cli',\n        tags: ['angular-calendar'],\n        files,\n        dependencies: {\n          '@angular/core': dependencyVersions.angular,\n          '@angular/common': dependencyVersions.angular,\n          '@angular/compiler': dependencyVersions.angular,\n          '@angular/platform-browser': dependencyVersions.angular,\n          '@angular/platform-browser-dynamic': dependencyVersions.angular,\n          '@angular/router': dependencyVersions.angular,\n          '@angular/forms': dependencyVersions.angular,\n          '@angular/animations': dependencyVersions.angular,\n          rxjs: dependencyVersions.rxjs,\n          'zone.js': dependencyVersions.zoneJs,\n          'angular-draggable-droppable': `^${dependencyVersions.angularDraggableDroppable}`,\n          'angular-resizable-element': `^${dependencyVersions.angularResizableElement}`,\n          'date-fns': dependencyVersions.dateFns,\n          'angular-calendar': dependencyVersions.angularCalendar,\n          '@ng-bootstrap/ng-bootstrap': '5.0.0', // pinned due to issue with stackblitz generation\n          rrule: dependencyVersions.rrule,\n          'calendar-utils': dependencyVersions.calendarUtils,\n          flatpickr: dependencyVersions.flatpickr,\n          'angularx-flatpickr': dependencyVersions.angularxFlatpickr,\n        },\n      },\n      {\n        openFile: 'demo/component.ts',\n      }\n    );\n  }\n\n  copied() {\n    this.copied$.next(true);\n    setTimeout(() => {\n      this.copied$.next(false);\n    }, 1000);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-app.html","messages":[{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `role`, `[navbar-dark]`, `[bg-dark]` instead of `[navbar-dark]`, `[bg-dark]`, `role`","line":3,"column":3,"nodeType":null,"messageId":"attributesOrder","endLine":5,"endColumn":20,"fix":{"range":[73,178],"text":"role=\"navigation\"\n  [class.navbar-dark]=\"activeDemo?.darkTheme\"\n  [class.bg-dark]=\"activeDemo?.darkTheme\""}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":8,"column":38,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":8,"endColumn":60,"fix":{"range":[219,219],"text":" i18n"}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":22,"column":43,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":23,"endColumn":11,"suggestions":[{"messageId":"suggestAddI18nAttribute","fix":{"range":[629,629],"text":" i18n"},"desc":"Add the `i18n` attribute"}]},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":30,"column":44,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":31,"endColumn":11,"suggestions":[{"messageId":"suggestAddI18nAttribute","fix":{"range":[787,787],"text":" i18n"},"desc":"Add the `i18n` attribute"}]},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":38,"column":41,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":39,"endColumn":11,"suggestions":[{"messageId":"suggestAddI18nAttribute","fix":{"range":[1042,1042],"text":" i18n"},"desc":"Add the `i18n` attribute"}]},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":48,"column":50,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":49,"endColumn":11,"suggestions":[{"messageId":"suggestAddI18nAttribute","fix":{"range":[1276,1276],"text":" i18n"},"desc":"Add the `i18n` attribute"}]},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":57,"column":48,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":58,"endColumn":11,"suggestions":[{"messageId":"suggestAddI18nAttribute","fix":{"range":[1569,1569],"text":" i18n"},"desc":"Add the `i18n` attribute"}]},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":70,"column":37,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":70,"endColumn":48,"fix":{"range":[2140,2140],"text":" i18n"}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":81,"column":37,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":81,"endColumn":51,"fix":{"range":[2495,2495],"text":" i18n"}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":92,"column":37,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":92,"endColumn":57,"fix":{"range":[2858,2858],"text":" i18n"}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":104,"column":7,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":105,"endColumn":5,"suggestions":[{"messageId":"suggestAddI18nAttribute","fix":{"range":[3026,3026],"text":" i18n"},"desc":"Add the `i18n` attribute"}]},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `*ngIf`, `*ngIfElse`, `class` instead of `class`, `*ngIf`, `*ngIfElse`","line":115,"column":12,"nodeType":null,"messageId":"attributesOrder","endLine":115,"endColumn":62,"fix":{"range":[3363,3413],"text":"*ngIf=\"firstDemoLoaded; e  else loading\"class=\"card\""}},{"ruleId":"@angular-eslint/template/button-has-type","severity":2,"message":"Type for <button> is missing","line":120,"column":15,"nodeType":null,"messageId":"missingType","endLine":125,"endColumn":24},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":124,"column":45,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":125,"endColumn":15,"suggestions":[{"messageId":"suggestAddI18nAttribute","fix":{"range":[3605,3605],"text":" i18n"},"desc":"Add the `i18n` attribute"}]},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `#nav`, `ngbNav` instead of `ngbNav`, `#nav`","line":130,"column":15,"nodeType":null,"messageId":"attributesOrder","endLine":130,"endColumn":35,"fix":{"range":[3908,3928],"text":"#nav=\"ngbNav\" ngbNav"}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Attribute \"domId\" has no corresponding i18n attribute. See more at https://angular.io/guide/i18n#mark-element-attributes-for-translations","line":131,"column":28,"nodeType":null,"messageId":"i18nAttribute","endLine":131,"endColumn":33,"fix":{"range":[4008,4008],"text":" i18n-domId"}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":132,"column":65,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":132,"endColumn":74,"suggestions":[{"messageId":"suggestAddI18nAttribute","fix":{"range":[4026,4026],"text":" i18n"},"desc":"Add the `i18n` attribute"}]},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `*ngFor`, `*ngForOf`, `ngbNavItem` instead of `ngbNavItem`, `*ngFor`, `*ngForOf`","line":138,"column":17,"nodeType":null,"messageId":"attributesOrder","endLine":138,"endColumn":70,"fix":{"range":[4272,4325],"text":"*ngFor=  of activeDemo?.sources\"\"let sourcengbNavItem"}},{"ruleId":"@angular-eslint/template/use-track-by-function","severity":2,"message":"Missing trackBy function in ngFor directive","line":138,"column":28,"nodeType":null,"messageId":"useTrackByFunction","endLine":138,"endColumn":70},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `*ngSwitchCase`, `class` instead of `class`, `*ngSwitchCase`","line":141,"column":22,"nodeType":null,"messageId":"attributesOrder","endLine":141,"endColumn":71,"fix":{"range":[4429,4478],"text":"*ngSwitchCase=\"'html'\" class=\"fab fa-fw fa-html5\""}},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `*ngSwitchCase`, `class` instead of `class`, `*ngSwitchCase`","line":142,"column":22,"nodeType":null,"messageId":"attributesOrder","endLine":142,"endColumn":69,"fix":{"range":[4505,4552],"text":"*ngSwitchCase=\"'css'\" class=\"fab fa-fw fa-css3\""}},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `*ngSwitchDefault`, `class` instead of `class`, `*ngSwitchDefault`","line":143,"column":22,"nodeType":null,"messageId":"attributesOrder","endLine":143,"endColumn":65,"fix":{"range":[4579,4622],"text":"*ngSwitchDefault> class=\"fas fa-fw fa-code\""}},{"ruleId":"@angular-eslint/template/button-has-type","severity":2,"message":"Type for <button> is missing","line":149,"column":19,"nodeType":null,"messageId":"missingType","endLine":161,"endColumn":28},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `ngxClipboard`, `[cbContent]`, `[ngbTooltip]`, `[placement]`, `(click)` instead of `(click)`, `ngxClipboard`, `[cbContent]`, `[ngbTooltip]`, `[placement]`","line":151,"column":21,"nodeType":null,"messageId":"attributesOrder","endLine":155,"endColumn":46,"fix":{"range":[4903,5103],"text":"ngxClipboard\n                    [cbContent]=\"source.contents.raw\"\n                    [ngbTooltip]=\"'Copy source'\"\n                    [placement]=\"'top-right'\"\n                    (click)=\"copied()\""}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Attribute \"placeholder\" has no corresponding i18n attribute. See more at https://angular.io/guide/i18n#mark-element-attributes-for-translations","line":176,"column":9,"nodeType":null,"messageId":"i18nAttribute","endLine":176,"endColumn":20,"fix":{"range":[5783,5783],"text":" i18n-placeholder"}},{"ruleId":"@angular-eslint/template/use-track-by-function","severity":2,"message":"Missing trackBy function in ngFor directive","line":181,"column":13,"nodeType":null,"messageId":"useTrackByFunction","endLine":181,"endColumn":47},{"ruleId":"@angular-eslint/template/cyclomatic-complexity","severity":2,"message":"The cyclomatic complexity 6 exceeds the defined limit 5","line":181,"column":30,"nodeType":null,"messageId":"cyclomaticComplexity","endLine":181,"endColumn":46},{"ruleId":"@angular-eslint/template/cyclomatic-complexity","severity":2,"message":"The cyclomatic complexity 7 exceeds the defined limit 5","line":191,"column":12,"nodeType":null,"messageId":"cyclomaticComplexity","endLine":191,"endColumn":44},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":191,"column":46,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":191,"endColumn":69,"fix":{"range":[6210,6210],"text":" i18n"}}],"suppressedMessages":[],"errorCount":29,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":15,"fixableWarningCount":0,"source":"<nav\n  class=\"navbar navbar-expand-lg navbar-light bg-light fixed-top\"\n  [class.navbar-dark]=\"activeDemo?.darkTheme\"\n  [class.bg-dark]=\"activeDemo?.darkTheme\"\n  role=\"navigation\"\n>\n  <div class=\"container-fluid\">\n    <a class=\"navbar-brand\" href=\"#\">Angular 15.0+ calendar</a>\n\n    <button\n      type=\"button\"\n      class=\"navbar-toggler\"\n      (click)=\"isMenuVisible = !isMenuVisible\"\n    >\n      <span class=\"navbar-toggler-icon\"></span>\n    </button>\n\n    <div class=\"collapse navbar-collapse\" [ngbCollapse]=\"!isMenuVisible\">\n      <ul class=\"navbar-nav me-auto mb-2 mb-lg-0\">\n        <li class=\"nav-item active\">\n          <a class=\"nav-link\" href=\"javascript:;\">\n            <i class=\"fas fa-laptop\"></i> Demos\n          </a>\n        </li>\n        <li class=\"nav-item\">\n          <a\n            class=\"nav-link\"\n            href=\"https://github.com/mattlewis92/angular-calendar#getting-started\"\n          >\n            <i class=\"fas fa-map-pin\"></i> Getting started\n          </a>\n        </li>\n        <li class=\"nav-item\">\n          <a\n            class=\"nav-link\"\n            href=\"https://mattlewis92.github.io/angular-calendar/docs/\"\n          >\n            <i class=\"fas fa-book\"></i> API docs\n          </a>\n        </li>\n        <li class=\"nav-item\">\n          <a\n            class=\"nav-link\"\n            data-formkit-toggle=\"7c1627e655\"\n            href=\"javascript:;\"\n            (click)=\"isMenuVisible = false\"\n          >\n            <i class=\"fas fa-fw fa-envelope\"></i>Subscribe\n          </a>\n        </li>\n        <li class=\"nav-item\">\n          <a\n            class=\"nav-link text-danger\"\n            href=\"https://github.com/users/mattlewis92/sponsorship\"\n            target=\"_blank\"\n          >\n            <i class=\"fas fa-dollar-sign\"></i> Donate\n          </a>\n        </li>\n      </ul>\n      <ul class=\"nav navbar-nav ml-md-auto\">\n        <li class=\"nav-item\">\n          <a\n            class=\"nav-link\"\n            href=\"https://www.npmjs.com/package/angular-calendar\"\n            target=\"_blank\"\n            [ngbTooltip]=\"'View on npm'\"\n          >\n            <i class=\"fab fa-lg fa-npm\"></i>\n            <span class=\"d-lg-none\">View on npm</span>\n          </a>\n        </li>\n        <li class=\"nav-item\">\n          <a\n            class=\"nav-link\"\n            href=\"https://github.com/mattlewis92/angular-calendar\"\n            target=\"_blank\"\n            [ngbTooltip]=\"'View on GitHub'\"\n          >\n            <i class=\"fab fa-lg fa-github\"></i>\n            <span class=\"d-lg-none\">View on GitHub</span>\n          </a>\n        </li>\n        <li class=\"nav-item\">\n          <a\n            class=\"nav-link text-primary\"\n            href=\"https://twitter.com/mattlewis92_\"\n            target=\"_blank\"\n            [ngbTooltip]=\"'Follow me on Twitter'\"\n          >\n            <i class=\"fab fa-lg fa-twitter\"></i>\n            <span class=\"d-lg-none\">Follow me on Twitter</span>\n          </a>\n        </li>\n      </ul>\n    </div>\n  </div>\n</nav>\n\n<ng-template #loading>\n  <div class=\"card\">\n    <div class=\"card-body text-center\">\n      <i class=\"fas fa-spin fa-spinner fa-5x\"></i> <br />\n      Loading demo...\n    </div>\n  </div>\n</ng-template>\n\n<div class=\"container-fluid main-content\">\n  <div class=\"row fill-height\">\n    <div\n      class=\"col fill-height scroll-y demo-container\"\n      mwlDraggableScrollContainer\n    >\n      <div class=\"card\" *ngIf=\"firstDemoLoaded; else loading\">\n        <div class=\"card-header\">\n          <div class=\"row\">\n            <div class=\"col-md-6\"><h3>{{ activeDemo.label }}</h3></div>\n            <div class=\"col-md-6\">\n              <button\n                class=\"btn btn-info float-end\"\n                (click)=\"editInStackblitz(activeDemo)\"\n              >\n                <i class=\"fas fa-edit\"></i> Edit in Stackblitz\n              </button>\n            </div>\n          </div>\n        </div>\n        <div class=\"card-body\">\n          <ul ngbNav #nav=\"ngbNav\" class=\"justify-content-start nav-tabs\">\n            <li ngbNavItem domId=\"demo\">\n              <a ngbNavLink><i class=\"fas fa-fw fa-laptop\"></i> Live demo</a>\n              <ng-template ngbNavContent>\n                <div class=\"spacer-top\"><router-outlet></router-outlet></div>\n              </ng-template>\n            </li>\n\n            <li ngbNavItem *ngFor=\"let source of activeDemo?.sources\">\n              <a ngbNavLink>\n                <span [ngSwitch]=\"source.language\">\n                  <i class=\"fab fa-fw fa-html5\" *ngSwitchCase=\"'html'\"></i>\n                  <i class=\"fab fa-fw fa-css3\" *ngSwitchCase=\"'css'\"></i>\n                  <i class=\"fas fa-fw fa-code\" *ngSwitchDefault></i>\n                </span>\n                {{ source.filename }}\n              </a>\n              <ng-template ngbNavContent>\n                <div class=\"code-container\">\n                  <button\n                    class=\"btn btn-outline-primary copy-code\"\n                    (click)=\"copied()\"\n                    ngxClipboard\n                    [cbContent]=\"source.contents.raw\"\n                    [ngbTooltip]=\"'Copy source'\"\n                    [placement]=\"'top-right'\"\n                  >\n                    <i\n                      class=\"fa\"\n                      [ngClass]=\"{'fa-copy': (copied$ | async) !== true, 'fa-check': (copied$ | async) }\"\n                    ></i>\n                  </button>\n                  <pre><code [innerHTML]=\"source.contents.highlighted\"></code></pre>\n                </div>\n              </ng-template>\n            </li>\n          </ul>\n          <div [ngbNavOutlet]=\"nav\"></div>\n        </div>\n      </div>\n    </div>\n    <div class=\"fill-height sidebar-nav scroll-y\">\n      <mwl-carbon-ad></mwl-carbon-ad>\n      <input\n        type=\"search\"\n        class=\"form-control\"\n        placeholder=\"Search demos...\"\n        [(ngModel)]=\"searchText\"\n        (ngModelChange)=\"updateFilteredDemos()\"\n      />\n      <ul class=\"list-unstyled spacer-top\">\n        <li *ngFor=\"let demo of filteredDemos\">\n          <a\n            [routerLink]=\"[demo.path]\"\n            [class.active]=\"activeDemo?.path === demo.path\"\n            (click)=\"nav.select('demo')\"\n          >\n            {{ demo.label }}\n          </a>\n        </li>\n      </ul>\n      <em *ngIf=\"filteredDemos.length === 0\">No matching demos found</em>\n    </div>\n  </div>\n</div>\n","usedDeprecatedRules":[{"ruleId":"@angular-eslint/template/accessibility-label-for","replacedBy":["accessibility-label-has-associated-control"]}]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-app.module.ts","messages":[{"ruleId":"@angular-eslint/sort-ngmodule-metadata-arrays","severity":2,"message":"`NgModule` metadata arrays should be sorted in ASC alphabetical order","line":21,"column":36,"nodeType":"Identifier","messageId":"sortNgmoduleMetadataArrays","endLine":21,"endColumn":53,"fix":{"range":[939,974],"text":"CarbonAdComponent, DemoAppComponent"}},{"ruleId":"@angular-eslint/sort-ngmodule-metadata-arrays","severity":2,"message":"`NgModule` metadata arrays should be sorted in ASC alphabetical order","line":24,"column":5,"nodeType":"Identifier","messageId":"sortNgmoduleMetadataArrays","endLine":24,"endColumn":28,"fix":{"range":[994,1036],"text":"BrowserAnimationsModule,\n    BrowserModule"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport {\n  NgbNavModule,\n  NgbCollapseModule,\n  NgbTooltipModule,\n} from '@ng-bootstrap/ng-bootstrap';\nimport { Angulartics2Module } from 'angulartics2';\nimport { DragAndDropModule } from 'angular-draggable-droppable';\nimport { DemoAppComponent } from './demo-app.component';\nimport { DemoComponent as DefaultDemoComponent } from './demo-modules/kitchen-sink/component';\nimport { DemoModule as DefaultDemoModule } from './demo-modules/kitchen-sink/module';\nimport { environment } from '../environments/environment';\nimport { FormsModule } from '@angular/forms';\nimport { ClipboardModule } from 'ngx-clipboard';\nimport { CarbonAdComponent } from './carbon-ad/carbon-ad.component';\n\n@NgModule({\n  declarations: [DemoAppComponent, CarbonAdComponent],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    FormsModule,\n    NgbNavModule,\n    NgbCollapseModule,\n    NgbTooltipModule,\n    DragAndDropModule,\n    Angulartics2Module.forRoot({\n      developerMode: !environment.production,\n    }),\n    ClipboardModule,\n    DefaultDemoModule,\n    RouterModule.forRoot(\n      [\n        {\n          path: 'kitchen-sink',\n          component: DefaultDemoComponent,\n          data: {\n            label: 'Kitchen sink',\n          },\n        },\n        {\n          path: 'async-events',\n          loadChildren: () =>\n            import('./demo-modules/async-events/module').then(\n              (m) => m.DemoModule\n            ),\n          data: {\n            label: 'Async events',\n          },\n        },\n        {\n          path: 'optional-event-end-dates',\n          loadChildren: () =>\n            import('./demo-modules/optional-event-end-dates/module').then(\n              (m) => m.DemoModule\n            ),\n          data: {\n            label: 'Optional event end dates',\n          },\n        },\n        {\n          path: 'editable-deletable-events',\n          loadChildren: () =>\n            import('./demo-modules/editable-deletable-events/module').then(\n              (m) => m.DemoModule\n            ),\n          data: {\n            label: 'Editable / deletable events',\n          },\n        },\n        {\n          path: 'draggable-events',\n          loadChildren: () =>\n            import('./demo-modules/draggable-events/module').then(\n              (m) => m.DemoModule\n            ),\n          data: {\n            label: 'Draggable events',\n          },\n        },\n        {\n          path: 'resizable-events',\n          loadChildren: () =>\n            import('./demo-modules/resizable-events/module').then(\n              (m) => m.DemoModule\n            ),\n          data: {\n            label: 'Resizable events',\n          },\n        },\n        {\n          path: 'month-view-badge-total',\n          loadChildren: () =>\n            import('./demo-modules/month-view-badge-total/module').then(\n              (m) => m.DemoModule\n            ),\n          data: {\n            label: 'Month view badge total',\n          },\n        },\n        {\n          path: 'recurring-events',\n          loadChildren: () =>\n            import('./demo-modules/recurring-events/module').then(\n              (m) => m.DemoModule\n            ),\n          data: {\n            label: 'Recurring events',\n          },\n        },\n        {\n          path: 'custom-event-class',\n          loadChildren: () =>\n            import('./demo-modules/custom-event-class/module').then(\n              (m) => m.DemoModule\n            ),\n          data: {\n            label: 'Custom event class',\n          },\n        },\n        {\n          path: 'clickable-events',\n          loadChildren: () =>\n            import('./demo-modules/clickable-events/module').then(\n              (m) => m.DemoModule\n            ),\n          data: {\n            label: 'Clickable events',\n          },\n        },\n        {\n          path: 'clickable-days',\n          loadChildren: () =>\n            import('./demo-modules/clickable-days/module').then(\n              (m) => m.DemoModule\n            ),\n          data: {\n            label: 'Clickable times',\n          },\n        },\n        {\n          path: 'custom-hour-duration',\n          loadChildren: () =>\n            import('./demo-modules/custom-hour-duration/module').then(\n              (m) => m.DemoModule\n            ),\n          data: {\n            label: 'Custom hour duration',\n          },\n        },\n        {\n          path: 'day-view-start-end',\n          loadChildren: () =>\n            import('./demo-modules/day-view-start-end/module').then(\n              (m) => m.DemoModule\n            ),\n          data: {\n            label: 'Day view start / end time',\n          },\n        },\n        {\n          path: 'day-view-hour-split',\n          loadChildren: () =>\n            import('./demo-modules/day-view-hour-split/module').then(\n              (m) => m.DemoModule\n            ),\n          data: {\n            label: 'Day view hour split',\n          },\n        },\n        {\n          path: 'navigating-between-views',\n          loadChildren: () =>\n            import('./demo-modules/navigating-between-views/module').then(\n              (m) => m.DemoModule\n            ),\n          data: {\n            label: 'Navigating between views',\n          },\n        },\n        {\n          path: 'before-view-render',\n          loadChildren: () =>\n            import('./demo-modules/before-view-render/module').then(\n              (m) => m.DemoModule\n            ),\n          data: {\n            label: 'Before view render',\n            tags: ['disable'],\n          },\n        },\n        {\n          path: 'exclude-days',\n          loadChildren: () =>\n            import('./demo-modules/exclude-days/module').then(\n              (m) => m.DemoModule\n            ),\n          data: {\n            label: 'Exclude Weekends',\n          },\n        },\n        {\n          path: 'i18n',\n          loadChildren: () =>\n            import('./demo-modules/i18n/module').then((m) => m.DemoModule),\n          data: {\n            label: 'Internationalisation',\n            tags: ['translation', 'i18n', 'translate', 'locale'],\n          },\n        },\n        {\n          path: 'draggable-external-events',\n          loadChildren: () =>\n            import('./demo-modules/draggable-external-events/module').then(\n              (m) => m.DemoModule\n            ),\n          data: {\n            label: 'Draggable external events',\n          },\n        },\n        {\n          path: 'all-day-events',\n          loadChildren: () =>\n            import('./demo-modules/all-day-events/module').then(\n              (m) => m.DemoModule\n            ),\n          data: {\n            label: 'All day events',\n          },\n        },\n        {\n          path: 'customise-date-formats',\n          loadChildren: () =>\n            import('./demo-modules/customise-date-formats/module').then(\n              (m) => m.DemoModule\n            ),\n          data: {\n            label: 'Customise date formats',\n          },\n        },\n        {\n          path: 'show-dates-on-titles',\n          loadChildren: () =>\n            import('./demo-modules/show-dates-on-titles/module').then(\n              (m) => m.DemoModule\n            ),\n          data: {\n            label: 'Show dates on title',\n          },\n        },\n        {\n          path: 'disable-tooltips',\n          loadChildren: () =>\n            import('./demo-modules/disable-tooltips/module').then(\n              (m) => m.DemoModule\n            ),\n          data: {\n            label: 'Disable tooltips',\n          },\n        },\n        {\n          path: 'additional-event-properties',\n          loadChildren: () =>\n            import('./demo-modules/additional-event-properties/module').then(\n              (m) => m.DemoModule\n            ),\n          data: {\n            label: 'Additional event properties',\n          },\n        },\n        {\n          path: 'selectable-period',\n          loadChildren: () =>\n            import('./demo-modules/selectable-period/module').then(\n              (m) => m.DemoModule\n            ),\n          data: {\n            label: 'Selectable period',\n          },\n        },\n        {\n          path: 'min-max-date',\n          loadChildren: () =>\n            import('./demo-modules/min-max-date/module').then(\n              (m) => m.DemoModule\n            ),\n          data: {\n            label: 'Min max date',\n          },\n        },\n        {\n          path: 'refreshing-the-view',\n          loadChildren: () =>\n            import('./demo-modules/refreshing-the-view/module').then(\n              (m) => m.DemoModule\n            ),\n          data: {\n            label: 'Refreshing the view',\n          },\n        },\n        {\n          path: 'custom-templates',\n          loadChildren: () =>\n            import('./demo-modules/custom-templates/module').then(\n              (m) => m.DemoModule\n            ),\n          data: {\n            label: 'Custom templates',\n          },\n        },\n        {\n          path: 'group-similar-events',\n          loadChildren: () =>\n            import('./demo-modules/group-similar-events/module').then(\n              (m) => m.DemoModule\n            ),\n          data: {\n            label: 'Group similar events',\n          },\n        },\n        {\n          path: 'context-menu',\n          loadChildren: () =>\n            import('./demo-modules/context-menu/module').then(\n              (m) => m.DemoModule\n            ),\n          data: {\n            label: 'Context menu',\n            tags: ['right click'],\n          },\n        },\n        {\n          path: 'week-view-minute-precision',\n          loadChildren: () =>\n            import('./demo-modules/week-view-minute-precision/module').then(\n              (m) => m.DemoModule\n            ),\n          data: {\n            label: 'Week view minute precision',\n          },\n        },\n        {\n          path: 'extra-month-view-weeks',\n          loadChildren: () =>\n            import('./demo-modules/extra-month-view-weeks/module').then(\n              (m) => m.DemoModule\n            ),\n          data: {\n            label: 'Extra month view weeks',\n          },\n        },\n        {\n          path: 'disable-slide-animation',\n          loadChildren: () =>\n            import('./demo-modules/disable-slide-animation/module').then(\n              (m) => m.DemoModule\n            ),\n          data: {\n            label: 'Disable slide animation',\n          },\n        },\n        {\n          path: 'no-events-label',\n          loadChildren: () =>\n            import('./demo-modules/no-events-label/module').then(\n              (m) => m.DemoModule\n            ),\n          data: {\n            label: 'No events label',\n          },\n        },\n        {\n          path: 'moment',\n          loadChildren: () =>\n            import('./demo-modules/moment/module').then((m) => m.DemoModule),\n          data: {\n            label: 'Use moment',\n          },\n        },\n        {\n          path: 'dayjs',\n          loadChildren: () =>\n            import('./demo-modules/dayjs/module').then((m) => m.DemoModule),\n          data: {\n            label: 'Use dayjs',\n          },\n        },\n        {\n          path: 'day-view-scheduler',\n          loadChildren: () =>\n            import('./demo-modules/day-view-scheduler/module').then(\n              (m) => m.DemoModule\n            ),\n          data: {\n            label: 'Day view scheduler',\n          },\n        },\n        {\n          path: 'drag-to-create-events',\n          loadChildren: () =>\n            import('./demo-modules/drag-to-create-events/module').then(\n              (m) => m.DemoModule\n            ),\n          data: {\n            label: 'Drag to create events',\n          },\n        },\n        {\n          path: 'responsive-week-view',\n          loadChildren: () =>\n            import('./demo-modules/responsive-week-view/module').then(\n              (m) => m.DemoModule\n            ),\n          data: {\n            label: 'Responsive week view',\n          },\n        },\n        {\n          path: 'dark-theme',\n          loadChildren: () =>\n            import('./demo-modules/dark-theme/module').then(\n              (m) => m.DemoModule\n            ),\n          data: {\n            label: 'Dark theme',\n            darkTheme: true,\n          },\n        },\n        {\n          path: 'week-view-event-margin',\n          loadChildren: () =>\n            import('./demo-modules/week-view-event-margin/module').then(\n              (m) => m.DemoModule\n            ),\n          data: {\n            label: 'Week view event margin',\n          },\n        },\n        {\n          path: 'customise-current-time-marker',\n          loadChildren: () =>\n            import('./demo-modules/customise-current-time-marker/module').then(\n              (m) => m.DemoModule\n            ),\n          data: {\n            label: 'Customise current time marker',\n          },\n        },\n        {\n          path: 'public-holidays',\n          loadChildren: () =>\n            import('./demo-modules/public-holidays/module').then(\n              (m) => m.DemoModule\n            ),\n          data: {\n            label: 'Public holidays',\n          },\n        },\n        {\n          path: 'scroll-to-current-time',\n          loadChildren: () =>\n            import('./demo-modules/scroll-to-current-time/module').then(\n              (m) => m.DemoModule\n            ),\n          data: {\n            label: 'Scroll to current time',\n          },\n        },\n        {\n          path: 'rtl',\n          loadChildren: () =>\n            import('./demo-modules/rtl/module').then((m) => m.DemoModule),\n          data: {\n            label: 'RTL',\n          },\n        },\n        {\n          path: 'validate-drag-and-resize',\n          loadChildren: () =>\n            import('./demo-modules/validate-drag-and-resize/module').then(\n              (m) => m.DemoModule\n            ),\n          data: {\n            label: 'Validate dragging and resizing',\n          },\n        },\n        {\n          path: '**',\n          redirectTo: 'kitchen-sink',\n        },\n      ],\n      {\n        useHash: true,\n      }\n    ),\n  ],\n  bootstrap: [DemoAppComponent],\n})\nexport class DemoAppModule {}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/additional-event-properties/component.ts","messages":[{"ruleId":"@angular-eslint/relative-url-prefix","severity":2,"message":"The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)","line":8,"column":16,"nodeType":"Literal","messageId":"relativeUrlPrefix","endLine":8,"endColumn":31}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: 'template.html',\n})\nexport class DemoComponent {\n  view: CalendarView = CalendarView.Month;\n\n  viewDate: Date = new Date();\n\n  events: CalendarEvent<{ id: number }>[] = [\n    {\n      title: 'Event 1',\n      color: colors.yellow,\n      start: new Date(),\n      meta: {\n        id: 1,\n      },\n    },\n    {\n      title: 'Event 2',\n      color: colors.blue,\n      start: new Date(),\n      meta: {\n        id: 2,\n      },\n    },\n  ];\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/all-day-events/component.ts","messages":[{"ruleId":"@angular-eslint/relative-url-prefix","severity":2,"message":"The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)","line":8,"column":16,"nodeType":"Literal","messageId":"relativeUrlPrefix","endLine":8,"endColumn":31}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent } from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: 'template.html',\n})\nexport class DemoComponent {\n  viewDate: Date = new Date();\n\n  events: CalendarEvent[] = [\n    {\n      title: 'An all day event',\n      color: colors.yellow,\n      start: new Date(),\n      allDay: true,\n    },\n    {\n      title: 'A non all day event',\n      color: colors.blue,\n      start: new Date(),\n    },\n  ];\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/async-events/component.ts","messages":[{"ruleId":"@angular-eslint/relative-url-prefix","severity":2,"message":"The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)","line":39,"column":16,"nodeType":"Literal","messageId":"relativeUrlPrefix","endLine":39,"endColumn":31}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\nimport {\n  isSameMonth,\n  isSameDay,\n  startOfMonth,\n  endOfMonth,\n  startOfWeek,\n  endOfWeek,\n  startOfDay,\n  endOfDay,\n  format,\n} from 'date-fns';\nimport { Observable } from 'rxjs';\nimport { colors } from '../demo-utils/colors';\n\ninterface Film {\n  id: number;\n  title: string;\n  release_date: string;\n}\n\nfunction getTimezoneOffsetString(date: Date): string {\n  const timezoneOffset = date.getTimezoneOffset();\n  const hoursOffset = String(\n    Math.floor(Math.abs(timezoneOffset / 60))\n  ).padStart(2, '0');\n  const minutesOffset = String(Math.abs(timezoneOffset % 60)).padEnd(2, '0');\n  const direction = timezoneOffset > 0 ? '-' : '+';\n\n  return `T00:00:00${direction}${hoursOffset}:${minutesOffset}`;\n}\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: 'template.html',\n})\nexport class DemoComponent implements OnInit {\n  view: CalendarView = CalendarView.Month;\n\n  viewDate: Date = new Date();\n\n  events$: Observable<CalendarEvent<{ film: Film }>[]>;\n\n  activeDayIsOpen: boolean = false;\n\n  constructor(private http: HttpClient) {}\n\n  ngOnInit(): void {\n    this.fetchEvents();\n  }\n\n  fetchEvents(): void {\n    const getStart: any = {\n      month: startOfMonth,\n      week: startOfWeek,\n      day: startOfDay,\n    }[this.view];\n\n    const getEnd: any = {\n      month: endOfMonth,\n      week: endOfWeek,\n      day: endOfDay,\n    }[this.view];\n\n    const params = new HttpParams()\n      .set(\n        'primary_release_date.gte',\n        format(getStart(this.viewDate), 'yyyy-MM-dd')\n      )\n      .set(\n        'primary_release_date.lte',\n        format(getEnd(this.viewDate), 'yyyy-MM-dd')\n      )\n      .set('api_key', '0ec33936a68018857d727958dca1424f');\n\n    this.events$ = this.http\n      .get('https://api.themoviedb.org/3/discover/movie', { params })\n      .pipe(\n        map(({ results }: { results: Film[] }) => {\n          return results.map((film: Film) => {\n            return {\n              title: film.title,\n              start: new Date(\n                film.release_date + getTimezoneOffsetString(this.viewDate)\n              ),\n              color: colors.yellow,\n              allDay: true,\n              meta: {\n                film,\n              },\n            };\n          });\n        })\n      );\n  }\n\n  dayClicked({\n    date,\n    events,\n  }: {\n    date: Date;\n    events: CalendarEvent<{ film: Film }>[];\n  }): void {\n    if (isSameMonth(date, this.viewDate)) {\n      if (\n        (isSameDay(this.viewDate, date) && this.activeDayIsOpen === true) ||\n        events.length === 0\n      ) {\n        this.activeDayIsOpen = false;\n      } else {\n        this.activeDayIsOpen = true;\n        this.viewDate = date;\n      }\n    }\n  }\n\n  eventClicked(event: CalendarEvent<{ film: Film }>): void {\n    window.open(\n      `https://www.themoviedb.org/movie/${event.meta.film.id}`,\n      '_blank'\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/async-events/module.ts","messages":[{"ruleId":"@angular-eslint/sort-ngmodule-metadata-arrays","severity":2,"message":"`NgModule` metadata arrays should be sorted in ASC alphabetical order","line":18,"column":5,"nodeType":"Identifier","messageId":"sortNgmoduleMetadataArrays","endLine":18,"endColumn":20,"fix":{"range":[482,618],"text":"DemoUtilsModule,\n    CalendarModule.forRoot({\n      provide: DateAdapter,\n      useFactory: adapterFactory,\n    }),\n    HttpClientModule"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { RouterModule } from '@angular/router';\nimport { CalendarModule, DateAdapter } from 'angular-calendar';\nimport { DemoUtilsModule } from '../demo-utils/module';\nimport { DemoComponent } from './component';\nimport { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    CalendarModule.forRoot({\n      provide: DateAdapter,\n      useFactory: adapterFactory,\n    }),\n    DemoUtilsModule,\n    RouterModule.forChild([{ path: '', component: DemoComponent }]),\n  ],\n  declarations: [DemoComponent],\n  exports: [DemoComponent],\n})\nexport class DemoModule {}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/async-events/template.html","messages":[{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":12,"column":5,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":13,"endColumn":3,"suggestions":[{"messageId":"suggestAddI18nAttribute","fix":{"range":[208,208],"text":" i18n"},"desc":"Add the `i18n` attribute"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<mwl-demo-utils-calendar-header\n  [(view)]=\"view\"\n  [(viewDate)]=\"viewDate\"\n  (viewDateChange)=\"fetchEvents()\"\n  (viewChange)=\"fetchEvents()\"\n>\n</mwl-demo-utils-calendar-header>\n\n<ng-template #loading>\n  <div class=\"text-center\">\n    <i class=\"fas fa-spin fa-spinner fa-5x\"></i> <br />\n    Loading events...\n  </div>\n</ng-template>\n\n<div *ngIf=\"events$ | async; else loading; let events\">\n  <div [ngSwitch]=\"view\">\n    <mwl-calendar-month-view\n      *ngSwitchCase=\"'month'\"\n      [viewDate]=\"viewDate\"\n      [events]=\"events\"\n      [activeDayIsOpen]=\"activeDayIsOpen\"\n      (dayClicked)=\"dayClicked($event.day)\"\n      (eventClicked)=\"eventClicked($event.event)\"\n    >\n    </mwl-calendar-month-view>\n    <mwl-calendar-week-view\n      *ngSwitchCase=\"'week'\"\n      [viewDate]=\"viewDate\"\n      [events]=\"events\"\n      (eventClicked)=\"eventClicked($event.event)\"\n    >\n    </mwl-calendar-week-view>\n    <mwl-calendar-day-view\n      *ngSwitchCase=\"'day'\"\n      [viewDate]=\"viewDate\"\n      [events]=\"events\"\n      (eventClicked)=\"eventClicked($event.event)\"\n    >\n    </mwl-calendar-day-view>\n  </div>\n</div>\n","usedDeprecatedRules":[{"ruleId":"@angular-eslint/template/accessibility-label-for","replacedBy":["accessibility-label-has-associated-control"]}]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/before-view-render/component.ts","messages":[{"ruleId":"@angular-eslint/use-component-view-encapsulation","severity":2,"message":"Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect","line":17,"column":36,"nodeType":"Identifier","messageId":"useComponentViewEncapsulation","endLine":17,"endColumn":40,"suggestions":[{"messageId":"suggestRemoveViewEncapsulationNone","fix":{"range":[47,413],"text":",\n} from '@angular/core';\nimport {\n  CalendarEvent,\n  CalendarMonthViewBeforeRenderEvent,\n  CalendarWeekViewBeforeRenderEvent,\n  CalendarDayViewBeforeRenderEvent,\n  CalendarView,\n} from 'angular-calendar';\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  "},"desc":"Remove `ViewEncapsulation.None`"}]},{"ruleId":"@angular-eslint/relative-url-prefix","severity":2,"message":"The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)","line":18,"column":16,"nodeType":"Literal","messageId":"relativeUrlPrefix","endLine":18,"endColumn":31},{"ruleId":"@angular-eslint/component-max-inline-declarations","severity":2,"message":"`styles` has too many lines (5). Maximum allowed is 3 (https://angular.io/guide/styleguide#style-05-04)","line":19,"column":11,"nodeType":"ArrayExpression","messageId":"componentMaxInlineDeclarations","endLine":27,"endColumn":4}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Component,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CalendarEvent,\n  CalendarMonthViewBeforeRenderEvent,\n  CalendarWeekViewBeforeRenderEvent,\n  CalendarDayViewBeforeRenderEvent,\n  CalendarView,\n} from 'angular-calendar';\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'template.html',\n  styles: [\n    `\n      .cal-month-view .bg-pink,\n      .cal-week-view .cal-day-columns .bg-pink,\n      .cal-day-view .bg-pink {\n        background-color: hotpink !important;\n      }\n    `,\n  ],\n})\nexport class DemoComponent {\n  view: CalendarView = CalendarView.Month;\n\n  viewDate: Date = new Date();\n\n  events: CalendarEvent[] = [];\n\n  beforeMonthViewRender(renderEvent: CalendarMonthViewBeforeRenderEvent): void {\n    renderEvent.body.forEach((day) => {\n      const dayOfMonth = day.date.getDate();\n      if (dayOfMonth > 5 && dayOfMonth < 10 && day.inMonth) {\n        day.cssClass = 'bg-pink';\n      }\n    });\n  }\n\n  beforeWeekViewRender(renderEvent: CalendarWeekViewBeforeRenderEvent) {\n    renderEvent.hourColumns.forEach((hourColumn) => {\n      hourColumn.hours.forEach((hour) => {\n        hour.segments.forEach((segment) => {\n          if (\n            segment.date.getHours() >= 2 &&\n            segment.date.getHours() <= 5 &&\n            segment.date.getDay() === 2\n          ) {\n            segment.cssClass = 'bg-pink';\n          }\n        });\n      });\n    });\n  }\n\n  beforeDayViewRender(renderEvent: CalendarDayViewBeforeRenderEvent) {\n    renderEvent.hourColumns.forEach((hourColumn) => {\n      hourColumn.hours.forEach((hour) => {\n        hour.segments.forEach((segment) => {\n          if (segment.date.getHours() >= 2 && segment.date.getHours() <= 5) {\n            segment.cssClass = 'bg-pink';\n          }\n        });\n      });\n    });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/before-view-render/template.html","messages":[{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":5,"column":3,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":7,"endColumn":1,"fix":{"range":[112,112],"text":" i18n"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"<mwl-demo-utils-calendar-header [(view)]=\"view\" [(viewDate)]=\"viewDate\">\n</mwl-demo-utils-calendar-header>\n\n<div class=\"alert alert-info\">\n  You can use each views beforeViewRender output to add a custom cssClass to\n  different cells to add styling for disabled time slots\n</div>\n\n<div [ngSwitch]=\"view\">\n  <mwl-calendar-month-view\n    *ngSwitchCase=\"'month'\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n    (beforeViewRender)=\"beforeMonthViewRender($event)\"\n  >\n  </mwl-calendar-month-view>\n  <mwl-calendar-week-view\n    *ngSwitchCase=\"'week'\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n    (beforeViewRender)=\"beforeWeekViewRender($event)\"\n  >\n  </mwl-calendar-week-view>\n  <mwl-calendar-day-view\n    *ngSwitchCase=\"'day'\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n    (beforeViewRender)=\"beforeDayViewRender($event)\"\n  >\n  </mwl-calendar-day-view>\n</div>\n","usedDeprecatedRules":[{"ruleId":"@angular-eslint/template/accessibility-label-for","replacedBy":["accessibility-label-has-associated-control"]}]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/clickable-days/component.ts","messages":[{"ruleId":"@angular-eslint/relative-url-prefix","severity":2,"message":"The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)","line":7,"column":16,"nodeType":"Literal","messageId":"relativeUrlPrefix","endLine":7,"endColumn":31}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: 'template.html',\n})\nexport class DemoComponent {\n  view: CalendarView = CalendarView.Month;\n\n  viewDate: Date = new Date();\n\n  events: CalendarEvent[] = [];\n\n  clickedDate: Date;\n\n  clickedColumn: number;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/clickable-days/template.html","messages":[{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":5,"column":3,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":6,"endColumn":3,"fix":{"range":[112,112],"text":" i18n"}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":7,"column":6,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":7,"endColumn":65,"fix":{"range":[191,191],"text":" i18n"}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":10,"column":6,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":10,"endColumn":53,"fix":{"range":[298,298],"text":" i18n"}}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"<mwl-demo-utils-calendar-header [(view)]=\"view\" [(viewDate)]=\"viewDate\">\n</mwl-demo-utils-calendar-header>\n\n<div class=\"alert alert-info\">\n  Click on a day or time slot on the view.\n  <strong *ngIf=\"clickedDate\"\n    >You clicked on this time: {{ clickedDate | date:'medium' }}</strong\n  >\n  <strong *ngIf=\"clickedColumn !== undefined\"\n    >You clicked on this column: {{ clickedColumn }}</strong\n  >\n</div>\n\n<div [ngSwitch]=\"view\">\n  <mwl-calendar-month-view\n    *ngSwitchCase=\"'month'\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n    (columnHeaderClicked)=\"clickedColumn = $event.isoDayNumber\"\n    (dayClicked)=\"clickedDate = $event.day.date\"\n  >\n  </mwl-calendar-month-view>\n  <mwl-calendar-week-view\n    *ngSwitchCase=\"'week'\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n    (dayHeaderClicked)=\"clickedDate = $event.day.date\"\n    (hourSegmentClicked)=\"clickedDate = $event.date\"\n  >\n  </mwl-calendar-week-view>\n  <mwl-calendar-day-view\n    *ngSwitchCase=\"'day'\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n    (hourSegmentClicked)=\"clickedDate = $event.date\"\n  >\n  </mwl-calendar-day-view>\n</div>\n","usedDeprecatedRules":[{"ruleId":"@angular-eslint/template/accessibility-label-for","replacedBy":["accessibility-label-has-associated-control"]}]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/clickable-events/component.ts","messages":[{"ruleId":"@angular-eslint/relative-url-prefix","severity":2,"message":"The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)","line":8,"column":16,"nodeType":"Literal","messageId":"relativeUrlPrefix","endLine":8,"endColumn":31}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: 'template.html',\n})\nexport class DemoComponent {\n  view: CalendarView = CalendarView.Month;\n\n  viewDate: Date = new Date();\n\n  events: CalendarEvent[] = [\n    {\n      title: 'Click me',\n      color: colors.yellow,\n      start: new Date(),\n    },\n    {\n      title: 'Or click me',\n      color: colors.blue,\n      start: new Date(),\n    },\n  ];\n\n  eventClicked({ event }: { event: CalendarEvent }): void {\n    console.log('Event clicked', event);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/context-menu/component.ts","messages":[{"ruleId":"@angular-eslint/relative-url-prefix","severity":2,"message":"The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)","line":13,"column":16,"nodeType":"Literal","messageId":"relativeUrlPrefix","endLine":13,"endColumn":31},{"ruleId":"@angular-eslint/use-component-view-encapsulation","severity":2,"message":"Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect","line":15,"column":36,"nodeType":"Identifier","messageId":"useComponentViewEncapsulation","endLine":15,"endColumn":40,"suggestions":[{"messageId":"suggestRemoveViewEncapsulationNone","fix":{"range":[47,440],"text":",\n} from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\nimport { Subject } from 'rxjs';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: 'template.html',\n  styleUrls: ['./styles.scss'],\n  "},"desc":"Remove `ViewEncapsulation.None`"}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  ChangeDetectionStrategy,\n  Component,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\nimport { Subject } from 'rxjs';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: 'template.html',\n  styleUrls: ['./styles.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class DemoComponent {\n  view: CalendarView = CalendarView.Month;\n\n  viewDate = new Date();\n\n  events: CalendarEvent[] = [];\n\n  refresh = new Subject<void>();\n\n  addEvent(date: Date): void {\n    this.events.push({\n      start: date,\n      title: 'New event',\n      color: colors.red,\n    });\n    this.refresh.next();\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/context-menu/template.html","messages":[{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":6,"column":5,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":7,"endColumn":3,"fix":{"range":[205,217],"text":"<ng-container i18n>Add event\n  </ng-container>"}},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `*ngIf`, `class` instead of `class`, `*ngIf`","line":26,"column":13,"nodeType":null,"messageId":"attributesOrder","endLine":26,"endColumn":61,"fix":{"range":[648,696],"text":"*ngIf=\"day.badgeTotal > 0\" class=\"cal-day-badge\""}},{"ruleId":"@angular-eslint/template/accessibility-interactive-supports-focus","severity":2,"message":"Elements with interaction handlers must be focusable.","line":34,"column":7,"nodeType":null,"messageId":"interactiveSupportsFocus","endLine":44,"endColumn":14},{"ruleId":"@angular-eslint/template/click-events-have-key-events","severity":2,"message":"click must be accompanied by either keyup, keydown or keypress event for accessibility.","line":34,"column":7,"nodeType":null,"messageId":"clickEventsHaveKeyEvents","endLine":44,"endColumn":14},{"ruleId":"@angular-eslint/template/no-inline-styles","severity":2,"message":"<div/> element should not have inline styles via style attribute. Please use classes instead.","line":34,"column":7,"nodeType":null,"messageId":"noInlineStyles","endLine":44,"endColumn":14},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `*ngFor`, `*ngForOf`, `class`, `[backgroundColor]`, `[ngClass]`, `[mwlCalendarTooltip]`, `[tooltipPlacement]`, `(mouseenter)`, `(mouseleave)` instead of `class`, `*ngFor`, `*ngForOf`, `[backgroundColor]`, `[ngClass]`, `(mouseenter)`, `(mouseleave)`, `[mwlCalendarTooltip]`, `[tooltipPlacement]`","line":35,"column":9,"nodeType":null,"messageId":"attributesOrder","endLine":42,"endColumn":46,"fix":{"range":[916,1311],"text":"*ngFor=\n         of day.events\"\"let eventclass=\"cal-event\"\n        [style.backgroundColor]=\"event.color.primary\"\n        [ngClass]=\"event?.cssClass\"\n        [mwlCalendarTooltip]=\"event.title | calendarEventTitle:'monthTooltip':event\"\n        [tooltipPlacement]=\"tooltipPlacement\"\n        (mouseenter)=\"highlightDay.emit({event: event})\"\n        (mouseleave)=\"unhighlightDay.emit({event: event})\""}},{"ruleId":"@angular-eslint/template/use-track-by-function","severity":2,"message":"Missing trackBy function in ngFor directive","line":36,"column":9,"nodeType":null,"messageId":"useTrackByFunction","endLine":36,"endColumn":41},{"ruleId":"@angular-eslint/template/accessibility-interactive-supports-focus","severity":2,"message":"Elements with interaction handlers must be focusable.","line":56,"column":5,"nodeType":null,"messageId":"interactiveSupportsFocus","endLine":71,"endColumn":11},{"ruleId":"@angular-eslint/template/click-events-have-key-events","severity":2,"message":"click must be accompanied by either keyup, keydown or keypress event for accessibility.","line":56,"column":5,"nodeType":null,"messageId":"clickEventsHaveKeyEvents","endLine":71,"endColumn":11},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `*ngFor`, `*ngForOf`, `class`, `[cal-past]`, `[cal-today]`, `[cal-future]`, `[cal-weekend]`, `[contextMenu]`, `[contextMenuValue]`, `(click)` instead of `class`, `*ngFor`, `*ngForOf`, `[cal-past]`, `[cal-today]`, `[cal-future]`, `[cal-weekend]`, `(click)`, `[contextMenu]`, `[contextMenuValue]`","line":57,"column":7,"nodeType":null,"messageId":"attributesOrder","endLine":65,"endColumn":36,"fix":{"range":[1606,1929],"text":"*ngFor=\n       of days\"\"let dayclass=\"cal-header\"\n      [class.cal-past]=\"day.isPast\"\n      [class.cal-today]=\"day.isToday\"\n      [class.cal-future]=\"day.isFuture\"\n      [class.cal-weekend]=\"day.isWeekend\"\n      [contextMenu]=\"basicMenu\"\n      [contextMenuValue]=\"day.date\"\n      (click)=\"dayHeaderClicked.emit({day: day})\""}},{"ruleId":"@angular-eslint/template/use-track-by-function","severity":2,"message":"Missing trackBy function in ngFor directive","line":58,"column":7,"nodeType":null,"messageId":"useTrackByFunction","endLine":58,"endColumn":31},{"ruleId":"@angular-eslint/template/no-inline-styles","severity":2,"message":"<div/> element should not have inline styles via style attribute. Please use classes instead.","line":81,"column":3,"nodeType":null,"messageId":"noInlineStyles","endLine":93,"endColumn":9},{"ruleId":"@angular-eslint/template/no-inline-styles","severity":2,"message":"<div/> element should not have inline styles via style attribute. Please use classes instead.","line":103,"column":3,"nodeType":null,"messageId":"noInlineStyles","endLine":115,"endColumn":9},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `*ngIf`, `class` instead of `class`, `*ngIf`","line":112,"column":10,"nodeType":null,"messageId":"attributesOrder","endLine":112,"endColumn":46,"fix":{"range":[3110,3146],"text":"*ngIf=\"isTimeLabel\" class=\"cal-time\""}},{"ruleId":"@angular-eslint/template/cyclomatic-complexity","severity":2,"message":"The cyclomatic complexity 6 exceeds the defined limit 5","line":128,"column":6,"nodeType":null,"messageId":"cyclomaticComplexity","endLine":128,"endColumn":26},{"ruleId":"@angular-eslint/template/cyclomatic-complexity","severity":2,"message":"The cyclomatic complexity 7 exceeds the defined limit 5","line":137,"column":6,"nodeType":null,"messageId":"cyclomaticComplexity","endLine":137,"endColumn":25}],"suppressedMessages":[],"errorCount":16,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":5,"fixableWarningCount":0,"source":"<mwl-demo-utils-calendar-header [(view)]=\"view\" [(viewDate)]=\"viewDate\">\n</mwl-demo-utils-calendar-header>\n\n<context-menu #basicMenu>\n  <ng-template contextMenuItem (execute)=\"addEvent($event.value)\">\n    Add event\n  </ng-template>\n</context-menu>\n\n<ng-template\n  #monthCellTemplate\n  let-day=\"day\"\n  let-openDay=\"openDay\"\n  let-locale=\"locale\"\n  let-tooltipPlacement=\"tooltipPlacement\"\n  let-highlightDay=\"highlightDay\"\n  let-unhighlightDay=\"unhighlightDay\"\n  let-eventClicked=\"eventClicked\"\n>\n  <div\n    class=\"month-cell-fill-height\"\n    [contextMenu]=\"basicMenu\"\n    [contextMenuValue]=\"day.date\"\n  >\n    <div class=\"cal-cell-top\">\n      <span class=\"cal-day-badge\" *ngIf=\"day.badgeTotal > 0\"\n        >{{ day.badgeTotal }}</span\n      >\n      <span class=\"cal-day-number\"\n        >{{ day.date | calendarDate:'monthViewDayNumber':locale }}</span\n      >\n    </div>\n    <div class=\"cal-events\">\n      <div\n        class=\"cal-event\"\n        *ngFor=\"let event of day.events\"\n        [style.backgroundColor]=\"event.color.primary\"\n        [ngClass]=\"event?.cssClass\"\n        (mouseenter)=\"highlightDay.emit({event: event})\"\n        (mouseleave)=\"unhighlightDay.emit({event: event})\"\n        [mwlCalendarTooltip]=\"event.title | calendarEventTitle:'monthTooltip':event\"\n        [tooltipPlacement]=\"tooltipPlacement\"\n        (click)=\"$event.stopPropagation(); eventClicked.emit({event: event})\"\n      ></div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template\n  #weekHeaderTemplate\n  let-days=\"days\"\n  let-locale=\"locale\"\n  let-dayHeaderClicked=\"dayHeaderClicked\"\n>\n  <div class=\"cal-day-headers\">\n    <div\n      class=\"cal-header\"\n      *ngFor=\"let day of days\"\n      [class.cal-past]=\"day.isPast\"\n      [class.cal-today]=\"day.isToday\"\n      [class.cal-future]=\"day.isFuture\"\n      [class.cal-weekend]=\"day.isWeekend\"\n      (click)=\"dayHeaderClicked.emit({day: day})\"\n      [contextMenu]=\"basicMenu\"\n      [contextMenuValue]=\"day.date\"\n    >\n      <b>{{ day.date | calendarDate:'weekViewColumnHeader':locale }}</b><br />\n      <span\n        >{{ day.date | calendarDate:'weekViewColumnSubHeader':locale }}</span\n      >\n    </div>\n  </div>\n</ng-template>\n\n<ng-template\n  #dayHourSegmentTemplate\n  let-segment=\"segment\"\n  let-locale=\"locale\"\n  let-segmentHeight=\"segmentHeight\"\n>\n  <div\n    class=\"cal-hour-segment\"\n    [style.height.px]=\"segmentHeight\"\n    [class.cal-hour-start]=\"segment.isStart\"\n    [class.cal-after-hour-start]=\"!segment.isStart\"\n    [ngClass]=\"segment.cssClass\"\n    [contextMenu]=\"basicMenu\"\n    [contextMenuValue]=\"segment.date\"\n  >\n    <div class=\"cal-time\">\n      {{ segment.date | calendarDate: 'dayViewHour':locale }}\n    </div>\n  </div>\n</ng-template>\n\n<ng-template\n  #weekViewHourSegment\n  let-segment=\"segment\"\n  let-locale=\"locale\"\n  let-segmentHeight=\"segmentHeight\"\n  let-isTimeLabel=\"isTimeLabel\"\n>\n  <div\n    class=\"cal-hour-segment\"\n    [style.height.px]=\"segmentHeight\"\n    [class.cal-hour-start]=\"segment.isStart\"\n    [class.cal-after-hour-start]=\"!segment.isStart\"\n    [ngClass]=\"segment.cssClass\"\n    [contextMenu]=\"basicMenu\"\n    [contextMenuValue]=\"segment.date\"\n  >\n    <div class=\"cal-time\" *ngIf=\"isTimeLabel\">\n      {{ segment.date | calendarDate: 'weekViewHour':locale }}\n    </div>\n  </div>\n</ng-template>\n\n<div [ngSwitch]=\"view\">\n  <mwl-calendar-month-view\n    *ngSwitchCase=\"'month'\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n    [refresh]=\"refresh\"\n    [cellTemplate]=\"monthCellTemplate\"\n  >\n  </mwl-calendar-month-view>\n  <mwl-calendar-week-view\n    *ngSwitchCase=\"'week'\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n    [refresh]=\"refresh\"\n    [headerTemplate]=\"weekHeaderTemplate\"\n    [hourSegmentTemplate]=\"weekViewHourSegment\"\n  >\n  </mwl-calendar-week-view>\n  <mwl-calendar-day-view\n    *ngSwitchCase=\"'day'\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n    [refresh]=\"refresh\"\n    [hourSegmentTemplate]=\"dayHourSegmentTemplate\"\n  >\n  </mwl-calendar-day-view>\n</div>\n","usedDeprecatedRules":[{"ruleId":"@angular-eslint/template/accessibility-label-for","replacedBy":["accessibility-label-has-associated-control"]}]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/custom-event-class/component.ts","messages":[{"ruleId":"@angular-eslint/use-component-view-encapsulation","severity":2,"message":"Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect","line":12,"column":36,"nodeType":"Identifier","messageId":"useComponentViewEncapsulation","endLine":12,"endColumn":40,"suggestions":[{"messageId":"suggestRemoveViewEncapsulationNone","fix":{"range":[47,344],"text":",\n} from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  "},"desc":"Remove `ViewEncapsulation.None`"}]},{"ruleId":"@angular-eslint/relative-url-prefix","severity":2,"message":"The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)","line":13,"column":16,"nodeType":"Literal","messageId":"relativeUrlPrefix","endLine":13,"endColumn":31}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Component,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None, // hack to get the styles to apply locally\n  templateUrl: 'template.html',\n  // you should really include this CSS in your global stylesheet\n  styles: [\n    `\n      .my-custom-class span {\n        color: #ff3d7f !important;\n      }\n    `,\n  ],\n})\nexport class DemoComponent {\n  view: CalendarView = CalendarView.Month;\n\n  viewDate: Date = new Date();\n\n  events: CalendarEvent[] = [\n    {\n      title: 'Has custom class',\n      color: colors.yellow,\n      start: new Date(),\n      cssClass: 'my-custom-class',\n    },\n  ];\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/custom-hour-duration/component.ts","messages":[{"ruleId":"@angular-eslint/relative-url-prefix","severity":2,"message":"The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)","line":13,"column":16,"nodeType":"Literal","messageId":"relativeUrlPrefix","endLine":13,"endColumn":31}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { setMinutes, setHours } from 'date-fns';\nimport { Subject } from 'rxjs';\nimport {\n  CalendarEvent,\n  CalendarEventTimesChangedEvent,\n  CalendarView,\n} from 'angular-calendar';\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: 'template.html',\n})\nexport class DemoComponent {\n  view: CalendarView = CalendarView.Week;\n\n  viewDate = new Date();\n\n  events: CalendarEvent[] = [\n    {\n      start: setHours(setMinutes(new Date(), 20), 15),\n      end: setHours(setMinutes(new Date(), 40), 17),\n      title: 'An event',\n      resizable: {\n        afterEnd: true,\n      },\n      draggable: true,\n    },\n  ];\n\n  refresh = new Subject<void>();\n\n  eventTimesChanged({\n    event,\n    newStart,\n    newEnd,\n  }: CalendarEventTimesChangedEvent): void {\n    event.start = newStart;\n    event.end = newEnd;\n    this.refresh.next();\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/custom-templates/component.ts","messages":[{"ruleId":"@angular-eslint/relative-url-prefix","severity":2,"message":"The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)","line":7,"column":16,"nodeType":"Literal","messageId":"relativeUrlPrefix","endLine":7,"endColumn":31}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: 'template.html',\n})\nexport class DemoComponent {\n  view: CalendarView = CalendarView.Month;\n\n  viewDate: Date = new Date();\n\n  events: CalendarEvent[] = [];\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/custom-templates/template.html","messages":[{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":5,"column":3,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":6,"endColumn":3,"suggestions":[{"messageId":"suggestAddI18nAttribute","fix":{"range":[112,112],"text":" i18n"},"desc":"Add the `i18n` attribute"}]},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":8,"column":6,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":8,"endColumn":16,"fix":{"range":[210,210],"text":" i18n"}},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `*ngIf`, `class` instead of `class`, `*ngIf`","line":14,"column":11,"nodeType":null,"messageId":"attributesOrder","endLine":14,"endColumn":59,"fix":{"range":[439,487],"text":"*ngIf=\"day.badgeTotal > 0\" class=\"cal-day-badge\""}},{"ruleId":"@angular-eslint/template/no-inline-styles","severity":2,"message":"<small/> element should not have inline styles via style attribute. Please use classes instead.","line":21,"column":3,"nodeType":null,"messageId":"noInlineStyles","endLine":23,"endColumn":4},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":22,"column":6,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":22,"endColumn":58,"fix":{"range":[655,655],"text":" i18n"}}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"<mwl-demo-utils-calendar-header [(view)]=\"view\" [(viewDate)]=\"viewDate\">\n</mwl-demo-utils-calendar-header>\n\n<div class=\"alert alert-info\">\n  For details on how to customise any of the templates, please see\n  <a\n    href=\"https://github.com/mattlewis92/angular-calendar#how-do-i-use-a-custom-template\"\n    >this guide</a\n  >\n</div>\n\n<ng-template #customCellTemplate let-day=\"day\" let-locale=\"locale\">\n  <div class=\"cal-cell-top\">\n    <span class=\"cal-day-badge\" *ngIf=\"day.badgeTotal > 0\"\n      >{{ day.badgeTotal }}</span\n    >\n    <span class=\"cal-day-number\"\n      >{{ day.date | calendarDate:'monthViewDayNumber':locale }}</span\n    >\n  </div>\n  <small style=\"margin: 5px\"\n    >There are {{ day.events.length }} events on this day</small\n  >\n</ng-template>\n\n<div [ngSwitch]=\"view\">\n  <mwl-calendar-month-view\n    *ngSwitchCase=\"'month'\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n    [cellTemplate]=\"customCellTemplate\"\n  >\n  </mwl-calendar-month-view>\n  <mwl-calendar-week-view\n    *ngSwitchCase=\"'week'\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n  >\n  </mwl-calendar-week-view>\n  <mwl-calendar-day-view\n    *ngSwitchCase=\"'day'\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n  >\n  </mwl-calendar-day-view>\n</div>\n","usedDeprecatedRules":[{"ruleId":"@angular-eslint/template/accessibility-label-for","replacedBy":["accessibility-label-has-associated-control"]}]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/customise-current-time-marker/template.html","messages":[{"ruleId":"@angular-eslint/template/no-inline-styles","severity":2,"message":"<div/> element should not have inline styles via style attribute. Please use classes instead.","line":11,"column":3,"nodeType":null,"messageId":"noInlineStyles","endLine":15,"endColumn":10},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `*ngIf`, `class` instead of `class`, `*ngIf`","line":12,"column":5,"nodeType":null,"messageId":"attributesOrder","endLine":13,"endColumn":36,"fix":{"range":[269,336],"text":"*ngIf=\"isVisible && showMarker\"\n    class=\"cal-current-time-marker\""}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":25,"column":52,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":25,"endColumn":63,"fix":{"range":[546,546],"text":" i18n"}}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"<ng-template\n  #currentTimeMarkerTemplate\n  let-columnDate=\"columnDate\"\n  let-dayStartHour=\"dayStartHour\"\n  let-dayStartMinute=\"dayStartMinute\"\n  let-dayEndHour=\"dayEndHour\"\n  let-dayEndMinute=\"dayEndMinute\"\n  let-isVisible=\"isVisible\"\n  let-topPx=\"topPx\"\n>\n  <div\n    class=\"cal-current-time-marker\"\n    *ngIf=\"isVisible && showMarker\"\n    [style.top.px]=\"topPx\"\n  ></div>\n</ng-template>\n\n<div class=\"form-group form-check\">\n  <input\n    type=\"checkbox\"\n    class=\"form-check-input\"\n    id=\"showMarker\"\n    [(ngModel)]=\"showMarker\"\n  />\n  <label class=\"form-check-label\" for=\"showMarker\">Show marker</label>\n</div>\n\n<mwl-calendar-week-view\n  [viewDate]=\"viewDate\"\n  [currentTimeMarkerTemplate]=\"currentTimeMarkerTemplate\"\n  [dayStartHour]=\"dayStartHour\"\n  [dayEndHour]=\"dayEndHour\"\n>\n</mwl-calendar-week-view>\n","usedDeprecatedRules":[{"ruleId":"@angular-eslint/template/accessibility-label-for","replacedBy":["accessibility-label-has-associated-control"]}]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/customise-date-formats/component.ts","messages":[{"ruleId":"@angular-eslint/relative-url-prefix","severity":2,"message":"The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)","line":12,"column":16,"nodeType":"Literal","messageId":"relativeUrlPrefix","endLine":12,"endColumn":31}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  CalendarEvent,\n  CalendarDateFormatter,\n  CalendarView,\n} from 'angular-calendar';\nimport { CustomDateFormatter } from './custom-date-formatter.provider';\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: 'template.html',\n  providers: [\n    {\n      provide: CalendarDateFormatter,\n      useClass: CustomDateFormatter,\n    },\n  ],\n})\nexport class DemoComponent {\n  view: CalendarView = CalendarView.Month;\n\n  viewDate: Date = new Date();\n\n  events: CalendarEvent[] = [];\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/customise-date-formats/custom-date-formatter.provider.ts","messages":[{"ruleId":"@angular-eslint/use-injectable-provided-in","severity":2,"message":"The `providedIn` property is mandatory for `Injectables`","line":5,"column":1,"nodeType":"Decorator","messageId":"useInjectableProvidedIn","endLine":5,"endColumn":14,"suggestions":[{"messageId":"suggestInjector","fix":{"range":[182,182],"text":"{providedIn: 'any'}"},"data":{"injector":"any"},"desc":"Use `providedIn: 'any'`"},{"messageId":"suggestInjector","fix":{"range":[182,182],"text":"{providedIn: 'platform'}"},"data":{"injector":"platform"},"desc":"Use `providedIn: 'platform'`"},{"messageId":"suggestInjector","fix":{"range":[182,182],"text":"{providedIn: 'root'}"},"data":{"injector":"root"},"desc":"Use `providedIn: 'root'`"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CalendarDateFormatter, DateFormatterParams } from 'angular-calendar';\nimport { formatDate } from '@angular/common';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class CustomDateFormatter extends CalendarDateFormatter {\n  // you can override any of the methods defined in the parent class\n\n  public monthViewColumnHeader({ date, locale }: DateFormatterParams): string {\n    return formatDate(date, 'EEE', locale);\n  }\n\n  public monthViewTitle({ date, locale }: DateFormatterParams): string {\n    return formatDate(date, 'MMM y', locale);\n  }\n\n  public weekViewColumnHeader({ date, locale }: DateFormatterParams): string {\n    return formatDate(date, 'EEE', locale);\n  }\n\n  public dayViewHour({ date, locale }: DateFormatterParams): string {\n    return formatDate(date, 'HH:mm', locale);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/dark-theme/component.ts","messages":[{"ruleId":"@angular-eslint/relative-url-prefix","severity":2,"message":"The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)","line":17,"column":16,"nodeType":"Literal","messageId":"relativeUrlPrefix","endLine":17,"endColumn":31},{"ruleId":"@angular-eslint/relative-url-prefix","severity":2,"message":"The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)","line":18,"column":15,"nodeType":"Literal","messageId":"relativeUrlPrefix","endLine":18,"endColumn":28},{"ruleId":"@angular-eslint/use-component-view-encapsulation","severity":2,"message":"Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect","line":19,"column":36,"nodeType":"Identifier","messageId":"useComponentViewEncapsulation","endLine":19,"endColumn":40,"suggestions":[{"messageId":"suggestRemoveViewEncapsulationNone","fix":{"range":[80,484],"text":",\n} from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\n\nimport { colors } from '../demo-utils/colors';\nimport { DOCUMENT } from '@angular/common';\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: 'template.html',\n  styleUrls: ['styles.scss'],\n  "},"desc":"Remove `ViewEncapsulation.None`"}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  OnDestroy,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\n\nimport { colors } from '../demo-utils/colors';\nimport { DOCUMENT } from '@angular/common';\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: 'template.html',\n  styleUrls: ['styles.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class DemoComponent implements OnInit, OnDestroy {\n  view: CalendarView = CalendarView.Month;\n\n  viewDate = new Date();\n\n  events: CalendarEvent[] = [\n    {\n      title: 'An event',\n      start: new Date(),\n      color: colors.red,\n    },\n  ];\n\n  private readonly darkThemeClass = 'dark-theme';\n\n  constructor(@Inject(DOCUMENT) private document) {}\n\n  ngOnInit(): void {\n    this.document.body.classList.add(this.darkThemeClass);\n  }\n\n  ngOnDestroy(): void {\n    this.document.body.classList.remove(this.darkThemeClass);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/day-view-hour-split/component.ts","messages":[{"ruleId":"@angular-eslint/relative-url-prefix","severity":2,"message":"The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)","line":7,"column":16,"nodeType":"Literal","messageId":"relativeUrlPrefix","endLine":7,"endColumn":31}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: 'template.html',\n})\nexport class DemoComponent {\n  view: CalendarView = CalendarView.Day;\n\n  viewDate: Date = new Date();\n\n  events: CalendarEvent[] = [];\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/day-view-scheduler/component.ts","messages":[{"ruleId":"@angular-eslint/relative-url-prefix","severity":2,"message":"The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)","line":26,"column":16,"nodeType":"Literal","messageId":"relativeUrlPrefix","endLine":26,"endColumn":31}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  CalendarEvent,\n  CalendarEventTimesChangedEvent,\n} from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\nimport { addHours, startOfDay } from 'date-fns';\nimport { User } from './day-view-scheduler.component';\n\nconst users: User[] = [\n  {\n    id: 0,\n    name: 'John smith',\n    color: colors.yellow,\n  },\n  {\n    id: 1,\n    name: 'Jane Doe',\n    color: colors.blue,\n  },\n];\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: 'template.html',\n})\nexport class DemoComponent {\n  viewDate = new Date();\n\n  users = users;\n\n  events: CalendarEvent[] = [\n    {\n      title: 'An event',\n      color: users[0].color,\n      start: addHours(startOfDay(new Date()), 5),\n      meta: {\n        user: users[0],\n      },\n      resizable: {\n        beforeStart: true,\n        afterEnd: true,\n      },\n      draggable: true,\n    },\n    {\n      title: 'Another event',\n      color: users[1].color,\n      start: addHours(startOfDay(new Date()), 2),\n      meta: {\n        user: users[1],\n      },\n      resizable: {\n        beforeStart: true,\n        afterEnd: true,\n      },\n      draggable: true,\n    },\n    {\n      title: 'A 3rd event',\n      color: users[0].color,\n      start: addHours(startOfDay(new Date()), 7),\n      meta: {\n        user: users[0],\n      },\n      resizable: {\n        beforeStart: true,\n        afterEnd: true,\n      },\n      draggable: true,\n    },\n    {\n      title: 'An all day event',\n      color: users[0].color,\n      start: new Date(),\n      meta: {\n        user: users[0],\n      },\n      draggable: true,\n      allDay: true,\n    },\n    {\n      title: 'Another all day event',\n      color: users[1].color,\n      start: new Date(),\n      meta: {\n        user: users[1],\n      },\n      draggable: true,\n      allDay: true,\n    },\n    {\n      title: 'A 3rd all day event',\n      color: users[0].color,\n      start: new Date(),\n      meta: {\n        user: users[0],\n      },\n      draggable: true,\n      allDay: true,\n    },\n  ];\n\n  eventTimesChanged({\n    event,\n    newStart,\n    newEnd,\n  }: CalendarEventTimesChangedEvent): void {\n    event.start = newStart;\n    event.end = newEnd;\n    this.events = [...this.events];\n  }\n\n  userChanged({ event, newUser }) {\n    event.color = newUser.color;\n    event.meta.user = newUser;\n    this.events = [...this.events];\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/day-view-scheduler/day-view-scheduler.component.html","messages":[{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `*ngFor`, `*ngForOf`, `*ngForTrackBy`, `class` instead of `class`, `*ngFor`, `*ngForOf`, `*ngForTrackBy`","line":4,"column":7,"nodeType":null,"messageId":"attributesOrder","endLine":5,"endColumn":57,"fix":{"range":[98,173],"text":"*ngFor=\n       of users; t\"let user trackBy: trackByUserId\"class=\"cal-header\""}},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `*ngIf`, `#allDayEventsContainer`, `class` instead of `class`, `#allDayEventsContainer`, `*ngIf`","line":13,"column":5,"nodeType":null,"messageId":"attributesOrder","endLine":15,"endColumn":44,"fix":{"range":[285,382],"text":"*ngIf=\"view.allDayEventRows.length > 0\"\n    #allDayEventsContainer\n    class=\"cal-all-day-events\""}},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `*ngFor`, `*ngForOf`, `*ngForTrackBy`, `class` instead of `class`, `*ngFor`, `*ngForOf`, `*ngForTrackBy`","line":26,"column":9,"nodeType":null,"messageId":"attributesOrder","endLine":27,"endColumn":68,"fix":{"range":[651,741],"text":"*ngFor=\n         of days; t\"let day trackBy: trackByWeekDayHeaderDate\"class=\"cal-day-column\""}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Attribute \"dragOverClass\" has no corresponding i18n attribute. See more at https://angular.io/guide/i18n#mark-element-attributes-for-translations","line":29,"column":9,"nodeType":null,"messageId":"i18nAttribute","endLine":29,"endColumn":22,"fix":{"range":[800,800],"text":" i18n-dragOverClass"}},{"ruleId":"@angular-eslint/template/no-inline-styles","severity":2,"message":"<div/> element should not have inline styles via style attribute. Please use classes instead.","line":39,"column":7,"nodeType":null,"messageId":"noInlineStyles","endLine":89,"endColumn":13},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `mwlDraggable`, `dragActiveClass`, `[cal-draggable]`, `[cal-starts-within-week]`, `[cal-ends-within-week]`, `[ngClass]`, `[width]`, `[marginLeft]` instead of `[cal-draggable]`, `[cal-starts-within-week]`, `[cal-ends-within-week]`, `[ngClass]`, `[width]`, `[marginLeft]`, `mwlDraggable`, `dragActiveClass`","line":46,"column":9,"nodeType":null,"messageId":"attributesOrder","endLine":55,"endColumn":42,"fix":{"range":[1249,1740],"text":"mwlDraggable\n        dragActiveClass=\"cal-drag-active\"\n        [class.cal-draggable]=\"\n          allDayEvent.event.draggable && allDayEventResizes.size === 0\n        \"\n        [class.cal-starts-within-week]=\"!allDayEvent.startsBeforeWeek\"\n        [class.cal-ends-within-week]=\"!allDayEvent.endsAfterWeek\"\n        [ngClass]=\"allDayEvent.event?.cssClass\"\n        [style.width.%]=\"(100 / users.length) * allDayEvent.span\"\n        [style.marginLeft.%]=\"(100 / users.length) * allDayEvent.offset\""}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Attribute \"dragActiveClass\" has no corresponding i18n attribute. See more at https://angular.io/guide/i18n#mark-element-attributes-for-translations","line":55,"column":9,"nodeType":null,"messageId":"i18nAttribute","endLine":55,"endColumn":24,"fix":{"range":[1740,1740],"text":" i18n-dragActiveClass"}},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `*ngIf`, `class` instead of `class`, `*ngIf`","line":98,"column":10,"nodeType":null,"messageId":"attributesOrder","endLine":98,"endColumn":75,"fix":{"range":[3232,3297],"text":"*ngIf=\"view.hourColumns.length > 0\" class=\"cal-time-label-column\""}},{"ruleId":"@angular-eslint/template/cyclomatic-complexity","severity":2,"message":"The cyclomatic complexity 6 exceeds the defined limit 5","line":98,"column":41,"nodeType":null,"messageId":"cyclomaticComplexity","endLine":98,"endColumn":74},{"ruleId":"@angular-eslint/template/cyclomatic-complexity","severity":2,"message":"The cyclomatic complexity 7 exceeds the defined limit 5","line":101,"column":31,"nodeType":null,"messageId":"cyclomaticComplexity","endLine":102,"endColumn":23},{"ruleId":"@angular-eslint/template/no-inline-styles","severity":2,"message":"<mwl-calendar-week-view-hour-segment/> element should not have inline styles via style attribute. Please use classes instead.","line":108,"column":9,"nodeType":null,"messageId":"noInlineStyles","endLine":117,"endColumn":47},{"ruleId":"@angular-eslint/template/cyclomatic-complexity","severity":2,"message":"The cyclomatic complexity 8 exceeds the defined limit 5","line":109,"column":31,"nodeType":null,"messageId":"cyclomaticComplexity","endLine":109,"endColumn":49},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `#dayColumns`, `class`, `[cal-resize-active]` instead of `class`, `[cal-resize-active]`, `#dayColumns`","line":121,"column":7,"nodeType":null,"messageId":"attributesOrder","endLine":123,"endColumn":18,"fix":{"range":[3960,4061],"text":"#dayColumns\n      class=\"cal-day-columns\"\n      [class.cal-resize-active]=\"timeEventResizes.size > 0\""}},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `*ngFor`, `*ngForOf`, `*ngForTrackBy`, `class` instead of `class`, `*ngFor`, `*ngForOf`, `*ngForTrackBy`","line":126,"column":9,"nodeType":null,"messageId":"attributesOrder","endLine":127,"endColumn":76,"fix":{"range":[4087,4185],"text":"*ngFor=\n         of view.hourColumns; t\"let column trackBy: trackByHourColumn\"class=\"cal-day-column\""}},{"ruleId":"@angular-eslint/template/cyclomatic-complexity","severity":2,"message":"The cyclomatic complexity 9 exceeds the defined limit 5","line":127,"column":28,"nodeType":null,"messageId":"cyclomaticComplexity","endLine":127,"endColumn":49},{"ruleId":"@angular-eslint/template/no-inline-styles","severity":2,"message":"<div/> element should not have inline styles via style attribute. Please use classes instead.","line":139,"column":9,"nodeType":null,"messageId":"noInlineStyles","endLine":227,"endColumn":15},{"ruleId":"@angular-eslint/template/cyclomatic-complexity","severity":2,"message":"The cyclomatic complexity 10 exceeds the defined limit 5","line":140,"column":33,"nodeType":null,"messageId":"cyclomaticComplexity","endLine":140,"endColumn":51},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `mwlResizable`, `mwlDraggable`, `dragActiveClass`, `[cal-draggable]`, `[cal-starts-within-day]`, `[cal-ends-within-day]`, `[ngClass]`, `[hidden]`, `[top]`, `[height]`, `[left]`, `[width]`, `[resizeSnapGrid]`, `[validateResize]`, `[allowNegativeResizes]`, `[dropData]`, `[dragAxis]`, `[dragSnapGrid]`, `[ghostDragEnabled]`, `[validateDrag]`, `(resizeStart)`, `(resizing)`, `(resizeEnd)` instead of `[cal-draggable]`, `[cal-starts-within-day]`, `[cal-ends-within-day]`, `[ngClass]`, `[hidden]`, `[top]`, `[height]`, `[left]`, `[width]`, `mwlResizable`, `[resizeSnapGrid]`, `[validateResize]`, `[allowNegativeResizes]`, `(resizeStart)`, `(resizing)`, `(resizeEnd)`, `mwlDraggable`, `dragActiveClass`, `[dropData]`, `[dragAxis]`, `[dragSnapGrid]`, `[ghostDragEnabled]`, `[validateDrag]`","line":143,"column":11,"nodeType":null,"messageId":"attributesOrder","endLine":179,"endColumn":40,"fix":{"range":[4802,6430],"text":"mwlResizable\n          mwlDraggable\n          dragActiveClass=\"cal-drag-active\"\n          [class.cal-draggable]=\"\n            timeEvent.event.draggable && timeEventResizes.size === 0\n          \"\n          [class.cal-starts-within-day]=\"!timeEvent.startsBeforeDay\"\n          [class.cal-ends-within-day]=\"!timeEvent.endsAfterDay\"\n          [ngClass]=\"timeEvent.event.cssClass\"\n          [hidden]=\"timeEvent.height === 0 && timeEvent.width === 0\"\n          [style.top.px]=\"timeEvent.top\"\n          [style.height.px]=\"timeEvent.height\"\n          [style.left.%]=\"timeEvent.left\"\n          [style.width.%]=\"timeEvent.width\"\n          [resizeSnapGrid]=\"{\n            left: dayColumnWidth,\n            right: dayColumnWidth,\n            top: eventSnapSize || hourSegmentHeight,\n            bottom: eventSnapSize || hourSegmentHeight\n          }\"\n          [validateResize]=\"validateResize\"\n          [allowNegativeResizes]=\"true\"\n          [dropData]=\"{ event: timeEvent.event, calendarId: calendarId }\"\n          [dragAxis]=\"{\n            x: timeEvent.event.draggable && timeEventResizes.size === 0,\n            y: timeEvent.event.draggable && timeEventResizes.size === 0\n          }\"\n          [dragSnapGrid]=\"\n            snapDraggedEvents\n              ? { x: dayColumnWidth, y: eventSnapSize || hourSegmentHeight }\n              : {}\n          \"\n          [ghostDragEnabled]=\"!snapDraggedEvents\"\n          [validateDrag]=\"validateDrag\"\n          (resizeStart)=\"timeEventResizeStarted(dayColumns, timeEvent, $event)\"\n          (resizing)=\"timeEventResizing(timeEvent, $event)\"\n          (resizeEnd)=\"timeEventResizeEnded(timeEvent)\""}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Attribute \"dragActiveClass\" has no corresponding i18n attribute. See more at https://angular.io/guide/i18n#mark-element-attributes-for-translations","line":167,"column":11,"nodeType":null,"messageId":"i18nAttribute","endLine":167,"endColumn":26,"fix":{"range":[5919,5919],"text":" i18n-dragActiveClass"}},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `*ngIf`, `class` instead of `class`, `*ngIf`","line":185,"column":13,"nodeType":null,"messageId":"attributesOrder","endLine":190,"endColumn":2,"fix":{"range":[6664,6854],"text":"*ngIf=\"\n              timeEvent.event?.resizable?.beforeStart &&\n              !timeEvent.startsBeforeDay\n            \"\n \n            class=\"cal-resize-handle cal-resize-handle-before-start\""}},{"ruleId":"@angular-eslint/template/cyclomatic-complexity","severity":2,"message":"The cyclomatic complexity 11 exceeds the defined limit 5","line":186,"column":14,"nodeType":null,"messageId":"cyclomaticComplexity","endLine":190,"endColumn":1},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `*ngIf`, `class` instead of `class`, `*ngIf`","line":217,"column":13,"nodeType":null,"messageId":"attributesOrder","endLine":221,"endColumn":2,"fix":{"range":[7817,7984],"text":"*ngIf=\"\n              timeEvent.event?.resizable?.afterEnd && !timeEvent.endsAfterDay\n            \"\n \n            class=\"cal-resize-handle cal-resize-handle-after-end\""}},{"ruleId":"@angular-eslint/template/cyclomatic-complexity","severity":2,"message":"The cyclomatic complexity 12 exceeds the defined limit 5","line":218,"column":14,"nodeType":null,"messageId":"cyclomaticComplexity","endLine":221,"endColumn":1},{"ruleId":"@angular-eslint/template/cyclomatic-complexity","severity":2,"message":"The cyclomatic complexity 13 exceeds the defined limit 5","line":230,"column":28,"nodeType":null,"messageId":"cyclomaticComplexity","endLine":230,"endColumn":45},{"ruleId":"@angular-eslint/template/no-inline-styles","severity":2,"message":"<mwl-calendar-week-view-hour-segment/> element should not have inline styles via style attribute. Please use classes instead.","line":234,"column":11,"nodeType":null,"messageId":"noInlineStyles","endLine":255,"endColumn":49},{"ruleId":"@angular-eslint/template/cyclomatic-complexity","severity":2,"message":"The cyclomatic complexity 14 exceeds the defined limit 5","line":235,"column":33,"nodeType":null,"messageId":"cyclomaticComplexity","endLine":235,"endColumn":51},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `mwlDroppable`, `dragActiveClass`, `[height]`, `[segment]`, `[segmentHeight]`, `[locale]`, `[customTemplate]`, `[clickListenerDisabled]`, `[dragOverClass]`, `(mwlClick)` instead of `[height]`, `[segment]`, `[segmentHeight]`, `[locale]`, `[customTemplate]`, `(mwlClick)`, `[clickListenerDisabled]`, `mwlDroppable`, `[dragOverClass]`, `dragActiveClass`","line":236,"column":13,"nodeType":null,"messageId":"attributesOrder","endLine":252,"endColumn":46,"fix":{"range":[8449,9083],"text":"mwlDroppable\n            dragActiveClass=\"cal-drag-active\"\n            [style.height.px]=\"hourSegmentHeight\"\n            [segment]=\"segment\"\n            [segmentHeight]=\"hourSegmentHeight\"\n            [locale]=\"locale\"\n            [customTemplate]=\"hourSegmentTemplate\"\n            [clickListenerDisabled]=\"hourSegmentClicked.observers.length === 0\"\n            [dragOverClass]=\"\n              !dragActive || !snapDraggedEvents ? 'cal-drag-over' : null\n            \"\n            (mwlClick)=\"\n              hourSegmentClicked.emit({\n                date: segment.date,\n                sourceEvent: $event\n              })\n            \""}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Attribute \"dragActiveClass\" has no corresponding i18n attribute. See more at https://angular.io/guide/i18n#mark-element-attributes-for-translations","line":252,"column":13,"nodeType":null,"messageId":"i18nAttribute","endLine":252,"endColumn":28,"fix":{"range":[9083,9083],"text":" i18n-dragActiveClass"}}],"suppressedMessages":[],"errorCount":28,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":15,"fixableWarningCount":0,"source":"<div class=\"cal-week-view\" role=\"grid\">\n  <div class=\"cal-day-headers\" role=\"row\">\n    <div\n      class=\"cal-header\"\n      *ngFor=\"let user of users; trackBy: trackByUserId\"\n      tabindex=\"0\"\n      role=\"columnheader\"\n    >\n      <b>{{ user.name }}</b>\n    </div>\n  </div>\n  <div\n    class=\"cal-all-day-events\"\n    #allDayEventsContainer\n    *ngIf=\"view.allDayEventRows.length > 0\"\n    mwlDroppable\n    (dragEnter)=\"dragEnter('allDay')\"\n    (dragLeave)=\"dragLeave('allDay')\"\n  >\n    <div class=\"cal-day-columns\">\n      <div\n        class=\"cal-time-label-column\"\n        [ngTemplateOutlet]=\"allDayEventsLabelTemplate\"\n      ></div>\n      <div\n        class=\"cal-day-column\"\n        *ngFor=\"let day of days; trackBy: trackByWeekDayHeaderDate\"\n        mwlDroppable\n        dragOverClass=\"cal-drag-over\"\n        (drop)=\"eventDropped($event, day.date, true)\"\n        (dragEnter)=\"dateDragEnter(day.date)\"\n      ></div>\n    </div>\n    <div\n      *ngFor=\"let eventRow of view.allDayEventRows; trackBy: trackById\"\n      #eventRowContainer\n      class=\"cal-events-row\"\n    >\n      <div\n        *ngFor=\"\n          let allDayEvent of eventRow.row;\n          trackBy: trackByWeekAllDayEvent\n        \"\n        #event\n        class=\"cal-event-container\"\n        [class.cal-draggable]=\"\n          allDayEvent.event.draggable && allDayEventResizes.size === 0\n        \"\n        [class.cal-starts-within-week]=\"!allDayEvent.startsBeforeWeek\"\n        [class.cal-ends-within-week]=\"!allDayEvent.endsAfterWeek\"\n        [ngClass]=\"allDayEvent.event?.cssClass\"\n        [style.width.%]=\"(100 / users.length) * allDayEvent.span\"\n        [style.marginLeft.%]=\"(100 / users.length) * allDayEvent.offset\"\n        mwlDraggable\n        dragActiveClass=\"cal-drag-active\"\n        [dropData]=\"{ event: allDayEvent.event, calendarId: calendarId }\"\n        [dragAxis]=\"{\n          x: allDayEvent.event.draggable && allDayEventResizes.size === 0,\n          y:\n            !snapDraggedEvents &&\n            allDayEvent.event.draggable &&\n            allDayEventResizes.size === 0\n        }\"\n        [dragSnapGrid]=\"snapDraggedEvents ? { x: dayColumnWidth } : {}\"\n        [validateDrag]=\"validateDrag\"\n        (dragStart)=\"dragStarted(eventRowContainer, event, allDayEvent, false)\"\n        (dragging)=\"allDayEventDragMove()\"\n        (dragEnd)=\"dragEnded(allDayEvent, $event, dayColumnWidth)\"\n      >\n        <mwl-calendar-week-view-event\n          [locale]=\"locale\"\n          [weekEvent]=\"allDayEvent\"\n          [tooltipPlacement]=\"tooltipPlacement\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipAppendToBody]=\"tooltipAppendToBody\"\n          [tooltipDelay]=\"tooltipDelay\"\n          [customTemplate]=\"eventTemplate\"\n          [eventTitleTemplate]=\"eventTitleTemplate\"\n          [eventActionsTemplate]=\"eventActionsTemplate\"\n          [daysInWeek]=\"daysInWeek\"\n          (eventClicked)=\"\n            eventClicked.emit({\n              event: allDayEvent.event,\n              sourceEvent: $event.sourceEvent\n            })\n          \"\n        >\n        </mwl-calendar-week-view-event>\n      </div>\n    </div>\n  </div>\n  <div\n    class=\"cal-time-events\"\n    mwlDroppable\n    (dragEnter)=\"dragEnter('time')\"\n    (dragLeave)=\"dragLeave('time')\"\n  >\n    <div class=\"cal-time-label-column\" *ngIf=\"view.hourColumns.length > 0\">\n      <div\n        *ngFor=\"\n          let hour of view.hourColumns[0].hours;\n          trackBy: trackByHour;\n          let odd = odd\n        \"\n        class=\"cal-hour\"\n        [class.cal-hour-odd]=\"odd\"\n      >\n        <mwl-calendar-week-view-hour-segment\n          *ngFor=\"let segment of hour.segments; trackBy: trackByHourSegment\"\n          [style.height.px]=\"hourSegmentHeight\"\n          [segment]=\"segment\"\n          [segmentHeight]=\"hourSegmentHeight\"\n          [locale]=\"locale\"\n          [customTemplate]=\"hourSegmentTemplate\"\n          [isTimeLabel]=\"true\"\n        >\n        </mwl-calendar-week-view-hour-segment>\n      </div>\n    </div>\n    <div\n      class=\"cal-day-columns\"\n      [class.cal-resize-active]=\"timeEventResizes.size > 0\"\n      #dayColumns\n    >\n      <div\n        class=\"cal-day-column\"\n        *ngFor=\"let column of view.hourColumns; trackBy: trackByHourColumn\"\n      >\n        <mwl-calendar-week-view-current-time-marker\n          [columnDate]=\"column.date\"\n          [dayStartHour]=\"dayStartHour\"\n          [dayStartMinute]=\"dayStartMinute\"\n          [dayEndHour]=\"dayEndHour\"\n          [dayEndMinute]=\"dayEndMinute\"\n          [hourSegments]=\"hourSegments\"\n          [hourSegmentHeight]=\"hourSegmentHeight\"\n          [customTemplate]=\"currentTimeMarkerTemplate\"\n        ></mwl-calendar-week-view-current-time-marker>\n        <div\n          *ngFor=\"let timeEvent of column.events; trackBy: trackByWeekTimeEvent\"\n          #event\n          class=\"cal-event-container\"\n          [class.cal-draggable]=\"\n            timeEvent.event.draggable && timeEventResizes.size === 0\n          \"\n          [class.cal-starts-within-day]=\"!timeEvent.startsBeforeDay\"\n          [class.cal-ends-within-day]=\"!timeEvent.endsAfterDay\"\n          [ngClass]=\"timeEvent.event.cssClass\"\n          [hidden]=\"timeEvent.height === 0 && timeEvent.width === 0\"\n          [style.top.px]=\"timeEvent.top\"\n          [style.height.px]=\"timeEvent.height\"\n          [style.left.%]=\"timeEvent.left\"\n          [style.width.%]=\"timeEvent.width\"\n          mwlResizable\n          [resizeSnapGrid]=\"{\n            left: dayColumnWidth,\n            right: dayColumnWidth,\n            top: eventSnapSize || hourSegmentHeight,\n            bottom: eventSnapSize || hourSegmentHeight\n          }\"\n          [validateResize]=\"validateResize\"\n          [allowNegativeResizes]=\"true\"\n          (resizeStart)=\"timeEventResizeStarted(dayColumns, timeEvent, $event)\"\n          (resizing)=\"timeEventResizing(timeEvent, $event)\"\n          (resizeEnd)=\"timeEventResizeEnded(timeEvent)\"\n          mwlDraggable\n          dragActiveClass=\"cal-drag-active\"\n          [dropData]=\"{ event: timeEvent.event, calendarId: calendarId }\"\n          [dragAxis]=\"{\n            x: timeEvent.event.draggable && timeEventResizes.size === 0,\n            y: timeEvent.event.draggable && timeEventResizes.size === 0\n          }\"\n          [dragSnapGrid]=\"\n            snapDraggedEvents\n              ? { x: dayColumnWidth, y: eventSnapSize || hourSegmentHeight }\n              : {}\n          \"\n          [ghostDragEnabled]=\"!snapDraggedEvents\"\n          [validateDrag]=\"validateDrag\"\n          (dragStart)=\"dragStarted(dayColumns, event, timeEvent, true)\"\n          (dragging)=\"dragMove(timeEvent, $event)\"\n          (dragEnd)=\"dragEnded(timeEvent, $event, dayColumnWidth, true)\"\n        >\n          <div\n            class=\"cal-resize-handle cal-resize-handle-before-start\"\n            *ngIf=\"\n              timeEvent.event?.resizable?.beforeStart &&\n              !timeEvent.startsBeforeDay\n            \"\n            mwlResizeHandle\n            [resizeEdges]=\"{\n              left: true,\n              top: true\n            }\"\n          ></div>\n          <mwl-calendar-week-view-event\n            [locale]=\"locale\"\n            [weekEvent]=\"timeEvent\"\n            [tooltipPlacement]=\"tooltipPlacement\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [tooltipAppendToBody]=\"tooltipAppendToBody\"\n            [tooltipDisabled]=\"dragActive || timeEventResizes.size > 0\"\n            [tooltipDelay]=\"tooltipDelay\"\n            [customTemplate]=\"eventTemplate\"\n            [eventTitleTemplate]=\"eventTitleTemplate\"\n            [eventActionsTemplate]=\"eventActionsTemplate\"\n            [column]=\"column\"\n            (eventClicked)=\"\n              eventClicked.emit({\n                event: timeEvent.event,\n                sourceEvent: $event.sourceEvent\n              })\n            \"\n          >\n          </mwl-calendar-week-view-event>\n          <div\n            class=\"cal-resize-handle cal-resize-handle-after-end\"\n            *ngIf=\"\n              timeEvent.event?.resizable?.afterEnd && !timeEvent.endsAfterDay\n            \"\n            mwlResizeHandle\n            [resizeEdges]=\"{\n              right: true,\n              bottom: true\n            }\"\n          ></div>\n        </div>\n\n        <div\n          *ngFor=\"let hour of column.hours; trackBy: trackByHour; let odd = odd\"\n          class=\"cal-hour\"\n          [class.cal-hour-odd]=\"odd\"\n        >\n          <mwl-calendar-week-view-hour-segment\n            *ngFor=\"let segment of hour.segments; trackBy: trackByHourSegment\"\n            [style.height.px]=\"hourSegmentHeight\"\n            [segment]=\"segment\"\n            [segmentHeight]=\"hourSegmentHeight\"\n            [locale]=\"locale\"\n            [customTemplate]=\"hourSegmentTemplate\"\n            (mwlClick)=\"\n              hourSegmentClicked.emit({\n                date: segment.date,\n                sourceEvent: $event\n              })\n            \"\n            [clickListenerDisabled]=\"hourSegmentClicked.observers.length === 0\"\n            mwlDroppable\n            [dragOverClass]=\"\n              !dragActive || !snapDraggedEvents ? 'cal-drag-over' : null\n            \"\n            dragActiveClass=\"cal-drag-active\"\n            (drop)=\"eventDropped($event, segment.date, false)\"\n          >\n          </mwl-calendar-week-view-hour-segment>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","usedDeprecatedRules":[{"ruleId":"@angular-eslint/template/accessibility-label-for","replacedBy":["accessibility-label-has-associated-control"]}]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/day-view-scheduler/day-view-scheduler.component.ts","messages":[{"ruleId":"@angular-eslint/use-injectable-provided-in","severity":2,"message":"The `providedIn` property is mandatory for `Injectables`","line":45,"column":1,"nodeType":"Decorator","messageId":"useInjectableProvidedIn","endLine":45,"endColumn":14,"suggestions":[{"messageId":"suggestInjector","fix":{"range":[780,780],"text":"{providedIn: 'any'}"},"data":{"injector":"any"},"desc":"Use `providedIn: 'any'`"},{"messageId":"suggestInjector","fix":{"range":[780,780],"text":"{providedIn: 'platform'}"},"data":{"injector":"platform"},"desc":"Use `providedIn: 'platform'`"},{"messageId":"suggestInjector","fix":{"range":[780,780],"text":"{providedIn: 'root'}"},"data":{"injector":"root"},"desc":"Use `providedIn: 'root'`"}]},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":81,"column":1,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":85,"endColumn":3,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[157,1758],"text":", ChangeDetectionStrategy,\n} from '@angular/core';\nimport {\n  CalendarUtils,\n  CalendarWeekViewComponent,\n  DateAdapter,\n  getWeekViewPeriod,\n} from 'angular-calendar';\nimport {\n  WeekView,\n  GetWeekViewArgs,\n  WeekViewTimeEvent,\n  EventColor,\n  CalendarEvent,\n  WeekViewAllDayEventRow,\n  WeekViewAllDayEvent,\n} from 'calendar-utils';\nimport { DragEndEvent, DragMoveEvent } from 'angular-draggable-droppable';\n\nexport interface User {\n  id: number;\n  name: string;\n  color: EventColor;\n}\n\ninterface DayViewScheduler extends WeekView {\n  users: User[];\n}\n\ninterface GetWeekViewArgsWithUsers extends GetWeekViewArgs {\n  users: User[];\n}\n\n@Injectable()\nexport class DayViewSchedulerCalendarUtils extends CalendarUtils {\n  getWeekView(args: GetWeekViewArgsWithUsers): DayViewScheduler {\n    const { period } = super.getWeekView(args);\n    const view: DayViewScheduler = {\n      period,\n      allDayEventRows: [],\n      hourColumns: [],\n      users: [...args.users],\n    };\n\n    view.users.forEach((user, columnIndex) => {\n      const events = args.events.filter(\n        (event) => event.meta.user.id === user.id\n      );\n      const columnView = super.getWeekView({\n        ...args,\n        events,\n      });\n      view.hourColumns.push(columnView.hourColumns[0]);\n      columnView.allDayEventRows.forEach(({ row }, rowIndex) => {\n        view.allDayEventRows[rowIndex] = view.allDayEventRows[rowIndex] || {\n          row: [],\n        };\n        view.allDayEventRows[rowIndex].row.push({\n          ...row[0],\n          offset: columnIndex,\n          span: 1,\n        });\n      });\n    });\n\n    return view;\n  }\n}\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/relative-url-prefix","severity":2,"message":"The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)","line":83,"column":16,"nodeType":"Literal","messageId":"relativeUrlPrefix","endLine":83,"endColumn":51},{"ruleId":"@angular-eslint/prefer-output-readonly","severity":2,"message":"Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned","line":92,"column":13,"nodeType":"Identifier","messageId":"preferOutputReadonly","endLine":92,"endColumn":24,"suggestions":[{"messageId":"suggestAddReadonlyModifier","fix":{"range":[2039,2039],"text":"readonly "},"desc":"Add `readonly` modifier"}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Injectable,\n  Input,\n  LOCALE_ID,\n  OnChanges,\n  Output,\n  SimpleChanges,\n} from '@angular/core';\nimport {\n  CalendarUtils,\n  CalendarWeekViewComponent,\n  DateAdapter,\n  getWeekViewPeriod,\n} from 'angular-calendar';\nimport {\n  WeekView,\n  GetWeekViewArgs,\n  WeekViewTimeEvent,\n  EventColor,\n  CalendarEvent,\n  WeekViewAllDayEventRow,\n  WeekViewAllDayEvent,\n} from 'calendar-utils';\nimport { DragEndEvent, DragMoveEvent } from 'angular-draggable-droppable';\n\nexport interface User {\n  id: number;\n  name: string;\n  color: EventColor;\n}\n\ninterface DayViewScheduler extends WeekView {\n  users: User[];\n}\n\ninterface GetWeekViewArgsWithUsers extends GetWeekViewArgs {\n  users: User[];\n}\n\n@Injectable()\nexport class DayViewSchedulerCalendarUtils extends CalendarUtils {\n  getWeekView(args: GetWeekViewArgsWithUsers): DayViewScheduler {\n    const { period } = super.getWeekView(args);\n    const view: DayViewScheduler = {\n      period,\n      allDayEventRows: [],\n      hourColumns: [],\n      users: [...args.users],\n    };\n\n    view.users.forEach((user, columnIndex) => {\n      const events = args.events.filter(\n        (event) => event.meta.user.id === user.id\n      );\n      const columnView = super.getWeekView({\n        ...args,\n        events,\n      });\n      view.hourColumns.push(columnView.hourColumns[0]);\n      columnView.allDayEventRows.forEach(({ row }, rowIndex) => {\n        view.allDayEventRows[rowIndex] = view.allDayEventRows[rowIndex] || {\n          row: [],\n        };\n        view.allDayEventRows[rowIndex].row.push({\n          ...row[0],\n          offset: columnIndex,\n          span: 1,\n        });\n      });\n    });\n\n    return view;\n  }\n}\n\n@Component({\n  selector: 'mwl-day-view-scheduler',\n  templateUrl: 'day-view-scheduler.component.html',\n  providers: [DayViewSchedulerCalendarUtils],\n})\nexport class DayViewSchedulerComponent\n  extends CalendarWeekViewComponent\n  implements OnChanges\n{\n  @Input() users: User[] = [];\n\n  @Output() userChanged = new EventEmitter();\n\n  view: DayViewScheduler;\n\n  daysInWeek = 1;\n\n  constructor(\n    protected cdr: ChangeDetectorRef,\n    protected utils: DayViewSchedulerCalendarUtils,\n    @Inject(LOCALE_ID) locale: string,\n    protected dateAdapter: DateAdapter,\n    protected element: ElementRef<HTMLElement>\n  ) {\n    super(cdr, utils, locale, dateAdapter, element);\n  }\n\n  trackByUserId = (index: number, row: User) => row.id;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    super.ngOnChanges(changes);\n\n    if (changes.users) {\n      this.refreshBody();\n      this.emitBeforeViewRender();\n    }\n  }\n\n  getDayColumnWidth(eventRowContainer: HTMLElement): number {\n    return Math.floor(eventRowContainer.offsetWidth / this.users.length);\n  }\n\n  dragMove(dayEvent: WeekViewTimeEvent, dragEvent: DragMoveEvent) {\n    if (this.snapDraggedEvents) {\n      const newUser = this.getDraggedUserColumn(dayEvent, dragEvent.x);\n      const newEventTimes = this.getDragMovedEventTimes(\n        dayEvent,\n        { ...dragEvent, x: 0 },\n        this.dayColumnWidth,\n        true\n      );\n      const originalEvent = dayEvent.event;\n      const adjustedEvent = {\n        ...originalEvent,\n        ...newEventTimes,\n        meta: { ...originalEvent.meta, user: newUser },\n      };\n      const tempEvents = this.events.map((event) => {\n        if (event === originalEvent) {\n          return adjustedEvent;\n        }\n        return event;\n      });\n      this.restoreOriginalEvents(\n        tempEvents,\n        new Map([[adjustedEvent, originalEvent]])\n      );\n    }\n    this.dragAlreadyMoved = true;\n  }\n\n  dragEnded(\n    weekEvent: WeekViewAllDayEvent | WeekViewTimeEvent,\n    dragEndEvent: DragEndEvent,\n    dayWidth: number,\n    useY = false\n  ) {\n    super.dragEnded(\n      weekEvent,\n      {\n        ...dragEndEvent,\n        x: 0,\n      },\n      dayWidth,\n      useY\n    );\n    const newUser = this.getDraggedUserColumn(weekEvent, dragEndEvent.x);\n    if (newUser && newUser !== weekEvent.event.meta.user) {\n      this.userChanged.emit({ event: weekEvent.event, newUser });\n    }\n  }\n\n  protected getWeekView(events: CalendarEvent[]) {\n    return this.utils.getWeekView({\n      events,\n      users: this.users,\n      viewDate: this.viewDate,\n      weekStartsOn: this.weekStartsOn,\n      excluded: this.excludeDays,\n      precision: this.precision,\n      absolutePositionedEvents: true,\n      hourSegments: this.hourSegments,\n      dayStart: {\n        hour: this.dayStartHour,\n        minute: this.dayStartMinute,\n      },\n      dayEnd: {\n        hour: this.dayEndHour,\n        minute: this.dayEndMinute,\n      },\n      segmentHeight: this.hourSegmentHeight,\n      weekendDays: this.weekendDays,\n      ...getWeekViewPeriod(\n        this.dateAdapter,\n        this.viewDate,\n        this.weekStartsOn,\n        this.excludeDays,\n        this.daysInWeek\n      ),\n    });\n  }\n\n  private getDraggedUserColumn(\n    dayEvent: WeekViewTimeEvent | WeekViewAllDayEvent,\n    xPixels: number\n  ) {\n    const columnsMoved = Math.round(xPixels / this.dayColumnWidth);\n    const currentColumnIndex = this.view.users.findIndex(\n      (user) => user === dayEvent.event.meta.user\n    );\n    const newIndex = currentColumnIndex + columnsMoved;\n    return this.view.users[newIndex];\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/day-view-scheduler/module.ts","messages":[{"ruleId":"@angular-eslint/sort-ngmodule-metadata-arrays","severity":2,"message":"`NgModule` metadata arrays should be sorted in ASC alphabetical order","line":20,"column":33,"nodeType":"Identifier","messageId":"sortNgmoduleMetadataArrays","endLine":20,"endColumn":58,"fix":{"range":[708,748],"text":"DayViewSchedulerComponent, DemoComponent"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { CalendarModule, DateAdapter } from 'angular-calendar';\nimport { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\nimport { DemoUtilsModule } from '../demo-utils/module';\nimport { DemoComponent } from './component';\nimport { DayViewSchedulerComponent } from './day-view-scheduler.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CalendarModule.forRoot({\n      provide: DateAdapter,\n      useFactory: adapterFactory,\n    }),\n    DemoUtilsModule,\n    RouterModule.forChild([{ path: '', component: DemoComponent }]),\n  ],\n  declarations: [DemoComponent, DayViewSchedulerComponent],\n  exports: [DemoComponent],\n})\nexport class DemoModule {}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/day-view-scheduler/template.html","messages":[{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":10,"column":9,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":11,"endColumn":7,"fix":{"range":[81,81],"text":" i18n"}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":17,"column":9,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":18,"endColumn":7,"fix":{"range":[249,249],"text":" i18n"}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":25,"column":9,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":26,"endColumn":7,"fix":{"range":[394,394],"text":" i18n"}}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"<div class=\"row\">\n  <div class=\"col-md-6\">\n    <div class=\"btn-group\">\n      <div\n        class=\"btn btn-primary\"\n        mwlCalendarPreviousView\n        [view]=\"'day'\"\n        [(viewDate)]=\"viewDate\"\n      >\n        Previous\n      </div>\n      <div\n        class=\"btn btn-outline-secondary\"\n        mwlCalendarToday\n        [(viewDate)]=\"viewDate\"\n      >\n        Today\n      </div>\n      <div\n        class=\"btn btn-primary\"\n        mwlCalendarNextView\n        [view]=\"'day'\"\n        [(viewDate)]=\"viewDate\"\n      >\n        Next\n      </div>\n    </div>\n  </div>\n  <div class=\"col-md-6 text-right\">\n    <h3>{{ viewDate | calendarDate:('dayViewTitle') }}</h3>\n  </div>\n</div>\n<br />\n\n<mwl-day-view-scheduler\n  [viewDate]=\"viewDate\"\n  [events]=\"events\"\n  [users]=\"users\"\n  (eventTimesChanged)=\"eventTimesChanged($event)\"\n  (userChanged)=\"userChanged($event)\"\n>\n</mwl-day-view-scheduler>\n","usedDeprecatedRules":[{"ruleId":"@angular-eslint/template/accessibility-label-for","replacedBy":["accessibility-label-has-associated-control"]}]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/day-view-start-end/component.ts","messages":[{"ruleId":"@angular-eslint/relative-url-prefix","severity":2,"message":"The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)","line":7,"column":16,"nodeType":"Literal","messageId":"relativeUrlPrefix","endLine":7,"endColumn":31}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: 'template.html',\n})\nexport class DemoComponent {\n  view: CalendarView = CalendarView.Day;\n\n  viewDate: Date = new Date();\n\n  events: CalendarEvent[] = [];\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/dayjs/component.ts","messages":[{"ruleId":"@angular-eslint/relative-url-prefix","severity":2,"message":"The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)","line":14,"column":16,"nodeType":"Literal","messageId":"relativeUrlPrefix","endLine":14,"endColumn":31}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent, CalendarView, DAYS_OF_WEEK } from 'angular-calendar';\nimport dayjs from 'dayjs';\nimport en from 'dayjs/locale/en';\n\ndayjs.locale({\n  ...en,\n  weekStart: DAYS_OF_WEEK.MONDAY,\n});\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: 'template.html',\n})\nexport class DemoComponent {\n  view: CalendarView = CalendarView.Month;\n\n  viewDate: Date = new Date();\n\n  events: CalendarEvent[] = [];\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/dayjs/template.html","messages":[{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":2,"column":3,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":5,"endColumn":1,"fix":{"range":[4,4],"text":" i18n"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"<div class=\"alert alert-info\">\n  Use this if you're already using dayjs heavily in your app and don't want to\n  include date-fns in your bundle, or you need to be able to adjust dates to be\n  in a different timezone than the users browser via dayjs-locale\n</div>\n\n<mwl-demo-utils-calendar-header [(view)]=\"view\" [(viewDate)]=\"viewDate\">\n</mwl-demo-utils-calendar-header>\n\n<div [ngSwitch]=\"view\">\n  <mwl-calendar-month-view\n    *ngSwitchCase=\"'month'\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n  >\n  </mwl-calendar-month-view>\n  <mwl-calendar-week-view\n    *ngSwitchCase=\"'week'\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n  >\n  </mwl-calendar-week-view>\n  <mwl-calendar-day-view\n    *ngSwitchCase=\"'day'\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n  >\n  </mwl-calendar-day-view>\n</div>\n","usedDeprecatedRules":[{"ruleId":"@angular-eslint/template/accessibility-label-for","replacedBy":["accessibility-label-has-associated-control"]}]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/demo-utils/calendar-header.component.ts","messages":[{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":4,"column":1,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":69,"endColumn":3,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[47,137],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarView } from 'angular-calendar';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/component-max-inline-declarations","severity":2,"message":"`template` has too many lines (61). Maximum allowed is 3 (https://angular.io/guide/styleguide#style-05-04)","line":6,"column":13,"nodeType":"TemplateLiteral","messageId":"componentMaxInlineDeclarations","endLine":68,"endColumn":4},{"ruleId":"@angular-eslint/prefer-output-readonly","severity":2,"message":"Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned","line":77,"column":13,"nodeType":"Identifier","messageId":"preferOutputReadonly","endLine":77,"endColumn":23,"suggestions":[{"messageId":"suggestAddReadonlyModifier","fix":{"range":[2075,2075],"text":"readonly "},"desc":"Add `readonly` modifier"}]},{"ruleId":"@angular-eslint/prefer-output-readonly","severity":2,"message":"Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned","line":79,"column":13,"nodeType":"Identifier","messageId":"preferOutputReadonly","endLine":79,"endColumn":27,"suggestions":[{"messageId":"suggestAddReadonlyModifier","fix":{"range":[2135,2135],"text":"readonly "},"desc":"Add `readonly` modifier"}]},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":17,"column":13,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":18,"endColumn":11,"fix":{"range":[303,303],"text":" i18n"}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":25,"column":13,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":26,"endColumn":11,"fix":{"range":[563,563],"text":" i18n"}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":34,"column":13,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":35,"endColumn":11,"fix":{"range":[797,797],"text":" i18n"}},{"ruleId":"@angular-eslint/template/accessibility-interactive-supports-focus","severity":2,"message":"Elements with interaction handlers must be focusable.","line":43,"column":11,"nodeType":null,"messageId":"interactiveSupportsFocus","endLine":49,"endColumn":17},{"ruleId":"@angular-eslint/template/click-events-have-key-events","severity":2,"message":"click must be accompanied by either keyup, keydown or keypress event for accessibility.","line":43,"column":11,"nodeType":null,"messageId":"clickEventsHaveKeyEvents","endLine":49,"endColumn":17},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `[active]`, `(click)` instead of `(click)`, `[active]`","line":45,"column":13,"nodeType":null,"messageId":"attributesOrder","endLine":46,"endColumn":57,"fix":{"range":[1303,1405],"text":"[class.active]=\"view === CalendarView.Month\"\n            (click)=\"viewChange.emit(CalendarView.Month)\""}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":48,"column":13,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":49,"endColumn":11,"fix":{"range":[1254,1254],"text":" i18n"}},{"ruleId":"@angular-eslint/template/accessibility-interactive-supports-focus","severity":2,"message":"Elements with interaction handlers must be focusable.","line":50,"column":11,"nodeType":null,"messageId":"interactiveSupportsFocus","endLine":56,"endColumn":17},{"ruleId":"@angular-eslint/template/click-events-have-key-events","severity":2,"message":"click must be accompanied by either keyup, keydown or keypress event for accessibility.","line":50,"column":11,"nodeType":null,"messageId":"clickEventsHaveKeyEvents","endLine":56,"endColumn":17},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `[active]`, `(click)` instead of `(click)`, `[active]`","line":52,"column":13,"nodeType":null,"messageId":"attributesOrder","endLine":53,"endColumn":56,"fix":{"range":[1516,1616],"text":"[class.active]=\"view === CalendarView.Week\"\n            (click)=\"viewChange.emit(CalendarView.Week)\""}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":55,"column":13,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":56,"endColumn":11,"fix":{"range":[1467,1467],"text":" i18n"}},{"ruleId":"@angular-eslint/template/accessibility-interactive-supports-focus","severity":2,"message":"Elements with interaction handlers must be focusable.","line":57,"column":11,"nodeType":null,"messageId":"interactiveSupportsFocus","endLine":63,"endColumn":17},{"ruleId":"@angular-eslint/template/click-events-have-key-events","severity":2,"message":"click must be accompanied by either keyup, keydown or keypress event for accessibility.","line":57,"column":11,"nodeType":null,"messageId":"clickEventsHaveKeyEvents","endLine":63,"endColumn":17},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `[active]`, `(click)` instead of `(click)`, `[active]`","line":59,"column":13,"nodeType":null,"messageId":"attributesOrder","endLine":60,"endColumn":55,"fix":{"range":[1726,1824],"text":"[class.active]=\"view === CalendarView.Day\"\n            (click)=\"viewChange.emit(CalendarView.Day)\""}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":62,"column":13,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":63,"endColumn":11,"fix":{"range":[1677,1677],"text":" i18n"}}],"suppressedMessages":[],"errorCount":19,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":9,"fixableWarningCount":0,"source":"import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CalendarView } from 'angular-calendar';\n\n@Component({\n  selector: 'mwl-demo-utils-calendar-header',\n  template: `\n    <div class=\"row text-center\">\n      <div class=\"col-md-4\">\n        <div class=\"btn-group\">\n          <div\n            class=\"btn btn-primary\"\n            mwlCalendarPreviousView\n            [view]=\"view\"\n            [(viewDate)]=\"viewDate\"\n            (viewDateChange)=\"viewDateChange.next(viewDate)\"\n          >\n            Previous\n          </div>\n          <div\n            class=\"btn btn-outline-secondary\"\n            mwlCalendarToday\n            [(viewDate)]=\"viewDate\"\n            (viewDateChange)=\"viewDateChange.next(viewDate)\"\n          >\n            Today\n          </div>\n          <div\n            class=\"btn btn-primary\"\n            mwlCalendarNextView\n            [view]=\"view\"\n            [(viewDate)]=\"viewDate\"\n            (viewDateChange)=\"viewDateChange.next(viewDate)\"\n          >\n            Next\n          </div>\n        </div>\n      </div>\n      <div class=\"col-md-4\">\n        <h3>{{ viewDate | calendarDate: view + 'ViewTitle':locale }}</h3>\n      </div>\n      <div class=\"col-md-4\">\n        <div class=\"btn-group\">\n          <div\n            class=\"btn btn-primary\"\n            (click)=\"viewChange.emit(CalendarView.Month)\"\n            [class.active]=\"view === CalendarView.Month\"\n          >\n            Month\n          </div>\n          <div\n            class=\"btn btn-primary\"\n            (click)=\"viewChange.emit(CalendarView.Week)\"\n            [class.active]=\"view === CalendarView.Week\"\n          >\n            Week\n          </div>\n          <div\n            class=\"btn btn-primary\"\n            (click)=\"viewChange.emit(CalendarView.Day)\"\n            [class.active]=\"view === CalendarView.Day\"\n          >\n            Day\n          </div>\n        </div>\n      </div>\n    </div>\n    <br />\n  `,\n})\nexport class CalendarHeaderComponent {\n  @Input() view: CalendarView;\n\n  @Input() viewDate: Date;\n\n  @Input() locale: string = 'en';\n\n  @Output() viewChange = new EventEmitter<CalendarView>();\n\n  @Output() viewDateChange = new EventEmitter<Date>();\n\n  CalendarView = CalendarView;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/demo-utils/module.ts","messages":[{"ruleId":"@angular-eslint/sort-ngmodule-metadata-arrays","severity":2,"message":"`NgModule` metadata arrays should be sorted in ASC alphabetical order","line":8,"column":40,"nodeType":"Identifier","messageId":"sortNgmoduleMetadataArrays","endLine":8,"endColumn":54,"fix":{"range":[297,324],"text":"CalendarModule, FormsModule"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { CalendarModule } from 'angular-calendar';\nimport { CalendarHeaderComponent } from './calendar-header.component';\n\n@NgModule({\n  imports: [CommonModule, FormsModule, CalendarModule],\n  declarations: [CalendarHeaderComponent],\n  exports: [CalendarHeaderComponent],\n})\nexport class DemoUtilsModule {}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/disable-slide-animation/component.ts","messages":[{"ruleId":"@angular-eslint/relative-url-prefix","severity":2,"message":"The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)","line":9,"column":16,"nodeType":"Literal","messageId":"relativeUrlPrefix","endLine":9,"endColumn":31}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent } from 'angular-calendar';\nimport { isSameDay, isSameMonth } from 'date-fns';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: 'template.html',\n})\nexport class DemoComponent {\n  viewDate: Date = new Date();\n\n  events: CalendarEvent[] = [\n    {\n      start: new Date(),\n      title: 'An event',\n      color: colors.red,\n    },\n  ];\n\n  activeDayIsOpen: boolean;\n\n  dayClicked({ date, events }: { date: Date; events: CalendarEvent[] }): void {\n    if (isSameMonth(date, this.viewDate)) {\n      if (\n        (isSameDay(this.viewDate, date) && this.activeDayIsOpen === true) ||\n        events.length === 0\n      ) {\n        this.activeDayIsOpen = false;\n      } else {\n        this.activeDayIsOpen = true;\n        this.viewDate = date;\n      }\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/disable-tooltips/component.ts","messages":[{"ruleId":"@angular-eslint/relative-url-prefix","severity":2,"message":"The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)","line":13,"column":16,"nodeType":"Literal","messageId":"relativeUrlPrefix","endLine":13,"endColumn":31}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  CalendarEvent,\n  CalendarEventTitleFormatter,\n  CalendarView,\n} from 'angular-calendar';\nimport { CustomEventTitleFormatter } from './custom-event-title-formatter.provider';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: 'template.html',\n  providers: [\n    {\n      provide: CalendarEventTitleFormatter,\n      useClass: CustomEventTitleFormatter,\n    },\n  ],\n})\nexport class DemoComponent {\n  view: CalendarView = CalendarView.Month;\n\n  viewDate: Date = new Date();\n\n  events: CalendarEvent[] = [\n    {\n      title: 'An event',\n      start: new Date(),\n      color: colors.red,\n    },\n  ];\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/disable-tooltips/custom-event-title-formatter.provider.ts","messages":[{"ruleId":"@angular-eslint/use-injectable-provided-in","severity":2,"message":"The `providedIn` property is mandatory for `Injectables`","line":4,"column":1,"nodeType":"Decorator","messageId":"useInjectableProvidedIn","endLine":4,"endColumn":14,"suggestions":[{"messageId":"suggestInjector","fix":{"range":[136,136],"text":"{providedIn: 'any'}"},"data":{"injector":"any"},"desc":"Use `providedIn: 'any'`"},{"messageId":"suggestInjector","fix":{"range":[136,136],"text":"{providedIn: 'platform'}"},"data":{"injector":"platform"},"desc":"Use `providedIn: 'platform'`"},{"messageId":"suggestInjector","fix":{"range":[136,136],"text":"{providedIn: 'root'}"},"data":{"injector":"root"},"desc":"Use `providedIn: 'root'`"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CalendarEventTitleFormatter, CalendarEvent } from 'angular-calendar';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class CustomEventTitleFormatter extends CalendarEventTitleFormatter {\n  // you can override any of the methods defined in the parent class\n\n  monthTooltip(event: CalendarEvent): string {\n    return;\n  }\n\n  weekTooltip(event: CalendarEvent): string {\n    return;\n  }\n\n  dayTooltip(event: CalendarEvent): string {\n    return;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/drag-to-create-events/component.ts","messages":[{"ruleId":"@angular-eslint/use-injectable-provided-in","severity":2,"message":"The `providedIn` property is mandatory for `Injectables`","line":22,"column":1,"nodeType":"Decorator","messageId":"useInjectableProvidedIn","endLine":22,"endColumn":14,"suggestions":[{"messageId":"suggestInjector","fix":{"range":[654,654],"text":"{providedIn: 'any'}"},"data":{"injector":"any"},"desc":"Use `providedIn: 'any'`"},{"messageId":"suggestInjector","fix":{"range":[654,654],"text":"{providedIn: 'platform'}"},"data":{"injector":"platform"},"desc":"Use `providedIn: 'platform'`"},{"messageId":"suggestInjector","fix":{"range":[654,654],"text":"{providedIn: 'root'}"},"data":{"injector":"root"},"desc":"Use `providedIn: 'root'`"}]},{"ruleId":"@angular-eslint/relative-url-prefix","severity":2,"message":"The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)","line":40,"column":16,"nodeType":"Literal","messageId":"relativeUrlPrefix","endLine":40,"endColumn":31},{"ruleId":"@angular-eslint/use-component-view-encapsulation","severity":2,"message":"Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect","line":54,"column":36,"nodeType":"Identifier","messageId":"useComponentViewEncapsulation","endLine":54,"endColumn":40,"suggestions":[{"messageId":"suggestRemoveViewEncapsulationNone","fix":{"range":[82,1398],"text":",\n} from '@angular/core';\nimport { CalendarEvent, CalendarEventTitleFormatter } from 'angular-calendar';\nimport { WeekViewHourSegment } from 'calendar-utils';\nimport { fromEvent } from 'rxjs';\nimport { finalize, takeUntil } from 'rxjs/operators';\nimport { addDays, addMinutes, endOfWeek } from 'date-fns';\n\nfunction floorToNearest(amount: number, precision: number) {\n  return Math.floor(amount / precision) * precision;\n}\n\nfunction ceilToNearest(amount: number, precision: number) {\n  return Math.ceil(amount / precision) * precision;\n}\n\n@Injectable()\nexport class CustomEventTitleFormatter extends CalendarEventTitleFormatter {\n  weekTooltip(event: CalendarEvent, title: string) {\n    if (!event.meta.tmpEvent) {\n      return super.weekTooltip(event, title);\n    }\n  }\n\n  dayTooltip(event: CalendarEvent, title: string) {\n    if (!event.meta.tmpEvent) {\n      return super.dayTooltip(event, title);\n    }\n  }\n}\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: 'template.html',\n  providers: [\n    {\n      provide: CalendarEventTitleFormatter,\n      useClass: CustomEventTitleFormatter,\n    },\n  ],\n  styles: [\n    `\n      .disable-hover {\n        pointer-events: none;\n      }\n    `,\n  ],\n  "},"desc":"Remove `ViewEncapsulation.None`"}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Injectable,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { CalendarEvent, CalendarEventTitleFormatter } from 'angular-calendar';\nimport { WeekViewHourSegment } from 'calendar-utils';\nimport { fromEvent } from 'rxjs';\nimport { finalize, takeUntil } from 'rxjs/operators';\nimport { addDays, addMinutes, endOfWeek } from 'date-fns';\n\nfunction floorToNearest(amount: number, precision: number) {\n  return Math.floor(amount / precision) * precision;\n}\n\nfunction ceilToNearest(amount: number, precision: number) {\n  return Math.ceil(amount / precision) * precision;\n}\n\n@Injectable()\nexport class CustomEventTitleFormatter extends CalendarEventTitleFormatter {\n  weekTooltip(event: CalendarEvent, title: string) {\n    if (!event.meta.tmpEvent) {\n      return super.weekTooltip(event, title);\n    }\n  }\n\n  dayTooltip(event: CalendarEvent, title: string) {\n    if (!event.meta.tmpEvent) {\n      return super.dayTooltip(event, title);\n    }\n  }\n}\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: 'template.html',\n  providers: [\n    {\n      provide: CalendarEventTitleFormatter,\n      useClass: CustomEventTitleFormatter,\n    },\n  ],\n  styles: [\n    `\n      .disable-hover {\n        pointer-events: none;\n      }\n    `,\n  ],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class DemoComponent {\n  viewDate = new Date();\n\n  events: CalendarEvent[] = [];\n\n  dragToCreateActive = false;\n\n  weekStartsOn: 0 = 0;\n\n  constructor(private cdr: ChangeDetectorRef) {}\n\n  startDragToCreate(\n    segment: WeekViewHourSegment,\n    mouseDownEvent: MouseEvent,\n    segmentElement: HTMLElement\n  ) {\n    const dragToSelectEvent: CalendarEvent = {\n      id: this.events.length,\n      title: 'New event',\n      start: segment.date,\n      meta: {\n        tmpEvent: true,\n      },\n    };\n    this.events = [...this.events, dragToSelectEvent];\n    const segmentPosition = segmentElement.getBoundingClientRect();\n    this.dragToCreateActive = true;\n    const endOfView = endOfWeek(this.viewDate, {\n      weekStartsOn: this.weekStartsOn,\n    });\n\n    fromEvent(document, 'mousemove')\n      .pipe(\n        finalize(() => {\n          delete dragToSelectEvent.meta.tmpEvent;\n          this.dragToCreateActive = false;\n          this.refresh();\n        }),\n        takeUntil(fromEvent(document, 'mouseup'))\n      )\n      .subscribe((mouseMoveEvent: MouseEvent) => {\n        const minutesDiff = ceilToNearest(\n          mouseMoveEvent.clientY - segmentPosition.top,\n          30\n        );\n\n        const daysDiff =\n          floorToNearest(\n            mouseMoveEvent.clientX - segmentPosition.left,\n            segmentPosition.width\n          ) / segmentPosition.width;\n\n        const newEnd = addDays(addMinutes(segment.date, minutesDiff), daysDiff);\n        if (newEnd > segment.date && newEnd < endOfView) {\n          dragToSelectEvent.end = newEnd;\n        }\n        this.refresh();\n      });\n  }\n\n  private refresh() {\n    this.events = [...this.events];\n    this.cdr.detectChanges();\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/drag-to-create-events/template.html","messages":[{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":10,"column":9,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":11,"endColumn":7,"fix":{"range":[81,81],"text":" i18n"}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":17,"column":9,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":18,"endColumn":7,"fix":{"range":[250,250],"text":" i18n"}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":25,"column":9,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":26,"endColumn":7,"fix":{"range":[395,395],"text":" i18n"}},{"ruleId":"@angular-eslint/template/no-inline-styles","severity":2,"message":"<div/> element should not have inline styles via style attribute. Please use classes instead.","line":42,"column":3,"nodeType":null,"messageId":"noInlineStyles","endLine":54,"endColumn":9},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `*ngIf`, `class` instead of `class`, `*ngIf`","line":51,"column":10,"nodeType":null,"messageId":"attributesOrder","endLine":51,"endColumn":46,"fix":{"range":[1153,1189],"text":"*ngIf=\"isTimeLabel\" class=\"cal-time\""}}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"<div class=\"row\">\n  <div class=\"col-md-6\">\n    <div class=\"btn-group\">\n      <div\n        class=\"btn btn-primary\"\n        mwlCalendarPreviousView\n        [view]=\"'week'\"\n        [(viewDate)]=\"viewDate\"\n      >\n        Previous\n      </div>\n      <div\n        class=\"btn btn-outline-secondary\"\n        mwlCalendarToday\n        [(viewDate)]=\"viewDate\"\n      >\n        Today\n      </div>\n      <div\n        class=\"btn btn-primary\"\n        mwlCalendarNextView\n        [view]=\"'week'\"\n        [(viewDate)]=\"viewDate\"\n      >\n        Next\n      </div>\n    </div>\n  </div>\n  <div class=\"col-md-6 text-right\">\n    <h3>{{ viewDate | calendarDate:('weekViewTitle') }}</h3>\n  </div>\n</div>\n<br />\n\n<ng-template\n  #weekViewHourSegmentTemplate\n  let-segment=\"segment\"\n  let-locale=\"locale\"\n  let-segmentHeight=\"segmentHeight\"\n  let-isTimeLabel=\"isTimeLabel\"\n>\n  <div\n    #segmentElement\n    class=\"cal-hour-segment\"\n    [style.height.px]=\"segmentHeight\"\n    [class.cal-hour-start]=\"segment.isStart\"\n    [class.cal-after-hour-start]=\"!segment.isStart\"\n    [ngClass]=\"segment.cssClass\"\n    (mousedown)=\"startDragToCreate(segment, $event, segmentElement)\"\n  >\n    <div class=\"cal-time\" *ngIf=\"isTimeLabel\">\n      {{ segment.date | calendarDate:'weekViewHour':locale }}\n    </div>\n  </div>\n</ng-template>\n\n<mwl-calendar-week-view\n  [viewDate]=\"viewDate\"\n  [events]=\"events\"\n  [hourSegmentTemplate]=\"weekViewHourSegmentTemplate\"\n  [weekStartsOn]=\"weekStartsOn\"\n>\n</mwl-calendar-week-view>\n","usedDeprecatedRules":[{"ruleId":"@angular-eslint/template/accessibility-label-for","replacedBy":["accessibility-label-has-associated-control"]}]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/draggable-events/component.ts","messages":[{"ruleId":"@angular-eslint/relative-url-prefix","severity":2,"message":"The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)","line":13,"column":16,"nodeType":"Literal","messageId":"relativeUrlPrefix","endLine":13,"endColumn":31}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport {\n  CalendarEvent,\n  CalendarEventTimesChangedEvent,\n  CalendarView,\n} from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: 'template.html',\n})\nexport class DemoComponent {\n  view: CalendarView = CalendarView.Month;\n\n  viewDate = new Date();\n\n  events: CalendarEvent[] = [\n    {\n      title: 'Draggable event',\n      color: colors.yellow,\n      start: new Date(),\n      draggable: true,\n    },\n    {\n      title: 'A non draggable event',\n      color: colors.blue,\n      start: new Date(),\n    },\n  ];\n\n  refresh = new Subject<void>();\n\n  eventTimesChanged({\n    event,\n    newStart,\n    newEnd,\n  }: CalendarEventTimesChangedEvent): void {\n    event.start = newStart;\n    event.end = newEnd;\n    this.refresh.next();\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/draggable-external-events/component.ts","messages":[{"ruleId":"@angular-eslint/relative-url-prefix","severity":2,"message":"The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)","line":13,"column":16,"nodeType":"Literal","messageId":"relativeUrlPrefix","endLine":13,"endColumn":31},{"ruleId":"@angular-eslint/component-max-inline-declarations","severity":2,"message":"`styles` has too many lines (8). Maximum allowed is 3 (https://angular.io/guide/styleguide#style-05-04)","line":14,"column":11,"nodeType":"ArrayExpression","messageId":"componentMaxInlineDeclarations","endLine":25,"endColumn":4}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  CalendarEvent,\n  CalendarEventTimesChangedEvent,\n  CalendarView,\n} from 'angular-calendar';\nimport { Subject } from 'rxjs';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: 'template.html',\n  styles: [\n    `\n      .drag-active {\n        position: relative;\n        z-index: 1;\n        pointer-events: none;\n      }\n      .drag-over {\n        background-color: #eee;\n      }\n    `,\n  ],\n})\nexport class DemoComponent {\n  CalendarView = CalendarView;\n\n  view = CalendarView.Month;\n\n  viewDate = new Date();\n\n  externalEvents: CalendarEvent[] = [\n    {\n      title: 'Event 1',\n      color: colors.yellow,\n      start: new Date(),\n      draggable: true,\n    },\n    {\n      title: 'Event 2',\n      color: colors.blue,\n      start: new Date(),\n      draggable: true,\n    },\n  ];\n\n  events: CalendarEvent[] = [];\n\n  activeDayIsOpen = false;\n\n  refresh = new Subject<void>();\n\n  eventDropped({\n    event,\n    newStart,\n    newEnd,\n    allDay,\n  }: CalendarEventTimesChangedEvent): void {\n    const externalIndex = this.externalEvents.indexOf(event);\n    if (typeof allDay !== 'undefined') {\n      event.allDay = allDay;\n    }\n    if (externalIndex > -1) {\n      this.externalEvents.splice(externalIndex, 1);\n      this.events.push(event);\n    }\n    event.start = newStart;\n    if (newEnd) {\n      event.end = newEnd;\n    }\n    if (this.view === 'month') {\n      this.viewDate = newStart;\n      this.activeDayIsOpen = true;\n    }\n    this.events = [...this.events];\n  }\n\n  externalDrop(event: CalendarEvent) {\n    if (this.externalEvents.indexOf(event) === -1) {\n      this.events = this.events.filter((iEvent) => iEvent !== event);\n      this.externalEvents.push(event);\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/draggable-external-events/module.ts","messages":[{"ruleId":"@angular-eslint/sort-ngmodule-metadata-arrays","severity":2,"message":"`NgModule` metadata arrays should be sorted in ASC alphabetical order","line":18,"column":5,"nodeType":"Identifier","messageId":"sortNgmoduleMetadataArrays","endLine":18,"endColumn":20,"fix":{"range":[589,627],"text":"DemoUtilsModule,\n    DragAndDropModule"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { CalendarModule, DateAdapter } from 'angular-calendar';\nimport { DragAndDropModule } from 'angular-draggable-droppable';\nimport { DemoUtilsModule } from '../demo-utils/module';\nimport { DemoComponent } from './component';\nimport { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CalendarModule.forRoot({\n      provide: DateAdapter,\n      useFactory: adapterFactory,\n    }),\n    DragAndDropModule,\n    DemoUtilsModule,\n    RouterModule.forChild([{ path: '', component: DemoComponent }]),\n  ],\n  declarations: [DemoComponent],\n  exports: [DemoComponent],\n})\nexport class DemoModule {}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/draggable-external-events/template.html","messages":[{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `dragOverClass`, `(drop)` instead of `(drop)`, `dragOverClass`","line":6,"column":7,"nodeType":null,"messageId":"attributesOrder","endLine":7,"endColumn":32,"fix":{"range":[96,172],"text":"dragOverClass=\"drag-over\"\n      (drop)=\"externalDrop($event.dropData.event)\""}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Attribute \"dragOverClass\" has no corresponding i18n attribute. See more at https://angular.io/guide/i18n#mark-element-attributes-for-translations","line":7,"column":7,"nodeType":null,"messageId":"i18nAttribute","endLine":7,"endColumn":20,"fix":{"range":[172,172],"text":" i18n-dragOverClass"}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":10,"column":52,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":10,"endColumn":67,"fix":{"range":[259,259],"text":" i18n"}},{"ruleId":"@angular-eslint/template/use-track-by-function","severity":2,"message":"Missing trackBy function in ngFor directive","line":13,"column":13,"nodeType":null,"messageId":"useTrackByFunction","endLine":13,"endColumn":49},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `dragActiveClass`, `[dropData]`, `[touchStartLongPress]` instead of `[dropData]`, `[touchStartLongPress]`, `dragActiveClass`","line":15,"column":13,"nodeType":null,"messageId":"attributesOrder","endLine":17,"endColumn":42,"fix":{"range":[398,529],"text":"dragActiveClass=\"drag-active\"\n            [dropData]=\"{event: event}\"\n            [touchStartLongPress]=\"{ delay: 300, delta: 30 }\""}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Attribute \"dragActiveClass\" has no corresponding i18n attribute. See more at https://angular.io/guide/i18n#mark-element-attributes-for-translations","line":17,"column":13,"nodeType":null,"messageId":"i18nAttribute","endLine":17,"endColumn":28,"fix":{"range":[529,529],"text":" i18n-dragActiveClass"}},{"ruleId":"@angular-eslint/template/no-inline-styles","severity":2,"message":"<a/> element should not have inline styles via style attribute. Please use classes instead.","line":19,"column":13,"nodeType":null,"messageId":"noInlineStyles","endLine":21,"endColumn":17}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":5,"fixableWarningCount":0,"source":"<div class=\"row\">\n  <div class=\"col-md-3\">\n    <div\n      class=\"card\"\n      mwlDroppable\n      (drop)=\"externalDrop($event.dropData.event)\"\n      dragOverClass=\"drag-over\"\n    >\n      <div class=\"card-body\">\n        <p *ngIf=\"externalEvents.length === 0\"><em>No events added</em></p>\n        <ul>\n          <li\n            *ngFor=\"let event of externalEvents\"\n            mwlDraggable\n            [dropData]=\"{event: event}\"\n            [touchStartLongPress]=\"{ delay: 300, delta: 30 }\"\n            dragActiveClass=\"drag-active\"\n          >\n            <a href=\"javascript:;\" [style.color]=\"event.color.primary\">\n              {{ event.title }}\n            </a>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"col-md-9\">\n    <mwl-demo-utils-calendar-header [(view)]=\"view\" [(viewDate)]=\"viewDate\">\n    </mwl-demo-utils-calendar-header>\n\n    <div [ngSwitch]=\"view\">\n      <mwl-calendar-month-view\n        *ngSwitchCase=\"CalendarView.Month\"\n        [viewDate]=\"viewDate\"\n        [events]=\"events\"\n        [activeDayIsOpen]=\"activeDayIsOpen\"\n        [refresh]=\"refresh\"\n        (eventTimesChanged)=\"eventDropped($event)\"\n      >\n      </mwl-calendar-month-view>\n      <mwl-calendar-week-view\n        *ngSwitchCase=\"CalendarView.Week\"\n        [viewDate]=\"viewDate\"\n        [events]=\"events\"\n        [refresh]=\"refresh\"\n        [snapDraggedEvents]=\"false\"\n        (eventTimesChanged)=\"eventDropped($event)\"\n      >\n      </mwl-calendar-week-view>\n      <mwl-calendar-day-view\n        *ngSwitchCase=\"CalendarView.Day\"\n        [viewDate]=\"viewDate\"\n        [events]=\"events\"\n        [refresh]=\"refresh\"\n        [snapDraggedEvents]=\"false\"\n        (eventTimesChanged)=\"eventDropped($event)\"\n      >\n      </mwl-calendar-day-view>\n    </div>\n  </div>\n</div>\n","usedDeprecatedRules":[{"ruleId":"@angular-eslint/template/accessibility-label-for","replacedBy":["accessibility-label-has-associated-control"]}]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/editable-deletable-events/component.ts","messages":[{"ruleId":"@angular-eslint/relative-url-prefix","severity":2,"message":"The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)","line":8,"column":16,"nodeType":"Literal","messageId":"relativeUrlPrefix","endLine":8,"endColumn":31}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: 'template.html',\n})\nexport class DemoComponent {\n  view: CalendarView = CalendarView.Month;\n\n  viewDate: Date = new Date();\n\n  events: CalendarEvent[] = [\n    {\n      title: 'Editable event',\n      color: colors.yellow,\n      start: new Date(),\n      actions: [\n        {\n          label: '<i class=\"fas fa-fw fa-pencil-alt\"></i>',\n          onClick: ({ event }: { event: CalendarEvent }): void => {\n            console.log('Edit event', event);\n          },\n        },\n      ],\n    },\n    {\n      title: 'Deletable event',\n      color: colors.blue,\n      start: new Date(),\n      actions: [\n        {\n          label: '<i class=\"fas fa-fw fa-trash-alt\"></i>',\n          onClick: ({ event }: { event: CalendarEvent }): void => {\n            this.events = this.events.filter((iEvent) => iEvent !== event);\n            console.log('Event deleted', event);\n          },\n        },\n      ],\n    },\n    {\n      title: 'Non editable and deletable event',\n      color: colors.red,\n      start: new Date(),\n    },\n  ];\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/exclude-days/component.ts","messages":[{"ruleId":"@angular-eslint/use-component-view-encapsulation","severity":2,"message":"Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect","line":12,"column":36,"nodeType":"Identifier","messageId":"useComponentViewEncapsulation","endLine":12,"endColumn":40,"suggestions":[{"messageId":"suggestRemoveViewEncapsulationNone","fix":{"range":[47,358],"text":",\n} from '@angular/core';\nimport { CalendarEvent, CalendarView, DAYS_OF_WEEK } from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  "},"desc":"Remove `ViewEncapsulation.None`"}]},{"ruleId":"@angular-eslint/relative-url-prefix","severity":2,"message":"The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)","line":13,"column":16,"nodeType":"Literal","messageId":"relativeUrlPrefix","endLine":13,"endColumn":31}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Component,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { CalendarEvent, CalendarView, DAYS_OF_WEEK } from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'template.html',\n})\nexport class DemoComponent {\n  view: CalendarView = CalendarView.Month;\n\n  viewDate: Date = new Date('2016-01-05');\n\n  events: CalendarEvent[] = [\n    {\n      start: new Date('2016-01-08'),\n      end: new Date('2016-01-10'),\n      title: 'One day excluded event',\n      color: colors.red,\n      allDay: true,\n    },\n    {\n      start: new Date('2016-01-01'),\n      end: new Date('2016-01-09'),\n      title: 'Multiple weeks event',\n      allDay: true,\n    },\n  ];\n\n  // exclude weekends\n  excludeDays: number[] = [0, 6];\n\n  weekStartsOn = DAYS_OF_WEEK.SUNDAY;\n\n  CalendarView = CalendarView;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/exclude-days/template.html","messages":[{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `[excludeDays]`, `[(viewDate)]` instead of `[(viewDate)]`, `[excludeDays]`","line":8,"column":9,"nodeType":null,"messageId":"attributesOrder","endLine":9,"endColumn":36,"fix":{"range":[188,247],"text":"[excludeDays]=\"excludeDays\"\n        [(viewDate)]=\"viewDate\""}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":11,"column":9,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":12,"endColumn":7,"fix":{"range":[93,93],"text":" i18n"}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":18,"column":9,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":19,"endColumn":7,"fix":{"range":[296,296],"text":" i18n"}},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `[excludeDays]`, `[(viewDate)]` instead of `[(viewDate)]`, `[excludeDays]`","line":24,"column":9,"nodeType":null,"messageId":"attributesOrder","endLine":25,"endColumn":36,"fix":{"range":[532,591],"text":"[excludeDays]=\"excludeDays\"\n        [(viewDate)]=\"viewDate\""}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":27,"column":9,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":28,"endColumn":7,"fix":{"range":[441,441],"text":" i18n"}},{"ruleId":"@angular-eslint/template/accessibility-interactive-supports-focus","severity":2,"message":"Elements with interaction handlers must be focusable.","line":39,"column":7,"nodeType":null,"messageId":"interactiveSupportsFocus","endLine":45,"endColumn":13},{"ruleId":"@angular-eslint/template/click-events-have-key-events","severity":2,"message":"click must be accompanied by either keyup, keydown or keypress event for accessibility.","line":39,"column":7,"nodeType":null,"messageId":"clickEventsHaveKeyEvents","endLine":45,"endColumn":13},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `[active]`, `(click)` instead of `(click)`, `[active]`","line":41,"column":9,"nodeType":null,"messageId":"attributesOrder","endLine":42,"endColumn":42,"fix":{"range":[896,973],"text":"[class.active]=\"view === 'month'\"\n        (click)=\"view = CalendarView.Month\""}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":44,"column":9,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":45,"endColumn":7,"fix":{"range":[855,855],"text":" i18n"}},{"ruleId":"@angular-eslint/template/accessibility-interactive-supports-focus","severity":2,"message":"Elements with interaction handlers must be focusable.","line":46,"column":7,"nodeType":null,"messageId":"interactiveSupportsFocus","endLine":52,"endColumn":13},{"ruleId":"@angular-eslint/template/click-events-have-key-events","severity":2,"message":"click must be accompanied by either keyup, keydown or keypress event for accessibility.","line":46,"column":7,"nodeType":null,"messageId":"clickEventsHaveKeyEvents","endLine":52,"endColumn":13},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `[active]`, `(click)` instead of `(click)`, `[active]`","line":48,"column":9,"nodeType":null,"messageId":"attributesOrder","endLine":49,"endColumn":41,"fix":{"range":[1060,1135],"text":"[class.active]=\"view === 'week'\"\n        (click)=\"view = CalendarView.Week\""}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":51,"column":9,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":52,"endColumn":7,"fix":{"range":[1019,1019],"text":" i18n"}},{"ruleId":"@angular-eslint/template/accessibility-interactive-supports-focus","severity":2,"message":"Elements with interaction handlers must be focusable.","line":53,"column":7,"nodeType":null,"messageId":"interactiveSupportsFocus","endLine":59,"endColumn":13},{"ruleId":"@angular-eslint/template/click-events-have-key-events","severity":2,"message":"click must be accompanied by either keyup, keydown or keypress event for accessibility.","line":53,"column":7,"nodeType":null,"messageId":"clickEventsHaveKeyEvents","endLine":59,"endColumn":13},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `[active]`, `(click)` instead of `(click)`, `[active]`","line":55,"column":9,"nodeType":null,"messageId":"attributesOrder","endLine":56,"endColumn":40,"fix":{"range":[1221,1294],"text":"[class.active]=\"view === 'day'\"\n        (click)=\"view = CalendarView.Day\""}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":58,"column":9,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":59,"endColumn":7,"fix":{"range":[1180,1180],"text":" i18n"}}],"suppressedMessages":[],"errorCount":17,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":11,"fixableWarningCount":0,"source":"<div class=\"row text-center\">\n  <div class=\"col-md-4\">\n    <div class=\"btn-group\">\n      <div\n        class=\"btn btn-primary\"\n        mwlCalendarPreviousView\n        [view]=\"view\"\n        [(viewDate)]=\"viewDate\"\n        [excludeDays]=\"excludeDays\"\n      >\n        Previous\n      </div>\n      <div\n        class=\"btn btn-outline-secondary\"\n        mwlCalendarToday\n        [(viewDate)]=\"viewDate\"\n      >\n        Today\n      </div>\n      <div\n        class=\"btn btn-primary\"\n        mwlCalendarNextView\n        [view]=\"view\"\n        [(viewDate)]=\"viewDate\"\n        [excludeDays]=\"excludeDays\"\n      >\n        Next\n      </div>\n    </div>\n  </div>\n  <div class=\"col-md-4\">\n    <h3>\n      {{ viewDate | calendarDate:(view +\n      'ViewTitle'):'en':weekStartsOn:excludeDays }}\n    </h3>\n  </div>\n  <div class=\"col-md-4\">\n    <div class=\"btn-group\">\n      <div\n        class=\"btn btn-primary\"\n        (click)=\"view = CalendarView.Month\"\n        [class.active]=\"view === 'month'\"\n      >\n        Month\n      </div>\n      <div\n        class=\"btn btn-primary\"\n        (click)=\"view = CalendarView.Week\"\n        [class.active]=\"view === 'week'\"\n      >\n        Week\n      </div>\n      <div\n        class=\"btn btn-primary\"\n        (click)=\"view = CalendarView.Day\"\n        [class.active]=\"view === 'day'\"\n      >\n        Day\n      </div>\n    </div>\n  </div>\n</div>\n<br />\n\n<div [ngSwitch]=\"view\">\n  <mwl-calendar-month-view\n    *ngSwitchCase=\"'month'\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n    [excludeDays]=\"excludeDays\"\n  >\n  </mwl-calendar-month-view>\n  <mwl-calendar-week-view\n    *ngSwitchCase=\"'week'\"\n    [excludeDays]=\"excludeDays\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n  >\n  </mwl-calendar-week-view>\n  <mwl-calendar-day-view\n    *ngSwitchCase=\"'day'\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n  >\n  </mwl-calendar-day-view>\n</div>\n","usedDeprecatedRules":[{"ruleId":"@angular-eslint/template/accessibility-label-for","replacedBy":["accessibility-label-has-associated-control"]}]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/extra-month-view-weeks/component.ts","messages":[{"ruleId":"@angular-eslint/use-injectable-provided-in","severity":2,"message":"The `providedIn` property is mandatory for `Injectables`","line":6,"column":1,"nodeType":"Decorator","messageId":"useInjectableProvidedIn","endLine":6,"endColumn":14,"suggestions":[{"messageId":"suggestInjector","fix":{"range":[293,293],"text":"{providedIn: 'any'}"},"data":{"injector":"any"},"desc":"Use `providedIn: 'any'`"},{"messageId":"suggestInjector","fix":{"range":[293,293],"text":"{providedIn: 'platform'}"},"data":{"injector":"platform"},"desc":"Use `providedIn: 'platform'`"},{"messageId":"suggestInjector","fix":{"range":[293,293],"text":"{providedIn: 'root'}"},"data":{"injector":"root"},"desc":"Use `providedIn: 'root'`"}]},{"ruleId":"@angular-eslint/relative-url-prefix","severity":2,"message":"The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)","line":18,"column":16,"nodeType":"Literal","messageId":"relativeUrlPrefix","endLine":18,"endColumn":31}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, ChangeDetectionStrategy, Injectable } from '@angular/core';\nimport { CalendarEvent, CalendarUtils } from 'angular-calendar';\nimport { subWeeks, startOfMonth, endOfMonth, addWeeks } from 'date-fns';\nimport { GetMonthViewArgs, MonthView } from 'calendar-utils';\n\n@Injectable()\nexport class MyCalendarUtils extends CalendarUtils {\n  getMonthView(args: GetMonthViewArgs): MonthView {\n    args.viewStart = subWeeks(startOfMonth(args.viewDate), 1);\n    args.viewEnd = addWeeks(endOfMonth(args.viewDate), 1);\n    return super.getMonthView(args);\n  }\n}\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: 'template.html',\n  providers: [\n    {\n      provide: CalendarUtils,\n      useClass: MyCalendarUtils,\n    },\n  ],\n})\nexport class DemoComponent {\n  viewDate: Date = new Date();\n\n  events: CalendarEvent[] = [];\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/group-similar-events/component.ts","messages":[{"ruleId":"@angular-eslint/component-max-inline-declarations","severity":2,"message":"`styles` has too many lines (7). Maximum allowed is 3 (https://angular.io/guide/styleguide#style-05-04)","line":18,"column":11,"nodeType":"ArrayExpression","messageId":"componentMaxInlineDeclarations","endLine":28,"endColumn":4}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport {\n  CalendarEvent,\n  CalendarMonthViewDay,\n  CalendarView,\n} from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\nimport { isSameMinute, startOfDay } from 'date-fns';\n\ninterface EventGroupMeta {\n  type: string;\n}\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: './template.html',\n  styles: [\n    `\n      .cell-totals {\n        margin: 5px;\n        text-align: center;\n      }\n      .badge {\n        margin-right: 5px;\n      }\n    `,\n  ],\n})\nexport class DemoComponent implements OnInit {\n  view: CalendarView = CalendarView.Month;\n\n  viewDate: Date = new Date();\n\n  events: CalendarEvent[] = [\n    {\n      title: 'Event 1',\n      color: colors.yellow,\n      start: startOfDay(new Date()),\n      meta: {\n        type: 'warning',\n      },\n    },\n    {\n      title: 'Event 2',\n      color: colors.yellow,\n      start: startOfDay(new Date()),\n      meta: {\n        type: 'warning',\n      },\n    },\n    {\n      title: 'Event 3',\n      color: colors.blue,\n      start: startOfDay(new Date()),\n      meta: {\n        type: 'info',\n      },\n    },\n    {\n      title: 'Event 4',\n      color: colors.red,\n      start: startOfDay(new Date()),\n      meta: {\n        type: 'danger',\n      },\n    },\n    {\n      title: 'Event 5',\n      color: colors.red,\n      start: startOfDay(new Date()),\n      meta: {\n        type: 'danger',\n      },\n    },\n  ];\n\n  groupedSimilarEvents: CalendarEvent[] = [];\n\n  ngOnInit() {\n    // group any events together that have the same type and dates\n    // use for when you have a lot of events on the week or day view at the same time\n    this.groupedSimilarEvents = [];\n    const processedEvents = new Set();\n    this.events.forEach((event) => {\n      if (processedEvents.has(event)) {\n        return;\n      }\n      const similarEvents = this.events.filter((otherEvent) => {\n        return (\n          otherEvent !== event &&\n          !processedEvents.has(otherEvent) &&\n          isSameMinute(otherEvent.start, event.start) &&\n          (isSameMinute(otherEvent.end, event.end) ||\n            (!otherEvent.end && !event.end)) &&\n          otherEvent.color.primary === event.color.primary &&\n          otherEvent.color.secondary === event.color.secondary\n        );\n      });\n      processedEvents.add(event);\n      similarEvents.forEach((otherEvent) => {\n        processedEvents.add(otherEvent);\n      });\n      if (similarEvents.length > 0) {\n        this.groupedSimilarEvents.push({\n          title: `${similarEvents.length + 1} events`,\n          color: event.color,\n          start: event.start,\n          end: event.end,\n          meta: {\n            groupedEvents: [event, ...similarEvents],\n          },\n        });\n      } else {\n        this.groupedSimilarEvents.push(event);\n      }\n    });\n  }\n\n  beforeMonthViewRender({\n    body,\n  }: {\n    body: CalendarMonthViewDay<EventGroupMeta>[];\n  }): void {\n    // month view has a different UX from the week and day view so we only really need to group by the type\n    body.forEach((cell) => {\n      const groups = {};\n      cell.events.forEach((event: CalendarEvent<EventGroupMeta>) => {\n        groups[event.meta.type] = groups[event.meta.type] || [];\n        groups[event.meta.type].push(event);\n      });\n      cell['eventGroups'] = Object.entries(groups);\n    });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/group-similar-events/module.ts","messages":[{"ruleId":"@angular-eslint/sort-ngmodule-metadata-arrays","severity":2,"message":"`NgModule` metadata arrays should be sorted in ASC alphabetical order","line":18,"column":5,"nodeType":"Identifier","messageId":"sortNgmoduleMetadataArrays","endLine":18,"endColumn":20,"fix":{"range":[587,624],"text":"DemoUtilsModule,\n    NgbPopoverModule"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { CalendarModule, DateAdapter } from 'angular-calendar';\nimport { DemoUtilsModule } from '../demo-utils/module';\nimport { DemoComponent } from './component';\nimport { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\nimport { NgbPopoverModule } from '@ng-bootstrap/ng-bootstrap';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CalendarModule.forRoot({\n      provide: DateAdapter,\n      useFactory: adapterFactory,\n    }),\n    NgbPopoverModule,\n    DemoUtilsModule,\n    RouterModule.forChild([{ path: '', component: DemoComponent }]),\n  ],\n  declarations: [DemoComponent],\n  exports: [DemoComponent],\n})\nexport class DemoModule {}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/group-similar-events/template.html","messages":[{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `*ngIf`, `class` instead of `class`, `*ngIf`","line":6,"column":11,"nodeType":null,"messageId":"attributesOrder","endLine":6,"endColumn":59,"fix":{"range":[215,263],"text":"*ngIf=\"day.badgeTotal > 0\" class=\"cal-day-badge\""}},{"ruleId":"@angular-eslint/template/use-track-by-function","severity":2,"message":"Missing trackBy function in ngFor directive","line":15,"column":7,"nodeType":null,"messageId":"useTrackByFunction","endLine":15,"endColumn":44},{"ruleId":"@angular-eslint/template/no-inline-styles","severity":2,"message":"<div/> element should not have inline styles via style attribute. Please use classes instead.","line":35,"column":5,"nodeType":null,"messageId":"noInlineStyles","endLine":43,"endColumn":11},{"ruleId":"@angular-eslint/template/use-track-by-function","severity":2,"message":"Missing trackBy function in ngFor directive","line":36,"column":12,"nodeType":null,"messageId":"useTrackByFunction","endLine":36,"endColumn":68},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `view`, `[event]` instead of `[event]`, `view`","line":40,"column":35,"nodeType":null,"messageId":"attributesOrder","endLine":40,"endColumn":62,"fix":{"range":[1228,1255],"text":"view=\"week\" [event]=\"event\""}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Attribute \"view\" has no corresponding i18n attribute. See more at https://angular.io/guide/i18n#mark-element-attributes-for-translations","line":40,"column":51,"nodeType":null,"messageId":"i18nAttribute","endLine":40,"endColumn":55,"fix":{"range":[1255,1255],"text":" i18n-view"}},{"ruleId":"@angular-eslint/template/no-inline-styles","severity":2,"message":"<div/> element should not have inline styles via style attribute. Please use classes instead.","line":46,"column":3,"nodeType":null,"messageId":"noInlineStyles","endLine":75,"endColumn":9},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `class`, `[ngbPopover]`, `[disablePopover]` instead of `[ngbPopover]`, `[disablePopover]`, `class`","line":47,"column":5,"nodeType":null,"messageId":"attributesOrder","endLine":49,"endColumn":22,"fix":{"range":[1346,1463],"text":"class=\"cal-event\"\n    [ngbPopover]=\"groupedEventsTemplate\"\n    [disablePopover]=\"!weekEvent.event.meta.groupedEvents\""}},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `view`, `[event]` instead of `[event]`, `view`","line":73,"column":31,"nodeType":null,"messageId":"attributesOrder","endLine":73,"endColumn":68,"fix":{"range":[2351,2388],"text":"view=\"week\" [event]=\"weekEvent.event\""}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Attribute \"view\" has no corresponding i18n attribute. See more at https://angular.io/guide/i18n#mark-element-attributes-for-translations","line":73,"column":57,"nodeType":null,"messageId":"i18nAttribute","endLine":73,"endColumn":61,"fix":{"range":[2388,2388],"text":" i18n-view"}},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `[activeDayIsOpen]`, `(beforeViewRender)` instead of `(beforeViewRender)`, `[activeDayIsOpen]`","line":84,"column":5,"nodeType":null,"messageId":"attributesOrder","endLine":85,"endColumn":29,"fix":{"range":[2618,2697],"text":"[activeDayIsOpen]=\"true\"\n    (beforeViewRender)=\"beforeMonthViewRender($event)\""}},{"ruleId":"@angular-eslint/template/cyclomatic-complexity","severity":2,"message":"The cyclomatic complexity 6 exceeds the defined limit 5","line":89,"column":6,"nodeType":null,"messageId":"cyclomaticComplexity","endLine":89,"endColumn":26},{"ruleId":"@angular-eslint/template/cyclomatic-complexity","severity":2,"message":"The cyclomatic complexity 7 exceeds the defined limit 5","line":96,"column":6,"nodeType":null,"messageId":"cyclomaticComplexity","endLine":96,"endColumn":25}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":7,"fixableWarningCount":0,"source":"<mwl-demo-utils-calendar-header [(view)]=\"view\" [(viewDate)]=\"viewDate\">\n</mwl-demo-utils-calendar-header>\n\n<ng-template #customCellTemplate let-day=\"day\" let-locale=\"locale\">\n  <div class=\"cal-cell-top\">\n    <span class=\"cal-day-badge\" *ngIf=\"day.badgeTotal > 0\"\n      >{{ day.badgeTotal }}</span\n    >\n    <span class=\"cal-day-number\"\n      >{{ day.date | calendarDate:'monthViewDayNumber':locale }}</span\n    >\n  </div>\n  <div class=\"cell-totals\">\n    <span\n      *ngFor=\"let group of day.eventGroups\"\n      class=\"badge text-bg-{{ group[0] }}\"\n    >\n      {{ group[1].length }}\n    </span>\n  </div>\n</ng-template>\n\n<ng-template\n  #customEventTemplate\n  let-weekEvent=\"weekEvent\"\n  let-tooltipPlacement=\"tooltipPlacement\"\n  let-eventClicked=\"eventClicked\"\n  let-tooltipTemplate=\"tooltipTemplate\"\n  let-tooltipAppendToBody=\"tooltipAppendToBody\"\n  let-tooltipDisabled=\"tooltipDisabled\"\n  let-tooltipDelay=\"tooltipDelay\"\n  let-column=\"column\"\n>\n  <ng-template #groupedEventsTemplate>\n    <div style=\"min-width: 150px\">\n      <div *ngFor=\"let event of weekEvent.event.meta.groupedEvents\">\n        <mwl-calendar-event-actions [event]=\"event\">\n        </mwl-calendar-event-actions>\n        &ngsp;\n        <mwl-calendar-event-title [event]=\"event\" view=\"week\">\n        </mwl-calendar-event-title>\n      </div>\n    </div>\n  </ng-template>\n\n  <div\n    [ngbPopover]=\"groupedEventsTemplate\"\n    [disablePopover]=\"!weekEvent.event.meta.groupedEvents\"\n    class=\"cal-event\"\n    [ngStyle]=\"{\n          color: weekEvent.event.color?.secondaryText,\n          backgroundColor: weekEvent.event.color?.secondary,\n          borderColor: weekEvent.event.color?.primary\n        }\"\n    [mwlCalendarTooltip]=\"\n          !tooltipDisabled && !weekEvent.event.meta.groupedEvents\n            ? (weekEvent.event.title\n              | calendarEventTitle: 'weekTooltip':weekEvent.event)\n            : ''\n        \"\n    [tooltipPlacement]=\"tooltipPlacement\"\n    [tooltipEvent]=\"weekEvent.event\"\n    [tooltipTemplate]=\"tooltipTemplate\"\n    [tooltipAppendToBody]=\"tooltipAppendToBody\"\n    [tooltipDelay]=\"tooltipDelay\"\n    (mwlClick)=\"eventClicked.emit()\"\n  >\n    <ng-container *ngIf=\"!weekEvent.event.meta.groupedEvents\">\n      <mwl-calendar-event-actions [event]=\"weekEvent.event\">\n      </mwl-calendar-event-actions>\n      &ngsp;\n    </ng-container>\n    <mwl-calendar-event-title [event]=\"weekEvent.event\" view=\"week\">\n    </mwl-calendar-event-title>\n  </div>\n</ng-template>\n\n<div [ngSwitch]=\"view\">\n  <mwl-calendar-month-view\n    *ngSwitchCase=\"'month'\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n    [cellTemplate]=\"customCellTemplate\"\n    (beforeViewRender)=\"beforeMonthViewRender($event)\"\n    [activeDayIsOpen]=\"true\"\n  >\n  </mwl-calendar-month-view>\n  <mwl-calendar-week-view\n    *ngSwitchCase=\"'week'\"\n    [viewDate]=\"viewDate\"\n    [events]=\"groupedSimilarEvents\"\n    [eventTemplate]=\"customEventTemplate\"\n  >\n  </mwl-calendar-week-view>\n  <mwl-calendar-day-view\n    *ngSwitchCase=\"'day'\"\n    [viewDate]=\"viewDate\"\n    [events]=\"groupedSimilarEvents\"\n    [eventTemplate]=\"customEventTemplate\"\n  >\n  </mwl-calendar-day-view>\n</div>\n","usedDeprecatedRules":[{"ruleId":"@angular-eslint/template/accessibility-label-for","replacedBy":["accessibility-label-has-associated-control"]}]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/i18n/component.ts","messages":[{"ruleId":"@angular-eslint/relative-url-prefix","severity":2,"message":"The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)","line":13,"column":16,"nodeType":"Literal","messageId":"relativeUrlPrefix","endLine":13,"endColumn":31}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  CalendarDateFormatter,\n  CalendarEvent,\n  CalendarView,\n  DAYS_OF_WEEK,\n} from 'angular-calendar';\nimport { CustomDateFormatter } from './custom-date-formatter.provider';\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: 'template.html',\n  providers: [\n    {\n      provide: CalendarDateFormatter,\n      useClass: CustomDateFormatter,\n    },\n  ],\n})\nexport class DemoComponent {\n  view: CalendarView = CalendarView.Month;\n\n  viewDate = new Date();\n\n  events: CalendarEvent[] = [];\n\n  locale: string = 'fr';\n\n  weekStartsOn: number = DAYS_OF_WEEK.MONDAY;\n\n  weekendDays: number[] = [DAYS_OF_WEEK.FRIDAY, DAYS_OF_WEEK.SATURDAY];\n\n  CalendarView = CalendarView;\n\n  setView(view: CalendarView) {\n    this.view = view;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/i18n/custom-date-formatter.provider.ts","messages":[{"ruleId":"@angular-eslint/use-injectable-provided-in","severity":2,"message":"The `providedIn` property is mandatory for `Injectables`","line":5,"column":1,"nodeType":"Decorator","messageId":"useInjectableProvidedIn","endLine":5,"endColumn":14,"suggestions":[{"messageId":"suggestInjector","fix":{"range":[182,182],"text":"{providedIn: 'any'}"},"data":{"injector":"any"},"desc":"Use `providedIn: 'any'`"},{"messageId":"suggestInjector","fix":{"range":[182,182],"text":"{providedIn: 'platform'}"},"data":{"injector":"platform"},"desc":"Use `providedIn: 'platform'`"},{"messageId":"suggestInjector","fix":{"range":[182,182],"text":"{providedIn: 'root'}"},"data":{"injector":"root"},"desc":"Use `providedIn: 'root'`"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CalendarDateFormatter, DateFormatterParams } from 'angular-calendar';\nimport { formatDate } from '@angular/common';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class CustomDateFormatter extends CalendarDateFormatter {\n  // you can override any of the methods defined in the parent class\n\n  public dayViewHour({ date, locale }: DateFormatterParams): string {\n    return formatDate(date, 'HH:mm', locale);\n  }\n\n  public weekViewHour({ date, locale }: DateFormatterParams): string {\n    return this.dayViewHour({ date, locale });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/i18n/template.html","messages":[{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":10,"column":9,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":11,"endColumn":7,"fix":{"range":[93,93],"text":" i18n"}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":17,"column":9,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":18,"endColumn":7,"fix":{"range":[260,260],"text":" i18n"}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":25,"column":9,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":26,"endColumn":7,"fix":{"range":[405,405],"text":" i18n"}},{"ruleId":"@angular-eslint/template/accessibility-interactive-supports-focus","severity":2,"message":"Elements with interaction handlers must be focusable.","line":36,"column":7,"nodeType":null,"messageId":"interactiveSupportsFocus","endLine":42,"endColumn":13},{"ruleId":"@angular-eslint/template/click-events-have-key-events","severity":2,"message":"click must be accompanied by either keyup, keydown or keypress event for accessibility.","line":36,"column":7,"nodeType":null,"messageId":"clickEventsHaveKeyEvents","endLine":42,"endColumn":13},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `[active]`, `(click)` instead of `(click)`, `[active]`","line":38,"column":9,"nodeType":null,"messageId":"attributesOrder","endLine":39,"endColumn":53,"fix":{"range":[808,898],"text":"[class.active]=\"view === CalendarView.Month\"\n        (click)=\"setView(CalendarView.Month)\""}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":41,"column":9,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":42,"endColumn":7,"fix":{"range":[767,767],"text":" i18n"}},{"ruleId":"@angular-eslint/template/accessibility-interactive-supports-focus","severity":2,"message":"Elements with interaction handlers must be focusable.","line":43,"column":7,"nodeType":null,"messageId":"interactiveSupportsFocus","endLine":49,"endColumn":13},{"ruleId":"@angular-eslint/template/click-events-have-key-events","severity":2,"message":"click must be accompanied by either keyup, keydown or keypress event for accessibility.","line":43,"column":7,"nodeType":null,"messageId":"clickEventsHaveKeyEvents","endLine":49,"endColumn":13},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `[active]`, `(click)` instead of `(click)`, `[active]`","line":45,"column":9,"nodeType":null,"messageId":"attributesOrder","endLine":46,"endColumn":52,"fix":{"range":[985,1073],"text":"[class.active]=\"view === CalendarView.Week\"\n        (click)=\"setView(CalendarView.Week)\""}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":48,"column":9,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":49,"endColumn":7,"fix":{"range":[944,944],"text":" i18n"}},{"ruleId":"@angular-eslint/template/accessibility-interactive-supports-focus","severity":2,"message":"Elements with interaction handlers must be focusable.","line":50,"column":7,"nodeType":null,"messageId":"interactiveSupportsFocus","endLine":56,"endColumn":13},{"ruleId":"@angular-eslint/template/click-events-have-key-events","severity":2,"message":"click must be accompanied by either keyup, keydown or keypress event for accessibility.","line":50,"column":7,"nodeType":null,"messageId":"clickEventsHaveKeyEvents","endLine":56,"endColumn":13},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `[active]`, `(click)` instead of `(click)`, `[active]`","line":52,"column":9,"nodeType":null,"messageId":"attributesOrder","endLine":53,"endColumn":51,"fix":{"range":[1159,1245],"text":"[class.active]=\"view === CalendarView.Day\"\n        (click)=\"setView(CalendarView.Day)\""}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":55,"column":9,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":56,"endColumn":7,"fix":{"range":[1118,1118],"text":" i18n"}}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":9,"fixableWarningCount":0,"source":"<div class=\"row text-center\">\n  <div class=\"col-md-4\">\n    <div class=\"btn-group\">\n      <div\n        class=\"btn btn-primary\"\n        mwlCalendarPreviousView\n        [view]=\"view\"\n        [(viewDate)]=\"viewDate\"\n      >\n        Previous\n      </div>\n      <div\n        class=\"btn btn-outline-secondary\"\n        mwlCalendarToday\n        [(viewDate)]=\"viewDate\"\n      >\n        Today\n      </div>\n      <div\n        class=\"btn btn-primary\"\n        mwlCalendarNextView\n        [view]=\"view\"\n        [(viewDate)]=\"viewDate\"\n      >\n        Next\n      </div>\n    </div>\n  </div>\n  <div class=\"col-md-4\">\n    <h3>\n      {{ viewDate | calendarDate:(view + 'ViewTitle'):locale:weekStartsOn }}\n    </h3>\n  </div>\n  <div class=\"col-md-4\">\n    <div class=\"btn-group\">\n      <div\n        class=\"btn btn-primary\"\n        (click)=\"setView(CalendarView.Month)\"\n        [class.active]=\"view === CalendarView.Month\"\n      >\n        Month\n      </div>\n      <div\n        class=\"btn btn-primary\"\n        (click)=\"setView(CalendarView.Week)\"\n        [class.active]=\"view === CalendarView.Week\"\n      >\n        Week\n      </div>\n      <div\n        class=\"btn btn-primary\"\n        (click)=\"setView(CalendarView.Day)\"\n        [class.active]=\"view === CalendarView.Day\"\n      >\n        Day\n      </div>\n    </div>\n  </div>\n</div>\n<br />\n\n<div [ngSwitch]=\"view\">\n  <mwl-calendar-month-view\n    *ngSwitchCase=\"'month'\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n    [locale]=\"locale\"\n    [weekStartsOn]=\"weekStartsOn\"\n    [weekendDays]=\"weekendDays\"\n  >\n  </mwl-calendar-month-view>\n  <mwl-calendar-week-view\n    *ngSwitchCase=\"'week'\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n    [locale]=\"locale\"\n    [weekStartsOn]=\"weekStartsOn\"\n    [weekendDays]=\"weekendDays\"\n  >\n  </mwl-calendar-week-view>\n  <mwl-calendar-day-view\n    *ngSwitchCase=\"'day'\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n    [locale]=\"locale\"\n  >\n  </mwl-calendar-day-view>\n</div>\n","usedDeprecatedRules":[{"ruleId":"@angular-eslint/template/accessibility-label-for","replacedBy":["accessibility-label-has-associated-control"]}]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/kitchen-sink/component.ts","messages":[{"ruleId":"@angular-eslint/component-max-inline-declarations","severity":2,"message":"`styles` has too many lines (8). Maximum allowed is 3 (https://angular.io/guide/styleguide#style-05-04)","line":45,"column":11,"nodeType":"ArrayExpression","messageId":"componentMaxInlineDeclarations","endLine":56,"endColumn":4},{"ruleId":"@angular-eslint/relative-url-prefix","severity":2,"message":"The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)","line":57,"column":16,"nodeType":"Literal","messageId":"relativeUrlPrefix","endLine":57,"endColumn":31}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Component,\n  ChangeDetectionStrategy,\n  ViewChild,\n  TemplateRef,\n} from '@angular/core';\nimport {\n  startOfDay,\n  endOfDay,\n  subDays,\n  addDays,\n  endOfMonth,\n  isSameDay,\n  isSameMonth,\n  addHours,\n} from 'date-fns';\nimport { Subject } from 'rxjs';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport {\n  CalendarEvent,\n  CalendarEventAction,\n  CalendarEventTimesChangedEvent,\n  CalendarView,\n} from 'angular-calendar';\nimport { EventColor } from 'calendar-utils';\n\nconst colors: Record<string, EventColor> = {\n  red: {\n    primary: '#ad2121',\n    secondary: '#FAE3E3',\n  },\n  blue: {\n    primary: '#1e90ff',\n    secondary: '#D1E8FF',\n  },\n  yellow: {\n    primary: '#e3bc08',\n    secondary: '#FDF1BA',\n  },\n};\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styles: [\n    `\n      h3 {\n        margin: 0 0 10px;\n      }\n\n      pre {\n        background-color: #f5f5f5;\n        padding: 15px;\n      }\n    `,\n  ],\n  templateUrl: 'template.html',\n})\nexport class DemoComponent {\n  @ViewChild('modalContent', { static: true }) modalContent: TemplateRef<any>;\n\n  view: CalendarView = CalendarView.Month;\n\n  CalendarView = CalendarView;\n\n  viewDate: Date = new Date();\n\n  modalData: {\n    action: string;\n    event: CalendarEvent;\n  };\n\n  actions: CalendarEventAction[] = [\n    {\n      label: '<i class=\"fas fa-fw fa-pencil-alt\"></i>',\n      a11yLabel: 'Edit',\n      onClick: ({ event }: { event: CalendarEvent }): void => {\n        this.handleEvent('Edited', event);\n      },\n    },\n    {\n      label: '<i class=\"fas fa-fw fa-trash-alt\"></i>',\n      a11yLabel: 'Delete',\n      onClick: ({ event }: { event: CalendarEvent }): void => {\n        this.events = this.events.filter((iEvent) => iEvent !== event);\n        this.handleEvent('Deleted', event);\n      },\n    },\n  ];\n\n  refresh = new Subject<void>();\n\n  events: CalendarEvent[] = [\n    {\n      start: subDays(startOfDay(new Date()), 1),\n      end: addDays(new Date(), 1),\n      title: 'A 3 day event',\n      color: { ...colors.red },\n      actions: this.actions,\n      allDay: true,\n      resizable: {\n        beforeStart: true,\n        afterEnd: true,\n      },\n      draggable: true,\n    },\n    {\n      start: startOfDay(new Date()),\n      title: 'An event with no end date',\n      color: { ...colors.yellow },\n      actions: this.actions,\n    },\n    {\n      start: subDays(endOfMonth(new Date()), 3),\n      end: addDays(endOfMonth(new Date()), 3),\n      title: 'A long event that spans 2 months',\n      color: { ...colors.blue },\n      allDay: true,\n    },\n    {\n      start: addHours(startOfDay(new Date()), 2),\n      end: addHours(new Date(), 2),\n      title: 'A draggable and resizable event',\n      color: { ...colors.yellow },\n      actions: this.actions,\n      resizable: {\n        beforeStart: true,\n        afterEnd: true,\n      },\n      draggable: true,\n    },\n  ];\n\n  activeDayIsOpen: boolean = true;\n\n  constructor(private modal: NgbModal) {}\n\n  dayClicked({ date, events }: { date: Date; events: CalendarEvent[] }): void {\n    if (isSameMonth(date, this.viewDate)) {\n      if (\n        (isSameDay(this.viewDate, date) && this.activeDayIsOpen === true) ||\n        events.length === 0\n      ) {\n        this.activeDayIsOpen = false;\n      } else {\n        this.activeDayIsOpen = true;\n      }\n      this.viewDate = date;\n    }\n  }\n\n  eventTimesChanged({\n    event,\n    newStart,\n    newEnd,\n  }: CalendarEventTimesChangedEvent): void {\n    this.events = this.events.map((iEvent) => {\n      if (iEvent === event) {\n        return {\n          ...event,\n          start: newStart,\n          end: newEnd,\n        };\n      }\n      return iEvent;\n    });\n    this.handleEvent('Dropped or resized', event);\n  }\n\n  handleEvent(action: string, event: CalendarEvent): void {\n    this.modalData = { event, action };\n    this.modal.open(this.modalContent, { size: 'lg' });\n  }\n\n  addEvent(): void {\n    this.events = [\n      ...this.events,\n      {\n        title: 'New event',\n        start: startOfDay(new Date()),\n        end: endOfDay(new Date()),\n        color: colors.red,\n        draggable: true,\n        resizable: {\n          beforeStart: true,\n          afterEnd: true,\n        },\n      },\n    ];\n  }\n\n  deleteEvent(eventToDelete: CalendarEvent) {\n    this.events = this.events.filter((event) => event !== eventToDelete);\n  }\n\n  setView(view: CalendarView) {\n    this.view = view;\n  }\n\n  closeOpenMonthViewDay() {\n    this.activeDayIsOpen = false;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/kitchen-sink/template.html","messages":[{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":11,"column":9,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":12,"endColumn":7,"fix":{"range":[93,93],"text":" i18n"}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":18,"column":9,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":19,"endColumn":7,"fix":{"range":[311,311],"text":" i18n"}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":27,"column":9,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":28,"endColumn":7,"fix":{"range":[456,456],"text":" i18n"}},{"ruleId":"@angular-eslint/template/accessibility-interactive-supports-focus","severity":2,"message":"Elements with interaction handlers must be focusable.","line":36,"column":7,"nodeType":null,"messageId":"interactiveSupportsFocus","endLine":42,"endColumn":13},{"ruleId":"@angular-eslint/template/click-events-have-key-events","severity":2,"message":"click must be accompanied by either keyup, keydown or keypress event for accessibility.","line":36,"column":7,"nodeType":null,"messageId":"clickEventsHaveKeyEvents","endLine":42,"endColumn":13},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `[active]`, `(click)` instead of `(click)`, `[active]`","line":38,"column":9,"nodeType":null,"messageId":"attributesOrder","endLine":39,"endColumn":53,"fix":{"range":[883,973],"text":"[class.active]=\"view === CalendarView.Month\"\n        (click)=\"setView(CalendarView.Month)\""}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":41,"column":9,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":42,"endColumn":7,"fix":{"range":[842,842],"text":" i18n"}},{"ruleId":"@angular-eslint/template/accessibility-interactive-supports-focus","severity":2,"message":"Elements with interaction handlers must be focusable.","line":43,"column":7,"nodeType":null,"messageId":"interactiveSupportsFocus","endLine":49,"endColumn":13},{"ruleId":"@angular-eslint/template/click-events-have-key-events","severity":2,"message":"click must be accompanied by either keyup, keydown or keypress event for accessibility.","line":43,"column":7,"nodeType":null,"messageId":"clickEventsHaveKeyEvents","endLine":49,"endColumn":13},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `[active]`, `(click)` instead of `(click)`, `[active]`","line":45,"column":9,"nodeType":null,"messageId":"attributesOrder","endLine":46,"endColumn":52,"fix":{"range":[1060,1148],"text":"[class.active]=\"view === CalendarView.Week\"\n        (click)=\"setView(CalendarView.Week)\""}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":48,"column":9,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":49,"endColumn":7,"fix":{"range":[1019,1019],"text":" i18n"}},{"ruleId":"@angular-eslint/template/accessibility-interactive-supports-focus","severity":2,"message":"Elements with interaction handlers must be focusable.","line":50,"column":7,"nodeType":null,"messageId":"interactiveSupportsFocus","endLine":56,"endColumn":13},{"ruleId":"@angular-eslint/template/click-events-have-key-events","severity":2,"message":"click must be accompanied by either keyup, keydown or keypress event for accessibility.","line":50,"column":7,"nodeType":null,"messageId":"clickEventsHaveKeyEvents","endLine":56,"endColumn":13},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `[active]`, `(click)` instead of `(click)`, `[active]`","line":52,"column":9,"nodeType":null,"messageId":"attributesOrder","endLine":53,"endColumn":51,"fix":{"range":[1234,1320],"text":"[class.active]=\"view === CalendarView.Day\"\n        (click)=\"setView(CalendarView.Day)\""}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":55,"column":9,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":56,"endColumn":7,"fix":{"range":[1193,1193],"text":" i18n"}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":98,"column":3,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":99,"endColumn":3,"suggestions":[{"messageId":"suggestAddI18nAttribute","fix":{"range":[2457,2457],"text":" i18n"},"desc":"Add the `i18n` attribute"}]},{"ruleId":"@angular-eslint/template/button-has-type","severity":2,"message":"Type for <button> is missing","line":99,"column":3,"nodeType":null,"messageId":"missingType","endLine":101,"endColumn":12},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":100,"column":5,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":101,"endColumn":3,"fix":{"range":[2482,2482],"text":" i18n"}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":109,"column":13,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":109,"endColumn":18,"fix":{"range":[2705,2705],"text":" i18n"}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":110,"column":13,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":110,"endColumn":26,"fix":{"range":[2728,2728],"text":" i18n"}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":111,"column":13,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":111,"endColumn":35,"fix":{"range":[2759,2759],"text":" i18n"}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":112,"column":13,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":112,"endColumn":22,"fix":{"range":[2799,2799],"text":" i18n"}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":113,"column":13,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":113,"endColumn":20,"fix":{"range":[2826,2826],"text":" i18n"}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":114,"column":13,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":114,"endColumn":19,"fix":{"range":[2851,2851],"text":" i18n"}},{"ruleId":"@angular-eslint/template/use-track-by-function","severity":2,"message":"Missing trackBy function in ngFor directive","line":119,"column":11,"nodeType":null,"messageId":"useTrackByFunction","endLine":119,"endColumn":39},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `dateFormat`, `altFormat`, `placeholder`, `[altInput]`, `[convertModelValue]`, `[enableTime]`, `[(ngModel)]`, `(ngModelChange)` instead of `[(ngModel)]`, `(ngModelChange)`, `[altInput]`, `[convertModelValue]`, `[enableTime]`, `dateFormat`, `altFormat`, `placeholder`","line":153,"column":13,"nodeType":null,"messageId":"attributesOrder","endLine":160,"endColumn":34,"fix":{"range":[3810,4085],"text":"dateFormat=\"Y-m-dTH:i\"\n            altFormat=\"F j, Y H:i\"\n            placeholder=\"Not set\"\n            [altInput]=\"true\"\n            [convertModelValue]=\"true\"\n            [enableTime]=\"true\"\n            [(ngModel)]=\"event.start\"\n            (ngModelChange)=\"refresh.next()\""}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Attribute \"dateFormat\" has no corresponding i18n attribute. See more at https://angular.io/guide/i18n#mark-element-attributes-for-translations","line":158,"column":13,"nodeType":null,"messageId":"i18nAttribute","endLine":158,"endColumn":23,"fix":{"range":[4016,4016],"text":" i18n-dateFormat"}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Attribute \"altFormat\" has no corresponding i18n attribute. See more at https://angular.io/guide/i18n#mark-element-attributes-for-translations","line":159,"column":13,"nodeType":null,"messageId":"i18nAttribute","endLine":159,"endColumn":22,"fix":{"range":[4051,4051],"text":" i18n-altFormat"}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Attribute \"placeholder\" has no corresponding i18n attribute. See more at https://angular.io/guide/i18n#mark-element-attributes-for-translations","line":160,"column":13,"nodeType":null,"messageId":"i18nAttribute","endLine":160,"endColumn":24,"fix":{"range":[4085,4085],"text":" i18n-placeholder"}},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `dateFormat`, `altFormat`, `placeholder`, `[altInput]`, `[convertModelValue]`, `[enableTime]`, `[(ngModel)]`, `(ngModelChange)` instead of `[(ngModel)]`, `(ngModelChange)`, `[altInput]`, `[convertModelValue]`, `[enableTime]`, `dateFormat`, `altFormat`, `placeholder`","line":168,"column":13,"nodeType":null,"messageId":"attributesOrder","endLine":175,"endColumn":34,"fix":{"range":[4237,4510],"text":"dateFormat=\"Y-m-dTH:i\"\n            altFormat=\"F j, Y H:i\"\n            placeholder=\"Not set\"\n            [altInput]=\"true\"\n            [convertModelValue]=\"true\"\n            [enableTime]=\"true\"\n            [(ngModel)]=\"event.end\"\n            (ngModelChange)=\"refresh.next()\""}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Attribute \"dateFormat\" has no corresponding i18n attribute. See more at https://angular.io/guide/i18n#mark-element-attributes-for-translations","line":173,"column":13,"nodeType":null,"messageId":"i18nAttribute","endLine":173,"endColumn":23,"fix":{"range":[4441,4441],"text":" i18n-dateFormat"}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Attribute \"altFormat\" has no corresponding i18n attribute. See more at https://angular.io/guide/i18n#mark-element-attributes-for-translations","line":174,"column":13,"nodeType":null,"messageId":"i18nAttribute","endLine":174,"endColumn":22,"fix":{"range":[4476,4476],"text":" i18n-altFormat"}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Attribute \"placeholder\" has no corresponding i18n attribute. See more at https://angular.io/guide/i18n#mark-element-attributes-for-translations","line":175,"column":13,"nodeType":null,"messageId":"i18nAttribute","endLine":175,"endColumn":24,"fix":{"range":[4510,4510],"text":" i18n-placeholder"}},{"ruleId":"@angular-eslint/template/button-has-type","severity":2,"message":"Type for <button> is missing","line":179,"column":11,"nodeType":null,"messageId":"missingType","endLine":181,"endColumn":20},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":180,"column":13,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":181,"endColumn":11,"fix":{"range":[4568,4568],"text":" i18n"}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":190,"column":29,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":190,"endColumn":50,"fix":{"range":[4801,4801],"text":" i18n"}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":197,"column":7,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":198,"endColumn":7,"suggestions":[{"messageId":"suggestAddI18nAttribute","fix":{"range":[5012,5012],"text":" i18n"},"desc":"Add the `i18n` attribute"}]},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":201,"column":7,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":202,"endColumn":7,"suggestions":[{"messageId":"suggestAddI18nAttribute","fix":{"range":[5088,5088],"text":" i18n"},"desc":"Add the `i18n` attribute"}]},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":207,"column":7,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":208,"endColumn":5,"fix":{"range":[5210,5210],"text":" i18n"}}],"suppressedMessages":[],"errorCount":39,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":27,"fixableWarningCount":0,"source":"<div class=\"row text-center\">\n  <div class=\"col-md-4\">\n    <div class=\"btn-group\">\n      <div\n        class=\"btn btn-primary\"\n        mwlCalendarPreviousView\n        [view]=\"view\"\n        [(viewDate)]=\"viewDate\"\n        (viewDateChange)=\"closeOpenMonthViewDay()\"\n      >\n        Previous\n      </div>\n      <div\n        class=\"btn btn-outline-secondary\"\n        mwlCalendarToday\n        [(viewDate)]=\"viewDate\"\n      >\n        Today\n      </div>\n      <div\n        class=\"btn btn-primary\"\n        mwlCalendarNextView\n        [view]=\"view\"\n        [(viewDate)]=\"viewDate\"\n        (viewDateChange)=\"closeOpenMonthViewDay()\"\n      >\n        Next\n      </div>\n    </div>\n  </div>\n  <div class=\"col-md-4\">\n    <h3>{{ viewDate | calendarDate:(view + 'ViewTitle'):'en' }}</h3>\n  </div>\n  <div class=\"col-md-4\">\n    <div class=\"btn-group\">\n      <div\n        class=\"btn btn-primary\"\n        (click)=\"setView(CalendarView.Month)\"\n        [class.active]=\"view === CalendarView.Month\"\n      >\n        Month\n      </div>\n      <div\n        class=\"btn btn-primary\"\n        (click)=\"setView(CalendarView.Week)\"\n        [class.active]=\"view === CalendarView.Week\"\n      >\n        Week\n      </div>\n      <div\n        class=\"btn btn-primary\"\n        (click)=\"setView(CalendarView.Day)\"\n        [class.active]=\"view === CalendarView.Day\"\n      >\n        Day\n      </div>\n    </div>\n  </div>\n</div>\n<br />\n<div [ngSwitch]=\"view\">\n  <mwl-calendar-month-view\n    *ngSwitchCase=\"CalendarView.Month\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n    [refresh]=\"refresh\"\n    [activeDayIsOpen]=\"activeDayIsOpen\"\n    (dayClicked)=\"dayClicked($event.day)\"\n    (eventClicked)=\"handleEvent('Clicked', $event.event)\"\n    (eventTimesChanged)=\"eventTimesChanged($event)\"\n  >\n  </mwl-calendar-month-view>\n  <mwl-calendar-week-view\n    *ngSwitchCase=\"CalendarView.Week\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n    [refresh]=\"refresh\"\n    (eventClicked)=\"handleEvent('Clicked', $event.event)\"\n    (eventTimesChanged)=\"eventTimesChanged($event)\"\n  >\n  </mwl-calendar-week-view>\n  <mwl-calendar-day-view\n    *ngSwitchCase=\"CalendarView.Day\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n    [refresh]=\"refresh\"\n    (eventClicked)=\"handleEvent('Clicked', $event.event)\"\n    (eventTimesChanged)=\"eventTimesChanged($event)\"\n  >\n  </mwl-calendar-day-view>\n</div>\n\n<!-- Everything you see below is just for the demo, you don't need to include it in your app -->\n\n<br /><br /><br />\n\n<h3>\n  Edit events\n  <button class=\"btn btn-primary float-end\" (click)=\"addEvent()\">\n    Add new\n  </button>\n  <div class=\"clearfix\"></div>\n</h3>\n\n<div class=\"table-responsive\">\n  <table class=\"table table-bordered\">\n    <thead>\n      <tr>\n        <th>Title</th>\n        <th>Primary color</th>\n        <th>Secondary + text color</th>\n        <th>Starts at</th>\n        <th>Ends at</th>\n        <th>Remove</th>\n      </tr>\n    </thead>\n\n    <tbody>\n      <tr *ngFor=\"let event of events\">\n        <td>\n          <input\n            type=\"text\"\n            class=\"form-control\"\n            [(ngModel)]=\"event.title\"\n            (keyup)=\"refresh.next()\"\n          />\n        </td>\n        <td>\n          <input\n            type=\"color\"\n            [(ngModel)]=\"event.color.primary\"\n            (change)=\"refresh.next()\"\n          />\n        </td>\n        <td>\n          <input\n            type=\"color\"\n            [(ngModel)]=\"event.color.secondary\"\n            (change)=\"refresh.next()\"\n          />\n          <input\n            type=\"color\"\n            [ngModel]=\"event.color.secondaryText ?? '#1e90ff'\"\n            (ngModelChange)=\"event.color.secondaryText = $event\"\n            (change)=\"refresh.next()\"\n          />\n        </td>\n        <td>\n          <input\n            class=\"form-control\"\n            type=\"text\"\n            mwlFlatpickr\n            [(ngModel)]=\"event.start\"\n            (ngModelChange)=\"refresh.next()\"\n            [altInput]=\"true\"\n            [convertModelValue]=\"true\"\n            [enableTime]=\"true\"\n            dateFormat=\"Y-m-dTH:i\"\n            altFormat=\"F j, Y H:i\"\n            placeholder=\"Not set\"\n          />\n        </td>\n        <td>\n          <input\n            class=\"form-control\"\n            type=\"text\"\n            mwlFlatpickr\n            [(ngModel)]=\"event.end\"\n            (ngModelChange)=\"refresh.next()\"\n            [altInput]=\"true\"\n            [convertModelValue]=\"true\"\n            [enableTime]=\"true\"\n            dateFormat=\"Y-m-dTH:i\"\n            altFormat=\"F j, Y H:i\"\n            placeholder=\"Not set\"\n          />\n        </td>\n        <td>\n          <button class=\"btn btn-danger\" (click)=\"deleteEvent(event)\">\n            Delete\n          </button>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n\n<ng-template #modalContent let-close=\"close\">\n  <div class=\"modal-header\">\n    <h5 class=\"modal-title\">Event action occurred</h5>\n    <button type=\"button\" class=\"close\" (click)=\"close()\">\n      <span aria-hidden=\"true\">&times;</span>\n    </button>\n  </div>\n  <div class=\"modal-body\">\n    <div>\n      Action:\n      <pre>{{ modalData?.action }}</pre>\n    </div>\n    <div>\n      Event:\n      <pre>{{ modalData?.event | json }}</pre>\n    </div>\n  </div>\n  <div class=\"modal-footer\">\n    <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"close()\">\n      OK\n    </button>\n  </div>\n</ng-template>\n","usedDeprecatedRules":[{"ruleId":"@angular-eslint/template/accessibility-label-for","replacedBy":["accessibility-label-has-associated-control"]}]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/min-max-date/component.ts","messages":[{"ruleId":"@angular-eslint/relative-url-prefix","severity":2,"message":"The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)","line":63,"column":16,"nodeType":"Literal","messageId":"relativeUrlPrefix","endLine":63,"endColumn":31},{"ruleId":"@angular-eslint/component-max-inline-declarations","severity":2,"message":"`styles` has too many lines (8). Maximum allowed is 3 (https://angular.io/guide/styleguide#style-05-04)","line":64,"column":11,"nodeType":"ArrayExpression","messageId":"componentMaxInlineDeclarations","endLine":75,"endColumn":4},{"ruleId":"@angular-eslint/use-component-view-encapsulation","severity":2,"message":"Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect","line":77,"column":36,"nodeType":"Identifier","messageId":"useComponentViewEncapsulation","endLine":77,"endColumn":40,"suggestions":[{"messageId":"suggestRemoveViewEncapsulationNone","fix":{"range":[47,1584],"text":",\n} from '@angular/core';\nimport {\n  CalendarEvent,\n  CalendarMonthViewDay,\n  CalendarView,\n} from 'angular-calendar';\nimport {\n  subMonths,\n  addMonths,\n  addDays,\n  addWeeks,\n  subDays,\n  subWeeks,\n  startOfMonth,\n  endOfMonth,\n  startOfWeek,\n  endOfWeek,\n  startOfDay,\n  endOfDay,\n} from 'date-fns';\n\ntype CalendarPeriod = 'day' | 'week' | 'month';\n\nfunction addPeriod(period: CalendarPeriod, date: Date, amount: number): Date {\n  return {\n    day: addDays,\n    week: addWeeks,\n    month: addMonths,\n  }[period](date, amount);\n}\n\nfunction subPeriod(period: CalendarPeriod, date: Date, amount: number): Date {\n  return {\n    day: subDays,\n    week: subWeeks,\n    month: subMonths,\n  }[period](date, amount);\n}\n\nfunction startOfPeriod(period: CalendarPeriod, date: Date): Date {\n  return {\n    day: startOfDay,\n    week: startOfWeek,\n    month: startOfMonth,\n  }[period](date);\n}\n\nfunction endOfPeriod(period: CalendarPeriod, date: Date): Date {\n  return {\n    day: endOfDay,\n    week: endOfWeek,\n    month: endOfMonth,\n  }[period](date);\n}\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: 'template.html',\n  styles: [\n    `\n      .cal-disabled {\n        background-color: #eee;\n        pointer-events: none;\n      }\n\n      .cal-disabled .cal-day-number {\n        opacity: 0.1;\n      }\n    `,\n  ],\n  // this is a hack to get styles to apply to the inner component. Your app should just use a global stylesheet\n  "},"desc":"Remove `ViewEncapsulation.None`"}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Component,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CalendarEvent,\n  CalendarMonthViewDay,\n  CalendarView,\n} from 'angular-calendar';\nimport {\n  subMonths,\n  addMonths,\n  addDays,\n  addWeeks,\n  subDays,\n  subWeeks,\n  startOfMonth,\n  endOfMonth,\n  startOfWeek,\n  endOfWeek,\n  startOfDay,\n  endOfDay,\n} from 'date-fns';\n\ntype CalendarPeriod = 'day' | 'week' | 'month';\n\nfunction addPeriod(period: CalendarPeriod, date: Date, amount: number): Date {\n  return {\n    day: addDays,\n    week: addWeeks,\n    month: addMonths,\n  }[period](date, amount);\n}\n\nfunction subPeriod(period: CalendarPeriod, date: Date, amount: number): Date {\n  return {\n    day: subDays,\n    week: subWeeks,\n    month: subMonths,\n  }[period](date, amount);\n}\n\nfunction startOfPeriod(period: CalendarPeriod, date: Date): Date {\n  return {\n    day: startOfDay,\n    week: startOfWeek,\n    month: startOfMonth,\n  }[period](date);\n}\n\nfunction endOfPeriod(period: CalendarPeriod, date: Date): Date {\n  return {\n    day: endOfDay,\n    week: endOfWeek,\n    month: endOfMonth,\n  }[period](date);\n}\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: 'template.html',\n  styles: [\n    `\n      .cal-disabled {\n        background-color: #eee;\n        pointer-events: none;\n      }\n\n      .cal-disabled .cal-day-number {\n        opacity: 0.1;\n      }\n    `,\n  ],\n  // this is a hack to get styles to apply to the inner component. Your app should just use a global stylesheet\n  encapsulation: ViewEncapsulation.None,\n})\nexport class DemoComponent {\n  view: CalendarView | CalendarPeriod = CalendarView.Month;\n\n  viewDate: Date = new Date();\n\n  events: CalendarEvent[] = [];\n\n  minDate: Date = subMonths(new Date(), 1);\n\n  maxDate: Date = addMonths(new Date(), 1);\n\n  prevBtnDisabled: boolean = false;\n\n  nextBtnDisabled: boolean = false;\n\n  constructor() {\n    this.dateOrViewChanged();\n  }\n\n  increment(): void {\n    this.changeDate(addPeriod(this.view, this.viewDate, 1));\n  }\n\n  decrement(): void {\n    this.changeDate(subPeriod(this.view, this.viewDate, 1));\n  }\n\n  today(): void {\n    this.changeDate(new Date());\n  }\n\n  dateIsValid(date: Date): boolean {\n    return date >= this.minDate && date <= this.maxDate;\n  }\n\n  changeDate(date: Date): void {\n    this.viewDate = date;\n    this.dateOrViewChanged();\n  }\n\n  changeView(view: CalendarPeriod): void {\n    this.view = view;\n    this.dateOrViewChanged();\n  }\n\n  dateOrViewChanged(): void {\n    this.prevBtnDisabled = !this.dateIsValid(\n      endOfPeriod(this.view, subPeriod(this.view, this.viewDate, 1))\n    );\n    this.nextBtnDisabled = !this.dateIsValid(\n      startOfPeriod(this.view, addPeriod(this.view, this.viewDate, 1))\n    );\n    if (this.viewDate < this.minDate) {\n      this.changeDate(this.minDate);\n    } else if (this.viewDate > this.maxDate) {\n      this.changeDate(this.maxDate);\n    }\n  }\n\n  beforeMonthViewRender({ body }: { body: CalendarMonthViewDay[] }): void {\n    body.forEach((day) => {\n      if (!this.dateIsValid(day.date)) {\n        day.cssClass = 'cal-disabled';\n      }\n    });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/min-max-date/template.html","messages":[{"ruleId":"@angular-eslint/template/button-has-type","severity":2,"message":"Type for <button> is missing","line":4,"column":7,"nodeType":null,"messageId":"missingType","endLine":10,"endColumn":16},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `[disabled]`, `(click)` instead of `(click)`, `[disabled]`","line":6,"column":9,"nodeType":null,"messageId":"attributesOrder","endLine":7,"endColumn":37,"fix":{"range":[137,195],"text":"[disabled]=\"prevBtnDisabled\"\n        (click)=\"decrement()\""}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":9,"column":9,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":10,"endColumn":7,"fix":{"range":[96,96],"text":" i18n"}},{"ruleId":"@angular-eslint/template/button-has-type","severity":2,"message":"Type for <button> is missing","line":11,"column":7,"nodeType":null,"messageId":"missingType","endLine":11,"endColumn":81},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":11,"column":67,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":11,"endColumn":72,"fix":{"range":[250,250],"text":" i18n"}},{"ruleId":"@angular-eslint/template/button-has-type","severity":2,"message":"Type for <button> is missing","line":12,"column":7,"nodeType":null,"messageId":"missingType","endLine":18,"endColumn":16},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `[disabled]`, `(click)` instead of `(click)`, `[disabled]`","line":14,"column":9,"nodeType":null,"messageId":"attributesOrder","endLine":15,"endColumn":37,"fix":{"range":[372,430],"text":"[disabled]=\"nextBtnDisabled\"\n        (click)=\"increment()\""}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":17,"column":9,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":18,"endColumn":7,"fix":{"range":[331,331],"text":" i18n"}},{"ruleId":"@angular-eslint/template/accessibility-interactive-supports-focus","severity":2,"message":"Elements with interaction handlers must be focusable.","line":26,"column":7,"nodeType":null,"messageId":"interactiveSupportsFocus","endLine":32,"endColumn":13},{"ruleId":"@angular-eslint/template/click-events-have-key-events","severity":2,"message":"click must be accompanied by either keyup, keydown or keypress event for accessibility.","line":26,"column":7,"nodeType":null,"messageId":"clickEventsHaveKeyEvents","endLine":32,"endColumn":13},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `[active]`, `(click)` instead of `(click)`, `[active]`","line":28,"column":9,"nodeType":null,"messageId":"attributesOrder","endLine":29,"endColumn":42,"fix":{"range":[695,766],"text":"[class.active]=\"view === 'month'\"\n        (click)=\"changeView('month')\""}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":31,"column":9,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":32,"endColumn":7,"fix":{"range":[654,654],"text":" i18n"}},{"ruleId":"@angular-eslint/template/accessibility-interactive-supports-focus","severity":2,"message":"Elements with interaction handlers must be focusable.","line":33,"column":7,"nodeType":null,"messageId":"interactiveSupportsFocus","endLine":39,"endColumn":13},{"ruleId":"@angular-eslint/template/click-events-have-key-events","severity":2,"message":"click must be accompanied by either keyup, keydown or keypress event for accessibility.","line":33,"column":7,"nodeType":null,"messageId":"clickEventsHaveKeyEvents","endLine":39,"endColumn":13},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `[active]`, `(click)` instead of `(click)`, `[active]`","line":35,"column":9,"nodeType":null,"messageId":"attributesOrder","endLine":36,"endColumn":41,"fix":{"range":[853,922],"text":"[class.active]=\"view === 'week'\"\n        (click)=\"changeView('week')\""}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":38,"column":9,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":39,"endColumn":7,"fix":{"range":[812,812],"text":" i18n"}},{"ruleId":"@angular-eslint/template/accessibility-interactive-supports-focus","severity":2,"message":"Elements with interaction handlers must be focusable.","line":40,"column":7,"nodeType":null,"messageId":"interactiveSupportsFocus","endLine":46,"endColumn":13},{"ruleId":"@angular-eslint/template/click-events-have-key-events","severity":2,"message":"click must be accompanied by either keyup, keydown or keypress event for accessibility.","line":40,"column":7,"nodeType":null,"messageId":"clickEventsHaveKeyEvents","endLine":46,"endColumn":13},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `[active]`, `(click)` instead of `(click)`, `[active]`","line":42,"column":9,"nodeType":null,"messageId":"attributesOrder","endLine":43,"endColumn":40,"fix":{"range":[1008,1075],"text":"[class.active]=\"view === 'day'\"\n        (click)=\"changeView('day')\""}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":45,"column":9,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":46,"endColumn":7,"fix":{"range":[967,967],"text":" i18n"}}],"suppressedMessages":[],"errorCount":20,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":11,"fixableWarningCount":0,"source":"<div class=\"row text-center\">\n  <div class=\"col-md-4\">\n    <div class=\"btn-group\">\n      <button\n        class=\"btn btn-primary\"\n        (click)=\"decrement()\"\n        [disabled]=\"prevBtnDisabled\"\n      >\n        Previous\n      </button>\n      <button class=\"btn btn-outline-secondary\" (click)=\"today()\">Today</button>\n      <button\n        class=\"btn btn-primary\"\n        (click)=\"increment()\"\n        [disabled]=\"nextBtnDisabled\"\n      >\n        Next\n      </button>\n    </div>\n  </div>\n  <div class=\"col-md-4\">\n    <h3>{{ viewDate | calendarDate:(view + 'ViewTitle'):'en' }}</h3>\n  </div>\n  <div class=\"col-md-4\">\n    <div class=\"btn-group\">\n      <div\n        class=\"btn btn-primary\"\n        (click)=\"changeView('month')\"\n        [class.active]=\"view === 'month'\"\n      >\n        Month\n      </div>\n      <div\n        class=\"btn btn-primary\"\n        (click)=\"changeView('week')\"\n        [class.active]=\"view === 'week'\"\n      >\n        Week\n      </div>\n      <div\n        class=\"btn btn-primary\"\n        (click)=\"changeView('day')\"\n        [class.active]=\"view === 'day'\"\n      >\n        Day\n      </div>\n    </div>\n  </div>\n</div>\n<br />\n\n<div [ngSwitch]=\"view\">\n  <mwl-calendar-month-view\n    *ngSwitchCase=\"'month'\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n    (beforeViewRender)=\"beforeMonthViewRender($event)\"\n  >\n  </mwl-calendar-month-view>\n  <mwl-calendar-week-view\n    *ngSwitchCase=\"'week'\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n  >\n  </mwl-calendar-week-view>\n  <mwl-calendar-day-view\n    *ngSwitchCase=\"'day'\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n  >\n  </mwl-calendar-day-view>\n</div>\n","usedDeprecatedRules":[{"ruleId":"@angular-eslint/template/accessibility-label-for","replacedBy":["accessibility-label-has-associated-control"]}]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/moment/component.ts","messages":[{"ruleId":"@angular-eslint/relative-url-prefix","severity":2,"message":"The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)","line":16,"column":16,"nodeType":"Literal","messageId":"relativeUrlPrefix","endLine":16,"endColumn":31}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent, CalendarView, DAYS_OF_WEEK } from 'angular-calendar';\nimport moment from 'moment';\n\n// weekStartsOn option is ignored when using moment, as it needs to be configured globally for the moment locale\nmoment.updateLocale('en', {\n  week: {\n    dow: DAYS_OF_WEEK.MONDAY,\n    doy: 0,\n  },\n});\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: 'template.html',\n})\nexport class DemoComponent {\n  view: CalendarView = CalendarView.Month;\n\n  viewDate: Date = new Date();\n\n  events: CalendarEvent[] = [];\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/moment/template.html","messages":[{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":2,"column":3,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":5,"endColumn":1,"fix":{"range":[4,4],"text":" i18n"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"<div class=\"alert alert-info\">\n  Use this if you're already using moment heavily in your app and don't want to\n  include date-fns in your bundle, or you need to be able to adjust dates to be\n  in a different timezone than the users browser via moment-locale\n</div>\n\n<mwl-demo-utils-calendar-header [(view)]=\"view\" [(viewDate)]=\"viewDate\">\n</mwl-demo-utils-calendar-header>\n\n<div [ngSwitch]=\"view\">\n  <mwl-calendar-month-view\n    *ngSwitchCase=\"'month'\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n  >\n  </mwl-calendar-month-view>\n  <mwl-calendar-week-view\n    *ngSwitchCase=\"'week'\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n  >\n  </mwl-calendar-week-view>\n  <mwl-calendar-day-view\n    *ngSwitchCase=\"'day'\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n  >\n  </mwl-calendar-day-view>\n</div>\n","usedDeprecatedRules":[{"ruleId":"@angular-eslint/template/accessibility-label-for","replacedBy":["accessibility-label-has-associated-control"]}]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/month-view-badge-total/component.ts","messages":[{"ruleId":"@angular-eslint/relative-url-prefix","severity":2,"message":"The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)","line":8,"column":16,"nodeType":"Literal","messageId":"relativeUrlPrefix","endLine":8,"endColumn":31}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent, CalendarMonthViewDay } from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: 'template.html',\n})\nexport class DemoComponent {\n  viewDate: Date = new Date();\n\n  events: CalendarEvent<{ incrementsBadgeTotal: boolean }>[] = [\n    {\n      title: 'Increments badge total on the day cell',\n      color: colors.yellow,\n      start: new Date(),\n      meta: {\n        incrementsBadgeTotal: true,\n      },\n    },\n    {\n      title: 'Does not increment the badge total on the day cell',\n      color: colors.blue,\n      start: new Date(),\n      meta: {\n        incrementsBadgeTotal: false,\n      },\n    },\n  ];\n\n  beforeMonthViewRender({ body }: { body: CalendarMonthViewDay[] }): void {\n    body.forEach((day) => {\n      day.badgeTotal = day.events.filter(\n        (event) => event.meta.incrementsBadgeTotal\n      ).length;\n    });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/navigating-between-views/component.ts","messages":[{"ruleId":"@angular-eslint/relative-url-prefix","severity":2,"message":"The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)","line":7,"column":16,"nodeType":"Literal","messageId":"relativeUrlPrefix","endLine":7,"endColumn":31}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: 'template.html',\n})\nexport class DemoComponent {\n  view: CalendarView = CalendarView.Month;\n\n  viewDate: Date = new Date();\n\n  events: CalendarEvent[] = [];\n\n  changeDay(date: Date) {\n    this.viewDate = date;\n    this.view = CalendarView.Day;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/navigating-between-views/template.html","messages":[{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":7,"column":8,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":7,"endColumn":64,"fix":{"range":[174,174],"text":" i18n"}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":10,"column":8,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":10,"endColumn":61,"fix":{"range":[284,284],"text":" i18n"}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":12,"column":33,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":12,"endColumn":71,"fix":{"range":[390,390],"text":" i18n"}},{"ruleId":"@angular-eslint/template/cyclomatic-complexity","severity":2,"message":"The cyclomatic complexity 6 exceeds the defined limit 5","line":32,"column":6,"nodeType":null,"messageId":"cyclomaticComplexity","endLine":32,"endColumn":25}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"<mwl-demo-utils-calendar-header [(view)]=\"view\" [(viewDate)]=\"viewDate\">\n</mwl-demo-utils-calendar-header>\n\n<div class=\"alert alert-info\">\n  <div [ngSwitch]=\"view\">\n    <span *ngSwitchCase=\"'month'\"\n      >Click on a month label to change the view to that month.</span\n    >\n    <span *ngSwitchCase=\"'week'\"\n      >Click on a day header to change the view to that day.</span\n    >\n    <span *ngSwitchCase=\"'day'\">There is no other view to navigate to.</span>\n  </div>\n</div>\n\n<div [ngSwitch]=\"view\">\n  <mwl-calendar-month-view\n    *ngSwitchCase=\"'month'\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n    (dayClicked)=\"changeDay($event.day.date)\"\n  >\n  </mwl-calendar-month-view>\n  <mwl-calendar-week-view\n    *ngSwitchCase=\"'week'\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n    (dayHeaderClicked)=\"changeDay($event.day.date)\"\n  >\n  </mwl-calendar-week-view>\n  <mwl-calendar-day-view\n    *ngSwitchCase=\"'day'\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n  >\n  </mwl-calendar-day-view>\n</div>\n","usedDeprecatedRules":[{"ruleId":"@angular-eslint/template/accessibility-label-for","replacedBy":["accessibility-label-has-associated-control"]}]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/no-events-label/component.ts","messages":[{"ruleId":"@angular-eslint/relative-url-prefix","severity":2,"message":"The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)","line":19,"column":16,"nodeType":"Literal","messageId":"relativeUrlPrefix","endLine":19,"endColumn":31}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Component,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  CalendarEvent,\n  CalendarViewPeriod,\n  CalendarMonthViewBeforeRenderEvent,\n  CalendarWeekViewBeforeRenderEvent,\n  CalendarDayViewBeforeRenderEvent,\n  CalendarView,\n} from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: 'template.html',\n})\nexport class DemoComponent {\n  view: CalendarView = CalendarView.Month;\n\n  viewDate: Date = new Date();\n\n  events: CalendarEvent[] = [\n    {\n      title: 'Event 1',\n      color: colors.yellow,\n      start: new Date(),\n    },\n  ];\n\n  period: CalendarViewPeriod;\n\n  constructor(private cdr: ChangeDetectorRef) {}\n\n  beforeViewRender(\n    event:\n      | CalendarMonthViewBeforeRenderEvent\n      | CalendarWeekViewBeforeRenderEvent\n      | CalendarDayViewBeforeRenderEvent\n  ) {\n    this.period = event.period;\n    this.cdr.detectChanges();\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/no-events-label/template.html","messages":[{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `*ngIf`, `class` instead of `class`, `*ngIf`","line":4,"column":6,"nodeType":null,"messageId":"attributesOrder","endLine":4,"endColumn":69,"fix":{"range":[113,176],"text":"*ngIf=\"period?.events.length === 0\" class=\"alert alert-warning\""}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":5,"column":3,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":6,"endColumn":1,"fix":{"range":[112,112],"text":" i18n"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"<mwl-demo-utils-calendar-header [(view)]=\"view\" [(viewDate)]=\"viewDate\">\n</mwl-demo-utils-calendar-header>\n\n<div class=\"alert alert-warning\" *ngIf=\"period?.events.length === 0\">\n  There are no events on this {{ view }}\n</div>\n\n<div [ngSwitch]=\"view\">\n  <mwl-calendar-month-view\n    *ngSwitchCase=\"'month'\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n    [activeDayIsOpen]=\"true\"\n    (beforeViewRender)=\"beforeViewRender($event)\"\n  >\n  </mwl-calendar-month-view>\n  <mwl-calendar-week-view\n    *ngSwitchCase=\"'week'\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n    (beforeViewRender)=\"beforeViewRender($event)\"\n  >\n  </mwl-calendar-week-view>\n  <mwl-calendar-day-view\n    *ngSwitchCase=\"'day'\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n    (beforeViewRender)=\"beforeViewRender($event)\"\n  >\n  </mwl-calendar-day-view>\n</div>\n","usedDeprecatedRules":[{"ruleId":"@angular-eslint/template/accessibility-label-for","replacedBy":["accessibility-label-has-associated-control"]}]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/optional-event-end-dates/component.ts","messages":[{"ruleId":"@angular-eslint/relative-url-prefix","severity":2,"message":"The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)","line":9,"column":16,"nodeType":"Literal","messageId":"relativeUrlPrefix","endLine":9,"endColumn":31}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\nimport { setHours, setMinutes } from 'date-fns';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: 'template.html',\n})\nexport class DemoComponent {\n  view: CalendarView = CalendarView.Day;\n\n  viewDate: Date = new Date();\n\n  events: CalendarEvent[] = [\n    {\n      title: 'No event end date',\n      start: setHours(setMinutes(new Date(), 0), 3),\n      color: colors.blue,\n    },\n    {\n      title: 'No event end date',\n      start: setHours(setMinutes(new Date(), 0), 5),\n      color: colors.yellow,\n    },\n  ];\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/public-holidays/component.ts","messages":[{"ruleId":"@angular-eslint/relative-url-prefix","severity":2,"message":"The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)","line":29,"column":16,"nodeType":"Literal","messageId":"relativeUrlPrefix","endLine":29,"endColumn":31}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\nimport { HttpClient } from '@angular/common/http';\nimport { startOfYear, subYears } from 'date-fns';\n\n// get your own key from https://holidayapi.com/\nconst HOLIDAY_API_KEY = '8eb2582d-3a4c-4fc5-94c8-3e21487d4e23';\n\n// change this to your own country\nconst COUNTRY_CODE = 'US';\n\ninterface Holiday {\n  date: string;\n  name: string;\n}\n\ntype CalendarEventWithMeta = CalendarEvent<\n  { type: 'holiday'; holiday: Holiday } | { type: 'normal' }\n>;\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: 'template.html',\n})\nexport class DemoComponent implements OnInit {\n  view: CalendarView = CalendarView.Month;\n\n  viewDate = startOfYear(subYears(new Date(), 1));\n\n  events: CalendarEventWithMeta[] = [];\n\n  constructor(private http: HttpClient, private cdr: ChangeDetectorRef) {}\n\n  ngOnInit(): void {\n    this.fetchHolidays();\n  }\n\n  private fetchHolidays() {\n    this.http\n      .get<{ holidays: Holiday[] }>('https://holidayapi.com/v1/holidays', {\n        params: {\n          country: COUNTRY_CODE,\n          year: String(new Date().getFullYear() - 1),\n          key: HOLIDAY_API_KEY,\n        },\n      })\n      .subscribe(({ holidays }) => {\n        this.events = holidays.map((holiday) => {\n          return {\n            start: new Date(holiday.date),\n            title: holiday.name,\n            allDay: true,\n            meta: {\n              type: 'holiday',\n              holiday,\n            },\n          };\n        });\n        this.cdr.markForCheck();\n      });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/public-holidays/module.ts","messages":[{"ruleId":"@angular-eslint/sort-ngmodule-metadata-arrays","severity":2,"message":"`NgModule` metadata arrays should be sorted in ASC alphabetical order","line":18,"column":5,"nodeType":"Identifier","messageId":"sortNgmoduleMetadataArrays","endLine":18,"endColumn":20,"fix":{"range":[581,618],"text":"DemoUtilsModule,\n    HttpClientModule"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { CalendarModule, DateAdapter } from 'angular-calendar';\nimport { DemoUtilsModule } from '../demo-utils/module';\nimport { DemoComponent } from './component';\nimport { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CalendarModule.forRoot({\n      provide: DateAdapter,\n      useFactory: adapterFactory,\n    }),\n    HttpClientModule,\n    DemoUtilsModule,\n    RouterModule.forChild([{ path: '', component: DemoComponent }]),\n  ],\n  declarations: [DemoComponent],\n  exports: [DemoComponent],\n})\nexport class DemoModule {}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/recurring-events/component.ts","messages":[{"ruleId":"@angular-eslint/relative-url-prefix","severity":2,"message":"The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)","line":38,"column":16,"nodeType":"Literal","messageId":"relativeUrlPrefix","endLine":38,"endColumn":31}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Component,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n} from '@angular/core';\n// As an alternative to rrule there is also rSchedule\n// See https://github.com/mattlewis92/angular-calendar/issues/711#issuecomment-418537158 for more info\nimport { RRule } from 'rrule';\nimport moment from 'moment-timezone';\nimport {\n  CalendarDayViewBeforeRenderEvent,\n  CalendarEvent,\n  CalendarMonthViewBeforeRenderEvent,\n  CalendarView,\n  CalendarWeekViewBeforeRenderEvent,\n} from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\nimport { ViewPeriod } from 'calendar-utils';\n\ninterface RecurringEvent {\n  title: string;\n  color: any;\n  rrule?: {\n    freq: any;\n    bymonth?: number;\n    bymonthday?: number;\n    byweekday?: any;\n  };\n}\n\n// we set the timezone to UTC to avoid issues with DST changes\n// see https://github.com/mattlewis92/angular-calendar/issues/717 for more info\nmoment.tz.setDefault('Utc');\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: 'template.html',\n})\nexport class DemoComponent {\n  view: CalendarView = CalendarView.Month;\n\n  viewDate = moment().toDate();\n\n  recurringEvents: RecurringEvent[] = [\n    {\n      title: 'Recurs on the 5th of each month',\n      color: colors.yellow,\n      rrule: {\n        freq: RRule.MONTHLY,\n        bymonthday: 5,\n      },\n    },\n    {\n      title: 'Recurs yearly on the 10th of the current month',\n      color: colors.blue,\n      rrule: {\n        freq: RRule.YEARLY,\n        bymonth: moment().month() + 1,\n        bymonthday: 10,\n      },\n    },\n    {\n      title: 'Recurs weekly on mondays',\n      color: colors.red,\n      rrule: {\n        freq: RRule.WEEKLY,\n        byweekday: [RRule.MO],\n      },\n    },\n  ];\n\n  calendarEvents: CalendarEvent[] = [];\n\n  viewPeriod: ViewPeriod;\n\n  constructor(private cdr: ChangeDetectorRef) {}\n\n  updateCalendarEvents(\n    viewRender:\n      | CalendarMonthViewBeforeRenderEvent\n      | CalendarWeekViewBeforeRenderEvent\n      | CalendarDayViewBeforeRenderEvent\n  ): void {\n    if (\n      !this.viewPeriod ||\n      !moment(this.viewPeriod.start).isSame(viewRender.period.start) ||\n      !moment(this.viewPeriod.end).isSame(viewRender.period.end)\n    ) {\n      this.viewPeriod = viewRender.period;\n      this.calendarEvents = [];\n\n      this.recurringEvents.forEach((event) => {\n        const rule: RRule = new RRule({\n          ...event.rrule,\n          dtstart: moment(viewRender.period.start).startOf('day').toDate(),\n          until: moment(viewRender.period.end).endOf('day').toDate(),\n        });\n        const { title, color } = event;\n\n        rule.all().forEach((date) => {\n          this.calendarEvents.push({\n            title,\n            color,\n            start: moment(date).toDate(),\n          });\n        });\n      });\n      this.cdr.detectChanges();\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/refreshing-the-view/component.ts","messages":[{"ruleId":"@angular-eslint/use-component-view-encapsulation","severity":2,"message":"Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect","line":19,"column":36,"nodeType":"Identifier","messageId":"useComponentViewEncapsulation","endLine":19,"endColumn":40,"suggestions":[{"messageId":"suggestRemoveViewEncapsulationNone","fix":{"range":[47,444],"text":",\n} from '@angular/core';\nimport {\n  CalendarEvent,\n  CalendarMonthViewDay,\n  CalendarView,\n} from 'angular-calendar';\nimport { Subject } from 'rxjs';\n\nconst RED_CELL: 'red-cell' = 'red-cell';\nconst BLUE_CELL: 'blue-cell' = 'blue-cell';\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  "},"desc":"Remove `ViewEncapsulation.None`"}]},{"ruleId":"@angular-eslint/relative-url-prefix","severity":2,"message":"The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)","line":20,"column":16,"nodeType":"Literal","messageId":"relativeUrlPrefix","endLine":20,"endColumn":31},{"ruleId":"@angular-eslint/component-max-inline-declarations","severity":2,"message":"`styles` has too many lines (6). Maximum allowed is 3 (https://angular.io/guide/styleguide#style-05-04)","line":21,"column":11,"nodeType":"ArrayExpression","messageId":"componentMaxInlineDeclarations","endLine":30,"endColumn":4}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Component,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CalendarEvent,\n  CalendarMonthViewDay,\n  CalendarView,\n} from 'angular-calendar';\nimport { Subject } from 'rxjs';\n\nconst RED_CELL: 'red-cell' = 'red-cell';\nconst BLUE_CELL: 'blue-cell' = 'blue-cell';\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'template.html',\n  styles: [\n    `\n      .red-cell {\n        background-color: red !important;\n      }\n      .blue-cell {\n        background-color: blue !important;\n      }\n    `,\n  ],\n})\nexport class DemoComponent {\n  view: CalendarView = CalendarView.Month;\n\n  viewDate = new Date();\n\n  events: CalendarEvent[] = [];\n\n  refresh = new Subject<void>();\n\n  cssClass: string = RED_CELL;\n\n  refreshView(): void {\n    this.cssClass = this.cssClass === RED_CELL ? BLUE_CELL : RED_CELL;\n    this.refresh.next();\n  }\n\n  beforeMonthViewRender({ body }: { body: CalendarMonthViewDay[] }): void {\n    body.forEach((day) => {\n      if (day.date.getDate() % 2 === 1) {\n        day.cssClass = this.cssClass;\n      }\n    });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/refreshing-the-view/template.html","messages":[{"ruleId":"@angular-eslint/template/button-has-type","severity":2,"message":"Type for <button> is missing","line":5,"column":3,"nodeType":null,"messageId":"missingType","endLine":7,"endColumn":12},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":6,"column":5,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":7,"endColumn":3,"fix":{"range":[143,143],"text":" i18n"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"<mwl-demo-utils-calendar-header [(view)]=\"view\" [(viewDate)]=\"viewDate\">\n</mwl-demo-utils-calendar-header>\n\n<div class=\"text-center\">\n  <button class=\"btn btn-primary\" (click)=\"refreshView()\">\n    Refresh + re-render the current view\n  </button>\n</div>\n\n<div [ngSwitch]=\"view\">\n  <mwl-calendar-month-view\n    *ngSwitchCase=\"'month'\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n    [refresh]=\"refresh\"\n    (beforeViewRender)=\"beforeMonthViewRender($event)\"\n  >\n  </mwl-calendar-month-view>\n  <mwl-calendar-week-view\n    *ngSwitchCase=\"'week'\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n    [refresh]=\"refresh\"\n  >\n  </mwl-calendar-week-view>\n  <mwl-calendar-day-view\n    *ngSwitchCase=\"'day'\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n    [refresh]=\"refresh\"\n  >\n  </mwl-calendar-day-view>\n</div>\n","usedDeprecatedRules":[{"ruleId":"@angular-eslint/template/accessibility-label-for","replacedBy":["accessibility-label-has-associated-control"]}]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/resizable-events/component.ts","messages":[{"ruleId":"@angular-eslint/relative-url-prefix","severity":2,"message":"The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)","line":14,"column":16,"nodeType":"Literal","messageId":"relativeUrlPrefix","endLine":14,"endColumn":31}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { addDays } from 'date-fns';\nimport {\n  CalendarEvent,\n  CalendarEventTimesChangedEvent,\n  CalendarView,\n} from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: 'template.html',\n})\nexport class DemoComponent {\n  view: CalendarView = CalendarView.Week;\n\n  viewDate = new Date();\n\n  events: CalendarEvent[] = [\n    {\n      title: 'Resizable event',\n      color: colors.yellow,\n      start: new Date(),\n      end: addDays(new Date(), 1), // an end date is always required for resizable events to work\n      resizable: {\n        beforeStart: true, // this allows you to configure the sides the event is resizable from\n        afterEnd: true,\n      },\n    },\n    {\n      title: 'A non resizable event',\n      color: colors.blue,\n      start: new Date(),\n      end: addDays(new Date(), 1),\n    },\n  ];\n\n  refresh = new Subject<void>();\n\n  eventTimesChanged({\n    event,\n    newStart,\n    newEnd,\n  }: CalendarEventTimesChangedEvent): void {\n    event.start = newStart;\n    event.end = newEnd;\n    this.refresh.next();\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/responsive-week-view/template.html","messages":[{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":2,"column":3,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":3,"endColumn":1,"fix":{"range":[4,4],"text":" i18n"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"<div class=\"alert alert-info\">\n  Shrink the browser window size to reduce the number of days in the week.\n</div>\n\n<mwl-calendar-week-view [viewDate]=\"viewDate\" [daysInWeek]=\"daysInWeek\">\n</mwl-calendar-week-view>\n","usedDeprecatedRules":[{"ruleId":"@angular-eslint/template/accessibility-label-for","replacedBy":["accessibility-label-has-associated-control"]}]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/rtl/component.ts","messages":[{"ruleId":"@angular-eslint/relative-url-prefix","severity":2,"message":"The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)","line":14,"column":16,"nodeType":"Literal","messageId":"relativeUrlPrefix","endLine":14,"endColumn":31}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport {\n  CalendarEvent,\n  CalendarEventTimesChangedEvent,\n  CalendarView,\n} from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\nimport { addDays, addHours, endOfMonth, startOfDay, subDays } from 'date-fns';\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: 'template.html',\n})\nexport class DemoComponent {\n  view: CalendarView = CalendarView.Month;\n\n  viewDate = new Date();\n\n  events: CalendarEvent[] = [\n    {\n      start: subDays(startOfDay(new Date()), 1),\n      end: addDays(new Date(), 1),\n      title: 'A 3 day event',\n      color: colors.red,\n      allDay: true,\n      resizable: {\n        beforeStart: true,\n        afterEnd: true,\n      },\n      draggable: true,\n    },\n    {\n      start: startOfDay(new Date()),\n      title: 'An event with no end date',\n      color: colors.yellow,\n    },\n    {\n      start: subDays(endOfMonth(new Date()), 3),\n      end: addDays(endOfMonth(new Date()), 3),\n      title: 'A long event that spans 2 months',\n      color: colors.blue,\n      allDay: true,\n    },\n    {\n      start: addHours(startOfDay(new Date()), 2),\n      end: addHours(new Date(), 2),\n      title: 'A draggable and resizable event',\n      color: colors.yellow,\n      resizable: {\n        beforeStart: true,\n        afterEnd: true,\n      },\n      draggable: true,\n    },\n  ];\n\n  refresh = new Subject<void>();\n\n  eventTimesChanged({\n    event,\n    newStart,\n    newEnd,\n  }: CalendarEventTimesChangedEvent): void {\n    event.start = newStart;\n    event.end = newEnd;\n    this.refresh.next();\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/rtl/template.html","messages":[{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `dir`, `[ngSwitch]` instead of `[ngSwitch]`, `dir`","line":4,"column":6,"nodeType":null,"messageId":"attributesOrder","endLine":4,"endColumn":33,"fix":{"range":[113,140],"text":"dir=\"rtl\" [ngSwitch]=\"view\""}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"<mwl-demo-utils-calendar-header [(view)]=\"view\" [(viewDate)]=\"viewDate\">\n</mwl-demo-utils-calendar-header>\n\n<div [ngSwitch]=\"view\" dir=\"rtl\">\n  <mwl-calendar-month-view\n    *ngSwitchCase=\"'month'\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n    [activeDayIsOpen]=\"true\"\n    [refresh]=\"refresh\"\n    (eventTimesChanged)=\"eventTimesChanged($event)\"\n  >\n  </mwl-calendar-month-view>\n  <mwl-calendar-week-view\n    *ngSwitchCase=\"'week'\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n    [refresh]=\"refresh\"\n    (eventTimesChanged)=\"eventTimesChanged($event)\"\n  >\n  </mwl-calendar-week-view>\n  <mwl-calendar-day-view\n    *ngSwitchCase=\"'day'\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n    [refresh]=\"refresh\"\n    (eventTimesChanged)=\"eventTimesChanged($event)\"\n  >\n  </mwl-calendar-day-view>\n</div>\n","usedDeprecatedRules":[{"ruleId":"@angular-eslint/template/accessibility-label-for","replacedBy":["accessibility-label-has-associated-control"]}]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/scroll-to-current-time/component.ts","messages":[{"ruleId":"@angular-eslint/component-max-inline-declarations","severity":2,"message":"`styles` has too many lines (4). Maximum allowed is 3 (https://angular.io/guide/styleguide#style-05-04)","line":16,"column":11,"nodeType":"ArrayExpression","messageId":"componentMaxInlineDeclarations","endLine":23,"endColumn":4}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  ViewChild,\n} from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\nimport { differenceInMinutes, startOfDay, startOfHour } from 'date-fns';\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: './template.html',\n  styles: [\n    `\n      .scroll-container {\n        height: calc(100vh - 320px);\n        overflow-y: auto;\n      }\n    `,\n  ],\n})\nexport class DemoComponent implements AfterViewInit {\n  @ViewChild('scrollContainer') scrollContainer: ElementRef<HTMLElement>;\n\n  view: CalendarView = CalendarView.Week;\n\n  viewDate = new Date();\n\n  events: CalendarEvent[] = [];\n\n  constructor(private cdr: ChangeDetectorRef) {}\n\n  ngAfterViewInit() {\n    this.scrollToCurrentView();\n  }\n\n  viewChanged() {\n    this.cdr.detectChanges();\n    this.scrollToCurrentView();\n  }\n\n  private scrollToCurrentView() {\n    if (this.view === CalendarView.Week || CalendarView.Day) {\n      // each hour is 60px high, so to get the pixels to scroll it's just the amount of minutes since midnight\n      const minutesSinceStartOfDay = differenceInMinutes(\n        startOfHour(new Date()),\n        startOfDay(new Date())\n      );\n      const headerHeight = this.view === CalendarView.Week ? 60 : 0;\n      this.scrollContainer.nativeElement.scrollTop =\n        minutesSinceStartOfDay + headerHeight;\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/scroll-to-current-time/template.html","messages":[{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `#scrollContainer`, `class`, `[ngSwitch]` instead of `[ngSwitch]`, `class`, `#scrollContainer`","line":8,"column":6,"nodeType":null,"messageId":"attributesOrder","endLine":8,"endColumn":65,"fix":{"range":[149,208],"text":"#scrollContainer class=\"scroll-container\" [ngSwitch]=\"view\""}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"<mwl-demo-utils-calendar-header\n  [(view)]=\"view\"\n  [(viewDate)]=\"viewDate\"\n  (viewChange)=\"viewChanged()\"\n>\n</mwl-demo-utils-calendar-header>\n\n<div [ngSwitch]=\"view\" class=\"scroll-container\" #scrollContainer>\n  <mwl-calendar-month-view\n    *ngSwitchCase=\"'month'\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n  >\n  </mwl-calendar-month-view>\n  <mwl-calendar-week-view\n    *ngSwitchCase=\"'week'\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n  >\n  </mwl-calendar-week-view>\n  <mwl-calendar-day-view\n    *ngSwitchCase=\"'day'\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n  >\n  </mwl-calendar-day-view>\n</div>\n","usedDeprecatedRules":[{"ruleId":"@angular-eslint/template/accessibility-label-for","replacedBy":["accessibility-label-has-associated-control"]}]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/selectable-period/component.ts","messages":[{"ruleId":"@angular-eslint/relative-url-prefix","severity":2,"message":"The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)","line":17,"column":16,"nodeType":"Literal","messageId":"relativeUrlPrefix","endLine":17,"endColumn":31},{"ruleId":"@angular-eslint/component-max-inline-declarations","severity":2,"message":"`styles` has too many lines (4). Maximum allowed is 3 (https://angular.io/guide/styleguide#style-05-04)","line":19,"column":11,"nodeType":"ArrayExpression","messageId":"componentMaxInlineDeclarations","endLine":26,"endColumn":4},{"ruleId":"@angular-eslint/use-component-view-encapsulation","severity":2,"message":"Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect","line":27,"column":36,"nodeType":"Identifier","messageId":"useComponentViewEncapsulation","endLine":27,"endColumn":40,"suggestions":[{"messageId":"suggestRemoveViewEncapsulationNone","fix":{"range":[47,680],"text":",\n} from '@angular/core';\nimport {\n  CalendarEvent,\n  CalendarMonthViewDay,\n  CalendarView,\n  CalendarWeekViewBeforeRenderEvent,\n} from 'angular-calendar';\nimport { WeekViewHour, WeekViewHourColumn } from 'calendar-utils';\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: 'template.html',\n  // don't do this in your app, its only so the styles get applied globally\n  styles: [\n    `\n      .cal-day-selected,\n      .cal-day-selected:hover {\n        background-color: deeppink !important;\n      }\n    `,\n  ],\n  "},"desc":"Remove `ViewEncapsulation.None`"}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Component,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CalendarEvent,\n  CalendarMonthViewDay,\n  CalendarView,\n  CalendarWeekViewBeforeRenderEvent,\n} from 'angular-calendar';\nimport { WeekViewHour, WeekViewHourColumn } from 'calendar-utils';\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: 'template.html',\n  // don't do this in your app, its only so the styles get applied globally\n  styles: [\n    `\n      .cal-day-selected,\n      .cal-day-selected:hover {\n        background-color: deeppink !important;\n      }\n    `,\n  ],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class DemoComponent {\n  view: CalendarView = CalendarView.Month;\n\n  viewDate: Date = new Date();\n\n  selectedMonthViewDay: CalendarMonthViewDay;\n\n  selectedDayViewDate: Date;\n\n  hourColumns: WeekViewHourColumn[];\n\n  events: CalendarEvent[] = [];\n\n  selectedDays: any = [];\n\n  dayClicked(day: CalendarMonthViewDay): void {\n    this.selectedMonthViewDay = day;\n    const selectedDateTime = this.selectedMonthViewDay.date.getTime();\n    const dateIndex = this.selectedDays.findIndex(\n      (selectedDay) => selectedDay.date.getTime() === selectedDateTime\n    );\n    if (dateIndex > -1) {\n      delete this.selectedMonthViewDay.cssClass;\n      this.selectedDays.splice(dateIndex, 1);\n    } else {\n      this.selectedDays.push(this.selectedMonthViewDay);\n      day.cssClass = 'cal-day-selected';\n      this.selectedMonthViewDay = day;\n    }\n  }\n\n  beforeMonthViewRender({ body }: { body: CalendarMonthViewDay[] }): void {\n    body.forEach((day) => {\n      if (\n        this.selectedDays.some(\n          (selectedDay) => selectedDay.date.getTime() === day.date.getTime()\n        )\n      ) {\n        day.cssClass = 'cal-day-selected';\n      }\n    });\n  }\n\n  hourSegmentClicked(date: Date) {\n    this.selectedDayViewDate = date;\n    this.addSelectedDayViewClass();\n  }\n\n  beforeWeekOrDayViewRender(event: CalendarWeekViewBeforeRenderEvent) {\n    this.hourColumns = event.hourColumns;\n    this.addSelectedDayViewClass();\n  }\n\n  private addSelectedDayViewClass() {\n    this.hourColumns.forEach((column) => {\n      column.hours.forEach((hourSegment) => {\n        hourSegment.segments.forEach((segment) => {\n          delete segment.cssClass;\n          if (\n            this.selectedDayViewDate &&\n            segment.date.getTime() === this.selectedDayViewDate.getTime()\n          ) {\n            segment.cssClass = 'cal-day-selected';\n          }\n        });\n      });\n    });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/selectable-period/template.html","messages":[{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":5,"column":3,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":6,"endColumn":1,"fix":{"range":[112,112],"text":" i18n"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"<mwl-demo-utils-calendar-header [(view)]=\"view\" [(viewDate)]=\"viewDate\">\n</mwl-demo-utils-calendar-header>\n\n<div class=\"alert alert-info\">\n  Click on a month view day or a time on the week or day view to select it\n</div>\n\n<div [ngSwitch]=\"view\">\n  <mwl-calendar-month-view\n    *ngSwitchCase=\"'month'\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n    (beforeViewRender)=\"beforeMonthViewRender($event)\"\n    (dayClicked)=\"dayClicked($event.day)\"\n  >\n  </mwl-calendar-month-view>\n  <mwl-calendar-week-view\n    *ngSwitchCase=\"'week'\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n    (beforeViewRender)=\"beforeWeekOrDayViewRender($event)\"\n    (hourSegmentClicked)=\"hourSegmentClicked($event.date)\"\n  >\n  </mwl-calendar-week-view>\n  <mwl-calendar-day-view\n    *ngSwitchCase=\"'day'\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n    (beforeViewRender)=\"beforeWeekOrDayViewRender($event)\"\n    (hourSegmentClicked)=\"hourSegmentClicked($event.date)\"\n  >\n  </mwl-calendar-day-view>\n</div>\n","usedDeprecatedRules":[{"ruleId":"@angular-eslint/template/accessibility-label-for","replacedBy":["accessibility-label-has-associated-control"]}]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/show-dates-on-titles/component.ts","messages":[{"ruleId":"@angular-eslint/relative-url-prefix","severity":2,"message":"The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)","line":13,"column":16,"nodeType":"Literal","messageId":"relativeUrlPrefix","endLine":13,"endColumn":31}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  CalendarEvent,\n  CalendarEventTitleFormatter,\n  CalendarView,\n} from 'angular-calendar';\nimport { CustomEventTitleFormatter } from './custom-event-title-formatter.provider';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: 'template.html',\n  providers: [\n    {\n      provide: CalendarEventTitleFormatter,\n      useClass: CustomEventTitleFormatter,\n    },\n  ],\n})\nexport class DemoComponent {\n  view: CalendarView = CalendarView.Month;\n\n  viewDate: Date = new Date();\n\n  events: CalendarEvent[] = [\n    {\n      title: 'An event',\n      start: new Date(),\n      color: colors.red,\n    },\n  ];\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/show-dates-on-titles/custom-event-title-formatter.provider.ts","messages":[{"ruleId":"@angular-eslint/use-injectable-provided-in","severity":2,"message":"The `providedIn` property is mandatory for `Injectables`","line":5,"column":1,"nodeType":"Decorator","messageId":"useInjectableProvidedIn","endLine":5,"endColumn":14,"suggestions":[{"messageId":"suggestInjector","fix":{"range":[201,201],"text":"{providedIn: 'any'}"},"data":{"injector":"any"},"desc":"Use `providedIn: 'any'`"},{"messageId":"suggestInjector","fix":{"range":[201,201],"text":"{providedIn: 'platform'}"},"data":{"injector":"platform"},"desc":"Use `providedIn: 'platform'`"},{"messageId":"suggestInjector","fix":{"range":[201,201],"text":"{providedIn: 'root'}"},"data":{"injector":"root"},"desc":"Use `providedIn: 'root'`"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { LOCALE_ID, Inject, Injectable } from '@angular/core';\nimport { CalendarEventTitleFormatter, CalendarEvent } from 'angular-calendar';\nimport { formatDate } from '@angular/common';\n\n@Injectable()\nexport class CustomEventTitleFormatter extends CalendarEventTitleFormatter {\n  constructor(@Inject(LOCALE_ID) private locale: string) {\n    super();\n  }\n\n  // you can override any of the methods defined in the parent class\n\n  month(event: CalendarEvent): string {\n    return `<b>${formatDate(event.start, 'h:m a', this.locale)}</b> ${\n      event.title\n    }`;\n  }\n\n  week(event: CalendarEvent): string {\n    return `<b>${formatDate(event.start, 'h:m a', this.locale)}</b> ${\n      event.title\n    }`;\n  }\n\n  day(event: CalendarEvent): string {\n    return `<b>${formatDate(event.start, 'h:m a', this.locale)}</b> ${\n      event.title\n    }`;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/validate-drag-and-resize/component.ts","messages":[{"ruleId":"@angular-eslint/relative-url-prefix","severity":2,"message":"The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)","line":26,"column":16,"nodeType":"Literal","messageId":"relativeUrlPrefix","endLine":26,"endColumn":31},{"ruleId":"@angular-eslint/component-max-inline-declarations","severity":2,"message":"`styles` has too many lines (4). Maximum allowed is 3 (https://angular.io/guide/styleguide#style-05-04)","line":27,"column":11,"nodeType":"ArrayExpression","messageId":"componentMaxInlineDeclarations","endLine":34,"endColumn":4},{"ruleId":"@angular-eslint/use-component-view-encapsulation","severity":2,"message":"Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect","line":35,"column":36,"nodeType":"Identifier","messageId":"useComponentViewEncapsulation","endLine":35,"endColumn":40,"suggestions":[{"messageId":"suggestRemoveViewEncapsulationNone","fix":{"range":[47,702],"text":",\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport {\n  CalendarEvent,\n  CalendarEventTimesChangedEvent,\n  CalendarView,\n} from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\nimport {\n  addDays,\n  addHours,\n  isSameDay,\n  setDay,\n  startOfDay,\n  subDays,\n  subSeconds,\n} from 'date-fns';\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: 'template.html',\n  styles: [\n    `\n      .invalid-position .cal-event {\n        background-color: #ad2121 !important;\n        color: #fff;\n      }\n    `,\n  ],\n  "},"desc":"Remove `ViewEncapsulation.None`"}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  ChangeDetectionStrategy,\n  Component,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport {\n  CalendarEvent,\n  CalendarEventTimesChangedEvent,\n  CalendarView,\n} from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\nimport {\n  addDays,\n  addHours,\n  isSameDay,\n  setDay,\n  startOfDay,\n  subDays,\n  subSeconds,\n} from 'date-fns';\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: 'template.html',\n  styles: [\n    `\n      .invalid-position .cal-event {\n        background-color: #ad2121 !important;\n        color: #fff;\n      }\n    `,\n  ],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class DemoComponent {\n  view: CalendarView = CalendarView.Week;\n\n  viewDate: Date = new Date();\n\n  events: CalendarEvent[] = [\n    {\n      start: subDays(startOfDay(new Date()), 1),\n      end: addDays(new Date(), 1),\n      title: 'A 3 day event',\n      color: colors.blue,\n      allDay: true,\n      resizable: {\n        beforeStart: true,\n        afterEnd: true,\n      },\n      draggable: true,\n    },\n    {\n      start: addHours(startOfDay(setDay(new Date(), 3)), 2),\n      end: subSeconds(addHours(startOfDay(setDay(new Date(), 3)), 3), 1),\n      title: 'An short event',\n      color: colors.yellow,\n      resizable: {\n        beforeStart: true,\n        afterEnd: true,\n      },\n      draggable: true,\n    },\n    {\n      start: addHours(startOfDay(setDay(new Date(), 3)), 5),\n      end: subSeconds(addHours(startOfDay(setDay(new Date(), 3)), 10), 1),\n      title: 'A draggable and resizable event',\n      color: colors.yellow,\n      resizable: {\n        beforeStart: true,\n        afterEnd: true,\n      },\n      draggable: true,\n    },\n  ];\n\n  refresh = new Subject<void>();\n\n  validateEventTimesChanged = (\n    { event, newStart, newEnd, allDay }: CalendarEventTimesChangedEvent,\n    addCssClass = true\n  ) => {\n    if (event.allDay) {\n      return true;\n    }\n\n    delete event.cssClass;\n    // don't allow dragging or resizing events to different days\n    const sameDay = isSameDay(newStart, newEnd);\n\n    if (!sameDay) {\n      return false;\n    }\n\n    // don't allow dragging events to the same times as other events\n    const overlappingEvent = this.events.find((otherEvent) => {\n      return (\n        otherEvent !== event &&\n        !otherEvent.allDay &&\n        ((otherEvent.start < newStart && newStart < otherEvent.end) ||\n          (otherEvent.start < newEnd && newStart < otherEvent.end))\n      );\n    });\n\n    if (overlappingEvent) {\n      if (addCssClass) {\n        event.cssClass = 'invalid-position';\n      } else {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  eventTimesChanged(\n    eventTimesChangedEvent: CalendarEventTimesChangedEvent\n  ): void {\n    delete eventTimesChangedEvent.event.cssClass;\n    if (this.validateEventTimesChanged(eventTimesChangedEvent, false)) {\n      const { event, newStart, newEnd } = eventTimesChangedEvent;\n      event.start = newStart;\n      event.end = newEnd;\n      this.refresh.next();\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/week-view-event-margin/component.ts","messages":[{"ruleId":"@angular-eslint/use-component-view-encapsulation","severity":2,"message":"Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect","line":14,"column":36,"nodeType":"Identifier","messageId":"useComponentViewEncapsulation","endLine":14,"endColumn":40,"suggestions":[{"messageId":"suggestRemoveViewEncapsulationNone","fix":{"range":[47,436],"text":",\n} from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\nimport { addDays, addHours, startOfDay } from 'date-fns';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: './template.html',\n  "},"desc":"Remove `ViewEncapsulation.None`"}]},{"ruleId":"@angular-eslint/component-max-inline-declarations","severity":2,"message":"`styles` has too many lines (7). Maximum allowed is 3 (https://angular.io/guide/styleguide#style-05-04)","line":15,"column":11,"nodeType":"ArrayExpression","messageId":"componentMaxInlineDeclarations","endLine":25,"endColumn":4}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  ChangeDetectionStrategy,\n  Component,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\nimport { addDays, addHours, startOfDay } from 'date-fns';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: './template.html',\n  encapsulation: ViewEncapsulation.None,\n  styles: [\n    `\n      .cal-week-view .cal-time-events .cal-day-column {\n        margin-right: 10px;\n      }\n\n      .cal-week-view .cal-hour {\n        width: calc(100% + 10px);\n      }\n    `,\n  ],\n})\nexport class DemoComponent {\n  view: CalendarView = CalendarView.Week;\n\n  viewDate: Date = new Date();\n\n  events: CalendarEvent[] = [\n    {\n      start: startOfDay(new Date()),\n      title: 'An event',\n      color: colors.yellow,\n    },\n    {\n      start: addHours(startOfDay(new Date()), 2),\n      end: new Date(),\n      title: 'Another event',\n      color: colors.blue,\n    },\n    {\n      start: addDays(addHours(startOfDay(new Date()), 2), 2),\n      end: addDays(new Date(), 2),\n      title: 'And another',\n      color: colors.red,\n    },\n  ];\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/week-view-minute-precision/component.ts","messages":[{"ruleId":"@angular-eslint/relative-url-prefix","severity":2,"message":"The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)","line":9,"column":16,"nodeType":"Literal","messageId":"relativeUrlPrefix","endLine":9,"endColumn":31}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent } from 'angular-calendar';\nimport { addDays, addHours, startOfDay } from 'date-fns';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: 'template.html',\n})\nexport class DemoComponent {\n  viewDate: Date = new Date();\n\n  events: CalendarEvent[] = [\n    {\n      start: addHours(startOfDay(new Date()), 5),\n      end: addHours(startOfDay(new Date()), 17),\n      title: 'Event 1',\n      color: colors.red,\n      allDay: true,\n    },\n    {\n      start: addHours(startOfDay(addDays(new Date(), 1)), 2),\n      end: addHours(startOfDay(addDays(new Date(), 1)), 18),\n      title: 'Event 2',\n      color: colors.blue,\n      allDay: true,\n    },\n    {\n      start: addHours(startOfDay(new Date()), 8),\n      title: 'Event 3',\n      color: colors.blue,\n      allDay: true,\n    },\n  ];\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/week-view-minute-precision/template.html","messages":[{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Attribute \"precision\" has no corresponding i18n attribute. See more at https://angular.io/guide/i18n#mark-element-attributes-for-translations","line":2,"column":3,"nodeType":null,"messageId":"i18nAttribute","endLine":2,"endColumn":12,"fix":{"range":[45,45],"text":" i18n-precision"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"<mwl-calendar-week-view\n  precision=\"minutes\"\n  [viewDate]=\"viewDate\"\n  [events]=\"events\"\n>\n</mwl-calendar-week-view>\n","usedDeprecatedRules":[{"ruleId":"@angular-eslint/template/accessibility-label-for","replacedBy":["accessibility-label-has-associated-control"]}]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/index.html","messages":[{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Attribute \"content\" has no corresponding i18n attribute. See more at https://angular.io/guide/i18n#mark-element-attributes-for-translations","line":5,"column":27,"nodeType":null,"messageId":"i18nAttribute","endLine":5,"endColumn":34,"fix":{"range":[142,142],"text":" i18n-content"}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Attribute \"http-equiv\" has no corresponding i18n attribute. See more at https://angular.io/guide/i18n#mark-element-attributes-for-translations","line":6,"column":11,"nodeType":null,"messageId":"i18nAttribute","endLine":6,"endColumn":21,"fix":{"range":[184,184],"text":" i18n-http-equiv"}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Attribute \"content\" has no corresponding i18n attribute. See more at https://angular.io/guide/i18n#mark-element-attributes-for-translations","line":6,"column":40,"nodeType":null,"messageId":"i18nAttribute","endLine":6,"endColumn":47,"fix":{"range":[202,202],"text":" i18n-content"}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":7,"column":12,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":7,"endColumn":34,"fix":{"range":[216,216],"text":" i18n"}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Attribute \"rel\" has no corresponding i18n attribute. See more at https://angular.io/guide/i18n#mark-element-attributes-for-translations","line":8,"column":11,"nodeType":null,"messageId":"i18nAttribute","endLine":8,"endColumn":14,"fix":{"range":[268,268],"text":" i18n-rel"}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":23,"column":19,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":23,"endColumn":34,"fix":{"range":[588,588],"text":" i18n"}},{"ruleId":"@angular-eslint/template/accessibility-alt-text","severity":2,"message":"<img/> element must have a text alternative.","line":40,"column":5,"nodeType":null,"messageId":"accessibilityAltText","endLine":42,"endColumn":7}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":6,"fixableWarningCount":0,"source":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\" />\n    <title>Angular 15.0+ calendar</title>\n    <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\" />\n\n    <style type=\"text/css\">\n      .formkit-slide-in {\n        max-width: 350px !important;\n        z-index: 1 !important;\n      }\n\n      .formkit-slide-in .formkit-close {\n        z-index: 3;\n        top: 0 !important;\n      }\n    </style>\n  </head>\n  <body>\n    <mwl-demo-app>Loading demo...</mwl-demo-app>\n\n    <!-- Global site tag (gtag.js) - Google Analytics -->\n    <script\n      async\n      src=\"https://www.googletagmanager.com/gtag/js?id=G-6NL16F0Q9N\"\n    ></script>\n    <script>\n      window.dataLayer = window.dataLayer || [];\n      function gtag() {\n        dataLayer.push(arguments);\n      }\n      gtag('js', new Date());\n\n      gtag('config', 'G-6NL16F0Q9N');\n    </script>\n\n    <img\n      src=\"https://static.scarf.sh/a.png?x-pxid=a9c630e9-616e-4308-9af7-8b201184d66c\"\n    />\n  </body>\n</html>\n","usedDeprecatedRules":[{"ruleId":"@angular-eslint/template/accessibility-label-for","replacedBy":["accessibility-label-has-associated-control"]}]}]

Linting "angular-calendar"...
[{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/calendar.module.ts","messages":[{"ruleId":"@angular-eslint/sort-ngmodule-metadata-arrays","severity":2,"message":"`NgModule` metadata arrays should be sorted in ASC alphabetical order","line":39,"column":5,"nodeType":"Identifier","messageId":"sortNgmoduleMetadataArrays","endLine":39,"endColumn":22,"fix":{"range":[1032,1073],"text":"CalendarDayModule,\n    CalendarWeekModule"}},{"ruleId":"@angular-eslint/sort-ngmodule-metadata-arrays","severity":2,"message":"`NgModule` metadata arrays should be sorted in ASC alphabetical order","line":45,"column":5,"nodeType":"Identifier","messageId":"sortNgmoduleMetadataArrays","endLine":45,"endColumn":22,"fix":{"range":[1148,1189],"text":"CalendarDayModule,\n    CalendarWeekModule"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import { NgModule, ModuleWithProviders, Provider } from '@angular/core';\nimport {\n  CalendarCommonModule,\n  CalendarModuleConfig,\n  CalendarEventTitleFormatter,\n  CalendarDateFormatter,\n  CalendarA11y,\n} from './common/calendar-common.module';\nimport { CalendarMonthModule } from './month/calendar-month.module';\nimport { CalendarWeekModule } from './week/calendar-week.module';\nimport { CalendarDayModule } from './day/calendar-day.module';\nimport { CalendarUtils } from './common/calendar-utils/calendar-utils.provider';\n\nexport * from './common/calendar-common.module';\nexport * from './month/calendar-month.module';\nexport * from './week/calendar-week.module';\nexport * from './day/calendar-day.module';\n\n/**\n * The main module of this library. Example usage:\n *\n * ```typescript\n * import { CalenderModule } from 'angular-calendar';\n *\n * @NgModule({\n *   imports: [\n *     CalenderModule.forRoot()\n *   ]\n * })\n * class MyModule {}\n * ```\n *\n */\n@NgModule({\n  imports: [\n    CalendarCommonModule,\n    CalendarMonthModule,\n    CalendarWeekModule,\n    CalendarDayModule,\n  ],\n  exports: [\n    CalendarCommonModule,\n    CalendarMonthModule,\n    CalendarWeekModule,\n    CalendarDayModule,\n  ],\n})\nexport class CalendarModule {\n  static forRoot(\n    dateAdapter: Provider,\n    config: CalendarModuleConfig = {}\n  ): ModuleWithProviders<CalendarModule> {\n    return {\n      ngModule: CalendarModule,\n      providers: [\n        dateAdapter,\n        config.eventTitleFormatter || CalendarEventTitleFormatter,\n        config.dateFormatter || CalendarDateFormatter,\n        config.utils || CalendarUtils,\n        config.a11y || CalendarA11y,\n      ],\n    };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/common/calendar-a11y/calendar-a11y.pipe.spec.ts","messages":[{"ruleId":"@angular-eslint/use-component-selector","severity":2,"message":"The selector of the component is mandatory","line":7,"column":1,"nodeType":"Decorator","messageId":"useComponentSelector","endLine":9,"endColumn":3},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":7,"column":1,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":9,"endColumn":3,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[18,307],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { expect } from 'chai';\nimport { A11yParams, CalendarModule, DateAdapter } from 'angular-calendar';\nimport { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component } from '@angular/core';\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { expect } from 'chai';\nimport { A11yParams, CalendarModule, DateAdapter } from 'angular-calendar';\nimport { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\n\n@Component({\n  template: '{{ a11yParams | calendarA11y:method }}',\n})\nclass TestComponent {\n  a11yParams: A11yParams;\n  method: string;\n}\n\ndescribe('calendarA11y pipe', () => {\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [\n        CalendarModule.forRoot({\n          provide: DateAdapter,\n          useFactory: adapterFactory,\n        }),\n      ],\n      declarations: [TestComponent],\n    });\n  });\n\n  it('should throw when an invalid method is passed', () => {\n    const fixture: ComponentFixture<TestComponent> =\n      TestBed.createComponent(TestComponent);\n    fixture.componentInstance.a11yParams = {};\n    fixture.componentInstance.method = 'invalid';\n    expect(() => fixture.detectChanges()).to.throw(\n      /^invalid is not a valid a11y method. Can only be one of/\n    );\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/common/calendar-a11y/calendar-a11y.provider.ts","messages":[{"ruleId":"@angular-eslint/use-injectable-provided-in","severity":2,"message":"The `providedIn` property is mandatory for `Injectables`","line":45,"column":1,"nodeType":"Decorator","messageId":"useInjectableProvidedIn","endLine":45,"endColumn":14,"suggestions":[{"messageId":"suggestInjector","fix":{"range":[1349,1349],"text":"{providedIn: 'any'}"},"data":{"injector":"any"},"desc":"Use `providedIn: 'any'`"},{"messageId":"suggestInjector","fix":{"range":[1349,1349],"text":"{providedIn: 'platform'}"},"data":{"injector":"platform"},"desc":"Use `providedIn: 'platform'`"},{"messageId":"suggestInjector","fix":{"range":[1349,1349],"text":"{providedIn: 'root'}"},"data":{"injector":"root"},"desc":"Use `providedIn: 'root'`"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Injectable } from '@angular/core';\nimport { formatDate, I18nPluralPipe } from '@angular/common';\nimport { A11yParams } from './calendar-a11y.interface';\n\n/**\n * This class is responsible for adding accessibility to the calendar.\n * You may override any of its methods via angulars DI to suit your requirements.\n * For example:\n *\n * ```typescript\n * import { A11yParams, CalendarA11y } from 'angular-calendar';\n * import { formatDate, I18nPluralPipe } from '@angular/common';\n * import { Injectable } from '@angular/core';\n *\n * // adding your own a11y params\n * export interface CustomA11yParams extends A11yParams {\n *   isDrSuess?: boolean;\n * }\n *\n * @Injectable()\n * export class CustomCalendarA11y extends CalendarA11y {\n *   constructor(protected i18nPlural: I18nPluralPipe) {\n *     super(i18nPlural);\n *   }\n *\n *   // overriding a function\n *   public openDayEventsLandmark({ date, locale, isDrSuess }: CustomA11yParams): string {\n *     if (isDrSuess) {\n *       return `\n *         ${formatDate(date, 'EEEE MMMM d', locale)}\n *          Today you are you! That is truer than true! There is no one alive\n *          who is you-er than you!\n *       `;\n *     }\n *   }\n * }\n *\n * // in your component that uses the calendar\n * providers: [{\n *  provide: CalendarA11y,\n *  useClass: CustomCalendarA11y\n * }]\n * ```\n */\n@Injectable()\nexport class CalendarA11y {\n  constructor(protected i18nPlural: I18nPluralPipe) {}\n\n  /**\n   * Aria label for the badges/date of a cell\n   * @example: `Saturday October 19 1 event click to expand`\n   */\n  public monthCell({ day, locale }: A11yParams): string {\n    if (day.badgeTotal > 0) {\n      return `\n        ${formatDate(day.date, 'EEEE MMMM d', locale)},\n        ${this.i18nPlural.transform(day.badgeTotal, {\n          '=0': 'No events',\n          '=1': 'One event',\n          other: '# events',\n        })},\n         click to expand\n      `;\n    } else {\n      return `${formatDate(day.date, 'EEEE MMMM d', locale)}`;\n    }\n  }\n\n  /**\n   * Aria label for the open day events start landmark\n   * @example: `Saturday October 19 expanded view`\n   */\n  public openDayEventsLandmark({ date, locale }: A11yParams): string {\n    return `\n      Beginning of expanded view for ${formatDate(date, 'EEEE MMMM dd', locale)}\n    `;\n  }\n\n  /**\n   * Aria label for alert that a day in the month view was expanded\n   * @example: `Saturday October 19 expanded`\n   */\n  public openDayEventsAlert({ date, locale }: A11yParams): string {\n    return `${formatDate(date, 'EEEE MMMM dd', locale)} expanded`;\n  }\n\n  /**\n   * Descriptive aria label for an event\n   * @example: `Saturday October 19th, Scott's Pizza Party, from 11:00am to 5:00pm`\n   */\n  public eventDescription({ event, locale }: A11yParams): string {\n    if (event.allDay === true) {\n      return this.allDayEventDescription({ event, locale });\n    }\n\n    const aria = `\n      ${formatDate(event.start, 'EEEE MMMM dd', locale)},\n      ${event.title}, from ${formatDate(event.start, 'hh:mm a', locale)}\n    `;\n    if (event.end) {\n      return aria + ` to ${formatDate(event.end, 'hh:mm a', locale)}`;\n    }\n    return aria;\n  }\n\n  /**\n   * Descriptive aria label for an all day event\n   * @example:\n   * `Scott's Party, event spans multiple days: start time October 19 5:00pm, no stop time`\n   */\n  public allDayEventDescription({ event, locale }: A11yParams): string {\n    const aria = `\n      ${event.title}, event spans multiple days:\n      start time ${formatDate(event.start, 'MMMM dd hh:mm a', locale)}\n    `;\n    if (event.end) {\n      return (\n        aria + `, stop time ${formatDate(event.end, 'MMMM d hh:mm a', locale)}`\n      );\n    }\n    return aria + `, no stop time`;\n  }\n\n  /**\n   * Aria label for the calendar event actions icons\n   * @returns 'Edit' for fa-pencil icons, and 'Delete' for fa-times icons\n   */\n  public actionButtonLabel({ action }: A11yParams): string {\n    return action.a11yLabel;\n  }\n\n  /**\n   * @returns {number} Tab index to be given to month cells\n   */\n  public monthCellTabIndex(): number {\n    return 0;\n  }\n\n  /**\n   * @returns true if the events inside the month cell should be aria-hidden\n   */\n  public hideMonthCellEvents(): boolean {\n    return true;\n  }\n\n  /**\n   * @returns true if event titles should be aria-hidden (global)\n   */\n  public hideEventTitle(): boolean {\n    return true;\n  }\n\n  /**\n   * @returns true if hour segments in the week view should be aria-hidden\n   */\n  public hideWeekHourSegment(): boolean {\n    return true;\n  }\n\n  /**\n   * @returns true if hour segments in the day view should be aria-hidden\n   */\n  public hideDayHourSegment(): boolean {\n    return true;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/common/calendar-angular-date-formatter/calendar-angular-date-formatter.provider.ts","messages":[{"ruleId":"@angular-eslint/use-injectable-provided-in","severity":2,"message":"The `providedIn` property is mandatory for `Injectables`","line":13,"column":1,"nodeType":"Decorator","messageId":"useInjectableProvidedIn","endLine":13,"endColumn":14,"suggestions":[{"messageId":"suggestInjector","fix":{"range":[486,486],"text":"{providedIn: 'any'}"},"data":{"injector":"any"},"desc":"Use `providedIn: 'any'`"},{"messageId":"suggestInjector","fix":{"range":[486,486],"text":"{providedIn: 'platform'}"},"data":{"injector":"platform"},"desc":"Use `providedIn: 'platform'`"},{"messageId":"suggestInjector","fix":{"range":[486,486],"text":"{providedIn: 'root'}"},"data":{"injector":"root"},"desc":"Use `providedIn: 'root'`"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  CalendarDateFormatterInterface,\n  DateFormatterParams,\n} from '../calendar-date-formatter/calendar-date-formatter.interface';\nimport { formatDate } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { DateAdapter } from '../../../date-adapters/date-adapter';\nimport { getWeekViewPeriod } from '../util/util';\n\n/**\n * This will use the angular date pipe to do all date formatting. It is the default date formatter used by the calendar.\n */\n@Injectable()\nexport class CalendarAngularDateFormatter\n  implements CalendarDateFormatterInterface\n{\n  constructor(protected dateAdapter: DateAdapter) {}\n\n  /**\n   * The month view header week day labels\n   */\n  public monthViewColumnHeader({ date, locale }: DateFormatterParams): string {\n    return formatDate(date, 'EEEE', locale);\n  }\n\n  /**\n   * The month view cell day number\n   */\n  public monthViewDayNumber({ date, locale }: DateFormatterParams): string {\n    return formatDate(date, 'd', locale);\n  }\n\n  /**\n   * The month view title\n   */\n  public monthViewTitle({ date, locale }: DateFormatterParams): string {\n    return formatDate(date, 'LLLL y', locale);\n  }\n\n  /**\n   * The week view header week day labels\n   */\n  public weekViewColumnHeader({ date, locale }: DateFormatterParams): string {\n    return formatDate(date, 'EEEE', locale);\n  }\n\n  /**\n   * The week view sub header day and month labels\n   */\n  public weekViewColumnSubHeader({\n    date,\n    locale,\n  }: DateFormatterParams): string {\n    return formatDate(date, 'MMM d', locale);\n  }\n\n  /**\n   * The week view title\n   */\n  public weekViewTitle({\n    date,\n    locale,\n    weekStartsOn,\n    excludeDays,\n    daysInWeek,\n  }: DateFormatterParams): string {\n    const { viewStart, viewEnd } = getWeekViewPeriod(\n      this.dateAdapter,\n      date,\n      weekStartsOn,\n      excludeDays,\n      daysInWeek\n    );\n    const format = (dateToFormat: Date, showYear: boolean) =>\n      formatDate(dateToFormat, 'MMM d' + (showYear ? ', yyyy' : ''), locale);\n    return `${format(\n      viewStart,\n      viewStart.getUTCFullYear() !== viewEnd.getUTCFullYear()\n    )} - ${format(viewEnd, true)}`;\n  }\n\n  /**\n   * The time formatting down the left hand side of the week view\n   */\n  public weekViewHour({ date, locale }: DateFormatterParams): string {\n    return formatDate(date, 'h a', locale);\n  }\n\n  /**\n   * The time formatting down the left hand side of the day view\n   */\n  public dayViewHour({ date, locale }: DateFormatterParams): string {\n    return formatDate(date, 'h a', locale);\n  }\n\n  /**\n   * The day view title\n   */\n  public dayViewTitle({ date, locale }: DateFormatterParams): string {\n    return formatDate(date, 'EEEE, MMMM d, y', locale);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/common/calendar-common.module.ts","messages":[{"ruleId":"@angular-eslint/sort-ngmodule-metadata-arrays","severity":2,"message":"`NgModule` metadata arrays should be sorted in ASC alphabetical order","line":86,"column":5,"nodeType":"Identifier","messageId":"sortNgmoduleMetadataArrays","endLine":86,"endColumn":29,"fix":{"range":[4510,4570],"text":"CalendarTooltipDirective,\n    CalendarTooltipWindowComponent"}},{"ruleId":"@angular-eslint/sort-ngmodule-metadata-arrays","severity":2,"message":"`NgModule` metadata arrays should be sorted in ASC alphabetical order","line":101,"column":5,"nodeType":"Identifier","messageId":"sortNgmoduleMetadataArrays","endLine":101,"endColumn":29,"fix":{"range":[4902,4962],"text":"CalendarTooltipDirective,\n    CalendarTooltipWindowComponent"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import { ModuleWithProviders, NgModule, Provider } from '@angular/core';\nimport { CommonModule, I18nPluralPipe } from '@angular/common';\nimport { CalendarEventActionsComponent } from './calendar-event-actions/calendar-event-actions.component';\nimport { CalendarEventTitleComponent } from './calendar-event-title/calendar-event-title.component';\nimport {\n  CalendarTooltipDirective,\n  CalendarTooltipWindowComponent,\n} from './calendar-tooltip/calendar-tooltip.directive';\nimport { CalendarPreviousViewDirective } from './calendar-previous-view/calendar-previous-view.directive';\nimport { CalendarNextViewDirective } from './calendar-next-view/calendar-next-view.directive';\nimport { CalendarTodayDirective } from './calendar-today/calendar-today.directive';\nimport { CalendarDatePipe } from './calendar-date/calendar-date.pipe';\nimport { CalendarEventTitlePipe } from './calendar-event-title/calendar-event-title.pipe';\nimport { ClickDirective } from './click/click.directive';\nimport { KeydownEnterDirective } from './keydown-enter/keydown-enter.directive';\nimport { CalendarEventTitleFormatter } from './calendar-event-title-formatter/calendar-event-title-formatter.provider';\nimport { CalendarDateFormatter } from './calendar-date-formatter/calendar-date-formatter.provider';\nimport { CalendarUtils } from './calendar-utils/calendar-utils.provider';\nimport { CalendarA11y } from './calendar-a11y/calendar-a11y.provider';\nimport { CalendarA11yPipe } from './calendar-a11y/calendar-a11y.pipe';\n\nexport interface CalendarModuleConfig {\n  eventTitleFormatter?: Provider;\n  dateFormatter?: Provider;\n  utils?: Provider;\n  a11y?: Provider;\n}\n\nexport * from './calendar-event-title-formatter/calendar-event-title-formatter.provider';\nexport * from './calendar-moment-date-formatter/calendar-moment-date-formatter.provider';\nexport * from './calendar-native-date-formatter/calendar-native-date-formatter.provider';\nexport * from './calendar-angular-date-formatter/calendar-angular-date-formatter.provider';\nexport * from './calendar-date-formatter/calendar-date-formatter.provider';\nexport * from './calendar-utils/calendar-utils.provider';\nexport * from './calendar-a11y/calendar-a11y.provider';\nexport * from './calendar-a11y/calendar-a11y.interface';\nexport * from './calendar-date-formatter/calendar-date-formatter.interface';\nexport * from './calendar-event-times-changed-event/calendar-event-times-changed-event.interface';\nexport * from '../../date-adapters/date-adapter';\nexport * from './calendar-view/calendar-view.enum';\n\n// needed for ivy, not part of the public api\nexport { CalendarEventActionsComponent as ɵCalendarEventActionsComponent } from './calendar-event-actions/calendar-event-actions.component';\nexport { CalendarEventTitleComponent as ɵCalendarEventTitleComponent } from './calendar-event-title/calendar-event-title.component';\nexport {\n  CalendarTooltipDirective as ɵCalendarTooltipDirective,\n  CalendarTooltipWindowComponent as ɵCalendarTooltipWindowComponent,\n} from './calendar-tooltip/calendar-tooltip.directive';\nexport { CalendarPreviousViewDirective as ɵCalendarPreviousViewDirective } from './calendar-previous-view/calendar-previous-view.directive';\nexport { CalendarNextViewDirective as ɵCalendarNextViewDirective } from './calendar-next-view/calendar-next-view.directive';\nexport { CalendarTodayDirective as ɵCalendarTodayDirective } from './calendar-today/calendar-today.directive';\nexport { CalendarDatePipe as ɵCalendarDatePipe } from './calendar-date/calendar-date.pipe';\nexport { CalendarEventTitlePipe as ɵCalendarEventTitlePipe } from './calendar-event-title/calendar-event-title.pipe';\nexport { ClickDirective as ɵClickDirective } from './click/click.directive';\nexport { KeydownEnterDirective as ɵKeydownEnterDirective } from './keydown-enter/keydown-enter.directive';\nexport { CalendarA11yPipe as ɵCalendarA11yPipe } from './calendar-a11y/calendar-a11y.pipe';\n\nexport {\n  CalendarEvent,\n  EventAction as CalendarEventAction,\n  DAYS_OF_WEEK,\n  ViewPeriod as CalendarViewPeriod,\n} from 'calendar-utils';\n\n/**\n * Import this module to if you're just using a singular view and want to save on bundle size. Example usage:\n *\n * ```typescript\n * import { CalendarCommonModule, CalendarMonthModule } from 'angular-calendar';\n *\n * @NgModule({\n *   imports: [\n *     CalendarCommonModule.forRoot(),\n *     CalendarMonthModule\n *   ]\n * })\n * class MyModule {}\n * ```\n *\n */\n@NgModule({\n  declarations: [\n    CalendarEventActionsComponent,\n    CalendarEventTitleComponent,\n    CalendarTooltipWindowComponent,\n    CalendarTooltipDirective,\n    CalendarPreviousViewDirective,\n    CalendarNextViewDirective,\n    CalendarTodayDirective,\n    CalendarDatePipe,\n    CalendarEventTitlePipe,\n    CalendarA11yPipe,\n    ClickDirective,\n    KeydownEnterDirective,\n  ],\n  imports: [CommonModule],\n  exports: [\n    CalendarEventActionsComponent,\n    CalendarEventTitleComponent,\n    CalendarTooltipWindowComponent,\n    CalendarTooltipDirective,\n    CalendarPreviousViewDirective,\n    CalendarNextViewDirective,\n    CalendarTodayDirective,\n    CalendarDatePipe,\n    CalendarEventTitlePipe,\n    CalendarA11yPipe,\n    ClickDirective,\n    KeydownEnterDirective,\n  ],\n  providers: [I18nPluralPipe],\n})\nexport class CalendarCommonModule {\n  static forRoot(\n    dateAdapter: Provider,\n    config: CalendarModuleConfig = {}\n  ): ModuleWithProviders<CalendarCommonModule> {\n    return {\n      ngModule: CalendarCommonModule,\n      providers: [\n        dateAdapter,\n        config.eventTitleFormatter || CalendarEventTitleFormatter,\n        config.dateFormatter || CalendarDateFormatter,\n        config.utils || CalendarUtils,\n        config.a11y || CalendarA11y,\n      ],\n    };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/common/calendar-date-formatter/calendar-date-formatter.provider.ts","messages":[{"ruleId":"@angular-eslint/use-injectable-provided-in","severity":2,"message":"The `providedIn` property is mandatory for `Injectables`","line":30,"column":1,"nodeType":"Decorator","messageId":"useInjectableProvidedIn","endLine":30,"endColumn":14,"suggestions":[{"messageId":"suggestInjector","fix":{"range":[1375,1375],"text":"{providedIn: 'any'}"},"data":{"injector":"any"},"desc":"Use `providedIn: 'any'`"},{"messageId":"suggestInjector","fix":{"range":[1375,1375],"text":"{providedIn: 'platform'}"},"data":{"injector":"platform"},"desc":"Use `providedIn: 'platform'`"},{"messageId":"suggestInjector","fix":{"range":[1375,1375],"text":"{providedIn: 'root'}"},"data":{"injector":"root"},"desc":"Use `providedIn: 'root'`"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CalendarAngularDateFormatter } from '../calendar-angular-date-formatter/calendar-angular-date-formatter.provider';\nimport { Injectable } from '@angular/core';\n\n/**\n * This class is responsible for all formatting of dates. There are 3 implementations available, the `CalendarAngularDateFormatter` (default) which uses the angular date pipe to format dates, the `CalendarNativeDateFormatter` which will use the <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Intl\" target=\"_blank\">Intl</a> API to format dates, or there is the `CalendarMomentDateFormatter` which uses <a href=\"http://momentjs.com/\" target=\"_blank\">moment</a>.\n *\n * If you wish, you may override any of the defaults via angulars DI. For example:\n *\n * ```typescript\n * import { CalendarDateFormatter, DateFormatterParams } from 'angular-calendar';\n * import { formatDate } from '@angular/common';\n * import { Injectable } from '@angular/core';\n *\n * @Injectable()\n * class CustomDateFormatter extends CalendarDateFormatter {\n *\n *   public monthViewColumnHeader({date, locale}: DateFormatterParams): string {\n *     return formatDate(date, 'EEE', locale); // use short week days\n *   }\n *\n * }\n *\n * // in your component that uses the calendar\n * providers: [{\n *   provide: CalendarDateFormatter,\n *   useClass: CustomDateFormatter\n * }]\n * ```\n */\n@Injectable()\nexport class CalendarDateFormatter extends CalendarAngularDateFormatter {}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/common/calendar-date/calendar-date.pipe.spec.ts","messages":[{"ruleId":"@angular-eslint/use-component-selector","severity":2,"message":"The selector of the component is mandatory","line":15,"column":1,"nodeType":"Decorator","messageId":"useComponentSelector","endLine":18,"endColumn":3},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":15,"column":1,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":18,"endColumn":3,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[29,476],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { inject, ComponentFixture, TestBed } from '@angular/core/testing';\nimport { expect } from 'chai';\nimport { spy } from 'sinon';\nimport moment from 'moment';\nimport {\n  CalendarModule,\n  CalendarMomentDateFormatter,\n  CalendarDateFormatter,\n  MOMENT,\n} from 'angular-calendar';\nimport { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\nimport { DateAdapter } from 'angular-calendar';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, LOCALE_ID } from '@angular/core';\nimport { inject, ComponentFixture, TestBed } from '@angular/core/testing';\nimport { expect } from 'chai';\nimport { spy } from 'sinon';\nimport moment from 'moment';\nimport {\n  CalendarModule,\n  CalendarMomentDateFormatter,\n  CalendarDateFormatter,\n  MOMENT,\n} from 'angular-calendar';\nimport { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\nimport { DateAdapter } from 'angular-calendar';\n\n@Component({\n  template:\n    '{{ date | calendarDate:method:locale:weekStartsOn:excludeDays:daysInWeek }}',\n})\nclass TestComponent {\n  date: Date;\n  view: string;\n  format: string;\n  locale: string;\n  method: string;\n  daysInWeek: number;\n  excludeDays: number[];\n  weekStartsOn: number;\n}\n\ndescribe('calendarDate pipe', () => {\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [\n        CalendarModule.forRoot(\n          {\n            provide: DateAdapter,\n            useFactory: adapterFactory,\n          },\n          {\n            dateFormatter: {\n              provide: CalendarDateFormatter,\n              useClass: CalendarMomentDateFormatter,\n            },\n          }\n        ),\n      ],\n      declarations: [TestComponent],\n      providers: [{ provide: MOMENT, useValue: moment }],\n    });\n  });\n\n  let dateFormatter: CalendarDateFormatter;\n  let defaultLocale: string;\n  beforeEach(inject(\n    [CalendarDateFormatter, LOCALE_ID],\n    (_dateFormatter_, locale) => {\n      dateFormatter = _dateFormatter_;\n      defaultLocale = locale;\n    }\n  ));\n\n  it('should use the date formatter to format the date', () => {\n    const fixture: ComponentFixture<TestComponent> =\n      TestBed.createComponent(TestComponent);\n    spy(dateFormatter, 'monthViewColumnHeader');\n    fixture.componentInstance.date = new Date('2016-01-01');\n    fixture.componentInstance.method = 'monthViewColumnHeader';\n    fixture.detectChanges();\n    expect(fixture.nativeElement.innerHTML).to.equal('Friday');\n    expect(dateFormatter.monthViewColumnHeader).to.have.been.calledWith({\n      date: fixture.componentInstance.date,\n      locale: defaultLocale,\n      daysInWeek: undefined,\n      excludeDays: [],\n      weekStartsOn: 0,\n    });\n  });\n\n  it('should allow the locale to be customised', () => {\n    const fixture: ComponentFixture<TestComponent> =\n      TestBed.createComponent(TestComponent);\n    fixture.componentInstance.locale = 'de';\n    spy(dateFormatter, 'monthViewColumnHeader');\n    fixture.componentInstance.date = new Date('2016-01-01');\n    fixture.componentInstance.method = 'monthViewColumnHeader';\n    fixture.detectChanges();\n    expect(fixture.nativeElement.innerHTML).to.equal('Freitag');\n    expect(dateFormatter.monthViewColumnHeader).to.have.been.calledWith({\n      date: fixture.componentInstance.date,\n      locale: 'de',\n      daysInWeek: undefined,\n      excludeDays: [],\n      weekStartsOn: 0,\n    });\n  });\n\n  it('should throw when an invalid method is passed', () => {\n    const fixture: ComponentFixture<TestComponent> =\n      TestBed.createComponent(TestComponent);\n    fixture.componentInstance.date = new Date('2016-01-01');\n    fixture.componentInstance.method = 'invalid';\n    expect(() => fixture.detectChanges()).to.throw(\n      /^invalid is not a valid date formatter. Can only be one of/\n    );\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/common/calendar-event-actions/calendar-event-actions.component.ts","messages":[{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":4,"column":1,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":41,"endColumn":3,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[38,140],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent, EventAction } from 'calendar-utils';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/component-max-inline-declarations","severity":2,"message":"`template` has too many lines (33). Maximum allowed is 3 (https://angular.io/guide/styleguide#style-05-04)","line":6,"column":13,"nodeType":"TemplateLiteral","messageId":"componentMaxInlineDeclarations","endLine":40,"endColumn":4},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `*ngFor`, `*ngForOf`, `*ngForTrackBy`, `class`, `href`, `tabindex`, `role`, `[ngClass]`, `[innerHtml]`, `[aria-label]`, `(mwlClick)`, `(mwlKeydownEnter)` instead of `class`, `href`, `*ngFor`, `*ngForOf`, `*ngForTrackBy`, `(mwlClick)`, `(mwlKeydownEnter)`, `[ngClass]`, `[innerHtml]`, `tabindex`, `role`, `[aria-label]`","line":14,"column":11,"nodeType":null,"messageId":"attributesOrder","endLine":27,"endColumn":12,"fix":{"range":[389,933],"text":"*ngFor=\n           of event.actions; t\n           trackBy: trackByActionId\"\"let actionclass=\"cal-event-action\"href=\"javascript:;\"\n          tabindex=\"0\"\n          role=\"button\"\n          [ngClass]=\"action.cssClass\"\n          [innerHtml]=\"action.label\"\n          [attr.aria-label]=\"\n            { action: action } | calendarA11y : 'actionButtonLabel'\n          \"\n          (mwlClick)=\"action.onClick({ event: event, sourceEvent: $event })\"\n          (mwlKeydownEnter)=\"\n            action.onClick({ event: event, sourceEvent: $event })\n          \""}}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { Component, Input, TemplateRef } from '@angular/core';\nimport { CalendarEvent, EventAction } from 'calendar-utils';\n\n@Component({\n  selector: 'mwl-calendar-event-actions',\n  template: `\n    <ng-template\n      #defaultTemplate\n      let-event=\"event\"\n      let-trackByActionId=\"trackByActionId\"\n    >\n      <span *ngIf=\"event.actions\" class=\"cal-event-actions\">\n        <a\n          class=\"cal-event-action\"\n          href=\"javascript:;\"\n          *ngFor=\"let action of event.actions; trackBy: trackByActionId\"\n          (mwlClick)=\"action.onClick({ event: event, sourceEvent: $event })\"\n          (mwlKeydownEnter)=\"\n            action.onClick({ event: event, sourceEvent: $event })\n          \"\n          [ngClass]=\"action.cssClass\"\n          [innerHtml]=\"action.label\"\n          tabindex=\"0\"\n          role=\"button\"\n          [attr.aria-label]=\"\n            { action: action } | calendarA11y : 'actionButtonLabel'\n          \"\n        >\n        </a>\n      </span>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{\n        event: event,\n        trackByActionId: trackByActionId\n      }\"\n    >\n    </ng-template>\n  `,\n})\nexport class CalendarEventActionsComponent {\n  @Input() event: CalendarEvent;\n\n  @Input() customTemplate: TemplateRef<any>;\n\n  trackByActionId = (index: number, action: EventAction) =>\n    action.id ? action.id : action;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/common/calendar-event-title/calendar-event-title.component.ts","messages":[{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":4,"column":1,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":24,"endColumn":3,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[38,127],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent } from 'calendar-utils';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/component-max-inline-declarations","severity":2,"message":"`template` has too many lines (16). Maximum allowed is 3 (https://angular.io/guide/styleguide#style-05-04)","line":6,"column":13,"nodeType":"TemplateLiteral","messageId":"componentMaxInlineDeclarations","endLine":23,"endColumn":4}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, Input, TemplateRef } from '@angular/core';\nimport { CalendarEvent } from 'calendar-utils';\n\n@Component({\n  selector: 'mwl-calendar-event-title',\n  template: `\n    <ng-template #defaultTemplate let-event=\"event\" let-view=\"view\">\n      <span\n        class=\"cal-event-title\"\n        [innerHTML]=\"event.title | calendarEventTitle : view : event\"\n        [attr.aria-hidden]=\"{} | calendarA11y : 'hideEventTitle'\"\n      >\n      </span>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{\n        event: event,\n        view: view\n      }\"\n    >\n    </ng-template>\n  `,\n})\nexport class CalendarEventTitleComponent {\n  @Input() event: CalendarEvent;\n\n  @Input() customTemplate: TemplateRef<any>;\n\n  @Input() view: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/common/calendar-moment-date-formatter/calendar-moment-date-formatter.provider.ts","messages":[{"ruleId":"@angular-eslint/use-injectable-provided-in","severity":2,"message":"The `providedIn` property is mandatory for `Injectables`","line":27,"column":1,"nodeType":"Decorator","messageId":"useInjectableProvidedIn","endLine":27,"endColumn":14,"suggestions":[{"messageId":"suggestInjector","fix":{"range":[871,871],"text":"{providedIn: 'any'}"},"data":{"injector":"any"},"desc":"Use `providedIn: 'any'`"},{"messageId":"suggestInjector","fix":{"range":[871,871],"text":"{providedIn: 'platform'}"},"data":{"injector":"platform"},"desc":"Use `providedIn: 'platform'`"},{"messageId":"suggestInjector","fix":{"range":[871,871],"text":"{providedIn: 'root'}"},"data":{"injector":"root"},"desc":"Use `providedIn: 'root'`"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { InjectionToken, Inject, Injectable } from '@angular/core';\nimport {\n  CalendarDateFormatterInterface,\n  DateFormatterParams,\n} from '../calendar-date-formatter/calendar-date-formatter.interface';\nimport { getWeekViewPeriod } from '../util/util';\nimport { DateAdapter } from '../../../date-adapters/date-adapter';\n\nexport const MOMENT: InjectionToken<string> = new InjectionToken('Moment');\n\n/**\n * This will use <a href=\"http://momentjs.com/\" target=\"_blank\">moment</a> to do all date formatting. To use this class:\n *\n * ```typescript\n * import { CalendarDateFormatter, CalendarMomentDateFormatter, MOMENT } from 'angular-calendar';\n * import moment from 'moment';\n *\n * // in your component\n * provide: [{\n *   provide: MOMENT, useValue: moment\n * }, {\n *   provide: CalendarDateFormatter, useClass: CalendarMomentDateFormatter\n * }]\n *\n * ```\n */\n@Injectable()\nexport class CalendarMomentDateFormatter\n  implements CalendarDateFormatterInterface\n{\n  /**\n   * @hidden\n   */\n  constructor(\n    @Inject(MOMENT) protected moment: any,\n    protected dateAdapter: DateAdapter\n  ) {}\n\n  /**\n   * The month view header week day labels\n   */\n  public monthViewColumnHeader({ date, locale }: DateFormatterParams): string {\n    return this.moment(date).locale(locale).format('dddd');\n  }\n\n  /**\n   * The month view cell day number\n   */\n  public monthViewDayNumber({ date, locale }: DateFormatterParams): string {\n    return this.moment(date).locale(locale).format('D');\n  }\n\n  /**\n   * The month view title\n   */\n  public monthViewTitle({ date, locale }: DateFormatterParams): string {\n    return this.moment(date).locale(locale).format('MMMM YYYY');\n  }\n\n  /**\n   * The week view header week day labels\n   */\n  public weekViewColumnHeader({ date, locale }: DateFormatterParams): string {\n    return this.moment(date).locale(locale).format('dddd');\n  }\n\n  /**\n   * The week view sub header day and month labels\n   */\n  public weekViewColumnSubHeader({\n    date,\n    locale,\n  }: DateFormatterParams): string {\n    return this.moment(date).locale(locale).format('MMM D');\n  }\n\n  /**\n   * The week view title\n   */\n  public weekViewTitle({\n    date,\n    locale,\n    weekStartsOn,\n    excludeDays,\n    daysInWeek,\n  }: DateFormatterParams): string {\n    const { viewStart, viewEnd } = getWeekViewPeriod(\n      this.dateAdapter,\n      date,\n      weekStartsOn,\n      excludeDays,\n      daysInWeek\n    );\n    const format = (dateToFormat: Date, showYear: boolean) =>\n      this.moment(dateToFormat)\n        .locale(locale)\n        .format('MMM D' + (showYear ? ', YYYY' : ''));\n    return `${format(\n      viewStart,\n      viewStart.getUTCFullYear() !== viewEnd.getUTCFullYear()\n    )} - ${format(viewEnd, true)}`;\n  }\n\n  /**\n   * The time formatting down the left hand side of the week view\n   */\n  public weekViewHour({ date, locale }: DateFormatterParams): string {\n    return this.moment(date).locale(locale).format('ha');\n  }\n\n  /**\n   * The time formatting down the left hand side of the day view\n   */\n  public dayViewHour({ date, locale }: DateFormatterParams): string {\n    return this.moment(date).locale(locale).format('ha');\n  }\n\n  /**\n   * The day view title\n   */\n  public dayViewTitle({ date, locale }: DateFormatterParams): string {\n    return this.moment(date).locale(locale).format('dddd, LL'); // dddd = Thursday\n  } // LL = locale-dependent Month Day, Year\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/common/calendar-native-date-formatter/calendar-native-date-formatter.provider.ts","messages":[{"ruleId":"@angular-eslint/use-injectable-provided-in","severity":2,"message":"The `providedIn` property is mandatory for `Injectables`","line":14,"column":1,"nodeType":"Decorator","messageId":"useInjectableProvidedIn","endLine":14,"endColumn":14,"suggestions":[{"messageId":"suggestInjector","fix":{"range":[602,602],"text":"{providedIn: 'any'}"},"data":{"injector":"any"},"desc":"Use `providedIn: 'any'`"},{"messageId":"suggestInjector","fix":{"range":[602,602],"text":"{providedIn: 'platform'}"},"data":{"injector":"platform"},"desc":"Use `providedIn: 'platform'`"},{"messageId":"suggestInjector","fix":{"range":[602,602],"text":"{providedIn: 'root'}"},"data":{"injector":"root"},"desc":"Use `providedIn: 'root'`"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  CalendarDateFormatterInterface,\n  DateFormatterParams,\n} from '../calendar-date-formatter/calendar-date-formatter.interface';\nimport { Injectable } from '@angular/core';\nimport { DateAdapter } from '../../../date-adapters/date-adapter';\nimport { getWeekViewPeriod } from '../util/util';\n\n/**\n * This will use <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Intl\" target=\"_blank\">Intl</a> API to do all date formatting.\n *\n * You will need to include a <a href=\"https://github.com/andyearnshaw/Intl.js/\">polyfill</a> for older browsers.\n */\n@Injectable()\nexport class CalendarNativeDateFormatter\n  implements CalendarDateFormatterInterface\n{\n  constructor(protected dateAdapter: DateAdapter) {}\n\n  /**\n   * The month view header week day labels\n   */\n  public monthViewColumnHeader({ date, locale }: DateFormatterParams): string {\n    return new Intl.DateTimeFormat(locale, { weekday: 'long' }).format(date);\n  }\n\n  /**\n   * The month view cell day number\n   */\n  public monthViewDayNumber({ date, locale }: DateFormatterParams): string {\n    return new Intl.DateTimeFormat(locale, { day: 'numeric' }).format(date);\n  }\n\n  /**\n   * The month view title\n   */\n  public monthViewTitle({ date, locale }: DateFormatterParams): string {\n    return new Intl.DateTimeFormat(locale, {\n      year: 'numeric',\n      month: 'long',\n    }).format(date);\n  }\n\n  /**\n   * The week view header week day labels\n   */\n  public weekViewColumnHeader({ date, locale }: DateFormatterParams): string {\n    return new Intl.DateTimeFormat(locale, { weekday: 'long' }).format(date);\n  }\n\n  /**\n   * The week view sub header day and month labels\n   */\n  public weekViewColumnSubHeader({\n    date,\n    locale,\n  }: DateFormatterParams): string {\n    return new Intl.DateTimeFormat(locale, {\n      day: 'numeric',\n      month: 'short',\n    }).format(date);\n  }\n\n  /**\n   * The week view title\n   */\n  public weekViewTitle({\n    date,\n    locale,\n    weekStartsOn,\n    excludeDays,\n    daysInWeek,\n  }: DateFormatterParams): string {\n    const { viewStart, viewEnd } = getWeekViewPeriod(\n      this.dateAdapter,\n      date,\n      weekStartsOn,\n      excludeDays,\n      daysInWeek\n    );\n\n    const format = (dateToFormat: Date, showYear: boolean) =>\n      new Intl.DateTimeFormat(locale, {\n        day: 'numeric',\n        month: 'short',\n        year: showYear ? 'numeric' : undefined,\n      }).format(dateToFormat);\n\n    return `${format(\n      viewStart,\n      viewStart.getUTCFullYear() !== viewEnd.getUTCFullYear()\n    )} - ${format(viewEnd, true)}`;\n  }\n\n  /**\n   * The time formatting down the left hand side of the week view\n   */\n  public weekViewHour({ date, locale }: DateFormatterParams): string {\n    return new Intl.DateTimeFormat(locale, { hour: 'numeric' }).format(date);\n  }\n\n  /**\n   * The time formatting down the left hand side of the day view\n   */\n  public dayViewHour({ date, locale }: DateFormatterParams): string {\n    return new Intl.DateTimeFormat(locale, { hour: 'numeric' }).format(date);\n  }\n\n  /**\n   * The day view title\n   */\n  public dayViewTitle({ date, locale }: DateFormatterParams): string {\n    return new Intl.DateTimeFormat(locale, {\n      day: 'numeric',\n      month: 'long',\n      year: 'numeric',\n      weekday: 'long',\n    }).format(date);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/common/calendar-next-view/calendar-next-view.directive.spec.ts","messages":[{"ruleId":"@angular-eslint/use-component-selector","severity":2,"message":"The selector of the component is mandatory","line":7,"column":1,"nodeType":"Decorator","messageId":"useComponentSelector","endLine":19,"endColumn":3},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":7,"column":1,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":19,"endColumn":3,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[18,277],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { expect } from 'chai';\nimport { CalendarModule, DateAdapter } from 'angular-calendar';\nimport { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/component-max-inline-declarations","severity":2,"message":"`template` has too many lines (9). Maximum allowed is 3 (https://angular.io/guide/styleguide#style-05-04)","line":8,"column":13,"nodeType":"TemplateLiteral","messageId":"componentMaxInlineDeclarations","endLine":18,"endColumn":4},{"ruleId":"@angular-eslint/template/button-has-type","severity":2,"message":"Type for <button> is missing","line":9,"column":5,"nodeType":null,"messageId":"missingType","endLine":17,"endColumn":14},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `[excludeDays]`, `[daysInWeek]`, `[(viewDate)]` instead of `[(viewDate)]`, `[excludeDays]`, `[daysInWeek]`","line":12,"column":7,"nodeType":null,"messageId":"attributesOrder","endLine":14,"endColumn":32,"fix":{"range":[352,441],"text":"[excludeDays]=\"excludeDays\"\n      [daysInWeek]=\"daysInWeek\"\n      [(viewDate)]=\"viewDate\""}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":16,"column":7,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":17,"endColumn":5,"fix":{"range":[299,299],"text":" i18n"}}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import { Component } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { expect } from 'chai';\nimport { CalendarModule, DateAdapter } from 'angular-calendar';\nimport { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\n\n@Component({\n  template: `\n    <button\n      mwlCalendarNextView\n      [view]=\"view\"\n      [(viewDate)]=\"viewDate\"\n      [excludeDays]=\"excludeDays\"\n      [daysInWeek]=\"daysInWeek\"\n    >\n      Next\n    </button>\n  `,\n})\nclass TestComponent {\n  view: string;\n  viewDate: Date;\n  excludeDays: number[] = [];\n  daysInWeek: number;\n}\n\ndescribe('mwlCalendarNextView directive', () => {\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [\n        CalendarModule.forRoot({\n          provide: DateAdapter,\n          useFactory: adapterFactory,\n        }),\n      ],\n      declarations: [TestComponent],\n    });\n  });\n\n  it('should increase the view date by 1 month', () => {\n    const fixture = TestBed.createComponent<TestComponent>(TestComponent);\n    fixture.componentInstance.view = 'month';\n    fixture.componentInstance.viewDate = new Date('2017-01-28');\n    fixture.detectChanges();\n    fixture.nativeElement.querySelector('button').click();\n    fixture.detectChanges();\n    expect(fixture.componentInstance.viewDate).to.deep.equal(\n      new Date('2017-02-28')\n    );\n    fixture.destroy();\n  });\n\n  it('should increase the view date by 1 week', () => {\n    const fixture = TestBed.createComponent<TestComponent>(TestComponent);\n    fixture.componentInstance.view = 'week';\n    fixture.componentInstance.viewDate = new Date('2017-01-28');\n    fixture.detectChanges();\n    fixture.nativeElement.querySelector('button').click();\n    fixture.detectChanges();\n    expect(fixture.componentInstance.viewDate).to.deep.equal(\n      new Date('2017-02-04')\n    );\n    fixture.destroy();\n  });\n\n  it('should increase the view date by 1 day', () => {\n    const fixture = TestBed.createComponent<TestComponent>(TestComponent);\n    fixture.componentInstance.view = 'day';\n    fixture.componentInstance.viewDate = new Date('2017-01-28');\n    fixture.detectChanges();\n    fixture.nativeElement.querySelector('button').click();\n    fixture.detectChanges();\n    expect(fixture.componentInstance.viewDate).to.deep.equal(\n      new Date('2017-01-29')\n    );\n    fixture.destroy();\n  });\n\n  it('should increase the view date by 1 day, skipping weekends', () => {\n    const fixture = TestBed.createComponent<TestComponent>(TestComponent);\n    fixture.componentInstance.view = 'day';\n    fixture.componentInstance.viewDate = new Date('2018-06-15');\n    fixture.componentInstance.excludeDays = [0, 6];\n    fixture.detectChanges();\n    fixture.nativeElement.querySelector('button').click();\n    fixture.detectChanges();\n    expect(fixture.componentInstance.viewDate).to.deep.equal(\n      new Date('2018-06-18')\n    );\n    fixture.destroy();\n  });\n\n  it('should increase the view date by 4 days, skipping weekends', () => {\n    const fixture = TestBed.createComponent<TestComponent>(TestComponent);\n    fixture.componentInstance.view = 'week';\n    fixture.componentInstance.viewDate = new Date('2018-07-27');\n    fixture.componentInstance.excludeDays = [0, 6];\n    fixture.componentInstance.daysInWeek = 4;\n    fixture.detectChanges();\n    fixture.nativeElement.querySelector('button').click();\n    fixture.detectChanges();\n    expect(fixture.componentInstance.viewDate).to.deep.equal(\n      new Date('2018-08-02')\n    );\n    fixture.destroy();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/common/calendar-next-view/calendar-next-view.directive.ts","messages":[{"ruleId":"@angular-eslint/prefer-output-readonly","severity":2,"message":"Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned","line":51,"column":13,"nodeType":"Identifier","messageId":"preferOutputReadonly","endLine":51,"endColumn":27,"suggestions":[{"messageId":"suggestAddReadonlyModifier","fix":{"range":[1032,1032],"text":"readonly "},"desc":"Add `readonly` modifier"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Directive,\n  EventEmitter,\n  HostListener,\n  Input,\n  Output,\n} from '@angular/core';\nimport { DateAdapter } from '../../../date-adapters/date-adapter';\nimport { CalendarView } from '../calendar-view/calendar-view.enum';\nimport { addDaysWithExclusions } from '../util/util';\n\n/**\n * Change the view date to the next view. For example:\n *\n * ```typescript\n * <button\n *  mwlCalendarNextView\n *  [(viewDate)]=\"viewDate\"\n *  [view]=\"view\">\n *  Next\n * </button>\n * ```\n */\n@Directive({\n  selector: '[mwlCalendarNextView]',\n})\nexport class CalendarNextViewDirective {\n  /**\n   * The current view\n   */\n  @Input() view: CalendarView | 'month' | 'week' | 'day';\n\n  /**\n   * The current view date\n   */\n  @Input() viewDate: Date;\n\n  /**\n   * Days to skip when going forward by 1 day\n   */\n  @Input() excludeDays: number[] = [];\n\n  /**\n   * The number of days in a week. If set will add this amount of days instead of 1 week\n   */\n  @Input() daysInWeek: number;\n\n  /**\n   * Called when the view date is changed\n   */\n  @Output() viewDateChange: EventEmitter<Date> = new EventEmitter();\n\n  constructor(private dateAdapter: DateAdapter) {}\n\n  /**\n   * @hidden\n   */\n  @HostListener('click')\n  onClick(): void {\n    const addFn: any = {\n      day: this.dateAdapter.addDays,\n      week: this.dateAdapter.addWeeks,\n      month: this.dateAdapter.addMonths,\n    }[this.view];\n\n    if (this.view === CalendarView.Day) {\n      this.viewDateChange.emit(\n        addDaysWithExclusions(\n          this.dateAdapter,\n          this.viewDate,\n          1,\n          this.excludeDays\n        )\n      );\n    } else if (this.view === CalendarView.Week && this.daysInWeek) {\n      this.viewDateChange.emit(\n        addDaysWithExclusions(\n          this.dateAdapter,\n          this.viewDate,\n          this.daysInWeek,\n          this.excludeDays\n        )\n      );\n    } else {\n      this.viewDateChange.emit(addFn(this.viewDate, 1));\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/common/calendar-previous-view/calendar-previous-view.directive.spec.ts","messages":[{"ruleId":"@angular-eslint/use-component-selector","severity":2,"message":"The selector of the component is mandatory","line":7,"column":1,"nodeType":"Decorator","messageId":"useComponentSelector","endLine":19,"endColumn":3},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":7,"column":1,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":19,"endColumn":3,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[18,277],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { expect } from 'chai';\nimport { CalendarModule, DateAdapter } from 'angular-calendar';\nimport { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/component-max-inline-declarations","severity":2,"message":"`template` has too many lines (9). Maximum allowed is 3 (https://angular.io/guide/styleguide#style-05-04)","line":8,"column":13,"nodeType":"TemplateLiteral","messageId":"componentMaxInlineDeclarations","endLine":18,"endColumn":4},{"ruleId":"@angular-eslint/template/button-has-type","severity":2,"message":"Type for <button> is missing","line":9,"column":5,"nodeType":null,"messageId":"missingType","endLine":17,"endColumn":14},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `[excludeDays]`, `[daysInWeek]`, `[(viewDate)]` instead of `[(viewDate)]`, `[excludeDays]`, `[daysInWeek]`","line":12,"column":7,"nodeType":null,"messageId":"attributesOrder","endLine":14,"endColumn":32,"fix":{"range":[356,445],"text":"[excludeDays]=\"excludeDays\"\n      [daysInWeek]=\"daysInWeek\"\n      [(viewDate)]=\"viewDate\""}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":16,"column":7,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":17,"endColumn":5,"fix":{"range":[299,299],"text":" i18n"}}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import { Component } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { expect } from 'chai';\nimport { CalendarModule, DateAdapter } from 'angular-calendar';\nimport { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\n\n@Component({\n  template: `\n    <button\n      mwlCalendarPreviousView\n      [view]=\"view\"\n      [(viewDate)]=\"viewDate\"\n      [excludeDays]=\"excludeDays\"\n      [daysInWeek]=\"daysInWeek\"\n    >\n      Previous\n    </button>\n  `,\n})\nclass TestComponent {\n  public view: string;\n  public viewDate: Date;\n  excludeDays: number[] = [];\n  daysInWeek: number;\n}\n\ndescribe('calendarPreviousView directive', () => {\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [\n        CalendarModule.forRoot({\n          provide: DateAdapter,\n          useFactory: adapterFactory,\n        }),\n      ],\n      declarations: [TestComponent],\n    });\n  });\n\n  it('should decrease the view date by 1 month', () => {\n    const fixture = TestBed.createComponent<TestComponent>(TestComponent);\n    fixture.componentInstance.view = 'month';\n    fixture.componentInstance.viewDate = new Date('2017-02-28');\n    fixture.detectChanges();\n    fixture.nativeElement.querySelector('button').click();\n    fixture.detectChanges();\n    expect(fixture.componentInstance.viewDate).to.deep.equal(\n      new Date('2017-01-28')\n    );\n    fixture.destroy();\n  });\n\n  it('should decrease the view date by 1 week', () => {\n    const fixture = TestBed.createComponent<TestComponent>(TestComponent);\n    fixture.componentInstance.view = 'week';\n    fixture.componentInstance.viewDate = new Date('2017-01-28');\n    fixture.detectChanges();\n    fixture.nativeElement.querySelector('button').click();\n    fixture.detectChanges();\n    expect(fixture.componentInstance.viewDate).to.deep.equal(\n      new Date('2017-01-21')\n    );\n    fixture.destroy();\n  });\n\n  it('should decrease the view date by 1 day', () => {\n    const fixture = TestBed.createComponent<TestComponent>(TestComponent);\n    fixture.componentInstance.view = 'day';\n    fixture.componentInstance.viewDate = new Date('2017-01-28');\n    fixture.detectChanges();\n    fixture.nativeElement.querySelector('button').click();\n    fixture.detectChanges();\n    expect(fixture.componentInstance.viewDate).to.deep.equal(\n      new Date('2017-01-27')\n    );\n    fixture.destroy();\n  });\n\n  it('should decrease the view date by 1 day, skipping weekends', () => {\n    const fixture = TestBed.createComponent<TestComponent>(TestComponent);\n    fixture.componentInstance.view = 'day';\n    fixture.componentInstance.viewDate = new Date('2018-06-18');\n    fixture.componentInstance.excludeDays = [0, 6];\n    fixture.detectChanges();\n    fixture.nativeElement.querySelector('button').click();\n    fixture.detectChanges();\n    expect(fixture.componentInstance.viewDate).to.deep.equal(\n      new Date('2018-06-15')\n    );\n    fixture.destroy();\n  });\n\n  it('should decrease the view date by 4 days, skipping weekends', () => {\n    const fixture = TestBed.createComponent<TestComponent>(TestComponent);\n    fixture.componentInstance.view = 'week';\n    fixture.componentInstance.viewDate = new Date('2018-08-02');\n    fixture.componentInstance.excludeDays = [0, 6];\n    fixture.componentInstance.daysInWeek = 4;\n    fixture.detectChanges();\n    fixture.nativeElement.querySelector('button').click();\n    fixture.detectChanges();\n    expect(fixture.componentInstance.viewDate).to.deep.equal(\n      new Date('2018-07-27')\n    );\n    fixture.destroy();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/common/calendar-previous-view/calendar-previous-view.directive.ts","messages":[{"ruleId":"@angular-eslint/prefer-output-readonly","severity":2,"message":"Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned","line":51,"column":13,"nodeType":"Identifier","messageId":"preferOutputReadonly","endLine":51,"endColumn":27,"suggestions":[{"messageId":"suggestAddReadonlyModifier","fix":{"range":[1054,1054],"text":"readonly "},"desc":"Add `readonly` modifier"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Directive,\n  HostListener,\n  Input,\n  Output,\n  EventEmitter,\n} from '@angular/core';\nimport { DateAdapter } from '../../../date-adapters/date-adapter';\nimport { CalendarView } from '../calendar-view/calendar-view.enum';\nimport { addDaysWithExclusions } from '../util/util';\n\n/**\n * Change the view date to the previous view. For example:\n *\n * ```typescript\n * <button\n *  mwlCalendarPreviousView\n *  [(viewDate)]=\"viewDate\"\n *  [view]=\"view\">\n *  Previous\n * </button>\n * ```\n */\n@Directive({\n  selector: '[mwlCalendarPreviousView]',\n})\nexport class CalendarPreviousViewDirective {\n  /**\n   * The current view\n   */\n  @Input() view: CalendarView | 'month' | 'week' | 'day';\n\n  /**\n   * The current view date\n   */\n  @Input() viewDate: Date;\n\n  /**\n   * Days to skip when going back by 1 day\n   */\n  @Input() excludeDays: number[] = [];\n\n  /**\n   * The number of days in a week. If set will subtract this amount of days instead of 1 week\n   */\n  @Input() daysInWeek: number;\n\n  /**\n   * Called when the view date is changed\n   */\n  @Output() viewDateChange: EventEmitter<Date> = new EventEmitter();\n\n  constructor(private dateAdapter: DateAdapter) {}\n\n  /**\n   * @hidden\n   */\n  @HostListener('click')\n  onClick(): void {\n    const subFn: any = {\n      day: this.dateAdapter.subDays,\n      week: this.dateAdapter.subWeeks,\n      month: this.dateAdapter.subMonths,\n    }[this.view];\n\n    if (this.view === CalendarView.Day) {\n      this.viewDateChange.emit(\n        addDaysWithExclusions(\n          this.dateAdapter,\n          this.viewDate,\n          -1,\n          this.excludeDays\n        )\n      );\n    } else if (this.view === CalendarView.Week && this.daysInWeek) {\n      this.viewDateChange.emit(\n        addDaysWithExclusions(\n          this.dateAdapter,\n          this.viewDate,\n          -this.daysInWeek,\n          this.excludeDays\n        )\n      );\n    } else {\n      this.viewDateChange.emit(subFn(this.viewDate, 1));\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/common/calendar-today/calendar-today.directive.spec.ts","messages":[{"ruleId":"@angular-eslint/use-component-selector","severity":2,"message":"The selector of the component is mandatory","line":8,"column":1,"nodeType":"Decorator","messageId":"useComponentSelector","endLine":10,"endColumn":3},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":8,"column":1,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":10,"endColumn":3,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[18,334],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { expect } from 'chai';\nimport { startOfDay } from 'date-fns';\nimport { CalendarModule, DateAdapter } from 'angular-calendar';\nimport { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/template/button-has-type","severity":2,"message":"Type for <button> is missing","line":9,"column":1,"nodeType":null,"messageId":"missingType","endLine":9,"endColumn":63},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Each element containing text node should have an i18n attribute. See more at https://angular.io/guide/i18n#mark-plurals-and-alternates-for-translation and https://angular.io/guide/i18n#mark-text-for-translations","line":9,"column":50,"nodeType":null,"messageId":"i18nAttributeOnIcuOrText","endLine":9,"endColumn":54,"fix":{"range":[351,351],"text":" i18n"}}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { Component } from '@angular/core';\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { expect } from 'chai';\nimport { startOfDay } from 'date-fns';\nimport { CalendarModule, DateAdapter } from 'angular-calendar';\nimport { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\n\n@Component({\n  template: '<button mwlCalendarToday [(viewDate)]=\"viewDate\">Next</button>',\n})\nclass TestComponent {\n  public viewDate: Date;\n}\n\ndescribe('mwlCalendarNextView directive', () => {\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [\n        CalendarModule.forRoot({\n          provide: DateAdapter,\n          useFactory: adapterFactory,\n        }),\n      ],\n      declarations: [TestComponent],\n    });\n  });\n\n  it('should set the view date to the start of today', () => {\n    const fixture: ComponentFixture<TestComponent> =\n      TestBed.createComponent(TestComponent);\n    fixture.componentInstance.viewDate = new Date('2017-01-28');\n    fixture.detectChanges();\n    fixture.nativeElement.querySelector('button').click();\n    fixture.detectChanges();\n    expect(fixture.componentInstance.viewDate).to.deep.equal(\n      startOfDay(new Date())\n    );\n    fixture.destroy();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/common/calendar-today/calendar-today.directive.ts","messages":[{"ruleId":"@angular-eslint/prefer-output-readonly","severity":2,"message":"Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned","line":33,"column":13,"nodeType":"Identifier","messageId":"preferOutputReadonly","endLine":33,"endColumn":27,"suggestions":[{"messageId":"suggestAddReadonlyModifier","fix":{"range":[562,562],"text":"readonly "},"desc":"Add `readonly` modifier"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Directive,\n  HostListener,\n  Input,\n  Output,\n  EventEmitter,\n} from '@angular/core';\nimport { DateAdapter } from '../../../date-adapters/date-adapter';\n\n/**\n * Change the view date to the current day. For example:\n *\n * ```typescript\n * <button\n *  mwlCalendarToday\n *  [(viewDate)]=\"viewDate\">\n *  Today\n * </button>\n * ```\n */\n@Directive({\n  selector: '[mwlCalendarToday]',\n})\nexport class CalendarTodayDirective {\n  /**\n   * The current view date\n   */\n  @Input() viewDate: Date;\n\n  /**\n   * Called when the view date is changed\n   */\n  @Output() viewDateChange: EventEmitter<Date> = new EventEmitter();\n\n  constructor(private dateAdapter: DateAdapter) {}\n\n  /**\n   * @hidden\n   */\n  @HostListener('click')\n  onClick(): void {\n    this.viewDateChange.emit(this.dateAdapter.startOfDay(new Date()));\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/common/calendar-tooltip/calendar-tooltip.directive.ts","messages":[{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":25,"column":1,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":49,"endColumn":3,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[249,546],"text":", ChangeDetectionStrategy,\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { PlacementArray, positionElements } from 'positioning';\nimport { CalendarEvent } from 'calendar-utils';\nimport { Observable, of, Subject, timer } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/component-max-inline-declarations","severity":2,"message":"`template` has too many lines (20). Maximum allowed is 3 (https://angular.io/guide/styleguide#style-05-04)","line":27,"column":13,"nodeType":"TemplateLiteral","messageId":"componentMaxInlineDeclarations","endLine":48,"endColumn":4}],"suppressedMessages":[{"ruleId":"@angular-eslint/no-input-rename","severity":2,"message":"Input bindings should not be aliased (https://angular.io/guide/styleguide#style-05-13)","line":66,"column":10,"nodeType":"Literal","messageId":"noInputRename","endLine":66,"endColumn":28,"suggestions":[{"messageId":"suggestRemoveAliasName","fix":{"range":[1613,1631],"text":""},"desc":"Remove alias name"},{"messageId":"suggestReplaceOriginalNameWithAliasName","fix":{"range":[1613,1642],"text":") tooltipPlacement"},"desc":"Remove alias name and use it as the original name"}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@angular-eslint/no-input-rename","severity":2,"message":"Input bindings should not be aliased (https://angular.io/guide/styleguide#style-05-13)","line":68,"column":10,"nodeType":"Literal","messageId":"noInputRename","endLine":68,"endColumn":27,"suggestions":[{"messageId":"suggestRemoveAliasName","fix":{"range":[1735,1752],"text":""},"desc":"Remove alias name"},{"messageId":"suggestReplaceOriginalNameWithAliasName","fix":{"range":[1735,1768],"text":") tooltipTemplate"},"desc":"Remove alias name and use it as the original name"}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@angular-eslint/no-input-rename","severity":2,"message":"Input bindings should not be aliased (https://angular.io/guide/styleguide#style-05-13)","line":70,"column":10,"nodeType":"Literal","messageId":"noInputRename","endLine":70,"endColumn":24,"suggestions":[{"messageId":"suggestRemoveAliasName","fix":{"range":[1854,1868],"text":""},"desc":"Remove alias name"},{"messageId":"suggestReplaceOriginalNameWithAliasName","fix":{"range":[1854,1875],"text":") tooltipEvent"},"desc":"Remove alias name and use it as the original name"}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@angular-eslint/no-input-rename","severity":2,"message":"Input bindings should not be aliased (https://angular.io/guide/styleguide#style-05-13)","line":72,"column":10,"nodeType":"Literal","messageId":"noInputRename","endLine":72,"endColumn":31,"suggestions":[{"messageId":"suggestRemoveAliasName","fix":{"range":[1958,1979],"text":""},"desc":"Remove alias name"},{"messageId":"suggestReplaceOriginalNameWithAliasName","fix":{"range":[1958,1993],"text":") tooltipAppendToBody"},"desc":"Remove alias name and use it as the original name"}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@angular-eslint/no-input-rename","severity":2,"message":"Input bindings should not be aliased (https://angular.io/guide/styleguide#style-05-13)","line":74,"column":10,"nodeType":"Literal","messageId":"noInputRename","endLine":74,"endColumn":24,"suggestions":[{"messageId":"suggestRemoveAliasName","fix":{"range":[2070,2084],"text":""},"desc":"Remove alias name"},{"messageId":"suggestReplaceOriginalNameWithAliasName","fix":{"range":[2070,2091],"text":") tooltipDelay"},"desc":"Remove alias name and use it as the original name"}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Directive,\n  Component,\n  HostListener,\n  OnDestroy,\n  Input,\n  ComponentRef,\n  Injector,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  ElementRef,\n  ComponentFactory,\n  Inject,\n  Renderer2,\n  TemplateRef,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { PlacementArray, positionElements } from 'positioning';\nimport { CalendarEvent } from 'calendar-utils';\nimport { Observable, of, Subject, timer } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'mwl-calendar-tooltip-window',\n  template: `\n    <ng-template\n      #defaultTemplate\n      let-contents=\"contents\"\n      let-placement=\"placement\"\n      let-event=\"event\"\n    >\n      <div class=\"cal-tooltip\" [ngClass]=\"'cal-tooltip-' + placement\">\n        <div class=\"cal-tooltip-arrow\"></div>\n        <div class=\"cal-tooltip-inner\" [innerHtml]=\"contents\"></div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{\n        contents: contents,\n        placement: placement,\n        event: event\n      }\"\n    >\n    </ng-template>\n  `,\n})\nexport class CalendarTooltipWindowComponent {\n  @Input() contents: string;\n\n  @Input() placement: string;\n\n  @Input() event: CalendarEvent;\n\n  @Input() customTemplate: TemplateRef<any>;\n}\n\n@Directive({\n  selector: '[mwlCalendarTooltip]',\n})\nexport class CalendarTooltipDirective implements OnDestroy, OnChanges {\n  @Input('mwlCalendarTooltip') contents: string; // eslint-disable-line  @angular-eslint/no-input-rename\n\n  @Input('tooltipPlacement') placement: PlacementArray = 'auto'; // eslint-disable-line  @angular-eslint/no-input-rename\n\n  @Input('tooltipTemplate') customTemplate: TemplateRef<any>; // eslint-disable-line  @angular-eslint/no-input-rename\n\n  @Input('tooltipEvent') event: CalendarEvent; // eslint-disable-line  @angular-eslint/no-input-rename\n\n  @Input('tooltipAppendToBody') appendToBody: boolean; // eslint-disable-line  @angular-eslint/no-input-rename\n\n  @Input('tooltipDelay') delay: number | null = null; // eslint-disable-line  @angular-eslint/no-input-rename\n\n  private tooltipFactory: ComponentFactory<CalendarTooltipWindowComponent>;\n  private tooltipRef: ComponentRef<CalendarTooltipWindowComponent>;\n  private cancelTooltipDelay$ = new Subject<void>();\n\n  constructor(\n    private elementRef: ElementRef,\n    private injector: Injector,\n    private renderer: Renderer2,\n    componentFactoryResolver: ComponentFactoryResolver,\n    private viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private document // eslint-disable-line\n  ) {\n    this.tooltipFactory = componentFactoryResolver.resolveComponentFactory(\n      CalendarTooltipWindowComponent\n    );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (\n      this.tooltipRef &&\n      (changes.contents || changes.customTemplate || changes.event)\n    ) {\n      this.tooltipRef.instance.contents = this.contents;\n      this.tooltipRef.instance.customTemplate = this.customTemplate;\n      this.tooltipRef.instance.event = this.event;\n      this.tooltipRef.changeDetectorRef.markForCheck();\n\n      if (!this.contents) {\n        this.hide();\n      }\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.hide();\n  }\n\n  @HostListener('mouseenter')\n  onMouseOver(): void {\n    const delay$: Observable<any> =\n      this.delay === null ? of('now') : timer(this.delay);\n    delay$.pipe(takeUntil(this.cancelTooltipDelay$)).subscribe(() => {\n      this.show();\n    });\n  }\n\n  @HostListener('mouseleave')\n  onMouseOut(): void {\n    this.hide();\n  }\n\n  private show(): void {\n    if (!this.tooltipRef && this.contents) {\n      this.tooltipRef = this.viewContainerRef.createComponent(\n        this.tooltipFactory,\n        0,\n        this.injector,\n        []\n      );\n      this.tooltipRef.instance.contents = this.contents;\n      this.tooltipRef.instance.customTemplate = this.customTemplate;\n      this.tooltipRef.instance.event = this.event;\n      if (this.appendToBody) {\n        this.document.body.appendChild(this.tooltipRef.location.nativeElement);\n      }\n      requestAnimationFrame(() => {\n        this.positionTooltip();\n      });\n    }\n  }\n\n  private hide(): void {\n    if (this.tooltipRef) {\n      this.viewContainerRef.remove(\n        this.viewContainerRef.indexOf(this.tooltipRef.hostView)\n      );\n      this.tooltipRef = null;\n    }\n    this.cancelTooltipDelay$.next();\n  }\n\n  private positionTooltip(previousPositions: string[] = []): void {\n    if (this.tooltipRef) {\n      this.tooltipRef.changeDetectorRef.detectChanges();\n      this.tooltipRef.instance.placement = positionElements(\n        this.elementRef.nativeElement,\n        this.tooltipRef.location.nativeElement.children[0],\n        this.placement,\n        this.appendToBody\n      );\n      // keep re-positioning the tooltip until the arrow position doesn't make a difference\n      if (\n        previousPositions.indexOf(this.tooltipRef.instance.placement) === -1\n      ) {\n        this.positionTooltip([\n          ...previousPositions,\n          this.tooltipRef.instance.placement,\n        ]);\n      }\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/common/calendar-utils/calendar-utils.provider.ts","messages":[{"ruleId":"@angular-eslint/use-injectable-provided-in","severity":2,"message":"The `providedIn` property is mandatory for `Injectables`","line":15,"column":1,"nodeType":"Decorator","messageId":"useInjectableProvidedIn","endLine":15,"endColumn":14,"suggestions":[{"messageId":"suggestInjector","fix":{"range":[310,310],"text":"{providedIn: 'any'}"},"data":{"injector":"any"},"desc":"Use `providedIn: 'any'`"},{"messageId":"suggestInjector","fix":{"range":[310,310],"text":"{providedIn: 'platform'}"},"data":{"injector":"platform"},"desc":"Use `providedIn: 'platform'`"},{"messageId":"suggestInjector","fix":{"range":[310,310],"text":"{providedIn: 'root'}"},"data":{"injector":"root"},"desc":"Use `providedIn: 'root'`"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Injectable } from '@angular/core';\nimport {\n  GetMonthViewArgs,\n  MonthView,\n  GetWeekViewHeaderArgs,\n  WeekDay,\n  GetWeekViewArgs,\n  WeekView,\n  getMonthView,\n  getWeekViewHeader,\n  getWeekView,\n} from 'calendar-utils';\nimport { DateAdapter } from '../../../date-adapters/date-adapter';\n\n@Injectable()\nexport class CalendarUtils {\n  constructor(protected dateAdapter: DateAdapter) {}\n\n  getMonthView(args: GetMonthViewArgs): MonthView {\n    return getMonthView(this.dateAdapter, args);\n  }\n\n  getWeekViewHeader(args: GetWeekViewHeaderArgs): WeekDay[] {\n    return getWeekViewHeader(this.dateAdapter, args);\n  }\n\n  getWeekView(args: GetWeekViewArgs): WeekView {\n    return getWeekView(this.dateAdapter, args);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/day/calendar-day-view/calendar-day-view.component.ts","messages":[{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":28,"column":1,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":66,"endColumn":3,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[70,799],"text":", ChangeDetectionStrategy,\n} from '@angular/core';\nimport { CalendarEvent } from 'calendar-utils';\nimport { Subject } from 'rxjs';\nimport { CalendarEventTimesChangedEvent } from '../../common/calendar-event-times-changed-event/calendar-event-times-changed-event.interface';\nimport { PlacementArray } from 'positioning';\nimport { CalendarWeekViewBeforeRenderEvent } from '../../week/calendar-week.module';\nimport { ResizeCursors } from 'angular-resizable-element';\n\nexport type CalendarDayViewBeforeRenderEvent =\n  CalendarWeekViewBeforeRenderEvent;\n\n/**\n * Shows all events on a given day. Example usage:\n *\n * ```typescript\n * <mwl-calendar-day-view\n *  [viewDate]=\"viewDate\"\n *  [events]=\"events\">\n * </mwl-calendar-day-view>\n * ```\n */\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/component-max-inline-declarations","severity":2,"message":"`template` has too many lines (34). Maximum allowed is 3 (https://angular.io/guide/styleguide#style-05-04)","line":30,"column":13,"nodeType":"TemplateLiteral","messageId":"componentMaxInlineDeclarations","endLine":65,"endColumn":4},{"ruleId":"@angular-eslint/prefer-output-readonly","severity":2,"message":"Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned","line":208,"column":13,"nodeType":"Identifier","messageId":"preferOutputReadonly","endLine":208,"endColumn":25,"suggestions":[{"messageId":"suggestAddReadonlyModifier","fix":{"range":[5638,5638],"text":"readonly "},"desc":"Add `readonly` modifier"}]},{"ruleId":"@angular-eslint/prefer-output-readonly","severity":2,"message":"Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned","line":216,"column":13,"nodeType":"Identifier","messageId":"preferOutputReadonly","endLine":216,"endColumn":31,"suggestions":[{"messageId":"suggestAddReadonlyModifier","fix":{"range":[5820,5820],"text":"readonly "},"desc":"Add `readonly` modifier"}]},{"ruleId":"@angular-eslint/prefer-output-readonly","severity":2,"message":"Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned","line":224,"column":13,"nodeType":"Identifier","messageId":"preferOutputReadonly","endLine":224,"endColumn":30,"suggestions":[{"messageId":"suggestAddReadonlyModifier","fix":{"range":[5998,5998],"text":"readonly "},"desc":"Add `readonly` modifier"}]},{"ruleId":"@angular-eslint/prefer-output-readonly","severity":2,"message":"Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned","line":231,"column":13,"nodeType":"Identifier","messageId":"preferOutputReadonly","endLine":231,"endColumn":29,"suggestions":[{"messageId":"suggestAddReadonlyModifier","fix":{"range":[6306,6306],"text":"readonly "},"desc":"Add `readonly` modifier"}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  TemplateRef,\n} from '@angular/core';\nimport { CalendarEvent } from 'calendar-utils';\nimport { Subject } from 'rxjs';\nimport { CalendarEventTimesChangedEvent } from '../../common/calendar-event-times-changed-event/calendar-event-times-changed-event.interface';\nimport { PlacementArray } from 'positioning';\nimport { CalendarWeekViewBeforeRenderEvent } from '../../week/calendar-week.module';\nimport { ResizeCursors } from 'angular-resizable-element';\n\nexport type CalendarDayViewBeforeRenderEvent =\n  CalendarWeekViewBeforeRenderEvent;\n\n/**\n * Shows all events on a given day. Example usage:\n *\n * ```typescript\n * <mwl-calendar-day-view\n *  [viewDate]=\"viewDate\"\n *  [events]=\"events\">\n * </mwl-calendar-day-view>\n * ```\n */\n@Component({\n  selector: 'mwl-calendar-day-view',\n  template: `\n    <mwl-calendar-week-view\n      class=\"cal-day-view\"\n      [daysInWeek]=\"1\"\n      [viewDate]=\"viewDate\"\n      [events]=\"events\"\n      [hourSegments]=\"hourSegments\"\n      [hourDuration]=\"hourDuration\"\n      [hourSegmentHeight]=\"hourSegmentHeight\"\n      [minimumEventHeight]=\"minimumEventHeight\"\n      [dayStartHour]=\"dayStartHour\"\n      [dayStartMinute]=\"dayStartMinute\"\n      [dayEndHour]=\"dayEndHour\"\n      [dayEndMinute]=\"dayEndMinute\"\n      [refresh]=\"refresh\"\n      [locale]=\"locale\"\n      [eventSnapSize]=\"eventSnapSize\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipAppendToBody]=\"tooltipAppendToBody\"\n      [tooltipDelay]=\"tooltipDelay\"\n      [resizeCursors]=\"resizeCursors\"\n      [hourSegmentTemplate]=\"hourSegmentTemplate\"\n      [eventTemplate]=\"eventTemplate\"\n      [eventTitleTemplate]=\"eventTitleTemplate\"\n      [eventActionsTemplate]=\"eventActionsTemplate\"\n      [snapDraggedEvents]=\"snapDraggedEvents\"\n      [allDayEventsLabelTemplate]=\"allDayEventsLabelTemplate\"\n      [currentTimeMarkerTemplate]=\"currentTimeMarkerTemplate\"\n      [validateEventTimesChanged]=\"validateEventTimesChanged\"\n      (eventClicked)=\"eventClicked.emit($event)\"\n      (hourSegmentClicked)=\"hourSegmentClicked.emit($event)\"\n      (eventTimesChanged)=\"eventTimesChanged.emit($event)\"\n      (beforeViewRender)=\"beforeViewRender.emit($event)\"\n    ></mwl-calendar-week-view>\n  `,\n})\nexport class CalendarDayViewComponent {\n  /**\n   * The current view date\n   */\n  @Input() viewDate: Date;\n\n  /**\n   * An array of events to display on view\n   * The schema is available here: https://github.com/mattlewis92/calendar-utils/blob/c51689985f59a271940e30bc4e2c4e1fee3fcb5c/src/calendarUtils.ts#L49-L63\n   */\n  @Input() events: CalendarEvent[] = [];\n\n  /**\n   * The number of segments in an hour. Must divide equally into 60.\n   */\n  @Input() hourSegments: number = 2;\n\n  /**\n   * The height in pixels of each hour segment\n   */\n  @Input() hourSegmentHeight: number = 30;\n\n  /**\n   * The duration of each segment group in minutes\n   */\n  @Input() hourDuration: number;\n\n  /**\n   * The minimum height in pixels of each event\n   */\n  @Input() minimumEventHeight: number = 30;\n\n  /**\n   * The day start hours in 24 hour time. Must be 0-23\n   */\n  @Input() dayStartHour: number = 0;\n\n  /**\n   * The day start minutes. Must be 0-59\n   */\n  @Input() dayStartMinute: number = 0;\n\n  /**\n   * The day end hours in 24 hour time. Must be 0-23\n   */\n  @Input() dayEndHour: number = 23;\n\n  /**\n   * The day end minutes. Must be 0-59\n   */\n  @Input() dayEndMinute: number = 59;\n\n  /**\n   * An observable that when emitted on will re-render the current view\n   */\n  @Input() refresh: Subject<any>;\n\n  /**\n   * The locale used to format dates\n   */\n  @Input() locale: string;\n\n  /**\n   * The grid size to snap resizing and dragging of events to\n   */\n  @Input() eventSnapSize: number;\n\n  /**\n   * The placement of the event tooltip\n   */\n  @Input() tooltipPlacement: PlacementArray = 'auto';\n\n  /**\n   * A custom template to use for the event tooltips\n   */\n  @Input() tooltipTemplate: TemplateRef<any>;\n\n  /**\n   * Whether to append tooltips to the body or next to the trigger element\n   */\n  @Input() tooltipAppendToBody: boolean = true;\n\n  /**\n   * The delay in milliseconds before the tooltip should be displayed. If not provided the tooltip\n   * will be displayed immediately.\n   */\n  @Input() tooltipDelay: number | null = null;\n\n  /**\n   * A custom template to use to replace the hour segment\n   */\n  @Input() hourSegmentTemplate: TemplateRef<any>;\n\n  /**\n   * A custom template to use for day view events\n   */\n  @Input() eventTemplate: TemplateRef<any>;\n\n  /**\n   * A custom template to use for event titles\n   */\n  @Input() eventTitleTemplate: TemplateRef<any>;\n\n  /**\n   * A custom template to use for event actions\n   */\n  @Input() eventActionsTemplate: TemplateRef<any>;\n\n  /**\n   * Whether to snap events to a grid when dragging\n   */\n  @Input() snapDraggedEvents: boolean = true;\n\n  /**\n   * A custom template to use for the all day events label text\n   */\n  @Input() allDayEventsLabelTemplate: TemplateRef<any>;\n\n  /**\n   * A custom template to use for the current time marker\n   */\n  @Input() currentTimeMarkerTemplate: TemplateRef<any>;\n\n  /**\n   * Allow you to customise where events can be dragged and resized to.\n   * Return true to allow dragging and resizing to the new location, or false to prevent it\n   */\n  @Input() validateEventTimesChanged: (\n    event: CalendarEventTimesChangedEvent\n  ) => boolean;\n\n  /**\n   * Customise the document cursor when dragging to resize an event\n   */\n  @Input() resizeCursors: Partial<\n    Pick<ResizeCursors, 'leftOrRight' | 'topOrBottom'>\n  >;\n\n  /**\n   * Called when an event title is clicked\n   */\n  @Output() eventClicked = new EventEmitter<{\n    event: CalendarEvent;\n    sourceEvent: MouseEvent | KeyboardEvent;\n  }>();\n\n  /**\n   * Called when an hour segment is clicked\n   */\n  @Output() hourSegmentClicked = new EventEmitter<{\n    date: Date;\n    sourceEvent: MouseEvent;\n  }>();\n\n  /**\n   * Called when an event is resized or dragged and dropped\n   */\n  @Output() eventTimesChanged =\n    new EventEmitter<CalendarEventTimesChangedEvent>();\n\n  /**\n   * An output that will be called before the view is rendered for the current day.\n   * If you add the `cssClass` property to an hour grid segment it will add that class to the hour segment in the template\n   */\n  @Output() beforeViewRender =\n    new EventEmitter<CalendarDayViewBeforeRenderEvent>();\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/day/calendar-day.module.ts","messages":[{"ruleId":"@angular-eslint/sort-ngmodule-metadata-arrays","severity":2,"message":"`NgModule` metadata arrays should be sorted in ASC alphabetical order","line":13,"column":27,"nodeType":"Identifier","messageId":"sortNgmoduleMetadataArrays","endLine":13,"endColumn":47,"fix":{"range":[479,513],"text":"CalendarCommonModule, CommonModule"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CalendarDayViewComponent } from './calendar-day-view/calendar-day-view.component';\nimport { CalendarCommonModule } from '../common/calendar-common.module';\nimport { CalendarWeekModule } from '../week/calendar-week.module';\n\nexport {\n  CalendarDayViewComponent,\n  CalendarDayViewBeforeRenderEvent,\n} from './calendar-day-view/calendar-day-view.component';\n\n@NgModule({\n  imports: [CommonModule, CalendarCommonModule, CalendarWeekModule],\n  declarations: [CalendarDayViewComponent],\n  exports: [CalendarDayViewComponent],\n})\nexport class CalendarDayModule {}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/month/calendar-month-view/calendar-month-cell/calendar-month-cell.component.ts","messages":[{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":12,"column":1,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":105,"endColumn":3,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[70,299],"text":", ChangeDetectionStrategy,\n} from '@angular/core';\nimport { MonthViewDay, CalendarEvent } from 'calendar-utils';\nimport { isWithinThreshold, trackByEventId } from '../../../common/util/util';\nimport { PlacementArray } from 'positioning';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/component-max-inline-declarations","severity":2,"message":"`template` has too many lines (76). Maximum allowed is 3 (https://angular.io/guide/styleguide#style-05-04)","line":14,"column":13,"nodeType":"TemplateLiteral","messageId":"componentMaxInlineDeclarations","endLine":91,"endColumn":4},{"ruleId":"@angular-eslint/prefer-output-readonly","severity":2,"message":"Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned","line":123,"column":13,"nodeType":"Identifier","messageId":"preferOutputReadonly","endLine":123,"endColumn":25,"suggestions":[{"messageId":"suggestAddReadonlyModifier","fix":{"range":[4069,4069],"text":"readonly "},"desc":"Add `readonly` modifier"}]},{"ruleId":"@angular-eslint/prefer-output-readonly","severity":2,"message":"Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned","line":125,"column":13,"nodeType":"Identifier","messageId":"preferOutputReadonly","endLine":125,"endColumn":27,"suggestions":[{"messageId":"suggestAddReadonlyModifier","fix":{"range":[4136,4136],"text":"readonly "},"desc":"Add `readonly` modifier"}]},{"ruleId":"@angular-eslint/prefer-output-readonly","severity":2,"message":"Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned","line":127,"column":13,"nodeType":"Identifier","messageId":"preferOutputReadonly","endLine":127,"endColumn":25,"suggestions":[{"messageId":"suggestAddReadonlyModifier","fix":{"range":[4205,4205],"text":"readonly "},"desc":"Add `readonly` modifier"}]},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `*ngIf`, `class` instead of `class`, `*ngIf`","line":37,"column":17,"nodeType":null,"messageId":"attributesOrder","endLine":37,"endColumn":65,"fix":{"range":[1051,1099],"text":"*ngIf=\"day.badgeTotal > 0\" class=\"cal-day-badge\""}},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `*ngIf`, `class` instead of `class`, `*ngIf`","line":45,"column":12,"nodeType":null,"messageId":"attributesOrder","endLine":45,"endColumn":60,"fix":{"range":[1320,1368],"text":"*ngIf=\"day.events.length > 0\" class=\"cal-events\""}},{"ruleId":"@angular-eslint/template/no-inline-styles","severity":2,"message":"<div/> element should not have inline styles via style attribute. Please use classes instead.","line":46,"column":9,"nodeType":null,"messageId":"noInlineStyles","endLine":70,"endColumn":16},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `*ngFor`, `*ngForOf`, `*ngForTrackBy`, `class`, `mwlDraggable`, `dragActiveClass`, `[ngStyle]`, `[ngClass]`, `[mwlCalendarTooltip]`, `[tooltipPlacement]`, `[tooltipEvent]`, `[tooltipTemplate]`, `[tooltipAppendToBody]`, `[tooltipDelay]`, `[cal-draggable]`, `[dropData]`, `[dragAxis]`, `[validateDrag]`, `[touchStartLongPress]`, `[aria-hidden]`, `(mouseenter)`, `(mouseleave)`, `(mwlClick)` instead of `class`, `*ngFor`, `*ngForOf`, `*ngForTrackBy`, `[ngStyle]`, `[ngClass]`, `(mouseenter)`, `(mouseleave)`, `[mwlCalendarTooltip]`, `[tooltipPlacement]`, `[tooltipEvent]`, `[tooltipTemplate]`, `[tooltipAppendToBody]`, `[tooltipDelay]`, `mwlDraggable`, `[cal-draggable]`, `dragActiveClass`, `[dropData]`, `[dragAxis]`, `[validateDrag]`, `[touchStartLongPress]`, `(mwlClick)`, `[aria-hidden]`","line":47,"column":11,"nodeType":null,"messageId":"attributesOrder","endLine":69,"endColumn":73,"fix":{"range":[1393,2534],"text":"*ngFor=\n           of day.events; t\"let event trackBy: trackByEventId\"class=\"cal-event\"\n          mwlDraggable\n          dragActiveClass=\"cal-drag-active\"\n          [ngStyle]=\"{ backgroundColor: event.color?.primary }\"\n          [ngClass]=\"event?.cssClass\"\n          [mwlCalendarTooltip]=\"\n            event.title | calendarEventTitle : 'monthTooltip' : event\n          \"\n          [tooltipPlacement]=\"tooltipPlacement\"\n          [tooltipEvent]=\"event\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipAppendToBody]=\"tooltipAppendToBody\"\n          [tooltipDelay]=\"tooltipDelay\"\n          [class.cal-draggable]=\"event.draggable\"\n          [dropData]=\"{ event: event, draggedFrom: day }\"\n          [dragAxis]=\"{ x: event.draggable, y: event.draggable }\"\n          [validateDrag]=\"validateDrag\"\n          [touchStartLongPress]=\"{ delay: 300, delta: 30 }\"\n          [attr.aria-hidden]=\"{} | calendarA11y : 'hideMonthCellEvents'\"\n          (mouseenter)=\"highlightDay.emit({ event: event })\"\n          (mouseleave)=\"unhighlightDay.emit({ event: event })\"\n          (mwlClick)=\"eventClicked.emit({ event: event, sourceEvent: $event })\""}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Attribute \"dragActiveClass\" has no corresponding i18n attribute. See more at https://angular.io/guide/i18n#mark-element-attributes-for-translations","line":63,"column":11,"nodeType":null,"messageId":"i18nAttribute","endLine":63,"endColumn":26,"fix":{"range":[2157,2157],"text":" i18n-dragActiveClass"}}],"suppressedMessages":[{"ruleId":"@angular-eslint/no-host-metadata-property","severity":2,"message":"Use @HostBinding or @HostListener rather than the `host` metadata property (https://angular.io/styleguide#style-06-03)","line":93,"column":3,"nodeType":"Property","messageId":"noHostMetadataProperty","endLine":104,"endColumn":4,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  TemplateRef,\n} from '@angular/core';\nimport { MonthViewDay, CalendarEvent } from 'calendar-utils';\nimport { isWithinThreshold, trackByEventId } from '../../../common/util/util';\nimport { PlacementArray } from 'positioning';\n\n@Component({\n  selector: 'mwl-calendar-month-cell',\n  template: `\n    <ng-template\n      #defaultTemplate\n      let-day=\"day\"\n      let-openDay=\"openDay\"\n      let-locale=\"locale\"\n      let-tooltipPlacement=\"tooltipPlacement\"\n      let-highlightDay=\"highlightDay\"\n      let-unhighlightDay=\"unhighlightDay\"\n      let-eventClicked=\"eventClicked\"\n      let-tooltipTemplate=\"tooltipTemplate\"\n      let-tooltipAppendToBody=\"tooltipAppendToBody\"\n      let-tooltipDelay=\"tooltipDelay\"\n      let-trackByEventId=\"trackByEventId\"\n      let-validateDrag=\"validateDrag\"\n    >\n      <div\n        class=\"cal-cell-top\"\n        [attr.aria-label]=\"\n          { day: day, locale: locale } | calendarA11y : 'monthCell'\n        \"\n      >\n        <span aria-hidden=\"true\">\n          <span class=\"cal-day-badge\" *ngIf=\"day.badgeTotal > 0\">{{\n            day.badgeTotal\n          }}</span>\n          <span class=\"cal-day-number\">{{\n            day.date | calendarDate : 'monthViewDayNumber' : locale\n          }}</span>\n        </span>\n      </div>\n      <div class=\"cal-events\" *ngIf=\"day.events.length > 0\">\n        <div\n          class=\"cal-event\"\n          *ngFor=\"let event of day.events; trackBy: trackByEventId\"\n          [ngStyle]=\"{ backgroundColor: event.color?.primary }\"\n          [ngClass]=\"event?.cssClass\"\n          (mouseenter)=\"highlightDay.emit({ event: event })\"\n          (mouseleave)=\"unhighlightDay.emit({ event: event })\"\n          [mwlCalendarTooltip]=\"\n            event.title | calendarEventTitle : 'monthTooltip' : event\n          \"\n          [tooltipPlacement]=\"tooltipPlacement\"\n          [tooltipEvent]=\"event\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipAppendToBody]=\"tooltipAppendToBody\"\n          [tooltipDelay]=\"tooltipDelay\"\n          mwlDraggable\n          [class.cal-draggable]=\"event.draggable\"\n          dragActiveClass=\"cal-drag-active\"\n          [dropData]=\"{ event: event, draggedFrom: day }\"\n          [dragAxis]=\"{ x: event.draggable, y: event.draggable }\"\n          [validateDrag]=\"validateDrag\"\n          [touchStartLongPress]=\"{ delay: 300, delta: 30 }\"\n          (mwlClick)=\"eventClicked.emit({ event: event, sourceEvent: $event })\"\n          [attr.aria-hidden]=\"{} | calendarA11y : 'hideMonthCellEvents'\"\n        ></div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{\n        day: day,\n        openDay: openDay,\n        locale: locale,\n        tooltipPlacement: tooltipPlacement,\n        highlightDay: highlightDay,\n        unhighlightDay: unhighlightDay,\n        eventClicked: eventClicked,\n        tooltipTemplate: tooltipTemplate,\n        tooltipAppendToBody: tooltipAppendToBody,\n        tooltipDelay: tooltipDelay,\n        trackByEventId: trackByEventId,\n        validateDrag: validateDrag\n      }\"\n    >\n    </ng-template>\n  `,\n  // eslint-disable-next-line @angular-eslint/no-host-metadata-property\n  host: {\n    class: 'cal-cell cal-day-cell',\n    '[class.cal-past]': 'day.isPast',\n    '[class.cal-today]': 'day.isToday',\n    '[class.cal-future]': 'day.isFuture',\n    '[class.cal-weekend]': 'day.isWeekend',\n    '[class.cal-in-month]': 'day.inMonth',\n    '[class.cal-out-month]': '!day.inMonth',\n    '[class.cal-has-events]': 'day.events.length > 0',\n    '[class.cal-open]': 'day === openDay',\n    '[class.cal-event-highlight]': '!!day.backgroundColor',\n  },\n})\nexport class CalendarMonthCellComponent {\n  @Input() day: MonthViewDay;\n\n  @Input() openDay: MonthViewDay;\n\n  @Input() locale: string;\n\n  @Input() tooltipPlacement: PlacementArray;\n\n  @Input() tooltipAppendToBody: boolean;\n\n  @Input() customTemplate: TemplateRef<any>;\n\n  @Input() tooltipTemplate: TemplateRef<any>;\n\n  @Input() tooltipDelay: number | null;\n\n  @Output() highlightDay: EventEmitter<any> = new EventEmitter();\n\n  @Output() unhighlightDay: EventEmitter<any> = new EventEmitter();\n\n  @Output() eventClicked = new EventEmitter<{\n    event: CalendarEvent;\n    sourceEvent: MouseEvent;\n  }>();\n\n  trackByEventId = trackByEventId;\n\n  validateDrag = isWithinThreshold;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/month/calendar-month-view/calendar-month-view-header/calendar-month-view-header.component.ts","messages":[{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":11,"column":1,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":52,"endColumn":3,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[70,224],"text":", ChangeDetectionStrategy,\n} from '@angular/core';\nimport { WeekDay } from 'calendar-utils';\nimport { trackByWeekDayHeaderDate } from '../../../common/util/util';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/component-max-inline-declarations","severity":2,"message":"`template` has too many lines (37). Maximum allowed is 3 (https://angular.io/guide/styleguide#style-05-04)","line":13,"column":13,"nodeType":"TemplateLiteral","messageId":"componentMaxInlineDeclarations","endLine":51,"endColumn":4},{"ruleId":"@angular-eslint/prefer-output-readonly","severity":2,"message":"Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned","line":60,"column":13,"nodeType":"Identifier","messageId":"preferOutputReadonly","endLine":60,"endColumn":32,"suggestions":[{"messageId":"suggestAddReadonlyModifier","fix":{"range":[1573,1573],"text":"readonly "},"desc":"Add `readonly` modifier"}]},{"ruleId":"@angular-eslint/template/click-events-have-key-events","severity":2,"message":"click must be accompanied by either keyup, keydown or keypress event for accessibility.","line":21,"column":9,"nodeType":null,"messageId":"clickEventsHaveKeyEvents","endLine":39,"endColumn":15},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `*ngFor`, `*ngForOf`, `*ngForTrackBy`, `class`, `tabindex`, `role`, `[cal-past]`, `[cal-today]`, `[cal-future]`, `[cal-weekend]`, `[ngClass]`, `(click)` instead of `class`, `*ngFor`, `*ngForOf`, `*ngForTrackBy`, `[cal-past]`, `[cal-today]`, `[cal-future]`, `[cal-weekend]`, `(click)`, `[ngClass]`, `tabindex`, `role`","line":22,"column":11,"nodeType":null,"messageId":"attributesOrder","endLine":36,"endColumn":30,"fix":{"range":[515,1018],"text":"*ngFor=\n           of days; t\"let day trackBy: trackByWeekDayHeaderDate\"class=\"cal-cell\"\n          tabindex=\"0\"\n          role=\"columnheader\"\n          [class.cal-past]=\"day.isPast\"\n          [class.cal-today]=\"day.isToday\"\n          [class.cal-future]=\"day.isFuture\"\n          [class.cal-weekend]=\"day.isWeekend\"\n          [ngClass]=\"day.cssClass\"\n          (click)=\"\n            columnHeaderClicked.emit({\n              isoDayNumber: day.day,\n              sourceEvent: $event\n            })\n          \""}}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import {\n  Component,\n  Input,\n  TemplateRef,\n  EventEmitter,\n  Output,\n} from '@angular/core';\nimport { WeekDay } from 'calendar-utils';\nimport { trackByWeekDayHeaderDate } from '../../../common/util/util';\n\n@Component({\n  selector: 'mwl-calendar-month-view-header',\n  template: `\n    <ng-template\n      #defaultTemplate\n      let-days=\"days\"\n      let-locale=\"locale\"\n      let-trackByWeekDayHeaderDate=\"trackByWeekDayHeaderDate\"\n    >\n      <div class=\"cal-cell-row cal-header\" role=\"row\">\n        <div\n          class=\"cal-cell\"\n          *ngFor=\"let day of days; trackBy: trackByWeekDayHeaderDate\"\n          [class.cal-past]=\"day.isPast\"\n          [class.cal-today]=\"day.isToday\"\n          [class.cal-future]=\"day.isFuture\"\n          [class.cal-weekend]=\"day.isWeekend\"\n          (click)=\"\n            columnHeaderClicked.emit({\n              isoDayNumber: day.day,\n              sourceEvent: $event\n            })\n          \"\n          [ngClass]=\"day.cssClass\"\n          tabindex=\"0\"\n          role=\"columnheader\"\n        >\n          {{ day.date | calendarDate : 'monthViewColumnHeader' : locale }}\n        </div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{\n        days: days,\n        locale: locale,\n        trackByWeekDayHeaderDate: trackByWeekDayHeaderDate\n      }\"\n    >\n    </ng-template>\n  `,\n})\nexport class CalendarMonthViewHeaderComponent {\n  @Input() days: WeekDay[];\n\n  @Input() locale: string;\n\n  @Input() customTemplate: TemplateRef<any>;\n\n  @Output() columnHeaderClicked = new EventEmitter<{\n    isoDayNumber: number;\n    sourceEvent: MouseEvent;\n  }>();\n\n  trackByWeekDayHeaderDate = trackByWeekDayHeaderDate;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/month/calendar-month-view/calendar-month-view.component.ts","messages":[{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":54,"column":1,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":142,"endColumn":3,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[150,1297],"text":", ChangeDetectionStrategy,\n} from '@angular/core';\nimport {\n  CalendarEvent,\n  WeekDay,\n  MonthView,\n  MonthViewDay,\n  ViewPeriod,\n} from 'calendar-utils';\nimport { Subject, Subscription } from 'rxjs';\nimport {\n  CalendarEventTimesChangedEvent,\n  CalendarEventTimesChangedEventType,\n} from '../../common/calendar-event-times-changed-event/calendar-event-times-changed-event.interface';\nimport { CalendarUtils } from '../../common/calendar-utils/calendar-utils.provider';\nimport { validateEvents } from '../../common/util/util';\nimport { DateAdapter } from '../../../date-adapters/date-adapter';\nimport { PlacementArray } from 'positioning';\n\nexport interface CalendarMonthViewBeforeRenderEvent {\n  header: WeekDay[];\n  body: MonthViewDay[];\n  period: ViewPeriod;\n}\n\nexport interface CalendarMonthViewEventTimesChangedEvent<\n  EventMetaType = any,\n  DayMetaType = any\n> extends CalendarEventTimesChangedEvent<EventMetaType> {\n  day: MonthViewDay<DayMetaType>;\n}\n\n/**\n * Shows all events on a given month. Example usage:\n *\n * ```typescript\n * <mwl-calendar-month-view\n *  [viewDate]=\"viewDate\"\n *  [events]=\"events\">\n * </mwl-calendar-month-view>\n * ```\n */\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/component-max-inline-declarations","severity":2,"message":"`template` has too many lines (84). Maximum allowed is 3 (https://angular.io/guide/styleguide#style-05-04)","line":56,"column":13,"nodeType":"TemplateLiteral","messageId":"componentMaxInlineDeclarations","endLine":141,"endColumn":4},{"ruleId":"@angular-eslint/prefer-output-readonly","severity":2,"message":"Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned","line":251,"column":13,"nodeType":"Identifier","messageId":"preferOutputReadonly","endLine":251,"endColumn":29,"suggestions":[{"messageId":"suggestAddReadonlyModifier","fix":{"range":[7324,7324],"text":"readonly "},"desc":"Add `readonly` modifier"}]},{"ruleId":"@angular-eslint/prefer-output-readonly","severity":2,"message":"Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned","line":257,"column":13,"nodeType":"Identifier","messageId":"preferOutputReadonly","endLine":257,"endColumn":23,"suggestions":[{"messageId":"suggestAddReadonlyModifier","fix":{"range":[7469,7469],"text":"readonly "},"desc":"Add `readonly` modifier"}]},{"ruleId":"@angular-eslint/prefer-output-readonly","severity":2,"message":"Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned","line":265,"column":13,"nodeType":"Identifier","messageId":"preferOutputReadonly","endLine":265,"endColumn":25,"suggestions":[{"messageId":"suggestAddReadonlyModifier","fix":{"range":[7646,7646],"text":"readonly "},"desc":"Add `readonly` modifier"}]},{"ruleId":"@angular-eslint/prefer-output-readonly","severity":2,"message":"Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned","line":273,"column":13,"nodeType":"Identifier","messageId":"preferOutputReadonly","endLine":273,"endColumn":32,"suggestions":[{"messageId":"suggestAddReadonlyModifier","fix":{"range":[7855,7855],"text":"readonly "},"desc":"Add `readonly` modifier"}]},{"ruleId":"@angular-eslint/prefer-output-readonly","severity":2,"message":"Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned","line":282,"column":3,"nodeType":"Identifier","messageId":"preferOutputReadonly","endLine":282,"endColumn":20,"suggestions":[{"messageId":"suggestAddReadonlyModifier","fix":{"range":[8051,8051],"text":"readonly "},"desc":"Add `readonly` modifier"}]},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `[customTemplate]`, `(columnHeaderClicked)` instead of `(columnHeaderClicked)`, `[customTemplate]`","line":61,"column":9,"nodeType":null,"messageId":"attributesOrder","endLine":62,"endColumn":42,"fix":{"range":[1495,1593],"text":"[customTemplate]=\"headerTemplate\"\n        (columnHeaderClicked)=\"columnHeaderClicked.emit($event)\""}},{"ruleId":"@angular-eslint/template/no-inline-styles","severity":2,"message":"<mwl-calendar-month-cell/> element should not have inline styles via style attribute. Please use classes instead.","line":70,"column":13,"nodeType":null,"messageId":"noInlineStyles","endLine":111,"endColumn":39},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `*ngFor`, `*ngForOf`, `*ngForTrackBy`, `role`, `mwlDroppable`, `dragOverClass`, `[ngClass]`, `[day]`, `[openDay]`, `[locale]`, `[tooltipPlacement]`, `[tooltipAppendToBody]`, `[tooltipTemplate]`, `[tooltipDelay]`, `[customTemplate]`, `[ngStyle]`, `[clickListenerDisabled]`, `[tabindex]`, `(mwlClick)`, `(mwlKeydownEnter)`, `(highlightDay)`, `(unhighlightDay)`, `(drop)`, `(eventClicked)` instead of `role`, `*ngFor`, `*ngForOf`, `*ngForTrackBy`, `[ngClass]`, `[day]`, `[openDay]`, `[locale]`, `[tooltipPlacement]`, `[tooltipAppendToBody]`, `[tooltipTemplate]`, `[tooltipDelay]`, `[customTemplate]`, `[ngStyle]`, `(mwlClick)`, `[clickListenerDisabled]`, `(mwlKeydownEnter)`, `(highlightDay)`, `(unhighlightDay)`, `mwlDroppable`, `dragOverClass`, `(drop)`, `(eventClicked)`, `[tabindex]`","line":71,"column":15,"nodeType":null,"messageId":"attributesOrder","endLine":109,"endColumn":72,"fix":{"range":[1871,3470],"text":"*ngFor=\n                             | slice : rowIndex : rowIndex + view.totalDaysVisibleInWeek;\n                trackBy: trackByDa\"\n                let day of view.days\n   Date\n              \"\n role=\"gridcell\"             mwlDroppable\n              dragOverClass=\"cal-drag-over\"\n              [ngClass]=\"day?.cssClass\"\n              [day]=\"day\"\n              [openDay]=\"openDay\"\n              [locale]=\"locale\"\n              [tooltipPlacement]=\"tooltipPlacement\"\n              [tooltipAppendToBody]=\"tooltipAppendToBody\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [tooltipDelay]=\"tooltipDelay\"\n              [customTemplate]=\"cellTemplate\"\n              [ngStyle]=\"{ backgroundColor: day.backgroundColor }\"\n              [clickListenerDisabled]=\"dayClicked.observers.length === 0\"\n              [attr.tabindex]=\"{} | calendarA11y : 'monthCellTabIndex'\"\n              (mwlClick)=\"dayClicked.emit({ day: day, sourceEvent: $event })\"\n              (mwlKeydownEnter)=\"\n                dayClicked.emit({ day: day, sourceEvent: $event })\n              \"\n              (highlightDay)=\"toggleDayHighlight($event.event, true)\"\n              (unhighlightDay)=\"toggleDayHighlight($event.event, false)\"\n              (drop)=\"\n                eventDropped(\n                  day,\n                  $event.dropData.event,\n                  $event.dropData.draggedFrom\n                )\n              \"\n              (eventClicked)=\"\n                eventClicked.emit({\n                  event: $event.event,\n                  sourceEvent: $event.sourceEvent\n                })\n              \""}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Attribute \"dragOverClass\" has no corresponding i18n attribute. See more at https://angular.io/guide/i18n#mark-element-attributes-for-translations","line":95,"column":15,"nodeType":null,"messageId":"i18nAttribute","endLine":95,"endColumn":28,"fix":{"range":[3010,3010],"text":" i18n-dragOverClass"}},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `mwlDroppable`, `dragOverClass`, `[locale]`, `[isOpen]`, `[events]`, `[date]`, `[customTemplate]`, `[eventTitleTemplate]`, `[eventActionsTemplate]`, `(eventClicked)` instead of `[locale]`, `[isOpen]`, `[events]`, `[date]`, `[customTemplate]`, `[eventTitleTemplate]`, `[eventActionsTemplate]`, `(eventClicked)`, `mwlDroppable`, `dragOverClass`","line":114,"column":13,"nodeType":null,"messageId":"attributesOrder","endLine":128,"endColumn":42,"fix":{"range":[3593,4144],"text":"mwlDroppable\n            dragOverClass=\"cal-drag-over\"\n            [locale]=\"locale\"\n            [isOpen]=\"openRowIndex === rowIndex\"\n            [events]=\"openDay?.events\"\n            [date]=\"openDay?.date\"\n            [customTemplate]=\"openDayEventsTemplate\"\n            [eventTitleTemplate]=\"eventTitleTemplate\"\n            [eventActionsTemplate]=\"eventActionsTemplate\"\n            (eventClicked)=\"\n              eventClicked.emit({\n                event: $event.event,\n                sourceEvent: $event.sourceEvent\n              })\n            \""}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Attribute \"dragOverClass\" has no corresponding i18n attribute. See more at https://angular.io/guide/i18n#mark-element-attributes-for-translations","line":128,"column":13,"nodeType":null,"messageId":"i18nAttribute","endLine":128,"endColumn":26,"fix":{"range":[4144,4144],"text":" i18n-dragOverClass"}}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":5,"fixableWarningCount":0,"source":"import {\n  Component,\n  OnChanges,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectorRef,\n  OnInit,\n  OnDestroy,\n  LOCALE_ID,\n  Inject,\n  TemplateRef,\n} from '@angular/core';\nimport {\n  CalendarEvent,\n  WeekDay,\n  MonthView,\n  MonthViewDay,\n  ViewPeriod,\n} from 'calendar-utils';\nimport { Subject, Subscription } from 'rxjs';\nimport {\n  CalendarEventTimesChangedEvent,\n  CalendarEventTimesChangedEventType,\n} from '../../common/calendar-event-times-changed-event/calendar-event-times-changed-event.interface';\nimport { CalendarUtils } from '../../common/calendar-utils/calendar-utils.provider';\nimport { validateEvents } from '../../common/util/util';\nimport { DateAdapter } from '../../../date-adapters/date-adapter';\nimport { PlacementArray } from 'positioning';\n\nexport interface CalendarMonthViewBeforeRenderEvent {\n  header: WeekDay[];\n  body: MonthViewDay[];\n  period: ViewPeriod;\n}\n\nexport interface CalendarMonthViewEventTimesChangedEvent<\n  EventMetaType = any,\n  DayMetaType = any\n> extends CalendarEventTimesChangedEvent<EventMetaType> {\n  day: MonthViewDay<DayMetaType>;\n}\n\n/**\n * Shows all events on a given month. Example usage:\n *\n * ```typescript\n * <mwl-calendar-month-view\n *  [viewDate]=\"viewDate\"\n *  [events]=\"events\">\n * </mwl-calendar-month-view>\n * ```\n */\n@Component({\n  selector: 'mwl-calendar-month-view',\n  template: `\n    <div class=\"cal-month-view\" role=\"grid\">\n      <mwl-calendar-month-view-header\n        [days]=\"columnHeaders\"\n        [locale]=\"locale\"\n        (columnHeaderClicked)=\"columnHeaderClicked.emit($event)\"\n        [customTemplate]=\"headerTemplate\"\n      >\n      </mwl-calendar-month-view-header>\n      <div class=\"cal-days\">\n        <div\n          *ngFor=\"let rowIndex of view.rowOffsets; trackBy: trackByRowOffset\"\n        >\n          <div role=\"row\" class=\"cal-cell-row\">\n            <mwl-calendar-month-cell\n              role=\"gridcell\"\n              *ngFor=\"\n                let day of view.days\n                  | slice : rowIndex : rowIndex + view.totalDaysVisibleInWeek;\n                trackBy: trackByDate\n              \"\n              [ngClass]=\"day?.cssClass\"\n              [day]=\"day\"\n              [openDay]=\"openDay\"\n              [locale]=\"locale\"\n              [tooltipPlacement]=\"tooltipPlacement\"\n              [tooltipAppendToBody]=\"tooltipAppendToBody\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [tooltipDelay]=\"tooltipDelay\"\n              [customTemplate]=\"cellTemplate\"\n              [ngStyle]=\"{ backgroundColor: day.backgroundColor }\"\n              (mwlClick)=\"dayClicked.emit({ day: day, sourceEvent: $event })\"\n              [clickListenerDisabled]=\"dayClicked.observers.length === 0\"\n              (mwlKeydownEnter)=\"\n                dayClicked.emit({ day: day, sourceEvent: $event })\n              \"\n              (highlightDay)=\"toggleDayHighlight($event.event, true)\"\n              (unhighlightDay)=\"toggleDayHighlight($event.event, false)\"\n              mwlDroppable\n              dragOverClass=\"cal-drag-over\"\n              (drop)=\"\n                eventDropped(\n                  day,\n                  $event.dropData.event,\n                  $event.dropData.draggedFrom\n                )\n              \"\n              (eventClicked)=\"\n                eventClicked.emit({\n                  event: $event.event,\n                  sourceEvent: $event.sourceEvent\n                })\n              \"\n              [attr.tabindex]=\"{} | calendarA11y : 'monthCellTabIndex'\"\n            >\n            </mwl-calendar-month-cell>\n          </div>\n          <mwl-calendar-open-day-events\n            [locale]=\"locale\"\n            [isOpen]=\"openRowIndex === rowIndex\"\n            [events]=\"openDay?.events\"\n            [date]=\"openDay?.date\"\n            [customTemplate]=\"openDayEventsTemplate\"\n            [eventTitleTemplate]=\"eventTitleTemplate\"\n            [eventActionsTemplate]=\"eventActionsTemplate\"\n            (eventClicked)=\"\n              eventClicked.emit({\n                event: $event.event,\n                sourceEvent: $event.sourceEvent\n              })\n            \"\n            mwlDroppable\n            dragOverClass=\"cal-drag-over\"\n            (drop)=\"\n              eventDropped(\n                openDay,\n                $event.dropData.event,\n                $event.dropData.draggedFrom\n              )\n            \"\n          >\n          </mwl-calendar-open-day-events>\n        </div>\n      </div>\n    </div>\n  `,\n})\nexport class CalendarMonthViewComponent\n  implements OnChanges, OnInit, OnDestroy\n{\n  /**\n   * The current view date\n   */\n  @Input() viewDate: Date;\n\n  /**\n   * An array of events to display on view.\n   * The schema is available here: https://github.com/mattlewis92/calendar-utils/blob/c51689985f59a271940e30bc4e2c4e1fee3fcb5c/src/calendarUtils.ts#L49-L63\n   */\n  @Input() events: CalendarEvent[] = [];\n\n  /**\n   * An array of day indexes (0 = sunday, 1 = monday etc) that will be hidden on the view\n   */\n  @Input() excludeDays: number[] = [];\n\n  /**\n   * Whether the events list for the day of the `viewDate` option is visible or not\n   */\n  @Input() activeDayIsOpen: boolean = false;\n\n  /**\n   * If set will be used to determine the day that should be open. If not set, the `viewDate` is used\n   */\n  @Input() activeDay: Date;\n\n  /**\n   * An observable that when emitted on will re-render the current view\n   */\n  @Input() refresh: Subject<any>;\n\n  /**\n   * The locale used to format dates\n   */\n  @Input() locale: string;\n\n  /**\n   * The placement of the event tooltip\n   */\n  @Input() tooltipPlacement: PlacementArray = 'auto';\n\n  /**\n   * A custom template to use for the event tooltips\n   */\n  @Input() tooltipTemplate: TemplateRef<any>;\n\n  /**\n   * Whether to append tooltips to the body or next to the trigger element\n   */\n  @Input() tooltipAppendToBody: boolean = true;\n\n  /**\n   * The delay in milliseconds before the tooltip should be displayed. If not provided the tooltip\n   * will be displayed immediately.\n   */\n  @Input() tooltipDelay: number | null = null;\n\n  /**\n   * The start number of the week.\n   * If using the moment date adapter this option won't do anything and you'll need to set it globally like so:\n   * ```\n   * moment.updateLocale('en', {\n   *   week: {\n   *     dow: 1, // set start of week to monday instead\n   *     doy: 0,\n   *   },\n   * });\n   * ```\n   */\n  @Input() weekStartsOn: number;\n\n  /**\n   * A custom template to use to replace the header\n   */\n  @Input() headerTemplate: TemplateRef<any>;\n\n  /**\n   * A custom template to use to replace the day cell\n   */\n  @Input() cellTemplate: TemplateRef<any>;\n\n  /**\n   * A custom template to use for the slide down box of events for the active day\n   */\n  @Input() openDayEventsTemplate: TemplateRef<any>;\n\n  /**\n   * A custom template to use for event titles\n   */\n  @Input() eventTitleTemplate: TemplateRef<any>;\n\n  /**\n   * A custom template to use for event actions\n   */\n  @Input() eventActionsTemplate: TemplateRef<any>;\n\n  /**\n   * An array of day indexes (0 = sunday, 1 = monday etc) that indicate which days are weekends\n   */\n  @Input() weekendDays: number[];\n\n  /**\n   * An output that will be called before the view is rendered for the current month.\n   * If you add the `cssClass` property to a day in the body it will add that class to the cell element in the template\n   */\n  @Output() beforeViewRender =\n    new EventEmitter<CalendarMonthViewBeforeRenderEvent>();\n\n  /**\n   * Called when the day cell is clicked\n   */\n  @Output() dayClicked = new EventEmitter<{\n    day: MonthViewDay;\n    sourceEvent: MouseEvent | KeyboardEvent;\n  }>();\n\n  /**\n   * Called when the event title is clicked\n   */\n  @Output() eventClicked = new EventEmitter<{\n    event: CalendarEvent;\n    sourceEvent: MouseEvent | KeyboardEvent;\n  }>();\n\n  /**\n   * Called when a header week day is clicked. Returns ISO day number.\n   */\n  @Output() columnHeaderClicked = new EventEmitter<{\n    isoDayNumber: number;\n    sourceEvent: MouseEvent | KeyboardEvent;\n  }>();\n\n  /**\n   * Called when an event is dragged and dropped\n   */\n  @Output()\n  eventTimesChanged =\n    new EventEmitter<CalendarMonthViewEventTimesChangedEvent>();\n\n  /**\n   * @hidden\n   */\n  columnHeaders: WeekDay[];\n\n  /**\n   * @hidden\n   */\n  view: MonthView;\n\n  /**\n   * @hidden\n   */\n  openRowIndex: number;\n\n  /**\n   * @hidden\n   */\n  openDay: MonthViewDay;\n\n  /**\n   * @hidden\n   */\n  refreshSubscription: Subscription;\n\n  /**\n   * @hidden\n   */\n  constructor(\n    protected cdr: ChangeDetectorRef,\n    protected utils: CalendarUtils,\n    @Inject(LOCALE_ID) locale: string,\n    protected dateAdapter: DateAdapter\n  ) {\n    this.locale = locale;\n  }\n\n  /**\n   * @hidden\n   */\n  trackByRowOffset = (index: number, offset: number) =>\n    this.view.days\n      .slice(offset, this.view.totalDaysVisibleInWeek)\n      .map((day) => day.date.toISOString())\n      .join('-');\n\n  /**\n   * @hidden\n   */\n  trackByDate = (index: number, day: MonthViewDay) => day.date.toISOString();\n\n  /**\n   * @hidden\n   */\n  ngOnInit(): void {\n    if (this.refresh) {\n      this.refreshSubscription = this.refresh.subscribe(() => {\n        this.refreshAll();\n        this.cdr.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnChanges(changes: any): void {\n    const refreshHeader =\n      changes.viewDate || changes.excludeDays || changes.weekendDays;\n    const refreshBody =\n      changes.viewDate ||\n      changes.events ||\n      changes.excludeDays ||\n      changes.weekendDays;\n\n    if (refreshHeader) {\n      this.refreshHeader();\n    }\n\n    if (changes.events) {\n      validateEvents(this.events);\n    }\n\n    if (refreshBody) {\n      this.refreshBody();\n    }\n\n    if (refreshHeader || refreshBody) {\n      this.emitBeforeViewRender();\n    }\n\n    if (\n      changes.activeDayIsOpen ||\n      changes.viewDate ||\n      changes.events ||\n      changes.excludeDays ||\n      changes.activeDay\n    ) {\n      this.checkActiveDayIsOpen();\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnDestroy(): void {\n    if (this.refreshSubscription) {\n      this.refreshSubscription.unsubscribe();\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  toggleDayHighlight(event: CalendarEvent, isHighlighted: boolean): void {\n    this.view.days.forEach((day) => {\n      if (isHighlighted && day.events.indexOf(event) > -1) {\n        day.backgroundColor =\n          (event.color && event.color.secondary) || '#D1E8FF';\n      } else {\n        delete day.backgroundColor;\n      }\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  eventDropped(\n    droppedOn: MonthViewDay,\n    event: CalendarEvent,\n    draggedFrom?: MonthViewDay\n  ): void {\n    if (droppedOn !== draggedFrom) {\n      const year: number = this.dateAdapter.getYear(droppedOn.date);\n      const month: number = this.dateAdapter.getMonth(droppedOn.date);\n      const date: number = this.dateAdapter.getDate(droppedOn.date);\n      const newStart: Date = this.dateAdapter.setDate(\n        this.dateAdapter.setMonth(\n          this.dateAdapter.setYear(event.start, year),\n          month\n        ),\n        date\n      );\n      let newEnd: Date;\n      if (event.end) {\n        const secondsDiff: number = this.dateAdapter.differenceInSeconds(\n          newStart,\n          event.start\n        );\n        newEnd = this.dateAdapter.addSeconds(event.end, secondsDiff);\n      }\n      this.eventTimesChanged.emit({\n        event,\n        newStart,\n        newEnd,\n        day: droppedOn,\n        type: CalendarEventTimesChangedEventType.Drop,\n      });\n    }\n  }\n\n  protected refreshHeader(): void {\n    this.columnHeaders = this.utils.getWeekViewHeader({\n      viewDate: this.viewDate,\n      weekStartsOn: this.weekStartsOn,\n      excluded: this.excludeDays,\n      weekendDays: this.weekendDays,\n    });\n  }\n\n  protected refreshBody(): void {\n    this.view = this.utils.getMonthView({\n      events: this.events,\n      viewDate: this.viewDate,\n      weekStartsOn: this.weekStartsOn,\n      excluded: this.excludeDays,\n      weekendDays: this.weekendDays,\n    });\n  }\n\n  protected checkActiveDayIsOpen(): void {\n    if (this.activeDayIsOpen === true) {\n      const activeDay = this.activeDay || this.viewDate;\n      this.openDay = this.view.days.find((day) =>\n        this.dateAdapter.isSameDay(day.date, activeDay)\n      );\n      const index: number = this.view.days.indexOf(this.openDay);\n      this.openRowIndex =\n        Math.floor(index / this.view.totalDaysVisibleInWeek) *\n        this.view.totalDaysVisibleInWeek;\n    } else {\n      this.openRowIndex = null;\n      this.openDay = null;\n    }\n  }\n\n  protected refreshAll(): void {\n    this.refreshHeader();\n    this.refreshBody();\n    this.emitBeforeViewRender();\n    this.checkActiveDayIsOpen();\n  }\n\n  protected emitBeforeViewRender(): void {\n    if (this.columnHeaders && this.view) {\n      this.beforeViewRender.emit({\n        header: this.columnHeaders,\n        body: this.view.days,\n        period: this.view.period,\n      });\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/month/calendar-month-view/calendar-open-day-events/calendar-open-day-events.component.ts","messages":[{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":42,"column":1,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":130,"endColumn":3,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[70,834],"text":", ChangeDetectionStrategy,\n} from '@angular/core';\nimport {\n  trigger,\n  style,\n  state,\n  transition,\n  animate,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport { CalendarEvent } from 'calendar-utils';\nimport { isWithinThreshold, trackByEventId } from '../../../common/util/util';\n\nexport const collapseAnimation: AnimationTriggerMetadata = trigger('collapse', [\n  state(\n    'void',\n    style({\n      height: 0,\n      overflow: 'hidden',\n      'padding-top': 0,\n      'padding-bottom': 0,\n    })\n  ),\n  state(\n    '*',\n    style({\n      height: '*',\n      overflow: 'hidden',\n      'padding-top': '*',\n      'padding-bottom': '*',\n    })\n  ),\n  transition('* => void', animate('150ms ease-out')),\n  transition('void => *', animate('150ms ease-in')),\n]);\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/component-max-inline-declarations","severity":2,"message":"`template` has too many lines (83). Maximum allowed is 3 (https://angular.io/guide/styleguide#style-05-04)","line":44,"column":13,"nodeType":"TemplateLiteral","messageId":"componentMaxInlineDeclarations","endLine":128,"endColumn":4},{"ruleId":"@angular-eslint/prefer-output-readonly","severity":2,"message":"Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned","line":146,"column":13,"nodeType":"Identifier","messageId":"preferOutputReadonly","endLine":146,"endColumn":25,"suggestions":[{"messageId":"suggestAddReadonlyModifier","fix":{"range":[3760,3760],"text":"readonly "},"desc":"Add `readonly` modifier"}]},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `*ngIf`, `class`, `role`, `[collapse]` instead of `class`, `[collapse]`, `*ngIf`, `role`","line":54,"column":9,"nodeType":null,"messageId":"attributesOrder","endLine":57,"endColumn":27,"fix":{"range":[1124,1221],"text":"*ngIf=\"isOpen\"\n        class=\"cal-open-day-events\"\n        role=\"application\"\n        [@collapse]"}},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `mwlDraggable`, `dragActiveClass`, `[ngClass]`, `[cal-draggable]` instead of `[ngClass]`, `mwlDraggable`, `[cal-draggable]`, `dragActiveClass`","line":76,"column":11,"nodeType":null,"messageId":"attributesOrder","endLine":79,"endColumn":44,"fix":{"range":[1738,1882],"text":"mwlDraggable\n          dragActiveClass=\"cal-drag-active\"\n          [ngClass]=\"event?.cssClass\"\n          [class.cal-draggable]=\"event.draggable\""}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Attribute \"dragActiveClass\" has no corresponding i18n attribute. See more at https://angular.io/guide/i18n#mark-element-attributes-for-translations","line":79,"column":11,"nodeType":null,"messageId":"i18nAttribute","endLine":79,"endColumn":26,"fix":{"range":[1882,1882],"text":" i18n-dragActiveClass"}},{"ruleId":"@angular-eslint/template/no-inline-styles","severity":2,"message":"<span/> element should not have inline styles via style attribute. Please use classes instead.","line":85,"column":11,"nodeType":null,"messageId":"noInlineStyles","endLine":89,"endColumn":18},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `view`, `tabindex`, `[event]`, `[customTemplate]`, `[aria-label]`, `(mwlClick)`, `(mwlKeydownEnter)` instead of `[event]`, `[customTemplate]`, `view`, `(mwlClick)`, `(mwlKeydownEnter)`, `tabindex`, `[aria-label]`","line":92,"column":13,"nodeType":null,"messageId":"attributesOrder","endLine":105,"endColumn":14,"fix":{"range":[2306,2793],"text":"view=\"month\"\n            tabindex=\"0\"\n            [event]=\"event\"\n            [customTemplate]=\"eventTitleTemplate\"\n            [attr.aria-label]=\"\n              { event: event, locale: locale }\n                | calendarA11y : 'eventDescription'\n            \"\n            (mwlClick)=\"\n              eventClicked.emit({ event: event, sourceEvent: $event })\n            \"\n            (mwlKeydownEnter)=\"\n              eventClicked.emit({ event: event, sourceEvent: $event })\n            \""}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Attribute \"view\" has no corresponding i18n attribute. See more at https://angular.io/guide/i18n#mark-element-attributes-for-translations","line":94,"column":13,"nodeType":null,"messageId":"i18nAttribute","endLine":94,"endColumn":17,"fix":{"range":[2396,2396],"text":" i18n-view"}}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":5,"fixableWarningCount":0,"source":"import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  TemplateRef,\n} from '@angular/core';\nimport {\n  trigger,\n  style,\n  state,\n  transition,\n  animate,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport { CalendarEvent } from 'calendar-utils';\nimport { isWithinThreshold, trackByEventId } from '../../../common/util/util';\n\nexport const collapseAnimation: AnimationTriggerMetadata = trigger('collapse', [\n  state(\n    'void',\n    style({\n      height: 0,\n      overflow: 'hidden',\n      'padding-top': 0,\n      'padding-bottom': 0,\n    })\n  ),\n  state(\n    '*',\n    style({\n      height: '*',\n      overflow: 'hidden',\n      'padding-top': '*',\n      'padding-bottom': '*',\n    })\n  ),\n  transition('* => void', animate('150ms ease-out')),\n  transition('void => *', animate('150ms ease-in')),\n]);\n\n@Component({\n  selector: 'mwl-calendar-open-day-events',\n  template: `\n    <ng-template\n      #defaultTemplate\n      let-events=\"events\"\n      let-eventClicked=\"eventClicked\"\n      let-isOpen=\"isOpen\"\n      let-trackByEventId=\"trackByEventId\"\n      let-validateDrag=\"validateDrag\"\n    >\n      <div\n        class=\"cal-open-day-events\"\n        [@collapse]\n        *ngIf=\"isOpen\"\n        role=\"application\"\n      >\n        <span\n          tabindex=\"-1\"\n          role=\"alert\"\n          [attr.aria-label]=\"\n            { date: date, locale: locale } | calendarA11y : 'openDayEventsAlert'\n          \"\n        ></span>\n        <span\n          tabindex=\"0\"\n          role=\"landmark\"\n          [attr.aria-label]=\"\n            { date: date, locale: locale }\n              | calendarA11y : 'openDayEventsLandmark'\n          \"\n        ></span>\n        <div\n          *ngFor=\"let event of events; trackBy: trackByEventId\"\n          [ngClass]=\"event?.cssClass\"\n          mwlDraggable\n          [class.cal-draggable]=\"event.draggable\"\n          dragActiveClass=\"cal-drag-active\"\n          [dropData]=\"{ event: event }\"\n          [dragAxis]=\"{ x: event.draggable, y: event.draggable }\"\n          [validateDrag]=\"validateDrag\"\n          [touchStartLongPress]=\"{ delay: 300, delta: 30 }\"\n        >\n          <span\n            class=\"cal-event\"\n            [ngStyle]=\"{ backgroundColor: event.color?.primary }\"\n          >\n          </span>\n          &ngsp;\n          <mwl-calendar-event-title\n            [event]=\"event\"\n            [customTemplate]=\"eventTitleTemplate\"\n            view=\"month\"\n            (mwlClick)=\"\n              eventClicked.emit({ event: event, sourceEvent: $event })\n            \"\n            (mwlKeydownEnter)=\"\n              eventClicked.emit({ event: event, sourceEvent: $event })\n            \"\n            tabindex=\"0\"\n            [attr.aria-label]=\"\n              { event: event, locale: locale }\n                | calendarA11y : 'eventDescription'\n            \"\n          >\n          </mwl-calendar-event-title>\n          &ngsp;\n          <mwl-calendar-event-actions\n            [event]=\"event\"\n            [customTemplate]=\"eventActionsTemplate\"\n          >\n          </mwl-calendar-event-actions>\n        </div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{\n        events: events,\n        eventClicked: eventClicked,\n        isOpen: isOpen,\n        trackByEventId: trackByEventId,\n        validateDrag: validateDrag\n      }\"\n    >\n    </ng-template>\n  `,\n  animations: [collapseAnimation],\n})\nexport class CalendarOpenDayEventsComponent {\n  @Input() locale: string;\n\n  @Input() isOpen: boolean = false;\n\n  @Input() events: CalendarEvent[];\n\n  @Input() customTemplate: TemplateRef<any>;\n\n  @Input() eventTitleTemplate: TemplateRef<any>;\n\n  @Input() eventActionsTemplate: TemplateRef<any>;\n\n  @Input() date: Date;\n\n  @Output() eventClicked = new EventEmitter<{\n    event: CalendarEvent;\n    sourceEvent: MouseEvent | KeyboardEvent;\n  }>();\n\n  trackByEventId = trackByEventId;\n\n  validateDrag = isWithinThreshold;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/month/calendar-month.module.ts","messages":[{"ruleId":"@angular-eslint/sort-ngmodule-metadata-arrays","severity":2,"message":"`NgModule` metadata arrays should be sorted in ASC alphabetical order","line":24,"column":46,"nodeType":"Identifier","messageId":"sortNgmoduleMetadataArrays","endLine":24,"endColumn":66,"fix":{"range":[1664,1703],"text":"CalendarCommonModule, DragAndDropModule"}},{"ruleId":"@angular-eslint/sort-ngmodule-metadata-arrays","severity":2,"message":"`NgModule` metadata arrays should be sorted in ASC alphabetical order","line":27,"column":5,"nodeType":"Identifier","messageId":"sortNgmoduleMetadataArrays","endLine":27,"endColumn":31,"fix":{"range":[1728,1786],"text":"CalendarMonthCellComponent,\n    CalendarMonthViewComponent"}},{"ruleId":"@angular-eslint/sort-ngmodule-metadata-arrays","severity":2,"message":"`NgModule` metadata arrays should be sorted in ASC alphabetical order","line":33,"column":5,"nodeType":"Identifier","messageId":"sortNgmoduleMetadataArrays","endLine":33,"endColumn":31,"fix":{"range":[1884,1933],"text":"CalendarMonthViewComponent,\n    DragAndDropModule"}}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DragAndDropModule } from 'angular-draggable-droppable';\nimport { CalendarMonthViewComponent } from './calendar-month-view/calendar-month-view.component';\nimport { CalendarMonthViewHeaderComponent } from './calendar-month-view/calendar-month-view-header/calendar-month-view-header.component';\nimport { CalendarMonthCellComponent } from './calendar-month-view/calendar-month-cell/calendar-month-cell.component';\nimport { CalendarOpenDayEventsComponent } from './calendar-month-view/calendar-open-day-events/calendar-open-day-events.component';\nimport { CalendarCommonModule } from '../common/calendar-common.module';\n\nexport {\n  CalendarMonthViewComponent,\n  CalendarMonthViewBeforeRenderEvent,\n  CalendarMonthViewEventTimesChangedEvent,\n} from './calendar-month-view/calendar-month-view.component';\nexport { MonthViewDay as CalendarMonthViewDay } from 'calendar-utils';\nexport { collapseAnimation } from './calendar-month-view/calendar-open-day-events/calendar-open-day-events.component';\n\n// needed for ivy, not part of the public api\nexport { CalendarMonthCellComponent as ɵCalendarMonthCellComponent } from './calendar-month-view/calendar-month-cell/calendar-month-cell.component';\nexport { CalendarMonthViewHeaderComponent as ɵCalendarMonthViewHeaderComponent } from './calendar-month-view/calendar-month-view-header/calendar-month-view-header.component';\nexport { CalendarOpenDayEventsComponent as ɵCalendarOpenDayEventsComponent } from './calendar-month-view/calendar-open-day-events/calendar-open-day-events.component';\n\n@NgModule({\n  imports: [CommonModule, DragAndDropModule, CalendarCommonModule],\n  declarations: [\n    CalendarMonthViewComponent,\n    CalendarMonthCellComponent,\n    CalendarOpenDayEventsComponent,\n    CalendarMonthViewHeaderComponent,\n  ],\n  exports: [\n    DragAndDropModule,\n    CalendarMonthViewComponent,\n    CalendarMonthCellComponent,\n    CalendarOpenDayEventsComponent,\n    CalendarMonthViewHeaderComponent,\n  ],\n})\nexport class CalendarMonthModule {}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/week/calendar-week-view/calendar-week-view-current-time-marker/calendar-week-view-current-time-marker.component.ts","messages":[{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":13,"column":1,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":46,"endColumn":3,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[84,331],"text":", ChangeDetectionStrategy,\n} from '@angular/core';\nimport { BehaviorSubject, interval, Observable } from 'rxjs';\nimport { switchMapTo, startWith, map, switchMap } from 'rxjs/operators';\nimport { DateAdapter } from '../../../../date-adapters/date-adapter';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/component-max-inline-declarations","severity":2,"message":"`template` has too many lines (29). Maximum allowed is 3 (https://angular.io/guide/styleguide#style-05-04)","line":15,"column":13,"nodeType":"TemplateLiteral","messageId":"componentMaxInlineDeclarations","endLine":45,"endColumn":4},{"ruleId":"@angular-eslint/template/no-inline-styles","severity":2,"message":"<div/> element should not have inline styles via style attribute. Please use classes instead.","line":26,"column":7,"nodeType":null,"messageId":"noInlineStyles","endLine":30,"endColumn":14},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `*ngIf`, `class` instead of `class`, `*ngIf`","line":27,"column":9,"nodeType":null,"messageId":"attributesOrder","endLine":28,"endColumn":26,"fix":{"range":[707,764],"text":"*ngIf=\"isVisible\"\n        class=\"cal-current-time-marker\""}}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import {\n  Component,\n  Input,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n  TemplateRef,\n} from '@angular/core';\nimport { BehaviorSubject, interval, Observable } from 'rxjs';\nimport { switchMapTo, startWith, map, switchMap } from 'rxjs/operators';\nimport { DateAdapter } from '../../../../date-adapters/date-adapter';\n\n@Component({\n  selector: 'mwl-calendar-week-view-current-time-marker',\n  template: `\n    <ng-template\n      #defaultTemplate\n      let-columnDate=\"columnDate\"\n      let-dayStartHour=\"dayStartHour\"\n      let-dayStartMinute=\"dayStartMinute\"\n      let-dayEndHour=\"dayEndHour\"\n      let-dayEndMinute=\"dayEndMinute\"\n      let-isVisible=\"isVisible\"\n      let-topPx=\"topPx\"\n    >\n      <div\n        class=\"cal-current-time-marker\"\n        *ngIf=\"isVisible\"\n        [style.top.px]=\"topPx\"\n      ></div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{\n        columnDate: columnDate,\n        dayStartHour: dayStartHour,\n        dayStartMinute: dayStartMinute,\n        dayEndHour: dayEndHour,\n        dayEndMinute: dayEndMinute,\n        isVisible: (marker$ | async)?.isVisible,\n        topPx: (marker$ | async)?.top\n      }\"\n    >\n    </ng-template>\n  `,\n})\nexport class CalendarWeekViewCurrentTimeMarkerComponent implements OnChanges {\n  @Input() columnDate: Date;\n\n  @Input() dayStartHour: number;\n\n  @Input() dayStartMinute: number;\n\n  @Input() dayEndHour: number;\n\n  @Input() dayEndMinute: number;\n\n  @Input() hourSegments: number;\n\n  @Input() hourDuration: number;\n\n  @Input() hourSegmentHeight: number;\n\n  @Input() customTemplate: TemplateRef<any>;\n\n  columnDate$ = new BehaviorSubject<Date>(undefined);\n\n  marker$: Observable<{\n    isVisible: boolean;\n    top: number;\n  }> = this.zone.onStable.pipe(\n    switchMap(() => interval(60 * 1000)),\n    startWith(0),\n    switchMapTo(this.columnDate$),\n    map((columnDate) => {\n      const startOfDay = this.dateAdapter.setMinutes(\n        this.dateAdapter.setHours(columnDate, this.dayStartHour),\n        this.dayStartMinute\n      );\n      const endOfDay = this.dateAdapter.setMinutes(\n        this.dateAdapter.setHours(columnDate, this.dayEndHour),\n        this.dayEndMinute\n      );\n      const hourHeightModifier =\n        (this.hourSegments * this.hourSegmentHeight) /\n        (this.hourDuration || 60);\n      const now = new Date();\n      return {\n        isVisible:\n          this.dateAdapter.isSameDay(columnDate, now) &&\n          now >= startOfDay &&\n          now <= endOfDay,\n        top:\n          this.dateAdapter.differenceInMinutes(now, startOfDay) *\n          hourHeightModifier,\n      };\n    })\n  );\n\n  constructor(private dateAdapter: DateAdapter, private zone: NgZone) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.columnDate) {\n      this.columnDate$.next(changes.columnDate.currentValue);\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/week/calendar-week-view/calendar-week-view-event/calendar-week-view-event.component.ts","messages":[{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":15,"column":1,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":89,"endColumn":3,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[70,258],"text":", ChangeDetectionStrategy,\n} from '@angular/core';\nimport {\n  WeekViewAllDayEvent,\n  WeekViewTimeEvent,\n  WeekViewHourColumn,\n} from 'calendar-utils';\nimport { PlacementArray } from 'positioning';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/component-max-inline-declarations","severity":2,"message":"`template` has too many lines (70). Maximum allowed is 3 (https://angular.io/guide/styleguide#style-05-04)","line":17,"column":13,"nodeType":"TemplateLiteral","messageId":"componentMaxInlineDeclarations","endLine":88,"endColumn":4},{"ruleId":"@angular-eslint/prefer-output-readonly","severity":2,"message":"Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned","line":115,"column":13,"nodeType":"Identifier","messageId":"preferOutputReadonly","endLine":115,"endColumn":25,"suggestions":[{"messageId":"suggestAddReadonlyModifier","fix":{"range":[3387,3387],"text":"readonly "},"desc":"Add `readonly` modifier"}]},{"ruleId":"@angular-eslint/template/no-inline-styles","severity":2,"message":"<div/> element should not have inline styles via style attribute. Please use classes instead.","line":30,"column":7,"nodeType":null,"messageId":"noInlineStyles","endLine":71,"endColumn":13},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `tabindex`, `role`, `[ngStyle]`, `[mwlCalendarTooltip]`, `[tooltipPlacement]`, `[tooltipEvent]`, `[tooltipTemplate]`, `[tooltipAppendToBody]`, `[tooltipDelay]`, `[aria-label]`, `(mwlClick)`, `(mwlKeydownEnter)` instead of `[ngStyle]`, `[mwlCalendarTooltip]`, `[tooltipPlacement]`, `[tooltipEvent]`, `[tooltipTemplate]`, `[tooltipAppendToBody]`, `[tooltipDelay]`, `(mwlClick)`, `(mwlKeydownEnter)`, `tabindex`, `role`, `[aria-label]`","line":32,"column":9,"nodeType":null,"messageId":"attributesOrder","endLine":57,"endColumn":10,"fix":{"range":[758,1823],"text":"tabindex=\"0\"\n        role=\"application\"\n        [ngStyle]=\"{\n          color: weekEvent.event.color?.secondaryText,\n          backgroundColor: weekEvent.event.color?.secondary,\n          borderColor: weekEvent.event.color?.primary\n        }\"\n        [mwlCalendarTooltip]=\"\n          !tooltipDisabled\n            ? (weekEvent.event.title\n              | calendarEventTitle\n                : (daysInWeek === 1 ? 'dayTooltip' : 'weekTooltip')\n                : weekEvent.tempEvent || weekEvent.event)\n            : ''\n        \"\n        [tooltipPlacement]=\"tooltipPlacement\"\n        [tooltipEvent]=\"weekEvent.tempEvent || weekEvent.event\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipAppendToBody]=\"tooltipAppendToBody\"\n        [tooltipDelay]=\"tooltipDelay\"\n        [attr.aria-label]=\"\n          { event: weekEvent.tempEvent || weekEvent.event, locale: locale }\n            | calendarA11y : 'eventDescription'\n        \"\n        (mwlClick)=\"eventClicked.emit({ sourceEvent: $event })\"\n        (mwlKeydownEnter)=\"eventClicked.emit({ sourceEvent: $event })\""}}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  TemplateRef,\n} from '@angular/core';\nimport {\n  WeekViewAllDayEvent,\n  WeekViewTimeEvent,\n  WeekViewHourColumn,\n} from 'calendar-utils';\nimport { PlacementArray } from 'positioning';\n\n@Component({\n  selector: 'mwl-calendar-week-view-event',\n  template: `\n    <ng-template\n      #defaultTemplate\n      let-weekEvent=\"weekEvent\"\n      let-tooltipPlacement=\"tooltipPlacement\"\n      let-eventClicked=\"eventClicked\"\n      let-tooltipTemplate=\"tooltipTemplate\"\n      let-tooltipAppendToBody=\"tooltipAppendToBody\"\n      let-tooltipDisabled=\"tooltipDisabled\"\n      let-tooltipDelay=\"tooltipDelay\"\n      let-column=\"column\"\n      let-daysInWeek=\"daysInWeek\"\n    >\n      <div\n        class=\"cal-event\"\n        [ngStyle]=\"{\n          color: weekEvent.event.color?.secondaryText,\n          backgroundColor: weekEvent.event.color?.secondary,\n          borderColor: weekEvent.event.color?.primary\n        }\"\n        [mwlCalendarTooltip]=\"\n          !tooltipDisabled\n            ? (weekEvent.event.title\n              | calendarEventTitle\n                : (daysInWeek === 1 ? 'dayTooltip' : 'weekTooltip')\n                : weekEvent.tempEvent || weekEvent.event)\n            : ''\n        \"\n        [tooltipPlacement]=\"tooltipPlacement\"\n        [tooltipEvent]=\"weekEvent.tempEvent || weekEvent.event\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipAppendToBody]=\"tooltipAppendToBody\"\n        [tooltipDelay]=\"tooltipDelay\"\n        (mwlClick)=\"eventClicked.emit({ sourceEvent: $event })\"\n        (mwlKeydownEnter)=\"eventClicked.emit({ sourceEvent: $event })\"\n        tabindex=\"0\"\n        role=\"application\"\n        [attr.aria-label]=\"\n          { event: weekEvent.tempEvent || weekEvent.event, locale: locale }\n            | calendarA11y : 'eventDescription'\n        \"\n      >\n        <mwl-calendar-event-actions\n          [event]=\"weekEvent.tempEvent || weekEvent.event\"\n          [customTemplate]=\"eventActionsTemplate\"\n        >\n        </mwl-calendar-event-actions>\n        &ngsp;\n        <mwl-calendar-event-title\n          [event]=\"weekEvent.tempEvent || weekEvent.event\"\n          [customTemplate]=\"eventTitleTemplate\"\n          [view]=\"daysInWeek === 1 ? 'day' : 'week'\"\n        >\n        </mwl-calendar-event-title>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{\n        weekEvent: weekEvent,\n        tooltipPlacement: tooltipPlacement,\n        eventClicked: eventClicked,\n        tooltipTemplate: tooltipTemplate,\n        tooltipAppendToBody: tooltipAppendToBody,\n        tooltipDisabled: tooltipDisabled,\n        tooltipDelay: tooltipDelay,\n        column: column,\n        daysInWeek: daysInWeek\n      }\"\n    >\n    </ng-template>\n  `,\n})\nexport class CalendarWeekViewEventComponent {\n  @Input() locale: string;\n\n  @Input() weekEvent: WeekViewAllDayEvent | WeekViewTimeEvent;\n\n  @Input() tooltipPlacement: PlacementArray;\n\n  @Input() tooltipAppendToBody: boolean;\n\n  @Input() tooltipDisabled: boolean;\n\n  @Input() tooltipDelay: number | null;\n\n  @Input() customTemplate: TemplateRef<any>;\n\n  @Input() eventTitleTemplate: TemplateRef<any>;\n\n  @Input() eventActionsTemplate: TemplateRef<any>;\n\n  @Input() tooltipTemplate: TemplateRef<any>;\n\n  @Input() column: WeekViewHourColumn;\n\n  @Input() daysInWeek: number;\n\n  @Output() eventClicked = new EventEmitter<{\n    sourceEvent: MouseEvent | KeyboardEvent;\n  }>();\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/week/calendar-week-view/calendar-week-view-header/calendar-week-view-header.component.ts","messages":[{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":11,"column":1,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":66,"endColumn":3,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[70,239],"text":", ChangeDetectionStrategy,\n} from '@angular/core';\nimport { CalendarEvent, WeekDay } from 'calendar-utils';\nimport { trackByWeekDayHeaderDate } from '../../../common/util/util';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/component-max-inline-declarations","severity":2,"message":"`template` has too many lines (51). Maximum allowed is 3 (https://angular.io/guide/styleguide#style-05-04)","line":13,"column":13,"nodeType":"TemplateLiteral","messageId":"componentMaxInlineDeclarations","endLine":65,"endColumn":4},{"ruleId":"@angular-eslint/prefer-output-readonly","severity":2,"message":"Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned","line":74,"column":13,"nodeType":"Identifier","messageId":"preferOutputReadonly","endLine":74,"endColumn":29,"suggestions":[{"messageId":"suggestAddReadonlyModifier","fix":{"range":[2141,2141],"text":"readonly "},"desc":"Add `readonly` modifier"}]},{"ruleId":"@angular-eslint/prefer-output-readonly","severity":2,"message":"Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned","line":79,"column":13,"nodeType":"Identifier","messageId":"preferOutputReadonly","endLine":79,"endColumn":25,"suggestions":[{"messageId":"suggestAddReadonlyModifier","fix":{"range":[2247,2247],"text":"readonly "},"desc":"Add `readonly` modifier"}]},{"ruleId":"@angular-eslint/prefer-output-readonly","severity":2,"message":"Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned","line":84,"column":13,"nodeType":"Identifier","messageId":"preferOutputReadonly","endLine":84,"endColumn":22,"suggestions":[{"messageId":"suggestAddReadonlyModifier","fix":{"range":[2348,2348],"text":"readonly "},"desc":"Add `readonly` modifier"}]},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `*ngFor`, `*ngForOf`, `*ngForTrackBy`, `class`, `mwlDroppable`, `dragOverClass`, `tabindex`, `role`, `[cal-past]`, `[cal-today]`, `[cal-future]`, `[cal-weekend]`, `[ngClass]`, `(mwlClick)`, `(drop)`, `(dragEnter)` instead of `class`, `*ngFor`, `*ngForOf`, `*ngForTrackBy`, `[cal-past]`, `[cal-today]`, `[cal-future]`, `[cal-weekend]`, `[ngClass]`, `(mwlClick)`, `mwlDroppable`, `dragOverClass`, `(drop)`, `(dragEnter)`, `tabindex`, `role`","line":25,"column":11,"nodeType":null,"messageId":"attributesOrder","endLine":43,"endColumn":30,"fix":{"range":[637,1342],"text":"*ngFor=\n           of days; t\"let day trackBy: trackByWeekDayHeaderDate\"class=\"cal-header\"\n          mwlDroppable\n          dragOverClass=\"cal-drag-over\"\n          tabindex=\"0\"\n          role=\"columnheader\"\n          [class.cal-past]=\"day.isPast\"\n          [class.cal-today]=\"day.isToday\"\n          [class.cal-future]=\"day.isFuture\"\n          [class.cal-weekend]=\"day.isWeekend\"\n          [ngClass]=\"day.cssClass\"\n          (mwlClick)=\"dayHeaderClicked.emit({ day: day, sourceEvent: $event })\"\n          (drop)=\"\n            eventDropped.emit({\n              event: $event.dropData.event,\n              newStart: day.date\n            })\n          \"\n          (dragEnter)=\"dragEnter.emit({ date: day.date })\""}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Attribute \"dragOverClass\" has no corresponding i18n attribute. See more at https://angular.io/guide/i18n#mark-element-attributes-for-translations","line":34,"column":11,"nodeType":null,"messageId":"i18nAttribute","endLine":34,"endColumn":24,"fix":{"range":[1075,1075],"text":" i18n-dragOverClass"}}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  TemplateRef,\n} from '@angular/core';\nimport { CalendarEvent, WeekDay } from 'calendar-utils';\nimport { trackByWeekDayHeaderDate } from '../../../common/util/util';\n\n@Component({\n  selector: 'mwl-calendar-week-view-header',\n  template: `\n    <ng-template\n      #defaultTemplate\n      let-days=\"days\"\n      let-locale=\"locale\"\n      let-dayHeaderClicked=\"dayHeaderClicked\"\n      let-eventDropped=\"eventDropped\"\n      let-trackByWeekDayHeaderDate=\"trackByWeekDayHeaderDate\"\n      let-dragEnter=\"dragEnter\"\n    >\n      <div class=\"cal-day-headers\" role=\"row\">\n        <div\n          class=\"cal-header\"\n          *ngFor=\"let day of days; trackBy: trackByWeekDayHeaderDate\"\n          [class.cal-past]=\"day.isPast\"\n          [class.cal-today]=\"day.isToday\"\n          [class.cal-future]=\"day.isFuture\"\n          [class.cal-weekend]=\"day.isWeekend\"\n          [ngClass]=\"day.cssClass\"\n          (mwlClick)=\"dayHeaderClicked.emit({ day: day, sourceEvent: $event })\"\n          mwlDroppable\n          dragOverClass=\"cal-drag-over\"\n          (drop)=\"\n            eventDropped.emit({\n              event: $event.dropData.event,\n              newStart: day.date\n            })\n          \"\n          (dragEnter)=\"dragEnter.emit({ date: day.date })\"\n          tabindex=\"0\"\n          role=\"columnheader\"\n        >\n          <b>{{ day.date | calendarDate : 'weekViewColumnHeader' : locale }}</b\n          ><br />\n          <span>{{\n            day.date | calendarDate : 'weekViewColumnSubHeader' : locale\n          }}</span>\n        </div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{\n        days: days,\n        locale: locale,\n        dayHeaderClicked: dayHeaderClicked,\n        eventDropped: eventDropped,\n        dragEnter: dragEnter,\n        trackByWeekDayHeaderDate: trackByWeekDayHeaderDate\n      }\"\n    >\n    </ng-template>\n  `,\n})\nexport class CalendarWeekViewHeaderComponent {\n  @Input() days: WeekDay[];\n\n  @Input() locale: string;\n\n  @Input() customTemplate: TemplateRef<any>;\n\n  @Output() dayHeaderClicked = new EventEmitter<{\n    day: WeekDay;\n    sourceEvent: MouseEvent;\n  }>();\n\n  @Output() eventDropped = new EventEmitter<{\n    event: CalendarEvent;\n    newStart: Date;\n  }>();\n\n  @Output() dragEnter = new EventEmitter<{ date: Date }>();\n\n  trackByWeekDayHeaderDate = trackByWeekDayHeaderDate;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/week/calendar-week-view/calendar-week-view-hour-segment/calendar-week-view-hour-segment.component.ts","messages":[{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":4,"column":1,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":51,"endColumn":3,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[38,133],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { WeekViewHourSegment } from 'calendar-utils';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/component-max-inline-declarations","severity":2,"message":"`template` has too many lines (43). Maximum allowed is 3 (https://angular.io/guide/styleguide#style-05-04)","line":6,"column":13,"nodeType":"TemplateLiteral","messageId":"componentMaxInlineDeclarations","endLine":50,"endColumn":4},{"ruleId":"@angular-eslint/template/no-inline-styles","severity":2,"message":"<div/> element should not have inline styles via style attribute. Please use classes instead.","line":15,"column":7,"nodeType":null,"messageId":"noInlineStyles","endLine":37,"endColumn":13},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `class`, `[aria-hidden]` instead of `[aria-hidden]`, `class`","line":16,"column":9,"nodeType":null,"messageId":"attributesOrder","endLine":23,"endColumn":33,"fix":{"range":[424,645],"text":"class=\"cal-hour-segment\"\n        [attr.aria-hidden]=\"\n          {}\n            | calendarA11y\n              : (daysInWeek === 1\n                  ? 'hideDayHourSegment'\n                  : 'hideWeekHourSegment')\n        \""}},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `*ngIf`, `class` instead of `class`, `*ngIf`","line":29,"column":14,"nodeType":null,"messageId":"attributesOrder","endLine":29,"endColumn":50,"fix":{"range":[851,887],"text":"*ngIf=\"isTimeLabel\" class=\"cal-time\""}}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import { Component, Input, TemplateRef } from '@angular/core';\nimport { WeekViewHourSegment } from 'calendar-utils';\n\n@Component({\n  selector: 'mwl-calendar-week-view-hour-segment',\n  template: `\n    <ng-template\n      #defaultTemplate\n      let-segment=\"segment\"\n      let-locale=\"locale\"\n      let-segmentHeight=\"segmentHeight\"\n      let-isTimeLabel=\"isTimeLabel\"\n      let-daysInWeek=\"daysInWeek\"\n    >\n      <div\n        [attr.aria-hidden]=\"\n          {}\n            | calendarA11y\n              : (daysInWeek === 1\n                  ? 'hideDayHourSegment'\n                  : 'hideWeekHourSegment')\n        \"\n        class=\"cal-hour-segment\"\n        [style.height.px]=\"segmentHeight\"\n        [class.cal-hour-start]=\"segment.isStart\"\n        [class.cal-after-hour-start]=\"!segment.isStart\"\n        [ngClass]=\"segment.cssClass\"\n      >\n        <div class=\"cal-time\" *ngIf=\"isTimeLabel\">\n          {{\n            segment.displayDate\n              | calendarDate\n                : (daysInWeek === 1 ? 'dayViewHour' : 'weekViewHour')\n                : locale\n          }}\n        </div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{\n        segment: segment,\n        locale: locale,\n        segmentHeight: segmentHeight,\n        isTimeLabel: isTimeLabel,\n        daysInWeek: daysInWeek\n      }\"\n    >\n    </ng-template>\n  `,\n})\nexport class CalendarWeekViewHourSegmentComponent {\n  @Input() segment: WeekViewHourSegment;\n\n  @Input() segmentHeight: number;\n\n  @Input() locale: string;\n\n  @Input() isTimeLabel: boolean;\n\n  @Input() daysInWeek: number;\n\n  @Input() customTemplate: TemplateRef<any>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/week/calendar-week-view/calendar-week-view.component.spec.ts","messages":[{"ruleId":"@angular-eslint/use-component-selector","severity":2,"message":"The selector of the component is mandatory","line":34,"column":1,"nodeType":"Decorator","messageId":"useComponentSelector","endLine":43,"endColumn":3},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":34,"column":1,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":43,"endColumn":3,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[801,988],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { By } from '@angular/platform-browser';\nimport * as fakeTimers from '@sinonjs/fake-timers';\nimport { formatDate } from '@angular/common';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/component-max-inline-declarations","severity":2,"message":"`template` has too many lines (6). Maximum allowed is 3 (https://angular.io/guide/styleguide#style-05-04)","line":35,"column":13,"nodeType":"TemplateLiteral","messageId":"componentMaxInlineDeclarations","endLine":42,"endColumn":4}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  inject,\n  ComponentFixture,\n  TestBed,\n  fakeAsync,\n  flush,\n} from '@angular/core/testing';\nimport moment from 'moment';\nimport { expect } from 'chai';\nimport {\n  CalendarEventTitleFormatter,\n  CalendarEvent,\n  CalendarMomentDateFormatter,\n  CalendarDateFormatter,\n  CalendarModule,\n  MOMENT,\n  CalendarEventTimesChangedEvent,\n  DAYS_OF_WEEK,\n  CalendarWeekViewComponent,\n  DateAdapter,\n  CalendarWeekViewBeforeRenderEvent,\n} from 'angular-calendar';\nimport { DragAndDropModule } from 'angular-draggable-droppable';\nimport { Subject } from 'rxjs';\nimport * as sinon from 'sinon';\nimport { triggerDomEvent, ExternalEventComponent } from '../../../test/util';\nimport { take } from 'rxjs/operators';\nimport { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\nimport { Component } from '@angular/core';\nimport { By } from '@angular/platform-browser';\nimport * as fakeTimers from '@sinonjs/fake-timers';\nimport { formatDate } from '@angular/common';\n\n@Component({\n  template: `\n    <mwl-calendar-week-view\n      [viewDate]=\"viewDate\"\n      [events]=\"events\"\n      (eventTimesChanged)=\"eventTimesChanged($event)\"\n    ></mwl-calendar-week-view>\n    <mwl-external-event></mwl-external-event>\n  `,\n})\nclass TestComponent {\n  viewDate: Date;\n  events: CalendarEvent[];\n  eventTimesChanged = sinon.spy();\n}\n\ndescribe('calendarWeekView component', () => {\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [\n        CalendarModule.forRoot(\n          {\n            provide: DateAdapter,\n            useFactory: adapterFactory,\n          },\n          {\n            dateFormatter: {\n              provide: CalendarDateFormatter,\n              useClass: CalendarMomentDateFormatter,\n            },\n          }\n        ),\n        DragAndDropModule,\n      ],\n      declarations: [ExternalEventComponent, TestComponent],\n      providers: [{ provide: MOMENT, useValue: moment }],\n    });\n  });\n\n  let eventTitle: CalendarEventTitleFormatter;\n  beforeEach(inject([CalendarEventTitleFormatter], (_eventTitle_) => {\n    eventTitle = _eventTitle_;\n  }));\n\n  it('should generate the week view', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.viewDate = new Date('2016-06-29');\n    fixture.componentInstance.ngOnChanges({ viewDate: {} });\n    expect(fixture.componentInstance.days.length).to.equal(7);\n    expect(fixture.componentInstance.days[0].date).to.deep.equal(\n      moment('2016-06-26').toDate()\n    );\n  });\n\n  it('should generate the week view without excluded days', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.viewDate = new Date('2016-06-29');\n    fixture.componentInstance.excludeDays = [0, 6];\n    fixture.componentInstance.ngOnChanges({ viewDate: {} });\n    expect(fixture.componentInstance.days.length).to.equal(5);\n    fixture.destroy();\n  });\n\n  it('should update the week view when excluded days changed', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.viewDate = new Date('2016-06-29');\n    fixture.componentInstance.excludeDays = [0, 6];\n    fixture.componentInstance.ngOnChanges({ excludeDays: {} });\n    expect(fixture.componentInstance.days.length).to.equal(5);\n    expect(fixture.nativeElement.querySelector('.cal-weekend')).to.equal(null);\n\n    fixture.componentInstance.excludeDays = [1];\n    fixture.componentInstance.ngOnChanges({ excludeDays: [] });\n    fixture.detectChanges();\n    expect(fixture.componentInstance.days.length).to.equal(6);\n    expect(fixture.nativeElement.querySelector('.cal-weekend')).not.to.equal(\n      null\n    );\n\n    fixture.destroy();\n  });\n\n  it('should support excluding non consecutive days', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.viewDate = new Date('2016-06-29');\n    fixture.componentInstance.excludeDays = [4, 6];\n    fixture.componentInstance.ngOnChanges({ viewDate: {} });\n    expect(fixture.componentInstance.days.length).to.equal(5);\n    fixture.destroy();\n  });\n\n  it('should support excluding all but 1 day', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.viewDate = new Date('2016-06-29');\n    fixture.componentInstance.excludeDays = [0, 1, 2, 3, 4, 5];\n    fixture.componentInstance.ngOnChanges({ viewDate: {} });\n    expect(fixture.componentInstance.days.length).to.equal(1);\n    fixture.destroy();\n  });\n\n  it('should generate the week view with default colors for events', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.ngOnInit();\n    fixture.componentInstance.viewDate = new Date('2016-06-01');\n    fixture.componentInstance.events = [\n      {\n        start: new Date('2016-05-30'),\n        end: new Date('2016-06-02'),\n        title: 'foo',\n      },\n    ];\n    fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n    fixture.detectChanges();\n\n    const computedStyles: CSSStyleDeclaration = window.getComputedStyle(\n      fixture.nativeElement.querySelector('.cal-event')\n    );\n    expect(computedStyles.getPropertyValue('background-color')).to.equal(\n      'rgb(209, 232, 255)'\n    );\n    expect(computedStyles.getPropertyValue('border-color')).to.equal(\n      'rgb(30, 144, 255)'\n    );\n    expect(computedStyles.getPropertyValue('color')).to.equal(\n      'rgb(30, 144, 255)'\n    );\n    fixture.destroy();\n  });\n\n  it('should emit on the dayHeaderClicked output', (done) => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.viewDate = new Date('2016-06-29');\n    fixture.componentInstance.ngOnChanges({ viewDate: {} });\n    fixture.detectChanges();\n    fixture.componentInstance.dayHeaderClicked.subscribe((val) => {\n      expect(val).to.deep.equal({\n        day: fixture.componentInstance.days[0],\n        sourceEvent: window['event'],\n      });\n      done();\n    });\n    fixture.nativeElement.querySelector('.cal-header').click();\n  });\n\n  it('should add a custom CSS class to events', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.viewDate = new Date('2016-06-01');\n    fixture.componentInstance.events = [\n      {\n        start: new Date('2016-05-30'),\n        end: new Date('2016-06-02'),\n        cssClass: 'foo',\n        title: 'foo',\n        color: {\n          primary: 'blue',\n          secondary: '',\n        },\n      },\n    ];\n    fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n    fixture.detectChanges();\n    expect(\n      fixture.nativeElement\n        .querySelector('.cal-event-container')\n        .classList.contains('foo')\n    ).to.equal(true);\n    fixture.destroy();\n  });\n\n  it('should call the event clicked callback', (done) => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.viewDate = new Date('2016-06-01');\n    fixture.componentInstance.events = [\n      {\n        start: new Date('2016-05-30'),\n        end: new Date('2016-06-02'),\n        title: '<span>foo</span>',\n        color: {\n          primary: 'blue',\n          secondary: '',\n        },\n      },\n    ];\n    fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n    fixture.detectChanges();\n    const title: HTMLElement =\n      fixture.nativeElement.querySelector('.cal-event-title');\n    expect(title.innerHTML).to.equal('<span>foo</span>');\n    fixture.componentInstance.eventClicked.subscribe((val) => {\n      expect(val).to.deep.equal({\n        event: fixture.componentInstance.events[0],\n        sourceEvent: window['event'],\n      });\n      done();\n    });\n    title.click();\n  });\n\n  it('should refresh the view when the refresh observable is emitted on', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.refresh = new Subject();\n    fixture.componentInstance.ngOnInit();\n    fixture.componentInstance.viewDate = new Date('2016-06-01');\n    fixture.componentInstance.ngOnChanges({ viewDate: {} });\n    const event: CalendarEvent = {\n      start: new Date('2016-06-01'),\n      end: new Date('2016-06-02'),\n      title: 'foo',\n      allDay: true,\n    };\n    fixture.componentInstance.events.push(event);\n    fixture.componentInstance.refresh.next(true);\n    expect(\n      fixture.componentInstance.view.allDayEventRows[0].row[0].event\n    ).to.deep.equal(event);\n    fixture.destroy();\n  });\n\n  it('should allow the event title to be customised', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    eventTitle.week = (event: CalendarEvent) => {\n      return `foo ${event.title}`;\n    };\n    fixture.componentInstance.viewDate = new Date('2016-06-01');\n    fixture.componentInstance.events = [\n      {\n        start: new Date('2016-05-30'),\n        end: new Date('2016-06-02'),\n        title: 'bar',\n        color: {\n          primary: 'blue',\n          secondary: '',\n        },\n      },\n    ];\n    fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n    fixture.detectChanges();\n    const title: HTMLElement =\n      fixture.nativeElement.querySelector('.cal-event-title');\n    expect(title.innerHTML).to.equal('foo bar');\n  });\n\n  it('should allow the locale to be changed', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.locale = 'de';\n    fixture.componentInstance.viewDate = new Date();\n    fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n    fixture.detectChanges();\n    expect(\n      fixture.nativeElement.querySelector('.cal-header b').innerHTML.trim()\n    ).to.equal('Sonntag');\n  });\n\n  it('should show a tooltip on mouseover of the event', fakeAsync(() => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    eventTitle.weekTooltip = (e: CalendarEvent) => {\n      return `title: ${e.title}`;\n    };\n    fixture.componentInstance.viewDate = new Date('2016-06-01');\n    fixture.componentInstance.events = [\n      {\n        start: new Date('2016-05-30'),\n        end: new Date('2016-06-02'),\n        title: 'foo <b>bar</b>',\n        color: {\n          primary: 'blue',\n          secondary: '',\n        },\n      },\n    ];\n    fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n    fixture.detectChanges();\n    const event: HTMLElement =\n      fixture.nativeElement.querySelector('.cal-event');\n    triggerDomEvent('mouseenter', event);\n    fixture.detectChanges();\n    flush();\n    const tooltip: HTMLElement = document.body.querySelector(\n      '.cal-tooltip'\n    ) as HTMLElement;\n    expect(tooltip.querySelector('.cal-tooltip-inner').innerHTML).to.equal(\n      'title: foo <b>bar</b>'\n    );\n    expect(tooltip.classList.contains('cal-tooltip-top')).to.equal(true);\n    expect(!!tooltip.style.top).to.equal(true);\n    expect(!!tooltip.style.left).to.equal(true);\n    triggerDomEvent('mouseleave', event);\n    fixture.detectChanges();\n    expect(!!document.body.querySelector('.cal-tooltip')).to.equal(false);\n    fixture.destroy();\n  }));\n\n  it('should disable the tooltip', fakeAsync(() => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    eventTitle.weekTooltip = () => '';\n    fixture.componentInstance.viewDate = new Date('2016-06-01');\n    fixture.componentInstance.events = [\n      {\n        start: new Date('2016-05-30'),\n        end: new Date('2016-06-02'),\n        title: 'foo <b>bar</b>',\n        color: {\n          primary: 'blue',\n          secondary: '',\n        },\n      },\n    ];\n    fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n    fixture.detectChanges();\n    const event: HTMLElement =\n      fixture.nativeElement.querySelector('.cal-event');\n    triggerDomEvent('mouseenter', event);\n    fixture.detectChanges();\n    flush();\n    expect(!!document.body.querySelector('.cal-tooltip')).to.equal(false);\n    fixture.destroy();\n  }));\n\n  it('should hide the tooltip when dragging', fakeAsync(() => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    eventTitle.weekTooltip = (e: CalendarEvent) => {\n      return `title: ${e.title}`;\n    };\n    fixture.componentInstance.viewDate = new Date('2016-06-01');\n    fixture.componentInstance.events = [\n      {\n        start: new Date('2016-05-30'),\n        end: new Date('2016-06-02'),\n        title: 'foo <b>bar</b>',\n        color: {\n          primary: 'blue',\n          secondary: '',\n        },\n        draggable: true,\n      },\n    ];\n    fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n    fixture.detectChanges();\n    const event: HTMLElement =\n      fixture.nativeElement.querySelector('.cal-event');\n    triggerDomEvent('mouseenter', event);\n    fixture.detectChanges();\n    flush();\n    expect(document.body.querySelector('.cal-tooltip')).to.be.ok;\n    const eventPosition = event.getBoundingClientRect();\n    triggerDomEvent('mousedown', event, {\n      clientX: eventPosition.left,\n      clientY: eventPosition.top,\n      button: 0,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mousemove', event, {\n      clientX: eventPosition.left,\n      clientY: eventPosition.top + 100,\n    });\n    fixture.detectChanges();\n    expect(document.body.querySelector('.cal-tooltip')).not.to.be.ok;\n    fixture.destroy();\n  }));\n\n  it('should allow the start of the week to be changed', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.viewDate = new Date('2016-06-27');\n    fixture.componentInstance.weekStartsOn = 1;\n    fixture.componentInstance.ngOnChanges({ viewDate: {} });\n    fixture.detectChanges();\n    expect(\n      fixture.nativeElement.querySelector('.cal-day-headers b').innerText\n    ).to.deep.equal('Monday');\n    fixture.destroy();\n  });\n\n  it('should resize the all day event by dragging from the left edge', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.viewDate = new Date('2016-06-27');\n    fixture.componentInstance.events = [\n      {\n        title: 'foo',\n        color: { primary: '', secondary: '' },\n        start: moment('2016-06-27').add(4, 'hours').toDate(),\n        end: moment('2016-06-27').add(6, 'hours').toDate(),\n        resizable: {\n          beforeStart: true,\n        },\n        allDay: true,\n      },\n    ];\n    fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n    fixture.detectChanges();\n    document.body.appendChild(fixture.nativeElement);\n    const event: HTMLElement = fixture.nativeElement.querySelector(\n      '.cal-event-container'\n    );\n    const dayWidth: number = event.parentElement.offsetWidth / 7;\n    const rect: ClientRect = event.getBoundingClientRect();\n    let resizeEvent: CalendarEventTimesChangedEvent;\n    fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n      resizeEvent = e;\n    });\n    const resizeHandle = event.querySelector('.cal-resize-handle-before-start');\n    triggerDomEvent('mousedown', resizeHandle, {\n      clientX: rect.left,\n      clientY: rect.top,\n      button: 0,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mousemove', resizeHandle, {\n      clientX: rect.left - dayWidth,\n      clientY: rect.top,\n    });\n    fixture.detectChanges();\n    expect(Math.round(event.getBoundingClientRect().left)).to.equal(\n      Math.round(rect.left - dayWidth)\n    );\n    expect(Math.round(event.getBoundingClientRect().width)).to.equal(\n      Math.round(rect.width + dayWidth)\n    );\n    triggerDomEvent('mouseup', resizeHandle, {\n      clientX: rect.left - dayWidth,\n      clientY: rect.top,\n      button: 0,\n    });\n    fixture.detectChanges();\n    fixture.destroy();\n    expect(resizeEvent).to.deep.equal({\n      type: 'resize',\n      event: fixture.componentInstance.events[0],\n      newStart: moment('2016-06-27')\n        .add(4, 'hours')\n        .subtract(1, 'day')\n        .toDate(),\n      newEnd: moment('2016-06-27').add(6, 'hours').toDate(),\n    });\n  });\n\n  it('should resize the all day event by dragging from the right edge', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.viewDate = new Date('2016-06-27');\n    fixture.componentInstance.events = [\n      {\n        title: 'foo',\n        color: { primary: '', secondary: '' },\n        start: moment('2016-06-27').add(4, 'hours').toDate(),\n        end: moment('2016-06-27').add(6, 'hours').toDate(),\n        resizable: {\n          afterEnd: true,\n        },\n        allDay: true,\n      },\n    ];\n    fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n    fixture.detectChanges();\n    document.body.appendChild(fixture.nativeElement);\n    const event: HTMLElement = fixture.nativeElement.querySelector(\n      '.cal-event-container'\n    );\n    const dayWidth: number = event.parentElement.offsetWidth / 7;\n    const rect: ClientRect = event.getBoundingClientRect();\n    let resizeEvent: CalendarEventTimesChangedEvent;\n    fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n      resizeEvent = e;\n    });\n    const handle = fixture.nativeElement.querySelector(\n      '.cal-resize-handle-after-end'\n    );\n    triggerDomEvent('mousedown', handle, {\n      clientX: rect.right,\n      clientY: rect.top,\n      button: 0,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mousemove', handle, {\n      clientX: rect.right + dayWidth,\n      clientY: rect.top,\n    });\n    fixture.detectChanges();\n    expect(Math.round(event.getBoundingClientRect().left)).to.equal(\n      Math.round(rect.left)\n    );\n    expect(Math.round(event.getBoundingClientRect().width)).to.equal(\n      Math.round(rect.width + dayWidth)\n    );\n    triggerDomEvent('mouseup', handle, {\n      clientX: rect.right + dayWidth,\n      clientY: rect.top,\n      button: 0,\n    });\n    fixture.detectChanges();\n    fixture.destroy();\n    expect(resizeEvent).to.deep.equal({\n      type: 'resize',\n      event: fixture.componentInstance.events[0],\n      newStart: moment('2016-06-27').add(4, 'hours').toDate(),\n      newEnd: moment('2016-06-27').add(6, 'hours').add(1, 'day').toDate(),\n    });\n  });\n\n  it('should validate resizing all day events from the right end', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.viewDate = new Date('2016-06-27');\n    fixture.componentInstance.events = [\n      {\n        title: 'foo',\n        start: moment('2016-06-27').add(4, 'hours').toDate(),\n        end: moment('2016-06-27').add(6, 'hours').toDate(),\n        resizable: {\n          afterEnd: true,\n        },\n        allDay: true,\n      },\n    ];\n    const validateEventTimesChanged = sinon\n      .stub()\n      .onFirstCall()\n      .returns(true)\n      .onSecondCall()\n      .returns(false);\n    fixture.componentInstance.validateEventTimesChanged =\n      validateEventTimesChanged;\n    fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n    fixture.detectChanges();\n    document.body.appendChild(fixture.nativeElement);\n    const event: HTMLElement = fixture.nativeElement.querySelector(\n      '.cal-event-container'\n    );\n    const dayWidth: number = event.parentElement.offsetWidth / 7;\n    const rect: ClientRect = event.getBoundingClientRect();\n    let resizeEvent: CalendarEventTimesChangedEvent;\n    fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n      resizeEvent = e;\n    });\n    const handle = fixture.nativeElement.querySelector(\n      '.cal-resize-handle-after-end'\n    );\n    triggerDomEvent('mousedown', handle, {\n      clientX: rect.right,\n      clientY: rect.top,\n      button: 0,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mousemove', handle, {\n      clientX: rect.right + dayWidth,\n      clientY: rect.top,\n    });\n    fixture.detectChanges();\n    expect(Math.round(event.getBoundingClientRect().left)).to.equal(\n      Math.round(rect.left)\n    );\n    expect(Math.round(event.getBoundingClientRect().width)).to.equal(\n      Math.round(rect.width + dayWidth)\n    );\n    triggerDomEvent('mousemove', handle, {\n      clientX: rect.right + dayWidth * 2,\n      clientY: rect.top,\n    });\n    fixture.detectChanges();\n    expect(Math.round(event.getBoundingClientRect().left)).to.equal(\n      Math.round(rect.left)\n    );\n    expect(Math.round(event.getBoundingClientRect().width)).to.equal(\n      Math.round(rect.width + dayWidth)\n    );\n    triggerDomEvent('mouseup', handle, {\n      clientX: rect.right + dayWidth * 2,\n      clientY: rect.top,\n      button: 0,\n    });\n    fixture.detectChanges();\n    fixture.destroy();\n    expect(resizeEvent).to.deep.equal({\n      type: 'resize',\n      event: fixture.componentInstance.events[0],\n      newStart: moment('2016-06-27').add(4, 'hours').toDate(),\n      newEnd: moment('2016-06-27').add(6, 'hours').add(1, 'day').toDate(),\n    });\n    expect(validateEventTimesChanged).to.have.been.calledTwice;\n    expect(validateEventTimesChanged.getCall(0).args[0]).to.deep.equal({\n      type: 'resize',\n      event: fixture.componentInstance.events[0],\n      newStart: moment('2016-06-27').add(4, 'hours').toDate(),\n      newEnd: moment('2016-06-27').add(6, 'hours').add(1, 'day').toDate(),\n    });\n    expect(validateEventTimesChanged.getCall(1).args[0]).to.deep.equal({\n      type: 'resize',\n      event: fixture.componentInstance.events[0],\n      newStart: moment('2016-06-27').add(4, 'hours').toDate(),\n      newEnd: moment('2016-06-27').add(6, 'hours').add(2, 'day').toDate(),\n    });\n  });\n\n  it('should validate resizing all day events from the left end', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.viewDate = new Date('2020-05-20');\n    fixture.componentInstance.events = [\n      {\n        title: 'foo',\n        start: moment(fixture.componentInstance.viewDate)\n          .add(4, 'hours')\n          .toDate(),\n        end: moment(fixture.componentInstance.viewDate)\n          .add(6, 'hours')\n          .toDate(),\n        resizable: {\n          beforeStart: true,\n        },\n        allDay: true,\n      },\n    ];\n    const validateEventTimesChanged = sinon\n      .stub()\n      .onFirstCall()\n      .returns(true)\n      .onSecondCall()\n      .returns(false);\n    fixture.componentInstance.validateEventTimesChanged =\n      validateEventTimesChanged;\n    fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n    fixture.detectChanges();\n    document.body.appendChild(fixture.nativeElement);\n    const event: HTMLElement = fixture.nativeElement.querySelector(\n      '.cal-event-container'\n    );\n    const dayWidth: number = event.parentElement.offsetWidth / 7;\n    const rect: ClientRect = event.getBoundingClientRect();\n    let resizeEvent: CalendarEventTimesChangedEvent;\n    fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n      resizeEvent = e;\n    });\n    const handle = fixture.nativeElement.querySelector(\n      '.cal-resize-handle-before-start'\n    );\n    triggerDomEvent('mousedown', handle, {\n      clientX: rect.left,\n      clientY: rect.top,\n      button: 0,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mousemove', handle, {\n      clientX: rect.left - dayWidth,\n      clientY: rect.top,\n    });\n    fixture.detectChanges();\n    expect(Math.round(event.getBoundingClientRect().left)).to.equal(\n      Math.round(rect.left - dayWidth)\n    );\n    expect(Math.round(event.getBoundingClientRect().width)).to.equal(\n      Math.round(rect.width + dayWidth)\n    );\n    triggerDomEvent('mousemove', handle, {\n      clientX: rect.left - dayWidth * 2,\n      clientY: rect.top,\n    });\n    fixture.detectChanges();\n    expect(Math.round(event.getBoundingClientRect().left)).to.equal(\n      Math.round(rect.left - dayWidth)\n    );\n    expect(Math.round(event.getBoundingClientRect().width)).to.equal(\n      Math.round(rect.width + dayWidth)\n    );\n    triggerDomEvent('mouseup', handle, {\n      clientX: rect.left - dayWidth * 2,\n      clientY: rect.top,\n      button: 0,\n    });\n    fixture.detectChanges();\n    fixture.destroy();\n    expect(resizeEvent).to.deep.equal({\n      type: 'resize',\n      event: fixture.componentInstance.events[0],\n      newStart: moment(fixture.componentInstance.events[0].start)\n        .subtract(1, 'day')\n        .toDate(),\n      newEnd: moment(fixture.componentInstance.events[0].end).toDate(),\n    });\n    expect(validateEventTimesChanged).to.have.been.calledTwice;\n    expect(validateEventTimesChanged.getCall(0).args[0]).to.deep.equal({\n      type: 'resize',\n      event: fixture.componentInstance.events[0],\n      newStart: moment(fixture.componentInstance.events[0].start)\n        .subtract(1, 'day')\n        .toDate(),\n      newEnd: moment(fixture.componentInstance.events[0].end).toDate(),\n    });\n    expect(validateEventTimesChanged.getCall(1).args[0]).to.deep.equal({\n      type: 'resize',\n      event: fixture.componentInstance.events[0],\n      newStart: moment(fixture.componentInstance.events[0].start)\n        .subtract(2, 'day')\n        .toDate(),\n      newEnd: moment(fixture.componentInstance.events[0].end).toDate(),\n    });\n  });\n\n  it('should resize all day events with no end date', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.viewDate = new Date('2016-06-27');\n    fixture.componentInstance.events = [\n      {\n        title: 'foo',\n        color: { primary: '', secondary: '' },\n        start: moment('2016-06-27').add(4, 'hours').toDate(),\n        resizable: {\n          afterEnd: true,\n        },\n        allDay: true,\n      },\n    ];\n    fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n    fixture.detectChanges();\n    document.body.appendChild(fixture.nativeElement);\n    const event: HTMLElement = fixture.nativeElement.querySelector(\n      '.cal-event-container'\n    );\n    const dayWidth: number = event.parentElement.offsetWidth / 7;\n    const rect: ClientRect = event.getBoundingClientRect();\n    let resizeEvent: CalendarEventTimesChangedEvent;\n    fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n      resizeEvent = e;\n    });\n    const handle = fixture.nativeElement.querySelector(\n      '.cal-resize-handle-after-end'\n    );\n    triggerDomEvent('mousedown', handle, {\n      clientX: rect.right,\n      clientY: rect.top,\n      button: 0,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mousemove', handle, {\n      clientX: rect.right + dayWidth,\n      clientY: rect.top,\n    });\n    fixture.detectChanges();\n    expect(Math.round(event.getBoundingClientRect().left)).to.equal(\n      Math.round(rect.left)\n    );\n    expect(Math.round(event.getBoundingClientRect().width)).to.equal(\n      Math.round(rect.width + dayWidth)\n    );\n    triggerDomEvent('mouseup', handle, {\n      clientX: rect.right + dayWidth,\n      clientY: rect.top,\n      button: 0,\n    });\n    fixture.detectChanges();\n    fixture.destroy();\n    expect(resizeEvent).to.deep.equal({\n      type: 'resize',\n      event: fixture.componentInstance.events[0],\n      newStart: moment('2016-06-27').add(4, 'hours').toDate(),\n      newEnd: moment('2016-06-27').add(4, 'hours').add(1, 'day').toDate(),\n    });\n  });\n\n  it('should allow the all day event to be dragged and dropped', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.viewDate = new Date('2016-12-08');\n    fixture.componentInstance.events = [\n      {\n        title: 'foo',\n        color: { primary: '', secondary: '' },\n        start: moment('2016-12-08').add(4, 'hours').toDate(),\n        end: moment('2016-12-08').add(6, 'hours').toDate(),\n        draggable: true,\n        allDay: true,\n      },\n    ];\n    fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n    fixture.detectChanges();\n    document.body.appendChild(fixture.nativeElement);\n    // remove the header as it was causing the test to fail\n    const header: HTMLElement =\n      fixture.nativeElement.querySelector('.cal-day-headers');\n    header.parentNode.removeChild(header);\n    const event: HTMLElement = fixture.nativeElement.querySelector(\n      '.cal-event-container'\n    );\n    const dayWidth: number = event.parentElement.offsetWidth / 7;\n    const eventPosition: ClientRect = event.getBoundingClientRect();\n    const eventDropped = sinon.spy();\n    fixture.componentInstance.eventTimesChanged\n      .pipe(take(1))\n      .subscribe(eventDropped);\n    triggerDomEvent('mousedown', event, {\n      clientX: eventPosition.left,\n      clientY: eventPosition.top,\n      button: 0,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mousemove', event, {\n      clientX: eventPosition.left,\n      clientY: eventPosition.top,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mousemove', document.body, {\n      clientX: eventPosition.left - 100,\n      clientY: eventPosition.top,\n    });\n    fixture.detectChanges();\n    const ghostElement = event.nextSibling as HTMLElement;\n    expect(Math.round(ghostElement.getBoundingClientRect().left)).to.equal(\n      Math.round(eventPosition.left - dayWidth) + 1\n    );\n    triggerDomEvent('mouseup', document.body, {\n      clientX: eventPosition.left - dayWidth,\n      clientY: eventPosition.top,\n      button: 0,\n    });\n    fixture.detectChanges();\n    fixture.destroy();\n    expect(eventDropped.getCall(0).args[0]).to.deep.equal({\n      type: 'drag',\n      event: fixture.componentInstance.events[0],\n      newStart: moment('2016-12-07').add(4, 'hours').toDate(),\n      newEnd: moment('2016-12-07').add(6, 'hours').toDate(),\n      allDay: true,\n    });\n    expect(eventDropped).to.have.been.calledOnce;\n  });\n\n  it('should allow the all day event to be dragged and dropped and control where it can be dragged', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.viewDate = new Date('2016-12-08');\n    fixture.componentInstance.events = [\n      {\n        title: 'foo',\n        start: moment('2016-12-08').add(4, 'hours').toDate(),\n        end: moment('2016-12-08').add(6, 'hours').toDate(),\n        draggable: true,\n        allDay: true,\n      },\n    ];\n    fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n    fixture.detectChanges();\n    document.body.appendChild(fixture.nativeElement);\n    // remove the header as it was causing the test to fail\n    const header: HTMLElement =\n      fixture.nativeElement.querySelector('.cal-day-headers');\n    header.parentNode.removeChild(header);\n    const event: HTMLElement = fixture.nativeElement.querySelector(\n      '.cal-event-container'\n    );\n    const dayWidth: number = event.parentElement.offsetWidth / 7;\n    const eventPosition: ClientRect = event.getBoundingClientRect();\n    const eventDropped = sinon.spy();\n    const validateEventTimesChanged = sinon\n      .stub()\n      .onFirstCall()\n      .returns(true)\n      .onSecondCall()\n      .returns(false);\n    fixture.componentInstance.validateEventTimesChanged =\n      validateEventTimesChanged;\n    fixture.componentInstance.eventTimesChanged\n      .pipe(take(1))\n      .subscribe(eventDropped);\n    triggerDomEvent('mousedown', event, {\n      clientX: eventPosition.left,\n      clientY: eventPosition.top,\n      button: 0,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mousemove', document.body, {\n      clientX: eventPosition.left,\n      clientY: eventPosition.top,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mousemove', document.body, {\n      clientX: eventPosition.left - dayWidth,\n      clientY: eventPosition.top,\n    });\n    fixture.detectChanges();\n    const ghostElement = event.nextSibling as HTMLElement;\n    expect(Math.round(ghostElement.getBoundingClientRect().left)).to.equal(\n      Math.round(eventPosition.left - dayWidth) + 1\n    );\n    triggerDomEvent('mousemove', document.body, {\n      clientX: eventPosition.left - dayWidth * 2,\n      clientY: eventPosition.top,\n    });\n    fixture.detectChanges();\n    expect(Math.round(ghostElement.getBoundingClientRect().left)).to.equal(\n      Math.round(eventPosition.left - dayWidth) + 1\n    );\n    triggerDomEvent('mouseup', document.body, {\n      clientX: eventPosition.left - dayWidth * 2,\n      clientY: eventPosition.top,\n      button: 0,\n    });\n    fixture.detectChanges();\n    fixture.destroy();\n    expect(eventDropped.getCall(0).args[0]).to.deep.equal({\n      type: 'drag',\n      event: fixture.componentInstance.events[0],\n      newStart: moment('2016-12-07').add(4, 'hours').toDate(),\n      newEnd: moment('2016-12-07').add(6, 'hours').toDate(),\n      allDay: true,\n    });\n    expect(eventDropped).to.have.been.calledOnce;\n    expect(validateEventTimesChanged).to.have.been.calledTwice;\n    expect(validateEventTimesChanged.getCall(0).args[0]).to.deep.equal({\n      type: 'drag',\n      event: fixture.componentInstance.events[0],\n      newStart: moment('2016-12-07').add(4, 'hours').toDate(),\n      newEnd: moment('2016-12-07').add(6, 'hours').toDate(),\n    });\n    expect(validateEventTimesChanged.getCall(1).args[0]).to.deep.equal({\n      type: 'drag',\n      event: fixture.componentInstance.events[0],\n      newStart: moment('2016-12-06').add(4, 'hours').toDate(),\n      newEnd: moment('2016-12-06').add(6, 'hours').toDate(),\n    });\n  });\n\n  it('should allow all day events to be dragged outside of the calendar', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.viewDate = new Date('2016-12-08');\n    fixture.componentInstance.events = [\n      {\n        title: 'foo',\n        start: moment('2016-12-08').add(4, 'hours').toDate(),\n        end: moment('2016-12-08').add(6, 'hours').toDate(),\n        draggable: true,\n        allDay: true,\n      },\n    ];\n    fixture.componentInstance.snapDraggedEvents = false;\n    fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n    fixture.detectChanges();\n    document.body.appendChild(fixture.nativeElement);\n    // remove the header as it was causing the test to fail\n    const header: HTMLElement =\n      fixture.nativeElement.querySelector('.cal-day-headers');\n    header.parentNode.removeChild(header);\n    const event: HTMLElement = fixture.nativeElement.querySelector(\n      '.cal-event-container'\n    );\n    const eventPosition: ClientRect = event.getBoundingClientRect();\n    const calendarPosition: ClientRect =\n      fixture.nativeElement.getBoundingClientRect();\n    const eventDropped = sinon.spy();\n    fixture.componentInstance.eventTimesChanged\n      .pipe(take(1))\n      .subscribe(eventDropped);\n    triggerDomEvent('mousedown', event, {\n      clientX: eventPosition.left,\n      clientY: eventPosition.top,\n      button: 0,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mousemove', document.body, {\n      clientX: eventPosition.left - 50,\n      clientY: eventPosition.top,\n    });\n    fixture.detectChanges();\n    const ghostElement = event.nextSibling as HTMLElement;\n    expect(Math.round(ghostElement.getBoundingClientRect().left)).to.equal(\n      Math.round(eventPosition.left - 50)\n    );\n    triggerDomEvent('mousemove', document.body, {\n      clientX: calendarPosition.left - 50,\n      clientY: eventPosition.top,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mouseup', document.body, {\n      clientX: calendarPosition.left - 50,\n      clientY: eventPosition.top,\n      button: 0,\n    });\n    fixture.detectChanges();\n    fixture.destroy();\n    expect(eventDropped).not.to.have.been.called;\n  });\n\n  it('should round all day event drag sizes to the event snap size when dragging and dropping non snapped events', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.viewDate = new Date('2016-12-08');\n    fixture.componentInstance.events = [\n      {\n        title: 'foo',\n        color: { primary: '', secondary: '' },\n        start: moment('2016-12-08').add(4, 'hours').toDate(),\n        end: moment('2016-12-08').add(6, 'hours').toDate(),\n        draggable: true,\n        allDay: true,\n      },\n    ];\n    fixture.componentInstance.snapDraggedEvents = false;\n    fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n    fixture.detectChanges();\n    document.body.appendChild(fixture.nativeElement);\n    // remove the header as it was causing the test to fail\n    const header: HTMLElement =\n      fixture.nativeElement.querySelector('.cal-day-headers');\n    header.parentNode.removeChild(header);\n    const event: HTMLElement = fixture.nativeElement.querySelector(\n      '.cal-event-container'\n    );\n    const eventPosition: ClientRect = event.getBoundingClientRect();\n    const eventDropped = sinon.spy();\n    fixture.componentInstance.eventTimesChanged\n      .pipe(take(1))\n      .subscribe(eventDropped);\n    triggerDomEvent('mousedown', event, {\n      clientX: eventPosition.left,\n      clientY: eventPosition.top,\n      button: 0,\n    });\n    fixture.detectChanges();\n    const dragLeft = event.parentElement.offsetWidth / 7;\n    triggerDomEvent('mousemove', document.body, {\n      clientX: eventPosition.left - dragLeft,\n      clientY: eventPosition.top,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mouseup', document.body, {\n      clientX: eventPosition.left - dragLeft,\n      clientY: eventPosition.top,\n      button: 0,\n    });\n    fixture.detectChanges();\n    fixture.destroy();\n    expect(eventDropped.getCall(0).args[0]).to.deep.equal({\n      type: 'drag',\n      event: fixture.componentInstance.events[0],\n      newStart: moment('2016-12-07').add(4, 'hours').toDate(),\n      newEnd: moment('2016-12-07').add(6, 'hours').toDate(),\n      allDay: true,\n    });\n    expect(eventDropped).to.have.been.calledOnce;\n  });\n\n  it('should not allow all day events to be resized smaller than 1 day', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.viewDate = new Date('2016-06-27');\n    fixture.componentInstance.events = [\n      {\n        title: 'foo',\n        start: moment('2016-06-27').add(4, 'hours').toDate(),\n        end: moment('2016-06-27').add(6, 'hours').toDate(),\n        resizable: {\n          beforeStart: true,\n        },\n        allDay: true,\n      },\n    ];\n    fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n    fixture.detectChanges();\n    document.body.appendChild(fixture.nativeElement);\n    const event: HTMLElement = fixture.nativeElement.querySelector(\n      '.cal-event-container'\n    );\n    const dayWidth: number = event.parentElement.offsetWidth / 7;\n    const rect: ClientRect = event.getBoundingClientRect();\n    const handle = fixture.nativeElement.querySelector(\n      '.cal-resize-handle-before-start'\n    );\n    triggerDomEvent('mousedown', handle, {\n      clientX: rect.left,\n      clientY: rect.top,\n      button: 0,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mousemove', handle, {\n      clientX: rect.left + dayWidth,\n      clientY: rect.top,\n    });\n    fixture.detectChanges();\n    expect(Math.round(event.getBoundingClientRect().left)).to.equal(\n      Math.round(rect.left)\n    );\n    expect(Math.round(event.getBoundingClientRect().width)).to.equal(\n      Math.round(rect.width)\n    );\n    triggerDomEvent('mouseup', handle, {\n      clientX: rect.left - dayWidth,\n      clientY: rect.top,\n      button: 0,\n    });\n    fixture.detectChanges();\n    fixture.destroy();\n  });\n\n  it('should not allow all day events to be resized outside of the current view', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.viewDate = new Date('2016-06-27');\n    fixture.componentInstance.events = [\n      {\n        title: 'foo',\n        start: moment('2016-06-27').add(4, 'hours').toDate(),\n        end: moment('2016-06-27').add(6, 'hours').toDate(),\n        resizable: {\n          beforeStart: true,\n        },\n        allDay: true,\n      },\n    ];\n    fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n    fixture.detectChanges();\n    document.body.appendChild(fixture.nativeElement);\n    const event: HTMLElement = fixture.nativeElement.querySelector(\n      '.cal-event-container'\n    );\n    const dayWidth: number = event.parentElement.offsetWidth / 7;\n    const rect: ClientRect = event.getBoundingClientRect();\n    const handle = fixture.nativeElement.querySelector(\n      '.cal-resize-handle-before-start'\n    );\n    triggerDomEvent('mousedown', handle, {\n      clientX: rect.left,\n      clientY: rect.top,\n      button: 0,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mousemove', handle, {\n      clientX: rect.left - dayWidth,\n      clientY: rect.top,\n    });\n    fixture.detectChanges();\n    expect(Math.round(event.getBoundingClientRect().left)).to.equal(\n      Math.round(rect.left - dayWidth)\n    );\n    expect(Math.round(event.getBoundingClientRect().width)).to.equal(\n      Math.round(rect.width + dayWidth)\n    );\n    triggerDomEvent('mousemove', handle, {\n      clientX: rect.left - dayWidth * 2,\n      clientY: rect.top,\n    });\n    fixture.detectChanges();\n    expect(Math.round(event.getBoundingClientRect().left)).to.equal(\n      Math.round(rect.left - dayWidth)\n    );\n    expect(Math.round(event.getBoundingClientRect().width)).to.equal(\n      Math.round(rect.width + dayWidth)\n    );\n    triggerDomEvent('mouseup', handle, {\n      clientX: rect.left - dayWidth * 2,\n      clientY: rect.top,\n      button: 0,\n    });\n    fixture.detectChanges();\n    fixture.destroy();\n  });\n\n  it('should allow external events to be dropped on the week view headers', () => {\n    const fixture = TestBed.createComponent(TestComponent);\n    fixture.componentInstance.viewDate = new Date('2016-06-27');\n    fixture.componentInstance.events = [];\n    fixture.detectChanges();\n    document.body.appendChild(fixture.nativeElement);\n    const externalEventFixture = fixture.debugElement.query(\n      By.directive(ExternalEventComponent)\n    );\n\n    const event: HTMLElement =\n      externalEventFixture.nativeElement.querySelector('.external-event');\n    const eventPosition: ClientRect = event.getBoundingClientRect();\n\n    const headers: any[] = Array.from(\n      fixture.nativeElement.querySelectorAll('.cal-header')\n    );\n    const header: HTMLElement = headers[2];\n    const headerPosition: ClientRect = header.getBoundingClientRect();\n\n    const eventDropped = fixture.componentInstance.eventTimesChanged;\n    triggerDomEvent('mousedown', event, {\n      clientY: eventPosition.top,\n      clientX: eventPosition.left,\n      button: 0,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mousemove', document.body, {\n      clientY: headerPosition.top,\n      clientX: headerPosition.left,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mouseup', document.body, {\n      clientY: headerPosition.top,\n      clientX: headerPosition.left,\n      button: 0,\n    });\n    fixture.detectChanges();\n    expect(eventDropped).to.have.been.calledWith({\n      type: 'drop',\n      event: externalEventFixture.componentInstance.event,\n      newStart: moment('2016-06-27').startOf('week').add(2, 'days').toDate(),\n      allDay: true,\n    });\n    expect(eventDropped).to.have.been.calledOnce;\n  });\n\n  it('should allow the weekend days to be customised', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.viewDate = new Date('2017-06-25');\n    fixture.componentInstance.weekendDays = [\n      DAYS_OF_WEEK.FRIDAY,\n      DAYS_OF_WEEK.SATURDAY,\n    ];\n    fixture.componentInstance.ngOnChanges({ viewDate: {}, weekendDays: {} });\n    fixture.detectChanges();\n    const headerCells: HTMLElement[] =\n      fixture.nativeElement.querySelectorAll('.cal-header');\n    expect(headerCells[0].classList.contains('cal-weekend')).to.equal(false);\n    expect(headerCells[5].classList.contains('cal-weekend')).to.equal(true);\n    expect(headerCells[6].classList.contains('cal-weekend')).to.equal(true);\n    fixture.destroy();\n  });\n\n  it('should add a custom CSS class to headers via the beforeViewRender output', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.viewDate = new Date('2016-06-27');\n    fixture.componentInstance.beforeViewRender\n      .pipe(take(1))\n      .subscribe(({ header }) => {\n        header[0].cssClass = 'foo';\n      });\n    fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n    fixture.detectChanges();\n    expect(\n      fixture.nativeElement\n        .querySelector('.cal-header')\n        .classList.contains('foo')\n    ).to.equal(true);\n    fixture.destroy();\n  });\n\n  it('should log on invalid events', () => {\n    const stub = sinon.stub(console, 'warn');\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.events = [\n      { start: 1234, title: '', color: { primary: '', secondary: '' } },\n    ] as any;\n    fixture.componentInstance.viewDate = new Date('2017-01-01');\n    fixture.componentInstance.ngOnChanges({ events: {}, viewDate: {} });\n    fixture.detectChanges();\n    stub.restore();\n    expect(stub).to.have.been.calledOnce; // eslint-disable-line\n  });\n\n  it('should only call the beforeViewRender output once when refreshing the view', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.refresh = new Subject();\n    fixture.componentInstance.ngOnInit();\n    fixture.componentInstance.viewDate = new Date('2016-06-27');\n    const beforeViewRenderCalled = sinon.spy();\n    // use subscription to test that it was only called a max of one times\n    const subscription = fixture.componentInstance.beforeViewRender.subscribe(\n      beforeViewRenderCalled\n    );\n    fixture.componentInstance.refresh.next(true);\n    expect(beforeViewRenderCalled).to.have.been.calledOnce;\n    subscription.unsubscribe();\n    fixture.destroy();\n  });\n\n  it('should only call the beforeViewRender output once when changing the view date', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.ngOnInit();\n    fixture.componentInstance.viewDate = new Date('2016-06-27');\n    fixture.componentInstance.ngOnChanges({ viewDate: {} });\n    const beforeViewRenderCalled = sinon.spy();\n    // use subscription to test that it was only called a max of one times\n    const subscription = fixture.componentInstance.beforeViewRender.subscribe(\n      beforeViewRenderCalled\n    );\n    fixture.componentInstance.viewDate = new Date('2016-06-28');\n    fixture.componentInstance.ngOnChanges({ viewDate: {} });\n    expect(beforeViewRenderCalled).to.have.been.calledOnce;\n    subscription.unsubscribe();\n    fixture.destroy();\n  });\n\n  it('should expose the view period on the beforeViewRender output', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    const beforeViewRenderCalled = sinon.spy();\n    fixture.componentInstance.beforeViewRender\n      .pipe(take(1))\n      .subscribe(beforeViewRenderCalled);\n    fixture.componentInstance.ngOnInit();\n    fixture.componentInstance.viewDate = new Date('2016-06-27');\n    fixture.componentInstance.ngOnChanges({ viewDate: {} });\n    const data = beforeViewRenderCalled.getCall(0).args[0];\n    expect(data.period.start).to.be.an.instanceOf(Date);\n    expect(data.period.end).to.be.an.instanceOf(Date);\n    expect(Array.isArray(data.period.events)).to.equal(true);\n    expect(Array.isArray(data.allDayEventRows)).to.be.true;\n    expect(Array.isArray(data.hourColumns)).to.be.true;\n  });\n\n  it('should add event actions to each event', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.viewDate = new Date('2016-06-27');\n    const eventClicked = sinon.spy();\n    fixture.componentInstance.eventClicked.subscribe(eventClicked);\n    fixture.componentInstance.events = [\n      {\n        start: new Date('2016-06-26'),\n        end: new Date('2016-06-28'),\n        title: 'foo',\n        actions: [\n          {\n            label: '<i class=\"fa fa-fw fa-times\"></i>',\n            onClick: sinon.spy(),\n            cssClass: 'foo',\n          },\n        ],\n      },\n    ];\n    fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n    fixture.detectChanges();\n    const action: HTMLElement = fixture.nativeElement.querySelector(\n      '.cal-event .cal-event-action'\n    );\n    expect(action.innerHTML).to.equal('<i class=\"fa fa-fw fa-times\"></i>');\n    expect(action.classList.contains('foo')).to.equal(true);\n    action.querySelector('i').click();\n    const actionSpy = fixture.componentInstance.events[0].actions[0]\n      .onClick as sinon.SinonSpy;\n    expect(actionSpy.getCall(0).args[0].event).to.equal(\n      fixture.componentInstance.events[0]\n    );\n    expect(actionSpy.getCall(0).args[0].sourceEvent instanceof MouseEvent).to.be\n      .true;\n    expect(eventClicked).not.to.have.been.called;\n  });\n\n  it('should make a 4 day week', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.viewDate = new Date('2018-07-29');\n    fixture.componentInstance.daysInWeek = 4;\n    fixture.componentInstance.events = [\n      {\n        start: new Date('2018-07-29'),\n        title: 'foo',\n        allDay: true,\n      },\n    ];\n    fixture.componentInstance.ngOnChanges({\n      daysInWeek: {},\n      events: {},\n      viewDate: {},\n    });\n    fixture.detectChanges();\n    expect(\n      fixture.nativeElement.querySelectorAll('.cal-header').length\n    ).to.equal(4);\n    expect(\n      fixture.nativeElement.querySelectorAll(\n        '.cal-all-day-events .cal-day-column'\n      ).length\n    ).to.equal(4);\n    expect(\n      fixture.nativeElement.querySelectorAll('.cal-time-events .cal-day-column')\n        .length\n    ).to.equal(4);\n  });\n\n  it('should resize a time event from the end to another day on the right', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.viewDate = new Date('2018-07-29');\n    fixture.componentInstance.events = [\n      {\n        start: moment(new Date('2018-07-29'))\n          .startOf('day')\n          .add(3, 'hours')\n          .toDate(),\n        end: moment(new Date('2018-07-29'))\n          .startOf('day')\n          .add(18, 'hours')\n          .toDate(),\n        title: 'foo',\n        resizable: {\n          afterEnd: true,\n        },\n      },\n    ];\n    fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n    fixture.detectChanges();\n    document.body.appendChild(fixture.nativeElement);\n    const event: HTMLElement = fixture.nativeElement.querySelector(\n      '.cal-event-container'\n    );\n    const dayWidth: number = event.parentElement.offsetWidth;\n    const rect: ClientRect = event.getBoundingClientRect();\n    const resizeHandle = event.querySelector('.cal-resize-handle-after-end');\n    let resizeEvent: CalendarEventTimesChangedEvent;\n    fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n      resizeEvent = e;\n    });\n    triggerDomEvent('mousedown', resizeHandle, {\n      clientX: rect.right,\n      clientY: rect.bottom,\n      button: 0,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mousemove', document.body, {\n      clientX: rect.right + dayWidth,\n      clientY: rect.bottom + 90,\n    });\n    fixture.detectChanges();\n    expect(event.getBoundingClientRect().top).to.equal(rect.top);\n    expect(event.getBoundingClientRect().height).to.equal(1259);\n    const events = fixture.nativeElement.querySelectorAll(\n      '.cal-event-container'\n    );\n    expect(events[0]).to.equal(event);\n    expect(events[1].getBoundingClientRect().top).to.equal(rect.top - 180);\n    expect(events[1].getBoundingClientRect().height).to.equal(1170);\n    triggerDomEvent('mouseup', document.body, {\n      clientX: rect.right + dayWidth,\n      clientY: rect.bottom + 90,\n      button: 0,\n    });\n    fixture.detectChanges();\n    fixture.destroy();\n    expect(resizeEvent).to.deep.equal({\n      type: 'resize',\n      event: fixture.componentInstance.events[0],\n      newStart: fixture.componentInstance.events[0].start,\n      newEnd: moment(new Date('2018-07-29'))\n        .startOf('day')\n        .add(1, 'day')\n        .add(19, 'hours')\n        .add(30, 'minutes')\n        .toDate(),\n    });\n  });\n\n  it('should control resizing time events', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.viewDate = new Date('2018-07-29');\n    fixture.componentInstance.events = [\n      {\n        start: moment(new Date('2018-07-29'))\n          .startOf('day')\n          .add(3, 'hours')\n          .toDate(),\n        end: moment(new Date('2018-07-29'))\n          .startOf('day')\n          .add(18, 'hours')\n          .toDate(),\n        title: 'foo',\n        resizable: {\n          afterEnd: true,\n        },\n      },\n    ];\n    const validateEventTimesChanged = sinon\n      .stub()\n      .onFirstCall()\n      .returns(true)\n      .onSecondCall()\n      .returns(false);\n    fixture.componentInstance.validateEventTimesChanged =\n      validateEventTimesChanged;\n    fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n    fixture.detectChanges();\n    document.body.appendChild(fixture.nativeElement);\n    const event: HTMLElement = fixture.nativeElement.querySelector(\n      '.cal-event-container'\n    );\n    const dayWidth: number = event.parentElement.offsetWidth;\n    const rect: ClientRect = event.getBoundingClientRect();\n    const resizeHandle = event.querySelector('.cal-resize-handle-after-end');\n    let resizeEvent: CalendarEventTimesChangedEvent;\n    fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n      resizeEvent = e;\n    });\n    triggerDomEvent('mousedown', resizeHandle, {\n      clientX: rect.right,\n      clientY: rect.bottom,\n      button: 0,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mousemove', document.body, {\n      clientX: rect.right,\n      clientY: rect.bottom + 90,\n    });\n    fixture.detectChanges();\n    expect(event.getBoundingClientRect().top).to.equal(rect.top);\n    expect(event.getBoundingClientRect().height).to.equal(rect.height + 90);\n    triggerDomEvent('mousemove', document.body, {\n      clientX: rect.right,\n      clientY: rect.bottom + 180,\n    });\n    fixture.detectChanges();\n    expect(event.getBoundingClientRect().top).to.equal(rect.top);\n    expect(event.getBoundingClientRect().height).to.equal(rect.height + 90);\n    triggerDomEvent('mouseup', document.body, {\n      clientX: rect.right + dayWidth,\n      clientY: rect.bottom + 180,\n      button: 0,\n    });\n    fixture.detectChanges();\n    fixture.destroy();\n    expect(resizeEvent).to.deep.equal({\n      type: 'resize',\n      event: fixture.componentInstance.events[0],\n      newStart: fixture.componentInstance.events[0].start,\n      newEnd: moment(fixture.componentInstance.events[0].end)\n        .add(90, 'minutes')\n        .toDate(),\n    });\n    expect(validateEventTimesChanged).to.have.been.calledTwice;\n    expect(validateEventTimesChanged.getCall(0).args[0]).to.deep.equal({\n      type: 'resize',\n      event: fixture.componentInstance.events[0],\n      newStart: fixture.componentInstance.events[0].start,\n      newEnd: moment(fixture.componentInstance.events[0].end)\n        .add(90, 'minutes')\n        .toDate(),\n    });\n    expect(validateEventTimesChanged.getCall(1).args[0]).to.deep.equal({\n      type: 'resize',\n      event: fixture.componentInstance.events[0],\n      newStart: fixture.componentInstance.events[0].start,\n      newEnd: moment(fixture.componentInstance.events[0].end)\n        .add(180, 'minutes')\n        .toDate(),\n    });\n  });\n\n  it('should resize a time event from the end to another day on the left when using rtl', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.nativeElement.setAttribute('dir', 'rtl');\n    fixture.componentInstance.viewDate = new Date('2018-07-29');\n    fixture.componentInstance.events = [\n      {\n        start: moment(new Date('2018-07-29'))\n          .startOf('day')\n          .add(3, 'hours')\n          .toDate(),\n        end: moment(new Date('2018-07-29'))\n          .startOf('day')\n          .add(18, 'hours')\n          .toDate(),\n        title: 'foo',\n        resizable: {\n          afterEnd: true,\n        },\n      },\n    ];\n    fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n    fixture.detectChanges();\n    document.body.appendChild(fixture.nativeElement);\n    const event: HTMLElement = fixture.nativeElement.querySelector(\n      '.cal-event-container'\n    );\n    const dayWidth: number = event.parentElement.offsetWidth;\n    const rect: ClientRect = event.getBoundingClientRect();\n    const resizeHandle = event.querySelector('.cal-resize-handle-after-end');\n    let resizeEvent: CalendarEventTimesChangedEvent;\n    fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n      resizeEvent = e;\n    });\n    triggerDomEvent('mousedown', resizeHandle, {\n      clientX: rect.right,\n      clientY: rect.bottom,\n      button: 0,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mousemove', document.body, {\n      clientX: rect.right - dayWidth,\n      clientY: rect.bottom,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mouseup', document.body, {\n      clientX: rect.right + dayWidth,\n      clientY: rect.bottom + 90,\n      button: 0,\n    });\n    fixture.detectChanges();\n    fixture.destroy();\n    expect(resizeEvent).to.deep.equal({\n      type: 'resize',\n      event: fixture.componentInstance.events[0],\n      newStart: fixture.componentInstance.events[0].start,\n      newEnd: moment(fixture.componentInstance.events[0].end)\n        .add(1, 'day')\n        .toDate(),\n    });\n  });\n\n  it('should resize a time event from the end to another day on the left', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.viewDate = new Date('2018-07-29');\n    fixture.componentInstance.events = [\n      {\n        start: moment(new Date('2018-07-29'))\n          .startOf('day')\n          .add(3, 'hours')\n          .toDate(),\n        end: moment(new Date('2018-07-29'))\n          .startOf('day')\n          .add(1, 'day')\n          .add(19, 'hours')\n          .add(30, 'minutes')\n          .toDate(),\n        title: 'foo',\n        resizable: {\n          afterEnd: true,\n        },\n      },\n    ];\n    fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n    fixture.detectChanges();\n    document.body.appendChild(fixture.nativeElement);\n    const event: HTMLElement = fixture.nativeElement.querySelectorAll(\n      '.cal-event-container'\n    )[1];\n    const dayWidth: number = event.parentElement.offsetWidth;\n    const rect: ClientRect = event.getBoundingClientRect();\n    const resizeHandle = event.querySelector('.cal-resize-handle-after-end');\n    let resizeEvent: CalendarEventTimesChangedEvent;\n    fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n      resizeEvent = e;\n    });\n    triggerDomEvent('mousedown', resizeHandle, {\n      clientX: rect.right,\n      clientY: rect.bottom,\n      button: 0,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mousemove', document.body, {\n      clientX: rect.right - dayWidth,\n      clientY: rect.bottom - 90,\n    });\n    fixture.detectChanges();\n    expect(event.getBoundingClientRect().width).to.equal(0);\n    expect(event.getBoundingClientRect().height).to.equal(0);\n    const events = fixture.nativeElement.querySelectorAll(\n      '.cal-event-container'\n    );\n    expect(events[1]).to.equal(event);\n    expect(events[0].getBoundingClientRect().top).to.equal(rect.top + 180);\n    expect(events[0].getBoundingClientRect().height).to.equal(900);\n    triggerDomEvent('mouseup', document.body, {\n      clientX: rect.right - dayWidth,\n      clientY: rect.bottom - 90,\n      button: 0,\n    });\n    fixture.detectChanges();\n    fixture.destroy();\n    expect(resizeEvent).to.deep.equal({\n      type: 'resize',\n      event: fixture.componentInstance.events[0],\n      newStart: fixture.componentInstance.events[0].start,\n      newEnd: moment(new Date('2018-07-29'))\n        .startOf('day')\n        .add(18, 'hours')\n        .toDate(),\n    });\n  });\n\n  it('should resize a time event from the end to another day on the right when using rtl', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.nativeElement.setAttribute('dir', 'rtl');\n    fixture.componentInstance.viewDate = new Date('2018-07-29');\n    fixture.componentInstance.events = [\n      {\n        start: moment(new Date('2018-07-29'))\n          .startOf('day')\n          .add(3, 'hours')\n          .toDate(),\n        end: moment(new Date('2018-07-29'))\n          .startOf('day')\n          .add(1, 'day')\n          .add(19, 'hours')\n          .add(30, 'minutes')\n          .toDate(),\n        title: 'foo',\n        resizable: {\n          afterEnd: true,\n        },\n      },\n    ];\n    fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n    fixture.detectChanges();\n    document.body.appendChild(fixture.nativeElement);\n    const event: HTMLElement = fixture.nativeElement.querySelectorAll(\n      '.cal-event-container'\n    )[1];\n    const dayWidth: number = event.parentElement.offsetWidth;\n    const rect: ClientRect = event.getBoundingClientRect();\n    const resizeHandle = event.querySelector('.cal-resize-handle-after-end');\n    let resizeEvent: CalendarEventTimesChangedEvent;\n    fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n      resizeEvent = e;\n    });\n    triggerDomEvent('mousedown', resizeHandle, {\n      clientX: rect.right,\n      clientY: rect.bottom,\n      button: 0,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mousemove', document.body, {\n      clientX: rect.right + dayWidth,\n      clientY: rect.bottom,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mouseup', document.body, {\n      clientX: rect.right + dayWidth,\n      clientY: rect.bottom,\n      button: 0,\n    });\n    fixture.detectChanges();\n    fixture.destroy();\n    expect(resizeEvent).to.deep.equal({\n      type: 'resize',\n      event: fixture.componentInstance.events[0],\n      newStart: fixture.componentInstance.events[0].start,\n      newEnd: moment(fixture.componentInstance.events[0].end)\n        .subtract(1, 'day')\n        .toDate(),\n    });\n  });\n\n  it('should resize a time event from the end and not allow it to end before it starts', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.viewDate = new Date('2018-07-29');\n    fixture.componentInstance.events = [\n      {\n        start: moment(new Date('2018-07-29'))\n          .startOf('day')\n          .add(3, 'hours')\n          .toDate(),\n        end: moment(new Date('2018-07-29'))\n          .startOf('day')\n          .add(1, 'day')\n          .add(19, 'hours')\n          .add(30, 'minutes')\n          .toDate(),\n        title: 'foo',\n        resizable: {\n          afterEnd: true,\n        },\n      },\n    ];\n    fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n    fixture.detectChanges();\n    document.body.appendChild(fixture.nativeElement);\n    const event: HTMLElement = fixture.nativeElement.querySelectorAll(\n      '.cal-event-container'\n    )[1];\n    const dayWidth: number = event.parentElement.offsetWidth;\n    const rect: ClientRect = event.getBoundingClientRect();\n    const resizeHandle = event.querySelector('.cal-resize-handle-after-end');\n    let resizeEvent: CalendarEventTimesChangedEvent;\n    fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n      resizeEvent = e;\n    });\n    triggerDomEvent('mousedown', resizeHandle, {\n      clientX: rect.right,\n      clientY: rect.bottom,\n      button: 0,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mousemove', document.body, {\n      clientX: rect.right - dayWidth * 2,\n      clientY: rect.bottom - 1000,\n    });\n    fixture.detectChanges();\n    expect(event.getBoundingClientRect().width).to.equal(0);\n    expect(event.getBoundingClientRect().height).to.equal(0);\n    const events = fixture.nativeElement.querySelectorAll(\n      '.cal-event-container'\n    );\n    expect(events[1]).to.equal(event);\n    expect(events[0].getBoundingClientRect().top).to.equal(rect.top + 180);\n    expect(events[0].getBoundingClientRect().height).to.equal(30);\n    triggerDomEvent('mouseup', document.body, {\n      clientX: rect.right - dayWidth * 2,\n      clientY: rect.bottom - 1000,\n      button: 0,\n    });\n    fixture.detectChanges();\n    fixture.destroy();\n    expect(resizeEvent).to.deep.equal({\n      type: 'resize',\n      event: fixture.componentInstance.events[0],\n      newStart: fixture.componentInstance.events[0].start,\n      newEnd: moment(fixture.componentInstance.events[0].start)\n        .add(30, 'minutes')\n        .toDate(),\n    });\n  });\n\n  it('should resize a time event from the start to another day on the left', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.viewDate = new Date('2018-07-30');\n    fixture.componentInstance.events = [\n      {\n        start: moment(new Date('2018-07-30'))\n          .startOf('day')\n          .add(3, 'hours')\n          .toDate(),\n        end: moment(new Date('2018-07-30'))\n          .startOf('day')\n          .add(18, 'hours')\n          .toDate(),\n        title: 'foo',\n        resizable: {\n          beforeStart: true,\n        },\n      },\n    ];\n    fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n    fixture.detectChanges();\n    document.body.appendChild(fixture.nativeElement);\n    const event: HTMLElement = fixture.nativeElement.querySelector(\n      '.cal-event-container'\n    );\n    const dayWidth: number = event.parentElement.offsetWidth;\n    const rect: ClientRect = event.getBoundingClientRect();\n    const resizeHandle = event.querySelector('.cal-resize-handle-before-start');\n    let resizeEvent: CalendarEventTimesChangedEvent;\n    fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n      resizeEvent = e;\n    });\n    triggerDomEvent('mousedown', resizeHandle, {\n      clientX: rect.left,\n      clientY: rect.top,\n      button: 0,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mousemove', document.body, {\n      clientX: rect.left - dayWidth,\n      clientY: rect.top - 90,\n    });\n    fixture.detectChanges();\n    expect(event.getBoundingClientRect().top).to.equal(rect.top - 180);\n    expect(event.getBoundingClientRect().height).to.equal(rect.height + 180);\n    const events = fixture.nativeElement.querySelectorAll(\n      '.cal-event-container'\n    );\n    expect(events[1]).to.equal(event);\n    expect(events[0].getBoundingClientRect().top).to.equal(rect.top - 90);\n    expect(events[0].getBoundingClientRect().height).to.equal(1349);\n    triggerDomEvent('mouseup', document.body, {\n      clientX: rect.left - dayWidth,\n      clientY: rect.top - 90,\n      button: 0,\n    });\n    fixture.detectChanges();\n    fixture.destroy();\n    expect(resizeEvent).to.deep.equal({\n      type: 'resize',\n      event: fixture.componentInstance.events[0],\n      newStart: moment(fixture.componentInstance.events[0].start)\n        .subtract(1, 'days')\n        .subtract(90, 'minutes')\n        .toDate(),\n      newEnd: fixture.componentInstance.events[0].end,\n    });\n  });\n\n  it('should resize a time event from the start to another day on the right', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.viewDate = new Date('2018-07-30');\n    fixture.componentInstance.events = [\n      {\n        start: moment(new Date('2018-07-30'))\n          .startOf('day')\n          .add(3, 'hours')\n          .subtract(1, 'days')\n          .subtract(90, 'minutes')\n          .toDate(),\n        end: moment(new Date('2018-07-30'))\n          .startOf('day')\n          .add(18, 'hours')\n          .toDate(),\n        title: 'foo',\n        resizable: {\n          beforeStart: true,\n        },\n      },\n    ];\n    fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n    fixture.detectChanges();\n    document.body.appendChild(fixture.nativeElement);\n    const event: HTMLElement = fixture.nativeElement.querySelector(\n      '.cal-event-container'\n    );\n    const dayWidth: number = event.parentElement.offsetWidth;\n    const rect: ClientRect = event.getBoundingClientRect();\n    const resizeHandle = event.querySelector('.cal-resize-handle-before-start');\n    let resizeEvent: CalendarEventTimesChangedEvent;\n    fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n      resizeEvent = e;\n    });\n    triggerDomEvent('mousedown', resizeHandle, {\n      clientX: rect.left,\n      clientY: rect.top,\n      button: 0,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mousemove', document.body, {\n      clientX: rect.left + dayWidth,\n      clientY: rect.top + 90,\n    });\n    fixture.detectChanges();\n    expect(event.getBoundingClientRect().width).to.equal(0);\n    expect(event.getBoundingClientRect().height).to.equal(0);\n    const events = fixture.nativeElement.querySelectorAll(\n      '.cal-event-container'\n    );\n    expect(events[0]).to.equal(event);\n    expect(events[1].getBoundingClientRect().top).to.equal(rect.top + 90);\n    expect(events[1].getBoundingClientRect().height).to.equal(900);\n    triggerDomEvent('mouseup', document.body, {\n      clientX: rect.left + dayWidth,\n      clientY: rect.top + 90,\n      button: 0,\n    });\n    fixture.detectChanges();\n    fixture.destroy();\n    expect(resizeEvent).to.deep.equal({\n      type: 'resize',\n      event: fixture.componentInstance.events[0],\n      newStart: moment(new Date('2018-07-30'))\n        .startOf('day')\n        .add(3, 'hours')\n        .toDate(),\n      newEnd: fixture.componentInstance.events[0].end,\n    });\n  });\n\n  it('should resize a time event and not allow it to start after it ends', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.viewDate = new Date('2018-07-30');\n    fixture.componentInstance.events = [\n      {\n        start: moment(new Date('2018-07-30'))\n          .startOf('day')\n          .add(3, 'hours')\n          .subtract(1, 'days')\n          .subtract(90, 'minutes')\n          .toDate(),\n        end: moment(new Date('2018-07-30'))\n          .startOf('day')\n          .add(18, 'hours')\n          .toDate(),\n        title: 'foo',\n        resizable: {\n          beforeStart: true,\n        },\n      },\n    ];\n    fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n    fixture.detectChanges();\n    document.body.appendChild(fixture.nativeElement);\n    const event: HTMLElement = fixture.nativeElement.querySelector(\n      '.cal-event-container'\n    );\n    const dayWidth: number = event.parentElement.offsetWidth;\n    const rect: ClientRect = event.getBoundingClientRect();\n    const resizeHandle = event.querySelector('.cal-resize-handle-before-start');\n    let resizeEvent: CalendarEventTimesChangedEvent;\n    fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n      resizeEvent = e;\n    });\n    triggerDomEvent('mousedown', resizeHandle, {\n      clientX: rect.left,\n      clientY: rect.top,\n      button: 0,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mousemove', document.body, {\n      clientX: rect.left + dayWidth * 2,\n      clientY: rect.top + 90,\n    });\n    fixture.detectChanges();\n    expect(event.getBoundingClientRect().width).to.equal(0);\n    expect(event.getBoundingClientRect().height).to.equal(0);\n    const events = fixture.nativeElement.querySelectorAll(\n      '.cal-event-container'\n    );\n    expect(events[0]).to.equal(event);\n    // locally the top comes out as 1107 but on the CI it's 1106\n    expect(events[1].getBoundingClientRect().top).to.closeTo(1106, 1);\n    expect(events[1].getBoundingClientRect().height).to.equal(30);\n    triggerDomEvent('mouseup', document.body, {\n      clientX: rect.left + dayWidth * 2,\n      clientY: rect.top + 90,\n      button: 0,\n    });\n    fixture.detectChanges();\n    fixture.destroy();\n    expect(resizeEvent).to.deep.equal({\n      type: 'resize',\n      event: fixture.componentInstance.events[0],\n      newStart: moment(fixture.componentInstance.events[0].end)\n        .subtract(30, 'minutes')\n        .toDate(),\n      newEnd: fixture.componentInstance.events[0].end,\n    });\n  });\n\n  it('should drag time events to different days and columns while snapping to a grid', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.viewDate = new Date('2018-07-29');\n    fixture.componentInstance.events = [\n      {\n        start: moment(new Date('2018-07-29'))\n          .startOf('day')\n          .add(3, 'hours')\n          .toDate(),\n        end: moment(new Date('2018-07-29'))\n          .startOf('day')\n          .add(1, 'day')\n          .add(18, 'hours')\n          .toDate(),\n        title: 'foo',\n        draggable: true,\n      },\n      {\n        start: moment(new Date('2018-07-29'))\n          .startOf('day')\n          .add(3, 'days')\n          .toDate(),\n        title: 'bar',\n        draggable: true,\n      },\n    ];\n    fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n    fixture.detectChanges();\n    document.body.appendChild(fixture.nativeElement);\n    const events = fixture.nativeElement.querySelectorAll(\n      '.cal-event-container'\n    );\n    const dayWidth: number = events[0].parentElement.offsetWidth;\n    const rect1: ClientRect = events[0].getBoundingClientRect();\n    const rect2: ClientRect = events[1].getBoundingClientRect();\n    let dragEvent: CalendarEventTimesChangedEvent;\n    fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n      dragEvent = e;\n    });\n    triggerDomEvent('mousedown', events[1], {\n      clientX: rect2.right,\n      clientY: rect2.bottom,\n      button: 0,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mousemove', events[1], {\n      clientX: rect2.right + dayWidth - 5,\n      clientY: rect2.bottom + 95,\n    });\n    fixture.detectChanges();\n    expect(events[0].getBoundingClientRect().height).to.equal(0);\n    expect(events[0].getBoundingClientRect().width).to.equal(0);\n    const updatedEvents = fixture.nativeElement.querySelectorAll(\n      '.cal-event-container'\n    );\n    expect(updatedEvents[0]).to.equal(events[0]);\n    expect(updatedEvents[1].getBoundingClientRect().top).to.equal(\n      rect1.top + 90\n    );\n    expect(updatedEvents[1].getBoundingClientRect().height).to.equal(\n      rect1.height - 90\n    );\n    expect(updatedEvents[2].getBoundingClientRect().top).to.equal(rect2.top);\n    expect(updatedEvents[2].getBoundingClientRect().height).to.equal(\n      rect2.height + 90\n    );\n    triggerDomEvent('mouseup', events[1], {\n      clientX: rect2.right + dayWidth - 5,\n      clientY: rect2.bottom + 95,\n      button: 0,\n    });\n    fixture.detectChanges();\n    fixture.destroy();\n    expect(dragEvent).to.deep.equal({\n      type: 'drag',\n      allDay: false,\n      event: fixture.componentInstance.events[0],\n      newStart: moment(fixture.componentInstance.events[0].start)\n        .add(1, 'day')\n        .add(1, 'hour')\n        .add(30, 'minutes')\n        .toDate(),\n      newEnd: moment(fixture.componentInstance.events[0].end)\n        .add(1, 'day')\n        .add(1, 'hour')\n        .add(30, 'minutes')\n        .toDate(),\n    });\n  });\n\n  it('should control dragging time events', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.viewDate = new Date('2018-07-29');\n    fixture.componentInstance.events = [\n      {\n        start: moment(new Date('2018-07-29'))\n          .startOf('day')\n          .add(3, 'hours')\n          .toDate(),\n        end: moment(new Date('2018-07-29'))\n          .startOf('day')\n          .add(1, 'day')\n          .add(18, 'hours')\n          .toDate(),\n        title: 'foo',\n        draggable: true,\n      },\n    ];\n    const validateEventTimesChanged = sinon\n      .stub()\n      .onFirstCall()\n      .returns(true)\n      .onSecondCall()\n      .returns(false);\n    fixture.componentInstance.validateEventTimesChanged =\n      validateEventTimesChanged;\n    fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n    fixture.detectChanges();\n    document.body.appendChild(fixture.nativeElement);\n    const event = fixture.nativeElement.querySelector('.cal-event-container');\n    const rect: ClientRect = event.getBoundingClientRect();\n    let dragEvent: CalendarEventTimesChangedEvent;\n    fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n      dragEvent = e;\n    });\n    triggerDomEvent('mousedown', event, {\n      clientX: rect.right,\n      clientY: rect.bottom,\n      button: 0,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mousemove', event, {\n      clientX: rect.right,\n      clientY: rect.bottom,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mousemove', event, {\n      clientX: rect.right,\n      clientY: rect.bottom + 95,\n    });\n    fixture.detectChanges();\n    expect(event.getBoundingClientRect().top).to.equal(rect.top + 90);\n    triggerDomEvent('mousemove', event, {\n      clientX: rect.right,\n      clientY: rect.bottom + 180,\n    });\n    fixture.detectChanges();\n    expect(event.getBoundingClientRect().top).to.equal(rect.top + 90);\n    triggerDomEvent('mouseup', event, {\n      clientX: rect.right,\n      clientY: rect.bottom + 180,\n      button: 0,\n    });\n    fixture.detectChanges();\n    fixture.destroy();\n    expect(dragEvent).to.deep.equal({\n      type: 'drag',\n      allDay: false,\n      event: fixture.componentInstance.events[0],\n      newStart: moment(fixture.componentInstance.events[0].start)\n        .add(90, 'minutes')\n        .toDate(),\n      newEnd: moment(fixture.componentInstance.events[0].end)\n        .add(90, 'minutes')\n        .toDate(),\n    });\n    expect(validateEventTimesChanged).to.have.been.calledTwice;\n    expect(validateEventTimesChanged.getCall(0).args[0]).to.deep.equal({\n      type: 'drag',\n      event: fixture.componentInstance.events[0],\n      newStart: moment(fixture.componentInstance.events[0].start)\n        .add(90, 'minutes')\n        .toDate(),\n      newEnd: moment(fixture.componentInstance.events[0].end)\n        .add(90, 'minutes')\n        .toDate(),\n    });\n    expect(validateEventTimesChanged.getCall(1).args[0]).to.deep.equal({\n      type: 'drag',\n      event: fixture.componentInstance.events[0],\n      newStart: moment(fixture.componentInstance.events[0].start)\n        .add(180, 'minutes')\n        .toDate(),\n      newEnd: moment(fixture.componentInstance.events[0].end)\n        .add(180, 'minutes')\n        .toDate(),\n    });\n  });\n\n  it('should drag time events back to their original position while snapping to a grid', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.viewDate = new Date('2018-07-29');\n    const originalEvent = {\n      start: moment(new Date('2018-07-29'))\n        .startOf('day')\n        .add(3, 'hours')\n        .toDate(),\n      end: moment(new Date('2018-07-29'))\n        .startOf('day')\n        .add(5, 'hours')\n        .toDate(),\n      title: 'foo',\n      draggable: true,\n    };\n    fixture.componentInstance.events = [originalEvent];\n    fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n    fixture.detectChanges();\n    document.body.appendChild(fixture.nativeElement);\n    const event = fixture.nativeElement.querySelector('.cal-event-container');\n    const rect: ClientRect = event.getBoundingClientRect();\n    let dragEvent: CalendarEventTimesChangedEvent;\n    fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n      dragEvent = e;\n    });\n    triggerDomEvent('mousedown', event, {\n      clientX: rect.right,\n      clientY: rect.bottom,\n      button: 0,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mousemove', event, {\n      clientX: rect.right,\n      clientY: rect.bottom + 95,\n    });\n    fixture.detectChanges();\n    const updatedEvent1 = fixture.nativeElement.querySelector(\n      '.cal-event-container'\n    );\n    expect(updatedEvent1.getBoundingClientRect().top).to.equal(rect.top + 90);\n    triggerDomEvent('mousemove', event, {\n      clientX: rect.right,\n      clientY: rect.bottom,\n    });\n    fixture.detectChanges();\n    const updatedEvent2 = fixture.nativeElement.querySelector(\n      '.cal-event-container'\n    );\n    expect(updatedEvent2.getBoundingClientRect().top).to.equal(rect.top);\n    triggerDomEvent('mouseup', event, {\n      clientX: rect.right,\n      clientY: rect.bottom,\n      button: 0,\n    });\n    fixture.detectChanges();\n    fixture.destroy();\n    expect(dragEvent.newStart).to.deep.equal(originalEvent.start);\n    expect(dragEvent.newEnd).to.deep.equal(originalEvent.end);\n  });\n\n  it('should drag time events without end dates', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.viewDate = new Date('2018-07-29');\n    fixture.componentInstance.events = [\n      {\n        start: moment(new Date('2018-07-29'))\n          .startOf('day')\n          .add(3, 'hours')\n          .toDate(),\n        title: 'foo',\n        draggable: true,\n      },\n    ];\n    fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n    fixture.detectChanges();\n    document.body.appendChild(fixture.nativeElement);\n    const event = fixture.nativeElement.querySelector('.cal-event-container');\n    const dayWidth: number = event.parentElement.offsetWidth;\n    const rect: ClientRect = event.getBoundingClientRect();\n    let dragEvent: CalendarEventTimesChangedEvent;\n    fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n      dragEvent = e;\n    });\n    triggerDomEvent('mousedown', event, {\n      clientX: rect.right,\n      clientY: rect.bottom,\n      button: 0,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mousemove', event, {\n      clientX: rect.right + dayWidth - 5,\n      clientY: rect.bottom + 95,\n    });\n    fixture.detectChanges();\n    expect(event.getBoundingClientRect().height).to.equal(0);\n    expect(event.getBoundingClientRect().width).to.equal(0);\n    const updatedEvents = fixture.nativeElement.querySelectorAll(\n      '.cal-event-container'\n    );\n    expect(updatedEvents[0]).to.equal(event);\n    expect(updatedEvents[1].getBoundingClientRect().top).to.equal(\n      rect.top + 90\n    );\n    expect(updatedEvents[1].getBoundingClientRect().height).to.equal(\n      rect.height\n    );\n    triggerDomEvent('mouseup', event, {\n      clientX: rect.right + dayWidth - 5,\n      clientY: rect.bottom + 95,\n      button: 0,\n    });\n    fixture.detectChanges();\n    fixture.destroy();\n    expect(dragEvent).to.deep.equal({\n      type: 'drag',\n      allDay: false,\n      event: fixture.componentInstance.events[0],\n      newStart: moment(fixture.componentInstance.events[0].start)\n        .add(1, 'day')\n        .add(1, 'hour')\n        .add(30, 'minutes')\n        .toDate(),\n      newEnd: undefined,\n    });\n  });\n\n  it('should drag time events to different days and columns while not snapping to a grid', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.viewDate = new Date('2018-07-29');\n    fixture.componentInstance.events = [\n      {\n        start: moment(new Date('2018-07-29'))\n          .startOf('day')\n          .add(3, 'hours')\n          .toDate(),\n        end: moment(new Date('2018-07-29'))\n          .startOf('day')\n          .add(1, 'day')\n          .add(18, 'hours')\n          .toDate(),\n        title: 'foo',\n        draggable: true,\n      },\n    ];\n    fixture.componentInstance.snapDraggedEvents = false;\n    fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n    fixture.detectChanges();\n    document.body.appendChild(fixture.nativeElement);\n    const events = fixture.nativeElement.querySelectorAll(\n      '.cal-event-container'\n    );\n    const dayWidth: number = events[0].parentElement.offsetWidth;\n    const rect: ClientRect = events[0].getBoundingClientRect();\n    let dragEvent: CalendarEventTimesChangedEvent;\n    fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n      dragEvent = e;\n    });\n    triggerDomEvent('mousedown', events[0], {\n      clientX: rect.left,\n      clientY: rect.top,\n      button: 0,\n    });\n    fixture.detectChanges();\n    const timeEvents = fixture.nativeElement.querySelector('.cal-time-events');\n    triggerDomEvent('mousemove', timeEvents, {\n      clientX: rect.left + dayWidth - 5,\n      clientY: rect.top + 95,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mouseup', timeEvents, {\n      clientX: rect.left + dayWidth - 5,\n      clientY: rect.top + 95,\n      button: 0,\n    });\n    fixture.detectChanges();\n    fixture.destroy();\n    expect(dragEvent).to.deep.equal({\n      type: 'drag',\n      allDay: false,\n      event: fixture.componentInstance.events[0],\n      newStart: moment(fixture.componentInstance.events[0].start)\n        .add(1, 'day')\n        .add(1, 'hour')\n        .add(30, 'minutes')\n        .toDate(),\n      newEnd: moment(fixture.componentInstance.events[0].end)\n        .add(1, 'day')\n        .add(1, 'hour')\n        .add(30, 'minutes')\n        .toDate(),\n    });\n  });\n\n  it('should drag time events back to their original position while not snapping to a grid', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.viewDate = new Date('2018-07-29');\n    const originalEvent = {\n      start: moment(new Date('2018-07-29'))\n        .startOf('day')\n        .add(3, 'hours')\n        .toDate(),\n      end: moment(new Date('2018-07-29'))\n        .startOf('day')\n        .add(5, 'hours')\n        .toDate(),\n      title: 'foo',\n      draggable: true,\n    };\n    fixture.componentInstance.events = [originalEvent];\n    fixture.componentInstance.snapDraggedEvents = false;\n    fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n    fixture.detectChanges();\n    document.body.appendChild(fixture.nativeElement);\n    const event = fixture.nativeElement.querySelector('.cal-event-container');\n    const rect: ClientRect = event.getBoundingClientRect();\n    let dragEvent: CalendarEventTimesChangedEvent;\n    fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n      dragEvent = e;\n    });\n    triggerDomEvent('mousedown', event, {\n      clientX: rect.left,\n      clientY: rect.top,\n      button: 0,\n    });\n    const timeEvents = fixture.nativeElement.querySelector('.cal-time-events');\n    fixture.detectChanges();\n    triggerDomEvent('mousemove', timeEvents, {\n      clientX: rect.left,\n      clientY: rect.top + 95,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mousemove', timeEvents, {\n      clientX: rect.left,\n      clientY: rect.top,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mouseup', timeEvents, {\n      clientX: rect.left,\n      clientY: rect.top,\n      button: 0,\n    });\n    fixture.detectChanges();\n    fixture.destroy();\n    expect(dragEvent.newStart).to.deep.equal(originalEvent.start);\n    expect(dragEvent.newEnd).to.deep.equal(originalEvent.end);\n  });\n\n  it('should drag an all day event onto the time grid', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.viewDate = new Date('2018-07-29');\n    fixture.componentInstance.events = [\n      {\n        start: moment(new Date('2018-07-29'))\n          .startOf('day')\n          .add(1, 'days')\n          .add(3, 'hours')\n          .toDate(),\n        end: moment(new Date('2018-07-29'))\n          .startOf('day')\n          .add(2, 'days')\n          .add(18, 'hours')\n          .toDate(),\n        title: 'foo',\n        draggable: true,\n        allDay: true,\n      },\n    ];\n    fixture.componentInstance.snapDraggedEvents = false;\n    fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n    fixture.detectChanges();\n    document.body.appendChild(fixture.nativeElement);\n    const event = fixture.nativeElement.querySelector('.cal-event-container');\n    const rect: ClientRect = event.getBoundingClientRect();\n    let dragEvent: CalendarEventTimesChangedEvent;\n    fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n      dragEvent = e;\n    });\n    triggerDomEvent('mousedown', event, {\n      clientX: rect.left,\n      clientY: rect.top,\n      button: 0,\n    });\n    fixture.detectChanges();\n    const hourSegment = fixture.nativeElement.querySelectorAll(\n      '.cal-day-columns mwl-calendar-week-view-hour-segment'\n    )[3];\n    const hourSegmentPosition = hourSegment.getBoundingClientRect();\n    triggerDomEvent('mousemove', hourSegment, {\n      clientX: hourSegmentPosition.left + 1,\n      clientY: hourSegmentPosition.top + 1,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mouseup', hourSegment, {\n      clientX: hourSegmentPosition.left + 1,\n      clientY: hourSegmentPosition.top + 1,\n      button: 0,\n    });\n    fixture.detectChanges();\n    fixture.destroy();\n    expect(dragEvent).to.deep.equal({\n      type: 'drop',\n      allDay: false,\n      event: fixture.componentInstance.events[0],\n      newStart: moment(new Date('2018-07-29'))\n        .startOf('day')\n        .add(90, 'minutes')\n        .toDate(),\n    });\n  });\n\n  it('should drag a time event onto the all day grid', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.viewDate = new Date('2018-07-29');\n    fixture.componentInstance.events = [\n      {\n        start: moment(new Date('2018-07-29'))\n          .startOf('day')\n          .add(1, 'days')\n          .add(3, 'hours')\n          .toDate(),\n        end: moment(new Date('2018-07-29'))\n          .startOf('day')\n          .add(2, 'days')\n          .add(18, 'hours')\n          .toDate(),\n        title: 'foo',\n        draggable: true,\n        allDay: false,\n      },\n      {\n        start: moment(new Date('2018-07-29')).startOf('day').toDate(),\n        allDay: true,\n        title: 'bar',\n      },\n    ];\n    fixture.componentInstance.snapDraggedEvents = false;\n    fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n    fixture.detectChanges();\n    document.body.appendChild(fixture.nativeElement);\n    const event = fixture.nativeElement.querySelector(\n      '.cal-time-events .cal-event-container'\n    );\n    const rect: ClientRect = event.getBoundingClientRect();\n    let dragEvent: CalendarEventTimesChangedEvent;\n    fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n      dragEvent = e;\n    });\n    triggerDomEvent('mousedown', event, {\n      clientX: rect.left,\n      clientY: rect.top,\n      button: 0,\n    });\n    fixture.detectChanges();\n    const dayColumn = fixture.nativeElement.querySelectorAll(\n      '.cal-all-day-events .cal-day-column'\n    )[2];\n    const dayColumnPosition = dayColumn.getBoundingClientRect();\n    triggerDomEvent('mousemove', dayColumn, {\n      clientX: dayColumnPosition.left + 1,\n      clientY: dayColumnPosition.top + 1,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mouseup', dayColumn, {\n      clientX: dayColumnPosition.left + 1,\n      clientY: dayColumnPosition.top + 1,\n      button: 0,\n    });\n    fixture.detectChanges();\n    fixture.destroy();\n    expect(dragEvent).to.deep.equal({\n      type: 'drop',\n      allDay: true,\n      event: fixture.componentInstance.events[0],\n      newStart: moment(new Date('2018-07-29'))\n        .startOf('day')\n        .add(2, 'days')\n        .toDate(),\n    });\n  });\n\n  it('should handle time event objects changing when resizing', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.viewDate = new Date('2018-07-29');\n    fixture.componentInstance.events = [\n      {\n        id: '1',\n        start: moment(new Date('2018-07-29'))\n          .startOf('day')\n          .add(3, 'hours')\n          .toDate(),\n        end: moment(new Date('2018-07-29'))\n          .startOf('day')\n          .add(18, 'hours')\n          .toDate(),\n        title: 'foo',\n        resizable: {\n          afterEnd: true,\n        },\n      },\n    ];\n    fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n    fixture.detectChanges();\n    document.body.appendChild(fixture.nativeElement);\n    const event: HTMLElement = fixture.nativeElement.querySelector(\n      '.cal-event-container'\n    );\n    const dayWidth: number = event.parentElement.offsetWidth;\n    const rect: ClientRect = event.getBoundingClientRect();\n    const resizeHandle = event.querySelector('.cal-resize-handle-after-end');\n    let resizeEvent: CalendarEventTimesChangedEvent;\n    fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n      resizeEvent = e;\n    });\n    triggerDomEvent('mousedown', resizeHandle, {\n      clientX: rect.right,\n      clientY: rect.bottom,\n      button: 0,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mousemove', document.body, {\n      clientX: rect.right + dayWidth,\n      clientY: rect.bottom + 90,\n    });\n    fixture.detectChanges();\n    fixture.componentInstance.events = [\n      {\n        ...fixture.componentInstance.events[0],\n      },\n    ];\n    fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n    fixture.detectChanges();\n    triggerDomEvent('mouseup', document.body, {\n      clientX: rect.right + dayWidth,\n      clientY: rect.bottom + 90,\n      button: 0,\n    });\n    fixture.detectChanges();\n    fixture.destroy();\n  });\n\n  it('should drag time events to different days and columns while snapping to a grid and excluding weekends', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.viewDate = new Date('2019-03-01');\n    fixture.componentInstance.excludeDays = [0, 6];\n    fixture.componentInstance.daysInWeek = 4;\n    fixture.componentInstance.events = [\n      {\n        start: moment(new Date('2019-03-01'))\n          .startOf('day')\n          .add(3, 'hours')\n          .toDate(),\n        end: moment(new Date('2019-03-01'))\n          .startOf('day')\n          .add(18, 'hours')\n          .toDate(),\n        title: 'foo',\n        draggable: true,\n      },\n    ];\n    fixture.componentInstance.ngOnChanges({\n      viewDate: {},\n      events: {},\n      excludeDays: {},\n      daysInWeek: {},\n    });\n    fixture.detectChanges();\n    document.body.appendChild(fixture.nativeElement);\n    const events = fixture.nativeElement.querySelectorAll(\n      '.cal-event-container'\n    );\n    const dayWidth: number = events[0].parentElement.offsetWidth;\n    const rect1: ClientRect = events[0].getBoundingClientRect();\n    let dragEvent: CalendarEventTimesChangedEvent;\n    fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n      dragEvent = e;\n    });\n    triggerDomEvent('mousedown', events[0], {\n      clientX: rect1.right,\n      clientY: rect1.bottom,\n      button: 0,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mousemove', events[0], {\n      clientX: rect1.right + dayWidth - 5,\n      clientY: rect1.bottom + 95,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mouseup', events[0], {\n      clientX: rect1.right + dayWidth - 5,\n      clientY: rect1.bottom + 95,\n      button: 0,\n    });\n    fixture.detectChanges();\n    fixture.destroy();\n    expect(dragEvent).to.deep.equal({\n      type: 'drag',\n      allDay: false,\n      event: fixture.componentInstance.events[0],\n      newStart: moment(fixture.componentInstance.events[0].start)\n        .add(3, 'days')\n        .add(1, 'hour')\n        .add(30, 'minutes')\n        .toDate(),\n      newEnd: moment(fixture.componentInstance.events[0].end)\n        .add(3, 'days')\n        .add(1, 'hour')\n        .add(30, 'minutes')\n        .toDate(),\n    });\n  });\n\n  it('should drag time events to different days and columns when rtl is enabled', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.nativeElement.setAttribute('dir', 'rtl');\n    fixture.componentInstance.viewDate = new Date('2019-03-01');\n    fixture.componentInstance.events = [\n      {\n        start: moment(new Date('2019-03-01'))\n          .startOf('day')\n          .add(3, 'hours')\n          .toDate(),\n        end: moment(new Date('2019-03-01'))\n          .startOf('day')\n          .add(18, 'hours')\n          .toDate(),\n        title: 'foo',\n        draggable: true,\n      },\n    ];\n    fixture.componentInstance.ngOnChanges({\n      viewDate: {},\n      events: {},\n      excludeDays: {},\n      daysInWeek: {},\n    });\n    fixture.detectChanges();\n    document.body.appendChild(fixture.nativeElement);\n    const events = fixture.nativeElement.querySelectorAll(\n      '.cal-event-container'\n    );\n    const dayWidth: number = events[0].parentElement.offsetWidth;\n    const rect1: ClientRect = events[0].getBoundingClientRect();\n    let dragEvent: CalendarEventTimesChangedEvent;\n    fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n      dragEvent = e;\n    });\n    triggerDomEvent('mousedown', events[0], {\n      clientX: rect1.right,\n      clientY: rect1.bottom,\n      button: 0,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mousemove', events[0], {\n      clientX: rect1.right + dayWidth,\n      clientY: rect1.bottom,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mouseup', events[0], {\n      clientX: rect1.right + dayWidth,\n      clientY: rect1.bottom,\n      button: 0,\n    });\n    fixture.detectChanges();\n    fixture.destroy();\n    expect(dragEvent).to.deep.equal({\n      type: 'drag',\n      allDay: false,\n      event: fixture.componentInstance.events[0],\n      newStart: moment(fixture.componentInstance.events[0].start)\n        .subtract(1, 'days')\n        .toDate(),\n      newEnd: moment(fixture.componentInstance.events[0].end)\n        .subtract(1, 'days')\n        .toDate(),\n    });\n  });\n\n  it('should drag time events to different days and columns while snapping to a grid and excluding weekends with custom hour duration', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.viewDate = new Date('2019-03-01');\n    fixture.componentInstance.excludeDays = [0, 6];\n    fixture.componentInstance.daysInWeek = 4;\n    fixture.componentInstance.events = [\n      {\n        start: moment(new Date('2019-03-01'))\n          .startOf('day')\n          .add(4, 'hours')\n          .toDate(),\n        end: moment(new Date('2019-03-01'))\n          .startOf('day')\n          .add(18, 'hours')\n          .toDate(),\n        title: 'foo',\n        draggable: true,\n      },\n    ];\n    fixture.componentInstance.hourDuration = 40;\n    fixture.componentInstance.ngOnChanges({\n      viewDate: {},\n      events: {},\n      excludeDays: {},\n      daysInWeek: {},\n      hourColumns: {},\n    });\n    fixture.detectChanges();\n    document.body.appendChild(fixture.nativeElement);\n    const events = fixture.nativeElement.querySelectorAll(\n      '.cal-event-container'\n    );\n    const dayWidth: number = events[0].parentElement.offsetWidth;\n    const rect1: ClientRect = events[0].getBoundingClientRect();\n    let dragEvent: CalendarEventTimesChangedEvent;\n    fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n      dragEvent = e;\n    });\n    triggerDomEvent('mousedown', events[0], {\n      clientX: rect1.right,\n      clientY: rect1.bottom,\n      button: 0,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mousemove', events[0], {\n      clientX: rect1.right + dayWidth - 5,\n      clientY: rect1.bottom + 95,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mouseup', events[0], {\n      clientX: rect1.right + dayWidth - 5,\n      clientY: rect1.bottom + 95,\n      button: 0,\n    });\n    fixture.detectChanges();\n    fixture.destroy();\n    expect(dragEvent).to.deep.equal({\n      type: 'drag',\n      allDay: false,\n      event: fixture.componentInstance.events[0],\n      newStart: moment(fixture.componentInstance.events[0].start)\n        .add(3, 'days')\n        .add(1, 'hour')\n        .toDate(),\n      newEnd: moment(fixture.componentInstance.events[0].end)\n        .add(3, 'days')\n        .add(1, 'hour')\n        .toDate(),\n    });\n  });\n\n  it('should preserve css classes on hour segments when dragging an event', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.viewDate = new Date('2018-07-29');\n    fixture.componentInstance.events = [\n      {\n        start: moment(new Date('2018-07-29'))\n          .startOf('day')\n          .add(3, 'days')\n          .toDate(),\n        title: 'bar',\n        draggable: true,\n      },\n    ];\n    fixture.componentInstance.beforeViewRender.subscribe(\n      (view: CalendarWeekViewBeforeRenderEvent) => {\n        view.hourColumns.forEach((column) => {\n          column.hours.forEach((hour) => {\n            hour.segments.forEach((segment) => {\n              segment.cssClass = 'disabled-cell';\n            });\n          });\n        });\n      }\n    );\n    fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n    fixture.detectChanges();\n    expect(\n      fixture.nativeElement\n        .querySelector('.cal-hour-segment')\n        .classList.contains('disabled-cell')\n    ).to.be.true;\n    document.body.appendChild(fixture.nativeElement);\n    const events = fixture.nativeElement.querySelectorAll(\n      '.cal-event-container'\n    );\n    const dayWidth: number = events[0].parentElement.offsetWidth;\n    const rect: ClientRect = events[0].getBoundingClientRect();\n    triggerDomEvent('mousedown', events[0], {\n      clientX: rect.right,\n      clientY: rect.bottom,\n      button: 0,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mousemove', events[0], {\n      clientX: rect.right + dayWidth - 5,\n      clientY: rect.bottom + 95,\n    });\n    fixture.detectChanges();\n    expect(\n      fixture.nativeElement\n        .querySelector('.cal-hour-segment')\n        .classList.contains('disabled-cell')\n    ).to.be.true;\n  });\n\n  it('should resize a time event to the minimum height', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.viewDate = new Date('2018-07-29');\n    fixture.componentInstance.events = [\n      {\n        start: moment(new Date('2018-07-29'))\n          .startOf('day')\n          .add(3, 'hours')\n          .toDate(),\n        end: moment(new Date('2018-07-29'))\n          .startOf('day')\n          .add(5, 'hours')\n          .toDate(),\n        title: 'foo',\n        resizable: {\n          afterEnd: true,\n        },\n      },\n    ];\n    fixture.componentInstance.minimumEventHeight = 1;\n    fixture.componentInstance.hourSegmentHeight = 20;\n    fixture.componentInstance.ngOnChanges({\n      viewDate: {},\n      events: {},\n      hourSegmentHeight: {},\n    });\n    fixture.detectChanges();\n    document.body.appendChild(fixture.nativeElement);\n    const event: HTMLElement = fixture.nativeElement.querySelectorAll(\n      '.cal-event-container'\n    )[0];\n    const rect: ClientRect = event.getBoundingClientRect();\n    const resizeHandle = event.querySelector('.cal-resize-handle-after-end');\n    let resizeEvent: CalendarEventTimesChangedEvent;\n    fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n      resizeEvent = e;\n    });\n    triggerDomEvent('mousedown', resizeHandle, {\n      clientX: rect.right,\n      clientY: rect.bottom,\n      button: 0,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mousemove', document.body, {\n      clientX: rect.right,\n      clientY: rect.bottom - 200,\n    });\n    fixture.detectChanges();\n    expect(event.getBoundingClientRect().height).to.equal(1);\n    triggerDomEvent('mouseup', document.body, {\n      clientX: rect.right,\n      clientY: rect.bottom - 200,\n      button: 0,\n    });\n    fixture.detectChanges();\n    expect(resizeEvent).to.deep.equal({\n      type: 'resize',\n      event: fixture.componentInstance.events[0],\n      newStart: fixture.componentInstance.events[0].start,\n      newEnd: moment(fixture.componentInstance.events[0].start)\n        .add(1, 'minutes')\n        .toDate(),\n    });\n  });\n\n  it('should resize a time event to the minimum height with custom hour duration', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.viewDate = new Date('2018-07-29');\n    fixture.componentInstance.events = [\n      {\n        start: moment(new Date('2018-07-29'))\n          .startOf('day')\n          .add(4, 'hours')\n          .toDate(),\n        end: moment(new Date('2018-07-29'))\n          .startOf('day')\n          .add(6, 'hours')\n          .toDate(),\n        title: 'foo',\n        resizable: {\n          afterEnd: true,\n        },\n      },\n    ];\n    fixture.componentInstance.hourDuration = 40;\n    fixture.componentInstance.minimumEventHeight = 1;\n    fixture.componentInstance.hourSegmentHeight = 20;\n    fixture.componentInstance.ngOnChanges({\n      viewDate: {},\n      events: {},\n      hourDuration: {},\n      hourSegmentHeight: {},\n    });\n    fixture.detectChanges();\n    document.body.appendChild(fixture.nativeElement);\n    const event: HTMLElement = fixture.nativeElement.querySelectorAll(\n      '.cal-event-container'\n    )[0];\n    const rect: ClientRect = event.getBoundingClientRect();\n    const resizeHandle = event.querySelector('.cal-resize-handle-after-end');\n    let resizeEvent: CalendarEventTimesChangedEvent;\n    fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n      resizeEvent = e;\n    });\n    triggerDomEvent('mousedown', resizeHandle, {\n      clientX: rect.right,\n      clientY: rect.bottom,\n      button: 0,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mousemove', document.body, {\n      clientX: rect.right,\n      clientY: rect.bottom - 120,\n    });\n    fixture.detectChanges();\n    expect(event.getBoundingClientRect().height).to.equal(1);\n    triggerDomEvent('mouseup', document.body, {\n      clientX: rect.right,\n      clientY: rect.bottom - 120,\n      button: 0,\n    });\n    fixture.detectChanges();\n    expect(resizeEvent).to.deep.equal({\n      type: 'resize',\n      event: fixture.componentInstance.events[0],\n      newStart: fixture.componentInstance.events[0].start,\n      newEnd: moment(fixture.componentInstance.events[0].start)\n        .add(1, 'minutes')\n        .toDate(),\n    });\n  });\n\n  it('should allow css variables for colors', () => {\n    const style = document.createElement('style');\n    style.setAttribute('type', 'text/css');\n    style.innerText = `\n    :root {\n        --white: #fff;\n        --black: #000;\n      }\n    `;\n    document.head.appendChild(style);\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.ngOnInit();\n    fixture.componentInstance.viewDate = new Date('2016-06-01');\n    fixture.componentInstance.events = [\n      {\n        start: new Date('2016-05-30'),\n        end: new Date('2016-06-02'),\n        title: 'foo',\n        color: {\n          primary: 'var(--white)',\n          secondary: 'var(--black)',\n        },\n      },\n    ];\n    fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n    fixture.detectChanges();\n\n    const computedStyles: CSSStyleDeclaration = window.getComputedStyle(\n      fixture.nativeElement.querySelector('.cal-event')\n    );\n    expect(computedStyles.getPropertyValue('background-color')).to.equal(\n      'rgb(0, 0, 0)'\n    );\n    expect(computedStyles.getPropertyValue('border-color')).to.equal(\n      'rgb(255, 255, 255)'\n    );\n    document.head.appendChild(style);\n  });\n\n  it('should allow external events to be dropped on the hour segments', () => {\n    const fixture = TestBed.createComponent(TestComponent);\n    fixture.componentInstance.viewDate = new Date('2016-06-27');\n    fixture.componentInstance.events = [];\n    fixture.detectChanges();\n    document.body.appendChild(fixture.nativeElement);\n    const externalEventFixture = fixture.debugElement.query(\n      By.directive(ExternalEventComponent)\n    );\n\n    const event: HTMLElement =\n      externalEventFixture.nativeElement.querySelector('.external-event');\n    const eventPosition: ClientRect = event.getBoundingClientRect();\n\n    const segments: HTMLElement[] = Array.from(\n      fixture.nativeElement.querySelectorAll(\n        '.cal-day-columns .cal-hour-segment'\n      )\n    );\n    const segment = segments[1];\n    const segmentPosition: ClientRect = segment.getBoundingClientRect();\n\n    const eventDropped = fixture.componentInstance.eventTimesChanged;\n\n    triggerDomEvent('mousedown', event, {\n      clientY: eventPosition.top,\n      clientX: eventPosition.left,\n      button: 0,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mousemove', document.body, {\n      clientY: segmentPosition.top,\n      clientX: segmentPosition.left,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mouseup', document.body, {\n      clientY: segmentPosition.top,\n      clientX: segmentPosition.left,\n      button: 0,\n    });\n    fixture.detectChanges();\n    expect(eventDropped).to.have.been.calledWith({\n      type: 'drop',\n      event: externalEventFixture.componentInstance.event,\n      newStart: moment('2016-06-27')\n        .startOf('week')\n        .add(30, 'minutes')\n        .toDate(),\n      allDay: false,\n    });\n    expect(eventDropped).to.have.been.calledOnce;\n  });\n\n  it('should update event times when dragging', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    eventTitle.week = ({ start, end }: CalendarEvent) => {\n      return (\n        formatDate(start, 'H:mm', 'en') + ' - ' + formatDate(end, 'H:mm', 'en')\n      );\n    };\n    fixture.componentInstance.viewDate = new Date('2018-07-29');\n    const originalEvent = {\n      start: moment(new Date('2018-07-29'))\n        .startOf('day')\n        .add(3, 'hours')\n        .toDate(),\n      end: moment(new Date('2018-07-29'))\n        .startOf('day')\n        .add(5, 'hours')\n        .toDate(),\n      title: 'foo',\n      draggable: true,\n    };\n    fixture.componentInstance.events = [originalEvent];\n    fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n    fixture.detectChanges();\n    document.body.appendChild(fixture.nativeElement);\n    const event = fixture.nativeElement.querySelector('.cal-event-container');\n    const rect: ClientRect = event.getBoundingClientRect();\n    triggerDomEvent('mousedown', event, {\n      clientX: rect.right,\n      clientY: rect.bottom,\n      button: 0,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mousemove', event, {\n      clientX: rect.right,\n      clientY: rect.bottom + 95,\n    });\n    fixture.detectChanges();\n    const updatedEvent1 = fixture.nativeElement.querySelector(\n      '.cal-event-container'\n    );\n    expect(updatedEvent1.innerText.trim()).to.equal('4:30 - 6:30');\n  });\n\n  it('should update event times when dragging and not snapping to a grid', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    eventTitle.week = ({ start, end }: CalendarEvent) => {\n      return (\n        formatDate(start, 'H:mm', 'en') + ' - ' + formatDate(end, 'H:mm', 'en')\n      );\n    };\n    fixture.componentInstance.viewDate = new Date('2018-07-29');\n    fixture.componentInstance.snapDraggedEvents = false;\n    const originalEvent = {\n      start: moment(new Date('2018-07-29'))\n        .startOf('day')\n        .add(3, 'hours')\n        .toDate(),\n      end: moment(new Date('2018-07-29'))\n        .startOf('day')\n        .add(5, 'hours')\n        .toDate(),\n      title: 'foo',\n      draggable: true,\n    };\n    fixture.componentInstance.events = [originalEvent];\n    fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n    fixture.detectChanges();\n    document.body.appendChild(fixture.nativeElement);\n    const event = fixture.nativeElement.querySelector('.cal-event-container');\n    const rect: ClientRect = event.getBoundingClientRect();\n    triggerDomEvent('mousedown', event, {\n      clientX: rect.right,\n      clientY: rect.bottom,\n      button: 0,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mousemove', event, {\n      clientX: rect.right,\n      clientY: rect.bottom + 95,\n    });\n    fixture.detectChanges();\n    const updatedEvent1 = fixture.nativeElement.querySelector(\n      '.cal-event-container'\n    );\n    expect(updatedEvent1.innerText.trim()).to.equal('4:30 - 6:30');\n  });\n\n  it('should set a minimum event height', () => {\n    const fixture = TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.viewDate = moment().startOf('week').toDate();\n    fixture.componentInstance.events = [\n      {\n        start: moment().startOf('week').toDate(),\n        end: moment().startOf('week').add(5, 'minutes').toDate(),\n        title: 'foo',\n      },\n    ];\n    fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n    fixture.detectChanges();\n    expect(\n      fixture.nativeElement.querySelector('.cal-event-container').offsetHeight\n    ).to.equal(30);\n    fixture.destroy();\n  });\n\n  it('should drag a time event down and into another day', () => {\n    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n      TestBed.createComponent(CalendarWeekViewComponent);\n    fixture.componentInstance.viewDate = new Date('2020-05-03');\n    fixture.componentInstance.daysInWeek = 2;\n    fixture.componentInstance.events = [\n      {\n        start: moment(new Date('2020-05-03')).startOf('day').hours(20).toDate(),\n        end: moment(new Date('2020-05-03')).startOf('day').hours(23).toDate(),\n        title: 'foo',\n        draggable: true,\n      },\n    ];\n    fixture.componentInstance.ngOnChanges({\n      viewDate: {},\n      events: {},\n    });\n    fixture.detectChanges();\n    document.body.appendChild(fixture.nativeElement);\n    const events = fixture.nativeElement.querySelectorAll(\n      '.cal-event-container'\n    );\n    const rect1: ClientRect = events[0].getBoundingClientRect();\n    let dragEvent: CalendarEventTimesChangedEvent;\n    fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n      dragEvent = e;\n    });\n    triggerDomEvent('mousedown', events[0], {\n      clientX: 0,\n      clientY: rect1.bottom,\n      button: 0,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mousemove', events[0], {\n      clientX: 0,\n      clientY: rect1.bottom + 95,\n    });\n    fixture.detectChanges();\n    triggerDomEvent('mouseup', events[0], {\n      clientX: 0,\n      clientY: rect1.bottom + 95,\n      button: 0,\n    });\n    fixture.detectChanges();\n    fixture.destroy();\n    expect(dragEvent).to.deep.equal({\n      type: 'drag',\n      allDay: false,\n      event: fixture.componentInstance.events[0],\n      newStart: moment(fixture.componentInstance.events[0].start)\n        .add(1, 'hour')\n        .add(30, 'minutes')\n        .toDate(),\n      newEnd: moment(fixture.componentInstance.events[0].end)\n        .add(1, 'hour')\n        .add(30, 'minutes')\n        .toDate(),\n    });\n  });\n\n  describe('current time marker', () => {\n    let clock: any;\n    beforeEach(() => {\n      clock = fakeTimers.install({\n        now: new Date('2019-09-30T11:30:25.288Z').getTime(),\n        toFake: ['Date'],\n      });\n    });\n\n    afterEach(() => {\n      clock.uninstall();\n    });\n\n    it('should show a current time marker', () => {\n      const fixture: ComponentFixture<CalendarWeekViewComponent> =\n        TestBed.createComponent(CalendarWeekViewComponent);\n      fixture.componentInstance.viewDate = new Date();\n      fixture.componentInstance.ngOnChanges({\n        viewDate: {},\n        hourSegmentHeight: {},\n      });\n      fixture.detectChanges();\n      const marker = fixture.nativeElement.querySelector(\n        '.cal-day-columns .cal-day-column:nth-child(2) .cal-current-time-marker'\n      );\n      expect(marker.style.top).to.equal('690px');\n    });\n\n    it('should respect the start time', () => {\n      const fixture: ComponentFixture<CalendarWeekViewComponent> =\n        TestBed.createComponent(CalendarWeekViewComponent);\n      fixture.componentInstance.viewDate = new Date();\n      fixture.componentInstance.dayStartHour = 3;\n      fixture.componentInstance.dayStartMinute = 30;\n      fixture.componentInstance.ngOnChanges({\n        viewDate: {},\n        hourSegmentHeight: {},\n      });\n      fixture.detectChanges();\n      const marker = fixture.nativeElement.querySelector(\n        '.cal-day-columns .cal-day-column:nth-child(2) .cal-current-time-marker'\n      );\n      expect(marker.style.top).to.equal('480px');\n    });\n\n    it('should respect the end time', () => {\n      const fixture: ComponentFixture<CalendarWeekViewComponent> =\n        TestBed.createComponent(CalendarWeekViewComponent);\n      fixture.componentInstance.viewDate = new Date();\n      fixture.componentInstance.dayEndHour = 3;\n      fixture.componentInstance.ngOnChanges({\n        viewDate: {},\n        hourSegmentHeight: {},\n      });\n      fixture.detectChanges();\n      const marker = fixture.nativeElement.querySelector(\n        '.cal-day-columns .cal-day-column:nth-child(2) .cal-current-time-marker'\n      );\n      expect(marker).to.equal(null);\n    });\n\n    it('should respect the hour segment count and height', () => {\n      const fixture: ComponentFixture<CalendarWeekViewComponent> =\n        TestBed.createComponent(CalendarWeekViewComponent);\n      fixture.componentInstance.viewDate = new Date();\n      fixture.componentInstance.hourSegments = 4;\n      fixture.componentInstance.hourSegmentHeight = 60;\n      fixture.componentInstance.ngOnChanges({\n        viewDate: {},\n        hourSegmentHeight: {},\n      });\n      fixture.detectChanges();\n      const marker = fixture.nativeElement.querySelector(\n        '.cal-day-columns .cal-day-column:nth-child(2) .cal-current-time-marker'\n      );\n      expect(marker.style.top).to.equal('2760px');\n    });\n\n    it('should not change the all day event end date when ending the drop inside the hour grid', () => {\n      const fixture: ComponentFixture<CalendarWeekViewComponent> =\n        TestBed.createComponent(CalendarWeekViewComponent);\n      fixture.componentInstance.viewDate = new Date();\n      fixture.componentInstance.events = [\n        {\n          title: 'foo',\n          start: moment().startOf('week').toDate(),\n          end: moment().startOf('week').add(2, 'days').toDate(),\n          draggable: true,\n          allDay: true,\n        },\n      ];\n      fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n      fixture.detectChanges();\n      document.body.appendChild(fixture.nativeElement);\n      // remove the header as it was causing the test to fail\n      const header: HTMLElement =\n        fixture.nativeElement.querySelector('.cal-day-headers');\n      header.parentNode.removeChild(header);\n\n      const eventDropped = sinon.spy();\n      fixture.componentInstance.eventTimesChanged.subscribe(eventDropped);\n\n      const event: HTMLElement = fixture.nativeElement.querySelector(\n        '.cal-event-container'\n      );\n      const dayWidth: number = event.parentElement.offsetWidth / 7;\n      const eventPosition: ClientRect = event.getBoundingClientRect();\n      triggerDomEvent('mousedown', event, {\n        clientX: eventPosition.right,\n        clientY: eventPosition.top,\n        button: 0,\n      });\n      fixture.detectChanges();\n      triggerDomEvent('mousemove', document.body, {\n        clientX: eventPosition.right + dayWidth,\n        clientY: eventPosition.top + 100,\n      });\n      fixture.detectChanges();\n      triggerDomEvent('mouseup', document.body, {\n        clientX: eventPosition.right + dayWidth,\n        clientY: eventPosition.top + 100,\n        button: 0,\n      });\n      fixture.detectChanges();\n\n      expect(eventDropped).to.have.been.calledOnce;\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/week/calendar-week-view/calendar-week-view.component.ts","messages":[{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":82,"column":1,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":422,"endColumn":3,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[181,2036],"text":", ChangeDetectionStrategy,\n} from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\nimport {\n  WeekDay,\n  CalendarEvent,\n  WeekViewAllDayEvent,\n  WeekView,\n  ViewPeriod,\n  WeekViewHourColumn,\n  WeekViewTimeEvent,\n  WeekViewHourSegment,\n  WeekViewHour,\n  WeekViewAllDayEventRow,\n} from 'calendar-utils';\nimport { ResizeEvent } from 'angular-resizable-element';\nimport { ResizeCursors } from 'angular-resizable-element';\nimport { CalendarDragHelper } from '../../common/calendar-drag-helper/calendar-drag-helper.provider';\nimport { CalendarResizeHelper } from '../../common/calendar-resize-helper/calendar-resize-helper.provider';\nimport {\n  CalendarEventTimesChangedEvent,\n  CalendarEventTimesChangedEventType,\n} from '../../common/calendar-event-times-changed-event/calendar-event-times-changed-event.interface';\nimport { CalendarUtils } from '../../common/calendar-utils/calendar-utils.provider';\nimport {\n  validateEvents,\n  roundToNearest,\n  trackByWeekDayHeaderDate,\n  trackByHourSegment,\n  trackByHour,\n  getMinutesMoved,\n  getDefaultEventEnd,\n  addDaysWithExclusions,\n  isDraggedWithinPeriod,\n  shouldFireDroppedEvent,\n  getWeekViewPeriod,\n  trackByWeekAllDayEvent,\n  trackByWeekTimeEvent,\n} from '../../common/util/util';\nimport { DateAdapter } from '../../../date-adapters/date-adapter';\nimport {\n  DragEndEvent,\n  DropEvent,\n  DragMoveEvent,\n  ValidateDrag,\n} from 'angular-draggable-droppable';\nimport { PlacementArray } from 'positioning';\n\nexport interface WeekViewAllDayEventResize {\n  originalOffset: number;\n  originalSpan: number;\n  edge: string;\n}\n\nexport interface CalendarWeekViewBeforeRenderEvent extends WeekView {\n  header: WeekDay[];\n}\n\n/**\n * Shows all events on a given week. Example usage:\n *\n * ```typescript\n * <mwl-calendar-week-view\n *  [viewDate]=\"viewDate\"\n *  [events]=\"events\">\n * </mwl-calendar-week-view>\n * ```\n */\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/component-max-inline-declarations","severity":2,"message":"`template` has too many lines (336). Maximum allowed is 3 (https://angular.io/guide/styleguide#style-05-04)","line":84,"column":13,"nodeType":"TemplateLiteral","messageId":"componentMaxInlineDeclarations","endLine":421,"endColumn":4},{"ruleId":"@angular-eslint/prefer-output-readonly","severity":2,"message":"Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned","line":609,"column":13,"nodeType":"Identifier","messageId":"preferOutputReadonly","endLine":609,"endColumn":29,"suggestions":[{"messageId":"suggestAddReadonlyModifier","fix":{"range":[20250,20250],"text":"readonly "},"desc":"Add `readonly` modifier"}]},{"ruleId":"@angular-eslint/prefer-output-readonly","severity":2,"message":"Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned","line":617,"column":13,"nodeType":"Identifier","messageId":"preferOutputReadonly","endLine":617,"endColumn":25,"suggestions":[{"messageId":"suggestAddReadonlyModifier","fix":{"range":[20411,20411],"text":"readonly "},"desc":"Add `readonly` modifier"}]},{"ruleId":"@angular-eslint/prefer-output-readonly","severity":2,"message":"Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned","line":625,"column":13,"nodeType":"Identifier","messageId":"preferOutputReadonly","endLine":625,"endColumn":30,"suggestions":[{"messageId":"suggestAddReadonlyModifier","fix":{"range":[20609,20609],"text":"readonly "},"desc":"Add `readonly` modifier"}]},{"ruleId":"@angular-eslint/prefer-output-readonly","severity":2,"message":"Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned","line":632,"column":13,"nodeType":"Identifier","messageId":"preferOutputReadonly","endLine":632,"endColumn":29,"suggestions":[{"messageId":"suggestAddReadonlyModifier","fix":{"range":[20917,20917],"text":"readonly "},"desc":"Add `readonly` modifier"}]},{"ruleId":"@angular-eslint/prefer-output-readonly","severity":2,"message":"Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned","line":638,"column":13,"nodeType":"Identifier","messageId":"preferOutputReadonly","endLine":638,"endColumn":31,"suggestions":[{"messageId":"suggestAddReadonlyModifier","fix":{"range":[21064,21064],"text":"readonly "},"desc":"Add `readonly` modifier"}]},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `*ngIf`, `#allDayEventsContainer`, `class` instead of `class`, `#allDayEventsContainer`, `*ngIf`","line":98,"column":9,"nodeType":null,"messageId":"attributesOrder","endLine":100,"endColumn":48,"fix":{"range":[2533,2638],"text":"*ngIf=\"view.allDayEventRows.length > 0\"\n        #allDayEventsContainer\n        class=\"cal-all-day-events\""}},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `*ngFor`, `*ngForOf`, `*ngForTrackBy`, `class` instead of `class`, `*ngFor`, `*ngForOf`, `*ngForTrackBy`","line":112,"column":13,"nodeType":null,"messageId":"attributesOrder","endLine":113,"endColumn":72,"fix":{"range":[2995,3089],"text":"*ngFor=\n             of days; t\"let day trackBy: trackByWeekDayHeaderDate\"class=\"cal-day-column\""}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Attribute \"dragOverClass\" has no corresponding i18n attribute. See more at https://angular.io/guide/i18n#mark-element-attributes-for-translations","line":115,"column":13,"nodeType":null,"messageId":"i18nAttribute","endLine":115,"endColumn":26,"fix":{"range":[3156,3156],"text":" i18n-dragOverClass"}},{"ruleId":"@angular-eslint/template/no-inline-styles","severity":2,"message":"<div/> element should not have inline styles via style attribute. Please use classes instead.","line":125,"column":11,"nodeType":null,"messageId":"noInlineStyles","endLine":212,"endColumn":17},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `mwlResizable`, `mwlDraggable`, `dragActiveClass`, `[cal-draggable]`, `[cal-starts-within-week]`, `[cal-ends-within-week]`, `[ngClass]`, `[width]`, `[marginLeft]`, `[marginRight]`, `[resizeCursors]`, `[resizeSnapGrid]`, `[validateResize]`, `[dropData]`, `[dragAxis]`, `[dragSnapGrid]`, `[validateDrag]`, `[touchStartLongPress]`, `(resizeStart)`, `(resizing)`, `(resizeEnd)` instead of `[cal-draggable]`, `[cal-starts-within-week]`, `[cal-ends-within-week]`, `[ngClass]`, `[width]`, `[marginLeft]`, `[marginRight]`, `mwlResizable`, `[resizeCursors]`, `[resizeSnapGrid]`, `[validateResize]`, `(resizeStart)`, `(resizing)`, `(resizeEnd)`, `mwlDraggable`, `dragActiveClass`, `[dropData]`, `[dragAxis]`, `[dragSnapGrid]`, `[validateDrag]`, `[touchStartLongPress]`","line":132,"column":13,"nodeType":null,"messageId":"attributesOrder","endLine":168,"endColumn":62,"fix":{"range":[3673,5370],"text":"mwlResizable\n            mwlDraggable\n            dragActiveClass=\"cal-drag-active\"\n            [class.cal-draggable]=\"\n              allDayEvent.event.draggable && allDayEventResizes.size === 0\n            \"\n            [class.cal-starts-within-week]=\"!allDayEvent.startsBeforeWeek\"\n            [class.cal-ends-within-week]=\"!allDayEvent.endsAfterWeek\"\n            [ngClass]=\"allDayEvent.event?.cssClass\"\n            [style.width.%]=\"(100 / days.length) * allDayEvent.span\"\n            [style.marginLeft.%]=\"\n              rtl ? null : (100 / days.length) * allDayEvent.offset\n            \"\n            [style.marginRight.%]=\"\n              rtl ? (100 / days.length) * allDayEvent.offset : null\n            \"\n            [resizeCursors]=\"resizeCursors\"\n            [resizeSnapGrid]=\"{ left: dayColumnWidth, right: dayColumnWidth }\"\n            [validateResize]=\"validateResize\"\n            [dropData]=\"{ event: allDayEvent.event, calendarId: calendarId }\"\n            [dragAxis]=\"{\n              x: allDayEvent.event.draggable && allDayEventResizes.size === 0,\n              y:\n                !snapDraggedEvents &&\n                allDayEvent.event.draggable &&\n                allDayEventResizes.size === 0\n            }\"\n            [dragSnapGrid]=\"snapDraggedEvents ? { x: dayColumnWidth } : {}\"\n            [validateDrag]=\"validateDrag\"\n            [touchStartLongPress]=\"{ delay: 300, delta: 30 }\"\n            (resizeStart)=\"\n              allDayEventResizeStarted(eventRowContainer, allDayEvent, $event)\n            \"\n            (resizing)=\"\n              allDayEventResizing(allDayEvent, $event, dayColumnWidth)\n            \"\n            (resizeEnd)=\"allDayEventResizeEnded(allDayEvent)\""}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Attribute \"dragActiveClass\" has no corresponding i18n attribute. See more at https://angular.io/guide/i18n#mark-element-attributes-for-translations","line":157,"column":13,"nodeType":null,"messageId":"i18nAttribute","endLine":157,"endColumn":28,"fix":{"range":[4844,4844],"text":" i18n-dragActiveClass"}},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `*ngIf`, `class` instead of `class`, `*ngIf`","line":176,"column":15,"nodeType":null,"messageId":"attributesOrder","endLine":181,"endColumn":2,"fix":{"range":[5644,5847],"text":"*ngIf=\"\n                allDayEvent.event?.resizable?.beforeStart &&\n                !allDayEvent.startsBeforeWeek\n              \"\n \n              class=\"cal-resize-handle cal-resize-handle-before-start\""}},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `*ngIf`, `class` instead of `class`, `*ngIf`","line":204,"column":15,"nodeType":null,"messageId":"attributesOrder","endLine":209,"endColumn":2,"fix":{"range":[6747,6941],"text":"*ngIf=\"\n                allDayEvent.event?.resizable?.afterEnd &&\n                !allDayEvent.endsAfterWeek\n              \"\n \n              class=\"cal-resize-handle cal-resize-handle-after-end\""}},{"ruleId":"@angular-eslint/template/cyclomatic-complexity","severity":2,"message":"The cyclomatic complexity 6 exceeds the defined limit 5","line":205,"column":16,"nodeType":null,"messageId":"cyclomaticComplexity","endLine":209,"endColumn":1},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `*ngIf`, `class` instead of `class`, `*ngIf`","line":222,"column":11,"nodeType":null,"messageId":"attributesOrder","endLine":223,"endColumn":66,"fix":{"range":[7256,7351],"text":"*ngIf=\"view.hourColumns.length > 0 && daysInWeek !== 1\"\n          class=\"cal-time-label-column\""}},{"ruleId":"@angular-eslint/template/cyclomatic-complexity","severity":2,"message":"The cyclomatic complexity 7 exceeds the defined limit 5","line":223,"column":12,"nodeType":null,"messageId":"cyclomaticComplexity","endLine":223,"endColumn":65},{"ruleId":"@angular-eslint/template/cyclomatic-complexity","severity":2,"message":"The cyclomatic complexity 8 exceeds the defined limit 5","line":227,"column":39,"nodeType":null,"messageId":"cyclomaticComplexity","endLine":228,"endColumn":31},{"ruleId":"@angular-eslint/template/no-inline-styles","severity":2,"message":"<mwl-calendar-week-view-hour-segment/> element should not have inline styles via style attribute. Please use classes instead.","line":234,"column":13,"nodeType":null,"messageId":"noInlineStyles","endLine":244,"endColumn":51},{"ruleId":"@angular-eslint/template/cyclomatic-complexity","severity":2,"message":"The cyclomatic complexity 9 exceeds the defined limit 5","line":235,"column":35,"nodeType":null,"messageId":"cyclomaticComplexity","endLine":235,"endColumn":53},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `#dayColumns`, `class`, `[cal-resize-active]` instead of `class`, `[cal-resize-active]`, `#dayColumns`","line":248,"column":11,"nodeType":null,"messageId":"attributesOrder","endLine":250,"endColumn":22,"fix":{"range":[8155,8264],"text":"#dayColumns\n          class=\"cal-day-columns\"\n          [class.cal-resize-active]=\"timeEventResizes.size > 0\""}},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `*ngFor`, `*ngForOf`, `*ngForTrackBy`, `class` instead of `class`, `*ngFor`, `*ngForOf`, `*ngForTrackBy`","line":253,"column":13,"nodeType":null,"messageId":"attributesOrder","endLine":254,"endColumn":80,"fix":{"range":[8302,8404],"text":"*ngFor=\n             of view.hourColumns; t\"let column trackBy: trackByHourColumn\"class=\"cal-day-column\""}},{"ruleId":"@angular-eslint/template/cyclomatic-complexity","severity":2,"message":"The cyclomatic complexity 10 exceeds the defined limit 5","line":254,"column":32,"nodeType":null,"messageId":"cyclomaticComplexity","endLine":254,"endColumn":53},{"ruleId":"@angular-eslint/template/no-inline-styles","severity":2,"message":"<div/> element should not have inline styles via style attribute. Please use classes instead.","line":268,"column":15,"nodeType":null,"messageId":"noInlineStyles","endLine":374,"endColumn":21},{"ruleId":"@angular-eslint/template/cyclomatic-complexity","severity":2,"message":"The cyclomatic complexity 11 exceeds the defined limit 5","line":271,"column":2,"nodeType":null,"messageId":"cyclomaticComplexity","endLine":271,"endColumn":39},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `mwlResizable`, `mwlDraggable`, `dragActiveClass`, `[cal-draggable]`, `[cal-starts-within-day]`, `[cal-ends-within-day]`, `[ngClass]`, `[hidden]`, `[top]`, `[height]`, `[left]`, `[width]`, `[resizeCursors]`, `[resizeSnapGrid]`, `[validateResize]`, `[allowNegativeResizes]`, `[dropData]`, `[dragAxis]`, `[dragSnapGrid]`, `[touchStartLongPress]`, `[ghostDragEnabled]`, `[ghostElementTemplate]`, `[validateDrag]`, `(resizeStart)`, `(resizing)`, `(resizeEnd)` instead of `[cal-draggable]`, `[cal-starts-within-day]`, `[cal-ends-within-day]`, `[ngClass]`, `[hidden]`, `[top]`, `[height]`, `[left]`, `[width]`, `mwlResizable`, `[resizeCursors]`, `[resizeSnapGrid]`, `[validateResize]`, `[allowNegativeResizes]`, `(resizeStart)`, `(resizing)`, `(resizeEnd)`, `mwlDraggable`, `dragActiveClass`, `[dropData]`, `[dragAxis]`, `[dragSnapGrid]`, `[touchStartLongPress]`, `[ghostDragEnabled]`, `[ghostElementTemplate]`, `[validateDrag]`","line":275,"column":17,"nodeType":null,"messageId":"attributesOrder","endLine":319,"endColumn":46,"fix":{"range":[9240,11363],"text":"mwlResizable\n                mwlDraggable\n                dragActiveClass=\"cal-drag-active\"\n                [class.cal-draggable]=\"\n                  timeEvent.event.draggable && timeEventResizes.size === 0\n                \"\n                [class.cal-starts-within-day]=\"!timeEvent.startsBeforeDay\"\n                [class.cal-ends-within-day]=\"!timeEvent.endsAfterDay\"\n                [ngClass]=\"timeEvent.event.cssClass\"\n                [hidden]=\"timeEvent.height === 0 && timeEvent.width === 0\"\n                [style.top.px]=\"timeEvent.top\"\n                [style.height.px]=\"timeEvent.height\"\n                [style.left.%]=\"timeEvent.left\"\n                [style.width.%]=\"timeEvent.width\"\n                [resizeCursors]=\"resizeCursors\"\n                [resizeSnapGrid]=\"{\n                  left: dayColumnWidth,\n                  right: dayColumnWidth,\n                  top: eventSnapSize || hourSegmentHeight,\n                  bottom: eventSnapSize || hourSegmentHeight\n                }\"\n                [validateResize]=\"validateResize\"\n                [allowNegativeResizes]=\"true\"\n                [dropData]=\"{ event: timeEvent.event, calendarId: calendarId }\"\n                [dragAxis]=\"{\n                  x: timeEvent.event.draggable && timeEventResizes.size === 0,\n                  y: timeEvent.event.draggable && timeEventResizes.size === 0\n                }\"\n                [dragSnapGrid]=\"\n                  snapDraggedEvents\n                    ? {\n                        x: dayColumnWidth,\n                        y: eventSnapSize || hourSegmentHeight\n                      }\n                    : {}\n                \"\n                [touchStartLongPress]=\"{ delay: 300, delta: 30 }\"\n                [ghostDragEnabled]=\"!snapDraggedEvents\"\n                [ghostElementTemplate]=\"weekEventTemplate\"\n                [validateDrag]=\"validateDrag\"\n                (resizeStart)=\"\n                  timeEventResizeStarted(dayColumns, timeEvent, $event)\n                \"\n                (resizing)=\"timeEventResizing(timeEvent, $event)\"\n                (resizeEnd)=\"timeEventResizeEnded(timeEvent)\""}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Attribute \"dragActiveClass\" has no corresponding i18n attribute. See more at https://angular.io/guide/i18n#mark-element-attributes-for-translations","line":302,"column":17,"nodeType":null,"messageId":"i18nAttribute","endLine":302,"endColumn":32,"fix":{"range":[10585,10585],"text":" i18n-dragActiveClass"}},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `*ngIf`, `class` instead of `class`, `*ngIf`","line":325,"column":19,"nodeType":null,"messageId":"attributesOrder","endLine":330,"endColumn":2,"fix":{"range":[11633,11847],"text":"*ngIf=\"\n                    timeEvent.event?.resizable?.beforeStart &&\n                    !timeEvent.startsBeforeDay\n                  \"\n \n                  class=\"cal-resize-handle cal-resize-handle-before-start\""}},{"ruleId":"@angular-eslint/template/cyclomatic-complexity","severity":2,"message":"The cyclomatic complexity 12 exceeds the defined limit 5","line":326,"column":20,"nodeType":null,"messageId":"cyclomaticComplexity","endLine":330,"endColumn":1},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `*ngIf`, `class` instead of `class`, `*ngIf`","line":363,"column":19,"nodeType":null,"messageId":"attributesOrder","endLine":368,"endColumn":2,"fix":{"range":[13262,13467],"text":"*ngIf=\"\n                    timeEvent.event?.resizable?.afterEnd &&\n                    !timeEvent.endsAfterDay\n                  \"\n \n                  class=\"cal-resize-handle cal-resize-handle-after-end\""}},{"ruleId":"@angular-eslint/template/cyclomatic-complexity","severity":2,"message":"The cyclomatic complexity 13 exceeds the defined limit 5","line":364,"column":20,"nodeType":null,"messageId":"cyclomaticComplexity","endLine":368,"endColumn":1},{"ruleId":"@angular-eslint/template/cyclomatic-complexity","severity":2,"message":"The cyclomatic complexity 14 exceeds the defined limit 5","line":380,"column":1,"nodeType":null,"messageId":"cyclomaticComplexity","endLine":380,"endColumn":35},{"ruleId":"@angular-eslint/template/no-inline-styles","severity":2,"message":"<mwl-calendar-week-view-hour-segment/> element should not have inline styles via style attribute. Please use classes instead.","line":386,"column":15,"nodeType":null,"messageId":"noInlineStyles","endLine":415,"endColumn":53},{"ruleId":"@angular-eslint/template/cyclomatic-complexity","severity":2,"message":"The cyclomatic complexity 15 exceeds the defined limit 5","line":389,"column":2,"nodeType":null,"messageId":"cyclomaticComplexity","endLine":389,"endColumn":39},{"ruleId":"@angular-eslint/template/attributes-order","severity":2,"message":"The element's attributes/bindings did not match the expected order: expected `mwlDroppable`, `dragActiveClass`, `[height]`, `[segment]`, `[segmentHeight]`, `[locale]`, `[customTemplate]`, `[daysInWeek]`, `[clickListenerDisabled]`, `[dragOverClass]`, `[isTimeLabel]`, `(mwlClick)`, `(drop)`, `(dragEnter)` instead of `[height]`, `[segment]`, `[segmentHeight]`, `[locale]`, `[customTemplate]`, `[daysInWeek]`, `(mwlClick)`, `[clickListenerDisabled]`, `mwlDroppable`, `[dragOverClass]`, `dragActiveClass`, `(drop)`, `(dragEnter)`, `[isTimeLabel]`","line":391,"column":17,"nodeType":null,"messageId":"attributesOrder","endLine":413,"endColumn":49,"fix":{"range":[14143,15093],"text":"mwlDroppable\n                dragActiveClass=\"cal-drag-active\"\n                [style.height.px]=\"hourSegmentHeight\"\n                [segment]=\"segment\"\n                [segmentHeight]=\"hourSegmentHeight\"\n                [locale]=\"locale\"\n                [customTemplate]=\"hourSegmentTemplate\"\n                [daysInWeek]=\"daysInWeek\"\n                [clickListenerDisabled]=\"\n                  hourSegmentClicked.observers.length === 0\n                \"\n                [dragOverClass]=\"\n                  !dragActive || !snapDraggedEvents ? 'cal-drag-over' : null\n                \"\n                [isTimeLabel]=\"daysInWeek === 1\"\n                (mwlClick)=\"\n                  hourSegmentClicked.emit({\n                    date: segment.date,\n                    sourceEvent: $event\n                  })\n                \"\n                (drop)=\"eventDropped($event, segment.date, false)\"\n                (dragEnter)=\"dateDragEnter(segment.date)\""}},{"ruleId":"@angular-eslint/template/i18n","severity":2,"message":"Attribute \"dragActiveClass\" has no corresponding i18n attribute. See more at https://angular.io/guide/i18n#mark-element-attributes-for-translations","line":410,"column":17,"nodeType":null,"messageId":"i18nAttribute","endLine":410,"endColumn":32,"fix":{"range":[14919,14919],"text":" i18n-dragActiveClass"}}],"suppressedMessages":[],"errorCount":37,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":16,"fixableWarningCount":0,"source":"import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectorRef,\n  OnChanges,\n  OnInit,\n  OnDestroy,\n  LOCALE_ID,\n  Inject,\n  TemplateRef,\n  ElementRef,\n  AfterViewInit,\n} from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\nimport {\n  WeekDay,\n  CalendarEvent,\n  WeekViewAllDayEvent,\n  WeekView,\n  ViewPeriod,\n  WeekViewHourColumn,\n  WeekViewTimeEvent,\n  WeekViewHourSegment,\n  WeekViewHour,\n  WeekViewAllDayEventRow,\n} from 'calendar-utils';\nimport { ResizeEvent } from 'angular-resizable-element';\nimport { ResizeCursors } from 'angular-resizable-element';\nimport { CalendarDragHelper } from '../../common/calendar-drag-helper/calendar-drag-helper.provider';\nimport { CalendarResizeHelper } from '../../common/calendar-resize-helper/calendar-resize-helper.provider';\nimport {\n  CalendarEventTimesChangedEvent,\n  CalendarEventTimesChangedEventType,\n} from '../../common/calendar-event-times-changed-event/calendar-event-times-changed-event.interface';\nimport { CalendarUtils } from '../../common/calendar-utils/calendar-utils.provider';\nimport {\n  validateEvents,\n  roundToNearest,\n  trackByWeekDayHeaderDate,\n  trackByHourSegment,\n  trackByHour,\n  getMinutesMoved,\n  getDefaultEventEnd,\n  addDaysWithExclusions,\n  isDraggedWithinPeriod,\n  shouldFireDroppedEvent,\n  getWeekViewPeriod,\n  trackByWeekAllDayEvent,\n  trackByWeekTimeEvent,\n} from '../../common/util/util';\nimport { DateAdapter } from '../../../date-adapters/date-adapter';\nimport {\n  DragEndEvent,\n  DropEvent,\n  DragMoveEvent,\n  ValidateDrag,\n} from 'angular-draggable-droppable';\nimport { PlacementArray } from 'positioning';\n\nexport interface WeekViewAllDayEventResize {\n  originalOffset: number;\n  originalSpan: number;\n  edge: string;\n}\n\nexport interface CalendarWeekViewBeforeRenderEvent extends WeekView {\n  header: WeekDay[];\n}\n\n/**\n * Shows all events on a given week. Example usage:\n *\n * ```typescript\n * <mwl-calendar-week-view\n *  [viewDate]=\"viewDate\"\n *  [events]=\"events\">\n * </mwl-calendar-week-view>\n * ```\n */\n@Component({\n  selector: 'mwl-calendar-week-view',\n  template: `\n    <div class=\"cal-week-view\" role=\"grid\">\n      <mwl-calendar-week-view-header\n        [days]=\"days\"\n        [locale]=\"locale\"\n        [customTemplate]=\"headerTemplate\"\n        (dayHeaderClicked)=\"dayHeaderClicked.emit($event)\"\n        (eventDropped)=\"\n          eventDropped({ dropData: $event }, $event.newStart, true)\n        \"\n        (dragEnter)=\"dateDragEnter($event.date)\"\n      >\n      </mwl-calendar-week-view-header>\n      <div\n        class=\"cal-all-day-events\"\n        #allDayEventsContainer\n        *ngIf=\"view.allDayEventRows.length > 0\"\n        mwlDroppable\n        (dragEnter)=\"dragEnter('allDay')\"\n        (dragLeave)=\"dragLeave('allDay')\"\n      >\n        <div class=\"cal-day-columns\">\n          <div class=\"cal-time-label-column\">\n            <ng-container\n              *ngTemplateOutlet=\"allDayEventsLabelTemplate\"\n            ></ng-container>\n          </div>\n          <div\n            class=\"cal-day-column\"\n            *ngFor=\"let day of days; trackBy: trackByWeekDayHeaderDate\"\n            mwlDroppable\n            dragOverClass=\"cal-drag-over\"\n            (drop)=\"eventDropped($event, day.date, true)\"\n            (dragEnter)=\"dateDragEnter(day.date)\"\n          ></div>\n        </div>\n        <div\n          *ngFor=\"let eventRow of view.allDayEventRows; trackBy: trackById\"\n          #eventRowContainer\n          class=\"cal-events-row\"\n        >\n          <div\n            *ngFor=\"\n              let allDayEvent of eventRow.row;\n              trackBy: trackByWeekAllDayEvent\n            \"\n            #event\n            class=\"cal-event-container\"\n            [class.cal-draggable]=\"\n              allDayEvent.event.draggable && allDayEventResizes.size === 0\n            \"\n            [class.cal-starts-within-week]=\"!allDayEvent.startsBeforeWeek\"\n            [class.cal-ends-within-week]=\"!allDayEvent.endsAfterWeek\"\n            [ngClass]=\"allDayEvent.event?.cssClass\"\n            [style.width.%]=\"(100 / days.length) * allDayEvent.span\"\n            [style.marginLeft.%]=\"\n              rtl ? null : (100 / days.length) * allDayEvent.offset\n            \"\n            [style.marginRight.%]=\"\n              rtl ? (100 / days.length) * allDayEvent.offset : null\n            \"\n            mwlResizable\n            [resizeCursors]=\"resizeCursors\"\n            [resizeSnapGrid]=\"{ left: dayColumnWidth, right: dayColumnWidth }\"\n            [validateResize]=\"validateResize\"\n            (resizeStart)=\"\n              allDayEventResizeStarted(eventRowContainer, allDayEvent, $event)\n            \"\n            (resizing)=\"\n              allDayEventResizing(allDayEvent, $event, dayColumnWidth)\n            \"\n            (resizeEnd)=\"allDayEventResizeEnded(allDayEvent)\"\n            mwlDraggable\n            dragActiveClass=\"cal-drag-active\"\n            [dropData]=\"{ event: allDayEvent.event, calendarId: calendarId }\"\n            [dragAxis]=\"{\n              x: allDayEvent.event.draggable && allDayEventResizes.size === 0,\n              y:\n                !snapDraggedEvents &&\n                allDayEvent.event.draggable &&\n                allDayEventResizes.size === 0\n            }\"\n            [dragSnapGrid]=\"snapDraggedEvents ? { x: dayColumnWidth } : {}\"\n            [validateDrag]=\"validateDrag\"\n            [touchStartLongPress]=\"{ delay: 300, delta: 30 }\"\n            (dragStart)=\"\n              dragStarted(eventRowContainer, event, allDayEvent, false)\n            \"\n            (dragging)=\"allDayEventDragMove()\"\n            (dragEnd)=\"dragEnded(allDayEvent, $event, dayColumnWidth)\"\n          >\n            <div\n              class=\"cal-resize-handle cal-resize-handle-before-start\"\n              *ngIf=\"\n                allDayEvent.event?.resizable?.beforeStart &&\n                !allDayEvent.startsBeforeWeek\n              \"\n              mwlResizeHandle\n              [resizeEdges]=\"{ left: true }\"\n            ></div>\n            <mwl-calendar-week-view-event\n              [locale]=\"locale\"\n              [weekEvent]=\"allDayEvent\"\n              [tooltipPlacement]=\"tooltipPlacement\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [tooltipAppendToBody]=\"tooltipAppendToBody\"\n              [tooltipDelay]=\"tooltipDelay\"\n              [customTemplate]=\"eventTemplate\"\n              [eventTitleTemplate]=\"eventTitleTemplate\"\n              [eventActionsTemplate]=\"eventActionsTemplate\"\n              [daysInWeek]=\"daysInWeek\"\n              (eventClicked)=\"\n                eventClicked.emit({\n                  event: allDayEvent.event,\n                  sourceEvent: $event.sourceEvent\n                })\n              \"\n            >\n            </mwl-calendar-week-view-event>\n            <div\n              class=\"cal-resize-handle cal-resize-handle-after-end\"\n              *ngIf=\"\n                allDayEvent.event?.resizable?.afterEnd &&\n                !allDayEvent.endsAfterWeek\n              \"\n              mwlResizeHandle\n              [resizeEdges]=\"{ right: true }\"\n            ></div>\n          </div>\n        </div>\n      </div>\n      <div\n        class=\"cal-time-events\"\n        mwlDroppable\n        (dragEnter)=\"dragEnter('time')\"\n        (dragLeave)=\"dragLeave('time')\"\n      >\n        <div\n          class=\"cal-time-label-column\"\n          *ngIf=\"view.hourColumns.length > 0 && daysInWeek !== 1\"\n        >\n          <div\n            *ngFor=\"\n              let hour of view.hourColumns[0].hours;\n              trackBy: trackByHour;\n              let odd = odd\n            \"\n            class=\"cal-hour\"\n            [class.cal-hour-odd]=\"odd\"\n          >\n            <mwl-calendar-week-view-hour-segment\n              *ngFor=\"let segment of hour.segments; trackBy: trackByHourSegment\"\n              [style.height.px]=\"hourSegmentHeight\"\n              [segment]=\"segment\"\n              [segmentHeight]=\"hourSegmentHeight\"\n              [locale]=\"locale\"\n              [customTemplate]=\"hourSegmentTemplate\"\n              [isTimeLabel]=\"true\"\n              [daysInWeek]=\"daysInWeek\"\n            >\n            </mwl-calendar-week-view-hour-segment>\n          </div>\n        </div>\n        <div\n          class=\"cal-day-columns\"\n          [class.cal-resize-active]=\"timeEventResizes.size > 0\"\n          #dayColumns\n        >\n          <div\n            class=\"cal-day-column\"\n            *ngFor=\"let column of view.hourColumns; trackBy: trackByHourColumn\"\n          >\n            <mwl-calendar-week-view-current-time-marker\n              [columnDate]=\"column.date\"\n              [dayStartHour]=\"dayStartHour\"\n              [dayStartMinute]=\"dayStartMinute\"\n              [dayEndHour]=\"dayEndHour\"\n              [dayEndMinute]=\"dayEndMinute\"\n              [hourSegments]=\"hourSegments\"\n              [hourDuration]=\"hourDuration\"\n              [hourSegmentHeight]=\"hourSegmentHeight\"\n              [customTemplate]=\"currentTimeMarkerTemplate\"\n            ></mwl-calendar-week-view-current-time-marker>\n            <div class=\"cal-events-container\">\n              <div\n                *ngFor=\"\n                  let timeEvent of column.events;\n                  trackBy: trackByWeekTimeEvent\n                \"\n                #event\n                class=\"cal-event-container\"\n                [class.cal-draggable]=\"\n                  timeEvent.event.draggable && timeEventResizes.size === 0\n                \"\n                [class.cal-starts-within-day]=\"!timeEvent.startsBeforeDay\"\n                [class.cal-ends-within-day]=\"!timeEvent.endsAfterDay\"\n                [ngClass]=\"timeEvent.event.cssClass\"\n                [hidden]=\"timeEvent.height === 0 && timeEvent.width === 0\"\n                [style.top.px]=\"timeEvent.top\"\n                [style.height.px]=\"timeEvent.height\"\n                [style.left.%]=\"timeEvent.left\"\n                [style.width.%]=\"timeEvent.width\"\n                mwlResizable\n                [resizeCursors]=\"resizeCursors\"\n                [resizeSnapGrid]=\"{\n                  left: dayColumnWidth,\n                  right: dayColumnWidth,\n                  top: eventSnapSize || hourSegmentHeight,\n                  bottom: eventSnapSize || hourSegmentHeight\n                }\"\n                [validateResize]=\"validateResize\"\n                [allowNegativeResizes]=\"true\"\n                (resizeStart)=\"\n                  timeEventResizeStarted(dayColumns, timeEvent, $event)\n                \"\n                (resizing)=\"timeEventResizing(timeEvent, $event)\"\n                (resizeEnd)=\"timeEventResizeEnded(timeEvent)\"\n                mwlDraggable\n                dragActiveClass=\"cal-drag-active\"\n                [dropData]=\"{ event: timeEvent.event, calendarId: calendarId }\"\n                [dragAxis]=\"{\n                  x: timeEvent.event.draggable && timeEventResizes.size === 0,\n                  y: timeEvent.event.draggable && timeEventResizes.size === 0\n                }\"\n                [dragSnapGrid]=\"\n                  snapDraggedEvents\n                    ? {\n                        x: dayColumnWidth,\n                        y: eventSnapSize || hourSegmentHeight\n                      }\n                    : {}\n                \"\n                [touchStartLongPress]=\"{ delay: 300, delta: 30 }\"\n                [ghostDragEnabled]=\"!snapDraggedEvents\"\n                [ghostElementTemplate]=\"weekEventTemplate\"\n                [validateDrag]=\"validateDrag\"\n                (dragStart)=\"dragStarted(dayColumns, event, timeEvent, true)\"\n                (dragging)=\"dragMove(timeEvent, $event)\"\n                (dragEnd)=\"dragEnded(timeEvent, $event, dayColumnWidth, true)\"\n              >\n                <div\n                  class=\"cal-resize-handle cal-resize-handle-before-start\"\n                  *ngIf=\"\n                    timeEvent.event?.resizable?.beforeStart &&\n                    !timeEvent.startsBeforeDay\n                  \"\n                  mwlResizeHandle\n                  [resizeEdges]=\"{\n                    left: true,\n                    top: true\n                  }\"\n                ></div>\n                <ng-template\n                  [ngTemplateOutlet]=\"weekEventTemplate\"\n                ></ng-template>\n                <ng-template #weekEventTemplate>\n                  <mwl-calendar-week-view-event\n                    [locale]=\"locale\"\n                    [weekEvent]=\"timeEvent\"\n                    [tooltipPlacement]=\"tooltipPlacement\"\n                    [tooltipTemplate]=\"tooltipTemplate\"\n                    [tooltipAppendToBody]=\"tooltipAppendToBody\"\n                    [tooltipDisabled]=\"dragActive || timeEventResizes.size > 0\"\n                    [tooltipDelay]=\"tooltipDelay\"\n                    [customTemplate]=\"eventTemplate\"\n                    [eventTitleTemplate]=\"eventTitleTemplate\"\n                    [eventActionsTemplate]=\"eventActionsTemplate\"\n                    [column]=\"column\"\n                    [daysInWeek]=\"daysInWeek\"\n                    (eventClicked)=\"\n                      eventClicked.emit({\n                        event: timeEvent.event,\n                        sourceEvent: $event.sourceEvent\n                      })\n                    \"\n                  >\n                  </mwl-calendar-week-view-event>\n                </ng-template>\n                <div\n                  class=\"cal-resize-handle cal-resize-handle-after-end\"\n                  *ngIf=\"\n                    timeEvent.event?.resizable?.afterEnd &&\n                    !timeEvent.endsAfterDay\n                  \"\n                  mwlResizeHandle\n                  [resizeEdges]=\"{\n                    right: true,\n                    bottom: true\n                  }\"\n                ></div>\n              </div>\n            </div>\n\n            <div\n              *ngFor=\"\n                let hour of column.hours;\n                trackBy: trackByHour;\n                let odd = odd\n              \"\n              class=\"cal-hour\"\n              [class.cal-hour-odd]=\"odd\"\n            >\n              <mwl-calendar-week-view-hour-segment\n                *ngFor=\"\n                  let segment of hour.segments;\n                  trackBy: trackByHourSegment\n                \"\n                [style.height.px]=\"hourSegmentHeight\"\n                [segment]=\"segment\"\n                [segmentHeight]=\"hourSegmentHeight\"\n                [locale]=\"locale\"\n                [customTemplate]=\"hourSegmentTemplate\"\n                [daysInWeek]=\"daysInWeek\"\n                (mwlClick)=\"\n                  hourSegmentClicked.emit({\n                    date: segment.date,\n                    sourceEvent: $event\n                  })\n                \"\n                [clickListenerDisabled]=\"\n                  hourSegmentClicked.observers.length === 0\n                \"\n                mwlDroppable\n                [dragOverClass]=\"\n                  !dragActive || !snapDraggedEvents ? 'cal-drag-over' : null\n                \"\n                dragActiveClass=\"cal-drag-active\"\n                (drop)=\"eventDropped($event, segment.date, false)\"\n                (dragEnter)=\"dateDragEnter(segment.date)\"\n                [isTimeLabel]=\"daysInWeek === 1\"\n              >\n              </mwl-calendar-week-view-hour-segment>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `,\n})\nexport class CalendarWeekViewComponent\n  implements OnChanges, OnInit, OnDestroy, AfterViewInit\n{\n  /**\n   * The current view date\n   */\n  @Input() viewDate: Date;\n\n  /**\n   * An array of events to display on view\n   * The schema is available here: https://github.com/mattlewis92/calendar-utils/blob/c51689985f59a271940e30bc4e2c4e1fee3fcb5c/src/calendarUtils.ts#L49-L63\n   */\n  @Input() events: CalendarEvent[] = [];\n\n  /**\n   * An array of day indexes (0 = sunday, 1 = monday etc) that will be hidden on the view\n   */\n  @Input() excludeDays: number[] = [];\n\n  /**\n   * An observable that when emitted on will re-render the current view\n   */\n  @Input() refresh: Subject<any>;\n\n  /**\n   * The locale used to format dates\n   */\n  @Input() locale: string;\n\n  /**\n   * The placement of the event tooltip\n   */\n  @Input() tooltipPlacement: PlacementArray = 'auto';\n\n  /**\n   * A custom template to use for the event tooltips\n   */\n  @Input() tooltipTemplate: TemplateRef<any>;\n\n  /**\n   * Whether to append tooltips to the body or next to the trigger element\n   */\n  @Input() tooltipAppendToBody: boolean = true;\n\n  /**\n   * The delay in milliseconds before the tooltip should be displayed. If not provided the tooltip\n   * will be displayed immediately.\n   */\n  @Input() tooltipDelay: number | null = null;\n\n  /**\n   * The start number of the week.\n   * This is ignored when the `daysInWeek` input is also set as the `viewDate` will be used as the start of the week instead.\n   * Note, you should also pass this to the calendar title pipe so it shows the same days: {{ viewDate | calendarDate:(view + 'ViewTitle'):locale:weekStartsOn }}\n   * If using the moment date adapter this option won't do anything and you'll need to set it globally like so:\n   * ```\n   * moment.updateLocale('en', {\n   *   week: {\n   *     dow: 1, // set start of week to monday instead\n   *     doy: 0,\n   *   },\n   * });\n   * ```\n   */\n  @Input() weekStartsOn: number;\n\n  /**\n   * A custom template to use to replace the header\n   */\n  @Input() headerTemplate: TemplateRef<any>;\n\n  /**\n   * A custom template to use for week view events\n   */\n  @Input() eventTemplate: TemplateRef<any>;\n\n  /**\n   * A custom template to use for event titles\n   */\n  @Input() eventTitleTemplate: TemplateRef<any>;\n\n  /**\n   * A custom template to use for event actions\n   */\n  @Input() eventActionsTemplate: TemplateRef<any>;\n\n  /**\n   * The precision to display events.\n   * `days` will round event start and end dates to the nearest day and `minutes` will not do this rounding\n   */\n  @Input() precision: 'days' | 'minutes' = 'days';\n\n  /**\n   * An array of day indexes (0 = sunday, 1 = monday etc) that indicate which days are weekends\n   */\n  @Input() weekendDays: number[];\n\n  /**\n   * Whether to snap events to a grid when dragging\n   */\n  @Input() snapDraggedEvents: boolean = true;\n\n  /**\n   * The number of segments in an hour. Must divide equally into 60.\n   */\n  @Input() hourSegments: number = 2;\n\n  /**\n   * The duration of each segment group in minutes\n   */\n  @Input() hourDuration: number;\n\n  /**\n   * The height in pixels of each hour segment\n   */\n  @Input() hourSegmentHeight: number = 30;\n\n  /**\n   * The minimum height in pixels of each event\n   */\n  @Input() minimumEventHeight: number = 30;\n\n  /**\n   * The day start hours in 24 hour time. Must be 0-23\n   */\n  @Input() dayStartHour: number = 0;\n\n  /**\n   * The day start minutes. Must be 0-59\n   */\n  @Input() dayStartMinute: number = 0;\n\n  /**\n   * The day end hours in 24 hour time. Must be 0-23\n   */\n  @Input() dayEndHour: number = 23;\n\n  /**\n   * The day end minutes. Must be 0-59\n   */\n  @Input() dayEndMinute: number = 59;\n\n  /**\n   * A custom template to use to replace the hour segment\n   */\n  @Input() hourSegmentTemplate: TemplateRef<any>;\n\n  /**\n   * The grid size to snap resizing and dragging of hourly events to\n   */\n  @Input() eventSnapSize: number;\n\n  /**\n   * A custom template to use for the all day events label text\n   */\n  @Input() allDayEventsLabelTemplate: TemplateRef<any>;\n\n  /**\n   * The number of days in a week. Can be used to create a shorter or longer week view.\n   * The first day of the week will always be the `viewDate` and `weekStartsOn` if set will be ignored\n   */\n  @Input() daysInWeek: number;\n\n  /**\n   * A custom template to use for the current time marker\n   */\n  @Input() currentTimeMarkerTemplate: TemplateRef<any>;\n\n  /**\n   * Allow you to customise where events can be dragged and resized to.\n   * Return true to allow dragging and resizing to the new location, or false to prevent it\n   */\n  @Input() validateEventTimesChanged: (\n    event: CalendarEventTimesChangedEvent\n  ) => boolean;\n\n  /**\n   * Customise the document cursor when dragging to resize an event\n   */\n  @Input() resizeCursors: Partial<\n    Pick<ResizeCursors, 'leftOrRight' | 'topOrBottom'>\n  >;\n\n  /**\n   * Called when a header week day is clicked. Adding a `cssClass` property on `$event.day` will add that class to the header element\n   */\n  @Output() dayHeaderClicked = new EventEmitter<{\n    day: WeekDay;\n    sourceEvent: MouseEvent;\n  }>();\n\n  /**\n   * Called when an event title is clicked\n   */\n  @Output() eventClicked = new EventEmitter<{\n    event: CalendarEvent;\n    sourceEvent: MouseEvent | KeyboardEvent;\n  }>();\n\n  /**\n   * Called when an event is resized or dragged and dropped\n   */\n  @Output() eventTimesChanged =\n    new EventEmitter<CalendarEventTimesChangedEvent>();\n\n  /**\n   * An output that will be called before the view is rendered for the current week.\n   * If you add the `cssClass` property to a day in the header it will add that class to the cell element in the template\n   */\n  @Output() beforeViewRender =\n    new EventEmitter<CalendarWeekViewBeforeRenderEvent>();\n\n  /**\n   * Called when an hour segment is clicked\n   */\n  @Output() hourSegmentClicked = new EventEmitter<{\n    date: Date;\n    sourceEvent: MouseEvent;\n  }>();\n\n  /**\n   * @hidden\n   */\n  days: WeekDay[];\n\n  /**\n   * @hidden\n   */\n  view: WeekView;\n\n  /**\n   * @hidden\n   */\n  refreshSubscription: Subscription;\n\n  /**\n   * @hidden\n   */\n  allDayEventResizes: Map<WeekViewAllDayEvent, WeekViewAllDayEventResize> =\n    new Map();\n\n  /**\n   * @hidden\n   */\n  timeEventResizes: Map<CalendarEvent, ResizeEvent> = new Map();\n\n  /**\n   * @hidden\n   */\n  eventDragEnterByType = {\n    allDay: 0,\n    time: 0,\n  };\n\n  /**\n   * @hidden\n   */\n  dragActive = false;\n\n  /**\n   * @hidden\n   */\n  dragAlreadyMoved = false;\n\n  /**\n   * @hidden\n   */\n  validateDrag: ValidateDrag;\n\n  /**\n   * @hidden\n   */\n  validateResize: (args: any) => boolean;\n\n  /**\n   * @hidden\n   */\n  dayColumnWidth: number;\n\n  /**\n   * @hidden\n   */\n  calendarId = Symbol('angular calendar week view id');\n\n  /**\n   * @hidden\n   */\n  lastDraggedEvent: CalendarEvent;\n\n  /**\n   * @hidden\n   */\n  rtl = false;\n\n  /**\n   * @hidden\n   */\n  trackByWeekDayHeaderDate = trackByWeekDayHeaderDate;\n\n  /**\n   * @hidden\n   */\n  trackByHourSegment = trackByHourSegment;\n\n  /**\n   * @hidden\n   */\n  trackByHour = trackByHour;\n\n  /**\n   * @hidden\n   */\n  trackByWeekAllDayEvent = trackByWeekAllDayEvent;\n\n  /**\n   * @hidden\n   */\n  trackByWeekTimeEvent = trackByWeekTimeEvent;\n\n  /**\n   * @hidden\n   */\n  private lastDragEnterDate: Date;\n\n  /**\n   * @hidden\n   */\n  constructor(\n    protected cdr: ChangeDetectorRef,\n    protected utils: CalendarUtils,\n    @Inject(LOCALE_ID) locale: string,\n    protected dateAdapter: DateAdapter,\n    protected element: ElementRef<HTMLElement>\n  ) {\n    this.locale = locale;\n  }\n\n  /**\n   * @hidden\n   */\n  trackByHourColumn = (index: number, column: WeekViewHourColumn) =>\n    column.hours[0] ? column.hours[0].segments[0].date.toISOString() : column;\n\n  /**\n   * @hidden\n   */\n  trackById = (index: number, row: WeekViewAllDayEventRow) => row.id;\n\n  /**\n   * @hidden\n   */\n  ngOnInit(): void {\n    if (this.refresh) {\n      this.refreshSubscription = this.refresh.subscribe(() => {\n        this.refreshAll();\n        this.cdr.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnChanges(changes: any): void {\n    const refreshHeader =\n      changes.viewDate ||\n      changes.excludeDays ||\n      changes.weekendDays ||\n      changes.daysInWeek ||\n      changes.weekStartsOn;\n\n    const refreshBody =\n      changes.viewDate ||\n      changes.dayStartHour ||\n      changes.dayStartMinute ||\n      changes.dayEndHour ||\n      changes.dayEndMinute ||\n      changes.hourSegments ||\n      changes.hourDuration ||\n      changes.weekStartsOn ||\n      changes.weekendDays ||\n      changes.excludeDays ||\n      changes.hourSegmentHeight ||\n      changes.events ||\n      changes.daysInWeek ||\n      changes.minimumEventHeight;\n\n    if (refreshHeader) {\n      this.refreshHeader();\n    }\n\n    if (changes.events) {\n      validateEvents(this.events);\n    }\n\n    if (refreshBody) {\n      this.refreshBody();\n    }\n\n    if (refreshHeader || refreshBody) {\n      this.emitBeforeViewRender();\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnDestroy(): void {\n    if (this.refreshSubscription) {\n      this.refreshSubscription.unsubscribe();\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  ngAfterViewInit() {\n    this.rtl =\n      typeof window !== 'undefined' &&\n      getComputedStyle(this.element.nativeElement).direction === 'rtl';\n    this.cdr.detectChanges();\n  }\n\n  /**\n   * @hidden\n   */\n  timeEventResizeStarted(\n    eventsContainer: HTMLElement,\n    timeEvent: WeekViewTimeEvent,\n    resizeEvent: ResizeEvent\n  ): void {\n    this.timeEventResizes.set(timeEvent.event, resizeEvent);\n    this.resizeStarted(eventsContainer, timeEvent);\n  }\n\n  /**\n   * @hidden\n   */\n  timeEventResizing(timeEvent: WeekViewTimeEvent, resizeEvent: ResizeEvent) {\n    this.timeEventResizes.set(timeEvent.event, resizeEvent);\n    const adjustedEvents = new Map<CalendarEvent, CalendarEvent>();\n\n    const tempEvents = [...this.events];\n\n    this.timeEventResizes.forEach((lastResizeEvent, event) => {\n      const newEventDates = this.getTimeEventResizedDates(\n        event,\n        lastResizeEvent\n      );\n      const adjustedEvent = { ...event, ...newEventDates };\n      adjustedEvents.set(adjustedEvent, event);\n      const eventIndex = tempEvents.indexOf(event);\n      tempEvents[eventIndex] = adjustedEvent;\n    });\n\n    this.restoreOriginalEvents(tempEvents, adjustedEvents, true);\n  }\n\n  /**\n   * @hidden\n   */\n  timeEventResizeEnded(timeEvent: WeekViewTimeEvent) {\n    this.view = this.getWeekView(this.events);\n    const lastResizeEvent = this.timeEventResizes.get(timeEvent.event);\n    if (lastResizeEvent) {\n      this.timeEventResizes.delete(timeEvent.event);\n      const newEventDates = this.getTimeEventResizedDates(\n        timeEvent.event,\n        lastResizeEvent\n      );\n      this.eventTimesChanged.emit({\n        newStart: newEventDates.start,\n        newEnd: newEventDates.end,\n        event: timeEvent.event,\n        type: CalendarEventTimesChangedEventType.Resize,\n      });\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  allDayEventResizeStarted(\n    allDayEventsContainer: HTMLElement,\n    allDayEvent: WeekViewAllDayEvent,\n    resizeEvent: ResizeEvent\n  ): void {\n    this.allDayEventResizes.set(allDayEvent, {\n      originalOffset: allDayEvent.offset,\n      originalSpan: allDayEvent.span,\n      edge: typeof resizeEvent.edges.left !== 'undefined' ? 'left' : 'right',\n    });\n    this.resizeStarted(\n      allDayEventsContainer,\n      allDayEvent,\n      this.getDayColumnWidth(allDayEventsContainer)\n    );\n  }\n\n  /**\n   * @hidden\n   */\n  allDayEventResizing(\n    allDayEvent: WeekViewAllDayEvent,\n    resizeEvent: ResizeEvent,\n    dayWidth: number\n  ): void {\n    const currentResize: WeekViewAllDayEventResize =\n      this.allDayEventResizes.get(allDayEvent);\n\n    const modifier = this.rtl ? -1 : 1;\n    if (typeof resizeEvent.edges.left !== 'undefined') {\n      const diff: number =\n        Math.round(+resizeEvent.edges.left / dayWidth) * modifier;\n      allDayEvent.offset = currentResize.originalOffset + diff;\n      allDayEvent.span = currentResize.originalSpan - diff;\n    } else if (typeof resizeEvent.edges.right !== 'undefined') {\n      const diff: number =\n        Math.round(+resizeEvent.edges.right / dayWidth) * modifier;\n      allDayEvent.span = currentResize.originalSpan + diff;\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  allDayEventResizeEnded(allDayEvent: WeekViewAllDayEvent): void {\n    const currentResize: WeekViewAllDayEventResize =\n      this.allDayEventResizes.get(allDayEvent);\n\n    if (currentResize) {\n      const allDayEventResizingBeforeStart = currentResize.edge === 'left';\n      let daysDiff: number;\n      if (allDayEventResizingBeforeStart) {\n        daysDiff = allDayEvent.offset - currentResize.originalOffset;\n      } else {\n        daysDiff = allDayEvent.span - currentResize.originalSpan;\n      }\n\n      allDayEvent.offset = currentResize.originalOffset;\n      allDayEvent.span = currentResize.originalSpan;\n\n      const newDates = this.getAllDayEventResizedDates(\n        allDayEvent.event,\n        daysDiff,\n        allDayEventResizingBeforeStart\n      );\n\n      this.eventTimesChanged.emit({\n        newStart: newDates.start,\n        newEnd: newDates.end,\n        event: allDayEvent.event,\n        type: CalendarEventTimesChangedEventType.Resize,\n      });\n      this.allDayEventResizes.delete(allDayEvent);\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  getDayColumnWidth(eventRowContainer: HTMLElement): number {\n    return Math.floor(eventRowContainer.offsetWidth / this.days.length);\n  }\n\n  /**\n   * @hidden\n   */\n  dateDragEnter(date: Date) {\n    this.lastDragEnterDate = date;\n  }\n\n  /**\n   * @hidden\n   */\n  eventDropped(\n    dropEvent: Pick<\n      DropEvent<{ event?: CalendarEvent; calendarId?: symbol }>,\n      'dropData'\n    >,\n    date: Date,\n    allDay: boolean\n  ): void {\n    if (\n      shouldFireDroppedEvent(dropEvent, date, allDay, this.calendarId) &&\n      this.lastDragEnterDate.getTime() === date.getTime() &&\n      (!this.snapDraggedEvents ||\n        dropEvent.dropData.event !== this.lastDraggedEvent)\n    ) {\n      this.eventTimesChanged.emit({\n        type: CalendarEventTimesChangedEventType.Drop,\n        event: dropEvent.dropData.event,\n        newStart: date,\n        allDay,\n      });\n    }\n    this.lastDraggedEvent = null;\n  }\n\n  /**\n   * @hidden\n   */\n  dragEnter(type: 'allDay' | 'time') {\n    this.eventDragEnterByType[type]++;\n  }\n\n  /**\n   * @hidden\n   */\n  dragLeave(type: 'allDay' | 'time') {\n    this.eventDragEnterByType[type]--;\n  }\n\n  /**\n   * @hidden\n   */\n  dragStarted(\n    eventsContainerElement: HTMLElement,\n    eventElement: HTMLElement,\n    event: WeekViewTimeEvent | WeekViewAllDayEvent,\n    useY: boolean\n  ): void {\n    this.dayColumnWidth = this.getDayColumnWidth(eventsContainerElement);\n    const dragHelper: CalendarDragHelper = new CalendarDragHelper(\n      eventsContainerElement,\n      eventElement\n    );\n    this.validateDrag = ({ x, y, transform }) => {\n      const isAllowed =\n        this.allDayEventResizes.size === 0 &&\n        this.timeEventResizes.size === 0 &&\n        dragHelper.validateDrag({\n          x,\n          y,\n          snapDraggedEvents: this.snapDraggedEvents,\n          dragAlreadyMoved: this.dragAlreadyMoved,\n          transform,\n        });\n      if (isAllowed && this.validateEventTimesChanged) {\n        const newEventTimes = this.getDragMovedEventTimes(\n          event,\n          { x, y },\n          this.dayColumnWidth,\n          useY\n        );\n        return this.validateEventTimesChanged({\n          type: CalendarEventTimesChangedEventType.Drag,\n          event: event.event,\n          newStart: newEventTimes.start,\n          newEnd: newEventTimes.end,\n        });\n      }\n\n      return isAllowed;\n    };\n    this.dragActive = true;\n    this.dragAlreadyMoved = false;\n    this.lastDraggedEvent = null;\n    this.eventDragEnterByType = {\n      allDay: 0,\n      time: 0,\n    };\n    if (!this.snapDraggedEvents && useY) {\n      this.view.hourColumns.forEach((column) => {\n        const linkedEvent = column.events.find(\n          (columnEvent) =>\n            columnEvent.event === event.event && columnEvent !== event\n        );\n        // hide any linked events while dragging\n        if (linkedEvent) {\n          linkedEvent.width = 0;\n          linkedEvent.height = 0;\n        }\n      });\n    }\n    this.cdr.markForCheck();\n  }\n\n  /**\n   * @hidden\n   */\n  dragMove(dayEvent: WeekViewTimeEvent, dragEvent: DragMoveEvent) {\n    const newEventTimes = this.getDragMovedEventTimes(\n      dayEvent,\n      dragEvent,\n      this.dayColumnWidth,\n      true\n    );\n    const originalEvent = dayEvent.event;\n    const adjustedEvent = { ...originalEvent, ...newEventTimes };\n    const tempEvents = this.events.map((event) => {\n      if (event === originalEvent) {\n        return adjustedEvent;\n      }\n      return event;\n    });\n    this.restoreOriginalEvents(\n      tempEvents,\n      new Map([[adjustedEvent, originalEvent]]),\n      this.snapDraggedEvents\n    );\n    this.dragAlreadyMoved = true;\n  }\n\n  /**\n   * @hidden\n   */\n  allDayEventDragMove() {\n    this.dragAlreadyMoved = true;\n  }\n\n  /**\n   * @hidden\n   */\n  dragEnded(\n    weekEvent: WeekViewAllDayEvent | WeekViewTimeEvent,\n    dragEndEvent: DragEndEvent,\n    dayWidth: number,\n    useY = false\n  ): void {\n    this.view = this.getWeekView(this.events);\n    this.dragActive = false;\n    this.validateDrag = null;\n    const { start, end } = this.getDragMovedEventTimes(\n      weekEvent,\n      dragEndEvent,\n      dayWidth,\n      useY\n    );\n    if (\n      (this.snapDraggedEvents ||\n        this.eventDragEnterByType[useY ? 'time' : 'allDay'] > 0) &&\n      isDraggedWithinPeriod(start, end, this.view.period)\n    ) {\n      this.lastDraggedEvent = weekEvent.event;\n      this.eventTimesChanged.emit({\n        newStart: start,\n        newEnd: end,\n        event: weekEvent.event,\n        type: CalendarEventTimesChangedEventType.Drag,\n        allDay: !useY,\n      });\n    }\n  }\n\n  protected refreshHeader(): void {\n    this.days = this.utils.getWeekViewHeader({\n      viewDate: this.viewDate,\n      weekStartsOn: this.weekStartsOn,\n      excluded: this.excludeDays,\n      weekendDays: this.weekendDays,\n      ...getWeekViewPeriod(\n        this.dateAdapter,\n        this.viewDate,\n        this.weekStartsOn,\n        this.excludeDays,\n        this.daysInWeek\n      ),\n    });\n  }\n\n  protected refreshBody(): void {\n    this.view = this.getWeekView(this.events);\n  }\n\n  protected refreshAll(): void {\n    this.refreshHeader();\n    this.refreshBody();\n    this.emitBeforeViewRender();\n  }\n\n  protected emitBeforeViewRender(): void {\n    if (this.days && this.view) {\n      this.beforeViewRender.emit({\n        header: this.days,\n        ...this.view,\n      });\n    }\n  }\n\n  protected getWeekView(events: CalendarEvent[]) {\n    return this.utils.getWeekView({\n      events,\n      viewDate: this.viewDate,\n      weekStartsOn: this.weekStartsOn,\n      excluded: this.excludeDays,\n      precision: this.precision,\n      absolutePositionedEvents: true,\n      hourSegments: this.hourSegments,\n      hourDuration: this.hourDuration,\n      dayStart: {\n        hour: this.dayStartHour,\n        minute: this.dayStartMinute,\n      },\n      dayEnd: {\n        hour: this.dayEndHour,\n        minute: this.dayEndMinute,\n      },\n      segmentHeight: this.hourSegmentHeight,\n      weekendDays: this.weekendDays,\n      minimumEventHeight: this.minimumEventHeight,\n      ...getWeekViewPeriod(\n        this.dateAdapter,\n        this.viewDate,\n        this.weekStartsOn,\n        this.excludeDays,\n        this.daysInWeek\n      ),\n    });\n  }\n\n  protected getDragMovedEventTimes(\n    weekEvent: WeekViewAllDayEvent | WeekViewTimeEvent,\n    dragEndEvent: DragEndEvent | DragMoveEvent,\n    dayWidth: number,\n    useY: boolean\n  ) {\n    const daysDragged =\n      (roundToNearest(dragEndEvent.x, dayWidth) / dayWidth) *\n      (this.rtl ? -1 : 1);\n    const minutesMoved = useY\n      ? getMinutesMoved(\n          dragEndEvent.y,\n          this.hourSegments,\n          this.hourSegmentHeight,\n          this.eventSnapSize,\n          this.hourDuration\n        )\n      : 0;\n\n    const start = this.dateAdapter.addMinutes(\n      addDaysWithExclusions(\n        this.dateAdapter,\n        weekEvent.event.start,\n        daysDragged,\n        this.excludeDays\n      ),\n      minutesMoved\n    );\n    let end: Date;\n    if (weekEvent.event.end) {\n      end = this.dateAdapter.addMinutes(\n        addDaysWithExclusions(\n          this.dateAdapter,\n          weekEvent.event.end,\n          daysDragged,\n          this.excludeDays\n        ),\n        minutesMoved\n      );\n    }\n\n    return { start, end };\n  }\n\n  protected restoreOriginalEvents(\n    tempEvents: CalendarEvent[],\n    adjustedEvents: Map<CalendarEvent, CalendarEvent>,\n    snapDraggedEvents = true\n  ) {\n    const previousView = this.view;\n    if (snapDraggedEvents) {\n      this.view = this.getWeekView(tempEvents);\n    }\n\n    const adjustedEventsArray = tempEvents.filter((event) =>\n      adjustedEvents.has(event)\n    );\n    this.view.hourColumns.forEach((column, columnIndex) => {\n      previousView.hourColumns[columnIndex].hours.forEach((hour, hourIndex) => {\n        hour.segments.forEach((segment, segmentIndex) => {\n          column.hours[hourIndex].segments[segmentIndex].cssClass =\n            segment.cssClass;\n        });\n      });\n\n      adjustedEventsArray.forEach((adjustedEvent) => {\n        const originalEvent = adjustedEvents.get(adjustedEvent);\n        const existingColumnEvent = column.events.find(\n          (columnEvent) =>\n            columnEvent.event ===\n            (snapDraggedEvents ? adjustedEvent : originalEvent)\n        );\n        if (existingColumnEvent) {\n          // restore the original event so trackBy kicks in and the dom isn't changed\n          existingColumnEvent.event = originalEvent;\n          existingColumnEvent['tempEvent'] = adjustedEvent;\n          if (!snapDraggedEvents) {\n            existingColumnEvent.height = 0;\n            existingColumnEvent.width = 0;\n          }\n        } else {\n          // add a dummy event to the drop so if the event was removed from the original column the drag doesn't end early\n          const event = {\n            event: originalEvent,\n            left: 0,\n            top: 0,\n            height: 0,\n            width: 0,\n            startsBeforeDay: false,\n            endsAfterDay: false,\n            tempEvent: adjustedEvent,\n          };\n          column.events.push(event);\n        }\n      });\n    });\n    adjustedEvents.clear();\n  }\n\n  protected getTimeEventResizedDates(\n    calendarEvent: CalendarEvent,\n    resizeEvent: ResizeEvent\n  ) {\n    const newEventDates = {\n      start: calendarEvent.start,\n      end: getDefaultEventEnd(\n        this.dateAdapter,\n        calendarEvent,\n        this.minimumEventHeight\n      ),\n    };\n    const { end, ...eventWithoutEnd } = calendarEvent;\n    const smallestResizes = {\n      start: this.dateAdapter.addMinutes(\n        newEventDates.end,\n        this.minimumEventHeight * -1\n      ),\n      end: getDefaultEventEnd(\n        this.dateAdapter,\n        eventWithoutEnd,\n        this.minimumEventHeight\n      ),\n    };\n\n    const modifier = this.rtl ? -1 : 1;\n\n    if (typeof resizeEvent.edges.left !== 'undefined') {\n      const daysDiff =\n        Math.round(+resizeEvent.edges.left / this.dayColumnWidth) * modifier;\n      const newStart = addDaysWithExclusions(\n        this.dateAdapter,\n        newEventDates.start,\n        daysDiff,\n        this.excludeDays\n      );\n      if (newStart < smallestResizes.start) {\n        newEventDates.start = newStart;\n      } else {\n        newEventDates.start = smallestResizes.start;\n      }\n    } else if (typeof resizeEvent.edges.right !== 'undefined') {\n      const daysDiff =\n        Math.round(+resizeEvent.edges.right / this.dayColumnWidth) * modifier;\n      const newEnd = addDaysWithExclusions(\n        this.dateAdapter,\n        newEventDates.end,\n        daysDiff,\n        this.excludeDays\n      );\n      if (newEnd > smallestResizes.end) {\n        newEventDates.end = newEnd;\n      } else {\n        newEventDates.end = smallestResizes.end;\n      }\n    }\n\n    if (typeof resizeEvent.edges.top !== 'undefined') {\n      const minutesMoved = getMinutesMoved(\n        resizeEvent.edges.top as number,\n        this.hourSegments,\n        this.hourSegmentHeight,\n        this.eventSnapSize,\n        this.hourDuration\n      );\n      const newStart = this.dateAdapter.addMinutes(\n        newEventDates.start,\n        minutesMoved\n      );\n      if (newStart < smallestResizes.start) {\n        newEventDates.start = newStart;\n      } else {\n        newEventDates.start = smallestResizes.start;\n      }\n    } else if (typeof resizeEvent.edges.bottom !== 'undefined') {\n      const minutesMoved = getMinutesMoved(\n        resizeEvent.edges.bottom as number,\n        this.hourSegments,\n        this.hourSegmentHeight,\n        this.eventSnapSize,\n        this.hourDuration\n      );\n      const newEnd = this.dateAdapter.addMinutes(\n        newEventDates.end,\n        minutesMoved\n      );\n      if (newEnd > smallestResizes.end) {\n        newEventDates.end = newEnd;\n      } else {\n        newEventDates.end = smallestResizes.end;\n      }\n    }\n\n    return newEventDates;\n  }\n\n  protected resizeStarted(\n    eventsContainer: HTMLElement,\n    event: WeekViewTimeEvent | WeekViewAllDayEvent,\n    dayWidth?: number\n  ) {\n    this.dayColumnWidth = this.getDayColumnWidth(eventsContainer);\n    const resizeHelper = new CalendarResizeHelper(\n      eventsContainer,\n      dayWidth,\n      this.rtl\n    );\n    this.validateResize = ({ rectangle, edges }) => {\n      const isWithinBoundary = resizeHelper.validateResize({\n        rectangle: { ...rectangle },\n        edges,\n      });\n\n      if (isWithinBoundary && this.validateEventTimesChanged) {\n        let newEventDates;\n        if (!dayWidth) {\n          newEventDates = this.getTimeEventResizedDates(event.event, {\n            rectangle,\n            edges,\n          });\n        } else {\n          const modifier = this.rtl ? -1 : 1;\n          if (typeof edges.left !== 'undefined') {\n            const diff = Math.round(+edges.left / dayWidth) * modifier;\n            newEventDates = this.getAllDayEventResizedDates(\n              event.event,\n              diff,\n              !this.rtl\n            );\n          } else {\n            const diff = Math.round(+edges.right / dayWidth) * modifier;\n            newEventDates = this.getAllDayEventResizedDates(\n              event.event,\n              diff,\n              this.rtl\n            );\n          }\n        }\n        return this.validateEventTimesChanged({\n          type: CalendarEventTimesChangedEventType.Resize,\n          event: event.event,\n          newStart: newEventDates.start,\n          newEnd: newEventDates.end,\n        });\n      }\n\n      return isWithinBoundary;\n    };\n    this.cdr.markForCheck();\n  }\n\n  /**\n   * @hidden\n   */\n  protected getAllDayEventResizedDates(\n    event: CalendarEvent,\n    daysDiff: number,\n    beforeStart: boolean\n  ) {\n    let start: Date = event.start;\n    let end: Date = event.end || event.start;\n    if (beforeStart) {\n      start = addDaysWithExclusions(\n        this.dateAdapter,\n        start,\n        daysDiff,\n        this.excludeDays\n      );\n    } else {\n      end = addDaysWithExclusions(\n        this.dateAdapter,\n        end,\n        daysDiff,\n        this.excludeDays\n      );\n    }\n\n    return { start, end };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/week/calendar-week.module.ts","messages":[{"ruleId":"@angular-eslint/sort-ngmodule-metadata-arrays","severity":2,"message":"`NgModule` metadata arrays should be sorted in ASC alphabetical order","line":33,"column":5,"nodeType":"Identifier","messageId":"sortNgmoduleMetadataArrays","endLine":33,"endColumn":22,"fix":{"range":[2199,2237],"text":"DragAndDropModule,\n    ResizableModule"}},{"ruleId":"@angular-eslint/sort-ngmodule-metadata-arrays","severity":2,"message":"`NgModule` metadata arrays should be sorted in ASC alphabetical order","line":39,"column":5,"nodeType":"Identifier","messageId":"sortNgmoduleMetadataArrays","endLine":39,"endColumn":35,"fix":{"range":[2323,2390],"text":"CalendarWeekViewEventComponent,\n    CalendarWeekViewHeaderComponent"}},{"ruleId":"@angular-eslint/sort-ngmodule-metadata-arrays","severity":2,"message":"`NgModule` metadata arrays should be sorted in ASC alphabetical order","line":45,"column":5,"nodeType":"Identifier","messageId":"sortNgmoduleMetadataArrays","endLine":45,"endColumn":22,"fix":{"range":[2504,2542],"text":"DragAndDropModule,\n    ResizableModule"}}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ResizableModule } from 'angular-resizable-element';\nimport { DragAndDropModule } from 'angular-draggable-droppable';\nimport { CalendarWeekViewComponent } from './calendar-week-view/calendar-week-view.component';\nimport { CalendarWeekViewHeaderComponent } from './calendar-week-view/calendar-week-view-header/calendar-week-view-header.component';\nimport { CalendarWeekViewEventComponent } from './calendar-week-view/calendar-week-view-event/calendar-week-view-event.component';\nimport { CalendarCommonModule } from '../common/calendar-common.module';\nimport { CalendarWeekViewHourSegmentComponent } from './calendar-week-view/calendar-week-view-hour-segment/calendar-week-view-hour-segment.component';\nimport { CalendarWeekViewCurrentTimeMarkerComponent } from './calendar-week-view/calendar-week-view-current-time-marker/calendar-week-view-current-time-marker.component';\n\nexport {\n  CalendarWeekViewComponent,\n  CalendarWeekViewBeforeRenderEvent,\n} from './calendar-week-view/calendar-week-view.component';\nexport {\n  WeekViewAllDayEvent as CalendarWeekViewAllDayEvent,\n  WeekViewAllDayEventRow as CalendarWeekViewAllDayEventRow,\n  GetWeekViewArgs as CalendarGetWeekViewArgs,\n} from 'calendar-utils';\nexport { getWeekViewPeriod } from '../common/util/util';\n\n// needed for ivy, not part of the public api\nexport { CalendarWeekViewHeaderComponent as ɵCalendarWeekViewHeaderComponent } from './calendar-week-view/calendar-week-view-header/calendar-week-view-header.component';\nexport { CalendarWeekViewEventComponent as ɵCalendarWeekViewEventComponent } from './calendar-week-view/calendar-week-view-event/calendar-week-view-event.component';\nexport { CalendarWeekViewHourSegmentComponent as ɵCalendarWeekViewHourSegmentComponent } from './calendar-week-view/calendar-week-view-hour-segment/calendar-week-view-hour-segment.component';\nexport { CalendarWeekViewCurrentTimeMarkerComponent as ɵCalendarWeekViewCurrentTimeMarkerComponent } from './calendar-week-view/calendar-week-view-current-time-marker/calendar-week-view-current-time-marker.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ResizableModule,\n    DragAndDropModule,\n    CalendarCommonModule,\n  ],\n  declarations: [\n    CalendarWeekViewComponent,\n    CalendarWeekViewHeaderComponent,\n    CalendarWeekViewEventComponent,\n    CalendarWeekViewHourSegmentComponent,\n    CalendarWeekViewCurrentTimeMarkerComponent,\n  ],\n  exports: [\n    ResizableModule,\n    DragAndDropModule,\n    CalendarWeekViewComponent,\n    CalendarWeekViewHeaderComponent,\n    CalendarWeekViewEventComponent,\n    CalendarWeekViewHourSegmentComponent,\n    CalendarWeekViewCurrentTimeMarkerComponent,\n  ],\n})\nexport class CalendarWeekModule {}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/test/util.ts","messages":[{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":16,"column":1,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":31,"endColumn":3,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[18,406],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent } from 'angular-calendar';\n\nexport function triggerDomEvent(\n  eventType: string,\n  target: HTMLElement | Element,\n  eventData: object = {}\n) {\n  const event: Event = document.createEvent('Event');\n  Object.assign(event, eventData);\n  event.initEvent(eventType, true, true);\n  target.dispatchEvent(event);\n  return event;\n}\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/component-max-inline-declarations","severity":2,"message":"`styles` has too many lines (7). Maximum allowed is 3 (https://angular.io/guide/styleguide#style-05-04)","line":20,"column":11,"nodeType":"ArrayExpression","messageId":"componentMaxInlineDeclarations","endLine":30,"endColumn":4}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component } from '@angular/core';\nimport { CalendarEvent } from 'angular-calendar';\n\nexport function triggerDomEvent(\n  eventType: string,\n  target: HTMLElement | Element,\n  eventData: object = {}\n) {\n  const event: Event = document.createEvent('Event');\n  Object.assign(event, eventData);\n  event.initEvent(eventType, true, true);\n  target.dispatchEvent(event);\n  return event;\n}\n\n@Component({\n  selector: 'mwl-external-event',\n  template:\n    '<div class=\"external-event\" mwlDraggable [dropData]=\"{event: event}\">{{ event.title }}</div>',\n  styles: [\n    `\n      .external-event {\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 10px;\n        height: 10px;\n      }\n    `,\n  ],\n})\nexport class ExternalEventComponent {\n  event: CalendarEvent = {\n    title: 'foo',\n    start: new Date(),\n    draggable: true,\n    color: {\n      primary: 'blue',\n      secondary: 'lightblue',\n    },\n  };\n}\n","usedDeprecatedRules":[]}]
