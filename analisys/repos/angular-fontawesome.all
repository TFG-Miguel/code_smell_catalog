
Linting "angular-fontawesome"...
[{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-fontawesome/src/lib/fontawesome.module.ts","messages":[{"ruleId":"@angular-eslint/sort-ngmodule-metadata-arrays","severity":2,"message":"`NgModule` metadata arrays should be sorted in ASC alphabetical order","line":13,"column":5,"nodeType":"Identifier","messageId":"sortNgmoduleMetadataArrays","endLine":13,"endColumn":27,"fix":{"range":[552,595],"text":"FaDuotoneIconComponent,\n    FaIconComponent"}},{"ruleId":"@angular-eslint/sort-ngmodule-metadata-arrays","severity":2,"message":"`NgModule` metadata arrays should be sorted in ASC alphabetical order","line":22,"column":5,"nodeType":"Identifier","messageId":"sortNgmoduleMetadataArrays","endLine":22,"endColumn":27,"fix":{"range":[751,794],"text":"FaDuotoneIconComponent,\n    FaIconComponent"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import { NgModule } from '@angular/core';\nimport { FaDuotoneIconComponent } from './icon/duotone-icon.component';\nimport { FaIconComponent } from './icon/icon.component';\nimport { FaLayersCounterComponent } from './layers/layers-counter.component';\nimport { FaLayersTextComponent } from './layers/layers-text.component';\nimport { FaLayersComponent } from './layers/layers.component';\nimport { FaStackItemSizeDirective } from './stack/stack-item-size.directive';\nimport { FaStackComponent } from './stack/stack.component';\n\n@NgModule({\n  imports: [\n    FaIconComponent,\n    FaDuotoneIconComponent,\n    FaLayersComponent,\n    FaLayersTextComponent,\n    FaLayersCounterComponent,\n    FaStackComponent,\n    FaStackItemSizeDirective,\n  ],\n  exports: [\n    FaIconComponent,\n    FaDuotoneIconComponent,\n    FaLayersComponent,\n    FaLayersTextComponent,\n    FaLayersCounterComponent,\n    FaStackComponent,\n    FaStackItemSizeDirective,\n  ],\n})\nexport class FontAwesomeModule {}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]},{"ruleId":"@angular-eslint/prefer-standalone-component","replacedBy":["prefer-standalone"]},{"ruleId":"@angular-eslint/sort-ngmodule-metadata-arrays","replacedBy":[]}]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-fontawesome/src/lib/icon/duotone-icon.component.spec.ts","messages":[{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":8,"column":5,"nodeType":"Decorator","messageId":"preferStandalone","endLine":12,"endColumn":7,"fix":{"range":[431,436],"text":"true"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":8,"column":5,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":12,"endColumn":7,"fix":{"range":[431,436],"text":"true"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":8,"column":5,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":12,"endColumn":7,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[55,392],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\nimport { faDummy, initTest, queryByCss } from '../../testing/helpers';\nimport { FaDuotoneIconComponent } from './duotone-icon.component';\n\ndescribe('FaDuotoneIconComponent', () => {\n  it('should render the duotone icon', () => {\n    @Component({\n      changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":23,"column":5,"nodeType":"Decorator","messageId":"preferStandalone","endLine":27,"endColumn":7,"fix":{"range":[840,845],"text":"true"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":23,"column":5,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":27,"endColumn":7,"fix":{"range":[840,845],"text":"true"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":23,"column":5,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":27,"endColumn":7,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[55,801],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\nimport { faDummy, initTest, queryByCss } from '../../testing/helpers';\nimport { FaDuotoneIconComponent } from './duotone-icon.component';\n\ndescribe('FaDuotoneIconComponent', () => {\n  it('should render the duotone icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-duotone-icon [icon]=\"faDummy()\"></fa-duotone-icon>',\n    })\n    class HostComponent {\n      faDummy = signal(faDummy);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should allow to swap opacity of the layers', () => {\n    @Component({\n      changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":38,"column":5,"nodeType":"Decorator","messageId":"preferStandalone","endLine":42,"endColumn":7,"fix":{"range":[1320,1325],"text":"true"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":38,"column":5,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":42,"endColumn":7,"fix":{"range":[1320,1325],"text":"true"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":38,"column":5,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":42,"endColumn":7,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[55,1281],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\nimport { faDummy, initTest, queryByCss } from '../../testing/helpers';\nimport { FaDuotoneIconComponent } from './duotone-icon.component';\n\ndescribe('FaDuotoneIconComponent', () => {\n  it('should render the duotone icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-duotone-icon [icon]=\"faDummy()\"></fa-duotone-icon>',\n    })\n    class HostComponent {\n      faDummy = signal(faDummy);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should allow to swap opacity of the layers', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-duotone-icon [icon]=\"faDummy()\" [swapOpacity]=\"true\"></fa-duotone-icon>',\n    })\n    class HostComponent {\n      faDummy = signal(faDummy);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-swap-opacity')).toBeTruthy();\n  });\n\n  it('should allow to customize opacity of the primary layer', () => {\n    @Component({\n      changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":53,"column":5,"nodeType":"Decorator","messageId":"preferStandalone","endLine":57,"endColumn":7,"fix":{"range":[1812,1817],"text":"true"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":53,"column":5,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":57,"endColumn":7,"fix":{"range":[1812,1817],"text":"true"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":53,"column":5,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":57,"endColumn":7,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[55,1773],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\nimport { faDummy, initTest, queryByCss } from '../../testing/helpers';\nimport { FaDuotoneIconComponent } from './duotone-icon.component';\n\ndescribe('FaDuotoneIconComponent', () => {\n  it('should render the duotone icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-duotone-icon [icon]=\"faDummy()\"></fa-duotone-icon>',\n    })\n    class HostComponent {\n      faDummy = signal(faDummy);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should allow to swap opacity of the layers', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-duotone-icon [icon]=\"faDummy()\" [swapOpacity]=\"true\"></fa-duotone-icon>',\n    })\n    class HostComponent {\n      faDummy = signal(faDummy);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-swap-opacity')).toBeTruthy();\n  });\n\n  it('should allow to customize opacity of the primary layer', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-duotone-icon [icon]=\"faDummy()\" [primaryOpacity]=\"0.1\"></fa-duotone-icon>',\n    })\n    class HostComponent {\n      faDummy = signal(faDummy);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').style.getPropertyValue('--fa-primary-opacity')).toBe('0.1');\n  });\n\n  it('should allow to customize opacity of the secondary layer', () => {\n    @Component({\n      changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":68,"column":5,"nodeType":"Decorator","messageId":"preferStandalone","endLine":72,"endColumn":7,"fix":{"range":[2304,2309],"text":"true"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":68,"column":5,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":72,"endColumn":7,"fix":{"range":[2304,2309],"text":"true"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":68,"column":5,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":72,"endColumn":7,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[55,2265],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\nimport { faDummy, initTest, queryByCss } from '../../testing/helpers';\nimport { FaDuotoneIconComponent } from './duotone-icon.component';\n\ndescribe('FaDuotoneIconComponent', () => {\n  it('should render the duotone icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-duotone-icon [icon]=\"faDummy()\"></fa-duotone-icon>',\n    })\n    class HostComponent {\n      faDummy = signal(faDummy);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should allow to swap opacity of the layers', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-duotone-icon [icon]=\"faDummy()\" [swapOpacity]=\"true\"></fa-duotone-icon>',\n    })\n    class HostComponent {\n      faDummy = signal(faDummy);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-swap-opacity')).toBeTruthy();\n  });\n\n  it('should allow to customize opacity of the primary layer', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-duotone-icon [icon]=\"faDummy()\" [primaryOpacity]=\"0.1\"></fa-duotone-icon>',\n    })\n    class HostComponent {\n      faDummy = signal(faDummy);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').style.getPropertyValue('--fa-primary-opacity')).toBe('0.1');\n  });\n\n  it('should allow to customize opacity of the secondary layer', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-duotone-icon [icon]=\"faDummy()\" [secondaryOpacity]=\"0.9\"></fa-duotone-icon>',\n    })\n    class HostComponent {\n      faDummy = signal(faDummy);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').style.getPropertyValue('--fa-secondary-opacity')).toBe('0.9');\n  });\n\n  it('should allow to customize color of the primary layer', () => {\n    @Component({\n      changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":83,"column":5,"nodeType":"Decorator","messageId":"preferStandalone","endLine":87,"endColumn":7,"fix":{"range":[2788,2793],"text":"true"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":83,"column":5,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":87,"endColumn":7,"fix":{"range":[2788,2793],"text":"true"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":83,"column":5,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":87,"endColumn":7,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[55,2749],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\nimport { faDummy, initTest, queryByCss } from '../../testing/helpers';\nimport { FaDuotoneIconComponent } from './duotone-icon.component';\n\ndescribe('FaDuotoneIconComponent', () => {\n  it('should render the duotone icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-duotone-icon [icon]=\"faDummy()\"></fa-duotone-icon>',\n    })\n    class HostComponent {\n      faDummy = signal(faDummy);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should allow to swap opacity of the layers', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-duotone-icon [icon]=\"faDummy()\" [swapOpacity]=\"true\"></fa-duotone-icon>',\n    })\n    class HostComponent {\n      faDummy = signal(faDummy);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-swap-opacity')).toBeTruthy();\n  });\n\n  it('should allow to customize opacity of the primary layer', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-duotone-icon [icon]=\"faDummy()\" [primaryOpacity]=\"0.1\"></fa-duotone-icon>',\n    })\n    class HostComponent {\n      faDummy = signal(faDummy);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').style.getPropertyValue('--fa-primary-opacity')).toBe('0.1');\n  });\n\n  it('should allow to customize opacity of the secondary layer', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-duotone-icon [icon]=\"faDummy()\" [secondaryOpacity]=\"0.9\"></fa-duotone-icon>',\n    })\n    class HostComponent {\n      faDummy = signal(faDummy);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').style.getPropertyValue('--fa-secondary-opacity')).toBe('0.9');\n  });\n\n  it('should allow to customize color of the primary layer', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-duotone-icon [icon]=\"faDummy()\" primaryColor=\"red\"></fa-duotone-icon>',\n    })\n    class HostComponent {\n      faDummy = signal(faDummy);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').style.getPropertyValue('--fa-primary-color')).toBe('red');\n  });\n\n  it('should allow to customize color of the secondary layer', () => {\n    @Component({\n      changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":98,"column":5,"nodeType":"Decorator","messageId":"preferStandalone","endLine":102,"endColumn":7,"fix":{"range":[3274,3279],"text":"true"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":98,"column":5,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":102,"endColumn":7,"fix":{"range":[3274,3279],"text":"true"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":98,"column":5,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":102,"endColumn":7,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[55,3235],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\nimport { faDummy, initTest, queryByCss } from '../../testing/helpers';\nimport { FaDuotoneIconComponent } from './duotone-icon.component';\n\ndescribe('FaDuotoneIconComponent', () => {\n  it('should render the duotone icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-duotone-icon [icon]=\"faDummy()\"></fa-duotone-icon>',\n    })\n    class HostComponent {\n      faDummy = signal(faDummy);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should allow to swap opacity of the layers', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-duotone-icon [icon]=\"faDummy()\" [swapOpacity]=\"true\"></fa-duotone-icon>',\n    })\n    class HostComponent {\n      faDummy = signal(faDummy);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-swap-opacity')).toBeTruthy();\n  });\n\n  it('should allow to customize opacity of the primary layer', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-duotone-icon [icon]=\"faDummy()\" [primaryOpacity]=\"0.1\"></fa-duotone-icon>',\n    })\n    class HostComponent {\n      faDummy = signal(faDummy);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').style.getPropertyValue('--fa-primary-opacity')).toBe('0.1');\n  });\n\n  it('should allow to customize opacity of the secondary layer', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-duotone-icon [icon]=\"faDummy()\" [secondaryOpacity]=\"0.9\"></fa-duotone-icon>',\n    })\n    class HostComponent {\n      faDummy = signal(faDummy);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').style.getPropertyValue('--fa-secondary-opacity')).toBe('0.9');\n  });\n\n  it('should allow to customize color of the primary layer', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-duotone-icon [icon]=\"faDummy()\" primaryColor=\"red\"></fa-duotone-icon>',\n    })\n    class HostComponent {\n      faDummy = signal(faDummy);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').style.getPropertyValue('--fa-primary-color')).toBe('red');\n  });\n\n  it('should allow to customize color of the secondary layer', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-duotone-icon [icon]=\"faDummy()\" secondaryColor=\"red\"></fa-duotone-icon>',\n    })\n    class HostComponent {\n      faDummy = signal(faDummy);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').style.getPropertyValue('--fa-secondary-color')).toBe('red');\n  });\n\n  it('should throw if specified icon is not a Duotone icon', () => {\n    @Component({\n      changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":118,"column":5,"nodeType":"Decorator","messageId":"preferStandalone","endLine":122,"endColumn":7,"fix":{"range":[3940,3945],"text":"true"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":118,"column":5,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":122,"endColumn":7,"fix":{"range":[3940,3945],"text":"true"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":118,"column":5,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":122,"endColumn":7,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[55,3901],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\nimport { faDummy, initTest, queryByCss } from '../../testing/helpers';\nimport { FaDuotoneIconComponent } from './duotone-icon.component';\n\ndescribe('FaDuotoneIconComponent', () => {\n  it('should render the duotone icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-duotone-icon [icon]=\"faDummy()\"></fa-duotone-icon>',\n    })\n    class HostComponent {\n      faDummy = signal(faDummy);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should allow to swap opacity of the layers', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-duotone-icon [icon]=\"faDummy()\" [swapOpacity]=\"true\"></fa-duotone-icon>',\n    })\n    class HostComponent {\n      faDummy = signal(faDummy);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-swap-opacity')).toBeTruthy();\n  });\n\n  it('should allow to customize opacity of the primary layer', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-duotone-icon [icon]=\"faDummy()\" [primaryOpacity]=\"0.1\"></fa-duotone-icon>',\n    })\n    class HostComponent {\n      faDummy = signal(faDummy);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').style.getPropertyValue('--fa-primary-opacity')).toBe('0.1');\n  });\n\n  it('should allow to customize opacity of the secondary layer', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-duotone-icon [icon]=\"faDummy()\" [secondaryOpacity]=\"0.9\"></fa-duotone-icon>',\n    })\n    class HostComponent {\n      faDummy = signal(faDummy);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').style.getPropertyValue('--fa-secondary-opacity')).toBe('0.9');\n  });\n\n  it('should allow to customize color of the primary layer', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-duotone-icon [icon]=\"faDummy()\" primaryColor=\"red\"></fa-duotone-icon>',\n    })\n    class HostComponent {\n      faDummy = signal(faDummy);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').style.getPropertyValue('--fa-primary-color')).toBe('red');\n  });\n\n  it('should allow to customize color of the secondary layer', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-duotone-icon [icon]=\"faDummy()\" secondaryColor=\"red\"></fa-duotone-icon>',\n    })\n    class HostComponent {\n      faDummy = signal(faDummy);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').style.getPropertyValue('--fa-secondary-color')).toBe('red');\n  });\n\n  it('should throw if specified icon is not a Duotone icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-duotone-icon [icon]=\"faUser()\"></fa-duotone-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    expect(() => fixture.detectChanges()).toThrow(\n      new Error(\n        'The specified icon does not appear to be a Duotone icon. ' +\n          \"Check that you specified the correct style: <fa-duotone-icon [icon]=\\\"['fad', 'user']\\\"></fa-duotone-icon> \" +\n          'or use: <fa-icon icon=\"user\"></fa-icon> instead.',\n      ),\n    );\n  });\n\n  it('should be able to create component dynamically', () => {\n    @Component({\n      changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]}],"suppressedMessages":[],"errorCount":24,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":16,"fixableWarningCount":0,"source":"import { Component, signal, ViewChild, ViewContainerRef } from '@angular/core';\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\nimport { faDummy, initTest, queryByCss } from '../../testing/helpers';\nimport { FaDuotoneIconComponent } from './duotone-icon.component';\n\ndescribe('FaDuotoneIconComponent', () => {\n  it('should render the duotone icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-duotone-icon [icon]=\"faDummy()\"></fa-duotone-icon>',\n    })\n    class HostComponent {\n      faDummy = signal(faDummy);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should allow to swap opacity of the layers', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-duotone-icon [icon]=\"faDummy()\" [swapOpacity]=\"true\"></fa-duotone-icon>',\n    })\n    class HostComponent {\n      faDummy = signal(faDummy);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-swap-opacity')).toBeTruthy();\n  });\n\n  it('should allow to customize opacity of the primary layer', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-duotone-icon [icon]=\"faDummy()\" [primaryOpacity]=\"0.1\"></fa-duotone-icon>',\n    })\n    class HostComponent {\n      faDummy = signal(faDummy);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').style.getPropertyValue('--fa-primary-opacity')).toBe('0.1');\n  });\n\n  it('should allow to customize opacity of the secondary layer', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-duotone-icon [icon]=\"faDummy()\" [secondaryOpacity]=\"0.9\"></fa-duotone-icon>',\n    })\n    class HostComponent {\n      faDummy = signal(faDummy);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').style.getPropertyValue('--fa-secondary-opacity')).toBe('0.9');\n  });\n\n  it('should allow to customize color of the primary layer', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-duotone-icon [icon]=\"faDummy()\" primaryColor=\"red\"></fa-duotone-icon>',\n    })\n    class HostComponent {\n      faDummy = signal(faDummy);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').style.getPropertyValue('--fa-primary-color')).toBe('red');\n  });\n\n  it('should allow to customize color of the secondary layer', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-duotone-icon [icon]=\"faDummy()\" secondaryColor=\"red\"></fa-duotone-icon>',\n    })\n    class HostComponent {\n      faDummy = signal(faDummy);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').style.getPropertyValue('--fa-secondary-color')).toBe('red');\n  });\n\n  it('should throw if specified icon is not a Duotone icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-duotone-icon [icon]=\"faUser()\"></fa-duotone-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    expect(() => fixture.detectChanges()).toThrow(\n      new Error(\n        'The specified icon does not appear to be a Duotone icon. ' +\n          \"Check that you specified the correct style: <fa-duotone-icon [icon]=\\\"['fad', 'user']\\\"></fa-duotone-icon> \" +\n          'or use: <fa-icon icon=\"user\"></fa-icon> instead.',\n      ),\n    );\n  });\n\n  it('should be able to create component dynamically', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<ng-container #host></ng-container>',\n    })\n    class HostComponent {\n      @ViewChild('host', { static: true, read: ViewContainerRef }) container: ViewContainerRef;\n\n      createIcon() {\n        const componentRef = this.container.createComponent(FaDuotoneIconComponent);\n        componentRef.setInput('icon', faDummy);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeFalsy();\n\n    fixture.componentInstance.createIcon();\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]},{"ruleId":"@angular-eslint/prefer-standalone-component","replacedBy":["prefer-standalone"]},{"ruleId":"@angular-eslint/sort-ngmodule-metadata-arrays","replacedBy":[]}]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-fontawesome/src/lib/icon/duotone-icon.component.ts","messages":[{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":6,"column":1,"nodeType":"Decorator","messageId":"preferStandalone","endLine":10,"endColumn":3,"fix":{"range":[298,298],"text":"standalone: true,"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":6,"column":1,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":10,"endColumn":3,"fix":{"range":[298,298],"text":"standalone: true,"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import { ChangeDetectionStrategy, Component, input } from '@angular/core';\nimport { IconDefinition as CoreIconDefinition, IconParams } from '@fortawesome/fontawesome-svg-core';\nimport { IconDefinition, IconProp } from '../types';\nimport { FaIconComponent } from './icon.component';\n\n@Component({\n  selector: 'fa-duotone-icon',\n  template: ``,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FaDuotoneIconComponent extends FaIconComponent {\n  /**\n   * Swap the default opacity of each duotone icon’s layers. This will make an\n   * icon’s primary layer have the default opacity of 40% rather than its\n   * secondary layer.\n   *\n   * @default false\n   */\n  readonly swapOpacity = input<'true' | 'false' | boolean>();\n\n  /**\n   * Customize the opacity of the primary icon layer.\n   * Valid values are in range [0, 1.0].\n   *\n   * @default 1.0\n   */\n  readonly primaryOpacity = input<string | number>();\n\n  /**\n   * Customize the opacity of the secondary icon layer.\n   * Valid values are in range [0, 1.0].\n   *\n   * @default 0.4\n   */\n  readonly secondaryOpacity = input<string | number>();\n\n  /**\n   * Customize the color of the primary icon layer.\n   * Accepts any valid CSS color value.\n   *\n   * @default CSS inherited color\n   */\n  readonly primaryColor = input<string>();\n\n  /**\n   * Customize the color of the secondary icon layer.\n   * Accepts any valid CSS color value.\n   *\n   * @default CSS inherited color\n   */\n  readonly secondaryColor = input<string>();\n\n  protected findIconDefinition(i: IconProp | IconDefinition): CoreIconDefinition | null {\n    const definition = super.findIconDefinition(i);\n\n    if (definition != null && !Array.isArray(definition.icon[4])) {\n      throw new Error(\n        'The specified icon does not appear to be a Duotone icon. ' +\n          'Check that you specified the correct style: ' +\n          `<fa-duotone-icon [icon]=\"['fad', '${definition.iconName}']\"></fa-duotone-icon> ` +\n          `or use: <fa-icon icon=\"${definition.iconName}\"></fa-icon> instead.`,\n      );\n    }\n\n    return definition;\n  }\n\n  protected buildParams(): IconParams {\n    const params = super.buildParams();\n\n    const swapOpacity = this.swapOpacity();\n    if (swapOpacity === true || swapOpacity === 'true') {\n      if (Array.isArray(params.classes)) {\n        params.classes.push('fa-swap-opacity');\n      } else if (typeof params.classes === 'string') {\n        params.classes = [params.classes, 'fa-swap-opacity'];\n      } else {\n        params.classes = ['fa-swap-opacity'];\n      }\n    }\n\n    if (params.styles == null) {\n      params.styles = {};\n    }\n    if (this.primaryOpacity() != null) {\n      params.styles['--fa-primary-opacity'] = this.primaryOpacity().toString();\n    }\n    if (this.secondaryOpacity() != null) {\n      params.styles['--fa-secondary-opacity'] = this.secondaryOpacity().toString();\n    }\n    if (this.primaryColor() != null) {\n      params.styles['--fa-primary-color'] = this.primaryColor();\n    }\n    if (this.secondaryColor() != null) {\n      params.styles['--fa-secondary-color'] = this.secondaryColor();\n    }\n\n    return params;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]},{"ruleId":"@angular-eslint/prefer-standalone-component","replacedBy":["prefer-standalone"]},{"ruleId":"@angular-eslint/sort-ngmodule-metadata-arrays","replacedBy":[]}]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-fontawesome/src/lib/icon/icon.component.spec.ts","messages":[{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":16,"column":5,"nodeType":"Decorator","messageId":"preferStandalone","endLine":20,"endColumn":7,"fix":{"range":[796,801],"text":"true"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":16,"column":5,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":20,"endColumn":7,"fix":{"range":[796,801],"text":"true"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":16,"column":5,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":20,"endColumn":7,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[66,757],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { toSignal } from '@angular/core/rxjs-interop';\nimport { faUser as faUserRegular } from '@fortawesome/free-regular-svg-icons';\nimport { faCircle, faUser } from '@fortawesome/free-solid-svg-icons';\nimport { Subject } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\nimport { initTest, queryByCss } from '../../testing/helpers';\nimport { FaConfig } from '../config';\nimport { FaIconLibrary } from '../icon-library';\nimport { IconProp } from '../types';\nimport { FaIconComponent } from './icon.component';\n\ndescribe('FaIconComponent', () => {\n  it('should render SVG icon', () => {\n    @Component({\n      changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":31,"column":5,"nodeType":"Decorator","messageId":"preferStandalone","endLine":35,"endColumn":7,"fix":{"range":[1184,1189],"text":"true"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":31,"column":5,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":35,"endColumn":7,"fix":{"range":[1184,1189],"text":"true"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":31,"column":5,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":35,"endColumn":7,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[66,1145],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { toSignal } from '@angular/core/rxjs-interop';\nimport { faUser as faUserRegular } from '@fortawesome/free-regular-svg-icons';\nimport { faCircle, faUser } from '@fortawesome/free-solid-svg-icons';\nimport { Subject } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\nimport { initTest, queryByCss } from '../../testing/helpers';\nimport { FaConfig } from '../config';\nimport { FaIconLibrary } from '../icon-library';\nimport { IconProp } from '../types';\nimport { FaIconComponent } from './icon.component';\n\ndescribe('FaIconComponent', () => {\n  it('should render SVG icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should support binding to boolean inputs', () => {\n    @Component({\n      changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":51,"column":5,"nodeType":"Decorator","messageId":"preferStandalone","endLine":55,"endColumn":7,"fix":{"range":[1834,1839],"text":"true"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":51,"column":5,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":55,"endColumn":7,"fix":{"range":[1834,1839],"text":"true"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":51,"column":5,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":55,"endColumn":7,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[66,1795],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { toSignal } from '@angular/core/rxjs-interop';\nimport { faUser as faUserRegular } from '@fortawesome/free-regular-svg-icons';\nimport { faCircle, faUser } from '@fortawesome/free-solid-svg-icons';\nimport { Subject } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\nimport { initTest, queryByCss } from '../../testing/helpers';\nimport { FaConfig } from '../config';\nimport { FaIconLibrary } from '../icon-library';\nimport { IconProp } from '../types';\nimport { FaIconComponent } from './icon.component';\n\ndescribe('FaIconComponent', () => {\n  it('should render SVG icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should support binding to boolean inputs', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" [inverse]=\"isInverse()\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      isInverse = signal(false);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-inverse')).toBeFalsy();\n\n    fixture.componentInstance.isInverse.set(true);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-inverse')).toBeTruthy();\n  });\n\n  it('should be able to create component dynamically', () => {\n    @Component({\n      changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":75,"column":5,"nodeType":"Decorator","messageId":"preferStandalone","endLine":79,"endColumn":7,"fix":{"range":[2543,2548],"text":"true"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":75,"column":5,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":79,"endColumn":7,"fix":{"range":[2543,2548],"text":"true"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":75,"column":5,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":79,"endColumn":7,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[66,2504],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { toSignal } from '@angular/core/rxjs-interop';\nimport { faUser as faUserRegular } from '@fortawesome/free-regular-svg-icons';\nimport { faCircle, faUser } from '@fortawesome/free-solid-svg-icons';\nimport { Subject } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\nimport { initTest, queryByCss } from '../../testing/helpers';\nimport { FaConfig } from '../config';\nimport { FaIconLibrary } from '../icon-library';\nimport { IconProp } from '../types';\nimport { FaIconComponent } from './icon.component';\n\ndescribe('FaIconComponent', () => {\n  it('should render SVG icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should support binding to boolean inputs', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" [inverse]=\"isInverse()\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      isInverse = signal(false);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-inverse')).toBeFalsy();\n\n    fixture.componentInstance.isInverse.set(true);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-inverse')).toBeTruthy();\n  });\n\n  it('should be able to create component dynamically', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<ng-container #host></ng-container>',\n    })\n    class HostComponent {\n      container = viewChild('host', { read: ViewContainerRef });\n\n      createIcon() {\n        const componentRef = this.container().createComponent(FaIconComponent);\n        componentRef.setInput('icon', faUser);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeFalsy();\n\n    fixture.componentInstance.createIcon();\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should be able to update icon programmatically', () => {\n    @Component({\n      changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":96,"column":5,"nodeType":"Decorator","messageId":"preferStandalone","endLine":100,"endColumn":7,"fix":{"range":[3258,3263],"text":"true"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":96,"column":5,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":100,"endColumn":7,"fix":{"range":[3258,3263],"text":"true"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":96,"column":5,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":100,"endColumn":7,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[66,3219],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { toSignal } from '@angular/core/rxjs-interop';\nimport { faUser as faUserRegular } from '@fortawesome/free-regular-svg-icons';\nimport { faCircle, faUser } from '@fortawesome/free-solid-svg-icons';\nimport { Subject } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\nimport { initTest, queryByCss } from '../../testing/helpers';\nimport { FaConfig } from '../config';\nimport { FaIconLibrary } from '../icon-library';\nimport { IconProp } from '../types';\nimport { FaIconComponent } from './icon.component';\n\ndescribe('FaIconComponent', () => {\n  it('should render SVG icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should support binding to boolean inputs', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" [inverse]=\"isInverse()\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      isInverse = signal(false);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-inverse')).toBeFalsy();\n\n    fixture.componentInstance.isInverse.set(true);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-inverse')).toBeTruthy();\n  });\n\n  it('should be able to create component dynamically', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<ng-container #host></ng-container>',\n    })\n    class HostComponent {\n      container = viewChild('host', { read: ViewContainerRef });\n\n      createIcon() {\n        const componentRef = this.container().createComponent(FaIconComponent);\n        componentRef.setInput('icon', faUser);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeFalsy();\n\n    fixture.componentInstance.createIcon();\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should be able to update icon programmatically', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\"></fa-icon>',\n    })\n    class HostComponent {\n      @ViewChild(FaIconComponent, { static: true }) iconComponent: FaIconComponent;\n\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-spin')).toBeFalsy();\n\n    fixture.componentInstance.iconComponent.animation.set('spin');\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-spin')).toBeTruthy();\n  });\n\n  it('should be possible to customize `role` attribute of the rendered SVG icon', () => {\n    @Component({\n      changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":111,"column":5,"nodeType":"Decorator","messageId":"preferStandalone","endLine":115,"endColumn":7,"fix":{"range":[3711,3716],"text":"true"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":111,"column":5,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":115,"endColumn":7,"fix":{"range":[3711,3716],"text":"true"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":111,"column":5,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":115,"endColumn":7,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[66,3672],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { toSignal } from '@angular/core/rxjs-interop';\nimport { faUser as faUserRegular } from '@fortawesome/free-regular-svg-icons';\nimport { faCircle, faUser } from '@fortawesome/free-solid-svg-icons';\nimport { Subject } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\nimport { initTest, queryByCss } from '../../testing/helpers';\nimport { FaConfig } from '../config';\nimport { FaIconLibrary } from '../icon-library';\nimport { IconProp } from '../types';\nimport { FaIconComponent } from './icon.component';\n\ndescribe('FaIconComponent', () => {\n  it('should render SVG icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should support binding to boolean inputs', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" [inverse]=\"isInverse()\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      isInverse = signal(false);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-inverse')).toBeFalsy();\n\n    fixture.componentInstance.isInverse.set(true);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-inverse')).toBeTruthy();\n  });\n\n  it('should be able to create component dynamically', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<ng-container #host></ng-container>',\n    })\n    class HostComponent {\n      container = viewChild('host', { read: ViewContainerRef });\n\n      createIcon() {\n        const componentRef = this.container().createComponent(FaIconComponent);\n        componentRef.setInput('icon', faUser);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeFalsy();\n\n    fixture.componentInstance.createIcon();\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should be able to update icon programmatically', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\"></fa-icon>',\n    })\n    class HostComponent {\n      @ViewChild(FaIconComponent, { static: true }) iconComponent: FaIconComponent;\n\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-spin')).toBeFalsy();\n\n    fixture.componentInstance.iconComponent.animation.set('spin');\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-spin')).toBeTruthy();\n  });\n\n  it('should be possible to customize `role` attribute of the rendered SVG icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" a11yRole=\"presentation\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').getAttribute('role')).toBe('presentation');\n  });\n\n  it('should throw an error when icon attribute is missing', () => {\n    @Component({\n      changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":125,"column":5,"nodeType":"Decorator","messageId":"preferStandalone","endLine":129,"endColumn":7,"fix":{"range":[4136,4141],"text":"true"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":125,"column":5,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":129,"endColumn":7,"fix":{"range":[4136,4141],"text":"true"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":125,"column":5,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":129,"endColumn":7,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[66,4097],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { toSignal } from '@angular/core/rxjs-interop';\nimport { faUser as faUserRegular } from '@fortawesome/free-regular-svg-icons';\nimport { faCircle, faUser } from '@fortawesome/free-solid-svg-icons';\nimport { Subject } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\nimport { initTest, queryByCss } from '../../testing/helpers';\nimport { FaConfig } from '../config';\nimport { FaIconLibrary } from '../icon-library';\nimport { IconProp } from '../types';\nimport { FaIconComponent } from './icon.component';\n\ndescribe('FaIconComponent', () => {\n  it('should render SVG icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should support binding to boolean inputs', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" [inverse]=\"isInverse()\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      isInverse = signal(false);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-inverse')).toBeFalsy();\n\n    fixture.componentInstance.isInverse.set(true);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-inverse')).toBeTruthy();\n  });\n\n  it('should be able to create component dynamically', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<ng-container #host></ng-container>',\n    })\n    class HostComponent {\n      container = viewChild('host', { read: ViewContainerRef });\n\n      createIcon() {\n        const componentRef = this.container().createComponent(FaIconComponent);\n        componentRef.setInput('icon', faUser);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeFalsy();\n\n    fixture.componentInstance.createIcon();\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should be able to update icon programmatically', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\"></fa-icon>',\n    })\n    class HostComponent {\n      @ViewChild(FaIconComponent, { static: true }) iconComponent: FaIconComponent;\n\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-spin')).toBeFalsy();\n\n    fixture.componentInstance.iconComponent.animation.set('spin');\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-spin')).toBeTruthy();\n  });\n\n  it('should be possible to customize `role` attribute of the rendered SVG icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" a11yRole=\"presentation\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').getAttribute('role')).toBe('presentation');\n  });\n\n  it('should throw an error when icon attribute is missing', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"undefined\"></fa-icon>',\n    })\n    class HostComponent {}\n\n    const fixture = initTest(HostComponent);\n    expect(() => fixture.detectChanges()).toThrow(\n      new Error('Property `icon` is required for `fa-icon`/`fa-duotone-icon` components.'),\n    );\n  });\n\n  it('should work with AsyncPipe and default value', () => {\n    @Component({\n      changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":148,"column":5,"nodeType":"Decorator","messageId":"preferStandalone","endLine":152,"endColumn":7,"fix":{"range":[4859,4864],"text":"true"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":148,"column":5,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":152,"endColumn":7,"fix":{"range":[4859,4864],"text":"true"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":148,"column":5,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":152,"endColumn":7,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[66,4820],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { toSignal } from '@angular/core/rxjs-interop';\nimport { faUser as faUserRegular } from '@fortawesome/free-regular-svg-icons';\nimport { faCircle, faUser } from '@fortawesome/free-solid-svg-icons';\nimport { Subject } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\nimport { initTest, queryByCss } from '../../testing/helpers';\nimport { FaConfig } from '../config';\nimport { FaIconLibrary } from '../icon-library';\nimport { IconProp } from '../types';\nimport { FaIconComponent } from './icon.component';\n\ndescribe('FaIconComponent', () => {\n  it('should render SVG icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should support binding to boolean inputs', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" [inverse]=\"isInverse()\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      isInverse = signal(false);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-inverse')).toBeFalsy();\n\n    fixture.componentInstance.isInverse.set(true);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-inverse')).toBeTruthy();\n  });\n\n  it('should be able to create component dynamically', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<ng-container #host></ng-container>',\n    })\n    class HostComponent {\n      container = viewChild('host', { read: ViewContainerRef });\n\n      createIcon() {\n        const componentRef = this.container().createComponent(FaIconComponent);\n        componentRef.setInput('icon', faUser);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeFalsy();\n\n    fixture.componentInstance.createIcon();\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should be able to update icon programmatically', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\"></fa-icon>',\n    })\n    class HostComponent {\n      @ViewChild(FaIconComponent, { static: true }) iconComponent: FaIconComponent;\n\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-spin')).toBeFalsy();\n\n    fixture.componentInstance.iconComponent.animation.set('spin');\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-spin')).toBeTruthy();\n  });\n\n  it('should be possible to customize `role` attribute of the rendered SVG icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" a11yRole=\"presentation\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').getAttribute('role')).toBe('presentation');\n  });\n\n  it('should throw an error when icon attribute is missing', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"undefined\"></fa-icon>',\n    })\n    class HostComponent {}\n\n    const fixture = initTest(HostComponent);\n    expect(() => fixture.detectChanges()).toThrow(\n      new Error('Property `icon` is required for `fa-icon`/`fa-duotone-icon` components.'),\n    );\n  });\n\n  it('should work with AsyncPipe and default value', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"icon | async\"></fa-icon>',\n    })\n    class HostComponent {\n      iconSubject = new Subject<IconProp>();\n\n      icon = this.iconSubject.pipe(startWith(faCircle));\n    }\n\n    const spy = spyOn(console, 'error');\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-circle')).toBeTruthy();\n    fixture.componentInstance.iconSubject.next(faUser);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-user')).toBeTruthy();\n    expect(spy).not.toHaveBeenCalledWith();\n  });\n\n  it('should work with stream converted to toSignal and default value', () => {\n    @Component({\n      changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":171,"column":5,"nodeType":"Decorator","messageId":"preferStandalone","endLine":175,"endColumn":7,"fix":{"range":[5554,5559],"text":"true"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":171,"column":5,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":175,"endColumn":7,"fix":{"range":[5554,5559],"text":"true"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":171,"column":5,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":175,"endColumn":7,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[66,5515],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { toSignal } from '@angular/core/rxjs-interop';\nimport { faUser as faUserRegular } from '@fortawesome/free-regular-svg-icons';\nimport { faCircle, faUser } from '@fortawesome/free-solid-svg-icons';\nimport { Subject } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\nimport { initTest, queryByCss } from '../../testing/helpers';\nimport { FaConfig } from '../config';\nimport { FaIconLibrary } from '../icon-library';\nimport { IconProp } from '../types';\nimport { FaIconComponent } from './icon.component';\n\ndescribe('FaIconComponent', () => {\n  it('should render SVG icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should support binding to boolean inputs', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" [inverse]=\"isInverse()\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      isInverse = signal(false);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-inverse')).toBeFalsy();\n\n    fixture.componentInstance.isInverse.set(true);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-inverse')).toBeTruthy();\n  });\n\n  it('should be able to create component dynamically', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<ng-container #host></ng-container>',\n    })\n    class HostComponent {\n      container = viewChild('host', { read: ViewContainerRef });\n\n      createIcon() {\n        const componentRef = this.container().createComponent(FaIconComponent);\n        componentRef.setInput('icon', faUser);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeFalsy();\n\n    fixture.componentInstance.createIcon();\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should be able to update icon programmatically', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\"></fa-icon>',\n    })\n    class HostComponent {\n      @ViewChild(FaIconComponent, { static: true }) iconComponent: FaIconComponent;\n\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-spin')).toBeFalsy();\n\n    fixture.componentInstance.iconComponent.animation.set('spin');\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-spin')).toBeTruthy();\n  });\n\n  it('should be possible to customize `role` attribute of the rendered SVG icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" a11yRole=\"presentation\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').getAttribute('role')).toBe('presentation');\n  });\n\n  it('should throw an error when icon attribute is missing', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"undefined\"></fa-icon>',\n    })\n    class HostComponent {}\n\n    const fixture = initTest(HostComponent);\n    expect(() => fixture.detectChanges()).toThrow(\n      new Error('Property `icon` is required for `fa-icon`/`fa-duotone-icon` components.'),\n    );\n  });\n\n  it('should work with AsyncPipe and default value', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"icon | async\"></fa-icon>',\n    })\n    class HostComponent {\n      iconSubject = new Subject<IconProp>();\n\n      icon = this.iconSubject.pipe(startWith(faCircle));\n    }\n\n    const spy = spyOn(console, 'error');\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-circle')).toBeTruthy();\n    fixture.componentInstance.iconSubject.next(faUser);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-user')).toBeTruthy();\n    expect(spy).not.toHaveBeenCalledWith();\n  });\n\n  it('should work with stream converted to toSignal and default value', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"icon()\"></fa-icon>',\n    })\n    class HostComponent {\n      iconSubject = new Subject<IconProp>();\n\n      icon = toSignal(this.iconSubject.pipe(startWith(faCircle)));\n    }\n\n    const spy = spyOn(console, 'error');\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-circle')).toBeTruthy();\n    fixture.componentInstance.iconSubject.next(faUser);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-user')).toBeTruthy();\n    expect(spy).not.toHaveBeenCalledWith();\n  });\n\n  it('should render a <title> element', () => {\n    @Component({\n      changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":187,"column":5,"nodeType":"Decorator","messageId":"preferStandalone","endLine":191,"endColumn":7,"fix":{"range":[6097,6102],"text":"true"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":187,"column":5,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":191,"endColumn":7,"fix":{"range":[6097,6102],"text":"true"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":187,"column":5,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":191,"endColumn":7,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[66,6058],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { toSignal } from '@angular/core/rxjs-interop';\nimport { faUser as faUserRegular } from '@fortawesome/free-regular-svg-icons';\nimport { faCircle, faUser } from '@fortawesome/free-solid-svg-icons';\nimport { Subject } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\nimport { initTest, queryByCss } from '../../testing/helpers';\nimport { FaConfig } from '../config';\nimport { FaIconLibrary } from '../icon-library';\nimport { IconProp } from '../types';\nimport { FaIconComponent } from './icon.component';\n\ndescribe('FaIconComponent', () => {\n  it('should render SVG icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should support binding to boolean inputs', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" [inverse]=\"isInverse()\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      isInverse = signal(false);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-inverse')).toBeFalsy();\n\n    fixture.componentInstance.isInverse.set(true);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-inverse')).toBeTruthy();\n  });\n\n  it('should be able to create component dynamically', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<ng-container #host></ng-container>',\n    })\n    class HostComponent {\n      container = viewChild('host', { read: ViewContainerRef });\n\n      createIcon() {\n        const componentRef = this.container().createComponent(FaIconComponent);\n        componentRef.setInput('icon', faUser);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeFalsy();\n\n    fixture.componentInstance.createIcon();\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should be able to update icon programmatically', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\"></fa-icon>',\n    })\n    class HostComponent {\n      @ViewChild(FaIconComponent, { static: true }) iconComponent: FaIconComponent;\n\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-spin')).toBeFalsy();\n\n    fixture.componentInstance.iconComponent.animation.set('spin');\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-spin')).toBeTruthy();\n  });\n\n  it('should be possible to customize `role` attribute of the rendered SVG icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" a11yRole=\"presentation\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').getAttribute('role')).toBe('presentation');\n  });\n\n  it('should throw an error when icon attribute is missing', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"undefined\"></fa-icon>',\n    })\n    class HostComponent {}\n\n    const fixture = initTest(HostComponent);\n    expect(() => fixture.detectChanges()).toThrow(\n      new Error('Property `icon` is required for `fa-icon`/`fa-duotone-icon` components.'),\n    );\n  });\n\n  it('should work with AsyncPipe and default value', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"icon | async\"></fa-icon>',\n    })\n    class HostComponent {\n      iconSubject = new Subject<IconProp>();\n\n      icon = this.iconSubject.pipe(startWith(faCircle));\n    }\n\n    const spy = spyOn(console, 'error');\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-circle')).toBeTruthy();\n    fixture.componentInstance.iconSubject.next(faUser);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-user')).toBeTruthy();\n    expect(spy).not.toHaveBeenCalledWith();\n  });\n\n  it('should work with stream converted to toSignal and default value', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"icon()\"></fa-icon>',\n    })\n    class HostComponent {\n      iconSubject = new Subject<IconProp>();\n\n      icon = toSignal(this.iconSubject.pipe(startWith(faCircle)));\n    }\n\n    const spy = spyOn(console, 'error');\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-circle')).toBeTruthy();\n    fixture.componentInstance.iconSubject.next(faUser);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-user')).toBeTruthy();\n    expect(spy).not.toHaveBeenCalledWith();\n  });\n\n  it('should render a <title> element', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" title=\"User John Smith\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg > title')).toBeTruthy();\n    expect(queryByCss(fixture, 'svg > title').innerHTML).toBe('User John Smith');\n  });\n\n  it('should have title attribute, when title input is set using Angular binding syntax', () => {\n    @Component({\n      changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":203,"column":5,"nodeType":"Decorator","messageId":"preferStandalone","endLine":207,"endColumn":7,"fix":{"range":[6595,6600],"text":"true"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":203,"column":5,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":207,"endColumn":7,"fix":{"range":[6595,6600],"text":"true"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":203,"column":5,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":207,"endColumn":7,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[66,6556],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { toSignal } from '@angular/core/rxjs-interop';\nimport { faUser as faUserRegular } from '@fortawesome/free-regular-svg-icons';\nimport { faCircle, faUser } from '@fortawesome/free-solid-svg-icons';\nimport { Subject } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\nimport { initTest, queryByCss } from '../../testing/helpers';\nimport { FaConfig } from '../config';\nimport { FaIconLibrary } from '../icon-library';\nimport { IconProp } from '../types';\nimport { FaIconComponent } from './icon.component';\n\ndescribe('FaIconComponent', () => {\n  it('should render SVG icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should support binding to boolean inputs', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" [inverse]=\"isInverse()\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      isInverse = signal(false);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-inverse')).toBeFalsy();\n\n    fixture.componentInstance.isInverse.set(true);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-inverse')).toBeTruthy();\n  });\n\n  it('should be able to create component dynamically', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<ng-container #host></ng-container>',\n    })\n    class HostComponent {\n      container = viewChild('host', { read: ViewContainerRef });\n\n      createIcon() {\n        const componentRef = this.container().createComponent(FaIconComponent);\n        componentRef.setInput('icon', faUser);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeFalsy();\n\n    fixture.componentInstance.createIcon();\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should be able to update icon programmatically', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\"></fa-icon>',\n    })\n    class HostComponent {\n      @ViewChild(FaIconComponent, { static: true }) iconComponent: FaIconComponent;\n\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-spin')).toBeFalsy();\n\n    fixture.componentInstance.iconComponent.animation.set('spin');\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-spin')).toBeTruthy();\n  });\n\n  it('should be possible to customize `role` attribute of the rendered SVG icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" a11yRole=\"presentation\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').getAttribute('role')).toBe('presentation');\n  });\n\n  it('should throw an error when icon attribute is missing', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"undefined\"></fa-icon>',\n    })\n    class HostComponent {}\n\n    const fixture = initTest(HostComponent);\n    expect(() => fixture.detectChanges()).toThrow(\n      new Error('Property `icon` is required for `fa-icon`/`fa-duotone-icon` components.'),\n    );\n  });\n\n  it('should work with AsyncPipe and default value', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"icon | async\"></fa-icon>',\n    })\n    class HostComponent {\n      iconSubject = new Subject<IconProp>();\n\n      icon = this.iconSubject.pipe(startWith(faCircle));\n    }\n\n    const spy = spyOn(console, 'error');\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-circle')).toBeTruthy();\n    fixture.componentInstance.iconSubject.next(faUser);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-user')).toBeTruthy();\n    expect(spy).not.toHaveBeenCalledWith();\n  });\n\n  it('should work with stream converted to toSignal and default value', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"icon()\"></fa-icon>',\n    })\n    class HostComponent {\n      iconSubject = new Subject<IconProp>();\n\n      icon = toSignal(this.iconSubject.pipe(startWith(faCircle)));\n    }\n\n    const spy = spyOn(console, 'error');\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-circle')).toBeTruthy();\n    fixture.componentInstance.iconSubject.next(faUser);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-user')).toBeTruthy();\n    expect(spy).not.toHaveBeenCalledWith();\n  });\n\n  it('should render a <title> element', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" title=\"User John Smith\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg > title')).toBeTruthy();\n    expect(queryByCss(fixture, 'svg > title').innerHTML).toBe('User John Smith');\n  });\n\n  it('should have title attribute, when title input is set using Angular binding syntax', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: ` <fa-icon [icon]=\"faUser()\" [title]=\"'User John Smith'\"></fa-icon> `,\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n    expect(queryByCss(fixture, 'fa-icon').getAttribute('title')).toBe('User John Smith');\n  });\n\n  it('should use default icon prefix', () => {\n    @Component({\n      changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":220,"column":5,"nodeType":"Decorator","messageId":"preferStandalone","endLine":224,"endColumn":7,"fix":{"range":[7091,7096],"text":"true"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":220,"column":5,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":224,"endColumn":7,"fix":{"range":[7091,7096],"text":"true"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":220,"column":5,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":224,"endColumn":7,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[66,7052],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { toSignal } from '@angular/core/rxjs-interop';\nimport { faUser as faUserRegular } from '@fortawesome/free-regular-svg-icons';\nimport { faCircle, faUser } from '@fortawesome/free-solid-svg-icons';\nimport { Subject } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\nimport { initTest, queryByCss } from '../../testing/helpers';\nimport { FaConfig } from '../config';\nimport { FaIconLibrary } from '../icon-library';\nimport { IconProp } from '../types';\nimport { FaIconComponent } from './icon.component';\n\ndescribe('FaIconComponent', () => {\n  it('should render SVG icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should support binding to boolean inputs', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" [inverse]=\"isInverse()\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      isInverse = signal(false);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-inverse')).toBeFalsy();\n\n    fixture.componentInstance.isInverse.set(true);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-inverse')).toBeTruthy();\n  });\n\n  it('should be able to create component dynamically', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<ng-container #host></ng-container>',\n    })\n    class HostComponent {\n      container = viewChild('host', { read: ViewContainerRef });\n\n      createIcon() {\n        const componentRef = this.container().createComponent(FaIconComponent);\n        componentRef.setInput('icon', faUser);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeFalsy();\n\n    fixture.componentInstance.createIcon();\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should be able to update icon programmatically', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\"></fa-icon>',\n    })\n    class HostComponent {\n      @ViewChild(FaIconComponent, { static: true }) iconComponent: FaIconComponent;\n\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-spin')).toBeFalsy();\n\n    fixture.componentInstance.iconComponent.animation.set('spin');\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-spin')).toBeTruthy();\n  });\n\n  it('should be possible to customize `role` attribute of the rendered SVG icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" a11yRole=\"presentation\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').getAttribute('role')).toBe('presentation');\n  });\n\n  it('should throw an error when icon attribute is missing', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"undefined\"></fa-icon>',\n    })\n    class HostComponent {}\n\n    const fixture = initTest(HostComponent);\n    expect(() => fixture.detectChanges()).toThrow(\n      new Error('Property `icon` is required for `fa-icon`/`fa-duotone-icon` components.'),\n    );\n  });\n\n  it('should work with AsyncPipe and default value', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"icon | async\"></fa-icon>',\n    })\n    class HostComponent {\n      iconSubject = new Subject<IconProp>();\n\n      icon = this.iconSubject.pipe(startWith(faCircle));\n    }\n\n    const spy = spyOn(console, 'error');\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-circle')).toBeTruthy();\n    fixture.componentInstance.iconSubject.next(faUser);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-user')).toBeTruthy();\n    expect(spy).not.toHaveBeenCalledWith();\n  });\n\n  it('should work with stream converted to toSignal and default value', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"icon()\"></fa-icon>',\n    })\n    class HostComponent {\n      iconSubject = new Subject<IconProp>();\n\n      icon = toSignal(this.iconSubject.pipe(startWith(faCircle)));\n    }\n\n    const spy = spyOn(console, 'error');\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-circle')).toBeTruthy();\n    fixture.componentInstance.iconSubject.next(faUser);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-user')).toBeTruthy();\n    expect(spy).not.toHaveBeenCalledWith();\n  });\n\n  it('should render a <title> element', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" title=\"User John Smith\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg > title')).toBeTruthy();\n    expect(queryByCss(fixture, 'svg > title').innerHTML).toBe('User John Smith');\n  });\n\n  it('should have title attribute, when title input is set using Angular binding syntax', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: ` <fa-icon [icon]=\"faUser()\" [title]=\"'User John Smith'\"></fa-icon> `,\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n    expect(queryByCss(fixture, 'fa-icon').getAttribute('title')).toBe('User John Smith');\n  });\n\n  it('should use default icon prefix', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').getAttribute('data-prefix')).toEqual('fas');\n  });\n\n  it('should be able to override default icon prefix', () => {\n    @Component({\n      changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":239,"column":5,"nodeType":"Decorator","messageId":"preferStandalone","endLine":243,"endColumn":7,"fix":{"range":[7657,7662],"text":"true"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":239,"column":5,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":243,"endColumn":7,"fix":{"range":[7657,7662],"text":"true"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":239,"column":5,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":243,"endColumn":7,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[66,7618],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { toSignal } from '@angular/core/rxjs-interop';\nimport { faUser as faUserRegular } from '@fortawesome/free-regular-svg-icons';\nimport { faCircle, faUser } from '@fortawesome/free-solid-svg-icons';\nimport { Subject } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\nimport { initTest, queryByCss } from '../../testing/helpers';\nimport { FaConfig } from '../config';\nimport { FaIconLibrary } from '../icon-library';\nimport { IconProp } from '../types';\nimport { FaIconComponent } from './icon.component';\n\ndescribe('FaIconComponent', () => {\n  it('should render SVG icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should support binding to boolean inputs', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" [inverse]=\"isInverse()\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      isInverse = signal(false);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-inverse')).toBeFalsy();\n\n    fixture.componentInstance.isInverse.set(true);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-inverse')).toBeTruthy();\n  });\n\n  it('should be able to create component dynamically', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<ng-container #host></ng-container>',\n    })\n    class HostComponent {\n      container = viewChild('host', { read: ViewContainerRef });\n\n      createIcon() {\n        const componentRef = this.container().createComponent(FaIconComponent);\n        componentRef.setInput('icon', faUser);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeFalsy();\n\n    fixture.componentInstance.createIcon();\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should be able to update icon programmatically', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\"></fa-icon>',\n    })\n    class HostComponent {\n      @ViewChild(FaIconComponent, { static: true }) iconComponent: FaIconComponent;\n\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-spin')).toBeFalsy();\n\n    fixture.componentInstance.iconComponent.animation.set('spin');\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-spin')).toBeTruthy();\n  });\n\n  it('should be possible to customize `role` attribute of the rendered SVG icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" a11yRole=\"presentation\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').getAttribute('role')).toBe('presentation');\n  });\n\n  it('should throw an error when icon attribute is missing', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"undefined\"></fa-icon>',\n    })\n    class HostComponent {}\n\n    const fixture = initTest(HostComponent);\n    expect(() => fixture.detectChanges()).toThrow(\n      new Error('Property `icon` is required for `fa-icon`/`fa-duotone-icon` components.'),\n    );\n  });\n\n  it('should work with AsyncPipe and default value', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"icon | async\"></fa-icon>',\n    })\n    class HostComponent {\n      iconSubject = new Subject<IconProp>();\n\n      icon = this.iconSubject.pipe(startWith(faCircle));\n    }\n\n    const spy = spyOn(console, 'error');\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-circle')).toBeTruthy();\n    fixture.componentInstance.iconSubject.next(faUser);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-user')).toBeTruthy();\n    expect(spy).not.toHaveBeenCalledWith();\n  });\n\n  it('should work with stream converted to toSignal and default value', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"icon()\"></fa-icon>',\n    })\n    class HostComponent {\n      iconSubject = new Subject<IconProp>();\n\n      icon = toSignal(this.iconSubject.pipe(startWith(faCircle)));\n    }\n\n    const spy = spyOn(console, 'error');\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-circle')).toBeTruthy();\n    fixture.componentInstance.iconSubject.next(faUser);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-user')).toBeTruthy();\n    expect(spy).not.toHaveBeenCalledWith();\n  });\n\n  it('should render a <title> element', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" title=\"User John Smith\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg > title')).toBeTruthy();\n    expect(queryByCss(fixture, 'svg > title').innerHTML).toBe('User John Smith');\n  });\n\n  it('should have title attribute, when title input is set using Angular binding syntax', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: ` <fa-icon [icon]=\"faUser()\" [title]=\"'User John Smith'\"></fa-icon> `,\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n    expect(queryByCss(fixture, 'fa-icon').getAttribute('title')).toBe('User John Smith');\n  });\n\n  it('should use default icon prefix', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').getAttribute('data-prefix')).toEqual('fas');\n  });\n\n  it('should be able to override default icon prefix', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.defaultPrefix = 'far';\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').getAttribute('data-prefix')).toEqual('far');\n  });\n\n  it('should have no fixed width by default', () => {\n    @Component({\n      changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":256,"column":5,"nodeType":"Decorator","messageId":"preferStandalone","endLine":260,"endColumn":7,"fix":{"range":[8132,8137],"text":"true"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":256,"column":5,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":260,"endColumn":7,"fix":{"range":[8132,8137],"text":"true"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":256,"column":5,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":260,"endColumn":7,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[66,8093],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { toSignal } from '@angular/core/rxjs-interop';\nimport { faUser as faUserRegular } from '@fortawesome/free-regular-svg-icons';\nimport { faCircle, faUser } from '@fortawesome/free-solid-svg-icons';\nimport { Subject } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\nimport { initTest, queryByCss } from '../../testing/helpers';\nimport { FaConfig } from '../config';\nimport { FaIconLibrary } from '../icon-library';\nimport { IconProp } from '../types';\nimport { FaIconComponent } from './icon.component';\n\ndescribe('FaIconComponent', () => {\n  it('should render SVG icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should support binding to boolean inputs', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" [inverse]=\"isInverse()\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      isInverse = signal(false);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-inverse')).toBeFalsy();\n\n    fixture.componentInstance.isInverse.set(true);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-inverse')).toBeTruthy();\n  });\n\n  it('should be able to create component dynamically', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<ng-container #host></ng-container>',\n    })\n    class HostComponent {\n      container = viewChild('host', { read: ViewContainerRef });\n\n      createIcon() {\n        const componentRef = this.container().createComponent(FaIconComponent);\n        componentRef.setInput('icon', faUser);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeFalsy();\n\n    fixture.componentInstance.createIcon();\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should be able to update icon programmatically', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\"></fa-icon>',\n    })\n    class HostComponent {\n      @ViewChild(FaIconComponent, { static: true }) iconComponent: FaIconComponent;\n\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-spin')).toBeFalsy();\n\n    fixture.componentInstance.iconComponent.animation.set('spin');\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-spin')).toBeTruthy();\n  });\n\n  it('should be possible to customize `role` attribute of the rendered SVG icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" a11yRole=\"presentation\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').getAttribute('role')).toBe('presentation');\n  });\n\n  it('should throw an error when icon attribute is missing', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"undefined\"></fa-icon>',\n    })\n    class HostComponent {}\n\n    const fixture = initTest(HostComponent);\n    expect(() => fixture.detectChanges()).toThrow(\n      new Error('Property `icon` is required for `fa-icon`/`fa-duotone-icon` components.'),\n    );\n  });\n\n  it('should work with AsyncPipe and default value', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"icon | async\"></fa-icon>',\n    })\n    class HostComponent {\n      iconSubject = new Subject<IconProp>();\n\n      icon = this.iconSubject.pipe(startWith(faCircle));\n    }\n\n    const spy = spyOn(console, 'error');\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-circle')).toBeTruthy();\n    fixture.componentInstance.iconSubject.next(faUser);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-user')).toBeTruthy();\n    expect(spy).not.toHaveBeenCalledWith();\n  });\n\n  it('should work with stream converted to toSignal and default value', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"icon()\"></fa-icon>',\n    })\n    class HostComponent {\n      iconSubject = new Subject<IconProp>();\n\n      icon = toSignal(this.iconSubject.pipe(startWith(faCircle)));\n    }\n\n    const spy = spyOn(console, 'error');\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-circle')).toBeTruthy();\n    fixture.componentInstance.iconSubject.next(faUser);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-user')).toBeTruthy();\n    expect(spy).not.toHaveBeenCalledWith();\n  });\n\n  it('should render a <title> element', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" title=\"User John Smith\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg > title')).toBeTruthy();\n    expect(queryByCss(fixture, 'svg > title').innerHTML).toBe('User John Smith');\n  });\n\n  it('should have title attribute, when title input is set using Angular binding syntax', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: ` <fa-icon [icon]=\"faUser()\" [title]=\"'User John Smith'\"></fa-icon> `,\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n    expect(queryByCss(fixture, 'fa-icon').getAttribute('title')).toBe('User John Smith');\n  });\n\n  it('should use default icon prefix', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').getAttribute('data-prefix')).toEqual('fas');\n  });\n\n  it('should be able to override default icon prefix', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.defaultPrefix = 'far';\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').getAttribute('data-prefix')).toEqual('far');\n  });\n\n  it('should have no fixed width by default', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeFalsy();\n  });\n\n  it('should be able to set fixed width with default config', () => {\n    @Component({\n      changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":275,"column":5,"nodeType":"Decorator","messageId":"preferStandalone","endLine":279,"endColumn":7,"fix":{"range":[8674,8679],"text":"true"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":275,"column":5,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":279,"endColumn":7,"fix":{"range":[8674,8679],"text":"true"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":275,"column":5,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":279,"endColumn":7,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[66,8635],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { toSignal } from '@angular/core/rxjs-interop';\nimport { faUser as faUserRegular } from '@fortawesome/free-regular-svg-icons';\nimport { faCircle, faUser } from '@fortawesome/free-solid-svg-icons';\nimport { Subject } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\nimport { initTest, queryByCss } from '../../testing/helpers';\nimport { FaConfig } from '../config';\nimport { FaIconLibrary } from '../icon-library';\nimport { IconProp } from '../types';\nimport { FaIconComponent } from './icon.component';\n\ndescribe('FaIconComponent', () => {\n  it('should render SVG icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should support binding to boolean inputs', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" [inverse]=\"isInverse()\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      isInverse = signal(false);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-inverse')).toBeFalsy();\n\n    fixture.componentInstance.isInverse.set(true);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-inverse')).toBeTruthy();\n  });\n\n  it('should be able to create component dynamically', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<ng-container #host></ng-container>',\n    })\n    class HostComponent {\n      container = viewChild('host', { read: ViewContainerRef });\n\n      createIcon() {\n        const componentRef = this.container().createComponent(FaIconComponent);\n        componentRef.setInput('icon', faUser);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeFalsy();\n\n    fixture.componentInstance.createIcon();\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should be able to update icon programmatically', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\"></fa-icon>',\n    })\n    class HostComponent {\n      @ViewChild(FaIconComponent, { static: true }) iconComponent: FaIconComponent;\n\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-spin')).toBeFalsy();\n\n    fixture.componentInstance.iconComponent.animation.set('spin');\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-spin')).toBeTruthy();\n  });\n\n  it('should be possible to customize `role` attribute of the rendered SVG icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" a11yRole=\"presentation\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').getAttribute('role')).toBe('presentation');\n  });\n\n  it('should throw an error when icon attribute is missing', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"undefined\"></fa-icon>',\n    })\n    class HostComponent {}\n\n    const fixture = initTest(HostComponent);\n    expect(() => fixture.detectChanges()).toThrow(\n      new Error('Property `icon` is required for `fa-icon`/`fa-duotone-icon` components.'),\n    );\n  });\n\n  it('should work with AsyncPipe and default value', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"icon | async\"></fa-icon>',\n    })\n    class HostComponent {\n      iconSubject = new Subject<IconProp>();\n\n      icon = this.iconSubject.pipe(startWith(faCircle));\n    }\n\n    const spy = spyOn(console, 'error');\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-circle')).toBeTruthy();\n    fixture.componentInstance.iconSubject.next(faUser);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-user')).toBeTruthy();\n    expect(spy).not.toHaveBeenCalledWith();\n  });\n\n  it('should work with stream converted to toSignal and default value', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"icon()\"></fa-icon>',\n    })\n    class HostComponent {\n      iconSubject = new Subject<IconProp>();\n\n      icon = toSignal(this.iconSubject.pipe(startWith(faCircle)));\n    }\n\n    const spy = spyOn(console, 'error');\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-circle')).toBeTruthy();\n    fixture.componentInstance.iconSubject.next(faUser);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-user')).toBeTruthy();\n    expect(spy).not.toHaveBeenCalledWith();\n  });\n\n  it('should render a <title> element', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" title=\"User John Smith\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg > title')).toBeTruthy();\n    expect(queryByCss(fixture, 'svg > title').innerHTML).toBe('User John Smith');\n  });\n\n  it('should have title attribute, when title input is set using Angular binding syntax', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: ` <fa-icon [icon]=\"faUser()\" [title]=\"'User John Smith'\"></fa-icon> `,\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n    expect(queryByCss(fixture, 'fa-icon').getAttribute('title')).toBe('User John Smith');\n  });\n\n  it('should use default icon prefix', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').getAttribute('data-prefix')).toEqual('fas');\n  });\n\n  it('should be able to override default icon prefix', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.defaultPrefix = 'far';\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').getAttribute('data-prefix')).toEqual('far');\n  });\n\n  it('should have no fixed width by default', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeFalsy();\n  });\n\n  it('should be able to set fixed width with default config', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.fixedWidth = true;\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeTruthy();\n  });\n\n  it('should be able to set fixed width explicitly', () => {\n    @Component({\n      changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":295,"column":5,"nodeType":"Decorator","messageId":"preferStandalone","endLine":299,"endColumn":7,"fix":{"range":[9290,9295],"text":"true"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":295,"column":5,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":299,"endColumn":7,"fix":{"range":[9290,9295],"text":"true"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":295,"column":5,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":299,"endColumn":7,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[66,9251],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { toSignal } from '@angular/core/rxjs-interop';\nimport { faUser as faUserRegular } from '@fortawesome/free-regular-svg-icons';\nimport { faCircle, faUser } from '@fortawesome/free-solid-svg-icons';\nimport { Subject } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\nimport { initTest, queryByCss } from '../../testing/helpers';\nimport { FaConfig } from '../config';\nimport { FaIconLibrary } from '../icon-library';\nimport { IconProp } from '../types';\nimport { FaIconComponent } from './icon.component';\n\ndescribe('FaIconComponent', () => {\n  it('should render SVG icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should support binding to boolean inputs', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" [inverse]=\"isInverse()\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      isInverse = signal(false);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-inverse')).toBeFalsy();\n\n    fixture.componentInstance.isInverse.set(true);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-inverse')).toBeTruthy();\n  });\n\n  it('should be able to create component dynamically', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<ng-container #host></ng-container>',\n    })\n    class HostComponent {\n      container = viewChild('host', { read: ViewContainerRef });\n\n      createIcon() {\n        const componentRef = this.container().createComponent(FaIconComponent);\n        componentRef.setInput('icon', faUser);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeFalsy();\n\n    fixture.componentInstance.createIcon();\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should be able to update icon programmatically', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\"></fa-icon>',\n    })\n    class HostComponent {\n      @ViewChild(FaIconComponent, { static: true }) iconComponent: FaIconComponent;\n\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-spin')).toBeFalsy();\n\n    fixture.componentInstance.iconComponent.animation.set('spin');\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-spin')).toBeTruthy();\n  });\n\n  it('should be possible to customize `role` attribute of the rendered SVG icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" a11yRole=\"presentation\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').getAttribute('role')).toBe('presentation');\n  });\n\n  it('should throw an error when icon attribute is missing', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"undefined\"></fa-icon>',\n    })\n    class HostComponent {}\n\n    const fixture = initTest(HostComponent);\n    expect(() => fixture.detectChanges()).toThrow(\n      new Error('Property `icon` is required for `fa-icon`/`fa-duotone-icon` components.'),\n    );\n  });\n\n  it('should work with AsyncPipe and default value', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"icon | async\"></fa-icon>',\n    })\n    class HostComponent {\n      iconSubject = new Subject<IconProp>();\n\n      icon = this.iconSubject.pipe(startWith(faCircle));\n    }\n\n    const spy = spyOn(console, 'error');\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-circle')).toBeTruthy();\n    fixture.componentInstance.iconSubject.next(faUser);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-user')).toBeTruthy();\n    expect(spy).not.toHaveBeenCalledWith();\n  });\n\n  it('should work with stream converted to toSignal and default value', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"icon()\"></fa-icon>',\n    })\n    class HostComponent {\n      iconSubject = new Subject<IconProp>();\n\n      icon = toSignal(this.iconSubject.pipe(startWith(faCircle)));\n    }\n\n    const spy = spyOn(console, 'error');\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-circle')).toBeTruthy();\n    fixture.componentInstance.iconSubject.next(faUser);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-user')).toBeTruthy();\n    expect(spy).not.toHaveBeenCalledWith();\n  });\n\n  it('should render a <title> element', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" title=\"User John Smith\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg > title')).toBeTruthy();\n    expect(queryByCss(fixture, 'svg > title').innerHTML).toBe('User John Smith');\n  });\n\n  it('should have title attribute, when title input is set using Angular binding syntax', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: ` <fa-icon [icon]=\"faUser()\" [title]=\"'User John Smith'\"></fa-icon> `,\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n    expect(queryByCss(fixture, 'fa-icon').getAttribute('title')).toBe('User John Smith');\n  });\n\n  it('should use default icon prefix', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').getAttribute('data-prefix')).toEqual('fas');\n  });\n\n  it('should be able to override default icon prefix', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.defaultPrefix = 'far';\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').getAttribute('data-prefix')).toEqual('far');\n  });\n\n  it('should have no fixed width by default', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeFalsy();\n  });\n\n  it('should be able to set fixed width with default config', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.fixedWidth = true;\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeTruthy();\n  });\n\n  it('should be able to set fixed width explicitly', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\" [fixedWidth]=\"fixedWidth()\"></fa-icon>',\n    })\n    class HostComponent {\n      fixedWidth = signal(true);\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.fixedWidth = false;\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeTruthy();\n  });\n\n  it('should be able to override global fixed width explicitly', () => {\n    @Component({\n      changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":315,"column":5,"nodeType":"Decorator","messageId":"preferStandalone","endLine":319,"endColumn":7,"fix":{"range":[9897,9902],"text":"true"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":315,"column":5,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":319,"endColumn":7,"fix":{"range":[9897,9902],"text":"true"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":315,"column":5,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":319,"endColumn":7,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[66,9858],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { toSignal } from '@angular/core/rxjs-interop';\nimport { faUser as faUserRegular } from '@fortawesome/free-regular-svg-icons';\nimport { faCircle, faUser } from '@fortawesome/free-solid-svg-icons';\nimport { Subject } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\nimport { initTest, queryByCss } from '../../testing/helpers';\nimport { FaConfig } from '../config';\nimport { FaIconLibrary } from '../icon-library';\nimport { IconProp } from '../types';\nimport { FaIconComponent } from './icon.component';\n\ndescribe('FaIconComponent', () => {\n  it('should render SVG icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should support binding to boolean inputs', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" [inverse]=\"isInverse()\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      isInverse = signal(false);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-inverse')).toBeFalsy();\n\n    fixture.componentInstance.isInverse.set(true);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-inverse')).toBeTruthy();\n  });\n\n  it('should be able to create component dynamically', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<ng-container #host></ng-container>',\n    })\n    class HostComponent {\n      container = viewChild('host', { read: ViewContainerRef });\n\n      createIcon() {\n        const componentRef = this.container().createComponent(FaIconComponent);\n        componentRef.setInput('icon', faUser);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeFalsy();\n\n    fixture.componentInstance.createIcon();\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should be able to update icon programmatically', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\"></fa-icon>',\n    })\n    class HostComponent {\n      @ViewChild(FaIconComponent, { static: true }) iconComponent: FaIconComponent;\n\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-spin')).toBeFalsy();\n\n    fixture.componentInstance.iconComponent.animation.set('spin');\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-spin')).toBeTruthy();\n  });\n\n  it('should be possible to customize `role` attribute of the rendered SVG icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" a11yRole=\"presentation\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').getAttribute('role')).toBe('presentation');\n  });\n\n  it('should throw an error when icon attribute is missing', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"undefined\"></fa-icon>',\n    })\n    class HostComponent {}\n\n    const fixture = initTest(HostComponent);\n    expect(() => fixture.detectChanges()).toThrow(\n      new Error('Property `icon` is required for `fa-icon`/`fa-duotone-icon` components.'),\n    );\n  });\n\n  it('should work with AsyncPipe and default value', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"icon | async\"></fa-icon>',\n    })\n    class HostComponent {\n      iconSubject = new Subject<IconProp>();\n\n      icon = this.iconSubject.pipe(startWith(faCircle));\n    }\n\n    const spy = spyOn(console, 'error');\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-circle')).toBeTruthy();\n    fixture.componentInstance.iconSubject.next(faUser);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-user')).toBeTruthy();\n    expect(spy).not.toHaveBeenCalledWith();\n  });\n\n  it('should work with stream converted to toSignal and default value', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"icon()\"></fa-icon>',\n    })\n    class HostComponent {\n      iconSubject = new Subject<IconProp>();\n\n      icon = toSignal(this.iconSubject.pipe(startWith(faCircle)));\n    }\n\n    const spy = spyOn(console, 'error');\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-circle')).toBeTruthy();\n    fixture.componentInstance.iconSubject.next(faUser);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-user')).toBeTruthy();\n    expect(spy).not.toHaveBeenCalledWith();\n  });\n\n  it('should render a <title> element', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" title=\"User John Smith\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg > title')).toBeTruthy();\n    expect(queryByCss(fixture, 'svg > title').innerHTML).toBe('User John Smith');\n  });\n\n  it('should have title attribute, when title input is set using Angular binding syntax', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: ` <fa-icon [icon]=\"faUser()\" [title]=\"'User John Smith'\"></fa-icon> `,\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n    expect(queryByCss(fixture, 'fa-icon').getAttribute('title')).toBe('User John Smith');\n  });\n\n  it('should use default icon prefix', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').getAttribute('data-prefix')).toEqual('fas');\n  });\n\n  it('should be able to override default icon prefix', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.defaultPrefix = 'far';\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').getAttribute('data-prefix')).toEqual('far');\n  });\n\n  it('should have no fixed width by default', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeFalsy();\n  });\n\n  it('should be able to set fixed width with default config', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.fixedWidth = true;\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeTruthy();\n  });\n\n  it('should be able to set fixed width explicitly', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\" [fixedWidth]=\"fixedWidth()\"></fa-icon>',\n    })\n    class HostComponent {\n      fixedWidth = signal(true);\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.fixedWidth = false;\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeTruthy();\n  });\n\n  it('should be able to override global fixed width explicitly', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\" [fixedWidth]=\"fixedWidth()\"></fa-icon>',\n    })\n    class HostComponent {\n      fixedWidth = signal(false);\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.fixedWidth = true;\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeFalsy();\n  });\n\n  it('should use icon definition from the icon library', () => {\n    @Component({\n      changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":332,"column":5,"nodeType":"Decorator","messageId":"preferStandalone","endLine":336,"endColumn":7,"fix":{"range":[10375,10380],"text":"true"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":332,"column":5,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":336,"endColumn":7,"fix":{"range":[10375,10380],"text":"true"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":332,"column":5,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":336,"endColumn":7,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[66,10336],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { toSignal } from '@angular/core/rxjs-interop';\nimport { faUser as faUserRegular } from '@fortawesome/free-regular-svg-icons';\nimport { faCircle, faUser } from '@fortawesome/free-solid-svg-icons';\nimport { Subject } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\nimport { initTest, queryByCss } from '../../testing/helpers';\nimport { FaConfig } from '../config';\nimport { FaIconLibrary } from '../icon-library';\nimport { IconProp } from '../types';\nimport { FaIconComponent } from './icon.component';\n\ndescribe('FaIconComponent', () => {\n  it('should render SVG icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should support binding to boolean inputs', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" [inverse]=\"isInverse()\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      isInverse = signal(false);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-inverse')).toBeFalsy();\n\n    fixture.componentInstance.isInverse.set(true);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-inverse')).toBeTruthy();\n  });\n\n  it('should be able to create component dynamically', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<ng-container #host></ng-container>',\n    })\n    class HostComponent {\n      container = viewChild('host', { read: ViewContainerRef });\n\n      createIcon() {\n        const componentRef = this.container().createComponent(FaIconComponent);\n        componentRef.setInput('icon', faUser);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeFalsy();\n\n    fixture.componentInstance.createIcon();\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should be able to update icon programmatically', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\"></fa-icon>',\n    })\n    class HostComponent {\n      @ViewChild(FaIconComponent, { static: true }) iconComponent: FaIconComponent;\n\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-spin')).toBeFalsy();\n\n    fixture.componentInstance.iconComponent.animation.set('spin');\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-spin')).toBeTruthy();\n  });\n\n  it('should be possible to customize `role` attribute of the rendered SVG icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" a11yRole=\"presentation\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').getAttribute('role')).toBe('presentation');\n  });\n\n  it('should throw an error when icon attribute is missing', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"undefined\"></fa-icon>',\n    })\n    class HostComponent {}\n\n    const fixture = initTest(HostComponent);\n    expect(() => fixture.detectChanges()).toThrow(\n      new Error('Property `icon` is required for `fa-icon`/`fa-duotone-icon` components.'),\n    );\n  });\n\n  it('should work with AsyncPipe and default value', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"icon | async\"></fa-icon>',\n    })\n    class HostComponent {\n      iconSubject = new Subject<IconProp>();\n\n      icon = this.iconSubject.pipe(startWith(faCircle));\n    }\n\n    const spy = spyOn(console, 'error');\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-circle')).toBeTruthy();\n    fixture.componentInstance.iconSubject.next(faUser);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-user')).toBeTruthy();\n    expect(spy).not.toHaveBeenCalledWith();\n  });\n\n  it('should work with stream converted to toSignal and default value', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"icon()\"></fa-icon>',\n    })\n    class HostComponent {\n      iconSubject = new Subject<IconProp>();\n\n      icon = toSignal(this.iconSubject.pipe(startWith(faCircle)));\n    }\n\n    const spy = spyOn(console, 'error');\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-circle')).toBeTruthy();\n    fixture.componentInstance.iconSubject.next(faUser);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-user')).toBeTruthy();\n    expect(spy).not.toHaveBeenCalledWith();\n  });\n\n  it('should render a <title> element', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" title=\"User John Smith\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg > title')).toBeTruthy();\n    expect(queryByCss(fixture, 'svg > title').innerHTML).toBe('User John Smith');\n  });\n\n  it('should have title attribute, when title input is set using Angular binding syntax', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: ` <fa-icon [icon]=\"faUser()\" [title]=\"'User John Smith'\"></fa-icon> `,\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n    expect(queryByCss(fixture, 'fa-icon').getAttribute('title')).toBe('User John Smith');\n  });\n\n  it('should use default icon prefix', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').getAttribute('data-prefix')).toEqual('fas');\n  });\n\n  it('should be able to override default icon prefix', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.defaultPrefix = 'far';\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').getAttribute('data-prefix')).toEqual('far');\n  });\n\n  it('should have no fixed width by default', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeFalsy();\n  });\n\n  it('should be able to set fixed width with default config', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.fixedWidth = true;\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeTruthy();\n  });\n\n  it('should be able to set fixed width explicitly', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\" [fixedWidth]=\"fixedWidth()\"></fa-icon>',\n    })\n    class HostComponent {\n      fixedWidth = signal(true);\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.fixedWidth = false;\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeTruthy();\n  });\n\n  it('should be able to override global fixed width explicitly', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\" [fixedWidth]=\"fixedWidth()\"></fa-icon>',\n    })\n    class HostComponent {\n      fixedWidth = signal(false);\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.fixedWidth = true;\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeFalsy();\n  });\n\n  it('should use icon definition from the icon library', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should throw an error if icon definition is not found in the icon library', () => {\n    @Component({\n      changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":346,"column":5,"nodeType":"Decorator","messageId":"preferStandalone","endLine":350,"endColumn":7,"fix":{"range":[10846,10851],"text":"true"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":346,"column":5,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":350,"endColumn":7,"fix":{"range":[10846,10851],"text":"true"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":346,"column":5,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":350,"endColumn":7,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[66,10807],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { toSignal } from '@angular/core/rxjs-interop';\nimport { faUser as faUserRegular } from '@fortawesome/free-regular-svg-icons';\nimport { faCircle, faUser } from '@fortawesome/free-solid-svg-icons';\nimport { Subject } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\nimport { initTest, queryByCss } from '../../testing/helpers';\nimport { FaConfig } from '../config';\nimport { FaIconLibrary } from '../icon-library';\nimport { IconProp } from '../types';\nimport { FaIconComponent } from './icon.component';\n\ndescribe('FaIconComponent', () => {\n  it('should render SVG icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should support binding to boolean inputs', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" [inverse]=\"isInverse()\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      isInverse = signal(false);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-inverse')).toBeFalsy();\n\n    fixture.componentInstance.isInverse.set(true);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-inverse')).toBeTruthy();\n  });\n\n  it('should be able to create component dynamically', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<ng-container #host></ng-container>',\n    })\n    class HostComponent {\n      container = viewChild('host', { read: ViewContainerRef });\n\n      createIcon() {\n        const componentRef = this.container().createComponent(FaIconComponent);\n        componentRef.setInput('icon', faUser);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeFalsy();\n\n    fixture.componentInstance.createIcon();\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should be able to update icon programmatically', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\"></fa-icon>',\n    })\n    class HostComponent {\n      @ViewChild(FaIconComponent, { static: true }) iconComponent: FaIconComponent;\n\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-spin')).toBeFalsy();\n\n    fixture.componentInstance.iconComponent.animation.set('spin');\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-spin')).toBeTruthy();\n  });\n\n  it('should be possible to customize `role` attribute of the rendered SVG icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" a11yRole=\"presentation\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').getAttribute('role')).toBe('presentation');\n  });\n\n  it('should throw an error when icon attribute is missing', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"undefined\"></fa-icon>',\n    })\n    class HostComponent {}\n\n    const fixture = initTest(HostComponent);\n    expect(() => fixture.detectChanges()).toThrow(\n      new Error('Property `icon` is required for `fa-icon`/`fa-duotone-icon` components.'),\n    );\n  });\n\n  it('should work with AsyncPipe and default value', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"icon | async\"></fa-icon>',\n    })\n    class HostComponent {\n      iconSubject = new Subject<IconProp>();\n\n      icon = this.iconSubject.pipe(startWith(faCircle));\n    }\n\n    const spy = spyOn(console, 'error');\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-circle')).toBeTruthy();\n    fixture.componentInstance.iconSubject.next(faUser);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-user')).toBeTruthy();\n    expect(spy).not.toHaveBeenCalledWith();\n  });\n\n  it('should work with stream converted to toSignal and default value', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"icon()\"></fa-icon>',\n    })\n    class HostComponent {\n      iconSubject = new Subject<IconProp>();\n\n      icon = toSignal(this.iconSubject.pipe(startWith(faCircle)));\n    }\n\n    const spy = spyOn(console, 'error');\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-circle')).toBeTruthy();\n    fixture.componentInstance.iconSubject.next(faUser);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-user')).toBeTruthy();\n    expect(spy).not.toHaveBeenCalledWith();\n  });\n\n  it('should render a <title> element', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" title=\"User John Smith\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg > title')).toBeTruthy();\n    expect(queryByCss(fixture, 'svg > title').innerHTML).toBe('User John Smith');\n  });\n\n  it('should have title attribute, when title input is set using Angular binding syntax', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: ` <fa-icon [icon]=\"faUser()\" [title]=\"'User John Smith'\"></fa-icon> `,\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n    expect(queryByCss(fixture, 'fa-icon').getAttribute('title')).toBe('User John Smith');\n  });\n\n  it('should use default icon prefix', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').getAttribute('data-prefix')).toEqual('fas');\n  });\n\n  it('should be able to override default icon prefix', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.defaultPrefix = 'far';\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').getAttribute('data-prefix')).toEqual('far');\n  });\n\n  it('should have no fixed width by default', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeFalsy();\n  });\n\n  it('should be able to set fixed width with default config', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.fixedWidth = true;\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeTruthy();\n  });\n\n  it('should be able to set fixed width explicitly', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\" [fixedWidth]=\"fixedWidth()\"></fa-icon>',\n    })\n    class HostComponent {\n      fixedWidth = signal(true);\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.fixedWidth = false;\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeTruthy();\n  });\n\n  it('should be able to override global fixed width explicitly', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\" [fixedWidth]=\"fixedWidth()\"></fa-icon>',\n    })\n    class HostComponent {\n      fixedWidth = signal(false);\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.fixedWidth = true;\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeFalsy();\n  });\n\n  it('should use icon definition from the icon library', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should throw an error if icon definition is not found in the icon library', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"circle\"></fa-icon>',\n    })\n    class HostComponent {}\n\n    const fixture = initTest(HostComponent);\n    expect(() => fixture.detectChanges()).toThrow(\n      new Error('Could not find icon with iconName=circle and prefix=fas in the icon library.'),\n    );\n  });\n\n  it('should display a fallback icon when specified in the config, and icon attribute is missing', () => {\n    @Component({\n      changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":365,"column":5,"nodeType":"Decorator","messageId":"preferStandalone","endLine":369,"endColumn":7,"fix":{"range":[11451,11456],"text":"true"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":365,"column":5,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":369,"endColumn":7,"fix":{"range":[11451,11456],"text":"true"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":365,"column":5,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":369,"endColumn":7,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[66,11412],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { toSignal } from '@angular/core/rxjs-interop';\nimport { faUser as faUserRegular } from '@fortawesome/free-regular-svg-icons';\nimport { faCircle, faUser } from '@fortawesome/free-solid-svg-icons';\nimport { Subject } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\nimport { initTest, queryByCss } from '../../testing/helpers';\nimport { FaConfig } from '../config';\nimport { FaIconLibrary } from '../icon-library';\nimport { IconProp } from '../types';\nimport { FaIconComponent } from './icon.component';\n\ndescribe('FaIconComponent', () => {\n  it('should render SVG icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should support binding to boolean inputs', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" [inverse]=\"isInverse()\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      isInverse = signal(false);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-inverse')).toBeFalsy();\n\n    fixture.componentInstance.isInverse.set(true);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-inverse')).toBeTruthy();\n  });\n\n  it('should be able to create component dynamically', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<ng-container #host></ng-container>',\n    })\n    class HostComponent {\n      container = viewChild('host', { read: ViewContainerRef });\n\n      createIcon() {\n        const componentRef = this.container().createComponent(FaIconComponent);\n        componentRef.setInput('icon', faUser);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeFalsy();\n\n    fixture.componentInstance.createIcon();\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should be able to update icon programmatically', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\"></fa-icon>',\n    })\n    class HostComponent {\n      @ViewChild(FaIconComponent, { static: true }) iconComponent: FaIconComponent;\n\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-spin')).toBeFalsy();\n\n    fixture.componentInstance.iconComponent.animation.set('spin');\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-spin')).toBeTruthy();\n  });\n\n  it('should be possible to customize `role` attribute of the rendered SVG icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" a11yRole=\"presentation\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').getAttribute('role')).toBe('presentation');\n  });\n\n  it('should throw an error when icon attribute is missing', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"undefined\"></fa-icon>',\n    })\n    class HostComponent {}\n\n    const fixture = initTest(HostComponent);\n    expect(() => fixture.detectChanges()).toThrow(\n      new Error('Property `icon` is required for `fa-icon`/`fa-duotone-icon` components.'),\n    );\n  });\n\n  it('should work with AsyncPipe and default value', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"icon | async\"></fa-icon>',\n    })\n    class HostComponent {\n      iconSubject = new Subject<IconProp>();\n\n      icon = this.iconSubject.pipe(startWith(faCircle));\n    }\n\n    const spy = spyOn(console, 'error');\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-circle')).toBeTruthy();\n    fixture.componentInstance.iconSubject.next(faUser);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-user')).toBeTruthy();\n    expect(spy).not.toHaveBeenCalledWith();\n  });\n\n  it('should work with stream converted to toSignal and default value', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"icon()\"></fa-icon>',\n    })\n    class HostComponent {\n      iconSubject = new Subject<IconProp>();\n\n      icon = toSignal(this.iconSubject.pipe(startWith(faCircle)));\n    }\n\n    const spy = spyOn(console, 'error');\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-circle')).toBeTruthy();\n    fixture.componentInstance.iconSubject.next(faUser);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-user')).toBeTruthy();\n    expect(spy).not.toHaveBeenCalledWith();\n  });\n\n  it('should render a <title> element', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" title=\"User John Smith\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg > title')).toBeTruthy();\n    expect(queryByCss(fixture, 'svg > title').innerHTML).toBe('User John Smith');\n  });\n\n  it('should have title attribute, when title input is set using Angular binding syntax', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: ` <fa-icon [icon]=\"faUser()\" [title]=\"'User John Smith'\"></fa-icon> `,\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n    expect(queryByCss(fixture, 'fa-icon').getAttribute('title')).toBe('User John Smith');\n  });\n\n  it('should use default icon prefix', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').getAttribute('data-prefix')).toEqual('fas');\n  });\n\n  it('should be able to override default icon prefix', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.defaultPrefix = 'far';\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').getAttribute('data-prefix')).toEqual('far');\n  });\n\n  it('should have no fixed width by default', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeFalsy();\n  });\n\n  it('should be able to set fixed width with default config', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.fixedWidth = true;\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeTruthy();\n  });\n\n  it('should be able to set fixed width explicitly', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\" [fixedWidth]=\"fixedWidth()\"></fa-icon>',\n    })\n    class HostComponent {\n      fixedWidth = signal(true);\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.fixedWidth = false;\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeTruthy();\n  });\n\n  it('should be able to override global fixed width explicitly', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\" [fixedWidth]=\"fixedWidth()\"></fa-icon>',\n    })\n    class HostComponent {\n      fixedWidth = signal(false);\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.fixedWidth = true;\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeFalsy();\n  });\n\n  it('should use icon definition from the icon library', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should throw an error if icon definition is not found in the icon library', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"circle\"></fa-icon>',\n    })\n    class HostComponent {}\n\n    const fixture = initTest(HostComponent);\n    expect(() => fixture.detectChanges()).toThrow(\n      new Error('Could not find icon with iconName=circle and prefix=fas in the icon library.'),\n    );\n  });\n\n  it('should display a fallback icon when specified in the config, and icon attribute is missing', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"undefined\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(config: FaConfig) {\n        config.fallbackIcon = faCircle;\n      }\n    }\n\n    const spy = spyOn(console, 'error');\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-circle')).toBeTruthy();\n    expect(spy).not.toHaveBeenCalledWith();\n  });\n\n  it('should display the icon specified in the icon attribute when both it and the fallback icon config are present', () => {\n    @Component({\n      changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":386,"column":5,"nodeType":"Decorator","messageId":"preferStandalone","endLine":390,"endColumn":7,"fix":{"range":[12109,12114],"text":"true"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":386,"column":5,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":390,"endColumn":7,"fix":{"range":[12109,12114],"text":"true"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":386,"column":5,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":390,"endColumn":7,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[66,12070],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { toSignal } from '@angular/core/rxjs-interop';\nimport { faUser as faUserRegular } from '@fortawesome/free-regular-svg-icons';\nimport { faCircle, faUser } from '@fortawesome/free-solid-svg-icons';\nimport { Subject } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\nimport { initTest, queryByCss } from '../../testing/helpers';\nimport { FaConfig } from '../config';\nimport { FaIconLibrary } from '../icon-library';\nimport { IconProp } from '../types';\nimport { FaIconComponent } from './icon.component';\n\ndescribe('FaIconComponent', () => {\n  it('should render SVG icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should support binding to boolean inputs', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" [inverse]=\"isInverse()\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      isInverse = signal(false);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-inverse')).toBeFalsy();\n\n    fixture.componentInstance.isInverse.set(true);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-inverse')).toBeTruthy();\n  });\n\n  it('should be able to create component dynamically', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<ng-container #host></ng-container>',\n    })\n    class HostComponent {\n      container = viewChild('host', { read: ViewContainerRef });\n\n      createIcon() {\n        const componentRef = this.container().createComponent(FaIconComponent);\n        componentRef.setInput('icon', faUser);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeFalsy();\n\n    fixture.componentInstance.createIcon();\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should be able to update icon programmatically', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\"></fa-icon>',\n    })\n    class HostComponent {\n      @ViewChild(FaIconComponent, { static: true }) iconComponent: FaIconComponent;\n\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-spin')).toBeFalsy();\n\n    fixture.componentInstance.iconComponent.animation.set('spin');\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-spin')).toBeTruthy();\n  });\n\n  it('should be possible to customize `role` attribute of the rendered SVG icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" a11yRole=\"presentation\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').getAttribute('role')).toBe('presentation');\n  });\n\n  it('should throw an error when icon attribute is missing', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"undefined\"></fa-icon>',\n    })\n    class HostComponent {}\n\n    const fixture = initTest(HostComponent);\n    expect(() => fixture.detectChanges()).toThrow(\n      new Error('Property `icon` is required for `fa-icon`/`fa-duotone-icon` components.'),\n    );\n  });\n\n  it('should work with AsyncPipe and default value', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"icon | async\"></fa-icon>',\n    })\n    class HostComponent {\n      iconSubject = new Subject<IconProp>();\n\n      icon = this.iconSubject.pipe(startWith(faCircle));\n    }\n\n    const spy = spyOn(console, 'error');\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-circle')).toBeTruthy();\n    fixture.componentInstance.iconSubject.next(faUser);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-user')).toBeTruthy();\n    expect(spy).not.toHaveBeenCalledWith();\n  });\n\n  it('should work with stream converted to toSignal and default value', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"icon()\"></fa-icon>',\n    })\n    class HostComponent {\n      iconSubject = new Subject<IconProp>();\n\n      icon = toSignal(this.iconSubject.pipe(startWith(faCircle)));\n    }\n\n    const spy = spyOn(console, 'error');\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-circle')).toBeTruthy();\n    fixture.componentInstance.iconSubject.next(faUser);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-user')).toBeTruthy();\n    expect(spy).not.toHaveBeenCalledWith();\n  });\n\n  it('should render a <title> element', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" title=\"User John Smith\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg > title')).toBeTruthy();\n    expect(queryByCss(fixture, 'svg > title').innerHTML).toBe('User John Smith');\n  });\n\n  it('should have title attribute, when title input is set using Angular binding syntax', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: ` <fa-icon [icon]=\"faUser()\" [title]=\"'User John Smith'\"></fa-icon> `,\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n    expect(queryByCss(fixture, 'fa-icon').getAttribute('title')).toBe('User John Smith');\n  });\n\n  it('should use default icon prefix', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').getAttribute('data-prefix')).toEqual('fas');\n  });\n\n  it('should be able to override default icon prefix', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.defaultPrefix = 'far';\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').getAttribute('data-prefix')).toEqual('far');\n  });\n\n  it('should have no fixed width by default', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeFalsy();\n  });\n\n  it('should be able to set fixed width with default config', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.fixedWidth = true;\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeTruthy();\n  });\n\n  it('should be able to set fixed width explicitly', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\" [fixedWidth]=\"fixedWidth()\"></fa-icon>',\n    })\n    class HostComponent {\n      fixedWidth = signal(true);\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.fixedWidth = false;\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeTruthy();\n  });\n\n  it('should be able to override global fixed width explicitly', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\" [fixedWidth]=\"fixedWidth()\"></fa-icon>',\n    })\n    class HostComponent {\n      fixedWidth = signal(false);\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.fixedWidth = true;\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeFalsy();\n  });\n\n  it('should use icon definition from the icon library', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should throw an error if icon definition is not found in the icon library', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"circle\"></fa-icon>',\n    })\n    class HostComponent {}\n\n    const fixture = initTest(HostComponent);\n    expect(() => fixture.detectChanges()).toThrow(\n      new Error('Could not find icon with iconName=circle and prefix=fas in the icon library.'),\n    );\n  });\n\n  it('should display a fallback icon when specified in the config, and icon attribute is missing', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"undefined\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(config: FaConfig) {\n        config.fallbackIcon = faCircle;\n      }\n    }\n\n    const spy = spyOn(console, 'error');\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-circle')).toBeTruthy();\n    expect(spy).not.toHaveBeenCalledWith();\n  });\n\n  it('should display the icon specified in the icon attribute when both it and the fallback icon config are present', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      constructor(config: FaConfig) {\n        config.fallbackIcon = faCircle;\n      }\n    }\n\n    const spy = spyOn(console, 'error');\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-user')).toBeTruthy();\n    expect(queryByCss(fixture, '.fa-circle')).toBeFalsy();\n    expect(spy).not.toHaveBeenCalledWith();\n  });\n\n  it('should warn when stackItemSize attribute is missing on icon inside fa-stack', () => {\n    @Component({\n      changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":406,"column":5,"nodeType":"Decorator","messageId":"preferStandalone","endLine":410,"endColumn":7,"fix":{"range":[12755,12760],"text":"true"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":406,"column":5,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":410,"endColumn":7,"fix":{"range":[12755,12760],"text":"true"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":406,"column":5,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":410,"endColumn":7,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[66,12716],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { toSignal } from '@angular/core/rxjs-interop';\nimport { faUser as faUserRegular } from '@fortawesome/free-regular-svg-icons';\nimport { faCircle, faUser } from '@fortawesome/free-solid-svg-icons';\nimport { Subject } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\nimport { initTest, queryByCss } from '../../testing/helpers';\nimport { FaConfig } from '../config';\nimport { FaIconLibrary } from '../icon-library';\nimport { IconProp } from '../types';\nimport { FaIconComponent } from './icon.component';\n\ndescribe('FaIconComponent', () => {\n  it('should render SVG icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should support binding to boolean inputs', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" [inverse]=\"isInverse()\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      isInverse = signal(false);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-inverse')).toBeFalsy();\n\n    fixture.componentInstance.isInverse.set(true);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-inverse')).toBeTruthy();\n  });\n\n  it('should be able to create component dynamically', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<ng-container #host></ng-container>',\n    })\n    class HostComponent {\n      container = viewChild('host', { read: ViewContainerRef });\n\n      createIcon() {\n        const componentRef = this.container().createComponent(FaIconComponent);\n        componentRef.setInput('icon', faUser);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeFalsy();\n\n    fixture.componentInstance.createIcon();\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should be able to update icon programmatically', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\"></fa-icon>',\n    })\n    class HostComponent {\n      @ViewChild(FaIconComponent, { static: true }) iconComponent: FaIconComponent;\n\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-spin')).toBeFalsy();\n\n    fixture.componentInstance.iconComponent.animation.set('spin');\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-spin')).toBeTruthy();\n  });\n\n  it('should be possible to customize `role` attribute of the rendered SVG icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" a11yRole=\"presentation\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').getAttribute('role')).toBe('presentation');\n  });\n\n  it('should throw an error when icon attribute is missing', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"undefined\"></fa-icon>',\n    })\n    class HostComponent {}\n\n    const fixture = initTest(HostComponent);\n    expect(() => fixture.detectChanges()).toThrow(\n      new Error('Property `icon` is required for `fa-icon`/`fa-duotone-icon` components.'),\n    );\n  });\n\n  it('should work with AsyncPipe and default value', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"icon | async\"></fa-icon>',\n    })\n    class HostComponent {\n      iconSubject = new Subject<IconProp>();\n\n      icon = this.iconSubject.pipe(startWith(faCircle));\n    }\n\n    const spy = spyOn(console, 'error');\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-circle')).toBeTruthy();\n    fixture.componentInstance.iconSubject.next(faUser);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-user')).toBeTruthy();\n    expect(spy).not.toHaveBeenCalledWith();\n  });\n\n  it('should work with stream converted to toSignal and default value', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"icon()\"></fa-icon>',\n    })\n    class HostComponent {\n      iconSubject = new Subject<IconProp>();\n\n      icon = toSignal(this.iconSubject.pipe(startWith(faCircle)));\n    }\n\n    const spy = spyOn(console, 'error');\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-circle')).toBeTruthy();\n    fixture.componentInstance.iconSubject.next(faUser);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-user')).toBeTruthy();\n    expect(spy).not.toHaveBeenCalledWith();\n  });\n\n  it('should render a <title> element', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" title=\"User John Smith\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg > title')).toBeTruthy();\n    expect(queryByCss(fixture, 'svg > title').innerHTML).toBe('User John Smith');\n  });\n\n  it('should have title attribute, when title input is set using Angular binding syntax', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: ` <fa-icon [icon]=\"faUser()\" [title]=\"'User John Smith'\"></fa-icon> `,\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n    expect(queryByCss(fixture, 'fa-icon').getAttribute('title')).toBe('User John Smith');\n  });\n\n  it('should use default icon prefix', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').getAttribute('data-prefix')).toEqual('fas');\n  });\n\n  it('should be able to override default icon prefix', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.defaultPrefix = 'far';\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').getAttribute('data-prefix')).toEqual('far');\n  });\n\n  it('should have no fixed width by default', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeFalsy();\n  });\n\n  it('should be able to set fixed width with default config', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.fixedWidth = true;\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeTruthy();\n  });\n\n  it('should be able to set fixed width explicitly', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\" [fixedWidth]=\"fixedWidth()\"></fa-icon>',\n    })\n    class HostComponent {\n      fixedWidth = signal(true);\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.fixedWidth = false;\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeTruthy();\n  });\n\n  it('should be able to override global fixed width explicitly', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\" [fixedWidth]=\"fixedWidth()\"></fa-icon>',\n    })\n    class HostComponent {\n      fixedWidth = signal(false);\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.fixedWidth = true;\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeFalsy();\n  });\n\n  it('should use icon definition from the icon library', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should throw an error if icon definition is not found in the icon library', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"circle\"></fa-icon>',\n    })\n    class HostComponent {}\n\n    const fixture = initTest(HostComponent);\n    expect(() => fixture.detectChanges()).toThrow(\n      new Error('Could not find icon with iconName=circle and prefix=fas in the icon library.'),\n    );\n  });\n\n  it('should display a fallback icon when specified in the config, and icon attribute is missing', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"undefined\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(config: FaConfig) {\n        config.fallbackIcon = faCircle;\n      }\n    }\n\n    const spy = spyOn(console, 'error');\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-circle')).toBeTruthy();\n    expect(spy).not.toHaveBeenCalledWith();\n  });\n\n  it('should display the icon specified in the icon attribute when both it and the fallback icon config are present', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      constructor(config: FaConfig) {\n        config.fallbackIcon = faCircle;\n      }\n    }\n\n    const spy = spyOn(console, 'error');\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-user')).toBeTruthy();\n    expect(queryByCss(fixture, '.fa-circle')).toBeFalsy();\n    expect(spy).not.toHaveBeenCalledWith();\n  });\n\n  it('should warn when stackItemSize attribute is missing on icon inside fa-stack', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-stack><fa-icon [icon]=\"faCircle()\"></fa-icon></fa-stack>',\n    })\n    class HostComponent {\n      faCircle = signal(faCircle);\n    }\n\n    const spy = spyOn(console, 'error');\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(spy).toHaveBeenCalledWith(\n      'FontAwesome: fa-icon and fa-duotone-icon elements must specify stackItemSize attribute when wrapped into ' +\n        'fa-stack. Example: <fa-icon stackItemSize=\"2x\"></fa-icon>.',\n    );\n  });\n\n  it('should be able to set predefined rotate as a number', () => {\n    @Component({\n      changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":423,"column":5,"nodeType":"Decorator","messageId":"preferStandalone","endLine":427,"endColumn":7,"fix":{"range":[13250,13255],"text":"true"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":423,"column":5,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":427,"endColumn":7,"fix":{"range":[13250,13255],"text":"true"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":423,"column":5,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":427,"endColumn":7,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[66,13211],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { toSignal } from '@angular/core/rxjs-interop';\nimport { faUser as faUserRegular } from '@fortawesome/free-regular-svg-icons';\nimport { faCircle, faUser } from '@fortawesome/free-solid-svg-icons';\nimport { Subject } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\nimport { initTest, queryByCss } from '../../testing/helpers';\nimport { FaConfig } from '../config';\nimport { FaIconLibrary } from '../icon-library';\nimport { IconProp } from '../types';\nimport { FaIconComponent } from './icon.component';\n\ndescribe('FaIconComponent', () => {\n  it('should render SVG icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should support binding to boolean inputs', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" [inverse]=\"isInverse()\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      isInverse = signal(false);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-inverse')).toBeFalsy();\n\n    fixture.componentInstance.isInverse.set(true);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-inverse')).toBeTruthy();\n  });\n\n  it('should be able to create component dynamically', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<ng-container #host></ng-container>',\n    })\n    class HostComponent {\n      container = viewChild('host', { read: ViewContainerRef });\n\n      createIcon() {\n        const componentRef = this.container().createComponent(FaIconComponent);\n        componentRef.setInput('icon', faUser);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeFalsy();\n\n    fixture.componentInstance.createIcon();\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should be able to update icon programmatically', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\"></fa-icon>',\n    })\n    class HostComponent {\n      @ViewChild(FaIconComponent, { static: true }) iconComponent: FaIconComponent;\n\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-spin')).toBeFalsy();\n\n    fixture.componentInstance.iconComponent.animation.set('spin');\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-spin')).toBeTruthy();\n  });\n\n  it('should be possible to customize `role` attribute of the rendered SVG icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" a11yRole=\"presentation\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').getAttribute('role')).toBe('presentation');\n  });\n\n  it('should throw an error when icon attribute is missing', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"undefined\"></fa-icon>',\n    })\n    class HostComponent {}\n\n    const fixture = initTest(HostComponent);\n    expect(() => fixture.detectChanges()).toThrow(\n      new Error('Property `icon` is required for `fa-icon`/`fa-duotone-icon` components.'),\n    );\n  });\n\n  it('should work with AsyncPipe and default value', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"icon | async\"></fa-icon>',\n    })\n    class HostComponent {\n      iconSubject = new Subject<IconProp>();\n\n      icon = this.iconSubject.pipe(startWith(faCircle));\n    }\n\n    const spy = spyOn(console, 'error');\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-circle')).toBeTruthy();\n    fixture.componentInstance.iconSubject.next(faUser);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-user')).toBeTruthy();\n    expect(spy).not.toHaveBeenCalledWith();\n  });\n\n  it('should work with stream converted to toSignal and default value', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"icon()\"></fa-icon>',\n    })\n    class HostComponent {\n      iconSubject = new Subject<IconProp>();\n\n      icon = toSignal(this.iconSubject.pipe(startWith(faCircle)));\n    }\n\n    const spy = spyOn(console, 'error');\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-circle')).toBeTruthy();\n    fixture.componentInstance.iconSubject.next(faUser);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-user')).toBeTruthy();\n    expect(spy).not.toHaveBeenCalledWith();\n  });\n\n  it('should render a <title> element', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" title=\"User John Smith\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg > title')).toBeTruthy();\n    expect(queryByCss(fixture, 'svg > title').innerHTML).toBe('User John Smith');\n  });\n\n  it('should have title attribute, when title input is set using Angular binding syntax', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: ` <fa-icon [icon]=\"faUser()\" [title]=\"'User John Smith'\"></fa-icon> `,\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n    expect(queryByCss(fixture, 'fa-icon').getAttribute('title')).toBe('User John Smith');\n  });\n\n  it('should use default icon prefix', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').getAttribute('data-prefix')).toEqual('fas');\n  });\n\n  it('should be able to override default icon prefix', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.defaultPrefix = 'far';\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').getAttribute('data-prefix')).toEqual('far');\n  });\n\n  it('should have no fixed width by default', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeFalsy();\n  });\n\n  it('should be able to set fixed width with default config', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.fixedWidth = true;\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeTruthy();\n  });\n\n  it('should be able to set fixed width explicitly', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\" [fixedWidth]=\"fixedWidth()\"></fa-icon>',\n    })\n    class HostComponent {\n      fixedWidth = signal(true);\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.fixedWidth = false;\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeTruthy();\n  });\n\n  it('should be able to override global fixed width explicitly', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\" [fixedWidth]=\"fixedWidth()\"></fa-icon>',\n    })\n    class HostComponent {\n      fixedWidth = signal(false);\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.fixedWidth = true;\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeFalsy();\n  });\n\n  it('should use icon definition from the icon library', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should throw an error if icon definition is not found in the icon library', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"circle\"></fa-icon>',\n    })\n    class HostComponent {}\n\n    const fixture = initTest(HostComponent);\n    expect(() => fixture.detectChanges()).toThrow(\n      new Error('Could not find icon with iconName=circle and prefix=fas in the icon library.'),\n    );\n  });\n\n  it('should display a fallback icon when specified in the config, and icon attribute is missing', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"undefined\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(config: FaConfig) {\n        config.fallbackIcon = faCircle;\n      }\n    }\n\n    const spy = spyOn(console, 'error');\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-circle')).toBeTruthy();\n    expect(spy).not.toHaveBeenCalledWith();\n  });\n\n  it('should display the icon specified in the icon attribute when both it and the fallback icon config are present', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      constructor(config: FaConfig) {\n        config.fallbackIcon = faCircle;\n      }\n    }\n\n    const spy = spyOn(console, 'error');\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-user')).toBeTruthy();\n    expect(queryByCss(fixture, '.fa-circle')).toBeFalsy();\n    expect(spy).not.toHaveBeenCalledWith();\n  });\n\n  it('should warn when stackItemSize attribute is missing on icon inside fa-stack', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-stack><fa-icon [icon]=\"faCircle()\"></fa-icon></fa-stack>',\n    })\n    class HostComponent {\n      faCircle = signal(faCircle);\n    }\n\n    const spy = spyOn(console, 'error');\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(spy).toHaveBeenCalledWith(\n      'FontAwesome: fa-icon and fa-duotone-icon elements must specify stackItemSize attribute when wrapped into ' +\n        'fa-stack. Example: <fa-icon stackItemSize=\"2x\"></fa-icon>.',\n    );\n  });\n\n  it('should be able to set predefined rotate as a number', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\" [rotate]=\"90\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-rotate-90')).toBeTruthy();\n  });\n\n  it('should be able to set predefined rotate as a string', () => {\n    @Component({\n      changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":440,"column":5,"nodeType":"Decorator","messageId":"preferStandalone","endLine":444,"endColumn":7,"fix":{"range":[13729,13734],"text":"true"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":440,"column":5,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":444,"endColumn":7,"fix":{"range":[13729,13734],"text":"true"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":440,"column":5,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":444,"endColumn":7,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[66,13690],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { toSignal } from '@angular/core/rxjs-interop';\nimport { faUser as faUserRegular } from '@fortawesome/free-regular-svg-icons';\nimport { faCircle, faUser } from '@fortawesome/free-solid-svg-icons';\nimport { Subject } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\nimport { initTest, queryByCss } from '../../testing/helpers';\nimport { FaConfig } from '../config';\nimport { FaIconLibrary } from '../icon-library';\nimport { IconProp } from '../types';\nimport { FaIconComponent } from './icon.component';\n\ndescribe('FaIconComponent', () => {\n  it('should render SVG icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should support binding to boolean inputs', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" [inverse]=\"isInverse()\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      isInverse = signal(false);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-inverse')).toBeFalsy();\n\n    fixture.componentInstance.isInverse.set(true);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-inverse')).toBeTruthy();\n  });\n\n  it('should be able to create component dynamically', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<ng-container #host></ng-container>',\n    })\n    class HostComponent {\n      container = viewChild('host', { read: ViewContainerRef });\n\n      createIcon() {\n        const componentRef = this.container().createComponent(FaIconComponent);\n        componentRef.setInput('icon', faUser);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeFalsy();\n\n    fixture.componentInstance.createIcon();\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should be able to update icon programmatically', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\"></fa-icon>',\n    })\n    class HostComponent {\n      @ViewChild(FaIconComponent, { static: true }) iconComponent: FaIconComponent;\n\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-spin')).toBeFalsy();\n\n    fixture.componentInstance.iconComponent.animation.set('spin');\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-spin')).toBeTruthy();\n  });\n\n  it('should be possible to customize `role` attribute of the rendered SVG icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" a11yRole=\"presentation\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').getAttribute('role')).toBe('presentation');\n  });\n\n  it('should throw an error when icon attribute is missing', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"undefined\"></fa-icon>',\n    })\n    class HostComponent {}\n\n    const fixture = initTest(HostComponent);\n    expect(() => fixture.detectChanges()).toThrow(\n      new Error('Property `icon` is required for `fa-icon`/`fa-duotone-icon` components.'),\n    );\n  });\n\n  it('should work with AsyncPipe and default value', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"icon | async\"></fa-icon>',\n    })\n    class HostComponent {\n      iconSubject = new Subject<IconProp>();\n\n      icon = this.iconSubject.pipe(startWith(faCircle));\n    }\n\n    const spy = spyOn(console, 'error');\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-circle')).toBeTruthy();\n    fixture.componentInstance.iconSubject.next(faUser);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-user')).toBeTruthy();\n    expect(spy).not.toHaveBeenCalledWith();\n  });\n\n  it('should work with stream converted to toSignal and default value', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"icon()\"></fa-icon>',\n    })\n    class HostComponent {\n      iconSubject = new Subject<IconProp>();\n\n      icon = toSignal(this.iconSubject.pipe(startWith(faCircle)));\n    }\n\n    const spy = spyOn(console, 'error');\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-circle')).toBeTruthy();\n    fixture.componentInstance.iconSubject.next(faUser);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-user')).toBeTruthy();\n    expect(spy).not.toHaveBeenCalledWith();\n  });\n\n  it('should render a <title> element', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" title=\"User John Smith\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg > title')).toBeTruthy();\n    expect(queryByCss(fixture, 'svg > title').innerHTML).toBe('User John Smith');\n  });\n\n  it('should have title attribute, when title input is set using Angular binding syntax', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: ` <fa-icon [icon]=\"faUser()\" [title]=\"'User John Smith'\"></fa-icon> `,\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n    expect(queryByCss(fixture, 'fa-icon').getAttribute('title')).toBe('User John Smith');\n  });\n\n  it('should use default icon prefix', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').getAttribute('data-prefix')).toEqual('fas');\n  });\n\n  it('should be able to override default icon prefix', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.defaultPrefix = 'far';\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').getAttribute('data-prefix')).toEqual('far');\n  });\n\n  it('should have no fixed width by default', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeFalsy();\n  });\n\n  it('should be able to set fixed width with default config', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.fixedWidth = true;\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeTruthy();\n  });\n\n  it('should be able to set fixed width explicitly', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\" [fixedWidth]=\"fixedWidth()\"></fa-icon>',\n    })\n    class HostComponent {\n      fixedWidth = signal(true);\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.fixedWidth = false;\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeTruthy();\n  });\n\n  it('should be able to override global fixed width explicitly', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\" [fixedWidth]=\"fixedWidth()\"></fa-icon>',\n    })\n    class HostComponent {\n      fixedWidth = signal(false);\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.fixedWidth = true;\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeFalsy();\n  });\n\n  it('should use icon definition from the icon library', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should throw an error if icon definition is not found in the icon library', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"circle\"></fa-icon>',\n    })\n    class HostComponent {}\n\n    const fixture = initTest(HostComponent);\n    expect(() => fixture.detectChanges()).toThrow(\n      new Error('Could not find icon with iconName=circle and prefix=fas in the icon library.'),\n    );\n  });\n\n  it('should display a fallback icon when specified in the config, and icon attribute is missing', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"undefined\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(config: FaConfig) {\n        config.fallbackIcon = faCircle;\n      }\n    }\n\n    const spy = spyOn(console, 'error');\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-circle')).toBeTruthy();\n    expect(spy).not.toHaveBeenCalledWith();\n  });\n\n  it('should display the icon specified in the icon attribute when both it and the fallback icon config are present', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      constructor(config: FaConfig) {\n        config.fallbackIcon = faCircle;\n      }\n    }\n\n    const spy = spyOn(console, 'error');\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-user')).toBeTruthy();\n    expect(queryByCss(fixture, '.fa-circle')).toBeFalsy();\n    expect(spy).not.toHaveBeenCalledWith();\n  });\n\n  it('should warn when stackItemSize attribute is missing on icon inside fa-stack', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-stack><fa-icon [icon]=\"faCircle()\"></fa-icon></fa-stack>',\n    })\n    class HostComponent {\n      faCircle = signal(faCircle);\n    }\n\n    const spy = spyOn(console, 'error');\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(spy).toHaveBeenCalledWith(\n      'FontAwesome: fa-icon and fa-duotone-icon elements must specify stackItemSize attribute when wrapped into ' +\n        'fa-stack. Example: <fa-icon stackItemSize=\"2x\"></fa-icon>.',\n    );\n  });\n\n  it('should be able to set predefined rotate as a number', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\" [rotate]=\"90\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-rotate-90')).toBeTruthy();\n  });\n\n  it('should be able to set predefined rotate as a string', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\" rotate=\"90\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-rotate-90')).toBeTruthy();\n  });\n\n  it('should be able to set customer rotate', () => {\n    @Component({\n      changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]}],"suppressedMessages":[],"errorCount":72,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":48,"fixableWarningCount":0,"source":"import { Component, signal, viewChild, ViewChild, ViewContainerRef } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { toSignal } from '@angular/core/rxjs-interop';\nimport { faUser as faUserRegular } from '@fortawesome/free-regular-svg-icons';\nimport { faCircle, faUser } from '@fortawesome/free-solid-svg-icons';\nimport { Subject } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\nimport { initTest, queryByCss } from '../../testing/helpers';\nimport { FaConfig } from '../config';\nimport { FaIconLibrary } from '../icon-library';\nimport { IconProp } from '../types';\nimport { FaIconComponent } from './icon.component';\n\ndescribe('FaIconComponent', () => {\n  it('should render SVG icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should support binding to boolean inputs', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" [inverse]=\"isInverse()\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      isInverse = signal(false);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-inverse')).toBeFalsy();\n\n    fixture.componentInstance.isInverse.set(true);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-inverse')).toBeTruthy();\n  });\n\n  it('should be able to create component dynamically', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<ng-container #host></ng-container>',\n    })\n    class HostComponent {\n      container = viewChild('host', { read: ViewContainerRef });\n\n      createIcon() {\n        const componentRef = this.container().createComponent(FaIconComponent);\n        componentRef.setInput('icon', faUser);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeFalsy();\n\n    fixture.componentInstance.createIcon();\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should be able to update icon programmatically', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\"></fa-icon>',\n    })\n    class HostComponent {\n      @ViewChild(FaIconComponent, { static: true }) iconComponent: FaIconComponent;\n\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-spin')).toBeFalsy();\n\n    fixture.componentInstance.iconComponent.animation.set('spin');\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').classList.contains('fa-spin')).toBeTruthy();\n  });\n\n  it('should be possible to customize `role` attribute of the rendered SVG icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" a11yRole=\"presentation\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').getAttribute('role')).toBe('presentation');\n  });\n\n  it('should throw an error when icon attribute is missing', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"undefined\"></fa-icon>',\n    })\n    class HostComponent {}\n\n    const fixture = initTest(HostComponent);\n    expect(() => fixture.detectChanges()).toThrow(\n      new Error('Property `icon` is required for `fa-icon`/`fa-duotone-icon` components.'),\n    );\n  });\n\n  it('should work with AsyncPipe and default value', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"icon | async\"></fa-icon>',\n    })\n    class HostComponent {\n      iconSubject = new Subject<IconProp>();\n\n      icon = this.iconSubject.pipe(startWith(faCircle));\n    }\n\n    const spy = spyOn(console, 'error');\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-circle')).toBeTruthy();\n    fixture.componentInstance.iconSubject.next(faUser);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-user')).toBeTruthy();\n    expect(spy).not.toHaveBeenCalledWith();\n  });\n\n  it('should work with stream converted to toSignal and default value', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"icon()\"></fa-icon>',\n    })\n    class HostComponent {\n      iconSubject = new Subject<IconProp>();\n\n      icon = toSignal(this.iconSubject.pipe(startWith(faCircle)));\n    }\n\n    const spy = spyOn(console, 'error');\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-circle')).toBeTruthy();\n    fixture.componentInstance.iconSubject.next(faUser);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-user')).toBeTruthy();\n    expect(spy).not.toHaveBeenCalledWith();\n  });\n\n  it('should render a <title> element', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\" title=\"User John Smith\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg > title')).toBeTruthy();\n    expect(queryByCss(fixture, 'svg > title').innerHTML).toBe('User John Smith');\n  });\n\n  it('should have title attribute, when title input is set using Angular binding syntax', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: ` <fa-icon [icon]=\"faUser()\" [title]=\"'User John Smith'\"></fa-icon> `,\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n    expect(queryByCss(fixture, 'fa-icon').getAttribute('title')).toBe('User John Smith');\n  });\n\n  it('should use default icon prefix', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').getAttribute('data-prefix')).toEqual('fas');\n  });\n\n  it('should be able to override default icon prefix', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.defaultPrefix = 'far';\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg').getAttribute('data-prefix')).toEqual('far');\n  });\n\n  it('should have no fixed width by default', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeFalsy();\n  });\n\n  it('should be able to set fixed width with default config', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.fixedWidth = true;\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeTruthy();\n  });\n\n  it('should be able to set fixed width explicitly', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\" [fixedWidth]=\"fixedWidth()\"></fa-icon>',\n    })\n    class HostComponent {\n      fixedWidth = signal(true);\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.fixedWidth = false;\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeTruthy();\n  });\n\n  it('should be able to override global fixed width explicitly', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\" [fixedWidth]=\"fixedWidth()\"></fa-icon>',\n    })\n    class HostComponent {\n      fixedWidth = signal(false);\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.fixedWidth = true;\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeFalsy();\n  });\n\n  it('should use icon definition from the icon library', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should throw an error if icon definition is not found in the icon library', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"circle\"></fa-icon>',\n    })\n    class HostComponent {}\n\n    const fixture = initTest(HostComponent);\n    expect(() => fixture.detectChanges()).toThrow(\n      new Error('Could not find icon with iconName=circle and prefix=fas in the icon library.'),\n    );\n  });\n\n  it('should display a fallback icon when specified in the config, and icon attribute is missing', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"undefined\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(config: FaConfig) {\n        config.fallbackIcon = faCircle;\n      }\n    }\n\n    const spy = spyOn(console, 'error');\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-circle')).toBeTruthy();\n    expect(spy).not.toHaveBeenCalledWith();\n  });\n\n  it('should display the icon specified in the icon attribute when both it and the fallback icon config are present', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon [icon]=\"faUser()\"></fa-icon>',\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      constructor(config: FaConfig) {\n        config.fallbackIcon = faCircle;\n      }\n    }\n\n    const spy = spyOn(console, 'error');\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-user')).toBeTruthy();\n    expect(queryByCss(fixture, '.fa-circle')).toBeFalsy();\n    expect(spy).not.toHaveBeenCalledWith();\n  });\n\n  it('should warn when stackItemSize attribute is missing on icon inside fa-stack', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-stack><fa-icon [icon]=\"faCircle()\"></fa-icon></fa-stack>',\n    })\n    class HostComponent {\n      faCircle = signal(faCircle);\n    }\n\n    const spy = spyOn(console, 'error');\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(spy).toHaveBeenCalledWith(\n      'FontAwesome: fa-icon and fa-duotone-icon elements must specify stackItemSize attribute when wrapped into ' +\n        'fa-stack. Example: <fa-icon stackItemSize=\"2x\"></fa-icon>.',\n    );\n  });\n\n  it('should be able to set predefined rotate as a number', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\" [rotate]=\"90\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-rotate-90')).toBeTruthy();\n  });\n\n  it('should be able to set predefined rotate as a string', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\" rotate=\"90\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-rotate-90')).toBeTruthy();\n  });\n\n  it('should be able to set customer rotate', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-icon icon=\"user\" rotate=\"45deg\"></fa-icon>',\n    })\n    class HostComponent {\n      constructor(iconLibrary: FaIconLibrary) {\n        iconLibrary.addIcons(faUser, faUserRegular);\n      }\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    const svg = queryByCss(fixture, '.fa-rotate-by');\n    expect(svg).toBeTruthy();\n    expect(getComputedStyle(svg).getPropertyValue('--fa-rotate-angle')).toBe('45deg');\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]},{"ruleId":"@angular-eslint/prefer-standalone-component","replacedBy":["prefer-standalone"]},{"ruleId":"@angular-eslint/sort-ngmodule-metadata-arrays","replacedBy":[]}]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-fontawesome/src/lib/icon/icon.component.ts","messages":[{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":29,"column":1,"nodeType":"Decorator","messageId":"preferStandalone","endLine":38,"endColumn":3,"fix":{"range":[1160,1160],"text":"standalone: true,"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":29,"column":1,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":38,"endColumn":3,"fix":{"range":[1160,1160],"text":"standalone: true,"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import { DOCUMENT } from '@angular/common';\nimport { Component, inject, computed, model, ChangeDetectionStrategy } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport {\n  FaSymbol,\n  FlipProp,\n  icon,\n  IconDefinition as CoreIconDefinition,\n  IconParams,\n  parse,\n  PullProp,\n  RotateProp,\n  SizeProp,\n  Styles,\n  Transform,\n} from '@fortawesome/fontawesome-svg-core';\nimport { FaConfig } from '../config';\nimport { FaIconLibrary } from '../icon-library';\nimport { faWarnIfIconDefinitionMissing } from '../shared/errors/warn-if-icon-html-missing';\nimport { faWarnIfIconSpecMissing } from '../shared/errors/warn-if-icon-spec-missing';\nimport { AnimationProp, FaProps } from '../shared/models/props.model';\nimport { faClassList, isKnownRotateValue } from '../shared/utils/classlist.util';\nimport { ensureCss } from '../shared/utils/css';\nimport { faNormalizeIconSpec } from '../shared/utils/normalize-icon-spec.util';\nimport { FaStackItemSizeDirective } from '../stack/stack-item-size.directive';\nimport { FaStackComponent } from '../stack/stack.component';\nimport { IconDefinition, IconProp } from '../types';\n\n@Component({\n  selector: 'fa-icon',\n  template: ``,\n  host: {\n    class: 'ng-fa-icon',\n    '[attr.title]': 'title()',\n    '[innerHTML]': 'renderedIconHTML()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FaIconComponent {\n  readonly icon = model.required<IconProp>();\n\n  /**\n   * Specify a title for the icon.\n   *\n   * This text will be displayed in a tooltip on hover and presented to the\n   * screen readers.\n   */\n  readonly title = model<string>();\n\n  /**\n   * Icon animation.\n   *\n   * Most of the animations are only available when using Font Awesome 6. With\n   * Font Awesome 5, only 'spin' and 'spin-pulse' are supported.\n   */\n  readonly animation = model<AnimationProp>();\n\n  readonly mask = model<IconProp>();\n  readonly flip = model<FlipProp>();\n  readonly size = model<SizeProp>();\n  readonly pull = model<PullProp>();\n  readonly border = model<boolean>();\n  readonly inverse = model<boolean>();\n  readonly symbol = model<FaSymbol>();\n  readonly rotate = model<RotateProp | string>();\n  readonly fixedWidth = model<boolean>();\n  readonly transform = model<string | Transform>();\n\n  /**\n   * Specify the `role` attribute for the rendered <svg> element.\n   *\n   * @default 'img'\n   */\n  readonly a11yRole = model<string>();\n\n  readonly renderedIconHTML = computed(() => {\n    const iconValue = this.icon();\n    if (iconValue == null && this.config.fallbackIcon == null) {\n      faWarnIfIconSpecMissing();\n      return '';\n    }\n\n    const iconDefinition = this.findIconDefinition(iconValue ?? this.config.fallbackIcon);\n    if (!iconDefinition) {\n      return '';\n    }\n    const params = this.buildParams();\n    ensureCss(this.document, this.config);\n    const renderedIcon = icon(iconDefinition, params);\n    return this.sanitizer.bypassSecurityTrustHtml(renderedIcon.html.join('\\n'));\n  });\n\n  private readonly document = inject(DOCUMENT);\n  private readonly sanitizer = inject(DomSanitizer);\n  private readonly config = inject(FaConfig);\n  private readonly iconLibrary = inject(FaIconLibrary);\n  private readonly stackItem = inject(FaStackItemSizeDirective, { optional: true });\n  private readonly stack = inject(FaStackComponent, { optional: true });\n\n  constructor() {\n    if (this.stack != null && this.stackItem == null) {\n      console.error(\n        'FontAwesome: fa-icon and fa-duotone-icon elements must specify stackItemSize attribute when wrapped into ' +\n          'fa-stack. Example: <fa-icon stackItemSize=\"2x\"></fa-icon>.',\n      );\n    }\n  }\n\n  protected findIconDefinition(i: IconProp | IconDefinition): CoreIconDefinition | null {\n    const lookup = faNormalizeIconSpec(i, this.config.defaultPrefix);\n    if ('icon' in lookup) {\n      return lookup as CoreIconDefinition;\n    }\n\n    const definition = this.iconLibrary.getIconDefinition(lookup.prefix, lookup.iconName);\n    if (definition != null) {\n      return definition as CoreIconDefinition;\n    }\n\n    faWarnIfIconDefinitionMissing(lookup);\n    return null;\n  }\n\n  protected buildParams(): IconParams {\n    const fixedWidth = this.fixedWidth();\n    const classOpts: FaProps = {\n      flip: this.flip(),\n      animation: this.animation(),\n      border: this.border(),\n      inverse: this.inverse(),\n      size: this.size() || null,\n      pull: this.pull() || null,\n      rotate: this.rotate() || null,\n      fixedWidth: typeof fixedWidth === 'boolean' ? fixedWidth : this.config.fixedWidth,\n      stackItemSize: this.stackItem != null ? this.stackItem.stackItemSize() : null,\n    };\n\n    const transform = this.transform();\n    const parsedTransform = typeof transform === 'string' ? parse.transform(transform) : transform;\n\n    const styles: Styles = {};\n    if (classOpts.rotate != null && !isKnownRotateValue(classOpts.rotate)) {\n      styles['--fa-rotate-angle'] = `${classOpts.rotate}`;\n    }\n\n    return {\n      title: this.title(),\n      transform: parsedTransform,\n      classes: faClassList(classOpts),\n      mask: this.mask() != null ? this.findIconDefinition(this.mask()) : null,\n      symbol: this.symbol(),\n      attributes: {\n        role: this.a11yRole(),\n      },\n      styles,\n    };\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]},{"ruleId":"@angular-eslint/prefer-standalone-component","replacedBy":["prefer-standalone"]},{"ruleId":"@angular-eslint/sort-ngmodule-metadata-arrays","replacedBy":[]}]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-fontawesome/src/lib/layers/layers-counter.component.spec.ts","messages":[{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":6,"column":5,"nodeType":"Decorator","messageId":"preferStandalone","endLine":14,"endColumn":7,"fix":{"range":[257,262],"text":"true"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":6,"column":5,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":14,"endColumn":7,"fix":{"range":[257,262],"text":"true"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":6,"column":5,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":14,"endColumn":7,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[18,218],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { initTest, queryByCss } from '../../testing/helpers';\n\ndescribe('FaLayersCounterComponent', () => {\n  it('should render counter layer', () => {\n    @Component({\n      changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":23,"column":5,"nodeType":"Decorator","messageId":"preferStandalone","endLine":27,"endColumn":7,"fix":{"range":[737,742],"text":"true"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":23,"column":5,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":27,"endColumn":7,"fix":{"range":[737,742],"text":"true"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":23,"column":5,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":27,"endColumn":7,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[18,698],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { initTest, queryByCss } from '../../testing/helpers';\n\ndescribe('FaLayersCounterComponent', () => {\n  it('should render counter layer', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: `\n        <fa-layers>\n          <fa-layers-counter [content]=\"'Test'\"></fa-layers-counter>\n        </fa-layers>\n      `,\n    })\n    class HostComponent {}\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'fa-layers-counter > span')).toBeTruthy();\n  });\n\n  it('should throw an error if counter layer is used outside of fa-layers', () => {\n    @Component({\n      changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":36,"column":5,"nodeType":"Decorator","messageId":"preferStandalone","endLine":44,"endColumn":7,"fix":{"range":[1122,1127],"text":"true"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":36,"column":5,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":44,"endColumn":7,"fix":{"range":[1122,1127],"text":"true"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":36,"column":5,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":44,"endColumn":7,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[18,1083],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { initTest, queryByCss } from '../../testing/helpers';\n\ndescribe('FaLayersCounterComponent', () => {\n  it('should render counter layer', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: `\n        <fa-layers>\n          <fa-layers-counter [content]=\"'Test'\"></fa-layers-counter>\n        </fa-layers>\n      `,\n    })\n    class HostComponent {}\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'fa-layers-counter > span')).toBeTruthy();\n  });\n\n  it('should throw an error if counter layer is used outside of fa-layers', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: `<fa-layers-counter content=\"300\"></fa-layers-counter> `,\n    })\n    class HostComponent {}\n\n    expect(() => initTest(HostComponent)).toThrow(\n      new Error('FaLayersCounterComponent should be used as child of FaLayersComponent only.'),\n    );\n  });\n\n  it('should include position class', () => {\n    @Component({\n      changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":6,"fixableWarningCount":0,"source":"import { Component } from '@angular/core';\nimport { initTest, queryByCss } from '../../testing/helpers';\n\ndescribe('FaLayersCounterComponent', () => {\n  it('should render counter layer', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: `\n        <fa-layers>\n          <fa-layers-counter [content]=\"'Test'\"></fa-layers-counter>\n        </fa-layers>\n      `,\n    })\n    class HostComponent {}\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'fa-layers-counter > span')).toBeTruthy();\n  });\n\n  it('should throw an error if counter layer is used outside of fa-layers', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: `<fa-layers-counter content=\"300\"></fa-layers-counter> `,\n    })\n    class HostComponent {}\n\n    expect(() => initTest(HostComponent)).toThrow(\n      new Error('FaLayersCounterComponent should be used as child of FaLayersComponent only.'),\n    );\n  });\n\n  it('should include position class', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: `\n        <fa-layers>\n          <fa-layers-counter [position]=\"'bottom-left'\" [content]=\"'Test'\"></fa-layers-counter>\n        </fa-layers>\n      `,\n    })\n    class HostComponent {}\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-layers-bottom-left')).toBeTruthy();\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]},{"ruleId":"@angular-eslint/prefer-standalone-component","replacedBy":["prefer-standalone"]},{"ruleId":"@angular-eslint/sort-ngmodule-metadata-arrays","replacedBy":[]}]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-fontawesome/src/lib/layers/layers-counter.component.ts","messages":[{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":10,"column":1,"nodeType":"Decorator","messageId":"preferStandalone","endLine":18,"endColumn":3,"fix":{"range":[514,514],"text":"standalone: true,"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":10,"column":1,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":18,"endColumn":3,"fix":{"range":[514,514],"text":"standalone: true,"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import { DOCUMENT } from '@angular/common';\nimport { Component, inject, input, computed, ChangeDetectionStrategy } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { counter, CounterParams } from '@fortawesome/fontawesome-svg-core';\nimport { FaConfig } from '../config';\nimport { faWarnIfParentNotExist } from '../shared/errors/warn-if-parent-not-exist';\nimport { ensureCss } from '../shared/utils/css';\nimport { FaLayersComponent } from './layers.component';\n\n@Component({\n  selector: 'fa-layers-counter',\n  template: '',\n  host: {\n    class: 'ng-fa-layers-counter',\n    '[innerHTML]': 'renderedHTML()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FaLayersCounterComponent {\n  readonly content = input.required<string>();\n  readonly title = input<string>();\n  readonly position = input<'bottom-right' | 'bottom-left' | 'top-right' | 'top-left'>();\n\n  readonly renderedHTML = computed(() => {\n    const params = this.buildParams();\n    return this.updateContent(params);\n  });\n\n  private document = inject(DOCUMENT);\n  private config = inject(FaConfig);\n  private parent = inject(FaLayersComponent, { optional: true });\n  private sanitizer = inject(DomSanitizer);\n\n  constructor() {\n    faWarnIfParentNotExist(this.parent, 'FaLayersComponent', this.constructor.name);\n  }\n\n  protected buildParams(): CounterParams {\n    const position = this.position();\n    return {\n      title: this.title(),\n      classes: position != null ? [`fa-layers-${position}`] : undefined,\n    };\n  }\n\n  private updateContent(params: CounterParams) {\n    ensureCss(this.document, this.config);\n    return this.sanitizer.bypassSecurityTrustHtml(counter(this.content() || '', params).html.join(''));\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]},{"ruleId":"@angular-eslint/prefer-standalone-component","replacedBy":["prefer-standalone"]},{"ruleId":"@angular-eslint/sort-ngmodule-metadata-arrays","replacedBy":[]}]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-fontawesome/src/lib/layers/layers-text.component.spec.ts","messages":[{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":6,"column":5,"nodeType":"Decorator","messageId":"preferStandalone","endLine":14,"endColumn":7,"fix":{"range":[251,256],"text":"true"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":6,"column":5,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":14,"endColumn":7,"fix":{"range":[251,256],"text":"true"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":6,"column":5,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":14,"endColumn":7,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[18,212],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { initTest, queryByCss } from '../../testing/helpers';\n\ndescribe('FaLayersTextComponent', () => {\n  it('should render text layer', () => {\n    @Component({\n      changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":23,"column":5,"nodeType":"Decorator","messageId":"preferStandalone","endLine":27,"endColumn":7,"fix":{"range":[719,724],"text":"true"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":23,"column":5,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":27,"endColumn":7,"fix":{"range":[719,724],"text":"true"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":23,"column":5,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":27,"endColumn":7,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[18,680],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { initTest, queryByCss } from '../../testing/helpers';\n\ndescribe('FaLayersTextComponent', () => {\n  it('should render text layer', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: `\n        <fa-layers>\n          <fa-layers-text [content]=\"'Test'\"></fa-layers-text>\n        </fa-layers>\n      `,\n    })\n    class HostComponent {}\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'fa-layers-text > span')).toBeTruthy();\n  });\n\n  it('should throw an error if text layer is used outside of fa-layers', () => {\n    @Component({\n      changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"import { Component } from '@angular/core';\nimport { initTest, queryByCss } from '../../testing/helpers';\n\ndescribe('FaLayersTextComponent', () => {\n  it('should render text layer', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: `\n        <fa-layers>\n          <fa-layers-text [content]=\"'Test'\"></fa-layers-text>\n        </fa-layers>\n      `,\n    })\n    class HostComponent {}\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'fa-layers-text > span')).toBeTruthy();\n  });\n\n  it('should throw an error if text layer is used outside of fa-layers', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: `<fa-layers-text content=\"Test\"></fa-layers-text> `,\n    })\n    class HostComponent {}\n\n    expect(() => initTest(HostComponent)).toThrow(\n      new Error('FaLayersTextComponent should be used as child of FaLayersComponent only.'),\n    );\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]},{"ruleId":"@angular-eslint/prefer-standalone-component","replacedBy":["prefer-standalone"]},{"ruleId":"@angular-eslint/sort-ngmodule-metadata-arrays","replacedBy":[]}]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-fontawesome/src/lib/layers/layers-text.component.ts","messages":[{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":22,"column":1,"nodeType":"Decorator","messageId":"preferStandalone","endLine":30,"endColumn":3,"fix":{"range":[733,733],"text":"standalone: true,"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":22,"column":1,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":30,"endColumn":3,"fix":{"range":[733,733],"text":"standalone: true,"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import { DOCUMENT } from '@angular/common';\nimport { Component, inject, input, computed, ChangeDetectionStrategy } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport {\n  FlipProp,\n  parse,\n  PullProp,\n  RotateProp,\n  SizeProp,\n  Styles,\n  text,\n  TextParams,\n  Transform,\n} from '@fortawesome/fontawesome-svg-core';\nimport { FaConfig } from '../config';\nimport { faWarnIfParentNotExist } from '../shared/errors/warn-if-parent-not-exist';\nimport { FaProps } from '../shared/models/props.model';\nimport { faClassList, isKnownRotateValue } from '../shared/utils/classlist.util';\nimport { ensureCss } from '../shared/utils/css';\nimport { FaLayersComponent } from './layers.component';\n\n@Component({\n  selector: 'fa-layers-text',\n  template: '',\n  host: {\n    class: 'ng-fa-layers-text',\n    '[innerHTML]': 'renderedHTML()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FaLayersTextComponent {\n  readonly content = input.required<string>();\n  readonly title = input<string>();\n  readonly flip = input<FlipProp>();\n  readonly size = input<SizeProp>();\n  readonly pull = input<PullProp>();\n  readonly border = input<boolean>();\n  readonly inverse = input<boolean>();\n  readonly rotate = input<RotateProp | string>();\n  readonly fixedWidth = input<boolean>();\n  readonly transform = input<string | Transform>();\n\n  readonly renderedHTML = computed(() => {\n    const params = this.buildParams();\n    return this.updateContent(params);\n  });\n\n  private readonly document = inject(DOCUMENT);\n  private readonly config = inject(FaConfig);\n  private readonly parent = inject(FaLayersComponent, { optional: true });\n  private readonly sanitizer = inject(DomSanitizer);\n\n  constructor() {\n    faWarnIfParentNotExist(this.parent, 'FaLayersComponent', this.constructor.name);\n  }\n\n  /**\n   * Updating params by component props.\n   */\n  protected buildParams(): TextParams {\n    const classOpts: FaProps = {\n      flip: this.flip(),\n      border: this.border(),\n      inverse: this.inverse(),\n      size: this.size() || null,\n      pull: this.pull() || null,\n      rotate: this.rotate() || null,\n      fixedWidth: this.fixedWidth(),\n    };\n\n    const transform = this.transform();\n    const parsedTransform = typeof transform === 'string' ? parse.transform(transform) : transform;\n\n    const styles: Styles = {};\n    if (classOpts.rotate != null && !isKnownRotateValue(classOpts.rotate)) {\n      styles['--fa-rotate-angle'] = `${classOpts.rotate}`;\n    }\n\n    return {\n      transform: parsedTransform,\n      classes: faClassList(classOpts),\n      title: this.title(),\n      styles,\n    };\n  }\n\n  private updateContent(params: TextParams) {\n    ensureCss(this.document, this.config);\n    return this.sanitizer.bypassSecurityTrustHtml(text(this.content() || '', params).html.join('\\n'));\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]},{"ruleId":"@angular-eslint/prefer-standalone-component","replacedBy":["prefer-standalone"]},{"ruleId":"@angular-eslint/sort-ngmodule-metadata-arrays","replacedBy":[]}]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-fontawesome/src/lib/layers/layers.component.spec.ts","messages":[{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":11,"column":5,"nodeType":"Decorator","messageId":"preferStandalone","endLine":21,"endColumn":7,"fix":{"range":[532,537],"text":"true"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":11,"column":5,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":21,"endColumn":7,"fix":{"range":[532,537],"text":"true"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":11,"column":5,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":21,"endColumn":7,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[26,493],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\nimport { SizeProp } from '@fortawesome/fontawesome-svg-core';\nimport { faCoffee, faUser } from '@fortawesome/free-solid-svg-icons';\nimport { faDummy, initTest, queryByCss } from '../../testing/helpers';\nimport { FaConfig } from '../config';\n\ndescribe('FaLayersComponent', () => {\n  it('should render layers icon', () => {\n    @Component({\n      changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":33,"column":5,"nodeType":"Decorator","messageId":"preferStandalone","endLine":43,"endColumn":7,"fix":{"range":[1124,1129],"text":"true"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":33,"column":5,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":43,"endColumn":7,"fix":{"range":[1124,1129],"text":"true"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":33,"column":5,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":43,"endColumn":7,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[26,1085],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\nimport { SizeProp } from '@fortawesome/fontawesome-svg-core';\nimport { faCoffee, faUser } from '@fortawesome/free-solid-svg-icons';\nimport { faDummy, initTest, queryByCss } from '../../testing/helpers';\nimport { FaConfig } from '../config';\n\ndescribe('FaLayersComponent', () => {\n  it('should render layers icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: `\n        <fa-layers>\n          <fa-icon [icon]=\"faUser()\"></fa-icon>\n          <fa-icon [icon]=\"faCoffee()\"></fa-icon>\n          <fa-layers-text [content]=\"'User with coffee'\"></fa-layers-text>\n        </fa-layers>\n      `,\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      faCoffee = signal(faCoffee);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should include size class', () => {\n    @Component({\n      changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":55,"column":5,"nodeType":"Decorator","messageId":"preferStandalone","endLine":59,"endColumn":7,"fix":{"range":[1750,1755],"text":"true"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":55,"column":5,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":59,"endColumn":7,"fix":{"range":[1750,1755],"text":"true"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":55,"column":5,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":59,"endColumn":7,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[26,1711],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\nimport { SizeProp } from '@fortawesome/fontawesome-svg-core';\nimport { faCoffee, faUser } from '@fortawesome/free-solid-svg-icons';\nimport { faDummy, initTest, queryByCss } from '../../testing/helpers';\nimport { FaConfig } from '../config';\n\ndescribe('FaLayersComponent', () => {\n  it('should render layers icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: `\n        <fa-layers>\n          <fa-icon [icon]=\"faUser()\"></fa-icon>\n          <fa-icon [icon]=\"faCoffee()\"></fa-icon>\n          <fa-layers-text [content]=\"'User with coffee'\"></fa-layers-text>\n        </fa-layers>\n      `,\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      faCoffee = signal(faCoffee);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should include size class', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: `\n        <fa-layers size=\"2x\">\n          <fa-icon [icon]=\"faUser()\"></fa-icon>\n          <fa-icon [icon]=\"faCoffee()\"></fa-icon>\n          <fa-layers-text [content]=\"'User with coffee'\"></fa-layers-text>\n        </fa-layers>\n      `,\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      faCoffee = signal(faCoffee);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-2x')).toBeTruthy();\n  });\n\n  it('should include fixed width when set explicitly', () => {\n    @Component({\n      changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":70,"column":5,"nodeType":"Decorator","messageId":"preferStandalone","endLine":74,"endColumn":7,"fix":{"range":[2201,2206],"text":"true"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":70,"column":5,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":74,"endColumn":7,"fix":{"range":[2201,2206],"text":"true"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":70,"column":5,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":74,"endColumn":7,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[26,2162],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\nimport { SizeProp } from '@fortawesome/fontawesome-svg-core';\nimport { faCoffee, faUser } from '@fortawesome/free-solid-svg-icons';\nimport { faDummy, initTest, queryByCss } from '../../testing/helpers';\nimport { FaConfig } from '../config';\n\ndescribe('FaLayersComponent', () => {\n  it('should render layers icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: `\n        <fa-layers>\n          <fa-icon [icon]=\"faUser()\"></fa-icon>\n          <fa-icon [icon]=\"faCoffee()\"></fa-icon>\n          <fa-layers-text [content]=\"'User with coffee'\"></fa-layers-text>\n        </fa-layers>\n      `,\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      faCoffee = signal(faCoffee);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should include size class', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: `\n        <fa-layers size=\"2x\">\n          <fa-icon [icon]=\"faUser()\"></fa-icon>\n          <fa-icon [icon]=\"faCoffee()\"></fa-icon>\n          <fa-layers-text [content]=\"'User with coffee'\"></fa-layers-text>\n        </fa-layers>\n      `,\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      faCoffee = signal(faCoffee);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-2x')).toBeTruthy();\n  });\n\n  it('should include fixed width when set explicitly', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-layers [fixedWidth]=\"true\"></fa-layers>',\n    })\n    class HostComponent {}\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.fixedWidth = false;\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeTruthy();\n  });\n\n  it('should include fixed width when set with global config', () => {\n    @Component({\n      changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":85,"column":5,"nodeType":"Decorator","messageId":"preferStandalone","endLine":95,"endColumn":7,"fix":{"range":[2627,2632],"text":"true"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":85,"column":5,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":95,"endColumn":7,"fix":{"range":[2627,2632],"text":"true"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":85,"column":5,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":95,"endColumn":7,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[26,2588],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\nimport { SizeProp } from '@fortawesome/fontawesome-svg-core';\nimport { faCoffee, faUser } from '@fortawesome/free-solid-svg-icons';\nimport { faDummy, initTest, queryByCss } from '../../testing/helpers';\nimport { FaConfig } from '../config';\n\ndescribe('FaLayersComponent', () => {\n  it('should render layers icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: `\n        <fa-layers>\n          <fa-icon [icon]=\"faUser()\"></fa-icon>\n          <fa-icon [icon]=\"faCoffee()\"></fa-icon>\n          <fa-layers-text [content]=\"'User with coffee'\"></fa-layers-text>\n        </fa-layers>\n      `,\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      faCoffee = signal(faCoffee);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should include size class', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: `\n        <fa-layers size=\"2x\">\n          <fa-icon [icon]=\"faUser()\"></fa-icon>\n          <fa-icon [icon]=\"faCoffee()\"></fa-icon>\n          <fa-layers-text [content]=\"'User with coffee'\"></fa-layers-text>\n        </fa-layers>\n      `,\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      faCoffee = signal(faCoffee);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-2x')).toBeTruthy();\n  });\n\n  it('should include fixed width when set explicitly', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-layers [fixedWidth]=\"true\"></fa-layers>',\n    })\n    class HostComponent {}\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.fixedWidth = false;\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeTruthy();\n  });\n\n  it('should include fixed width when set with global config', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-layers></fa-layers>',\n    })\n    class HostComponent {}\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.fixedWidth = true;\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeTruthy();\n  });\n\n  it('should not include fixed width when set explicitly', () => {\n    @Component({\n      changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":109,"column":5,"nodeType":"Decorator","messageId":"preferStandalone","endLine":120,"endColumn":7,"fix":{"range":[3354,3359],"text":"true"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":109,"column":5,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":120,"endColumn":7,"fix":{"range":[3354,3359],"text":"true"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":109,"column":5,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":120,"endColumn":7,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[26,3315],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\nimport { SizeProp } from '@fortawesome/fontawesome-svg-core';\nimport { faCoffee, faUser } from '@fortawesome/free-solid-svg-icons';\nimport { faDummy, initTest, queryByCss } from '../../testing/helpers';\nimport { FaConfig } from '../config';\n\ndescribe('FaLayersComponent', () => {\n  it('should render layers icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: `\n        <fa-layers>\n          <fa-icon [icon]=\"faUser()\"></fa-icon>\n          <fa-icon [icon]=\"faCoffee()\"></fa-icon>\n          <fa-layers-text [content]=\"'User with coffee'\"></fa-layers-text>\n        </fa-layers>\n      `,\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      faCoffee = signal(faCoffee);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should include size class', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: `\n        <fa-layers size=\"2x\">\n          <fa-icon [icon]=\"faUser()\"></fa-icon>\n          <fa-icon [icon]=\"faCoffee()\"></fa-icon>\n          <fa-layers-text [content]=\"'User with coffee'\"></fa-layers-text>\n        </fa-layers>\n      `,\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      faCoffee = signal(faCoffee);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-2x')).toBeTruthy();\n  });\n\n  it('should include fixed width when set explicitly', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-layers [fixedWidth]=\"true\"></fa-layers>',\n    })\n    class HostComponent {}\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.fixedWidth = false;\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeTruthy();\n  });\n\n  it('should include fixed width when set with global config', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-layers></fa-layers>',\n    })\n    class HostComponent {}\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.fixedWidth = true;\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeTruthy();\n  });\n\n  it('should not include fixed width when set explicitly', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: `\n        <fa-layers [fixedWidth]=\"false\">\n          <fa-icon [icon]=\"faUser()\"></fa-icon>\n          <fa-icon [icon]=\"faCoffee()\"></fa-icon>\n          <fa-layers-text [content]=\"'User with coffee'\"></fa-layers-text>\n        </fa-layers>\n      `,\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      faCoffee = signal(faCoffee);\n    }\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.fixedWidth = true;\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'fa-layers.fa-fw')).toBeFalsy();\n  });\n\n  it('should allow setting custom class on the host element', () => {\n    @Component({\n      changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":139,"column":5,"nodeType":"Decorator","messageId":"preferStandalone","endLine":148,"endColumn":7,"fix":{"range":[4707,4712],"text":"true"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":139,"column":5,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":148,"endColumn":7,"fix":{"range":[4707,4712],"text":"true"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":139,"column":5,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":148,"endColumn":7,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[26,4668],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\nimport { SizeProp } from '@fortawesome/fontawesome-svg-core';\nimport { faCoffee, faUser } from '@fortawesome/free-solid-svg-icons';\nimport { faDummy, initTest, queryByCss } from '../../testing/helpers';\nimport { FaConfig } from '../config';\n\ndescribe('FaLayersComponent', () => {\n  it('should render layers icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: `\n        <fa-layers>\n          <fa-icon [icon]=\"faUser()\"></fa-icon>\n          <fa-icon [icon]=\"faCoffee()\"></fa-icon>\n          <fa-layers-text [content]=\"'User with coffee'\"></fa-layers-text>\n        </fa-layers>\n      `,\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      faCoffee = signal(faCoffee);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should include size class', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: `\n        <fa-layers size=\"2x\">\n          <fa-icon [icon]=\"faUser()\"></fa-icon>\n          <fa-icon [icon]=\"faCoffee()\"></fa-icon>\n          <fa-layers-text [content]=\"'User with coffee'\"></fa-layers-text>\n        </fa-layers>\n      `,\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      faCoffee = signal(faCoffee);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-2x')).toBeTruthy();\n  });\n\n  it('should include fixed width when set explicitly', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-layers [fixedWidth]=\"true\"></fa-layers>',\n    })\n    class HostComponent {}\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.fixedWidth = false;\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeTruthy();\n  });\n\n  it('should include fixed width when set with global config', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-layers></fa-layers>',\n    })\n    class HostComponent {}\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.fixedWidth = true;\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeTruthy();\n  });\n\n  it('should not include fixed width when set explicitly', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: `\n        <fa-layers [fixedWidth]=\"false\">\n          <fa-icon [icon]=\"faUser()\"></fa-icon>\n          <fa-icon [icon]=\"faCoffee()\"></fa-icon>\n          <fa-layers-text [content]=\"'User with coffee'\"></fa-layers-text>\n        </fa-layers>\n      `,\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      faCoffee = signal(faCoffee);\n    }\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.fixedWidth = true;\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'fa-layers.fa-fw')).toBeFalsy();\n  });\n\n  it('should allow setting custom class on the host element', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: `\n        <fa-layers class=\"custom-class\" [fixedWidth]=\"fixedWidth()\" [size]=\"size()\"></fa-layers>\n        <fa-layers [class.custom-class]=\"true\" [fixedWidth]=\"fixedWidth()\" [size]=\"size()\"></fa-layers>\n        <fa-layers [ngClass]=\"{ 'custom-class': true }\" [fixedWidth]=\"fixedWidth()\" [size]=\"size()\"></fa-layers>\n        <fa-layers [fixedWidth]=\"fixedWidth()\" [size]=\"size()\" class=\"custom-class\"></fa-layers>\n        <fa-layers [fixedWidth]=\"fixedWidth()\" [size]=\"size()\" [class.custom-class]=\"true\"></fa-layers>\n        <fa-layers [fixedWidth]=\"fixedWidth()\" [size]=\"size()\" [ngClass]=\"{ 'custom-class': true }\"></fa-layers>\n      `,\n    })\n    class HostComponent {\n      fixedWidth = signal(true);\n      size = signal<SizeProp>('4x');\n    }\n\n    const fixture = initTest(HostComponent);\n\n    fixture.detectChanges();\n    const elements = fixture.debugElement.queryAll(By.css('fa-layers'));\n    for (const element of elements) {\n      expect(element.nativeElement.className).toContain('custom-class');\n      expect(element.nativeElement.className).toContain('fa-layers');\n      expect(element.nativeElement.className).toContain('fa-fw');\n      expect(element.nativeElement.className).toContain('fa-4x');\n    }\n  });\n\n  it('should support duotone icons', () => {\n    @Component({\n      changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":159,"column":5,"nodeType":"Decorator","messageId":"preferStandalone","endLine":170,"endColumn":7,"fix":{"range":[5255,5260],"text":"true"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":159,"column":5,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":170,"endColumn":7,"fix":{"range":[5255,5260],"text":"true"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":159,"column":5,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":170,"endColumn":7,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[26,5216],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\nimport { SizeProp } from '@fortawesome/fontawesome-svg-core';\nimport { faCoffee, faUser } from '@fortawesome/free-solid-svg-icons';\nimport { faDummy, initTest, queryByCss } from '../../testing/helpers';\nimport { FaConfig } from '../config';\n\ndescribe('FaLayersComponent', () => {\n  it('should render layers icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: `\n        <fa-layers>\n          <fa-icon [icon]=\"faUser()\"></fa-icon>\n          <fa-icon [icon]=\"faCoffee()\"></fa-icon>\n          <fa-layers-text [content]=\"'User with coffee'\"></fa-layers-text>\n        </fa-layers>\n      `,\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      faCoffee = signal(faCoffee);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should include size class', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: `\n        <fa-layers size=\"2x\">\n          <fa-icon [icon]=\"faUser()\"></fa-icon>\n          <fa-icon [icon]=\"faCoffee()\"></fa-icon>\n          <fa-layers-text [content]=\"'User with coffee'\"></fa-layers-text>\n        </fa-layers>\n      `,\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      faCoffee = signal(faCoffee);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-2x')).toBeTruthy();\n  });\n\n  it('should include fixed width when set explicitly', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-layers [fixedWidth]=\"true\"></fa-layers>',\n    })\n    class HostComponent {}\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.fixedWidth = false;\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeTruthy();\n  });\n\n  it('should include fixed width when set with global config', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-layers></fa-layers>',\n    })\n    class HostComponent {}\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.fixedWidth = true;\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeTruthy();\n  });\n\n  it('should not include fixed width when set explicitly', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: `\n        <fa-layers [fixedWidth]=\"false\">\n          <fa-icon [icon]=\"faUser()\"></fa-icon>\n          <fa-icon [icon]=\"faCoffee()\"></fa-icon>\n          <fa-layers-text [content]=\"'User with coffee'\"></fa-layers-text>\n        </fa-layers>\n      `,\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      faCoffee = signal(faCoffee);\n    }\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.fixedWidth = true;\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'fa-layers.fa-fw')).toBeFalsy();\n  });\n\n  it('should allow setting custom class on the host element', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: `\n        <fa-layers class=\"custom-class\" [fixedWidth]=\"fixedWidth()\" [size]=\"size()\"></fa-layers>\n        <fa-layers [class.custom-class]=\"true\" [fixedWidth]=\"fixedWidth()\" [size]=\"size()\"></fa-layers>\n        <fa-layers [ngClass]=\"{ 'custom-class': true }\" [fixedWidth]=\"fixedWidth()\" [size]=\"size()\"></fa-layers>\n        <fa-layers [fixedWidth]=\"fixedWidth()\" [size]=\"size()\" class=\"custom-class\"></fa-layers>\n        <fa-layers [fixedWidth]=\"fixedWidth()\" [size]=\"size()\" [class.custom-class]=\"true\"></fa-layers>\n        <fa-layers [fixedWidth]=\"fixedWidth()\" [size]=\"size()\" [ngClass]=\"{ 'custom-class': true }\"></fa-layers>\n      `,\n    })\n    class HostComponent {\n      fixedWidth = signal(true);\n      size = signal<SizeProp>('4x');\n    }\n\n    const fixture = initTest(HostComponent);\n\n    fixture.detectChanges();\n    const elements = fixture.debugElement.queryAll(By.css('fa-layers'));\n    for (const element of elements) {\n      expect(element.nativeElement.className).toContain('custom-class');\n      expect(element.nativeElement.className).toContain('fa-layers');\n      expect(element.nativeElement.className).toContain('fa-fw');\n      expect(element.nativeElement.className).toContain('fa-4x');\n    }\n  });\n\n  it('should support duotone icons', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: `\n        <fa-layers>\n          <fa-duotone-icon [icon]=\"faDummy()\"></fa-duotone-icon>\n          <fa-layers-text [content]=\"'Dummy'\"></fa-layers-text>\n        </fa-layers>\n      `,\n    })\n    class HostComponent {\n      faDummy = signal(faDummy);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'fa-duotone-icon')).toBeTruthy();\n  });\n\n  it('should support icons wrapped into ng-container', () => {\n    @Component({\n      changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]}],"suppressedMessages":[],"errorCount":24,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":16,"fixableWarningCount":0,"source":"import { Component, signal } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\nimport { SizeProp } from '@fortawesome/fontawesome-svg-core';\nimport { faCoffee, faUser } from '@fortawesome/free-solid-svg-icons';\nimport { faDummy, initTest, queryByCss } from '../../testing/helpers';\nimport { FaConfig } from '../config';\n\ndescribe('FaLayersComponent', () => {\n  it('should render layers icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: `\n        <fa-layers>\n          <fa-icon [icon]=\"faUser()\"></fa-icon>\n          <fa-icon [icon]=\"faCoffee()\"></fa-icon>\n          <fa-layers-text [content]=\"'User with coffee'\"></fa-layers-text>\n        </fa-layers>\n      `,\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      faCoffee = signal(faCoffee);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'svg')).toBeTruthy();\n  });\n\n  it('should include size class', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: `\n        <fa-layers size=\"2x\">\n          <fa-icon [icon]=\"faUser()\"></fa-icon>\n          <fa-icon [icon]=\"faCoffee()\"></fa-icon>\n          <fa-layers-text [content]=\"'User with coffee'\"></fa-layers-text>\n        </fa-layers>\n      `,\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      faCoffee = signal(faCoffee);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-2x')).toBeTruthy();\n  });\n\n  it('should include fixed width when set explicitly', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-layers [fixedWidth]=\"true\"></fa-layers>',\n    })\n    class HostComponent {}\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.fixedWidth = false;\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeTruthy();\n  });\n\n  it('should include fixed width when set with global config', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: '<fa-layers></fa-layers>',\n    })\n    class HostComponent {}\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.fixedWidth = true;\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-fw')).toBeTruthy();\n  });\n\n  it('should not include fixed width when set explicitly', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: `\n        <fa-layers [fixedWidth]=\"false\">\n          <fa-icon [icon]=\"faUser()\"></fa-icon>\n          <fa-icon [icon]=\"faCoffee()\"></fa-icon>\n          <fa-layers-text [content]=\"'User with coffee'\"></fa-layers-text>\n        </fa-layers>\n      `,\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      faCoffee = signal(faCoffee);\n    }\n\n    const fixture = initTest(HostComponent);\n    const config = TestBed.inject(FaConfig);\n    config.fixedWidth = true;\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'fa-layers.fa-fw')).toBeFalsy();\n  });\n\n  it('should allow setting custom class on the host element', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: `\n        <fa-layers class=\"custom-class\" [fixedWidth]=\"fixedWidth()\" [size]=\"size()\"></fa-layers>\n        <fa-layers [class.custom-class]=\"true\" [fixedWidth]=\"fixedWidth()\" [size]=\"size()\"></fa-layers>\n        <fa-layers [ngClass]=\"{ 'custom-class': true }\" [fixedWidth]=\"fixedWidth()\" [size]=\"size()\"></fa-layers>\n        <fa-layers [fixedWidth]=\"fixedWidth()\" [size]=\"size()\" class=\"custom-class\"></fa-layers>\n        <fa-layers [fixedWidth]=\"fixedWidth()\" [size]=\"size()\" [class.custom-class]=\"true\"></fa-layers>\n        <fa-layers [fixedWidth]=\"fixedWidth()\" [size]=\"size()\" [ngClass]=\"{ 'custom-class': true }\"></fa-layers>\n      `,\n    })\n    class HostComponent {\n      fixedWidth = signal(true);\n      size = signal<SizeProp>('4x');\n    }\n\n    const fixture = initTest(HostComponent);\n\n    fixture.detectChanges();\n    const elements = fixture.debugElement.queryAll(By.css('fa-layers'));\n    for (const element of elements) {\n      expect(element.nativeElement.className).toContain('custom-class');\n      expect(element.nativeElement.className).toContain('fa-layers');\n      expect(element.nativeElement.className).toContain('fa-fw');\n      expect(element.nativeElement.className).toContain('fa-4x');\n    }\n  });\n\n  it('should support duotone icons', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: `\n        <fa-layers>\n          <fa-duotone-icon [icon]=\"faDummy()\"></fa-duotone-icon>\n          <fa-layers-text [content]=\"'Dummy'\"></fa-layers-text>\n        </fa-layers>\n      `,\n    })\n    class HostComponent {\n      faDummy = signal(faDummy);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'fa-duotone-icon')).toBeTruthy();\n  });\n\n  it('should support icons wrapped into ng-container', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: `\n        <fa-layers>\n          <ng-container>\n            <fa-icon [icon]=\"faUser()\"></fa-icon>\n            <fa-layers-text [content]=\"'Dummy'\"></fa-layers-text>\n          </ng-container>\n        </fa-layers>\n      `,\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'fa-icon')).toBeTruthy();\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]},{"ruleId":"@angular-eslint/prefer-standalone-component","replacedBy":["prefer-standalone"]},{"ruleId":"@angular-eslint/sort-ngmodule-metadata-arrays","replacedBy":[]}]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-fontawesome/src/lib/layers/layers.component.ts","messages":[{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":10,"column":1,"nodeType":"Decorator","messageId":"preferStandalone","endLine":17,"endColumn":3,"fix":{"range":[341,341],"text":"standalone: true,"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":10,"column":1,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":17,"endColumn":3,"fix":{"range":[341,341],"text":"standalone: true,"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import { DOCUMENT } from '@angular/common';\nimport { Component, inject, OnInit, input, computed, ChangeDetectionStrategy } from '@angular/core';\nimport { SizeProp } from '@fortawesome/fontawesome-svg-core';\nimport { FaConfig } from '../config';\nimport { ensureCss } from '../shared/utils/css';\n\n/**\n * Fontawesome layers.\n */\n@Component({\n  selector: 'fa-layers',\n  template: `<ng-content></ng-content>`,\n  host: {\n    '[class]': 'classes()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FaLayersComponent implements OnInit {\n  readonly size = input<SizeProp>();\n  readonly fixedWidth = input<boolean>();\n  readonly faFw = computed(() => {\n    const fixedWidth = this.fixedWidth();\n    return typeof fixedWidth === 'boolean' ? fixedWidth : this.config.fixedWidth;\n  });\n  readonly classes = computed(() => {\n    const sizeValue = this.size();\n    const sizeClass = sizeValue ? { [`fa-${sizeValue}`]: true } : {};\n    return {\n      ...sizeClass,\n      'fa-fw': this.faFw(),\n      'fa-layers': true,\n    };\n  });\n\n  private readonly document = inject(DOCUMENT);\n  private readonly config = inject(FaConfig);\n\n  ngOnInit() {\n    ensureCss(this.document, this.config);\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]},{"ruleId":"@angular-eslint/prefer-standalone-component","replacedBy":["prefer-standalone"]},{"ruleId":"@angular-eslint/sort-ngmodule-metadata-arrays","replacedBy":[]}]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-fontawesome/src/lib/stack/stack-item-size.directive.spec.ts","messages":[{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":21,"column":5,"nodeType":"Decorator","messageId":"preferStandalone","endLine":30,"endColumn":7,"fix":{"range":[971,976],"text":"true"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":21,"column":5,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":30,"endColumn":7,"fix":{"range":[971,976],"text":"true"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":21,"column":5,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":30,"endColumn":7,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[44,932],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { faCircle, faUser } from '@fortawesome/free-solid-svg-icons';\nimport { FaIconComponent } from '../icon/icon.component';\nimport { FaStackItemSizeDirective } from './stack-item-size.directive';\nimport { FaStackComponent } from './stack.component';\n\nconst initTest = <T>(component: Type<T>): ComponentFixture<T> => {\n  TestBed.configureTestingModule({\n    imports: [FaStackComponent, FaStackItemSizeDirective, FaIconComponent],\n    declarations: [component],\n  });\n  return TestBed.createComponent(component);\n};\n\nconst queryByCss = (fixture: ComponentFixture<any>, cssQuery: string): ElementRef =>\n  fixture.nativeElement.querySelector(cssQuery);\n\ndescribe('FaStackItemSizeDirective', () => {\n  it('should attach fa-stack-1x or fa-stack-2x classes to icons', () => {\n    @Component({\n      changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":43,"column":5,"nodeType":"Decorator","messageId":"preferStandalone","endLine":52,"endColumn":7,"fix":{"range":[1660,1665],"text":"true"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":43,"column":5,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":52,"endColumn":7,"fix":{"range":[1660,1665],"text":"true"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":43,"column":5,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":52,"endColumn":7,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[44,1621],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { faCircle, faUser } from '@fortawesome/free-solid-svg-icons';\nimport { FaIconComponent } from '../icon/icon.component';\nimport { FaStackItemSizeDirective } from './stack-item-size.directive';\nimport { FaStackComponent } from './stack.component';\n\nconst initTest = <T>(component: Type<T>): ComponentFixture<T> => {\n  TestBed.configureTestingModule({\n    imports: [FaStackComponent, FaStackItemSizeDirective, FaIconComponent],\n    declarations: [component],\n  });\n  return TestBed.createComponent(component);\n};\n\nconst queryByCss = (fixture: ComponentFixture<any>, cssQuery: string): ElementRef =>\n  fixture.nativeElement.querySelector(cssQuery);\n\ndescribe('FaStackItemSizeDirective', () => {\n  it('should attach fa-stack-1x or fa-stack-2x classes to icons', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: `\n        <fa-stack>\n          <fa-icon [icon]=\"faCircle()\" stackItemSize=\"2x\"></fa-icon>\n          <fa-icon [icon]=\"faUser()\" [inverse]=\"true\" stackItemSize=\"1x\"></fa-icon>\n        </fa-stack>\n      `,\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      faCircle = signal(faCircle);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-stack-1x')).toBeTruthy();\n    expect(queryByCss(fixture, '.fa-stack-2x')).toBeTruthy();\n  });\n\n  it('should throw an error when setting size input together with stackItemSize', () => {\n    @Component({\n      changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"import { Component, ElementRef, signal, Type } from '@angular/core';\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { faCircle, faUser } from '@fortawesome/free-solid-svg-icons';\nimport { FaIconComponent } from '../icon/icon.component';\nimport { FaStackItemSizeDirective } from './stack-item-size.directive';\nimport { FaStackComponent } from './stack.component';\n\nconst initTest = <T>(component: Type<T>): ComponentFixture<T> => {\n  TestBed.configureTestingModule({\n    imports: [FaStackComponent, FaStackItemSizeDirective, FaIconComponent],\n    declarations: [component],\n  });\n  return TestBed.createComponent(component);\n};\n\nconst queryByCss = (fixture: ComponentFixture<any>, cssQuery: string): ElementRef =>\n  fixture.nativeElement.querySelector(cssQuery);\n\ndescribe('FaStackItemSizeDirective', () => {\n  it('should attach fa-stack-1x or fa-stack-2x classes to icons', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: `\n        <fa-stack>\n          <fa-icon [icon]=\"faCircle()\" stackItemSize=\"2x\"></fa-icon>\n          <fa-icon [icon]=\"faUser()\" [inverse]=\"true\" stackItemSize=\"1x\"></fa-icon>\n        </fa-stack>\n      `,\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      faCircle = signal(faCircle);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-stack-1x')).toBeTruthy();\n    expect(queryByCss(fixture, '.fa-stack-2x')).toBeTruthy();\n  });\n\n  it('should throw an error when setting size input together with stackItemSize', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: `\n        <fa-stack>\n          <fa-icon [icon]=\"faCircle()\" stackItemSize=\"2x\"></fa-icon>\n          <fa-icon [icon]=\"faUser()\" [inverse]=\"true\" size=\"1x\" stackItemSize=\"1x\"></fa-icon>\n        </fa-stack>\n      `,\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      faCircle = signal(faCircle);\n    }\n\n    const fixture = initTest(HostComponent);\n\n    expect(() => fixture.detectChanges()).toThrow(\n      new Error(\n        'fa-icon is not allowed to customize size when used inside fa-stack. ' +\n          'Set size on the enclosing fa-stack instead: <fa-stack size=\"4x\">...</fa-stack>.',\n      ),\n    );\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]},{"ruleId":"@angular-eslint/prefer-standalone-component","replacedBy":["prefer-standalone"]},{"ruleId":"@angular-eslint/sort-ngmodule-metadata-arrays","replacedBy":[]}]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-fontawesome/src/lib/stack/stack-item-size.directive.ts","messages":[{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The directive `standalone` property should be set to `true`","line":5,"column":1,"nodeType":"Decorator","messageId":"preferStandalone","endLine":8,"endColumn":3,"fix":{"range":[255,255],"text":"standalone: true,"}}],"suppressedMessages":[{"ruleId":"@angular-eslint/directive-selector","severity":2,"message":"The selector should start with one of these prefixes: \"fa\" (https://angular.dev/style-guide#style-02-08)","line":7,"column":13,"nodeType":"Literal","messageId":"prefixFailure","endLine":7,"endColumn":68,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { Directive, effect, input } from '@angular/core';\nimport { SizeProp } from '@fortawesome/fontawesome-svg-core';\nimport { FaStackComponent } from './stack.component';\n\n@Directive({\n  // eslint-disable-next-line @angular-eslint/directive-selector\n  selector: 'fa-icon[stackItemSize],fa-duotone-icon[stackItemSize]',\n})\nexport class FaStackItemSizeDirective {\n  /**\n   * Specify whether icon inside {@link FaStackComponent} should be rendered in\n   * regular size (1x) or as a larger icon (2x).\n   */\n  readonly stackItemSize = input<'1x' | '2x'>('1x');\n\n  /**\n   * @internal\n   */\n  readonly size = input<SizeProp>();\n\n  _effect = effect(() => {\n    const size = this.size();\n    if (size) {\n      throw new Error(\n        'fa-icon is not allowed to customize size when used inside fa-stack. ' +\n          'Set size on the enclosing fa-stack instead: <fa-stack size=\"4x\">...</fa-stack>.',\n      );\n    }\n  });\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]},{"ruleId":"@angular-eslint/prefer-standalone-component","replacedBy":["prefer-standalone"]},{"ruleId":"@angular-eslint/sort-ngmodule-metadata-arrays","replacedBy":[]}]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-fontawesome/src/lib/stack/stack.component.spec.ts","messages":[{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":7,"column":5,"nodeType":"Decorator","messageId":"preferStandalone","endLine":16,"endColumn":7,"fix":{"range":[333,338],"text":"true"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":7,"column":5,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":16,"endColumn":7,"fix":{"range":[333,338],"text":"true"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":7,"column":5,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":16,"endColumn":7,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[26,294],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { faCircle, faUser } from '@fortawesome/free-solid-svg-icons';\nimport { faDummy, initTest, queryByCss } from '../../testing/helpers';\n\ndescribe('FaStackComponent', () => {\n  it('should render stack icon', () => {\n    @Component({\n      changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":28,"column":5,"nodeType":"Decorator","messageId":"preferStandalone","endLine":37,"endColumn":7,"fix":{"range":[903,908],"text":"true"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":28,"column":5,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":37,"endColumn":7,"fix":{"range":[903,908],"text":"true"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":28,"column":5,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":37,"endColumn":7,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[26,864],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { faCircle, faUser } from '@fortawesome/free-solid-svg-icons';\nimport { faDummy, initTest, queryByCss } from '../../testing/helpers';\n\ndescribe('FaStackComponent', () => {\n  it('should render stack icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: `\n        <fa-stack>\n          <fa-icon [icon]=\"faCircle()\" stackItemSize=\"2x\"></fa-icon>\n          <fa-icon [icon]=\"faUser()\" [inverse]=\"true\" stackItemSize=\"1x\"></fa-icon>\n        </fa-stack>\n      `,\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      faCircle = signal(faCircle);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(fixture.nativeElement).toBeTruthy();\n  });\n\n  it('should work with duotone icons', () => {\n    @Component({\n      changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":49,"column":5,"nodeType":"Decorator","messageId":"preferStandalone","endLine":58,"endColumn":7,"fix":{"range":[1522,1527],"text":"true"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":49,"column":5,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":58,"endColumn":7,"fix":{"range":[1522,1527],"text":"true"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":49,"column":5,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":58,"endColumn":7,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[26,1483],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { faCircle, faUser } from '@fortawesome/free-solid-svg-icons';\nimport { faDummy, initTest, queryByCss } from '../../testing/helpers';\n\ndescribe('FaStackComponent', () => {\n  it('should render stack icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: `\n        <fa-stack>\n          <fa-icon [icon]=\"faCircle()\" stackItemSize=\"2x\"></fa-icon>\n          <fa-icon [icon]=\"faUser()\" [inverse]=\"true\" stackItemSize=\"1x\"></fa-icon>\n        </fa-stack>\n      `,\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      faCircle = signal(faCircle);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(fixture.nativeElement).toBeTruthy();\n  });\n\n  it('should work with duotone icons', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: `\n        <fa-stack>\n          <fa-icon [icon]=\"faCircle()\" stackItemSize=\"2x\"></fa-icon>\n          <fa-duotone-icon [icon]=\"dummyDuotoneIcon()\" [inverse]=\"true\" stackItemSize=\"1x\"></fa-duotone-icon>\n        </fa-stack>\n      `,\n    })\n    class HostComponent {\n      dummyDuotoneIcon = signal(faDummy);\n      faCircle = signal(faCircle);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'fa-duotone-icon')).toBeTruthy();\n  });\n\n  it('should include size class', () => {\n    @Component({\n      changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":6,"fixableWarningCount":0,"source":"import { Component, signal } from '@angular/core';\nimport { faCircle, faUser } from '@fortawesome/free-solid-svg-icons';\nimport { faDummy, initTest, queryByCss } from '../../testing/helpers';\n\ndescribe('FaStackComponent', () => {\n  it('should render stack icon', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: `\n        <fa-stack>\n          <fa-icon [icon]=\"faCircle()\" stackItemSize=\"2x\"></fa-icon>\n          <fa-icon [icon]=\"faUser()\" [inverse]=\"true\" stackItemSize=\"1x\"></fa-icon>\n        </fa-stack>\n      `,\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      faCircle = signal(faCircle);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(fixture.nativeElement).toBeTruthy();\n  });\n\n  it('should work with duotone icons', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: `\n        <fa-stack>\n          <fa-icon [icon]=\"faCircle()\" stackItemSize=\"2x\"></fa-icon>\n          <fa-duotone-icon [icon]=\"dummyDuotoneIcon()\" [inverse]=\"true\" stackItemSize=\"1x\"></fa-duotone-icon>\n        </fa-stack>\n      `,\n    })\n    class HostComponent {\n      dummyDuotoneIcon = signal(faDummy);\n      faCircle = signal(faCircle);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, 'fa-duotone-icon')).toBeTruthy();\n  });\n\n  it('should include size class', () => {\n    @Component({\n      selector: 'fa-host',\n      standalone: false,\n      template: `\n        <fa-stack size=\"2x\">\n          <fa-icon [icon]=\"faCircle()\" stackItemSize=\"2x\"></fa-icon>\n          <fa-icon [icon]=\"faUser()\" [inverse]=\"true\" stackItemSize=\"1x\"></fa-icon>\n        </fa-stack>\n      `,\n    })\n    class HostComponent {\n      faUser = signal(faUser);\n      faCircle = signal(faCircle);\n    }\n\n    const fixture = initTest(HostComponent);\n    fixture.detectChanges();\n    expect(queryByCss(fixture, '.fa-2x')).toBeTruthy();\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]},{"ruleId":"@angular-eslint/prefer-standalone-component","replacedBy":["prefer-standalone"]},{"ruleId":"@angular-eslint/sort-ngmodule-metadata-arrays","replacedBy":[]}]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-fontawesome/src/lib/stack/stack.component.ts","messages":[{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":4,"column":1,"nodeType":"Decorator","messageId":"preferStandalone","endLine":11,"endColumn":3,"fix":{"range":[163,163],"text":"standalone: true,"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":4,"column":1,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":11,"endColumn":3,"fix":{"range":[163,163],"text":"standalone: true,"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import { Component, input, computed, ChangeDetectionStrategy } from '@angular/core';\nimport { SizeProp } from '@fortawesome/fontawesome-svg-core';\n\n@Component({\n  selector: 'fa-stack',\n  template: `<ng-content></ng-content>`,\n  host: {\n    '[class]': 'classes()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FaStackComponent {\n  /**\n   * Size of the stacked icon.\n   * Note that stacked icon is by default 2 times bigger, than non-stacked icon.\n   * You'll need to set size using custom CSS to align stacked icon with a\n   * simple one. E.g. `fa-stack { font-size: 0.5em; }`.\n   */\n  readonly size = input<SizeProp>();\n\n  readonly classes = computed(() => {\n    const sizeValue = this.size();\n    const sizeClass = sizeValue ? { [`fa-${sizeValue}`]: true } : {};\n    return {\n      ...sizeClass,\n      'fa-stack': true,\n    };\n  });\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]},{"ruleId":"@angular-eslint/prefer-standalone-component","replacedBy":["prefer-standalone"]},{"ruleId":"@angular-eslint/sort-ngmodule-metadata-arrays","replacedBy":[]}]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-fontawesome/testing/src/testing.module.spec.ts","messages":[{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":8,"column":1,"nodeType":"Decorator","messageId":"preferStandalone","endLine":12,"endColumn":3,"fix":{"range":[417,422],"text":"true"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":8,"column":1,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":12,"endColumn":3,"fix":{"range":[417,422],"text":"true"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":8,"column":1,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":12,"endColumn":3,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[18,382],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { FaIconLibrary } from '@fortawesome/angular-fontawesome';\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\nimport { ADD_ICON_MESSAGE } from './icon/mock-icon-library.service';\nimport { FontAwesomeTestingModule } from './testing.module';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import { Component } from '@angular/core';\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { FaIconLibrary } from '@fortawesome/angular-fontawesome';\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\nimport { ADD_ICON_MESSAGE } from './icon/mock-icon-library.service';\nimport { FontAwesomeTestingModule } from './testing.module';\n\n@Component({\n  selector: 'fa-host',\n  standalone: false,\n  template: '<fa-icon icon=\"someicon\"></fa-icon>',\n})\nclass HostComponent {}\n\ndescribe('Using the `FontAwesomeTestingModule', () => {\n  describe('Providing no configuration', () => {\n    // This describe block asserts that the behaviour of versions <= 0.14.1 is maintained\n\n    let component: HostComponent;\n    let fixture: ComponentFixture<HostComponent>;\n\n    beforeEach(() => {\n      TestBed.configureTestingModule({\n        imports: [FontAwesomeTestingModule],\n        declarations: [HostComponent],\n      });\n\n      fixture = TestBed.createComponent(HostComponent);\n      component = fixture.componentInstance;\n      fixture.detectChanges();\n    });\n\n    it('should allow you to import the module without errors', () => {\n      expect(component).toBeTruthy();\n    });\n\n    it('should throw on attempt to add an icon to the mocked icon library', () => {\n      const service = TestBed.inject(FaIconLibrary);\n      expect(() => service.addIcons(faUser)).toThrow(new Error(ADD_ICON_MESSAGE));\n    });\n\n    it('should throw on attempt to add an icon pack to the mocked icon library', () => {\n      const service = TestBed.inject(FaIconLibrary);\n      expect(() => service.addIcons(faUser)).toThrow(new Error(ADD_ICON_MESSAGE));\n    });\n  });\n\n  describe('Providing an empty configuration object', () => {\n    // This describe block asserts that a partial configuration object\n    // is correctly filled up to the ‘full’ internal object.\n    // The used configuration should mimic the default values for ‘no configuration’.\n\n    let component: HostComponent;\n    let fixture: ComponentFixture<HostComponent>;\n\n    beforeEach(() => {\n      TestBed.configureTestingModule({\n        imports: [FontAwesomeTestingModule.forRoot({})],\n        declarations: [HostComponent],\n      });\n    });\n\n    beforeEach(() => {\n      fixture = TestBed.createComponent(HostComponent);\n      component = fixture.componentInstance;\n      fixture.detectChanges();\n    });\n\n    it('should allow you to import the module without errors', () => {\n      expect(component).toBeTruthy();\n    });\n\n    it('should throw on attempt to add an icon to the mocked icon library', () => {\n      const service = TestBed.inject(FaIconLibrary);\n      expect(() => service.addIcons(faUser)).toThrow(new Error(ADD_ICON_MESSAGE));\n    });\n\n    it('should throw on attempt to add an icon pack to the mocked icon library', () => {\n      const service = TestBed.inject(FaIconLibrary);\n      expect(() => service.addIcons(faUser)).toThrow(new Error(ADD_ICON_MESSAGE));\n    });\n  });\n\n  describe('Providing {addIcons: \"throwError\"}', () => {\n    // This describe block asserts that feature request\n    // https://github.com/FortAwesome/angular-fontawesome/issues/440\n    // is implemented correctly.\n\n    let component: HostComponent;\n    let fixture: ComponentFixture<HostComponent>;\n\n    beforeEach(() => {\n      TestBed.configureTestingModule({\n        imports: [FontAwesomeTestingModule.forRoot({ whenAddingIcons: 'throwError' })],\n        declarations: [HostComponent],\n      });\n    });\n\n    beforeEach(() => {\n      fixture = TestBed.createComponent(HostComponent);\n      component = fixture.componentInstance;\n      fixture.detectChanges();\n    });\n\n    it('should allow you to import the module without errors', () => {\n      expect(component).toBeTruthy();\n    });\n\n    it('should throw on attempt to add an icon to the mocked icon library', () => {\n      const service = TestBed.inject(FaIconLibrary);\n      expect(() => service.addIcons(faUser)).toThrow(new Error('Attempt to add an icon to the MockFaIconLibrary.'));\n    });\n\n    it('should throw on attempt to add an icon pack to the mocked icon library', () => {\n      const service = TestBed.inject(FaIconLibrary);\n      expect(() => service.addIcons(faUser)).toThrow(new Error('Attempt to add an icon to the MockFaIconLibrary.'));\n    });\n  });\n\n  describe('Providing {addIcons: \"logWarning\"}', () => {\n    // This describe block asserts that feature request\n    // https://github.com/FortAwesome/angular-fontawesome/issues/440\n    // is implemented correctly.\n\n    let component: HostComponent;\n    let fixture: ComponentFixture<HostComponent>;\n\n    beforeEach(() => {\n      TestBed.configureTestingModule({\n        imports: [FontAwesomeTestingModule.forRoot({ whenAddingIcons: 'logWarning' })],\n        declarations: [HostComponent],\n      });\n    });\n\n    beforeEach(() => {\n      fixture = TestBed.createComponent(HostComponent);\n      component = fixture.componentInstance;\n      fixture.detectChanges();\n    });\n\n    it('should allow you to import the module without errors', () => {\n      expect(component).toBeTruthy();\n    });\n\n    it('should call console.warn on attempt to add an icon to the mocked icon library', () => {\n      const service = TestBed.inject(FaIconLibrary);\n      spyOn(console, 'warn');\n      expect(() => service.addIcons(faUser)).not.toThrow();\n      expect(console.warn).toHaveBeenCalledOnceWith(ADD_ICON_MESSAGE);\n    });\n\n    it('should call console.warn on attempt to add an icon pack to the mocked icon library', () => {\n      const service = TestBed.inject(FaIconLibrary);\n      spyOn(console, 'warn');\n      expect(() => service.addIcons(faUser)).not.toThrow();\n      expect(console.warn).toHaveBeenCalledOnceWith(ADD_ICON_MESSAGE);\n    });\n  });\n\n  describe('Providing {addIcons: \"noop\"}', () => {\n    // This describe block asserts that feature request\n    // https://github.com/FortAwesome/angular-fontawesome/issues/440\n    // is implemented correctly.\n\n    let component: HostComponent;\n    let fixture: ComponentFixture<HostComponent>;\n\n    beforeEach(() => {\n      TestBed.configureTestingModule({\n        imports: [FontAwesomeTestingModule.forRoot({ whenAddingIcons: 'noop' })],\n        declarations: [HostComponent],\n      });\n    });\n\n    beforeEach(() => {\n      fixture = TestBed.createComponent(HostComponent);\n      component = fixture.componentInstance;\n      fixture.detectChanges();\n    });\n\n    it('should allow you to import the module without errors', () => {\n      expect(component).toBeTruthy();\n    });\n\n    it('should ignore attempts to add an icon to the mocked icon library', () => {\n      const service = TestBed.inject(FaIconLibrary);\n      spyOn(console, 'warn');\n      expect(() => service.addIcons(faUser)).not.toThrow();\n      expect(console.warn).not.toHaveBeenCalledOnceWith(ADD_ICON_MESSAGE);\n    });\n\n    it('should ignore attempts to add an icon pack to the mocked icon library', () => {\n      const service = TestBed.inject(FaIconLibrary);\n      spyOn(console, 'warn');\n      expect(() => service.addIcons(faUser)).not.toThrow();\n      expect(console.warn).not.toHaveBeenCalledOnceWith(ADD_ICON_MESSAGE);\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]},{"ruleId":"@angular-eslint/prefer-standalone-component","replacedBy":["prefer-standalone"]},{"ruleId":"@angular-eslint/sort-ngmodule-metadata-arrays","replacedBy":[]}]}]

Linting "demo"...
[{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-fontawesome/projects/demo/src/app/alternate-prefix.component.ts","messages":[{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":5,"column":1,"nodeType":"Decorator","messageId":"preferStandalone","endLine":10,"endColumn":3,"fix":{"range":[240,240],"text":"standalone: true,"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":5,"column":1,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":10,"endColumn":3,"fix":{"range":[240,240],"text":"standalone: true,"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":5,"column":1,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":10,"endColumn":3,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[18,240],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { FaConfig, FaIconComponent, FaIconLibrary } from '@fortawesome/angular-fontawesome';\nimport { faBellSlash, faHandPaper, faUser } from '@fortawesome/free-regular-svg-icons';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import { Component } from '@angular/core';\nimport { FaConfig, FaIconComponent, FaIconLibrary } from '@fortawesome/angular-fontawesome';\nimport { faBellSlash, faHandPaper, faUser } from '@fortawesome/free-regular-svg-icons';\n\n@Component({\n  selector: 'app-alternate-prefix',\n  imports: [FaIconComponent],\n  templateUrl: './alternate-prefix.component.html',\n  providers: [FaConfig],\n})\nexport class AlternatePrefixComponent {\n  constructor(faConfig: FaConfig, library: FaIconLibrary) {\n    // Setting the defaultPrefix to far\n    faConfig.defaultPrefix = 'far';\n    // Adding dynamic icons to library for use\n    library.addIcons(faUser, faHandPaper, faBellSlash);\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]},{"ruleId":"@angular-eslint/prefer-standalone-component","replacedBy":["prefer-standalone"]},{"ruleId":"@angular-eslint/sort-ngmodule-metadata-arrays","replacedBy":[]}]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-fontawesome/projects/demo/src/app/app.component.ts","messages":[{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":24,"column":1,"nodeType":"Decorator","messageId":"preferStandalone","endLine":29,"endColumn":3,"fix":{"range":[633,633],"text":"standalone: true,"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":24,"column":1,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":29,"endColumn":3,"fix":{"range":[633,633],"text":"standalone: true,"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":24,"column":1,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":29,"endColumn":3,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[73,633],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { FaConfig, FaIconLibrary, FontAwesomeModule, IconDefinition } from '@fortawesome/angular-fontawesome';\nimport { faFlag, faUser as regularUser } from '@fortawesome/free-regular-svg-icons';\nimport {\n  faAdjust,\n  faBatteryQuarter,\n  faBell,\n  faCircle,\n  faCoffee,\n  faCog,\n  faEllipsisH,\n  faFighterJet,\n  faFlag as solidFlag,\n  faHeart,\n  faMagic,\n  faSpinner,\n  faSquare,\n  faTimes,\n  faUser,\n} from '@fortawesome/free-solid-svg-icons';\nimport { AlternatePrefixComponent } from './alternate-prefix.component';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/consistent-component-styles","severity":2,"message":"Use `styleUrl` instead of `styleUrls` for a single stylesheet","line":28,"column":3,"nodeType":"Property","messageId":"useStyleUrl","endLine":28,"endColumn":38,"fix":{"range":[767,802],"text":"styleUrl: './app.component.scss'"}}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"import { DecimalPipe } from '@angular/common';\nimport { Component, inject } from '@angular/core';\nimport { FaConfig, FaIconLibrary, FontAwesomeModule, IconDefinition } from '@fortawesome/angular-fontawesome';\nimport { faFlag, faUser as regularUser } from '@fortawesome/free-regular-svg-icons';\nimport {\n  faAdjust,\n  faBatteryQuarter,\n  faBell,\n  faCircle,\n  faCoffee,\n  faCog,\n  faEllipsisH,\n  faFighterJet,\n  faFlag as solidFlag,\n  faHeart,\n  faMagic,\n  faSpinner,\n  faSquare,\n  faTimes,\n  faUser,\n} from '@fortawesome/free-solid-svg-icons';\nimport { AlternatePrefixComponent } from './alternate-prefix.component';\n\n@Component({\n  selector: 'app-root',\n  imports: [DecimalPipe, FontAwesomeModule, AlternatePrefixComponent],\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n  faBell = faBell;\n  faCog = faCog;\n  faFlag = faFlag;\n  solidFlag = solidFlag;\n  faTimes = faTimes;\n  faMagic = faMagic;\n  faAdjust = faAdjust;\n  faCircle = faCircle;\n  faCoffee = faCoffee;\n  faSquare = faSquare;\n  regularUser = regularUser;\n  faEllipsisH = faEllipsisH;\n  faFighterJet = faFighterJet;\n  faBatteryQuarter = faBatteryQuarter;\n  faHeart = faHeart;\n  faSpinner = faSpinner;\n  faDummy: IconDefinition = {\n    prefix: 'fad',\n    iconName: 'dummy',\n    icon: [512, 512, [], '', ['M50 50 H412 V250 H50 Z', 'M50 262 H412 V462 H50 Z']],\n  };\n\n  notificationsCounter = 1000;\n  isAnimated = true;\n  magicLevel = 0;\n\n  selectedPosition: 'bottom-right' | 'bottom-left' | 'top-right' | 'top-left';\n\n  constructor() {\n    // Notice that we're adding two different icon objects to the library.\n    // Each of them within their respective icon npm packages are exported as faUser,\n    // but we've renamed the second one in order to disambiguate the two objects within\n    // this JavaScript module. Internally, these objects are different, even though they have the same iconName.\n    // They have different prefixes: faUser has a prefix of fas, since it came from free-solid-svg-icons;\n    // regularUser has a prefix of far, since it came from free-regular-svg-icons.\n    // And of course, they also have different SVG content, resulting in different appearances.\n    // So they really are totally different icons. However, they share the same iconName: user.\n    // So in the template, the only way to reference the non-default (fas) icon is to either\n    // use the array syntax that specifies [prefix, iconName], like this:\n    //\n    // <fa-icon [icon]=\"['far','user']\"></fa-icon>\n    //\n    // Or we could make the regularUser object available to the template and simply\n    // reference it as an object, like this:\n    //\n    // <fa-icon [icon]=\"regularUser\"></fa-icon>\n    //\n    // You don't specify the prefix in that case, because the icon object knows its own prefix.\n    inject(FaIconLibrary).addIcons(faUser, regularUser);\n    inject(FaConfig).fallbackIcon = faMagic;\n  }\n\n  onChange(event: any) {\n    this.selectedPosition = event.target.value;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]},{"ruleId":"@angular-eslint/prefer-standalone-component","replacedBy":["prefer-standalone"]},{"ruleId":"@angular-eslint/sort-ngmodule-metadata-arrays","replacedBy":[]}]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-fontawesome/projects/demo/src/app/testing/explicit-reference.component.ts","messages":[{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":5,"column":1,"nodeType":"Decorator","messageId":"preferStandalone","endLine":9,"endColumn":3,"fix":{"range":[187,187],"text":"standalone: true,"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":5,"column":1,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":9,"endColumn":3,"fix":{"range":[187,187],"text":"standalone: true,"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":5,"column":1,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":9,"endColumn":3,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[18,187],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import { Component } from '@angular/core';\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\n\n@Component({\n  selector: 'app-explicit-reference',\n  imports: [FaIconComponent],\n  template: '<fa-icon [icon]=\"faUser\"></fa-icon>',\n})\nexport class ExplicitReferenceComponent {\n  faUser = faUser;\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]},{"ruleId":"@angular-eslint/prefer-standalone-component","replacedBy":["prefer-standalone"]},{"ruleId":"@angular-eslint/sort-ngmodule-metadata-arrays","replacedBy":[]}]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-fontawesome/projects/demo/src/app/testing/icon-library.component.ts","messages":[{"ruleId":"@angular-eslint/prefer-standalone","severity":2,"message":"The component `standalone` property should be set to `true`","line":4,"column":1,"nodeType":"Decorator","messageId":"preferStandalone","endLine":8,"endColumn":3,"fix":{"range":[127,127],"text":"standalone: true,"}},{"ruleId":"@angular-eslint/prefer-standalone-component","severity":2,"message":"The component `standalone` property should be set to `true`","line":4,"column":1,"nodeType":"Decorator","messageId":"preferStandaloneComponent","endLine":8,"endColumn":3,"fix":{"range":[127,127],"text":"standalone: true,"}},{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":4,"column":1,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":8,"endColumn":3,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[18,127],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import { Component } from '@angular/core';\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\n\n@Component({\n  selector: 'app-regular-icon-library',\n  imports: [FaIconComponent],\n  template: '<fa-icon icon=\"user\"></fa-icon>',\n})\nexport class IconLibraryComponent {}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]},{"ruleId":"@angular-eslint/prefer-standalone-component","replacedBy":["prefer-standalone"]},{"ruleId":"@angular-eslint/sort-ngmodule-metadata-arrays","replacedBy":[]}]}]
