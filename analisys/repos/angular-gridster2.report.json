{
  "repo": {
    "HEAD": {
      "commit": "59e2b0de4dc71983f874e208f3466ba6ebb3fac4",
      "author": "Tiberiu Zuld",
      "date": "Thu Dec 5 09:26:29 2024 +0200",
      "message": "chore: fix npm repository url"
    },
    "url": "https://github.com/tiberiuzuld/angular-gridster2"
  },
  "before": {
    "gridster-app": {
      "recommended": [],
      "all": [
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/app.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 14,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 14,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      47,
                      430
                    ],
                    "text": "\n} from '@angular/core';\nimport { MatListModule } from '@angular/material/list';\nimport { RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router';\n\n@Component({\n selector: 'app-root',\n templateUrl: './app.component.html',\n styleUrl: './app.component.css',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n ChangeDetectionStrategy,\n Component,\n ViewEncapsulation\n} from '@angular/core';\nimport { MatListModule } from '@angular/material/list';\nimport { RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router';\n\n@Component({\n selector: 'app-root',\n templateUrl: './app.component.html',\n styleUrl: './app.component.css',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [RouterLink, RouterLinkActive, RouterOutlet, MatListModule]\n})\nexport class AppComponent {}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/api/api.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 25,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 25,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      57,
                      593
                    ],
                    "text": "\n} from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport {\n CompactType,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridsterPush,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-api',\n templateUrl: './api.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport {\n CompactType,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridsterPush,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-api',\n templateUrl: './api.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n MatButtonModule,\n MatIconModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class ApiComponent implements OnInit {\n options: GridsterConfig;\n dashboard: GridsterItem[];\n itemToPush: GridsterItemComponent;\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n compactType: CompactType.None,\n pushItems: true,\n draggable: {\n enabled: true\n },\n resizable: {\n enabled: true\n }\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0, initCallback: this.initItem.bind(this) },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 4, x: 5 },\n { cols: 1, rows: 1, y: 2, x: 1 },\n { cols: 2, rows: 2, y: 5, x: 5 },\n { cols: 2, rows: 2, y: 3, x: 2 },\n { cols: 2, rows: 1, y: 2, x: 2 },\n { cols: 1, rows: 1, y: 3, x: 4 },\n { cols: 1, rows: 1, y: 0, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n\n initItem(item: GridsterItem, itemComponent: GridsterItemComponent): void {\n this.itemToPush = itemComponent;\n }\n\n pushItem(): void {\n const push = new GridsterPush(this.itemToPush); // init the service\n this.itemToPush.$item.rows += 4; // move/resize your item\n if (push.pushItems(push.fromNorth)) {\n // push items from a direction\n push.checkPushBack(); // check for items can restore to original position\n push.setPushedItems(); // save the items pushed\n this.itemToPush.setSize();\n this.itemToPush.checkItemChanges(\n this.itemToPush.$item,\n this.itemToPush.item\n );\n } else {\n this.itemToPush.$item.rows -= 4;\n push.restoreItems(); // restore to initial state the pushed items\n }\n push.destroy(); // destroy push instance\n // similar for GridsterPushResize and GridsterSwap\n }\n\n getItemComponent(): void {\n if (this.options.api && this.options.api.getItemComponent) {\n console.log(this.options.api.getItemComponent(this.dashboard[0]));\n }\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/compact/compact.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 26,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 26,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      57,
                      691
                    ],
                    "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n CompactType,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-compact',\n templateUrl: './compact.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n CompactType,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-compact',\n templateUrl: './compact.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatIconModule,\n MatSelectModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class CompactComponent implements OnInit {\n options: GridsterConfig;\n dashboard: Array<GridsterItem>;\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n compactType: CompactType.None,\n maxCols: 10,\n maxRows: 10,\n pushItems: true,\n draggable: {\n enabled: true\n },\n resizable: {\n enabled: true\n }\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 4, x: 5 },\n { cols: 1, rows: 1, y: 2, x: 1 },\n { cols: 2, rows: 2, y: 5, x: 5 },\n { cols: 2, rows: 2, y: 3, x: 2 },\n { cols: 2, rows: 1, y: 2, x: 2 },\n { cols: 1, rows: 1, y: 3, x: 4 },\n { cols: 1, rows: 1, y: 0, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/displayGrid/displayGrid.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 26,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 26,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      57,
                      700
                    ],
                    "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-display-grid',\n templateUrl: './displayGrid.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-display-grid',\n templateUrl: './displayGrid.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatIconModule,\n MatSelectModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class DisplayGridComponent implements OnInit {\n options: GridsterConfig;\n dashboard: Array<GridsterItem>;\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n pushItems: true,\n draggable: {\n enabled: true\n },\n resizable: {\n enabled: true\n }\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 4, x: 5 },\n { cols: 1, rows: 1, y: 2, x: 1 },\n { cols: 2, rows: 2, y: 5, x: 5 },\n { cols: 2, rows: 2, y: 3, x: 2 },\n { cols: 2, rows: 1, y: 2, x: 2 },\n { cols: 1, rows: 1, y: 3, x: 4 },\n { cols: 1, rows: 1, y: 0, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/drag/drag.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 33,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 33,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      57,
                      861
                    ],
                    "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\n\nimport {\n DisplayGrid,\n Draggable,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridsterItemComponentInterface,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\ninterface Safe extends GridsterConfig {\n draggable: Draggable;\n}\n\n@Component({\n selector: 'app-drag',\n templateUrl: './drag.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\n\nimport {\n DisplayGrid,\n Draggable,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridsterItemComponentInterface,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\ninterface Safe extends GridsterConfig {\n draggable: Draggable;\n}\n\n@Component({\n selector: 'app-drag',\n templateUrl: './drag.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatCheckboxModule,\n MatIconModule,\n MatInputModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class DragComponent implements OnInit {\n options: Safe;\n dashboard: Array<GridsterItem>;\n\n static eventStart(\n item: GridsterItem,\n itemComponent: GridsterItemComponentInterface,\n event: MouseEvent\n ): void {\n console.info('eventStart', item, itemComponent, event);\n }\n\n static eventStop(\n item: GridsterItem,\n itemComponent: GridsterItemComponentInterface,\n event: MouseEvent\n ): void {\n console.info('eventStop', item, itemComponent, event);\n }\n\n static overlapEvent(\n source: GridsterItem,\n target: GridsterItem,\n grid: GridsterComponent\n ): void {\n console.log('overlap', source, target, grid);\n }\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n pushItems: true,\n swap: false,\n draggable: {\n delayStart: 0,\n enabled: true,\n ignoreContentClass: 'gridster-item-content',\n ignoreContent: false,\n dragHandleClass: 'drag-handler',\n stop: DragComponent.eventStop,\n start: DragComponent.eventStart,\n dropOverItems: false,\n dropOverItemsCallback: DragComponent.overlapEvent\n },\n resizable: {\n enabled: true\n }\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2, hasContent: true },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 1, rows: 1, y: 2, x: 5 },\n { cols: 1, rows: 1, y: 1, x: 0 },\n { cols: 1, rows: 1, y: 1, x: 0 },\n {\n cols: 2,\n rows: 2,\n y: 3,\n x: 5,\n minItemRows: 2,\n minItemCols: 2,\n label: 'Min rows & cols = 2'\n },\n {\n cols: 2,\n rows: 2,\n y: 2,\n x: 0,\n maxItemRows: 2,\n maxItemCols: 2,\n label: 'Max rows & cols = 2'\n },\n {\n cols: 2,\n rows: 1,\n y: 2,\n x: 2,\n dragEnabled: true,\n resizeEnabled: true,\n label: 'Drag&Resize Enabled'\n },\n {\n cols: 1,\n rows: 1,\n y: 2,\n x: 4,\n dragEnabled: false,\n resizeEnabled: false,\n label: 'Drag&Resize Disabled'\n },\n { cols: 1, rows: 1, y: 2, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/dynamicWidgets/dynamicWidgets.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 26,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 26,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      73,
                      684
                    ],
                    "text": "\n} from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\nimport { ParentDynamicComponent } from './parentDynamic.component';\n\n@Component({\n selector: 'app-dynamic-widgets',\n templateUrl: './dynamicWidgets.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n ChangeDetectionStrategy,\n Component,\n EventEmitter,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\nimport { ParentDynamicComponent } from './parentDynamic.component';\n\n@Component({\n selector: 'app-dynamic-widgets',\n templateUrl: './dynamicWidgets.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n MatButtonModule,\n MatIconModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent,\n ParentDynamicComponent\n ]\n})\nexport class DynamicWidgetsComponent implements OnInit {\n options: GridsterConfig;\n dashboard: GridsterItem[];\n resizeEvent: EventEmitter<GridsterItem> = new EventEmitter<GridsterItem>();\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n disableWindowResize: false,\n scrollToNewItems: false,\n disableWarnings: false,\n ignoreMarginInRow: false,\n itemResizeCallback: item => {\n // update DB with new size\n // send the update to widgets\n this.resizeEvent.emit(item);\n }\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0, type: 'widgetA' },\n { cols: 2, rows: 2, y: 0, x: 2, type: 'widgetB' },\n { cols: 2, rows: 1, y: 1, x: 0, type: 'widgetC' }\n ];\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/dynamicWidgets/parentDynamic.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 15,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 15,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      56,
                      458
                    ],
                    "text": "\n} from '@angular/core';\nimport { WidgetAComponent } from './widgetA.component';\nimport { WidgetBComponent } from './widgetB.component';\nimport { WidgetCComponent } from './widgetC.component';\n\n@Component({\n selector: 'app-parent-dynamic',\n templateUrl: './parentDynamic.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n ChangeDetectionStrategy,\n Component,\n Input,\n ViewEncapsulation\n} from '@angular/core';\nimport { WidgetAComponent } from './widgetA.component';\nimport { WidgetBComponent } from './widgetB.component';\nimport { WidgetCComponent } from './widgetC.component';\n\n@Component({\n selector: 'app-parent-dynamic',\n templateUrl: './parentDynamic.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [WidgetAComponent, WidgetBComponent, WidgetCComponent]\n})\nexport class ParentDynamicComponent {\n @Input()\n widget;\n @Input()\n resizeEvent;\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/dynamicWidgets/widgetA.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 17,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 17,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      95,
                      392
                    ],
                    "text": "\n} from '@angular/core';\nimport { GridsterItem } from 'angular-gridster2';\nimport { Subscription } from 'rxjs';\n\n@Component({\n selector: 'app-widget-a',\n template: '{{widget.type}}',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n ChangeDetectionStrategy,\n Component,\n EventEmitter,\n Input,\n OnDestroy,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { GridsterItem } from 'angular-gridster2';\nimport { Subscription } from 'rxjs';\n\n@Component({\n selector: 'app-widget-a',\n template: '{{widget.type}}',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n standalone: true\n})\nexport class WidgetAComponent implements OnInit, OnDestroy {\n @Input()\n widget;\n @Input()\n resizeEvent: EventEmitter<GridsterItem>;\n\n resizeSub: Subscription;\n\n ngOnInit(): void {\n this.resizeSub = this.resizeEvent.subscribe(widget => {\n if (widget === this.widget) {\n // or check id , type or whatever you have there\n // resize your widget, chart, map , etc.\n console.log(widget);\n }\n });\n }\n\n ngOnDestroy(): void {\n this.resizeSub.unsubscribe();\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/dynamicWidgets/widgetB.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 17,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 17,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      95,
                      392
                    ],
                    "text": "\n} from '@angular/core';\nimport { GridsterItem } from 'angular-gridster2';\nimport { Subscription } from 'rxjs';\n\n@Component({\n selector: 'app-widget-b',\n template: '{{widget.type}}',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n ChangeDetectionStrategy,\n Component,\n EventEmitter,\n Input,\n OnDestroy,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { GridsterItem } from 'angular-gridster2';\nimport { Subscription } from 'rxjs';\n\n@Component({\n selector: 'app-widget-b',\n template: '{{widget.type}}',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n standalone: true\n})\nexport class WidgetBComponent implements OnInit, OnDestroy {\n @Input()\n widget;\n @Input()\n resizeEvent: EventEmitter<GridsterItem>;\n\n resizeSub: Subscription;\n\n ngOnInit(): void {\n this.resizeSub = this.resizeEvent.subscribe(widget => {\n if (widget === this.widget) {\n // or check id , type or whatever you have there\n // resize your widget, chart, map , etc.\n console.log(widget);\n }\n });\n }\n\n ngOnDestroy(): void {\n this.resizeSub.unsubscribe();\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/dynamicWidgets/widgetC.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 17,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 17,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      95,
                      392
                    ],
                    "text": "\n} from '@angular/core';\nimport { GridsterItem } from 'angular-gridster2';\nimport { Subscription } from 'rxjs';\n\n@Component({\n selector: 'app-widget-c',\n template: '{{widget.type}}',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n ChangeDetectionStrategy,\n Component,\n EventEmitter,\n Input,\n OnDestroy,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { GridsterItem } from 'angular-gridster2';\nimport { Subscription } from 'rxjs';\n\n@Component({\n selector: 'app-widget-c',\n template: '{{widget.type}}',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n standalone: true\n})\nexport class WidgetCComponent implements OnInit, OnDestroy {\n @Input()\n widget;\n @Input()\n resizeEvent: EventEmitter<GridsterItem>;\n\n resizeSub: Subscription;\n\n ngOnInit(): void {\n this.resizeSub = this.resizeEvent.subscribe(widget => {\n if (widget === this.widget) {\n // or check id , type or whatever you have there\n // resize your widget, chart, map , etc.\n console.log(widget);\n }\n });\n }\n\n ngOnDestroy(): void {\n this.resizeSub.unsubscribe();\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/emptyCell/emptyCell.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 27,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 27,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      57,
                      758
                    ],
                    "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-empty-cell',\n templateUrl: './emptyCell.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-empty-cell',\n templateUrl: './emptyCell.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatCheckboxModule,\n MatIconModule,\n MatInputModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class EmptyCellComponent implements OnInit {\n options: GridsterConfig;\n dashboard: Array<GridsterItem>;\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n enableEmptyCellClick: false,\n enableEmptyCellContextMenu: false,\n enableEmptyCellDrop: false,\n enableEmptyCellDrag: false,\n enableOccupiedCellDrop: false,\n emptyCellClickCallback: this.emptyCellClick.bind(this),\n emptyCellContextMenuCallback: this.emptyCellClick.bind(this),\n emptyCellDropCallback: this.emptyCellClick.bind(this),\n emptyCellDragCallback: this.emptyCellClick.bind(this),\n emptyCellDragMaxCols: 50,\n emptyCellDragMaxRows: 50\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 4, x: 5 },\n { cols: 1, rows: 1, y: 2, x: 1 },\n { cols: 2, rows: 2, y: 5, x: 5 },\n { cols: 2, rows: 2, y: 3, x: 2 },\n { cols: 2, rows: 1, y: 2, x: 2 },\n { cols: 1, rows: 1, y: 3, x: 4 },\n { cols: 1, rows: 1, y: 0, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n emptyCellClick(event: MouseEvent, item: GridsterItem): void {\n console.info('empty cell click', event, item);\n this.dashboard.push(item);\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n\n dragStartHandler(ev: DragEvent): void {\n if (ev.dataTransfer) {\n ev.dataTransfer.setData('text/plain', 'Drag Me Button');\n ev.dataTransfer.dropEffect = 'copy';\n }\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/gridEvents/gridEvents.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 26,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 26,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      57,
                      656
                    ],
                    "text": "\n} from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterComponentInterface,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridsterItemComponentInterface,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-grid-events',\n templateUrl: './gridEvents.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterComponentInterface,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridsterItemComponentInterface,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-grid-events',\n templateUrl: './gridEvents.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n MatButtonModule,\n MatIconModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class GridEventsComponent implements OnInit {\n options: GridsterConfig;\n dashboard: Array<GridsterItem>;\n remove: boolean;\n\n static itemChange(\n item: GridsterItem,\n itemComponent: GridsterItemComponentInterface\n ): void {\n console.info('itemChanged', item, itemComponent);\n }\n\n static itemResize(\n item: GridsterItem,\n itemComponent: GridsterItemComponentInterface\n ): void {\n console.info('itemResized', item, itemComponent);\n }\n\n static itemInit(\n item: GridsterItem,\n itemComponent: GridsterItemComponentInterface\n ): void {\n console.info('itemInitialized', item, itemComponent);\n }\n\n static itemRemoved(\n item: GridsterItem,\n itemComponent: GridsterItemComponentInterface\n ): void {\n console.info('itemRemoved', item, itemComponent);\n }\n\n static itemValidate(item: GridsterItem): boolean {\n return item.cols > 0 && item.rows > 0;\n }\n\n static gridInit(grid: GridsterComponentInterface): void {\n console.info('gridInit', grid);\n }\n\n static gridDestroy(grid: GridsterComponentInterface): void {\n console.info('gridDestroy', grid);\n }\n\n static gridSizeChanged(grid: GridsterComponentInterface): void {\n console.info('gridSizeChanged', grid);\n }\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n initCallback: GridEventsComponent.gridInit,\n destroyCallback: GridEventsComponent.gridDestroy,\n gridSizeChangedCallback: GridEventsComponent.gridSizeChanged,\n itemChangeCallback: GridEventsComponent.itemChange,\n itemResizeCallback: GridEventsComponent.itemResize,\n itemInitCallback: GridEventsComponent.itemInit,\n itemRemovedCallback: GridEventsComponent.itemRemoved,\n itemValidateCallback: GridEventsComponent.itemValidate,\n pushItems: true,\n draggable: {\n enabled: true\n },\n resizable: {\n enabled: true\n }\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 4, x: 5 },\n { cols: 1, rows: 1, y: 2, x: 1 },\n { cols: 2, rows: 2, y: 5, x: 5 },\n { cols: 2, rows: 2, y: 3, x: 2 },\n { cols: 2, rows: 1, y: 2, x: 2 },\n { cols: 1, rows: 1, y: 3, x: 4 },\n { cols: 1, rows: 1, y: 0, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n\n destroy(): void {\n this.remove = !this.remove;\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/gridMargins/gridMargins.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 28,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 28,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      57,
                      822
                    ],
                    "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-grid-margins',\n templateUrl: './gridMargins.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-grid-margins',\n templateUrl: './gridMargins.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatCheckboxModule,\n MatIconModule,\n MatInputModule,\n MatSelectModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class GridMarginsComponent implements OnInit {\n options: GridsterConfig;\n dashboard: Array<GridsterItem>;\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n margin: 10,\n outerMargin: true,\n outerMarginTop: null,\n outerMarginRight: null,\n outerMarginBottom: null,\n outerMarginLeft: null\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 4, x: 5 },\n { cols: 1, rows: 1, y: 2, x: 1 },\n { cols: 2, rows: 2, y: 5, x: 5 },\n { cols: 2, rows: 2, y: 3, x: 2 },\n { cols: 2, rows: 1, y: 2, x: 2 },\n { cols: 1, rows: 1, y: 3, x: 4 },\n { cols: 1, rows: 1, y: 0, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/gridSizes/gridSizes.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 26,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 26,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      57,
                      694
                    ],
                    "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-grid-sizes',\n templateUrl: './gridSizes.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-grid-sizes',\n templateUrl: './gridSizes.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatIconModule,\n MatInputModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class GridSizesComponent implements OnInit {\n options: GridsterConfig;\n dashboard: Array<GridsterItem>;\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n pushItems: true,\n draggable: {\n enabled: true\n },\n resizable: {\n enabled: true\n },\n minCols: 1,\n maxCols: 100,\n minRows: 1,\n maxRows: 100,\n maxItemCols: 100,\n minItemCols: 1,\n maxItemRows: 100,\n minItemRows: 1,\n maxItemArea: 2500,\n minItemArea: 1,\n defaultItemCols: 1,\n defaultItemRows: 1,\n addEmptyRowsCount: 2\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 4, x: 5 },\n { cols: 1, rows: 1, y: 2, x: 1 },\n { cols: 2, rows: 2, y: 5, x: 5 },\n { cols: 2, rows: 2, y: 3, x: 2 },\n { cols: 2, rows: 1, y: 2, x: 2 },\n { cols: 1, rows: 1, y: 3, x: 4 },\n { cols: 1, rows: 1, y: 0, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/gridTypes/gridTypes.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 28,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 28,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      57,
                      818
                    ],
                    "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-grid-types',\n templateUrl: './gridTypes.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-grid-types',\n templateUrl: './gridTypes.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatCheckboxModule,\n MatIconModule,\n MatInputModule,\n MatSelectModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class GridTypesComponent implements OnInit {\n options: GridsterConfig;\n dashboard: Array<GridsterItem>;\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n fixedColWidth: 105,\n fixedRowHeight: 105,\n keepFixedHeightInMobile: false,\n keepFixedWidthInMobile: false,\n mobileBreakpoint: 640,\n useBodyForBreakpoint: false,\n pushItems: true,\n rowHeightRatio: 1,\n draggable: {\n enabled: true\n },\n resizable: {\n enabled: true\n }\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 4, x: 5 },\n { cols: 1, rows: 1, y: 2, x: 1 },\n { cols: 2, rows: 2, y: 5, x: 5 },\n { cols: 2, rows: 2, y: 3, x: 2 },\n { cols: 2, rows: 1, y: 2, x: 2 },\n { cols: 1, rows: 1, y: 3, x: 4 },\n { cols: 1, rows: 1, y: 0, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/home/home.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 37,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 37,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      57,
                      947
                    ],
                    "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n CompactType,\n DisplayGrid,\n Draggable,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType,\n PushDirections,\n Resizable\n} from 'angular-gridster2';\n\ninterface Safe extends GridsterConfig {\n draggable: Draggable;\n resizable: Resizable;\n pushDirections: PushDirections;\n}\n\n@Component({\n selector: 'app-general',\n templateUrl: './home.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n CompactType,\n DisplayGrid,\n Draggable,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType,\n PushDirections,\n Resizable\n} from 'angular-gridster2';\n\ninterface Safe extends GridsterConfig {\n draggable: Draggable;\n resizable: Resizable;\n pushDirections: PushDirections;\n}\n\n@Component({\n selector: 'app-general',\n templateUrl: './home.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatCheckboxModule,\n MatIconModule,\n MatInputModule,\n MatSelectModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class HomeComponent implements OnInit {\n options: Safe;\n dashboard: Array<GridsterItem>;\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n compactType: CompactType.None,\n margin: 10,\n outerMargin: true,\n outerMarginTop: null,\n outerMarginRight: null,\n outerMarginBottom: null,\n outerMarginLeft: null,\n useTransformPositioning: true,\n mobileBreakpoint: 640,\n useBodyForBreakpoint: false,\n minCols: 1,\n maxCols: 100,\n minRows: 1,\n maxRows: 100,\n maxItemCols: 100,\n minItemCols: 1,\n maxItemRows: 100,\n minItemRows: 1,\n maxItemArea: 2500,\n minItemArea: 1,\n defaultItemCols: 1,\n defaultItemRows: 1,\n fixedColWidth: 105,\n fixedRowHeight: 105,\n keepFixedHeightInMobile: false,\n keepFixedWidthInMobile: false,\n scrollSensitivity: 10,\n scrollSpeed: 20,\n enableEmptyCellClick: false,\n enableEmptyCellContextMenu: false,\n enableEmptyCellDrop: false,\n enableEmptyCellDrag: false,\n enableOccupiedCellDrop: false,\n emptyCellDragMaxCols: 50,\n emptyCellDragMaxRows: 50,\n ignoreMarginInRow: false,\n draggable: {\n enabled: true\n },\n resizable: {\n enabled: true\n },\n swap: false,\n pushItems: true,\n disablePushOnDrag: false,\n disablePushOnResize: false,\n pushDirections: { north: true, east: true, south: true, west: true },\n pushResizeItems: false,\n displayGrid: DisplayGrid.Always,\n disableWindowResize: false,\n disableWarnings: false,\n scrollToNewItems: false\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2, hasContent: true },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 1, rows: 1, y: 2, x: 5 },\n { cols: 1, rows: 1, y: 1, x: 0 },\n { cols: 1, rows: 1, y: 1, x: 0 },\n {\n cols: 2,\n rows: 2,\n y: 3,\n x: 5,\n minItemRows: 2,\n minItemCols: 2,\n label: 'Min rows & cols = 2'\n },\n {\n cols: 2,\n rows: 2,\n y: 2,\n x: 0,\n maxItemRows: 2,\n maxItemCols: 2,\n label: 'Max rows & cols = 2'\n },\n {\n cols: 2,\n rows: 1,\n y: 2,\n x: 2,\n dragEnabled: true,\n resizeEnabled: true,\n label: 'Drag&Resize Enabled'\n },\n {\n cols: 1,\n rows: 1,\n y: 2,\n x: 4,\n dragEnabled: false,\n resizeEnabled: false,\n label: 'Drag&Resize Disabled'\n },\n { cols: 1, rows: 1, y: 2, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/items/items.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 30,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 30,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      57,
                      858
                    ],
                    "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n CompactType,\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridsterItemComponentInterface,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-items',\n templateUrl: './items.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n CompactType,\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridsterItemComponentInterface,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-items',\n templateUrl: './items.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatCheckboxModule,\n MatIconModule,\n MatInputModule,\n MatSelectModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class ItemsComponent implements OnInit {\n options: GridsterConfig;\n dashboard: Array<GridsterItem>;\n\n static itemInit(\n item: GridsterItem,\n itemComponent: GridsterItemComponentInterface\n ): void {\n console.info('itemInitialized', item, itemComponent);\n }\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n compactType: CompactType.None,\n pushItems: true,\n draggable: {\n enabled: true\n },\n resizable: {\n enabled: true\n },\n minCols: 1,\n maxCols: 100,\n minRows: 1,\n maxRows: 100,\n maxItemCols: 100,\n minItemCols: 1,\n maxItemRows: 100,\n minItemRows: 1,\n maxItemArea: 2500,\n minItemArea: 1,\n defaultItemCols: 1,\n defaultItemRows: 1\n };\n\n this.dashboard = [\n {\n cols: 2,\n rows: 1,\n y: 0,\n x: 0,\n initCallback: ItemsComponent.itemInit,\n minItemCols: 1,\n maxItemCols: 100,\n maxItemRows: 100,\n minItemRows: 1,\n minItemArea: 1,\n maxItemArea: 2500,\n dragEnabled: true,\n resizeEnabled: true,\n compactEnabled: true,\n resizableHandles: {\n s: true,\n e: true,\n n: true,\n w: true,\n se: true,\n ne: true,\n sw: true,\n nw: true\n }\n },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 2, x: 1 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/misc/misc.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 28,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 28,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      57,
                      807
                    ],
                    "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-misc',\n templateUrl: './misc.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-misc',\n templateUrl: './misc.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatCheckboxModule,\n MatIconModule,\n MatInputModule,\n MatSelectModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class MiscComponent implements OnInit {\n options: GridsterConfig;\n dashboard: Array<GridsterItem>;\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n draggable: { enabled: true },\n resizable: { enabled: true },\n disableWindowResize: true,\n scrollToNewItems: false,\n disableWarnings: false,\n ignoreMarginInRow: false,\n setGridSize: false,\n scale: 1\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 4, x: 5 },\n { cols: 1, rows: 1, y: 2, x: 1 },\n { cols: 2, rows: 2, y: 5, x: 5 },\n { cols: 2, rows: 2, y: 3, x: 2 },\n { cols: 2, rows: 1, y: 2, x: 2 },\n { cols: 1, rows: 1, y: 3, x: 4 },\n { cols: 1, rows: 1, y: 0, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/multiLayer/multi-layer.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 26,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 26,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      57,
                      751
                    ],
                    "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatMenuModule } from '@angular/material/menu';\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-swap',\n templateUrl: './multi-layer.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatMenuModule } from '@angular/material/menu';\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-swap',\n templateUrl: './multi-layer.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatCheckboxModule,\n MatIconModule,\n MatMenuModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class MultiLayerComponent implements OnInit {\n options: GridsterConfig;\n dashboard: Array<GridsterItem>;\n\n // noinspection DuplicatedCode\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n pushItems: false,\n swap: true,\n allowMultiLayer: true,\n defaultLayerIndex: 1,\n baseLayerIndex: 2,\n maxLayerIndex: 2,\n swapWhileDragging: false,\n draggable: {\n enabled: true\n },\n resizable: {\n enabled: true\n }\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0, layerIndex: 2 },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 4, x: 5 },\n { cols: 1, rows: 1, y: 2, x: 1 },\n { cols: 2, rows: 2, y: 5, x: 5 },\n { cols: 2, rows: 2, y: 3, x: 2 },\n { cols: 2, rows: 1, y: 2, x: 2 },\n { cols: 1, rows: 1, y: 3, x: 4 },\n { cols: 1, rows: 1, y: 0, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item: GridsterItem): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 2, rows: 1 });\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/push/push.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 35,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 35,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      57,
                      858
                    ],
                    "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport {\n DisplayGrid,\n Draggable,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType,\n PushDirections,\n Resizable\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\ninterface Safe extends GridsterConfig {\n draggable: Draggable;\n resizable: Resizable;\n pushDirections: PushDirections;\n}\n\n@Component({\n selector: 'app-push',\n templateUrl: './push.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport {\n DisplayGrid,\n Draggable,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType,\n PushDirections,\n Resizable\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\ninterface Safe extends GridsterConfig {\n draggable: Draggable;\n resizable: Resizable;\n pushDirections: PushDirections;\n}\n\n@Component({\n selector: 'app-push',\n templateUrl: './push.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatCheckboxModule,\n MatIconModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class PushComponent implements OnInit {\n options: Safe;\n dashboard: Array<GridsterItem>;\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n pushItems: true,\n pushDirections: { north: true, east: true, south: true, west: true },\n pushResizeItems: false,\n swap: false,\n draggable: {\n enabled: true\n },\n resizable: {\n enabled: true\n }\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 4, x: 5 },\n { cols: 1, rows: 1, y: 2, x: 1 },\n { cols: 2, rows: 2, y: 5, x: 5 },\n { cols: 2, rows: 2, y: 3, x: 2 },\n { cols: 2, rows: 1, y: 2, x: 2 },\n { cols: 1, rows: 1, y: 3, x: 4 },\n { cols: 1, rows: 1, y: 0, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/resize/resize.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 46,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 46,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      57,
                      1066
                    ],
                    "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridsterItemComponentInterface,\n GridType,\n Resizable\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\ninterface SafeResizable extends Resizable {\n handles: {\n s: boolean;\n e: boolean;\n n: boolean;\n w: boolean;\n se: boolean;\n ne: boolean;\n sw: boolean;\n nw: boolean;\n };\n}\n\ninterface Safe extends GridsterConfig {\n resizable: SafeResizable;\n}\n\n@Component({\n selector: 'app-resize',\n templateUrl: './resize.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridsterItemComponentInterface,\n GridType,\n Resizable\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\ninterface SafeResizable extends Resizable {\n handles: {\n s: boolean;\n e: boolean;\n n: boolean;\n w: boolean;\n se: boolean;\n ne: boolean;\n sw: boolean;\n nw: boolean;\n };\n}\n\ninterface Safe extends GridsterConfig {\n resizable: SafeResizable;\n}\n\n@Component({\n selector: 'app-resize',\n templateUrl: './resize.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatCheckboxModule,\n MatIconModule,\n MatInputModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class ResizeComponent implements OnInit {\n options: Safe;\n dashboard: Array<GridsterItem>;\n\n static eventStop(\n item: GridsterItem,\n itemComponent: GridsterItemComponentInterface,\n event: MouseEvent\n ): void {\n console.info('eventStop', item, itemComponent, event);\n }\n\n static eventStart(\n item: GridsterItem,\n itemComponent: GridsterItemComponentInterface,\n event: MouseEvent\n ): void {\n console.info('eventStart', item, itemComponent, event);\n }\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n resizable: {\n delayStart: 0,\n enabled: true,\n start: ResizeComponent.eventStart,\n stop: ResizeComponent.eventStop,\n handles: {\n s: true,\n e: true,\n n: true,\n w: true,\n se: true,\n ne: true,\n sw: true,\n nw: true\n }\n }\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 4, x: 5 },\n { cols: 1, rows: 1, y: 2, x: 1 },\n { cols: 2, rows: 2, y: 5, x: 5 },\n { cols: 2, rows: 2, y: 3, x: 2 },\n { cols: 2, rows: 1, y: 2, x: 2 },\n { cols: 1, rows: 1, y: 3, x: 4 },\n { cols: 1, rows: 1, y: 0, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/rtl/rtl.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 37,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 37,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      70,
                      961
                    ],
                    "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport {\n CompactType,\n DirTypes,\n DisplayGrid,\n Draggable,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType,\n Resizable\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\ninterface Safe extends GridsterConfig {\n draggable: Draggable;\n resizable: Resizable;\n}\n\n@Component({\n selector: 'app-rtl',\n templateUrl: './rtl.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnDestroy,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport {\n CompactType,\n DirTypes,\n DisplayGrid,\n Draggable,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType,\n Resizable\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\ninterface Safe extends GridsterConfig {\n draggable: Draggable;\n resizable: Resizable;\n}\n\n@Component({\n selector: 'app-rtl',\n templateUrl: './rtl.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatCheckboxModule,\n MatIconModule,\n MatInputModule,\n MatSelectModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class RtlComponent implements OnInit, OnDestroy {\n options: Safe;\n dashboard: Array<GridsterItem>;\n\n ngOnInit(): void {\n document.body.setAttribute('dir', 'rtl');\n\n this.options = {\n gridType: GridType.Fit,\n compactType: CompactType.None,\n margin: 10,\n outerMargin: true,\n outerMarginTop: null,\n outerMarginRight: null,\n outerMarginBottom: null,\n outerMarginLeft: null,\n useTransformPositioning: true,\n mobileBreakpoint: 640,\n minCols: 1,\n maxCols: 100,\n minRows: 1,\n maxRows: 100,\n maxItemCols: 100,\n minItemCols: 1,\n maxItemRows: 100,\n minItemRows: 1,\n maxItemArea: 2500,\n minItemArea: 1,\n defaultItemCols: 1,\n defaultItemRows: 1,\n fixedColWidth: 105,\n fixedRowHeight: 105,\n keepFixedHeightInMobile: false,\n keepFixedWidthInMobile: false,\n scrollSensitivity: 10,\n scrollSpeed: 20,\n enableEmptyCellClick: false,\n enableEmptyCellContextMenu: false,\n enableEmptyCellDrop: false,\n enableEmptyCellDrag: false,\n enableOccupiedCellDrop: false,\n emptyCellDragMaxCols: 50,\n emptyCellDragMaxRows: 50,\n ignoreMarginInRow: false,\n draggable: {\n enabled: true\n },\n resizable: {\n enabled: true\n },\n swap: false,\n pushItems: true,\n disablePushOnDrag: false,\n disablePushOnResize: false,\n pushDirections: { north: true, east: true, south: true, west: true },\n pushResizeItems: false,\n displayGrid: DisplayGrid.Always,\n disableWindowResize: false,\n disableWarnings: false,\n scrollToNewItems: false,\n dirType: DirTypes.RTL\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2, hasContent: true },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 1, rows: 1, y: 2, x: 5 },\n { cols: 1, rows: 1, y: 1, x: 0 },\n { cols: 1, rows: 1, y: 1, x: 0 },\n {\n cols: 2,\n rows: 2,\n y: 3,\n x: 5,\n minItemRows: 2,\n minItemCols: 2,\n label: 'Min rows & cols = 2'\n },\n {\n cols: 2,\n rows: 2,\n y: 2,\n x: 0,\n maxItemRows: 2,\n maxItemCols: 2,\n label: 'Max rows & cols = 2'\n },\n {\n cols: 2,\n rows: 1,\n y: 2,\n x: 2,\n dragEnabled: true,\n resizeEnabled: true,\n label: 'Drag&Resize Enabled'\n },\n {\n cols: 1,\n rows: 1,\n y: 2,\n x: 4,\n dragEnabled: false,\n resizeEnabled: false,\n label: 'Drag&Resize Disabled'\n },\n { cols: 1, rows: 1, y: 2, x: 6 }\n ];\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2, hasContent: true },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 1, rows: 1, y: 2, x: 5 },\n { cols: 1, rows: 1, y: 1, x: 0 },\n { cols: 1, rows: 1, y: 1, x: 0 },\n {\n cols: 2,\n rows: 2,\n y: 3,\n x: 5,\n minItemRows: 2,\n minItemCols: 2,\n label: 'Min rows & cols = 2'\n },\n {\n cols: 2,\n rows: 2,\n y: 2,\n x: 0,\n maxItemRows: 2,\n maxItemCols: 2,\n label: 'Max rows & cols = 2'\n },\n {\n cols: 2,\n rows: 1,\n y: 2,\n x: 2,\n dragEnabled: true,\n resizeEnabled: true,\n label: 'Drag&Resize Enabled'\n },\n {\n cols: 1,\n rows: 1,\n y: 2,\n x: 4,\n dragEnabled: false,\n resizeEnabled: false,\n label: 'Drag&Resize Disabled'\n },\n { cols: 1, rows: 1, y: 2, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n\n ngOnDestroy(): void {\n document.body.removeAttribute('dir');\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/swap/swap.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 26,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 26,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      57,
                      689
                    ],
                    "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-swap',\n templateUrl: './swap.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-swap',\n templateUrl: './swap.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatCheckboxModule,\n MatIconModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class SwapComponent implements OnInit {\n options: GridsterConfig;\n dashboard: Array<GridsterItem>;\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n pushItems: false,\n swap: true,\n swapWhileDragging: false,\n draggable: {\n enabled: true\n },\n resizable: {\n enabled: true\n }\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 4, x: 5 },\n { cols: 1, rows: 1, y: 2, x: 1 },\n { cols: 2, rows: 2, y: 5, x: 5 },\n { cols: 2, rows: 2, y: 3, x: 2 },\n { cols: 2, rows: 1, y: 2, x: 2 },\n { cols: 1, rows: 1, y: 3, x: 4 },\n { cols: 1, rows: 1, y: 0, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/trackBy/trackBy.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 27,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 27,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      57,
                      698
                    ],
                    "text": "\n} from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport {\n CompactType,\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridsterItemComponentInterface,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\nimport { TrackByItemComponent } from './trackByItem.component';\n\n@Component({\n selector: 'app-trackby',\n templateUrl: './trackBy.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport {\n CompactType,\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridsterItemComponentInterface,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\nimport { TrackByItemComponent } from './trackByItem.component';\n\n@Component({\n selector: 'app-trackby',\n templateUrl: './trackBy.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n MatButtonModule,\n MatIconModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent,\n TrackByItemComponent\n ]\n})\nexport class TrackByComponent implements OnInit {\n options: GridsterConfig;\n dashboard: Array<GridsterItem>;\n dashboardOriginal: Array<GridsterItem>;\n\n static itemInit(\n item: GridsterItem,\n itemComponent: GridsterItemComponentInterface\n ): void {\n console.info('itemInitialized', item, itemComponent);\n }\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n compactType: CompactType.None,\n pushItems: true,\n draggable: {\n enabled: true\n },\n resizable: {\n enabled: true\n },\n minCols: 1,\n maxCols: 100,\n minRows: 1,\n maxRows: 100,\n maxItemCols: 100,\n minItemCols: 1,\n maxItemRows: 100,\n minItemRows: 1,\n maxItemArea: 2500,\n minItemArea: 1,\n defaultItemCols: 1,\n defaultItemRows: 1\n };\n\n this.dashboard = [\n {\n cols: 2,\n rows: 1,\n y: 0,\n x: 0,\n initCallback: TrackByComponent.itemInit,\n minItemCols: 1,\n maxItemCols: 100,\n maxItemRows: 100,\n minItemRows: 1,\n minItemArea: 1,\n maxItemArea: 2500,\n dragEnabled: true,\n resizeEnabled: true,\n compactEnabled: true,\n id: 0\n },\n { cols: 2, rows: 2, y: 0, x: 2, id: 1 },\n { cols: 1, rows: 1, y: 0, x: 4, id: 2 },\n { cols: 3, rows: 2, y: 1, x: 4, id: 3 },\n { cols: 1, rows: 1, y: 2, x: 1, id: 4 }\n ];\n this.dashboardOriginal = this.dashboard.map(x => ({ ...x }));\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n reset(): void {\n this.dashboard = this.dashboardOriginal.map(x => ({ ...x }));\n }\n\n addItem(): void {\n this.dashboard.push({\n x: 0,\n y: 0,\n cols: 1,\n rows: 1,\n id: this.dashboard.length\n });\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/trackBy/trackByItem.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 17,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 17,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      66,
                      365
                    ],
                    "text": "\n} from '@angular/core';\n\n@Component({\n selector: 'app-trackby-item',\n template: `\n <div class=\"button-holder\">\n <div style=\"font-size: 30px\">ID: {{ id }}</div>\n </div>\n `,\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n ChangeDetectionStrategy,\n Component,\n Input,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\n\n@Component({\n selector: 'app-trackby-item',\n template: `\n <div class=\"button-holder\">\n <div style=\"font-size: 30px\">ID: {{ id }}</div>\n </div>\n `,\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n standalone: true\n})\nexport class TrackByItemComponent implements OnInit {\n @Input() id: string;\n\n ngOnInit(): void {\n console.info(`Init ${this.id}`);\n }\n}\n",
          "usedDeprecatedRules": []
        }
      ]
    },
    "angular-gridster2": {
      "recommended": [],
      "all": [
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/projects/angular-gridster2/src/lib/gridster.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
              "severity": 2,
              "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
              "line": 34,
              "column": 1,
              "nodeType": "Decorator",
              "messageId": "preferOnPushComponentChangeDetection",
              "endLine": 41,
              "endColumn": 3,
              "suggestions": [
                {
                  "messageId": "suggestAddChangeDetectionOnPush",
                  "fix": {
                    "range": [
                      230,
                      1141
                    ],
                    "text": ", ChangeDetectionStrategy\n} from '@angular/core';\nimport { debounceTime, Subject, switchMap, takeUntil, timer } from 'rxjs';\nimport { GridsterComponentInterface } from './gridster.interface';\nimport { GridsterCompact } from './gridsterCompact.service';\n\nimport { GridsterConfigService } from './gridsterConfig.constant';\nimport type { GridsterConfig } from './gridsterConfig.interface';\nimport { GridType } from './gridsterConfig.interface';\nimport { GridsterConfigS } from './gridsterConfigS.interface';\nimport { GridsterEmptyCell } from './gridsterEmptyCell.service';\nimport {\n GridsterItem,\n GridsterItemComponentInterface\n} from './gridsterItem.interface';\nimport { GridsterPreviewComponent } from './gridsterPreview.component';\nimport { GridsterRenderer } from './gridsterRenderer.service';\nimport { GridsterUtils } from './gridsterUtils.service';\n\n@Component({\n // eslint-disable-next-line @angular-eslint/component-selector\n changeDetection: ChangeDetectionStrategy.OnPush,"
                  },
                  "desc": "Add `ChangeDetectionStrategy.OnPush`"
                }
              ]
            },
            {
              "ruleId": "@angular-eslint/consistent-component-styles",
              "severity": 2,
              "message": "Use `styleUrl` instead of `styleUrls` for a single stylesheet",
              "line": 38,
              "column": 3,
              "nodeType": "Property",
              "messageId": "useStyleUrl",
              "endLine": 38,
              "endColumn": 32,
              "fix": {
                "range": [
                  1199,
                  1228
                ],
                "text": "styleUrl: './gridster.css'"
              }
            },
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 39,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 39,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      209,
                      1270
                    ],
                    "text": "\n} from '@angular/core';\nimport { debounceTime, Subject, switchMap, takeUntil, timer } from 'rxjs';\nimport { GridsterComponentInterface } from './gridster.interface';\nimport { GridsterCompact } from './gridsterCompact.service';\n\nimport { GridsterConfigService } from './gridsterConfig.constant';\nimport type { GridsterConfig } from './gridsterConfig.interface';\nimport { GridType } from './gridsterConfig.interface';\nimport { GridsterConfigS } from './gridsterConfigS.interface';\nimport { GridsterEmptyCell } from './gridsterEmptyCell.service';\nimport {\n GridsterItem,\n GridsterItemComponentInterface\n} from './gridsterItem.interface';\nimport { GridsterPreviewComponent } from './gridsterPreview.component';\nimport { GridsterRenderer } from './gridsterRenderer.service';\nimport { GridsterUtils } from './gridsterUtils.service';\n\n@Component({\n // eslint-disable-next-line @angular-eslint/component-selector\n selector: 'gridster',\n templateUrl: './gridster.html',\n styleUrls: ['./gridster.css'],\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            },
            {
              "ruleId": "@angular-eslint/sort-lifecycle-methods",
              "severity": 2,
              "message": "Lifecycle Methods are not declared in order of execution",
              "line": 151,
              "column": 3,
              "nodeType": "Identifier",
              "messageId": "lifecycleMethodsNotSorted",
              "endLine": 151,
              "endColumn": 14
            }
          ],
          "suppressedMessages": [
            {
              "ruleId": "@angular-eslint/component-selector",
              "severity": 2,
              "message": "The selector should be kebab-case (https://angular.dev/style-guide#style-05-02)",
              "line": 36,
              "column": 13,
              "nodeType": "Literal",
              "messageId": "styleFailure",
              "endLine": 36,
              "endColumn": 23,
              "suppressions": [
                {
                  "kind": "directive",
                  "justification": ""
                }
              ]
            }
          ],
          "errorCount": 4,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 1,
          "fixableWarningCount": 0,
          "source": "import { NgStyle } from '@angular/common';\nimport {\n ChangeDetectorRef,\n Component,\n ElementRef,\n EventEmitter,\n Inject,\n Input,\n NgZone,\n OnChanges,\n OnDestroy,\n OnInit,\n Renderer2,\n SimpleChanges,\n ViewEncapsulation\n} from '@angular/core';\nimport { debounceTime, Subject, switchMap, takeUntil, timer } from 'rxjs';\nimport { GridsterComponentInterface } from './gridster.interface';\nimport { GridsterCompact } from './gridsterCompact.service';\n\nimport { GridsterConfigService } from './gridsterConfig.constant';\nimport type { GridsterConfig } from './gridsterConfig.interface';\nimport { GridType } from './gridsterConfig.interface';\nimport { GridsterConfigS } from './gridsterConfigS.interface';\nimport { GridsterEmptyCell } from './gridsterEmptyCell.service';\nimport {\n GridsterItem,\n GridsterItemComponentInterface\n} from './gridsterItem.interface';\nimport { GridsterPreviewComponent } from './gridsterPreview.component';\nimport { GridsterRenderer } from './gridsterRenderer.service';\nimport { GridsterUtils } from './gridsterUtils.service';\n\n@Component({\n // eslint-disable-next-line @angular-eslint/component-selector\n selector: 'gridster',\n templateUrl: './gridster.html',\n styleUrls: ['./gridster.css'],\n encapsulation: ViewEncapsulation.None,\n imports: [NgStyle, GridsterPreviewComponent]\n})\nexport class GridsterComponent\n implements OnInit, OnChanges, OnDestroy, GridsterComponentInterface\n{\n @Input() options: GridsterConfig;\n movingItem: GridsterItem | null;\n el: HTMLElement;\n $options: GridsterConfigS;\n mobile: boolean;\n curWidth: number;\n curHeight: number;\n grid: GridsterItemComponentInterface[];\n columns = 0;\n rows = 0;\n curColWidth: number;\n curRowHeight: number;\n gridColumns = [];\n gridRows = [];\n windowResize: (() => void) | null;\n dragInProgress: boolean;\n emptyCell: GridsterEmptyCell;\n compact: GridsterCompact;\n gridRenderer: GridsterRenderer;\n previewStyle$: EventEmitter<GridsterItem | null> =\n new EventEmitter<GridsterItem | null>();\n\n calculateLayout$ = new Subject<void>();\n\n private resize$ = new Subject<void>();\n private destroy$ = new Subject<void>();\n\n constructor(\n @Inject(ElementRef) el: ElementRef,\n @Inject(Renderer2) public renderer: Renderer2,\n @Inject(ChangeDetectorRef) public cdRef: ChangeDetectorRef,\n @Inject(NgZone) public zone: NgZone\n ) {\n this.el = el.nativeElement;\n this.$options = JSON.parse(JSON.stringify(GridsterConfigService));\n this.mobile = false;\n this.curWidth = 0;\n this.curHeight = 0;\n this.grid = [];\n this.curColWidth = 0;\n this.curRowHeight = 0;\n this.dragInProgress = false;\n this.emptyCell = new GridsterEmptyCell(this);\n this.compact = new GridsterCompact(this);\n this.gridRenderer = new GridsterRenderer(this);\n }\n\n // ------ Function for swapWhileDragging option\n\n // identical to checkCollision() except that here we add boundaries.\n static checkCollisionTwoItemsForSwaping(\n item: GridsterItem,\n item2: GridsterItem\n ): boolean {\n // if the cols or rows of the items are 1 , doesnt make any sense to set a boundary. Only if the item is bigger we set a boundary\n const horizontalBoundaryItem1 = item.cols === 1 ? 0 : 1;\n const horizontalBoundaryItem2 = item2.cols === 1 ? 0 : 1;\n const verticalBoundaryItem1 = item.rows === 1 ? 0 : 1;\n const verticalBoundaryItem2 = item2.rows === 1 ? 0 : 1;\n return (\n item.x + horizontalBoundaryItem1 < item2.x + item2.cols &&\n item.x + item.cols > item2.x + horizontalBoundaryItem2 &&\n item.y + verticalBoundaryItem1 < item2.y + item2.rows &&\n item.y + item.rows > item2.y + verticalBoundaryItem2\n );\n }\n\n checkCollisionTwoItems(item: GridsterItem, item2: GridsterItem): boolean {\n const collision =\n item.x < item2.x + item2.cols &&\n item.x + item.cols > item2.x &&\n item.y < item2.y + item2.rows &&\n item.y + item.rows > item2.y;\n if (!collision) {\n return false;\n }\n if (!this.$options.allowMultiLayer) {\n return true;\n }\n const defaultLayerIndex = this.$options.defaultLayerIndex;\n const layerIndex =\n item.layerIndex === undefined ? defaultLayerIndex : item.layerIndex;\n const layerIndex2 =\n item2.layerIndex === undefined ? defaultLayerIndex : item2.layerIndex;\n return layerIndex === layerIndex2;\n }\n\n ngOnInit(): void {\n if (this.options.initCallback) {\n this.options.initCallback(this);\n }\n\n this.calculateLayout$\n .pipe(debounceTime(0), takeUntil(this.destroy$))\n .subscribe(() => this.calculateLayout());\n\n this.resize$\n .pipe(\n // Cancel previously scheduled DOM timer if `calculateLayout()` has been called\n // within this time range.\n switchMap(() => timer(100)),\n takeUntil(this.destroy$)\n )\n .subscribe(() => this.resize());\n }\n\n ngOnChanges(changes: SimpleChanges): void {\n if (changes.options) {\n this.setOptions();\n this.options.api = {\n optionsChanged: this.optionsChanged,\n resize: this.onResize,\n getNextPossiblePosition: this.getNextPossiblePosition,\n getFirstPossiblePosition: this.getFirstPossiblePosition,\n getLastPossiblePosition: this.getLastPossiblePosition,\n getItemComponent: (item: GridsterItem) => this.getItemComponent(item)\n };\n this.columns = this.$options.minCols;\n this.rows = this.$options.minRows + this.$options.addEmptyRowsCount;\n this.setGridSize();\n this.calculateLayout();\n }\n }\n\n private resize(): void {\n let height;\n let width;\n if (this.$options.gridType === 'fit' && !this.mobile) {\n width = this.el.offsetWidth;\n height = this.el.offsetHeight;\n } else {\n width = this.el.clientWidth;\n height = this.el.clientHeight;\n }\n if (\n (width !== this.curWidth || height !== this.curHeight) &&\n this.checkIfToResize()\n ) {\n this.onResize();\n }\n }\n\n setOptions(): void {\n this.$options = GridsterUtils.merge(\n this.$options,\n this.options,\n this.$options\n );\n if (!this.$options.disableWindowResize && !this.windowResize) {\n this.windowResize = this.renderer.listen(\n 'window',\n 'resize',\n this.onResize\n );\n } else if (this.$options.disableWindowResize && this.windowResize) {\n this.windowResize();\n this.windowResize = null;\n }\n this.emptyCell.updateOptions();\n }\n\n optionsChanged = (): void => {\n this.setOptions();\n let widgetsIndex: number = this.grid.length - 1;\n let widget: GridsterItemComponentInterface;\n for (; widgetsIndex >= 0; widgetsIndex--) {\n widget = this.grid[widgetsIndex];\n widget.updateOptions();\n }\n this.calculateLayout();\n };\n\n ngOnDestroy(): void {\n this.destroy$.next();\n this.previewStyle$.complete();\n if (this.windowResize) {\n this.windowResize();\n }\n if (this.options && this.options.destroyCallback) {\n this.options.destroyCallback(this);\n }\n if (this.options && this.options.api) {\n this.options.api.resize = undefined;\n this.options.api.optionsChanged = undefined;\n this.options.api.getNextPossiblePosition = undefined;\n this.options.api = undefined;\n }\n this.emptyCell.destroy();\n this.emptyCell = null!;\n this.compact.destroy();\n this.compact = null!;\n }\n\n onResize = (): void => {\n if (this.el.clientWidth) {\n if (this.options.setGridSize) {\n // reset width/height so the size is recalculated afterwards\n this.renderer.setStyle(this.el, 'width', '');\n this.renderer.setStyle(this.el, 'height', '');\n }\n this.setGridSize();\n this.calculateLayout();\n }\n };\n\n checkIfToResize(): boolean {\n const clientWidth = this.el.clientWidth;\n const offsetWidth = this.el.offsetWidth;\n const scrollWidth = this.el.scrollWidth;\n const clientHeight = this.el.clientHeight;\n const offsetHeight = this.el.offsetHeight;\n const scrollHeight = this.el.scrollHeight;\n const verticalScrollPresent =\n clientWidth < offsetWidth &&\n scrollHeight > offsetHeight &&\n scrollHeight - offsetHeight < offsetWidth - clientWidth;\n const horizontalScrollPresent =\n clientHeight < offsetHeight &&\n scrollWidth > offsetWidth &&\n scrollWidth - offsetWidth < offsetHeight - clientHeight;\n if (verticalScrollPresent) {\n return false;\n }\n return !horizontalScrollPresent;\n }\n\n checkIfMobile(): boolean {\n if (this.$options.useBodyForBreakpoint) {\n return this.$options.mobileBreakpoint > document.body.clientWidth;\n } else {\n return this.$options.mobileBreakpoint > this.curWidth;\n }\n }\n\n setGridSize(): void {\n const el = this.el;\n let width;\n let height;\n if (\n this.$options.setGridSize ||\n (this.$options.gridType === GridType.Fit && !this.mobile)\n ) {\n width = el.offsetWidth;\n height = el.offsetHeight;\n } else {\n width = el.clientWidth;\n height = el.clientHeight;\n }\n this.curWidth = width;\n this.curHeight = height;\n }\n\n setGridDimensions(): void {\n this.setGridSize();\n if (!this.mobile && this.checkIfMobile()) {\n this.mobile = !this.mobile;\n this.renderer.addClass(this.el, 'mobile');\n } else if (this.mobile && !this.checkIfMobile()) {\n this.mobile = !this.mobile;\n this.renderer.removeClass(this.el, 'mobile');\n }\n let rows = this.$options.minRows;\n let columns = this.$options.minCols;\n\n let widgetsIndex = this.grid.length - 1;\n let widget;\n for (; widgetsIndex >= 0; widgetsIndex--) {\n widget = this.grid[widgetsIndex];\n if (!widget.notPlaced) {\n rows = Math.max(rows, widget.$item.y + widget.$item.rows);\n columns = Math.max(columns, widget.$item.x + widget.$item.cols);\n }\n }\n rows += this.$options.addEmptyRowsCount;\n if (this.columns !== columns || this.rows !== rows) {\n this.columns = columns;\n this.rows = rows;\n if (this.options.gridSizeChangedCallback) {\n this.options.gridSizeChangedCallback(this);\n }\n }\n }\n\n private calculateLayout(): void {\n if (this.compact) {\n this.compact.checkCompact();\n }\n\n this.setGridDimensions();\n if (this.$options.outerMargin) {\n let marginWidth = -this.$options.margin;\n if (this.$options.outerMarginLeft !== null) {\n marginWidth += this.$options.outerMarginLeft;\n this.renderer.setStyle(\n this.el,\n 'padding-left',\n this.$options.outerMarginLeft + 'px'\n );\n } else {\n marginWidth += this.$options.margin;\n this.renderer.setStyle(\n this.el,\n 'padding-left',\n this.$options.margin + 'px'\n );\n }\n if (this.$options.outerMarginRight !== null) {\n marginWidth += this.$options.outerMarginRight;\n this.renderer.setStyle(\n this.el,\n 'padding-right',\n this.$options.outerMarginRight + 'px'\n );\n } else {\n marginWidth += this.$options.margin;\n this.renderer.setStyle(\n this.el,\n 'padding-right',\n this.$options.margin + 'px'\n );\n }\n this.curColWidth = (this.curWidth - marginWidth) / this.columns;\n let marginHeight = -this.$options.margin;\n if (this.$options.outerMarginTop !== null) {\n marginHeight += this.$options.outerMarginTop;\n this.renderer.setStyle(\n this.el,\n 'padding-top',\n this.$options.outerMarginTop + 'px'\n );\n } else {\n marginHeight += this.$options.margin;\n this.renderer.setStyle(\n this.el,\n 'padding-top',\n this.$options.margin + 'px'\n );\n }\n if (this.$options.outerMarginBottom !== null) {\n marginHeight += this.$options.outerMarginBottom;\n this.renderer.setStyle(\n this.el,\n 'padding-bottom',\n this.$options.outerMarginBottom + 'px'\n );\n } else {\n marginHeight += this.$options.margin;\n this.renderer.setStyle(\n this.el,\n 'padding-bottom',\n this.$options.margin + 'px'\n );\n }\n this.curRowHeight =\n ((this.curHeight - marginHeight) / this.rows) angular-gridster2.report.json angular.json package.json package-lock.json tsconfig.app.json tsconfig.json tsconfig.lint.json tsconfig.spec.json this.$options.rowHeightRatio;\n } else {\n this.curColWidth = (this.curWidth + this.$options.margin) / this.columns;\n this.curRowHeight =\n ((this.curHeight + this.$options.margin) / this.rows) angular-gridster2.report.json angular.json package.json package-lock.json tsconfig.app.json tsconfig.json tsconfig.lint.json tsconfig.spec.json this.$options.rowHeightRatio;\n this.renderer.setStyle(this.el, 'padding-left', 0 + 'px');\n this.renderer.setStyle(this.el, 'padding-right', 0 + 'px');\n this.renderer.setStyle(this.el, 'padding-top', 0 + 'px');\n this.renderer.setStyle(this.el, 'padding-bottom', 0 + 'px');\n }\n this.gridRenderer.updateGridster();\n\n if (this.$options.setGridSize) {\n this.renderer.addClass(this.el, 'gridSize');\n if (!this.mobile) {\n this.renderer.setStyle(\n this.el,\n 'width',\n this.columns angular-gridster2.report.json angular.json CODE_OF_CONDUCT.md LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json projects README.md src tsconfig.app.json tsconfig.json tsconfig.lint.json tsconfig.spec.json this.curColWidth + this.$options.margin + 'px'\n );\n this.renderer.setStyle(\n this.el,\n 'height',\n this.rows angular-gridster2.report.json angular.json CODE_OF_CONDUCT.md LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json projects README.md src tsconfig.app.json tsconfig.json tsconfig.lint.json tsconfig.spec.json this.curRowHeight + this.$options.margin + 'px'\n );\n }\n } else {\n this.renderer.removeClass(this.el, 'gridSize');\n this.renderer.setStyle(this.el, 'width', '');\n this.renderer.setStyle(this.el, 'height', '');\n }\n this.updateGrid();\n\n let widgetsIndex: number = this.grid.length - 1;\n let widget: GridsterItemComponentInterface;\n for (; widgetsIndex >= 0; widgetsIndex--) {\n widget = this.grid[widgetsIndex];\n widget.setSize();\n widget.drag.toggle();\n widget.resize.toggle();\n }\n\n this.resize$.next();\n }\n\n updateGrid(): void {\n if (this.$options.displayGrid === 'always' && !this.mobile) {\n this.renderer.addClass(this.el, 'display-grid');\n } else if (\n this.$options.displayGrid === 'onDrag&Resize' &&\n this.dragInProgress\n ) {\n this.renderer.addClass(this.el, 'display-grid');\n } else if (\n this.$options.displayGrid === 'none' ||\n !this.dragInProgress ||\n this.mobile\n ) {\n this.renderer.removeClass(this.el, 'display-grid');\n }\n this.setGridDimensions();\n this.gridColumns.length = GridsterComponent.getNewArrayLength(\n this.columns,\n this.curWidth,\n this.curColWidth\n );\n this.gridRows.length = GridsterComponent.getNewArrayLength(\n this.rows,\n this.curHeight,\n this.curRowHeight\n );\n this.cdRef.markForCheck();\n }\n\n addItem(itemComponent: GridsterItemComponentInterface): void {\n if (itemComponent.$item.cols === undefined) {\n itemComponent.$item.cols = this.$options.defaultItemCols;\n itemComponent.item.cols = itemComponent.$item.cols;\n itemComponent.itemChanged();\n }\n if (itemComponent.$item.rows === undefined) {\n itemComponent.$item.rows = this.$options.defaultItemRows;\n itemComponent.item.rows = itemComponent.$item.rows;\n itemComponent.itemChanged();\n }\n if (itemComponent.$item.x === -1 || itemComponent.$item.y === -1) {\n this.autoPositionItem(itemComponent);\n } else if (this.checkCollision(itemComponent.$item)) {\n if (!this.$options.disableWarnings) {\n itemComponent.notPlaced = true;\n console.warn(\n \"Can't be placed in the bounds of the dashboard, trying to auto position!/n\" +\n JSON.stringify(itemComponent.item, ['cols', 'rows', 'x', 'y'])\n );\n }\n if (!this.$options.disableAutoPositionOnConflict) {\n this.autoPositionItem(itemComponent);\n } else {\n itemComponent.notPlaced = true;\n }\n }\n this.grid.push(itemComponent);\n this.calculateLayout$.next();\n }\n\n removeItem(itemComponent: GridsterItemComponentInterface): void {\n this.grid.splice(this.grid.indexOf(itemComponent), 1);\n this.calculateLayout$.next();\n if (this.options.itemRemovedCallback) {\n this.options.itemRemovedCallback(itemComponent.item, itemComponent);\n }\n }\n\n checkCollision(item: GridsterItem): GridsterItemComponentInterface | boolean {\n let collision: GridsterItemComponentInterface | boolean = false;\n if (this.options.itemValidateCallback) {\n collision = !this.options.itemValidateCallback(item);\n }\n if (!collision && this.checkGridCollision(item)) {\n collision = true;\n }\n if (!collision) {\n const c = this.findItemWithItem(item);\n if (c) {\n collision = c;\n }\n }\n return collision;\n }\n\n checkGridCollision(item: GridsterItem): boolean {\n const noNegativePosition = item.y > -1 && item.x > -1;\n const maxGridCols = item.cols + item.x <= this.$options.maxCols;\n const maxGridRows = item.rows + item.y <= this.$options.maxRows;\n const maxItemCols =\n item.maxItemCols === undefined\n ? this.$options.maxItemCols\n : item.maxItemCols;\n const minItemCols =\n item.minItemCols === undefined\n ? this.$options.minItemCols\n : item.minItemCols;\n const maxItemRows =\n item.maxItemRows === undefined\n ? this.$options.maxItemRows\n : item.maxItemRows;\n const minItemRows =\n item.minItemRows === undefined\n ? this.$options.minItemRows\n : item.minItemRows;\n const inColsLimits = item.cols <= maxItemCols && item.cols >= minItemCols;\n const inRowsLimits = item.rows <= maxItemRows && item.rows >= minItemRows;\n const minAreaLimit =\n item.minItemArea === undefined\n ? this.$options.minItemArea\n : item.minItemArea;\n const maxAreaLimit =\n item.maxItemArea === undefined\n ? this.$options.maxItemArea\n : item.maxItemArea;\n const area = item.cols angular-gridster2.report.json angular.json CODE_OF_CONDUCT.md LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json projects README.md src tsconfig.app.json tsconfig.json tsconfig.lint.json tsconfig.spec.json item.rows;\n const inMinArea = minAreaLimit <= area;\n const inMaxArea = maxAreaLimit >= area;\n return !(\n noNegativePosition &&\n maxGridCols &&\n maxGridRows &&\n inColsLimits &&\n inRowsLimits &&\n inMinArea &&\n inMaxArea\n );\n }\n\n findItemWithItem(\n item: GridsterItem\n ): GridsterItemComponentInterface | boolean {\n let widgetsIndex = 0;\n let widget: GridsterItemComponentInterface;\n for (; widgetsIndex < this.grid.length; widgetsIndex++) {\n widget = this.grid[widgetsIndex];\n if (\n widget.$item !== item &&\n this.checkCollisionTwoItems(widget.$item, item)\n ) {\n return widget;\n }\n }\n return false;\n }\n\n findItemsWithItem(item: GridsterItem): Array<GridsterItemComponentInterface> {\n const a: Array<GridsterItemComponentInterface> = [];\n let widgetsIndex = 0;\n let widget: GridsterItemComponentInterface;\n for (; widgetsIndex < this.grid.length; widgetsIndex++) {\n widget = this.grid[widgetsIndex];\n if (\n widget.$item !== item &&\n this.checkCollisionTwoItems(widget.$item, item)\n ) {\n a.push(widget);\n }\n }\n return a;\n }\n\n autoPositionItem(itemComponent: GridsterItemComponentInterface): void {\n if (this.getNextPossiblePosition(itemComponent.$item)) {\n itemComponent.notPlaced = false;\n itemComponent.item.x = itemComponent.$item.x;\n itemComponent.item.y = itemComponent.$item.y;\n itemComponent.itemChanged();\n } else {\n itemComponent.notPlaced = true;\n if (!this.$options.disableWarnings) {\n console.warn(\n \"Can't be placed in the bounds of the dashboard!/n\" +\n JSON.stringify(itemComponent.item, ['cols', 'rows', 'x', 'y'])\n );\n }\n }\n }\n\n getNextPossiblePosition = (\n newItem: GridsterItem,\n startingFrom: { y?: number; x?: number } = {}\n ): boolean => {\n if (newItem.cols === -1) {\n newItem.cols = this.$options.defaultItemCols;\n }\n if (newItem.rows === -1) {\n newItem.rows = this.$options.defaultItemRows;\n }\n this.setGridDimensions();\n let rowsIndex = startingFrom.y || 0;\n let colsIndex;\n for (; rowsIndex < this.rows; rowsIndex++) {\n newItem.y = rowsIndex;\n colsIndex = startingFrom.x || 0;\n for (; colsIndex < this.columns; colsIndex++) {\n newItem.x = colsIndex;\n if (!this.checkCollision(newItem)) {\n return true;\n }\n }\n }\n const canAddToRows = this.$options.maxRows >= this.rows + newItem.rows;\n const canAddToColumns =\n this.$options.maxCols >= this.columns + newItem.cols;\n const addToRows = this.rows <= this.columns && canAddToRows;\n if (!addToRows && canAddToColumns) {\n newItem.x = this.columns;\n newItem.y = 0;\n return true;\n } else if (canAddToRows) {\n newItem.y = this.rows;\n newItem.x = 0;\n return true;\n }\n return false;\n };\n\n getFirstPossiblePosition = (item: GridsterItem): GridsterItem => {\n const tmpItem = Object.assign({}, item);\n this.getNextPossiblePosition(tmpItem);\n return tmpItem;\n };\n\n getLastPossiblePosition = (item: GridsterItem): GridsterItem => {\n let farthestItem: { y: number; x: number } = { y: 0, x: 0 };\n farthestItem = this.grid.reduce(\n (\n prev: { y: number; x: number },\n curr: GridsterItemComponentInterface\n ) => {\n const currCoords = {\n y: curr.$item.y + curr.$item.rows - 1,\n x: curr.$item.x + curr.$item.cols - 1\n };\n if (GridsterUtils.compareItems(prev, currCoords) === 1) {\n return currCoords;\n } else {\n return prev;\n }\n },\n farthestItem\n );\n\n const tmpItem = Object.assign({}, item);\n this.getNextPossiblePosition(tmpItem, farthestItem);\n return tmpItem;\n };\n\n pixelsToPositionX(\n x: number,\n roundingMethod: (x: number) => number,\n noLimit?: boolean\n ): number {\n const position = roundingMethod(x / this.curColWidth);\n if (noLimit) {\n return position;\n } else {\n return Math.max(position, 0);\n }\n }\n\n pixelsToPositionY(\n y: number,\n roundingMethod: (x: number) => number,\n noLimit?: boolean\n ): number {\n const position = roundingMethod(y / this.curRowHeight);\n if (noLimit) {\n return position;\n } else {\n return Math.max(position, 0);\n }\n }\n\n positionXToPixels(x: number): number {\n return x angular-gridster2.report.json angular.json CODE_OF_CONDUCT.md LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json projects README.md src tsconfig.app.json tsconfig.json tsconfig.lint.json tsconfig.spec.json this.curColWidth;\n }\n\n positionYToPixels(y: number): number {\n return y angular-gridster2.report.json angular.json CODE_OF_CONDUCT.md LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json projects README.md src tsconfig.app.json tsconfig.json tsconfig.lint.json tsconfig.spec.json this.curRowHeight;\n }\n\n getItemComponent(\n item: GridsterItem\n ): GridsterItemComponentInterface | undefined {\n return this.grid.find(c => c.item === item);\n }\n\n // ------ Functions for swapWhileDragging option\n\n // identical to checkCollision() except that this function calls findItemWithItemForSwaping() instead of findItemWithItem()\n checkCollisionForSwaping(\n item: GridsterItem\n ): GridsterItemComponentInterface | boolean {\n let collision: GridsterItemComponentInterface | boolean = false;\n if (this.options.itemValidateCallback) {\n collision = !this.options.itemValidateCallback(item);\n }\n if (!collision && this.checkGridCollision(item)) {\n collision = true;\n }\n if (!collision) {\n const c = this.findItemWithItemForSwapping(item);\n if (c) {\n collision = c;\n }\n }\n return collision;\n }\n\n // identical to findItemWithItem() except that this function calls checkCollisionTwoItemsForSwaping() instead of checkCollisionTwoItems()\n findItemWithItemForSwapping(\n item: GridsterItem\n ): GridsterItemComponentInterface | boolean {\n let widgetsIndex: number = this.grid.length - 1;\n let widget: GridsterItemComponentInterface;\n for (; widgetsIndex > -1; widgetsIndex--) {\n widget = this.grid[widgetsIndex];\n if (\n widget.$item !== item &&\n GridsterComponent.checkCollisionTwoItemsForSwaping(widget.$item, item)\n ) {\n return widget;\n }\n }\n return false;\n }\n\n previewStyle(drag = false): void {\n if (this.movingItem) {\n if (this.compact && drag) {\n this.compact.checkCompactItem(this.movingItem);\n }\n this.previewStyle$.next(this.movingItem);\n } else {\n this.previewStyle$.next(null);\n }\n }\n\n // ------ End of functions for swapWhileDragging option\n\n // eslint-disable-next-line @typescript-eslint/member-ordering\n private static getNewArrayLength(\n length: number,\n overallSize: number,\n size: number\n ): number {\n const newLength = Math.max(length, Math.floor(overallSize / size));\n\n if (newLength < 0) {\n return 0;\n }\n\n if (Number.isFinite(newLength)) {\n return Math.floor(newLength);\n }\n\n return 0;\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/projects/angular-gridster2/src/lib/gridsterItem.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
              "severity": 2,
              "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
              "line": 25,
              "column": 1,
              "nodeType": "Decorator",
              "messageId": "preferOnPushComponentChangeDetection",
              "endLine": 31,
              "endColumn": 3,
              "suggestions": [
                {
                  "messageId": "suggestAddChangeDetectionOnPush",
                  "fix": {
                    "range": [
                      191,
                      615
                    ],
                    "text": ", ChangeDetectionStrategy\n} from '@angular/core';\nimport { GridsterComponent } from './gridster.component';\n\nimport { GridsterDraggable } from './gridsterDraggable.service';\nimport type { GridsterItem } from './gridsterItem.interface';\nimport { GridsterItemComponentInterface } from './gridsterItem.interface';\nimport { GridsterResizable } from './gridsterResizable.service';\nimport { GridsterUtils } from './gridsterUtils.service';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                  },
                  "desc": "Add `ChangeDetectionStrategy.OnPush`"
                }
              ]
            },
            {
              "ruleId": "@angular-eslint/consistent-component-styles",
              "severity": 2,
              "message": "Use `styleUrl` instead of `styleUrls` for a single stylesheet",
              "line": 28,
              "column": 3,
              "nodeType": "Property",
              "messageId": "useStyleUrl",
              "endLine": 28,
              "endColumn": 36,
              "fix": {
                "range": [
                  682,
                  715
                ],
                "text": "styleUrl: './gridsterItem.css'"
              }
            },
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 29,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 29,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      170,
                      757
                    ],
                    "text": "\n} from '@angular/core';\nimport { GridsterComponent } from './gridster.component';\n\nimport { GridsterDraggable } from './gridsterDraggable.service';\nimport type { GridsterItem } from './gridsterItem.interface';\nimport { GridsterItemComponentInterface } from './gridsterItem.interface';\nimport { GridsterResizable } from './gridsterResizable.service';\nimport { GridsterUtils } from './gridsterUtils.service';\n\n@Component({\n selector: 'gridster-item',\n templateUrl: './gridsterItem.html',\n styleUrls: ['./gridsterItem.css'],\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            },
            {
              "ruleId": "@angular-eslint/prefer-output-readonly",
              "severity": 2,
              "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
              "line": 36,
              "column": 13,
              "nodeType": "Identifier",
              "messageId": "preferOutputReadonly",
              "endLine": 36,
              "endColumn": 21,
              "suggestions": [
                {
                  "messageId": "suggestAddReadonlyModifier",
                  "fix": {
                    "range": [
                      934,
                      934
                    ],
                    "text": "readonly "
                  },
                  "desc": "Add `readonly` modifier"
                }
              ]
            },
            {
              "ruleId": "@angular-eslint/prefer-output-readonly",
              "severity": 2,
              "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
              "line": 40,
              "column": 13,
              "nodeType": "Identifier",
              "messageId": "preferOutputReadonly",
              "endLine": 40,
              "endColumn": 23,
              "suggestions": [
                {
                  "messageId": "suggestAddReadonlyModifier",
                  "fix": {
                    "range": [
                      1059,
                      1059
                    ],
                    "text": "readonly "
                  },
                  "desc": "Add `readonly` modifier"
                }
              ]
            },
            {
              "ruleId": "@angular-eslint/prefer-output-readonly",
              "severity": 2,
              "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
              "line": 44,
              "column": 13,
              "nodeType": "Identifier",
              "messageId": "preferOutputReadonly",
              "endLine": 44,
              "endColumn": 23,
              "suggestions": [
                {
                  "messageId": "suggestAddReadonlyModifier",
                  "fix": {
                    "range": [
                      1186,
                      1186
                    ],
                    "text": "readonly "
                  },
                  "desc": "Add `readonly` modifier"
                }
              ]
            },
            {
              "ruleId": "@angular-eslint/sort-lifecycle-methods",
              "severity": 2,
              "message": "Lifecycle Methods are not declared in order of execution",
              "line": 87,
              "column": 3,
              "nodeType": "Identifier",
              "messageId": "lifecycleMethodsNotSorted",
              "endLine": 87,
              "endColumn": 14
            }
          ],
          "suppressedMessages": [],
          "errorCount": 7,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 1,
          "fixableWarningCount": 0,
          "source": "import {\n Component,\n ElementRef,\n EventEmitter,\n HostBinding,\n Inject,\n Input,\n NgZone,\n OnChanges,\n OnDestroy,\n OnInit,\n Output,\n Renderer2,\n SimpleChanges,\n ViewEncapsulation\n} from '@angular/core';\nimport { GridsterComponent } from './gridster.component';\n\nimport { GridsterDraggable } from './gridsterDraggable.service';\nimport type { GridsterItem } from './gridsterItem.interface';\nimport { GridsterItemComponentInterface } from './gridsterItem.interface';\nimport { GridsterResizable } from './gridsterResizable.service';\nimport { GridsterUtils } from './gridsterUtils.service';\n\n@Component({\n selector: 'gridster-item',\n templateUrl: './gridsterItem.html',\n styleUrls: ['./gridsterItem.css'],\n encapsulation: ViewEncapsulation.None,\n standalone: true\n})\nexport class GridsterItemComponent\n implements OnInit, OnDestroy, OnChanges, GridsterItemComponentInterface\n{\n @Input() item: GridsterItem;\n @Output() itemInit = new EventEmitter<{\n item: GridsterItem;\n itemComponent: GridsterItemComponentInterface;\n }>();\n @Output() itemChange = new EventEmitter<{\n item: GridsterItem;\n itemComponent: GridsterItemComponentInterface;\n }>();\n @Output() itemResize = new EventEmitter<{\n item: GridsterItem;\n itemComponent: GridsterItemComponentInterface;\n }>();\n $item: GridsterItem;\n el: HTMLElement;\n gridster: GridsterComponent;\n top: number;\n left: number;\n width: number;\n height: number;\n drag: GridsterDraggable;\n resize: GridsterResizable;\n notPlaced: boolean;\n init: boolean;\n\n @HostBinding('style.z-index')\n get zIndex(): number {\n return this.getLayerIndex() + this.gridster.$options.baseLayerIndex;\n }\n\n constructor(\n @Inject(ElementRef) el: ElementRef,\n gridster: GridsterComponent,\n @Inject(Renderer2) public renderer: Renderer2,\n @Inject(NgZone) private zone: NgZone\n ) {\n this.el = el.nativeElement;\n this.$item = {\n cols: -1,\n rows: -1,\n x: -1,\n y: -1\n };\n this.gridster = gridster;\n this.drag = new GridsterDraggable(this, gridster, this.zone);\n this.resize = new GridsterResizable(this, gridster, this.zone);\n }\n\n ngOnInit(): void {\n this.gridster.addItem(this);\n }\n\n ngOnChanges(changes: SimpleChanges): void {\n if (changes.item) {\n this.updateOptions();\n\n if (!this.init) {\n this.gridster.calculateLayout$.next();\n }\n }\n if (changes.item && changes.item.previousValue) {\n this.setSize();\n }\n }\n\n updateOptions(): void {\n this.$item = GridsterUtils.merge(this.$item, this.item, {\n cols: undefined,\n rows: undefined,\n x: undefined,\n y: undefined,\n layerIndex: undefined,\n dragEnabled: undefined,\n resizeEnabled: undefined,\n compactEnabled: undefined,\n maxItemRows: undefined,\n minItemRows: undefined,\n maxItemCols: undefined,\n minItemCols: undefined,\n maxItemArea: undefined,\n minItemArea: undefined,\n resizableHandles: {\n s: undefined,\n e: undefined,\n n: undefined,\n w: undefined,\n se: undefined,\n ne: undefined,\n sw: undefined,\n nw: undefined\n }\n });\n }\n\n ngOnDestroy(): void {\n this.gridster.removeItem(this);\n this.drag.destroy();\n this.resize.destroy();\n this.gridster = this.drag = this.resize = null!;\n }\n\n setSize(): void {\n this.renderer.setStyle(this.el, 'display', this.notPlaced ? '' : 'block');\n this.gridster.gridRenderer.updateItem(this.el, this.$item, this.renderer);\n this.updateItemSize();\n }\n\n updateItemSize(): void {\n const top = this.$item.y angular-gridster2.report.json angular.json CODE_OF_CONDUCT.md LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json projects README.md src tsconfig.app.json tsconfig.json tsconfig.lint.json tsconfig.spec.json this.gridster.curRowHeight;\n const left = this.$item.x angular-gridster2.report.json angular.json CODE_OF_CONDUCT.md LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json projects README.md src tsconfig.app.json tsconfig.json tsconfig.lint.json tsconfig.spec.json this.gridster.curColWidth;\n const width =\n this.$item.cols angular-gridster2.report.json angular.json CODE_OF_CONDUCT.md LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json projects README.md src tsconfig.app.json tsconfig.json tsconfig.lint.json tsconfig.spec.json this.gridster.curColWidth -\n this.gridster.$options.margin;\n const height =\n this.$item.rows angular-gridster2.report.json angular.json CODE_OF_CONDUCT.md LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json projects README.md src tsconfig.app.json tsconfig.json tsconfig.lint.json tsconfig.spec.json this.gridster.curRowHeight -\n this.gridster.$options.margin;\n\n this.top = top;\n this.left = left;\n\n if (!this.init && width > 0 && height > 0) {\n this.init = true;\n if (this.item.initCallback) {\n this.item.initCallback(this.item, this);\n }\n if (this.gridster.options.itemInitCallback) {\n this.gridster.options.itemInitCallback(this.item, this);\n }\n this.itemInit.next({ item: this.item, itemComponent: this });\n if (this.gridster.$options.scrollToNewItems) {\n this.el.scrollIntoView(false);\n }\n }\n if (width !== this.width || height !== this.height) {\n this.width = width;\n this.height = height;\n if (this.gridster.options.itemResizeCallback) {\n this.gridster.options.itemResizeCallback(this.item, this);\n }\n this.itemResize.next({ item: this.item, itemComponent: this });\n }\n }\n\n itemChanged(): void {\n if (this.gridster.options.itemChangeCallback) {\n this.gridster.options.itemChangeCallback(this.item, this);\n }\n this.itemChange.next({ item: this.item, itemComponent: this });\n }\n\n checkItemChanges(newValue: GridsterItem, oldValue: GridsterItem): void {\n if (\n newValue.rows === oldValue.rows &&\n newValue.cols === oldValue.cols &&\n newValue.x === oldValue.x &&\n newValue.y === oldValue.y\n ) {\n return;\n }\n if (this.gridster.checkCollision(this.$item)) {\n this.$item.x = oldValue.x || 0;\n this.$item.y = oldValue.y || 0;\n this.$item.cols = oldValue.cols || 1;\n this.$item.rows = oldValue.rows || 1;\n this.setSize();\n } else {\n this.item.cols = this.$item.cols;\n this.item.rows = this.$item.rows;\n this.item.x = this.$item.x;\n this.item.y = this.$item.y;\n this.gridster.calculateLayout$.next();\n this.itemChanged();\n }\n }\n\n canBeDragged(): boolean {\n const gridDragEnabled = this.gridster.$options.draggable.enabled;\n const itemDragEnabled =\n this.$item.dragEnabled === undefined\n ? gridDragEnabled\n : this.$item.dragEnabled;\n return !this.gridster.mobile && gridDragEnabled && itemDragEnabled;\n }\n\n canBeResized(): boolean {\n const gridResizable = this.gridster.$options.resizable.enabled;\n const itemResizable =\n this.$item.resizeEnabled === undefined\n ? gridResizable\n : this.$item.resizeEnabled;\n return !this.gridster.mobile && gridResizable && itemResizable;\n }\n\n getResizableHandles() {\n const gridResizableHandles = this.gridster.$options.resizable.handles;\n const itemResizableHandles = this.$item.resizableHandles;\n // use grid settings if no settings are provided for the item.\n if (itemResizableHandles === undefined) {\n return gridResizableHandles;\n }\n // else merge the settings\n return {\n ...gridResizableHandles,\n ...itemResizableHandles\n };\n }\n\n bringToFront(offset: number): void {\n if (offset && offset <= 0) {\n return;\n }\n const layerIndex = this.getLayerIndex();\n const topIndex = this.gridster.$options.maxLayerIndex;\n if (layerIndex < topIndex) {\n const targetIndex = offset ? layerIndex + offset : topIndex;\n this.item.layerIndex = this.$item.layerIndex =\n targetIndex > topIndex ? topIndex : targetIndex;\n }\n }\n\n sendToBack(offset: number): void {\n if (offset && offset <= 0) {\n return;\n }\n const layerIndex = this.getLayerIndex();\n if (layerIndex > 0) {\n const targetIndex = offset ? layerIndex - offset : 0;\n this.item.layerIndex = this.$item.layerIndex =\n targetIndex < 0 ? 0 : targetIndex;\n }\n }\n\n private getLayerIndex(): number {\n if (this.item.layerIndex !== undefined) {\n return this.item.layerIndex;\n }\n if (this.gridster.$options.defaultLayerIndex !== undefined) {\n return this.gridster.$options.defaultLayerIndex;\n }\n return 0;\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/projects/angular-gridster2/src/lib/gridsterPreview.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
              "severity": 2,
              "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
              "line": 15,
              "column": 1,
              "nodeType": "Decorator",
              "messageId": "preferOnPushComponentChangeDetection",
              "endLine": 21,
              "endColumn": 3,
              "suggestions": [
                {
                  "messageId": "suggestAddChangeDetectionOnPush",
                  "fix": {
                    "range": [
                      116,
                      314
                    ],
                    "text": ", ChangeDetectionStrategy\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { GridsterItem } from './gridsterItem.interface';\nimport { GridsterRenderer } from './gridsterRenderer.service';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                  },
                  "desc": "Add `ChangeDetectionStrategy.OnPush`"
                }
              ]
            },
            {
              "ruleId": "@angular-eslint/consistent-component-styles",
              "severity": 2,
              "message": "Use `styleUrl` instead of `styleUrls` for a single stylesheet",
              "line": 18,
              "column": 3,
              "nodeType": "Property",
              "messageId": "useStyleUrl",
              "endLine": 18,
              "endColumn": 39,
              "fix": {
                "range": [
                  362,
                  398
                ],
                "text": "styleUrl: './gridsterPreview.css'"
              }
            },
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 19,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 19,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      95,
                      440
                    ],
                    "text": "\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { GridsterItem } from './gridsterItem.interface';\nimport { GridsterRenderer } from './gridsterRenderer.service';\n\n@Component({\n selector: 'gridster-preview',\n template: '',\n styleUrls: ['./gridsterPreview.css'],\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 3,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 1,
          "fixableWarningCount": 0,
          "source": "import {\n Component,\n ElementRef,\n EventEmitter,\n Input,\n OnDestroy,\n OnInit,\n Renderer2,\n ViewEncapsulation\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { GridsterItem } from './gridsterItem.interface';\nimport { GridsterRenderer } from './gridsterRenderer.service';\n\n@Component({\n selector: 'gridster-preview',\n template: '',\n styleUrls: ['./gridsterPreview.css'],\n encapsulation: ViewEncapsulation.None,\n standalone: true\n})\nexport class GridsterPreviewComponent implements OnInit, OnDestroy {\n @Input() previewStyle$: EventEmitter<GridsterItem | null>;\n @Input() gridRenderer: GridsterRenderer;\n private el: HTMLElement;\n private sub: Subscription;\n\n constructor(el: ElementRef, private renderer: Renderer2) {\n this.el = el.nativeElement;\n }\n\n ngOnInit(): void {\n this.sub = this.previewStyle$.subscribe(options =>\n this.previewStyle(options)\n );\n }\n\n ngOnDestroy(): void {\n if(this.sub) {\n this.sub.unsubscribe();\n }\n }\n\n private previewStyle(item: GridsterItem | null): void {\n if (item) {\n this.renderer.setStyle(this.el, 'display', 'block');\n this.gridRenderer.updateItem(this.el, item, this.renderer);\n } else {\n this.renderer.setStyle(this.el, 'display', '');\n }\n }\n}\n",
          "usedDeprecatedRules": []
        }
      ]
    }
  },
  "after": {
    "gridster-app": {
      "recommended": [],
      "all": [
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/app.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 14,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 14,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      47,
                      430
                    ],
                    "text": "\n} from '@angular/core';\nimport { MatListModule } from '@angular/material/list';\nimport { RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router';\n\n@Component({\n selector: 'app-root',\n templateUrl: './app.component.html',\n styleUrl: './app.component.css',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n ChangeDetectionStrategy,\n Component,\n ViewEncapsulation\n} from '@angular/core';\nimport { MatListModule } from '@angular/material/list';\nimport { RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router';\n\n@Component({\n selector: 'app-root',\n templateUrl: './app.component.html',\n styleUrl: './app.component.css',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [RouterLink, RouterLinkActive, RouterOutlet, MatListModule]\n})\nexport class AppComponent {}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/api/api.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 25,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 25,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      57,
                      593
                    ],
                    "text": "\n} from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport {\n CompactType,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridsterPush,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-api',\n templateUrl: './api.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport {\n CompactType,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridsterPush,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-api',\n templateUrl: './api.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n MatButtonModule,\n MatIconModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class ApiComponent implements OnInit {\n options: GridsterConfig;\n dashboard: GridsterItem[];\n itemToPush: GridsterItemComponent;\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n compactType: CompactType.None,\n pushItems: true,\n draggable: {\n enabled: true\n },\n resizable: {\n enabled: true\n }\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0, initCallback: this.initItem.bind(this) },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 4, x: 5 },\n { cols: 1, rows: 1, y: 2, x: 1 },\n { cols: 2, rows: 2, y: 5, x: 5 },\n { cols: 2, rows: 2, y: 3, x: 2 },\n { cols: 2, rows: 1, y: 2, x: 2 },\n { cols: 1, rows: 1, y: 3, x: 4 },\n { cols: 1, rows: 1, y: 0, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n\n initItem(item: GridsterItem, itemComponent: GridsterItemComponent): void {\n this.itemToPush = itemComponent;\n }\n\n pushItem(): void {\n const push = new GridsterPush(this.itemToPush); // init the service\n this.itemToPush.$item.rows += 4; // move/resize your item\n if (push.pushItems(push.fromNorth)) {\n // push items from a direction\n push.checkPushBack(); // check for items can restore to original position\n push.setPushedItems(); // save the items pushed\n this.itemToPush.setSize();\n this.itemToPush.checkItemChanges(\n this.itemToPush.$item,\n this.itemToPush.item\n );\n } else {\n this.itemToPush.$item.rows -= 4;\n push.restoreItems(); // restore to initial state the pushed items\n }\n push.destroy(); // destroy push instance\n // similar for GridsterPushResize and GridsterSwap\n }\n\n getItemComponent(): void {\n if (this.options.api && this.options.api.getItemComponent) {\n console.log(this.options.api.getItemComponent(this.dashboard[0]));\n }\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/compact/compact.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 26,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 26,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      57,
                      691
                    ],
                    "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n CompactType,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-compact',\n templateUrl: './compact.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n CompactType,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-compact',\n templateUrl: './compact.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatIconModule,\n MatSelectModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class CompactComponent implements OnInit {\n options: GridsterConfig;\n dashboard: Array<GridsterItem>;\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n compactType: CompactType.None,\n maxCols: 10,\n maxRows: 10,\n pushItems: true,\n draggable: {\n enabled: true\n },\n resizable: {\n enabled: true\n }\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 4, x: 5 },\n { cols: 1, rows: 1, y: 2, x: 1 },\n { cols: 2, rows: 2, y: 5, x: 5 },\n { cols: 2, rows: 2, y: 3, x: 2 },\n { cols: 2, rows: 1, y: 2, x: 2 },\n { cols: 1, rows: 1, y: 3, x: 4 },\n { cols: 1, rows: 1, y: 0, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/displayGrid/displayGrid.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 26,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 26,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      57,
                      700
                    ],
                    "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-display-grid',\n templateUrl: './displayGrid.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-display-grid',\n templateUrl: './displayGrid.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatIconModule,\n MatSelectModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class DisplayGridComponent implements OnInit {\n options: GridsterConfig;\n dashboard: Array<GridsterItem>;\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n pushItems: true,\n draggable: {\n enabled: true\n },\n resizable: {\n enabled: true\n }\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 4, x: 5 },\n { cols: 1, rows: 1, y: 2, x: 1 },\n { cols: 2, rows: 2, y: 5, x: 5 },\n { cols: 2, rows: 2, y: 3, x: 2 },\n { cols: 2, rows: 1, y: 2, x: 2 },\n { cols: 1, rows: 1, y: 3, x: 4 },\n { cols: 1, rows: 1, y: 0, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/drag/drag.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 33,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 33,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      57,
                      861
                    ],
                    "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\n\nimport {\n DisplayGrid,\n Draggable,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridsterItemComponentInterface,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\ninterface Safe extends GridsterConfig {\n draggable: Draggable;\n}\n\n@Component({\n selector: 'app-drag',\n templateUrl: './drag.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\n\nimport {\n DisplayGrid,\n Draggable,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridsterItemComponentInterface,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\ninterface Safe extends GridsterConfig {\n draggable: Draggable;\n}\n\n@Component({\n selector: 'app-drag',\n templateUrl: './drag.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatCheckboxModule,\n MatIconModule,\n MatInputModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class DragComponent implements OnInit {\n options: Safe;\n dashboard: Array<GridsterItem>;\n\n static eventStart(\n item: GridsterItem,\n itemComponent: GridsterItemComponentInterface,\n event: MouseEvent\n ): void {\n console.info('eventStart', item, itemComponent, event);\n }\n\n static eventStop(\n item: GridsterItem,\n itemComponent: GridsterItemComponentInterface,\n event: MouseEvent\n ): void {\n console.info('eventStop', item, itemComponent, event);\n }\n\n static overlapEvent(\n source: GridsterItem,\n target: GridsterItem,\n grid: GridsterComponent\n ): void {\n console.log('overlap', source, target, grid);\n }\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n pushItems: true,\n swap: false,\n draggable: {\n delayStart: 0,\n enabled: true,\n ignoreContentClass: 'gridster-item-content',\n ignoreContent: false,\n dragHandleClass: 'drag-handler',\n stop: DragComponent.eventStop,\n start: DragComponent.eventStart,\n dropOverItems: false,\n dropOverItemsCallback: DragComponent.overlapEvent\n },\n resizable: {\n enabled: true\n }\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2, hasContent: true },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 1, rows: 1, y: 2, x: 5 },\n { cols: 1, rows: 1, y: 1, x: 0 },\n { cols: 1, rows: 1, y: 1, x: 0 },\n {\n cols: 2,\n rows: 2,\n y: 3,\n x: 5,\n minItemRows: 2,\n minItemCols: 2,\n label: 'Min rows & cols = 2'\n },\n {\n cols: 2,\n rows: 2,\n y: 2,\n x: 0,\n maxItemRows: 2,\n maxItemCols: 2,\n label: 'Max rows & cols = 2'\n },\n {\n cols: 2,\n rows: 1,\n y: 2,\n x: 2,\n dragEnabled: true,\n resizeEnabled: true,\n label: 'Drag&Resize Enabled'\n },\n {\n cols: 1,\n rows: 1,\n y: 2,\n x: 4,\n dragEnabled: false,\n resizeEnabled: false,\n label: 'Drag&Resize Disabled'\n },\n { cols: 1, rows: 1, y: 2, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/dynamicWidgets/dynamicWidgets.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 26,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 26,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      73,
                      684
                    ],
                    "text": "\n} from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\nimport { ParentDynamicComponent } from './parentDynamic.component';\n\n@Component({\n selector: 'app-dynamic-widgets',\n templateUrl: './dynamicWidgets.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n ChangeDetectionStrategy,\n Component,\n EventEmitter,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\nimport { ParentDynamicComponent } from './parentDynamic.component';\n\n@Component({\n selector: 'app-dynamic-widgets',\n templateUrl: './dynamicWidgets.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n MatButtonModule,\n MatIconModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent,\n ParentDynamicComponent\n ]\n})\nexport class DynamicWidgetsComponent implements OnInit {\n options: GridsterConfig;\n dashboard: GridsterItem[];\n resizeEvent: EventEmitter<GridsterItem> = new EventEmitter<GridsterItem>();\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n disableWindowResize: false,\n scrollToNewItems: false,\n disableWarnings: false,\n ignoreMarginInRow: false,\n itemResizeCallback: item => {\n // update DB with new size\n // send the update to widgets\n this.resizeEvent.emit(item);\n }\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0, type: 'widgetA' },\n { cols: 2, rows: 2, y: 0, x: 2, type: 'widgetB' },\n { cols: 2, rows: 1, y: 1, x: 0, type: 'widgetC' }\n ];\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/dynamicWidgets/parentDynamic.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 15,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 15,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      56,
                      458
                    ],
                    "text": "\n} from '@angular/core';\nimport { WidgetAComponent } from './widgetA.component';\nimport { WidgetBComponent } from './widgetB.component';\nimport { WidgetCComponent } from './widgetC.component';\n\n@Component({\n selector: 'app-parent-dynamic',\n templateUrl: './parentDynamic.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n ChangeDetectionStrategy,\n Component,\n Input,\n ViewEncapsulation\n} from '@angular/core';\nimport { WidgetAComponent } from './widgetA.component';\nimport { WidgetBComponent } from './widgetB.component';\nimport { WidgetCComponent } from './widgetC.component';\n\n@Component({\n selector: 'app-parent-dynamic',\n templateUrl: './parentDynamic.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [WidgetAComponent, WidgetBComponent, WidgetCComponent]\n})\nexport class ParentDynamicComponent {\n @Input()\n widget;\n @Input()\n resizeEvent;\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/dynamicWidgets/widgetA.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 17,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 17,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      95,
                      392
                    ],
                    "text": "\n} from '@angular/core';\nimport { GridsterItem } from 'angular-gridster2';\nimport { Subscription } from 'rxjs';\n\n@Component({\n selector: 'app-widget-a',\n template: '{{widget.type}}',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n ChangeDetectionStrategy,\n Component,\n EventEmitter,\n Input,\n OnDestroy,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { GridsterItem } from 'angular-gridster2';\nimport { Subscription } from 'rxjs';\n\n@Component({\n selector: 'app-widget-a',\n template: '{{widget.type}}',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n standalone: true\n})\nexport class WidgetAComponent implements OnInit, OnDestroy {\n @Input()\n widget;\n @Input()\n resizeEvent: EventEmitter<GridsterItem>;\n\n resizeSub: Subscription;\n\n ngOnInit(): void {\n this.resizeSub = this.resizeEvent.subscribe(widget => {\n if (widget === this.widget) {\n // or check id , type or whatever you have there\n // resize your widget, chart, map , etc.\n console.log(widget);\n }\n });\n }\n\n ngOnDestroy(): void {\n this.resizeSub.unsubscribe();\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/dynamicWidgets/widgetB.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 17,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 17,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      95,
                      392
                    ],
                    "text": "\n} from '@angular/core';\nimport { GridsterItem } from 'angular-gridster2';\nimport { Subscription } from 'rxjs';\n\n@Component({\n selector: 'app-widget-b',\n template: '{{widget.type}}',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n ChangeDetectionStrategy,\n Component,\n EventEmitter,\n Input,\n OnDestroy,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { GridsterItem } from 'angular-gridster2';\nimport { Subscription } from 'rxjs';\n\n@Component({\n selector: 'app-widget-b',\n template: '{{widget.type}}',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n standalone: true\n})\nexport class WidgetBComponent implements OnInit, OnDestroy {\n @Input()\n widget;\n @Input()\n resizeEvent: EventEmitter<GridsterItem>;\n\n resizeSub: Subscription;\n\n ngOnInit(): void {\n this.resizeSub = this.resizeEvent.subscribe(widget => {\n if (widget === this.widget) {\n // or check id , type or whatever you have there\n // resize your widget, chart, map , etc.\n console.log(widget);\n }\n });\n }\n\n ngOnDestroy(): void {\n this.resizeSub.unsubscribe();\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/dynamicWidgets/widgetC.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 17,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 17,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      95,
                      392
                    ],
                    "text": "\n} from '@angular/core';\nimport { GridsterItem } from 'angular-gridster2';\nimport { Subscription } from 'rxjs';\n\n@Component({\n selector: 'app-widget-c',\n template: '{{widget.type}}',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n ChangeDetectionStrategy,\n Component,\n EventEmitter,\n Input,\n OnDestroy,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { GridsterItem } from 'angular-gridster2';\nimport { Subscription } from 'rxjs';\n\n@Component({\n selector: 'app-widget-c',\n template: '{{widget.type}}',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n standalone: true\n})\nexport class WidgetCComponent implements OnInit, OnDestroy {\n @Input()\n widget;\n @Input()\n resizeEvent: EventEmitter<GridsterItem>;\n\n resizeSub: Subscription;\n\n ngOnInit(): void {\n this.resizeSub = this.resizeEvent.subscribe(widget => {\n if (widget === this.widget) {\n // or check id , type or whatever you have there\n // resize your widget, chart, map , etc.\n console.log(widget);\n }\n });\n }\n\n ngOnDestroy(): void {\n this.resizeSub.unsubscribe();\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/emptyCell/emptyCell.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 27,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 27,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      57,
                      758
                    ],
                    "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-empty-cell',\n templateUrl: './emptyCell.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-empty-cell',\n templateUrl: './emptyCell.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatCheckboxModule,\n MatIconModule,\n MatInputModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class EmptyCellComponent implements OnInit {\n options: GridsterConfig;\n dashboard: Array<GridsterItem>;\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n enableEmptyCellClick: false,\n enableEmptyCellContextMenu: false,\n enableEmptyCellDrop: false,\n enableEmptyCellDrag: false,\n enableOccupiedCellDrop: false,\n emptyCellClickCallback: this.emptyCellClick.bind(this),\n emptyCellContextMenuCallback: this.emptyCellClick.bind(this),\n emptyCellDropCallback: this.emptyCellClick.bind(this),\n emptyCellDragCallback: this.emptyCellClick.bind(this),\n emptyCellDragMaxCols: 50,\n emptyCellDragMaxRows: 50\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 4, x: 5 },\n { cols: 1, rows: 1, y: 2, x: 1 },\n { cols: 2, rows: 2, y: 5, x: 5 },\n { cols: 2, rows: 2, y: 3, x: 2 },\n { cols: 2, rows: 1, y: 2, x: 2 },\n { cols: 1, rows: 1, y: 3, x: 4 },\n { cols: 1, rows: 1, y: 0, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n emptyCellClick(event: MouseEvent, item: GridsterItem): void {\n console.info('empty cell click', event, item);\n this.dashboard.push(item);\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n\n dragStartHandler(ev: DragEvent): void {\n if (ev.dataTransfer) {\n ev.dataTransfer.setData('text/plain', 'Drag Me Button');\n ev.dataTransfer.dropEffect = 'copy';\n }\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/gridEvents/gridEvents.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 26,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 26,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      57,
                      656
                    ],
                    "text": "\n} from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterComponentInterface,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridsterItemComponentInterface,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-grid-events',\n templateUrl: './gridEvents.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterComponentInterface,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridsterItemComponentInterface,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-grid-events',\n templateUrl: './gridEvents.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n MatButtonModule,\n MatIconModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class GridEventsComponent implements OnInit {\n options: GridsterConfig;\n dashboard: Array<GridsterItem>;\n remove: boolean;\n\n static itemChange(\n item: GridsterItem,\n itemComponent: GridsterItemComponentInterface\n ): void {\n console.info('itemChanged', item, itemComponent);\n }\n\n static itemResize(\n item: GridsterItem,\n itemComponent: GridsterItemComponentInterface\n ): void {\n console.info('itemResized', item, itemComponent);\n }\n\n static itemInit(\n item: GridsterItem,\n itemComponent: GridsterItemComponentInterface\n ): void {\n console.info('itemInitialized', item, itemComponent);\n }\n\n static itemRemoved(\n item: GridsterItem,\n itemComponent: GridsterItemComponentInterface\n ): void {\n console.info('itemRemoved', item, itemComponent);\n }\n\n static itemValidate(item: GridsterItem): boolean {\n return item.cols > 0 && item.rows > 0;\n }\n\n static gridInit(grid: GridsterComponentInterface): void {\n console.info('gridInit', grid);\n }\n\n static gridDestroy(grid: GridsterComponentInterface): void {\n console.info('gridDestroy', grid);\n }\n\n static gridSizeChanged(grid: GridsterComponentInterface): void {\n console.info('gridSizeChanged', grid);\n }\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n initCallback: GridEventsComponent.gridInit,\n destroyCallback: GridEventsComponent.gridDestroy,\n gridSizeChangedCallback: GridEventsComponent.gridSizeChanged,\n itemChangeCallback: GridEventsComponent.itemChange,\n itemResizeCallback: GridEventsComponent.itemResize,\n itemInitCallback: GridEventsComponent.itemInit,\n itemRemovedCallback: GridEventsComponent.itemRemoved,\n itemValidateCallback: GridEventsComponent.itemValidate,\n pushItems: true,\n draggable: {\n enabled: true\n },\n resizable: {\n enabled: true\n }\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 4, x: 5 },\n { cols: 1, rows: 1, y: 2, x: 1 },\n { cols: 2, rows: 2, y: 5, x: 5 },\n { cols: 2, rows: 2, y: 3, x: 2 },\n { cols: 2, rows: 1, y: 2, x: 2 },\n { cols: 1, rows: 1, y: 3, x: 4 },\n { cols: 1, rows: 1, y: 0, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n\n destroy(): void {\n this.remove = !this.remove;\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/gridMargins/gridMargins.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 28,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 28,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      57,
                      822
                    ],
                    "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-grid-margins',\n templateUrl: './gridMargins.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-grid-margins',\n templateUrl: './gridMargins.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatCheckboxModule,\n MatIconModule,\n MatInputModule,\n MatSelectModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class GridMarginsComponent implements OnInit {\n options: GridsterConfig;\n dashboard: Array<GridsterItem>;\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n margin: 10,\n outerMargin: true,\n outerMarginTop: null,\n outerMarginRight: null,\n outerMarginBottom: null,\n outerMarginLeft: null\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 4, x: 5 },\n { cols: 1, rows: 1, y: 2, x: 1 },\n { cols: 2, rows: 2, y: 5, x: 5 },\n { cols: 2, rows: 2, y: 3, x: 2 },\n { cols: 2, rows: 1, y: 2, x: 2 },\n { cols: 1, rows: 1, y: 3, x: 4 },\n { cols: 1, rows: 1, y: 0, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/gridSizes/gridSizes.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 26,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 26,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      57,
                      694
                    ],
                    "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-grid-sizes',\n templateUrl: './gridSizes.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-grid-sizes',\n templateUrl: './gridSizes.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatIconModule,\n MatInputModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class GridSizesComponent implements OnInit {\n options: GridsterConfig;\n dashboard: Array<GridsterItem>;\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n pushItems: true,\n draggable: {\n enabled: true\n },\n resizable: {\n enabled: true\n },\n minCols: 1,\n maxCols: 100,\n minRows: 1,\n maxRows: 100,\n maxItemCols: 100,\n minItemCols: 1,\n maxItemRows: 100,\n minItemRows: 1,\n maxItemArea: 2500,\n minItemArea: 1,\n defaultItemCols: 1,\n defaultItemRows: 1,\n addEmptyRowsCount: 2\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 4, x: 5 },\n { cols: 1, rows: 1, y: 2, x: 1 },\n { cols: 2, rows: 2, y: 5, x: 5 },\n { cols: 2, rows: 2, y: 3, x: 2 },\n { cols: 2, rows: 1, y: 2, x: 2 },\n { cols: 1, rows: 1, y: 3, x: 4 },\n { cols: 1, rows: 1, y: 0, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/gridTypes/gridTypes.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 28,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 28,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      57,
                      818
                    ],
                    "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-grid-types',\n templateUrl: './gridTypes.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-grid-types',\n templateUrl: './gridTypes.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatCheckboxModule,\n MatIconModule,\n MatInputModule,\n MatSelectModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class GridTypesComponent implements OnInit {\n options: GridsterConfig;\n dashboard: Array<GridsterItem>;\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n fixedColWidth: 105,\n fixedRowHeight: 105,\n keepFixedHeightInMobile: false,\n keepFixedWidthInMobile: false,\n mobileBreakpoint: 640,\n useBodyForBreakpoint: false,\n pushItems: true,\n rowHeightRatio: 1,\n draggable: {\n enabled: true\n },\n resizable: {\n enabled: true\n }\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 4, x: 5 },\n { cols: 1, rows: 1, y: 2, x: 1 },\n { cols: 2, rows: 2, y: 5, x: 5 },\n { cols: 2, rows: 2, y: 3, x: 2 },\n { cols: 2, rows: 1, y: 2, x: 2 },\n { cols: 1, rows: 1, y: 3, x: 4 },\n { cols: 1, rows: 1, y: 0, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/home/home.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 37,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 37,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      57,
                      947
                    ],
                    "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n CompactType,\n DisplayGrid,\n Draggable,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType,\n PushDirections,\n Resizable\n} from 'angular-gridster2';\n\ninterface Safe extends GridsterConfig {\n draggable: Draggable;\n resizable: Resizable;\n pushDirections: PushDirections;\n}\n\n@Component({\n selector: 'app-general',\n templateUrl: './home.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n CompactType,\n DisplayGrid,\n Draggable,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType,\n PushDirections,\n Resizable\n} from 'angular-gridster2';\n\ninterface Safe extends GridsterConfig {\n draggable: Draggable;\n resizable: Resizable;\n pushDirections: PushDirections;\n}\n\n@Component({\n selector: 'app-general',\n templateUrl: './home.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatCheckboxModule,\n MatIconModule,\n MatInputModule,\n MatSelectModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class HomeComponent implements OnInit {\n options: Safe;\n dashboard: Array<GridsterItem>;\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n compactType: CompactType.None,\n margin: 10,\n outerMargin: true,\n outerMarginTop: null,\n outerMarginRight: null,\n outerMarginBottom: null,\n outerMarginLeft: null,\n useTransformPositioning: true,\n mobileBreakpoint: 640,\n useBodyForBreakpoint: false,\n minCols: 1,\n maxCols: 100,\n minRows: 1,\n maxRows: 100,\n maxItemCols: 100,\n minItemCols: 1,\n maxItemRows: 100,\n minItemRows: 1,\n maxItemArea: 2500,\n minItemArea: 1,\n defaultItemCols: 1,\n defaultItemRows: 1,\n fixedColWidth: 105,\n fixedRowHeight: 105,\n keepFixedHeightInMobile: false,\n keepFixedWidthInMobile: false,\n scrollSensitivity: 10,\n scrollSpeed: 20,\n enableEmptyCellClick: false,\n enableEmptyCellContextMenu: false,\n enableEmptyCellDrop: false,\n enableEmptyCellDrag: false,\n enableOccupiedCellDrop: false,\n emptyCellDragMaxCols: 50,\n emptyCellDragMaxRows: 50,\n ignoreMarginInRow: false,\n draggable: {\n enabled: true\n },\n resizable: {\n enabled: true\n },\n swap: false,\n pushItems: true,\n disablePushOnDrag: false,\n disablePushOnResize: false,\n pushDirections: { north: true, east: true, south: true, west: true },\n pushResizeItems: false,\n displayGrid: DisplayGrid.Always,\n disableWindowResize: false,\n disableWarnings: false,\n scrollToNewItems: false\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2, hasContent: true },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 1, rows: 1, y: 2, x: 5 },\n { cols: 1, rows: 1, y: 1, x: 0 },\n { cols: 1, rows: 1, y: 1, x: 0 },\n {\n cols: 2,\n rows: 2,\n y: 3,\n x: 5,\n minItemRows: 2,\n minItemCols: 2,\n label: 'Min rows & cols = 2'\n },\n {\n cols: 2,\n rows: 2,\n y: 2,\n x: 0,\n maxItemRows: 2,\n maxItemCols: 2,\n label: 'Max rows & cols = 2'\n },\n {\n cols: 2,\n rows: 1,\n y: 2,\n x: 2,\n dragEnabled: true,\n resizeEnabled: true,\n label: 'Drag&Resize Enabled'\n },\n {\n cols: 1,\n rows: 1,\n y: 2,\n x: 4,\n dragEnabled: false,\n resizeEnabled: false,\n label: 'Drag&Resize Disabled'\n },\n { cols: 1, rows: 1, y: 2, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/items/items.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 30,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 30,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      57,
                      858
                    ],
                    "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n CompactType,\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridsterItemComponentInterface,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-items',\n templateUrl: './items.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n CompactType,\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridsterItemComponentInterface,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-items',\n templateUrl: './items.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatCheckboxModule,\n MatIconModule,\n MatInputModule,\n MatSelectModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class ItemsComponent implements OnInit {\n options: GridsterConfig;\n dashboard: Array<GridsterItem>;\n\n static itemInit(\n item: GridsterItem,\n itemComponent: GridsterItemComponentInterface\n ): void {\n console.info('itemInitialized', item, itemComponent);\n }\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n compactType: CompactType.None,\n pushItems: true,\n draggable: {\n enabled: true\n },\n resizable: {\n enabled: true\n },\n minCols: 1,\n maxCols: 100,\n minRows: 1,\n maxRows: 100,\n maxItemCols: 100,\n minItemCols: 1,\n maxItemRows: 100,\n minItemRows: 1,\n maxItemArea: 2500,\n minItemArea: 1,\n defaultItemCols: 1,\n defaultItemRows: 1\n };\n\n this.dashboard = [\n {\n cols: 2,\n rows: 1,\n y: 0,\n x: 0,\n initCallback: ItemsComponent.itemInit,\n minItemCols: 1,\n maxItemCols: 100,\n maxItemRows: 100,\n minItemRows: 1,\n minItemArea: 1,\n maxItemArea: 2500,\n dragEnabled: true,\n resizeEnabled: true,\n compactEnabled: true,\n resizableHandles: {\n s: true,\n e: true,\n n: true,\n w: true,\n se: true,\n ne: true,\n sw: true,\n nw: true\n }\n },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 2, x: 1 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/misc/misc.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 28,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 28,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      57,
                      807
                    ],
                    "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-misc',\n templateUrl: './misc.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-misc',\n templateUrl: './misc.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatCheckboxModule,\n MatIconModule,\n MatInputModule,\n MatSelectModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class MiscComponent implements OnInit {\n options: GridsterConfig;\n dashboard: Array<GridsterItem>;\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n draggable: { enabled: true },\n resizable: { enabled: true },\n disableWindowResize: true,\n scrollToNewItems: false,\n disableWarnings: false,\n ignoreMarginInRow: false,\n setGridSize: false,\n scale: 1\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 4, x: 5 },\n { cols: 1, rows: 1, y: 2, x: 1 },\n { cols: 2, rows: 2, y: 5, x: 5 },\n { cols: 2, rows: 2, y: 3, x: 2 },\n { cols: 2, rows: 1, y: 2, x: 2 },\n { cols: 1, rows: 1, y: 3, x: 4 },\n { cols: 1, rows: 1, y: 0, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/multiLayer/multi-layer.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 26,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 26,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      57,
                      751
                    ],
                    "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatMenuModule } from '@angular/material/menu';\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-swap',\n templateUrl: './multi-layer.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatMenuModule } from '@angular/material/menu';\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-swap',\n templateUrl: './multi-layer.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatCheckboxModule,\n MatIconModule,\n MatMenuModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class MultiLayerComponent implements OnInit {\n options: GridsterConfig;\n dashboard: Array<GridsterItem>;\n\n // noinspection DuplicatedCode\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n pushItems: false,\n swap: true,\n allowMultiLayer: true,\n defaultLayerIndex: 1,\n baseLayerIndex: 2,\n maxLayerIndex: 2,\n swapWhileDragging: false,\n draggable: {\n enabled: true\n },\n resizable: {\n enabled: true\n }\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0, layerIndex: 2 },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 4, x: 5 },\n { cols: 1, rows: 1, y: 2, x: 1 },\n { cols: 2, rows: 2, y: 5, x: 5 },\n { cols: 2, rows: 2, y: 3, x: 2 },\n { cols: 2, rows: 1, y: 2, x: 2 },\n { cols: 1, rows: 1, y: 3, x: 4 },\n { cols: 1, rows: 1, y: 0, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item: GridsterItem): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 2, rows: 1 });\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/push/push.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 35,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 35,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      57,
                      858
                    ],
                    "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport {\n DisplayGrid,\n Draggable,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType,\n PushDirections,\n Resizable\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\ninterface Safe extends GridsterConfig {\n draggable: Draggable;\n resizable: Resizable;\n pushDirections: PushDirections;\n}\n\n@Component({\n selector: 'app-push',\n templateUrl: './push.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport {\n DisplayGrid,\n Draggable,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType,\n PushDirections,\n Resizable\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\ninterface Safe extends GridsterConfig {\n draggable: Draggable;\n resizable: Resizable;\n pushDirections: PushDirections;\n}\n\n@Component({\n selector: 'app-push',\n templateUrl: './push.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatCheckboxModule,\n MatIconModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class PushComponent implements OnInit {\n options: Safe;\n dashboard: Array<GridsterItem>;\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n pushItems: true,\n pushDirections: { north: true, east: true, south: true, west: true },\n pushResizeItems: false,\n swap: false,\n draggable: {\n enabled: true\n },\n resizable: {\n enabled: true\n }\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 4, x: 5 },\n { cols: 1, rows: 1, y: 2, x: 1 },\n { cols: 2, rows: 2, y: 5, x: 5 },\n { cols: 2, rows: 2, y: 3, x: 2 },\n { cols: 2, rows: 1, y: 2, x: 2 },\n { cols: 1, rows: 1, y: 3, x: 4 },\n { cols: 1, rows: 1, y: 0, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/resize/resize.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 46,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 46,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      57,
                      1066
                    ],
                    "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridsterItemComponentInterface,\n GridType,\n Resizable\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\ninterface SafeResizable extends Resizable {\n handles: {\n s: boolean;\n e: boolean;\n n: boolean;\n w: boolean;\n se: boolean;\n ne: boolean;\n sw: boolean;\n nw: boolean;\n };\n}\n\ninterface Safe extends GridsterConfig {\n resizable: SafeResizable;\n}\n\n@Component({\n selector: 'app-resize',\n templateUrl: './resize.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridsterItemComponentInterface,\n GridType,\n Resizable\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\ninterface SafeResizable extends Resizable {\n handles: {\n s: boolean;\n e: boolean;\n n: boolean;\n w: boolean;\n se: boolean;\n ne: boolean;\n sw: boolean;\n nw: boolean;\n };\n}\n\ninterface Safe extends GridsterConfig {\n resizable: SafeResizable;\n}\n\n@Component({\n selector: 'app-resize',\n templateUrl: './resize.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatCheckboxModule,\n MatIconModule,\n MatInputModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class ResizeComponent implements OnInit {\n options: Safe;\n dashboard: Array<GridsterItem>;\n\n static eventStop(\n item: GridsterItem,\n itemComponent: GridsterItemComponentInterface,\n event: MouseEvent\n ): void {\n console.info('eventStop', item, itemComponent, event);\n }\n\n static eventStart(\n item: GridsterItem,\n itemComponent: GridsterItemComponentInterface,\n event: MouseEvent\n ): void {\n console.info('eventStart', item, itemComponent, event);\n }\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n resizable: {\n delayStart: 0,\n enabled: true,\n start: ResizeComponent.eventStart,\n stop: ResizeComponent.eventStop,\n handles: {\n s: true,\n e: true,\n n: true,\n w: true,\n se: true,\n ne: true,\n sw: true,\n nw: true\n }\n }\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 4, x: 5 },\n { cols: 1, rows: 1, y: 2, x: 1 },\n { cols: 2, rows: 2, y: 5, x: 5 },\n { cols: 2, rows: 2, y: 3, x: 2 },\n { cols: 2, rows: 1, y: 2, x: 2 },\n { cols: 1, rows: 1, y: 3, x: 4 },\n { cols: 1, rows: 1, y: 0, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/rtl/rtl.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 37,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 37,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      70,
                      961
                    ],
                    "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport {\n CompactType,\n DirTypes,\n DisplayGrid,\n Draggable,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType,\n Resizable\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\ninterface Safe extends GridsterConfig {\n draggable: Draggable;\n resizable: Resizable;\n}\n\n@Component({\n selector: 'app-rtl',\n templateUrl: './rtl.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnDestroy,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport {\n CompactType,\n DirTypes,\n DisplayGrid,\n Draggable,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType,\n Resizable\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\ninterface Safe extends GridsterConfig {\n draggable: Draggable;\n resizable: Resizable;\n}\n\n@Component({\n selector: 'app-rtl',\n templateUrl: './rtl.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatCheckboxModule,\n MatIconModule,\n MatInputModule,\n MatSelectModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class RtlComponent implements OnInit, OnDestroy {\n options: Safe;\n dashboard: Array<GridsterItem>;\n\n ngOnInit(): void {\n document.body.setAttribute('dir', 'rtl');\n\n this.options = {\n gridType: GridType.Fit,\n compactType: CompactType.None,\n margin: 10,\n outerMargin: true,\n outerMarginTop: null,\n outerMarginRight: null,\n outerMarginBottom: null,\n outerMarginLeft: null,\n useTransformPositioning: true,\n mobileBreakpoint: 640,\n minCols: 1,\n maxCols: 100,\n minRows: 1,\n maxRows: 100,\n maxItemCols: 100,\n minItemCols: 1,\n maxItemRows: 100,\n minItemRows: 1,\n maxItemArea: 2500,\n minItemArea: 1,\n defaultItemCols: 1,\n defaultItemRows: 1,\n fixedColWidth: 105,\n fixedRowHeight: 105,\n keepFixedHeightInMobile: false,\n keepFixedWidthInMobile: false,\n scrollSensitivity: 10,\n scrollSpeed: 20,\n enableEmptyCellClick: false,\n enableEmptyCellContextMenu: false,\n enableEmptyCellDrop: false,\n enableEmptyCellDrag: false,\n enableOccupiedCellDrop: false,\n emptyCellDragMaxCols: 50,\n emptyCellDragMaxRows: 50,\n ignoreMarginInRow: false,\n draggable: {\n enabled: true\n },\n resizable: {\n enabled: true\n },\n swap: false,\n pushItems: true,\n disablePushOnDrag: false,\n disablePushOnResize: false,\n pushDirections: { north: true, east: true, south: true, west: true },\n pushResizeItems: false,\n displayGrid: DisplayGrid.Always,\n disableWindowResize: false,\n disableWarnings: false,\n scrollToNewItems: false,\n dirType: DirTypes.RTL\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2, hasContent: true },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 1, rows: 1, y: 2, x: 5 },\n { cols: 1, rows: 1, y: 1, x: 0 },\n { cols: 1, rows: 1, y: 1, x: 0 },\n {\n cols: 2,\n rows: 2,\n y: 3,\n x: 5,\n minItemRows: 2,\n minItemCols: 2,\n label: 'Min rows & cols = 2'\n },\n {\n cols: 2,\n rows: 2,\n y: 2,\n x: 0,\n maxItemRows: 2,\n maxItemCols: 2,\n label: 'Max rows & cols = 2'\n },\n {\n cols: 2,\n rows: 1,\n y: 2,\n x: 2,\n dragEnabled: true,\n resizeEnabled: true,\n label: 'Drag&Resize Enabled'\n },\n {\n cols: 1,\n rows: 1,\n y: 2,\n x: 4,\n dragEnabled: false,\n resizeEnabled: false,\n label: 'Drag&Resize Disabled'\n },\n { cols: 1, rows: 1, y: 2, x: 6 }\n ];\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2, hasContent: true },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 1, rows: 1, y: 2, x: 5 },\n { cols: 1, rows: 1, y: 1, x: 0 },\n { cols: 1, rows: 1, y: 1, x: 0 },\n {\n cols: 2,\n rows: 2,\n y: 3,\n x: 5,\n minItemRows: 2,\n minItemCols: 2,\n label: 'Min rows & cols = 2'\n },\n {\n cols: 2,\n rows: 2,\n y: 2,\n x: 0,\n maxItemRows: 2,\n maxItemCols: 2,\n label: 'Max rows & cols = 2'\n },\n {\n cols: 2,\n rows: 1,\n y: 2,\n x: 2,\n dragEnabled: true,\n resizeEnabled: true,\n label: 'Drag&Resize Enabled'\n },\n {\n cols: 1,\n rows: 1,\n y: 2,\n x: 4,\n dragEnabled: false,\n resizeEnabled: false,\n label: 'Drag&Resize Disabled'\n },\n { cols: 1, rows: 1, y: 2, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n\n ngOnDestroy(): void {\n document.body.removeAttribute('dir');\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/swap/swap.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 26,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 26,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      57,
                      689
                    ],
                    "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-swap',\n templateUrl: './swap.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-swap',\n templateUrl: './swap.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatCheckboxModule,\n MatIconModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class SwapComponent implements OnInit {\n options: GridsterConfig;\n dashboard: Array<GridsterItem>;\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n pushItems: false,\n swap: true,\n swapWhileDragging: false,\n draggable: {\n enabled: true\n },\n resizable: {\n enabled: true\n }\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 4, x: 5 },\n { cols: 1, rows: 1, y: 2, x: 1 },\n { cols: 2, rows: 2, y: 5, x: 5 },\n { cols: 2, rows: 2, y: 3, x: 2 },\n { cols: 2, rows: 1, y: 2, x: 2 },\n { cols: 1, rows: 1, y: 3, x: 4 },\n { cols: 1, rows: 1, y: 0, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/trackBy/trackBy.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 27,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 27,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      57,
                      698
                    ],
                    "text": "\n} from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport {\n CompactType,\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridsterItemComponentInterface,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\nimport { TrackByItemComponent } from './trackByItem.component';\n\n@Component({\n selector: 'app-trackby',\n templateUrl: './trackBy.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport {\n CompactType,\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridsterItemComponentInterface,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\nimport { TrackByItemComponent } from './trackByItem.component';\n\n@Component({\n selector: 'app-trackby',\n templateUrl: './trackBy.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n MatButtonModule,\n MatIconModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent,\n TrackByItemComponent\n ]\n})\nexport class TrackByComponent implements OnInit {\n options: GridsterConfig;\n dashboard: Array<GridsterItem>;\n dashboardOriginal: Array<GridsterItem>;\n\n static itemInit(\n item: GridsterItem,\n itemComponent: GridsterItemComponentInterface\n ): void {\n console.info('itemInitialized', item, itemComponent);\n }\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n compactType: CompactType.None,\n pushItems: true,\n draggable: {\n enabled: true\n },\n resizable: {\n enabled: true\n },\n minCols: 1,\n maxCols: 100,\n minRows: 1,\n maxRows: 100,\n maxItemCols: 100,\n minItemCols: 1,\n maxItemRows: 100,\n minItemRows: 1,\n maxItemArea: 2500,\n minItemArea: 1,\n defaultItemCols: 1,\n defaultItemRows: 1\n };\n\n this.dashboard = [\n {\n cols: 2,\n rows: 1,\n y: 0,\n x: 0,\n initCallback: TrackByComponent.itemInit,\n minItemCols: 1,\n maxItemCols: 100,\n maxItemRows: 100,\n minItemRows: 1,\n minItemArea: 1,\n maxItemArea: 2500,\n dragEnabled: true,\n resizeEnabled: true,\n compactEnabled: true,\n id: 0\n },\n { cols: 2, rows: 2, y: 0, x: 2, id: 1 },\n { cols: 1, rows: 1, y: 0, x: 4, id: 2 },\n { cols: 3, rows: 2, y: 1, x: 4, id: 3 },\n { cols: 1, rows: 1, y: 2, x: 1, id: 4 }\n ];\n this.dashboardOriginal = this.dashboard.map(x => ({ ...x }));\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n reset(): void {\n this.dashboard = this.dashboardOriginal.map(x => ({ ...x }));\n }\n\n addItem(): void {\n this.dashboard.push({\n x: 0,\n y: 0,\n cols: 1,\n rows: 1,\n id: this.dashboard.length\n });\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/trackBy/trackByItem.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 17,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 17,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      66,
                      365
                    ],
                    "text": "\n} from '@angular/core';\n\n@Component({\n selector: 'app-trackby-item',\n template: `\n <div class=\"button-holder\">\n <div style=\"font-size: 30px\">ID: {{ id }}</div>\n </div>\n `,\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 1,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n ChangeDetectionStrategy,\n Component,\n Input,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\n\n@Component({\n selector: 'app-trackby-item',\n template: `\n <div class=\"button-holder\">\n <div style=\"font-size: 30px\">ID: {{ id }}</div>\n </div>\n `,\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n standalone: true\n})\nexport class TrackByItemComponent implements OnInit {\n @Input() id: string;\n\n ngOnInit(): void {\n console.info(`Init ${this.id}`);\n }\n}\n",
          "usedDeprecatedRules": []
        }
      ]
    },
    "angular-gridster2": {
      "recommended": [],
      "all": [
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/projects/angular-gridster2/src/lib/gridster.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
              "severity": 2,
              "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
              "line": 34,
              "column": 1,
              "nodeType": "Decorator",
              "messageId": "preferOnPushComponentChangeDetection",
              "endLine": 41,
              "endColumn": 3,
              "suggestions": [
                {
                  "messageId": "suggestAddChangeDetectionOnPush",
                  "fix": {
                    "range": [
                      230,
                      1141
                    ],
                    "text": ", ChangeDetectionStrategy\n} from '@angular/core';\nimport { debounceTime, Subject, switchMap, takeUntil, timer } from 'rxjs';\nimport { GridsterComponentInterface } from './gridster.interface';\nimport { GridsterCompact } from './gridsterCompact.service';\n\nimport { GridsterConfigService } from './gridsterConfig.constant';\nimport type { GridsterConfig } from './gridsterConfig.interface';\nimport { GridType } from './gridsterConfig.interface';\nimport { GridsterConfigS } from './gridsterConfigS.interface';\nimport { GridsterEmptyCell } from './gridsterEmptyCell.service';\nimport {\n GridsterItem,\n GridsterItemComponentInterface\n} from './gridsterItem.interface';\nimport { GridsterPreviewComponent } from './gridsterPreview.component';\nimport { GridsterRenderer } from './gridsterRenderer.service';\nimport { GridsterUtils } from './gridsterUtils.service';\n\n@Component({\n // eslint-disable-next-line @angular-eslint/component-selector\n changeDetection: ChangeDetectionStrategy.OnPush,"
                  },
                  "desc": "Add `ChangeDetectionStrategy.OnPush`"
                }
              ]
            },
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 39,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 39,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      209,
                      1267
                    ],
                    "text": "\n} from '@angular/core';\nimport { debounceTime, Subject, switchMap, takeUntil, timer } from 'rxjs';\nimport { GridsterComponentInterface } from './gridster.interface';\nimport { GridsterCompact } from './gridsterCompact.service';\n\nimport { GridsterConfigService } from './gridsterConfig.constant';\nimport type { GridsterConfig } from './gridsterConfig.interface';\nimport { GridType } from './gridsterConfig.interface';\nimport { GridsterConfigS } from './gridsterConfigS.interface';\nimport { GridsterEmptyCell } from './gridsterEmptyCell.service';\nimport {\n GridsterItem,\n GridsterItemComponentInterface\n} from './gridsterItem.interface';\nimport { GridsterPreviewComponent } from './gridsterPreview.component';\nimport { GridsterRenderer } from './gridsterRenderer.service';\nimport { GridsterUtils } from './gridsterUtils.service';\n\n@Component({\n // eslint-disable-next-line @angular-eslint/component-selector\n selector: 'gridster',\n templateUrl: './gridster.html',\n styleUrl: './gridster.css',\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            },
            {
              "ruleId": "@angular-eslint/sort-lifecycle-methods",
              "severity": 2,
              "message": "Lifecycle Methods are not declared in order of execution",
              "line": 151,
              "column": 3,
              "nodeType": "Identifier",
              "messageId": "lifecycleMethodsNotSorted",
              "endLine": 151,
              "endColumn": 14
            }
          ],
          "suppressedMessages": [
            {
              "ruleId": "@angular-eslint/component-selector",
              "severity": 2,
              "message": "The selector should be kebab-case (https://angular.dev/style-guide#style-05-02)",
              "line": 36,
              "column": 13,
              "nodeType": "Literal",
              "messageId": "styleFailure",
              "endLine": 36,
              "endColumn": 23,
              "suppressions": [
                {
                  "kind": "directive",
                  "justification": ""
                }
              ]
            }
          ],
          "errorCount": 3,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import { NgStyle } from '@angular/common';\nimport {\n ChangeDetectorRef,\n Component,\n ElementRef,\n EventEmitter,\n Inject,\n Input,\n NgZone,\n OnChanges,\n OnDestroy,\n OnInit,\n Renderer2,\n SimpleChanges,\n ViewEncapsulation\n} from '@angular/core';\nimport { debounceTime, Subject, switchMap, takeUntil, timer } from 'rxjs';\nimport { GridsterComponentInterface } from './gridster.interface';\nimport { GridsterCompact } from './gridsterCompact.service';\n\nimport { GridsterConfigService } from './gridsterConfig.constant';\nimport type { GridsterConfig } from './gridsterConfig.interface';\nimport { GridType } from './gridsterConfig.interface';\nimport { GridsterConfigS } from './gridsterConfigS.interface';\nimport { GridsterEmptyCell } from './gridsterEmptyCell.service';\nimport {\n GridsterItem,\n GridsterItemComponentInterface\n} from './gridsterItem.interface';\nimport { GridsterPreviewComponent } from './gridsterPreview.component';\nimport { GridsterRenderer } from './gridsterRenderer.service';\nimport { GridsterUtils } from './gridsterUtils.service';\n\n@Component({\n // eslint-disable-next-line @angular-eslint/component-selector\n selector: 'gridster',\n templateUrl: './gridster.html',\n styleUrl: './gridster.css',\n encapsulation: ViewEncapsulation.None,\n imports: [NgStyle, GridsterPreviewComponent]\n})\nexport class GridsterComponent\n implements OnInit, OnChanges, OnDestroy, GridsterComponentInterface\n{\n @Input() options: GridsterConfig;\n movingItem: GridsterItem | null;\n el: HTMLElement;\n $options: GridsterConfigS;\n mobile: boolean;\n curWidth: number;\n curHeight: number;\n grid: GridsterItemComponentInterface[];\n columns = 0;\n rows = 0;\n curColWidth: number;\n curRowHeight: number;\n gridColumns = [];\n gridRows = [];\n windowResize: (() => void) | null;\n dragInProgress: boolean;\n emptyCell: GridsterEmptyCell;\n compact: GridsterCompact;\n gridRenderer: GridsterRenderer;\n previewStyle$: EventEmitter<GridsterItem | null> =\n new EventEmitter<GridsterItem | null>();\n\n calculateLayout$ = new Subject<void>();\n\n private resize$ = new Subject<void>();\n private destroy$ = new Subject<void>();\n\n constructor(\n @Inject(ElementRef) el: ElementRef,\n @Inject(Renderer2) public renderer: Renderer2,\n @Inject(ChangeDetectorRef) public cdRef: ChangeDetectorRef,\n @Inject(NgZone) public zone: NgZone\n ) {\n this.el = el.nativeElement;\n this.$options = JSON.parse(JSON.stringify(GridsterConfigService));\n this.mobile = false;\n this.curWidth = 0;\n this.curHeight = 0;\n this.grid = [];\n this.curColWidth = 0;\n this.curRowHeight = 0;\n this.dragInProgress = false;\n this.emptyCell = new GridsterEmptyCell(this);\n this.compact = new GridsterCompact(this);\n this.gridRenderer = new GridsterRenderer(this);\n }\n\n // ------ Function for swapWhileDragging option\n\n // identical to checkCollision() except that here we add boundaries.\n static checkCollisionTwoItemsForSwaping(\n item: GridsterItem,\n item2: GridsterItem\n ): boolean {\n // if the cols or rows of the items are 1 , doesnt make any sense to set a boundary. Only if the item is bigger we set a boundary\n const horizontalBoundaryItem1 = item.cols === 1 ? 0 : 1;\n const horizontalBoundaryItem2 = item2.cols === 1 ? 0 : 1;\n const verticalBoundaryItem1 = item.rows === 1 ? 0 : 1;\n const verticalBoundaryItem2 = item2.rows === 1 ? 0 : 1;\n return (\n item.x + horizontalBoundaryItem1 < item2.x + item2.cols &&\n item.x + item.cols > item2.x + horizontalBoundaryItem2 &&\n item.y + verticalBoundaryItem1 < item2.y + item2.rows &&\n item.y + item.rows > item2.y + verticalBoundaryItem2\n );\n }\n\n checkCollisionTwoItems(item: GridsterItem, item2: GridsterItem): boolean {\n const collision =\n item.x < item2.x + item2.cols &&\n item.x + item.cols > item2.x &&\n item.y < item2.y + item2.rows &&\n item.y + item.rows > item2.y;\n if (!collision) {\n return false;\n }\n if (!this.$options.allowMultiLayer) {\n return true;\n }\n const defaultLayerIndex = this.$options.defaultLayerIndex;\n const layerIndex =\n item.layerIndex === undefined ? defaultLayerIndex : item.layerIndex;\n const layerIndex2 =\n item2.layerIndex === undefined ? defaultLayerIndex : item2.layerIndex;\n return layerIndex === layerIndex2;\n }\n\n ngOnInit(): void {\n if (this.options.initCallback) {\n this.options.initCallback(this);\n }\n\n this.calculateLayout$\n .pipe(debounceTime(0), takeUntil(this.destroy$))\n .subscribe(() => this.calculateLayout());\n\n this.resize$\n .pipe(\n // Cancel previously scheduled DOM timer if `calculateLayout()` has been called\n // within this time range.\n switchMap(() => timer(100)),\n takeUntil(this.destroy$)\n )\n .subscribe(() => this.resize());\n }\n\n ngOnChanges(changes: SimpleChanges): void {\n if (changes.options) {\n this.setOptions();\n this.options.api = {\n optionsChanged: this.optionsChanged,\n resize: this.onResize,\n getNextPossiblePosition: this.getNextPossiblePosition,\n getFirstPossiblePosition: this.getFirstPossiblePosition,\n getLastPossiblePosition: this.getLastPossiblePosition,\n getItemComponent: (item: GridsterItem) => this.getItemComponent(item)\n };\n this.columns = this.$options.minCols;\n this.rows = this.$options.minRows + this.$options.addEmptyRowsCount;\n this.setGridSize();\n this.calculateLayout();\n }\n }\n\n private resize(): void {\n let height;\n let width;\n if (this.$options.gridType === 'fit' && !this.mobile) {\n width = this.el.offsetWidth;\n height = this.el.offsetHeight;\n } else {\n width = this.el.clientWidth;\n height = this.el.clientHeight;\n }\n if (\n (width !== this.curWidth || height !== this.curHeight) &&\n this.checkIfToResize()\n ) {\n this.onResize();\n }\n }\n\n setOptions(): void {\n this.$options = GridsterUtils.merge(\n this.$options,\n this.options,\n this.$options\n );\n if (!this.$options.disableWindowResize && !this.windowResize) {\n this.windowResize = this.renderer.listen(\n 'window',\n 'resize',\n this.onResize\n );\n } else if (this.$options.disableWindowResize && this.windowResize) {\n this.windowResize();\n this.windowResize = null;\n }\n this.emptyCell.updateOptions();\n }\n\n optionsChanged = (): void => {\n this.setOptions();\n let widgetsIndex: number = this.grid.length - 1;\n let widget: GridsterItemComponentInterface;\n for (; widgetsIndex >= 0; widgetsIndex--) {\n widget = this.grid[widgetsIndex];\n widget.updateOptions();\n }\n this.calculateLayout();\n };\n\n ngOnDestroy(): void {\n this.destroy$.next();\n this.previewStyle$.complete();\n if (this.windowResize) {\n this.windowResize();\n }\n if (this.options && this.options.destroyCallback) {\n this.options.destroyCallback(this);\n }\n if (this.options && this.options.api) {\n this.options.api.resize = undefined;\n this.options.api.optionsChanged = undefined;\n this.options.api.getNextPossiblePosition = undefined;\n this.options.api = undefined;\n }\n this.emptyCell.destroy();\n this.emptyCell = null!;\n this.compact.destroy();\n this.compact = null!;\n }\n\n onResize = (): void => {\n if (this.el.clientWidth) {\n if (this.options.setGridSize) {\n // reset width/height so the size is recalculated afterwards\n this.renderer.setStyle(this.el, 'width', '');\n this.renderer.setStyle(this.el, 'height', '');\n }\n this.setGridSize();\n this.calculateLayout();\n }\n };\n\n checkIfToResize(): boolean {\n const clientWidth = this.el.clientWidth;\n const offsetWidth = this.el.offsetWidth;\n const scrollWidth = this.el.scrollWidth;\n const clientHeight = this.el.clientHeight;\n const offsetHeight = this.el.offsetHeight;\n const scrollHeight = this.el.scrollHeight;\n const verticalScrollPresent =\n clientWidth < offsetWidth &&\n scrollHeight > offsetHeight &&\n scrollHeight - offsetHeight < offsetWidth - clientWidth;\n const horizontalScrollPresent =\n clientHeight < offsetHeight &&\n scrollWidth > offsetWidth &&\n scrollWidth - offsetWidth < offsetHeight - clientHeight;\n if (verticalScrollPresent) {\n return false;\n }\n return !horizontalScrollPresent;\n }\n\n checkIfMobile(): boolean {\n if (this.$options.useBodyForBreakpoint) {\n return this.$options.mobileBreakpoint > document.body.clientWidth;\n } else {\n return this.$options.mobileBreakpoint > this.curWidth;\n }\n }\n\n setGridSize(): void {\n const el = this.el;\n let width;\n let height;\n if (\n this.$options.setGridSize ||\n (this.$options.gridType === GridType.Fit && !this.mobile)\n ) {\n width = el.offsetWidth;\n height = el.offsetHeight;\n } else {\n width = el.clientWidth;\n height = el.clientHeight;\n }\n this.curWidth = width;\n this.curHeight = height;\n }\n\n setGridDimensions(): void {\n this.setGridSize();\n if (!this.mobile && this.checkIfMobile()) {\n this.mobile = !this.mobile;\n this.renderer.addClass(this.el, 'mobile');\n } else if (this.mobile && !this.checkIfMobile()) {\n this.mobile = !this.mobile;\n this.renderer.removeClass(this.el, 'mobile');\n }\n let rows = this.$options.minRows;\n let columns = this.$options.minCols;\n\n let widgetsIndex = this.grid.length - 1;\n let widget;\n for (; widgetsIndex >= 0; widgetsIndex--) {\n widget = this.grid[widgetsIndex];\n if (!widget.notPlaced) {\n rows = Math.max(rows, widget.$item.y + widget.$item.rows);\n columns = Math.max(columns, widget.$item.x + widget.$item.cols);\n }\n }\n rows += this.$options.addEmptyRowsCount;\n if (this.columns !== columns || this.rows !== rows) {\n this.columns = columns;\n this.rows = rows;\n if (this.options.gridSizeChangedCallback) {\n this.options.gridSizeChangedCallback(this);\n }\n }\n }\n\n private calculateLayout(): void {\n if (this.compact) {\n this.compact.checkCompact();\n }\n\n this.setGridDimensions();\n if (this.$options.outerMargin) {\n let marginWidth = -this.$options.margin;\n if (this.$options.outerMarginLeft !== null) {\n marginWidth += this.$options.outerMarginLeft;\n this.renderer.setStyle(\n this.el,\n 'padding-left',\n this.$options.outerMarginLeft + 'px'\n );\n } else {\n marginWidth += this.$options.margin;\n this.renderer.setStyle(\n this.el,\n 'padding-left',\n this.$options.margin + 'px'\n );\n }\n if (this.$options.outerMarginRight !== null) {\n marginWidth += this.$options.outerMarginRight;\n this.renderer.setStyle(\n this.el,\n 'padding-right',\n this.$options.outerMarginRight + 'px'\n );\n } else {\n marginWidth += this.$options.margin;\n this.renderer.setStyle(\n this.el,\n 'padding-right',\n this.$options.margin + 'px'\n );\n }\n this.curColWidth = (this.curWidth - marginWidth) / this.columns;\n let marginHeight = -this.$options.margin;\n if (this.$options.outerMarginTop !== null) {\n marginHeight += this.$options.outerMarginTop;\n this.renderer.setStyle(\n this.el,\n 'padding-top',\n this.$options.outerMarginTop + 'px'\n );\n } else {\n marginHeight += this.$options.margin;\n this.renderer.setStyle(\n this.el,\n 'padding-top',\n this.$options.margin + 'px'\n );\n }\n if (this.$options.outerMarginBottom !== null) {\n marginHeight += this.$options.outerMarginBottom;\n this.renderer.setStyle(\n this.el,\n 'padding-bottom',\n this.$options.outerMarginBottom + 'px'\n );\n } else {\n marginHeight += this.$options.margin;\n this.renderer.setStyle(\n this.el,\n 'padding-bottom',\n this.$options.margin + 'px'\n );\n }\n this.curRowHeight =\n ((this.curHeight - marginHeight) / this.rows) angular-gridster2.report.json angular.json package.json package-lock.json tsconfig.app.json tsconfig.json tsconfig.lint.json tsconfig.spec.json this.$options.rowHeightRatio;\n } else {\n this.curColWidth = (this.curWidth + this.$options.margin) / this.columns;\n this.curRowHeight =\n ((this.curHeight + this.$options.margin) / this.rows) angular-gridster2.report.json angular.json package.json package-lock.json tsconfig.app.json tsconfig.json tsconfig.lint.json tsconfig.spec.json this.$options.rowHeightRatio;\n this.renderer.setStyle(this.el, 'padding-left', 0 + 'px');\n this.renderer.setStyle(this.el, 'padding-right', 0 + 'px');\n this.renderer.setStyle(this.el, 'padding-top', 0 + 'px');\n this.renderer.setStyle(this.el, 'padding-bottom', 0 + 'px');\n }\n this.gridRenderer.updateGridster();\n\n if (this.$options.setGridSize) {\n this.renderer.addClass(this.el, 'gridSize');\n if (!this.mobile) {\n this.renderer.setStyle(\n this.el,\n 'width',\n this.columns angular-gridster2.report.json angular.json CODE_OF_CONDUCT.md LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json projects README.md src tsconfig.app.json tsconfig.json tsconfig.lint.json tsconfig.spec.json this.curColWidth + this.$options.margin + 'px'\n );\n this.renderer.setStyle(\n this.el,\n 'height',\n this.rows angular-gridster2.report.json angular.json CODE_OF_CONDUCT.md LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json projects README.md src tsconfig.app.json tsconfig.json tsconfig.lint.json tsconfig.spec.json this.curRowHeight + this.$options.margin + 'px'\n );\n }\n } else {\n this.renderer.removeClass(this.el, 'gridSize');\n this.renderer.setStyle(this.el, 'width', '');\n this.renderer.setStyle(this.el, 'height', '');\n }\n this.updateGrid();\n\n let widgetsIndex: number = this.grid.length - 1;\n let widget: GridsterItemComponentInterface;\n for (; widgetsIndex >= 0; widgetsIndex--) {\n widget = this.grid[widgetsIndex];\n widget.setSize();\n widget.drag.toggle();\n widget.resize.toggle();\n }\n\n this.resize$.next();\n }\n\n updateGrid(): void {\n if (this.$options.displayGrid === 'always' && !this.mobile) {\n this.renderer.addClass(this.el, 'display-grid');\n } else if (\n this.$options.displayGrid === 'onDrag&Resize' &&\n this.dragInProgress\n ) {\n this.renderer.addClass(this.el, 'display-grid');\n } else if (\n this.$options.displayGrid === 'none' ||\n !this.dragInProgress ||\n this.mobile\n ) {\n this.renderer.removeClass(this.el, 'display-grid');\n }\n this.setGridDimensions();\n this.gridColumns.length = GridsterComponent.getNewArrayLength(\n this.columns,\n this.curWidth,\n this.curColWidth\n );\n this.gridRows.length = GridsterComponent.getNewArrayLength(\n this.rows,\n this.curHeight,\n this.curRowHeight\n );\n this.cdRef.markForCheck();\n }\n\n addItem(itemComponent: GridsterItemComponentInterface): void {\n if (itemComponent.$item.cols === undefined) {\n itemComponent.$item.cols = this.$options.defaultItemCols;\n itemComponent.item.cols = itemComponent.$item.cols;\n itemComponent.itemChanged();\n }\n if (itemComponent.$item.rows === undefined) {\n itemComponent.$item.rows = this.$options.defaultItemRows;\n itemComponent.item.rows = itemComponent.$item.rows;\n itemComponent.itemChanged();\n }\n if (itemComponent.$item.x === -1 || itemComponent.$item.y === -1) {\n this.autoPositionItem(itemComponent);\n } else if (this.checkCollision(itemComponent.$item)) {\n if (!this.$options.disableWarnings) {\n itemComponent.notPlaced = true;\n console.warn(\n \"Can't be placed in the bounds of the dashboard, trying to auto position!/n\" +\n JSON.stringify(itemComponent.item, ['cols', 'rows', 'x', 'y'])\n );\n }\n if (!this.$options.disableAutoPositionOnConflict) {\n this.autoPositionItem(itemComponent);\n } else {\n itemComponent.notPlaced = true;\n }\n }\n this.grid.push(itemComponent);\n this.calculateLayout$.next();\n }\n\n removeItem(itemComponent: GridsterItemComponentInterface): void {\n this.grid.splice(this.grid.indexOf(itemComponent), 1);\n this.calculateLayout$.next();\n if (this.options.itemRemovedCallback) {\n this.options.itemRemovedCallback(itemComponent.item, itemComponent);\n }\n }\n\n checkCollision(item: GridsterItem): GridsterItemComponentInterface | boolean {\n let collision: GridsterItemComponentInterface | boolean = false;\n if (this.options.itemValidateCallback) {\n collision = !this.options.itemValidateCallback(item);\n }\n if (!collision && this.checkGridCollision(item)) {\n collision = true;\n }\n if (!collision) {\n const c = this.findItemWithItem(item);\n if (c) {\n collision = c;\n }\n }\n return collision;\n }\n\n checkGridCollision(item: GridsterItem): boolean {\n const noNegativePosition = item.y > -1 && item.x > -1;\n const maxGridCols = item.cols + item.x <= this.$options.maxCols;\n const maxGridRows = item.rows + item.y <= this.$options.maxRows;\n const maxItemCols =\n item.maxItemCols === undefined\n ? this.$options.maxItemCols\n : item.maxItemCols;\n const minItemCols =\n item.minItemCols === undefined\n ? this.$options.minItemCols\n : item.minItemCols;\n const maxItemRows =\n item.maxItemRows === undefined\n ? this.$options.maxItemRows\n : item.maxItemRows;\n const minItemRows =\n item.minItemRows === undefined\n ? this.$options.minItemRows\n : item.minItemRows;\n const inColsLimits = item.cols <= maxItemCols && item.cols >= minItemCols;\n const inRowsLimits = item.rows <= maxItemRows && item.rows >= minItemRows;\n const minAreaLimit =\n item.minItemArea === undefined\n ? this.$options.minItemArea\n : item.minItemArea;\n const maxAreaLimit =\n item.maxItemArea === undefined\n ? this.$options.maxItemArea\n : item.maxItemArea;\n const area = item.cols angular-gridster2.report.json angular.json CODE_OF_CONDUCT.md LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json projects README.md src tsconfig.app.json tsconfig.json tsconfig.lint.json tsconfig.spec.json item.rows;\n const inMinArea = minAreaLimit <= area;\n const inMaxArea = maxAreaLimit >= area;\n return !(\n noNegativePosition &&\n maxGridCols &&\n maxGridRows &&\n inColsLimits &&\n inRowsLimits &&\n inMinArea &&\n inMaxArea\n );\n }\n\n findItemWithItem(\n item: GridsterItem\n ): GridsterItemComponentInterface | boolean {\n let widgetsIndex = 0;\n let widget: GridsterItemComponentInterface;\n for (; widgetsIndex < this.grid.length; widgetsIndex++) {\n widget = this.grid[widgetsIndex];\n if (\n widget.$item !== item &&\n this.checkCollisionTwoItems(widget.$item, item)\n ) {\n return widget;\n }\n }\n return false;\n }\n\n findItemsWithItem(item: GridsterItem): Array<GridsterItemComponentInterface> {\n const a: Array<GridsterItemComponentInterface> = [];\n let widgetsIndex = 0;\n let widget: GridsterItemComponentInterface;\n for (; widgetsIndex < this.grid.length; widgetsIndex++) {\n widget = this.grid[widgetsIndex];\n if (\n widget.$item !== item &&\n this.checkCollisionTwoItems(widget.$item, item)\n ) {\n a.push(widget);\n }\n }\n return a;\n }\n\n autoPositionItem(itemComponent: GridsterItemComponentInterface): void {\n if (this.getNextPossiblePosition(itemComponent.$item)) {\n itemComponent.notPlaced = false;\n itemComponent.item.x = itemComponent.$item.x;\n itemComponent.item.y = itemComponent.$item.y;\n itemComponent.itemChanged();\n } else {\n itemComponent.notPlaced = true;\n if (!this.$options.disableWarnings) {\n console.warn(\n \"Can't be placed in the bounds of the dashboard!/n\" +\n JSON.stringify(itemComponent.item, ['cols', 'rows', 'x', 'y'])\n );\n }\n }\n }\n\n getNextPossiblePosition = (\n newItem: GridsterItem,\n startingFrom: { y?: number; x?: number } = {}\n ): boolean => {\n if (newItem.cols === -1) {\n newItem.cols = this.$options.defaultItemCols;\n }\n if (newItem.rows === -1) {\n newItem.rows = this.$options.defaultItemRows;\n }\n this.setGridDimensions();\n let rowsIndex = startingFrom.y || 0;\n let colsIndex;\n for (; rowsIndex < this.rows; rowsIndex++) {\n newItem.y = rowsIndex;\n colsIndex = startingFrom.x || 0;\n for (; colsIndex < this.columns; colsIndex++) {\n newItem.x = colsIndex;\n if (!this.checkCollision(newItem)) {\n return true;\n }\n }\n }\n const canAddToRows = this.$options.maxRows >= this.rows + newItem.rows;\n const canAddToColumns =\n this.$options.maxCols >= this.columns + newItem.cols;\n const addToRows = this.rows <= this.columns && canAddToRows;\n if (!addToRows && canAddToColumns) {\n newItem.x = this.columns;\n newItem.y = 0;\n return true;\n } else if (canAddToRows) {\n newItem.y = this.rows;\n newItem.x = 0;\n return true;\n }\n return false;\n };\n\n getFirstPossiblePosition = (item: GridsterItem): GridsterItem => {\n const tmpItem = Object.assign({}, item);\n this.getNextPossiblePosition(tmpItem);\n return tmpItem;\n };\n\n getLastPossiblePosition = (item: GridsterItem): GridsterItem => {\n let farthestItem: { y: number; x: number } = { y: 0, x: 0 };\n farthestItem = this.grid.reduce(\n (\n prev: { y: number; x: number },\n curr: GridsterItemComponentInterface\n ) => {\n const currCoords = {\n y: curr.$item.y + curr.$item.rows - 1,\n x: curr.$item.x + curr.$item.cols - 1\n };\n if (GridsterUtils.compareItems(prev, currCoords) === 1) {\n return currCoords;\n } else {\n return prev;\n }\n },\n farthestItem\n );\n\n const tmpItem = Object.assign({}, item);\n this.getNextPossiblePosition(tmpItem, farthestItem);\n return tmpItem;\n };\n\n pixelsToPositionX(\n x: number,\n roundingMethod: (x: number) => number,\n noLimit?: boolean\n ): number {\n const position = roundingMethod(x / this.curColWidth);\n if (noLimit) {\n return position;\n } else {\n return Math.max(position, 0);\n }\n }\n\n pixelsToPositionY(\n y: number,\n roundingMethod: (x: number) => number,\n noLimit?: boolean\n ): number {\n const position = roundingMethod(y / this.curRowHeight);\n if (noLimit) {\n return position;\n } else {\n return Math.max(position, 0);\n }\n }\n\n positionXToPixels(x: number): number {\n return x angular-gridster2.report.json angular.json CODE_OF_CONDUCT.md LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json projects README.md src tsconfig.app.json tsconfig.json tsconfig.lint.json tsconfig.spec.json this.curColWidth;\n }\n\n positionYToPixels(y: number): number {\n return y angular-gridster2.report.json angular.json CODE_OF_CONDUCT.md LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json projects README.md src tsconfig.app.json tsconfig.json tsconfig.lint.json tsconfig.spec.json this.curRowHeight;\n }\n\n getItemComponent(\n item: GridsterItem\n ): GridsterItemComponentInterface | undefined {\n return this.grid.find(c => c.item === item);\n }\n\n // ------ Functions for swapWhileDragging option\n\n // identical to checkCollision() except that this function calls findItemWithItemForSwaping() instead of findItemWithItem()\n checkCollisionForSwaping(\n item: GridsterItem\n ): GridsterItemComponentInterface | boolean {\n let collision: GridsterItemComponentInterface | boolean = false;\n if (this.options.itemValidateCallback) {\n collision = !this.options.itemValidateCallback(item);\n }\n if (!collision && this.checkGridCollision(item)) {\n collision = true;\n }\n if (!collision) {\n const c = this.findItemWithItemForSwapping(item);\n if (c) {\n collision = c;\n }\n }\n return collision;\n }\n\n // identical to findItemWithItem() except that this function calls checkCollisionTwoItemsForSwaping() instead of checkCollisionTwoItems()\n findItemWithItemForSwapping(\n item: GridsterItem\n ): GridsterItemComponentInterface | boolean {\n let widgetsIndex: number = this.grid.length - 1;\n let widget: GridsterItemComponentInterface;\n for (; widgetsIndex > -1; widgetsIndex--) {\n widget = this.grid[widgetsIndex];\n if (\n widget.$item !== item &&\n GridsterComponent.checkCollisionTwoItemsForSwaping(widget.$item, item)\n ) {\n return widget;\n }\n }\n return false;\n }\n\n previewStyle(drag = false): void {\n if (this.movingItem) {\n if (this.compact && drag) {\n this.compact.checkCompactItem(this.movingItem);\n }\n this.previewStyle$.next(this.movingItem);\n } else {\n this.previewStyle$.next(null);\n }\n }\n\n // ------ End of functions for swapWhileDragging option\n\n // eslint-disable-next-line @typescript-eslint/member-ordering\n private static getNewArrayLength(\n length: number,\n overallSize: number,\n size: number\n ): number {\n const newLength = Math.max(length, Math.floor(overallSize / size));\n\n if (newLength < 0) {\n return 0;\n }\n\n if (Number.isFinite(newLength)) {\n return Math.floor(newLength);\n }\n\n return 0;\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/projects/angular-gridster2/src/lib/gridsterItem.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
              "severity": 2,
              "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
              "line": 25,
              "column": 1,
              "nodeType": "Decorator",
              "messageId": "preferOnPushComponentChangeDetection",
              "endLine": 31,
              "endColumn": 3,
              "suggestions": [
                {
                  "messageId": "suggestAddChangeDetectionOnPush",
                  "fix": {
                    "range": [
                      191,
                      615
                    ],
                    "text": ", ChangeDetectionStrategy\n} from '@angular/core';\nimport { GridsterComponent } from './gridster.component';\n\nimport { GridsterDraggable } from './gridsterDraggable.service';\nimport type { GridsterItem } from './gridsterItem.interface';\nimport { GridsterItemComponentInterface } from './gridsterItem.interface';\nimport { GridsterResizable } from './gridsterResizable.service';\nimport { GridsterUtils } from './gridsterUtils.service';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                  },
                  "desc": "Add `ChangeDetectionStrategy.OnPush`"
                }
              ]
            },
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 29,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 29,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      170,
                      754
                    ],
                    "text": "\n} from '@angular/core';\nimport { GridsterComponent } from './gridster.component';\n\nimport { GridsterDraggable } from './gridsterDraggable.service';\nimport type { GridsterItem } from './gridsterItem.interface';\nimport { GridsterItemComponentInterface } from './gridsterItem.interface';\nimport { GridsterResizable } from './gridsterResizable.service';\nimport { GridsterUtils } from './gridsterUtils.service';\n\n@Component({\n selector: 'gridster-item',\n templateUrl: './gridsterItem.html',\n styleUrl: './gridsterItem.css',\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            },
            {
              "ruleId": "@angular-eslint/prefer-output-readonly",
              "severity": 2,
              "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
              "line": 36,
              "column": 13,
              "nodeType": "Identifier",
              "messageId": "preferOutputReadonly",
              "endLine": 36,
              "endColumn": 21,
              "suggestions": [
                {
                  "messageId": "suggestAddReadonlyModifier",
                  "fix": {
                    "range": [
                      931,
                      931
                    ],
                    "text": "readonly "
                  },
                  "desc": "Add `readonly` modifier"
                }
              ]
            },
            {
              "ruleId": "@angular-eslint/prefer-output-readonly",
              "severity": 2,
              "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
              "line": 40,
              "column": 13,
              "nodeType": "Identifier",
              "messageId": "preferOutputReadonly",
              "endLine": 40,
              "endColumn": 23,
              "suggestions": [
                {
                  "messageId": "suggestAddReadonlyModifier",
                  "fix": {
                    "range": [
                      1056,
                      1056
                    ],
                    "text": "readonly "
                  },
                  "desc": "Add `readonly` modifier"
                }
              ]
            },
            {
              "ruleId": "@angular-eslint/prefer-output-readonly",
              "severity": 2,
              "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
              "line": 44,
              "column": 13,
              "nodeType": "Identifier",
              "messageId": "preferOutputReadonly",
              "endLine": 44,
              "endColumn": 23,
              "suggestions": [
                {
                  "messageId": "suggestAddReadonlyModifier",
                  "fix": {
                    "range": [
                      1183,
                      1183
                    ],
                    "text": "readonly "
                  },
                  "desc": "Add `readonly` modifier"
                }
              ]
            },
            {
              "ruleId": "@angular-eslint/sort-lifecycle-methods",
              "severity": 2,
              "message": "Lifecycle Methods are not declared in order of execution",
              "line": 87,
              "column": 3,
              "nodeType": "Identifier",
              "messageId": "lifecycleMethodsNotSorted",
              "endLine": 87,
              "endColumn": 14
            }
          ],
          "suppressedMessages": [],
          "errorCount": 6,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n Component,\n ElementRef,\n EventEmitter,\n HostBinding,\n Inject,\n Input,\n NgZone,\n OnChanges,\n OnDestroy,\n OnInit,\n Output,\n Renderer2,\n SimpleChanges,\n ViewEncapsulation\n} from '@angular/core';\nimport { GridsterComponent } from './gridster.component';\n\nimport { GridsterDraggable } from './gridsterDraggable.service';\nimport type { GridsterItem } from './gridsterItem.interface';\nimport { GridsterItemComponentInterface } from './gridsterItem.interface';\nimport { GridsterResizable } from './gridsterResizable.service';\nimport { GridsterUtils } from './gridsterUtils.service';\n\n@Component({\n selector: 'gridster-item',\n templateUrl: './gridsterItem.html',\n styleUrl: './gridsterItem.css',\n encapsulation: ViewEncapsulation.None,\n standalone: true\n})\nexport class GridsterItemComponent\n implements OnInit, OnDestroy, OnChanges, GridsterItemComponentInterface\n{\n @Input() item: GridsterItem;\n @Output() itemInit = new EventEmitter<{\n item: GridsterItem;\n itemComponent: GridsterItemComponentInterface;\n }>();\n @Output() itemChange = new EventEmitter<{\n item: GridsterItem;\n itemComponent: GridsterItemComponentInterface;\n }>();\n @Output() itemResize = new EventEmitter<{\n item: GridsterItem;\n itemComponent: GridsterItemComponentInterface;\n }>();\n $item: GridsterItem;\n el: HTMLElement;\n gridster: GridsterComponent;\n top: number;\n left: number;\n width: number;\n height: number;\n drag: GridsterDraggable;\n resize: GridsterResizable;\n notPlaced: boolean;\n init: boolean;\n\n @HostBinding('style.z-index')\n get zIndex(): number {\n return this.getLayerIndex() + this.gridster.$options.baseLayerIndex;\n }\n\n constructor(\n @Inject(ElementRef) el: ElementRef,\n gridster: GridsterComponent,\n @Inject(Renderer2) public renderer: Renderer2,\n @Inject(NgZone) private zone: NgZone\n ) {\n this.el = el.nativeElement;\n this.$item = {\n cols: -1,\n rows: -1,\n x: -1,\n y: -1\n };\n this.gridster = gridster;\n this.drag = new GridsterDraggable(this, gridster, this.zone);\n this.resize = new GridsterResizable(this, gridster, this.zone);\n }\n\n ngOnInit(): void {\n this.gridster.addItem(this);\n }\n\n ngOnChanges(changes: SimpleChanges): void {\n if (changes.item) {\n this.updateOptions();\n\n if (!this.init) {\n this.gridster.calculateLayout$.next();\n }\n }\n if (changes.item && changes.item.previousValue) {\n this.setSize();\n }\n }\n\n updateOptions(): void {\n this.$item = GridsterUtils.merge(this.$item, this.item, {\n cols: undefined,\n rows: undefined,\n x: undefined,\n y: undefined,\n layerIndex: undefined,\n dragEnabled: undefined,\n resizeEnabled: undefined,\n compactEnabled: undefined,\n maxItemRows: undefined,\n minItemRows: undefined,\n maxItemCols: undefined,\n minItemCols: undefined,\n maxItemArea: undefined,\n minItemArea: undefined,\n resizableHandles: {\n s: undefined,\n e: undefined,\n n: undefined,\n w: undefined,\n se: undefined,\n ne: undefined,\n sw: undefined,\n nw: undefined\n }\n });\n }\n\n ngOnDestroy(): void {\n this.gridster.removeItem(this);\n this.drag.destroy();\n this.resize.destroy();\n this.gridster = this.drag = this.resize = null!;\n }\n\n setSize(): void {\n this.renderer.setStyle(this.el, 'display', this.notPlaced ? '' : 'block');\n this.gridster.gridRenderer.updateItem(this.el, this.$item, this.renderer);\n this.updateItemSize();\n }\n\n updateItemSize(): void {\n const top = this.$item.y angular-gridster2.report.json angular.json CODE_OF_CONDUCT.md LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json projects README.md src tsconfig.app.json tsconfig.json tsconfig.lint.json tsconfig.spec.json this.gridster.curRowHeight;\n const left = this.$item.x angular-gridster2.report.json angular.json CODE_OF_CONDUCT.md LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json projects README.md src tsconfig.app.json tsconfig.json tsconfig.lint.json tsconfig.spec.json this.gridster.curColWidth;\n const width =\n this.$item.cols angular-gridster2.report.json angular.json CODE_OF_CONDUCT.md LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json projects README.md src tsconfig.app.json tsconfig.json tsconfig.lint.json tsconfig.spec.json this.gridster.curColWidth -\n this.gridster.$options.margin;\n const height =\n this.$item.rows angular-gridster2.report.json angular.json CODE_OF_CONDUCT.md LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json projects README.md src tsconfig.app.json tsconfig.json tsconfig.lint.json tsconfig.spec.json this.gridster.curRowHeight -\n this.gridster.$options.margin;\n\n this.top = top;\n this.left = left;\n\n if (!this.init && width > 0 && height > 0) {\n this.init = true;\n if (this.item.initCallback) {\n this.item.initCallback(this.item, this);\n }\n if (this.gridster.options.itemInitCallback) {\n this.gridster.options.itemInitCallback(this.item, this);\n }\n this.itemInit.next({ item: this.item, itemComponent: this });\n if (this.gridster.$options.scrollToNewItems) {\n this.el.scrollIntoView(false);\n }\n }\n if (width !== this.width || height !== this.height) {\n this.width = width;\n this.height = height;\n if (this.gridster.options.itemResizeCallback) {\n this.gridster.options.itemResizeCallback(this.item, this);\n }\n this.itemResize.next({ item: this.item, itemComponent: this });\n }\n }\n\n itemChanged(): void {\n if (this.gridster.options.itemChangeCallback) {\n this.gridster.options.itemChangeCallback(this.item, this);\n }\n this.itemChange.next({ item: this.item, itemComponent: this });\n }\n\n checkItemChanges(newValue: GridsterItem, oldValue: GridsterItem): void {\n if (\n newValue.rows === oldValue.rows &&\n newValue.cols === oldValue.cols &&\n newValue.x === oldValue.x &&\n newValue.y === oldValue.y\n ) {\n return;\n }\n if (this.gridster.checkCollision(this.$item)) {\n this.$item.x = oldValue.x || 0;\n this.$item.y = oldValue.y || 0;\n this.$item.cols = oldValue.cols || 1;\n this.$item.rows = oldValue.rows || 1;\n this.setSize();\n } else {\n this.item.cols = this.$item.cols;\n this.item.rows = this.$item.rows;\n this.item.x = this.$item.x;\n this.item.y = this.$item.y;\n this.gridster.calculateLayout$.next();\n this.itemChanged();\n }\n }\n\n canBeDragged(): boolean {\n const gridDragEnabled = this.gridster.$options.draggable.enabled;\n const itemDragEnabled =\n this.$item.dragEnabled === undefined\n ? gridDragEnabled\n : this.$item.dragEnabled;\n return !this.gridster.mobile && gridDragEnabled && itemDragEnabled;\n }\n\n canBeResized(): boolean {\n const gridResizable = this.gridster.$options.resizable.enabled;\n const itemResizable =\n this.$item.resizeEnabled === undefined\n ? gridResizable\n : this.$item.resizeEnabled;\n return !this.gridster.mobile && gridResizable && itemResizable;\n }\n\n getResizableHandles() {\n const gridResizableHandles = this.gridster.$options.resizable.handles;\n const itemResizableHandles = this.$item.resizableHandles;\n // use grid settings if no settings are provided for the item.\n if (itemResizableHandles === undefined) {\n return gridResizableHandles;\n }\n // else merge the settings\n return {\n ...gridResizableHandles,\n ...itemResizableHandles\n };\n }\n\n bringToFront(offset: number): void {\n if (offset && offset <= 0) {\n return;\n }\n const layerIndex = this.getLayerIndex();\n const topIndex = this.gridster.$options.maxLayerIndex;\n if (layerIndex < topIndex) {\n const targetIndex = offset ? layerIndex + offset : topIndex;\n this.item.layerIndex = this.$item.layerIndex =\n targetIndex > topIndex ? topIndex : targetIndex;\n }\n }\n\n sendToBack(offset: number): void {\n if (offset && offset <= 0) {\n return;\n }\n const layerIndex = this.getLayerIndex();\n if (layerIndex > 0) {\n const targetIndex = offset ? layerIndex - offset : 0;\n this.item.layerIndex = this.$item.layerIndex =\n targetIndex < 0 ? 0 : targetIndex;\n }\n }\n\n private getLayerIndex(): number {\n if (this.item.layerIndex !== undefined) {\n return this.item.layerIndex;\n }\n if (this.gridster.$options.defaultLayerIndex !== undefined) {\n return this.gridster.$options.defaultLayerIndex;\n }\n return 0;\n }\n}\n",
          "usedDeprecatedRules": []
        },
        {
          "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/projects/angular-gridster2/src/lib/gridsterPreview.component.ts",
          "messages": [
            {
              "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
              "severity": 2,
              "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
              "line": 15,
              "column": 1,
              "nodeType": "Decorator",
              "messageId": "preferOnPushComponentChangeDetection",
              "endLine": 21,
              "endColumn": 3,
              "suggestions": [
                {
                  "messageId": "suggestAddChangeDetectionOnPush",
                  "fix": {
                    "range": [
                      116,
                      314
                    ],
                    "text": ", ChangeDetectionStrategy\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { GridsterItem } from './gridsterItem.interface';\nimport { GridsterRenderer } from './gridsterRenderer.service';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                  },
                  "desc": "Add `ChangeDetectionStrategy.OnPush`"
                }
              ]
            },
            {
              "ruleId": "@angular-eslint/use-component-view-encapsulation",
              "severity": 2,
              "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
              "line": 19,
              "column": 36,
              "nodeType": "Identifier",
              "messageId": "useComponentViewEncapsulation",
              "endLine": 19,
              "endColumn": 40,
              "suggestions": [
                {
                  "messageId": "suggestRemoveViewEncapsulationNone",
                  "fix": {
                    "range": [
                      95,
                      437
                    ],
                    "text": "\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { GridsterItem } from './gridsterItem.interface';\nimport { GridsterRenderer } from './gridsterRenderer.service';\n\n@Component({\n selector: 'gridster-preview',\n template: '',\n styleUrl: './gridsterPreview.css',\n "
                  },
                  "desc": "Remove `ViewEncapsulation.None`"
                }
              ]
            }
          ],
          "suppressedMessages": [],
          "errorCount": 2,
          "fatalErrorCount": 0,
          "warningCount": 0,
          "fixableErrorCount": 0,
          "fixableWarningCount": 0,
          "source": "import {\n Component,\n ElementRef,\n EventEmitter,\n Input,\n OnDestroy,\n OnInit,\n Renderer2,\n ViewEncapsulation\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { GridsterItem } from './gridsterItem.interface';\nimport { GridsterRenderer } from './gridsterRenderer.service';\n\n@Component({\n selector: 'gridster-preview',\n template: '',\n styleUrl: './gridsterPreview.css',\n encapsulation: ViewEncapsulation.None,\n standalone: true\n})\nexport class GridsterPreviewComponent implements OnInit, OnDestroy {\n @Input() previewStyle$: EventEmitter<GridsterItem | null>;\n @Input() gridRenderer: GridsterRenderer;\n private el: HTMLElement;\n private sub: Subscription;\n\n constructor(el: ElementRef, private renderer: Renderer2) {\n this.el = el.nativeElement;\n }\n\n ngOnInit(): void {\n this.sub = this.previewStyle$.subscribe(options =>\n this.previewStyle(options)\n );\n }\n\n ngOnDestroy(): void {\n if(this.sub) {\n this.sub.unsubscribe();\n }\n }\n\n private previewStyle(item: GridsterItem | null): void {\n if (item) {\n this.renderer.setStyle(this.el, 'display', 'block');\n this.gridRenderer.updateItem(this.el, item, this.renderer);\n } else {\n this.renderer.setStyle(this.el, 'display', '');\n }\n }\n}\n",
          "usedDeprecatedRules": []
        }
      ]
    }
  }
}
