
Linting "angular-conduit"...
[{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/test/angular-realworld-example-app/src/app/app.component.ts","messages":[{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":6,"column":1,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":11,"endColumn":3,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[18,239],"text":", ChangeDetectionStrategy } from \"@angular/core\";\nimport { HeaderComponent } from \"./core/layout/header.component\";\nimport { RouterOutlet } from \"@angular/router\";\nimport { FooterComponent } from \"./core/layout/footer.component\";\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component } from \"@angular/core\";\nimport { HeaderComponent } from \"./core/layout/header.component\";\nimport { RouterOutlet } from \"@angular/router\";\nimport { FooterComponent } from \"./core/layout/footer.component\";\n\n@Component({\n  selector: \"app-root\",\n  templateUrl: \"./app.component.html\",\n  standalone: true,\n  imports: [HeaderComponent, RouterOutlet, FooterComponent],\n})\nexport class AppComponent {}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/test/angular-realworld-example-app/src/app/core/auth/auth.component.ts","messages":[{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":21,"column":1,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":26,"endColumn":3,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[46,671],"text":", ChangeDetectionStrategy } from \"@angular/core\";\nimport {\n  Validators,\n  FormGroup,\n  FormControl,\n  ReactiveFormsModule,\n} from \"@angular/forms\";\nimport { ActivatedRoute, Router, RouterLink } from \"@angular/router\";\nimport { NgIf } from \"@angular/common\";\nimport { ListErrorsComponent } from \"../../shared/components/list-errors.component\";\nimport { Errors } from \"../models/errors.model\";\nimport { UserService } from \"./services/user.service\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\ninterface AuthForm {\n  email: FormControl<string>;\n  password: FormControl<string>;\n  username?: FormControl<string>;\n}\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"prefer-const","severity":2,"message":"'observable' is never reassigned. Use 'const' instead.","line":70,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":70,"endColumn":19,"fix":{"range":[1956,2317],"text":"const observable =\n      this.authType === \"login\"\n        ? this.userService.login(\n            this.authForm.value as { email: string; password: string },\n          )\n        : this.userService.register(\n            this.authForm.value as {\n              email: string;\n              password: string;\n              username: string;\n            },\n          );"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { Component, DestroyRef, inject, OnInit } from \"@angular/core\";\nimport {\n  Validators,\n  FormGroup,\n  FormControl,\n  ReactiveFormsModule,\n} from \"@angular/forms\";\nimport { ActivatedRoute, Router, RouterLink } from \"@angular/router\";\nimport { NgIf } from \"@angular/common\";\nimport { ListErrorsComponent } from \"../../shared/components/list-errors.component\";\nimport { Errors } from \"../models/errors.model\";\nimport { UserService } from \"./services/user.service\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\ninterface AuthForm {\n  email: FormControl<string>;\n  password: FormControl<string>;\n  username?: FormControl<string>;\n}\n\n@Component({\n  selector: \"app-auth-page\",\n  templateUrl: \"./auth.component.html\",\n  imports: [RouterLink, NgIf, ListErrorsComponent, ReactiveFormsModule],\n  standalone: true,\n})\nexport default class AuthComponent implements OnInit {\n  authType = \"\";\n  title = \"\";\n  errors: Errors = { errors: {} };\n  isSubmitting = false;\n  authForm: FormGroup<AuthForm>;\n  destroyRef = inject(DestroyRef);\n\n  constructor(\n    private readonly route: ActivatedRoute,\n    private readonly router: Router,\n    private readonly userService: UserService,\n  ) {\n    this.authForm = new FormGroup<AuthForm>({\n      email: new FormControl(\"\", {\n        validators: [Validators.required],\n        nonNullable: true,\n      }),\n      password: new FormControl(\"\", {\n        validators: [Validators.required],\n        nonNullable: true,\n      }),\n    });\n  }\n\n  ngOnInit(): void {\n    this.authType = this.route.snapshot.url.at(-1)!.path;\n    this.title = this.authType === \"login\" ? \"Sign in\" : \"Sign up\";\n    if (this.authType === \"register\") {\n      this.authForm.addControl(\n        \"username\",\n        new FormControl(\"\", {\n          validators: [Validators.required],\n          nonNullable: true,\n        }),\n      );\n    }\n  }\n\n  submitForm(): void {\n    this.isSubmitting = true;\n    this.errors = { errors: {} };\n\n    let observable =\n      this.authType === \"login\"\n        ? this.userService.login(\n            this.authForm.value as { email: string; password: string },\n          )\n        : this.userService.register(\n            this.authForm.value as {\n              email: string;\n              password: string;\n              username: string;\n            },\n          );\n\n    observable.pipe(takeUntilDestroyed(this.destroyRef)).subscribe({\n      next: () => void this.router.navigate([\"/\"]),\n      error: (err) => {\n        this.errors = err;\n        this.isSubmitting = false;\n      },\n    });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/test/angular-realworld-example-app/src/app/core/auth/if-authenticated.directive.ts","messages":[{"ruleId":"@angular-eslint/directive-selector","severity":2,"message":"The selector should start with one of these prefixes: \"app\" (https://angular.dev/style-guide#style-02-08)","line":14,"column":13,"nodeType":"Literal","messageId":"prefixFailure","endLine":14,"endColumn":32},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type boolean trivially inferred from a boolean literal, remove type annotation.","line":25,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":25,"endColumn":30,"fix":{"range":[568,577],"text":""}},{"ruleId":"@angular-eslint/prefer-signals","severity":2,"message":"Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator","line":45,"column":3,"nodeType":"Decorator","messageId":"preferInputSignals","endLine":45,"endColumn":11}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import {\n  DestroyRef,\n  Directive,\n  inject,\n  Input,\n  OnInit,\n  TemplateRef,\n  ViewContainerRef,\n} from \"@angular/core\";\nimport { UserService } from \"./services/user.service\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Directive({\n  selector: \"[ifAuthenticated]\",\n  standalone: true,\n})\nexport class IfAuthenticatedDirective<T> implements OnInit {\n  destroyRef = inject(DestroyRef);\n  constructor(\n    private templateRef: TemplateRef<T>,\n    private userService: UserService,\n    private viewContainer: ViewContainerRef,\n  ) {}\n\n  condition: boolean = false;\n  hasView = false;\n\n  ngOnInit() {\n    this.userService.isAuthenticated\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe((isAuthenticated: boolean) => {\n        const authRequired = isAuthenticated && this.condition;\n        const unauthRequired = !isAuthenticated && !this.condition;\n\n        if ((authRequired || unauthRequired) && !this.hasView) {\n          this.viewContainer.createEmbeddedView(this.templateRef);\n          this.hasView = true;\n        } else if (this.hasView) {\n          this.viewContainer.clear();\n          this.hasView = false;\n        }\n      });\n  }\n\n  @Input() set ifAuthenticated(condition: boolean) {\n    this.condition = condition;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/test/angular-realworld-example-app/src/app/core/layout/header.component.html","messages":[{"ruleId":"@angular-eslint/template/alt-text","severity":2,"message":"<img/> element must have a text alternative.","line":56,"column":13,"nodeType":null,"messageId":"altText","endLine":60,"endColumn":15}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<nav class=\"navbar navbar-light\">\n  <div class=\"container\">\n    <a class=\"navbar-brand\" routerLink=\"/\">conduit</a>\n\n    <!-- Show this for logged out users -->\n    <ul *ifAuthenticated=\"false\" class=\"nav navbar-nav pull-xs-right\">\n      <li class=\"nav-item\">\n        <a class=\"nav-link\" routerLink=\"/\"> Home </a>\n      </li>\n\n      <li class=\"nav-item\">\n        <a class=\"nav-link\" routerLink=\"/login\" routerLinkActive=\"active\">\n          Sign in\n        </a>\n      </li>\n\n      <li class=\"nav-item\">\n        <a class=\"nav-link\" routerLink=\"/register\" routerLinkActive=\"active\">\n          Sign up\n        </a>\n      </li>\n    </ul>\n\n    <!-- Show this for logged in users -->\n    <ul *ifAuthenticated=\"true\" class=\"nav navbar-nav pull-xs-right\">\n      <li class=\"nav-item\">\n        <a\n          class=\"nav-link\"\n          routerLink=\"/\"\n          routerLinkActive=\"active\"\n          [routerLinkActiveOptions]=\"{ exact: true }\"\n        >\n          Home\n        </a>\n      </li>\n\n      <li class=\"nav-item\">\n        <a class=\"nav-link\" routerLink=\"/editor\" routerLinkActive=\"active\">\n          <i class=\"ion-compose\"></i>&nbsp;New Article\n        </a>\n      </li>\n\n      <li class=\"nav-item\">\n        <a class=\"nav-link\" routerLink=\"/settings\" routerLinkActive=\"active\">\n          <i class=\"ion-gear-a\"></i>&nbsp;Settings\n        </a>\n      </li>\n\n      @if (currentUser$ | async; as currentUser) {\n        <li class=\"nav-item\">\n          <a\n            class=\"nav-link\"\n            [routerLink]=\"['/profile', currentUser.username]\"\n            routerLinkActive=\"active\"\n          >\n            <img\n              [src]=\"currentUser.image\"\n              *ngIf=\"currentUser.image\"\n              class=\"user-pic\"\n            />\n            {{ currentUser.username }}\n          </a>\n        </li>\n      }\n    </ul>\n  </div>\n</nav>\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/test/angular-realworld-example-app/src/app/core/layout/header.component.ts","messages":[{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":7,"column":1,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":18,"endColumn":3,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[26,322],"text":", ChangeDetectionStrategy } from \"@angular/core\";\nimport { UserService } from \"../auth/services/user.service\";\nimport { RouterLink, RouterLinkActive } from \"@angular/router\";\nimport { AsyncPipe, NgIf } from \"@angular/common\";\nimport { IfAuthenticatedDirective } from \"../auth/if-authenticated.directive\";\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, inject } from \"@angular/core\";\nimport { UserService } from \"../auth/services/user.service\";\nimport { RouterLink, RouterLinkActive } from \"@angular/router\";\nimport { AsyncPipe, NgIf } from \"@angular/common\";\nimport { IfAuthenticatedDirective } from \"../auth/if-authenticated.directive\";\n\n@Component({\n  selector: \"app-layout-header\",\n  templateUrl: \"./header.component.html\",\n  imports: [\n    RouterLinkActive,\n    RouterLink,\n    AsyncPipe,\n    NgIf,\n    IfAuthenticatedDirective,\n  ],\n  standalone: true,\n})\nexport class HeaderComponent {\n  currentUser$ = inject(UserService).currentUser;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/test/angular-realworld-example-app/src/app/core/models/errors.model.ts","messages":[{"ruleId":"@typescript-eslint/consistent-indexed-object-style","severity":2,"message":"A record is preferred over an index signature.","line":2,"column":11,"nodeType":"TSTypeLiteral","messageId":"preferRecord","endLine":2,"endColumn":36,"fix":{"range":[36,61],"text":"Record<string, string>"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"export interface Errors {\n  errors: { [key: string]: string };\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/test/angular-realworld-example-app/src/app/features/article/components/article-comment.component.ts","messages":[{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":9,"column":1,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":47,"endColumn":3,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[55,418],"text":", ChangeDetectionStrategy } from \"@angular/core\";\nimport { UserService } from \"../../../core/auth/services/user.service\";\nimport { User } from \"../../../core/auth/user.model\";\nimport { RouterLink } from \"@angular/router\";\nimport { map } from \"rxjs/operators\";\nimport { Comment } from \"../models/comment.model\";\nimport { AsyncPipe, DatePipe, NgIf } from \"@angular/common\";\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/component-max-inline-declarations","severity":2,"message":"`template` has too many lines (32). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)","line":11,"column":13,"nodeType":"TemplateLiteral","messageId":"componentMaxInlineDeclarations","endLine":44,"endColumn":4},{"ruleId":"@angular-eslint/prefer-signals","severity":2,"message":"Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator","line":49,"column":3,"nodeType":"Decorator","messageId":"preferInputSignals","endLine":49,"endColumn":11},{"ruleId":"@angular-eslint/prefer-output-readonly","severity":2,"message":"Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned","line":50,"column":13,"nodeType":"Identifier","messageId":"preferOutputReadonly","endLine":50,"endColumn":19,"suggestions":[{"messageId":"suggestAddReadonlyModifier","fix":{"range":[1568,1568],"text":"readonly "},"desc":"Add `readonly` modifier"}]},{"ruleId":"@angular-eslint/template/alt-text","severity":2,"message":"<img/> element must have a text alternative.","line":24,"column":13,"nodeType":null,"messageId":"altText","endLine":24,"endColumn":76},{"ruleId":"@angular-eslint/template/click-events-have-key-events","severity":2,"message":"click must be accompanied by either keyup, keydown or keypress event for accessibility.","line":38,"column":15,"nodeType":null,"messageId":"clickEventsHaveKeyEvents","endLine":38,"endColumn":70},{"ruleId":"@angular-eslint/template/interactive-supports-focus","severity":2,"message":"Elements with interaction handlers must be focusable.","line":38,"column":15,"nodeType":null,"messageId":"interactiveSupportsFocus","endLine":38,"endColumn":70}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, EventEmitter, Input, Output, inject } from \"@angular/core\";\nimport { UserService } from \"../../../core/auth/services/user.service\";\nimport { User } from \"../../../core/auth/user.model\";\nimport { RouterLink } from \"@angular/router\";\nimport { map } from \"rxjs/operators\";\nimport { Comment } from \"../models/comment.model\";\nimport { AsyncPipe, DatePipe, NgIf } from \"@angular/common\";\n\n@Component({\n  selector: \"app-article-comment\",\n  template: `\n    @if (comment) {\n      <div class=\"card\">\n        <div class=\"card-block\">\n          <p class=\"card-text\">\n            {{ comment.body }}\n          </p>\n        </div>\n        <div class=\"card-footer\">\n          <a\n            class=\"comment-author\"\n            [routerLink]=\"['/profile', comment.author.username]\"\n          >\n            <img [src]=\"comment.author.image\" class=\"comment-author-img\" />\n          </a>\n          &nbsp;\n          <a\n            class=\"comment-author\"\n            [routerLink]=\"['/profile', comment.author.username]\"\n          >\n            {{ comment.author.username }}\n          </a>\n          <span class=\"date-posted\">\n            {{ comment.createdAt | date: \"longDate\" }}\n          </span>\n          @if (canModify$ | async) {\n            <span class=\"mod-options\">\n              <i class=\"ion-trash-a\" (click)=\"delete.emit(true)\"></i>\n            </span>\n          }\n        </div>\n      </div>\n    }\n  `,\n  imports: [RouterLink, DatePipe, NgIf, AsyncPipe],\n  standalone: true,\n})\nexport class ArticleCommentComponent {\n  @Input() comment!: Comment;\n  @Output() delete = new EventEmitter<boolean>();\n\n  canModify$ = inject(UserService).currentUser.pipe(\n    map(\n      (userData: User | null) =>\n        userData?.username === this.comment.author.username,\n    ),\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/test/angular-realworld-example-app/src/app/features/article/components/article-list.component.ts","messages":[{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":10,"column":1,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":47,"endColumn":3,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[45,541],"text":", ChangeDetectionStrategy } from \"@angular/core\";\nimport { ArticlesService } from \"../services/articles.service\";\nimport { ArticleListConfig } from \"../models/article-list-config.model\";\nimport { Article } from \"../models/article.model\";\nimport { ArticlePreviewComponent } from \"./article-preview.component\";\nimport { NgClass, NgForOf, NgIf } from \"@angular/common\";\nimport { LoadingState } from \"../../../core/models/loading-state.model\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/component-max-inline-declarations","severity":2,"message":"`template` has too many lines (26). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)","line":12,"column":13,"nodeType":"TemplateLiteral","messageId":"componentMaxInlineDeclarations","endLine":39,"endColumn":4},{"ruleId":"@typescript-eslint/array-type","severity":2,"message":"Array type using 'Array<number>' is forbidden. Use 'number[]' instead.","line":52,"column":15,"nodeType":"TSTypeReference","messageId":"errorStringArray","endLine":52,"endColumn":28,"fix":{"range":[1650,1663],"text":"number[]"}},{"ruleId":"@angular-eslint/prefer-signals","severity":2,"message":"Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator","line":57,"column":3,"nodeType":"Decorator","messageId":"preferInputSignals","endLine":57,"endColumn":11},{"ruleId":"@angular-eslint/prefer-signals","severity":2,"message":"Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator","line":58,"column":3,"nodeType":"Decorator","messageId":"preferInputSignals","endLine":58,"endColumn":11}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { Component, DestroyRef, inject, Input } from \"@angular/core\";\nimport { ArticlesService } from \"../services/articles.service\";\nimport { ArticleListConfig } from \"../models/article-list-config.model\";\nimport { Article } from \"../models/article.model\";\nimport { ArticlePreviewComponent } from \"./article-preview.component\";\nimport { NgClass, NgForOf, NgIf } from \"@angular/common\";\nimport { LoadingState } from \"../../../core/models/loading-state.model\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Component({\n  selector: \"app-article-list\",\n  template: `\n    @if (loading === LoadingState.LOADING) {\n      <div class=\"article-preview\">Loading articles...</div>\n    }\n\n    @if (loading === LoadingState.LOADED) {\n      @for (article of results; track article.slug) {\n        <app-article-preview [article]=\"article\" />\n      } @empty {\n        <div class=\"article-preview\">No articles are here... yet.</div>\n      }\n\n      <nav>\n        <ul class=\"pagination\">\n          @for (pageNumber of totalPages; track pageNumber) {\n            <li\n              class=\"page-item\"\n              [ngClass]=\"{ active: pageNumber === currentPage }\"\n            >\n              <button class=\"page-link\" (click)=\"setPageTo(pageNumber)\">\n                {{ pageNumber }}\n              </button>\n            </li>\n          }\n        </ul>\n      </nav>\n    }\n  `,\n  imports: [ArticlePreviewComponent, NgForOf, NgClass, NgIf],\n  styles: `\n    .page-link {\n      cursor: pointer;\n    }\n  `,\n  standalone: true,\n})\nexport class ArticleListComponent {\n  query!: ArticleListConfig;\n  results: Article[] = [];\n  currentPage = 1;\n  totalPages: Array<number> = [];\n  loading = LoadingState.NOT_LOADED;\n  LoadingState = LoadingState;\n  destroyRef = inject(DestroyRef);\n\n  @Input() limit!: number;\n  @Input()\n  set config(config: ArticleListConfig) {\n    if (config) {\n      this.query = config;\n      this.currentPage = 1;\n      this.runQuery();\n    }\n  }\n\n  constructor(private articlesService: ArticlesService) {}\n\n  setPageTo(pageNumber: number) {\n    this.currentPage = pageNumber;\n    this.runQuery();\n  }\n\n  runQuery() {\n    this.loading = LoadingState.LOADING;\n    this.results = [];\n\n    // Create limit and offset filter (if necessary)\n    if (this.limit) {\n      this.query.filters.limit = this.limit;\n      this.query.filters.offset = this.limit * (this.currentPage - 1);\n    }\n\n    this.articlesService\n      .query(this.query)\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe((data) => {\n        this.loading = LoadingState.LOADED;\n        this.results = data.articles;\n\n        // Used from http://www.jstips.co/en/create-range-0...n-easily-using-one-line/\n        this.totalPages = Array.from(\n          new Array(Math.ceil(data.articlesCount / this.limit)),\n          (val, index) => index + 1,\n        );\n      });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/test/angular-realworld-example-app/src/app/features/article/components/article-meta.component.ts","messages":[{"ruleId":"@angular-eslint/component-max-inline-declarations","severity":2,"message":"`template` has too many lines (16). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)","line":8,"column":13,"nodeType":"TemplateLiteral","messageId":"componentMaxInlineDeclarations","endLine":25,"endColumn":4},{"ruleId":"@angular-eslint/prefer-signals","severity":2,"message":"Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator","line":31,"column":3,"nodeType":"Decorator","messageId":"preferInputSignals","endLine":31,"endColumn":11},{"ruleId":"@angular-eslint/template/alt-text","severity":2,"message":"<img/> element must have a text alternative.","line":11,"column":9,"nodeType":null,"messageId":"altText","endLine":11,"endColumn":45}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ChangeDetectionStrategy, Component, Input } from \"@angular/core\";\nimport { Article } from \"../models/article.model\";\nimport { RouterLink } from \"@angular/router\";\nimport { DatePipe } from \"@angular/common\";\n\n@Component({\n  selector: \"app-article-meta\",\n  template: `\n    <div class=\"article-meta\">\n      <a [routerLink]=\"['/profile', article.author.username]\">\n        <img [src]=\"article.author.image\" />\n      </a>\n\n      <div class=\"info\">\n        <a class=\"author\" [routerLink]=\"['/profile', article.author.username]\">\n          {{ article.author.username }}\n        </a>\n        <span class=\"date\">\n          {{ article.createdAt | date: \"longDate\" }}\n        </span>\n      </div>\n\n      <ng-content></ng-content>\n    </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [RouterLink, DatePipe],\n  standalone: true,\n})\nexport class ArticleMetaComponent {\n  @Input() article!: Article;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/test/angular-realworld-example-app/src/app/features/article/components/article-preview.component.ts","messages":[{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":8,"column":1,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":38,"endColumn":3,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[25,342],"text":", ChangeDetectionStrategy } from \"@angular/core\";\nimport { Article } from \"../models/article.model\";\nimport { ArticleMetaComponent } from \"./article-meta.component\";\nimport { RouterLink } from \"@angular/router\";\nimport { NgForOf } from \"@angular/common\";\nimport { FavoriteButtonComponent } from \"./favorite-button.component\";\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/component-max-inline-declarations","severity":2,"message":"`template` has too many lines (24). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)","line":10,"column":13,"nodeType":"TemplateLiteral","messageId":"componentMaxInlineDeclarations","endLine":35,"endColumn":4},{"ruleId":"@angular-eslint/prefer-signals","severity":2,"message":"Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator","line":40,"column":3,"nodeType":"Decorator","messageId":"preferInputSignals","endLine":40,"endColumn":11}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, Input } from \"@angular/core\";\nimport { Article } from \"../models/article.model\";\nimport { ArticleMetaComponent } from \"./article-meta.component\";\nimport { RouterLink } from \"@angular/router\";\nimport { NgForOf } from \"@angular/common\";\nimport { FavoriteButtonComponent } from \"./favorite-button.component\";\n\n@Component({\n  selector: \"app-article-preview\",\n  template: `\n    <div class=\"article-preview\">\n      <app-article-meta [article]=\"article\">\n        <app-favorite-button\n          [article]=\"article\"\n          (toggle)=\"toggleFavorite($event)\"\n          class=\"pull-xs-right\"\n        >\n          {{ article.favoritesCount }}\n        </app-favorite-button>\n      </app-article-meta>\n\n      <a [routerLink]=\"['/article', article.slug]\" class=\"preview-link\">\n        <h1>{{ article.title }}</h1>\n        <p>{{ article.description }}</p>\n        <span>Read more...</span>\n        <ul class=\"tag-list\">\n          @for (tag of article.tagList; track tag) {\n            <li class=\"tag-default tag-pill tag-outline\">\n              {{ tag }}\n            </li>\n          }\n        </ul>\n      </a>\n    </div>\n  `,\n  imports: [ArticleMetaComponent, FavoriteButtonComponent, RouterLink, NgForOf],\n  standalone: true,\n})\nexport class ArticlePreviewComponent {\n  @Input() article!: Article;\n\n  toggleFavorite(favorited: boolean): void {\n    this.article.favorited = favorited;\n\n    if (favorited) {\n      this.article.favoritesCount++;\n    } else {\n      this.article.favoritesCount--;\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/test/angular-realworld-example-app/src/app/features/article/components/favorite-button.component.ts","messages":[{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":17,"column":1,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":34,"endColumn":3,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[79,499],"text":", ChangeDetectionStrategy,\n} from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { EMPTY, switchMap } from \"rxjs\";\nimport { NgClass } from \"@angular/common\";\nimport { ArticlesService } from \"../services/articles.service\";\nimport { UserService } from \"../../../core/auth/services/user.service\";\nimport { Article } from \"../models/article.model\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/component-max-inline-declarations","severity":2,"message":"`template` has too many lines (11). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)","line":19,"column":13,"nodeType":"TemplateLiteral","messageId":"componentMaxInlineDeclarations","endLine":31,"endColumn":4},{"ruleId":"@angular-eslint/prefer-signals","severity":2,"message":"Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator","line":39,"column":3,"nodeType":"Decorator","messageId":"preferInputSignals","endLine":39,"endColumn":11},{"ruleId":"@angular-eslint/prefer-output-readonly","severity":2,"message":"Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned","line":40,"column":13,"nodeType":"Identifier","messageId":"preferOutputReadonly","endLine":40,"endColumn":19,"suggestions":[{"messageId":"suggestAddReadonlyModifier","fix":{"range":[1037,1037],"text":"readonly "},"desc":"Add `readonly` modifier"}]},{"ruleId":"@angular-eslint/no-output-native","severity":2,"message":"Output bindings, including aliases, should not be named as standard DOM events","line":40,"column":13,"nodeType":"Identifier","messageId":"noOutputNative","endLine":40,"endColumn":19}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Component,\n  DestroyRef,\n  EventEmitter,\n  inject,\n  Input,\n  Output,\n} from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { EMPTY, switchMap } from \"rxjs\";\nimport { NgClass } from \"@angular/common\";\nimport { ArticlesService } from \"../services/articles.service\";\nimport { UserService } from \"../../../core/auth/services/user.service\";\nimport { Article } from \"../models/article.model\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Component({\n  selector: \"app-favorite-button\",\n  template: `\n    <button\n      class=\"btn btn-sm\"\n      [ngClass]=\"{\n        disabled: isSubmitting,\n        'btn-outline-primary': !article.favorited,\n        'btn-primary': article.favorited\n      }\"\n      (click)=\"toggleFavorite()\"\n    >\n      <i class=\"ion-heart\"></i> <ng-content></ng-content>\n    </button>\n  `,\n  imports: [NgClass],\n  standalone: true,\n})\nexport class FavoriteButtonComponent {\n  destroyRef = inject(DestroyRef);\n  isSubmitting = false;\n\n  @Input() article!: Article;\n  @Output() toggle = new EventEmitter<boolean>();\n\n  constructor(\n    private readonly articleService: ArticlesService,\n    private readonly router: Router,\n    private readonly userService: UserService,\n  ) {}\n\n  toggleFavorite(): void {\n    this.isSubmitting = true;\n\n    this.userService.isAuthenticated\n      .pipe(\n        switchMap((authenticated) => {\n          if (!authenticated) {\n            void this.router.navigate([\"/register\"]);\n            return EMPTY;\n          }\n\n          if (!this.article.favorited) {\n            return this.articleService.favorite(this.article.slug);\n          } else {\n            return this.articleService.unfavorite(this.article.slug);\n          }\n        }),\n        takeUntilDestroyed(this.destroyRef),\n      )\n      .subscribe({\n        next: () => {\n          this.isSubmitting = false;\n          this.toggle.emit(!this.article.favorited);\n        },\n        error: () => (this.isSubmitting = false),\n      });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/test/angular-realworld-example-app/src/app/features/article/pages/article/article.component.html","messages":[{"ruleId":"@angular-eslint/template/alt-text","severity":2,"message":"<img/> element must have a text alternative.","line":116,"column":19,"nodeType":null,"messageId":"altText","endLine":121,"endColumn":21}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"@if (article) {\n  <div class=\"article-page\">\n    <div class=\"banner\">\n      <div class=\"container\">\n        <h1>{{ article.title }}</h1>\n\n        <app-article-meta [article]=\"article\">\n          @if (canModify) {\n            <span>\n              <a\n                class=\"btn btn-sm btn-outline-secondary\"\n                [routerLink]=\"['/editor', article.slug]\"\n              >\n                <i class=\"ion-edit\"></i> Edit Article\n              </a>\n\n              <button\n                class=\"btn btn-sm btn-outline-danger\"\n                [ngClass]=\"{ disabled: isDeleting }\"\n                (click)=\"deleteArticle()\"\n              >\n                <i class=\"ion-trash-a\"></i> Delete Article\n              </button>\n            </span>\n          } @else {\n            <span>\n              <app-follow-button\n                [profile]=\"article.author\"\n                (toggle)=\"toggleFollowing($event)\"\n              >\n              </app-follow-button>\n\n              <app-favorite-button\n                [article]=\"article\"\n                (toggle)=\"onToggleFavorite($event)\"\n              >\n                {{ article.favorited ? \"Unfavorite\" : \"Favorite\" }} Article\n                <span class=\"counter\">({{ article.favoritesCount }})</span>\n              </app-favorite-button>\n            </span>\n          }\n        </app-article-meta>\n      </div>\n    </div>\n\n    <div class=\"container page\">\n      <div class=\"row article-content\">\n        <div class=\"col-md-12\">\n          <div [innerHTML]=\"article.body | markdown | async\"></div>\n\n          <ul class=\"tag-list\">\n            @for (tag of article.tagList; track tag) {\n              <li class=\"tag-default tag-pill tag-outline\">\n                {{ tag }}\n              </li>\n            }\n          </ul>\n        </div>\n      </div>\n\n      <hr />\n\n      <div class=\"article-actions\">\n        <app-article-meta [article]=\"article\">\n          @if (canModify) {\n            <span>\n              <a\n                class=\"btn btn-sm btn-outline-secondary\"\n                [routerLink]=\"['/editor', article.slug]\"\n              >\n                <i class=\"ion-edit\"></i> Edit Article\n              </a>\n\n              <button\n                class=\"btn btn-sm btn-outline-danger\"\n                [ngClass]=\"{ disabled: isDeleting }\"\n                (click)=\"deleteArticle()\"\n              >\n                <i class=\"ion-trash-a\"></i> Delete Article\n              </button>\n            </span>\n          } @else {\n            <span>\n              <app-follow-button\n                [profile]=\"article.author\"\n                (toggle)=\"toggleFollowing($event)\"\n              />\n\n              <app-favorite-button\n                [article]=\"article\"\n                (toggle)=\"onToggleFavorite($event)\"\n              >\n                {{ article.favorited ? \"Unfavorite\" : \"Favorite\" }} Article\n                <span class=\"counter\">({{ article.favoritesCount }})</span>\n              </app-favorite-button>\n            </span>\n          }\n        </app-article-meta>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-xs-12 col-md-8 offset-md-2\">\n          <div *ifAuthenticated=\"true\">\n            <app-list-errors [errors]=\"commentFormErrors\" />\n            <form class=\"card comment-form\" (ngSubmit)=\"addComment()\">\n              <fieldset [disabled]=\"isSubmitting\">\n                <div class=\"card-block\">\n                  <textarea\n                    class=\"form-control\"\n                    placeholder=\"Write a comment...\"\n                    rows=\"3\"\n                    [formControl]=\"commentControl\"\n                  ></textarea>\n                </div>\n                <div class=\"card-footer\">\n                  <img\n                    [src]=\"\n                      currentUser?.image === null ? '' : currentUser?.image\n                    \"\n                    class=\"comment-author-img\"\n                  />\n                  <button class=\"btn btn-sm btn-primary\" type=\"submit\">\n                    Post Comment\n                  </button>\n                </div>\n              </fieldset>\n            </form>\n          </div>\n\n          <div *ifAuthenticated=\"false\">\n            <a [routerLink]=\"['/login']\">Sign in</a> or\n            <a [routerLink]=\"['/register']\">sign up</a> to add comments on this\n            article.\n          </div>\n\n          @for (comment of comments; track comment) {\n            <app-article-comment\n              [comment]=\"comment\"\n              (delete)=\"deleteComment(comment)\"\n            />\n          }\n        </div>\n      </div>\n    </div>\n  </div>\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/test/angular-realworld-example-app/src/app/features/article/pages/article/article.component.ts","messages":[{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":24,"column":1,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":44,"endColumn":3,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[46,1568],"text":", ChangeDetectionStrategy } from \"@angular/core\";\nimport { FormControl, FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport { ActivatedRoute, Router, RouterLink } from \"@angular/router\";\nimport { User } from \"../../../../core/auth/user.model\";\nimport { Article } from \"../../models/article.model\";\nimport { ArticlesService } from \"../../services/articles.service\";\nimport { CommentsService } from \"../../services/comments.service\";\nimport { UserService } from \"../../../../core/auth/services/user.service\";\nimport { ArticleMetaComponent } from \"../../components/article-meta.component\";\nimport { AsyncPipe, NgClass, NgForOf, NgIf } from \"@angular/common\";\nimport { MarkdownPipe } from \"../../../../shared/pipes/markdown.pipe\";\nimport { ListErrorsComponent } from \"../../../../shared/components/list-errors.component\";\nimport { ArticleCommentComponent } from \"../../components/article-comment.component\";\nimport { catchError } from \"rxjs/operators\";\nimport { combineLatest, throwError } from \"rxjs\";\nimport { Comment } from \"../../models/comment.model\";\nimport { IfAuthenticatedDirective } from \"../../../../core/auth/if-authenticated.directive\";\nimport { Errors } from \"../../../../core/models/errors.model\";\nimport { Profile } from \"../../../profile/models/profile.model\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\nimport { FavoriteButtonComponent } from \"../../components/favorite-button.component\";\nimport { FollowButtonComponent } from \"../../../profile/components/follow-button.component\";\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type boolean trivially inferred from a boolean literal, remove type annotation.","line":49,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":49,"endColumn":30,"fix":{"range":[2122,2131],"text":""}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { Component, DestroyRef, inject, OnInit } from \"@angular/core\";\nimport { FormControl, FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport { ActivatedRoute, Router, RouterLink } from \"@angular/router\";\nimport { User } from \"../../../../core/auth/user.model\";\nimport { Article } from \"../../models/article.model\";\nimport { ArticlesService } from \"../../services/articles.service\";\nimport { CommentsService } from \"../../services/comments.service\";\nimport { UserService } from \"../../../../core/auth/services/user.service\";\nimport { ArticleMetaComponent } from \"../../components/article-meta.component\";\nimport { AsyncPipe, NgClass, NgForOf, NgIf } from \"@angular/common\";\nimport { MarkdownPipe } from \"../../../../shared/pipes/markdown.pipe\";\nimport { ListErrorsComponent } from \"../../../../shared/components/list-errors.component\";\nimport { ArticleCommentComponent } from \"../../components/article-comment.component\";\nimport { catchError } from \"rxjs/operators\";\nimport { combineLatest, throwError } from \"rxjs\";\nimport { Comment } from \"../../models/comment.model\";\nimport { IfAuthenticatedDirective } from \"../../../../core/auth/if-authenticated.directive\";\nimport { Errors } from \"../../../../core/models/errors.model\";\nimport { Profile } from \"../../../profile/models/profile.model\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\nimport { FavoriteButtonComponent } from \"../../components/favorite-button.component\";\nimport { FollowButtonComponent } from \"../../../profile/components/follow-button.component\";\n\n@Component({\n  selector: \"app-article-page\",\n  templateUrl: \"./article.component.html\",\n  imports: [\n    ArticleMetaComponent,\n    RouterLink,\n    NgClass,\n    FollowButtonComponent,\n    FavoriteButtonComponent,\n    NgForOf,\n    MarkdownPipe,\n    AsyncPipe,\n    ListErrorsComponent,\n    FormsModule,\n    ArticleCommentComponent,\n    ReactiveFormsModule,\n    IfAuthenticatedDirective,\n    NgIf,\n  ],\n  standalone: true,\n})\nexport default class ArticleComponent implements OnInit {\n  article!: Article;\n  currentUser!: User | null;\n  comments: Comment[] = [];\n  canModify: boolean = false;\n\n  commentControl = new FormControl<string>(\"\", { nonNullable: true });\n  commentFormErrors: Errors | null = null;\n\n  isSubmitting = false;\n  isDeleting = false;\n  destroyRef = inject(DestroyRef);\n\n  constructor(\n    private readonly route: ActivatedRoute,\n    private readonly articleService: ArticlesService,\n    private readonly commentsService: CommentsService,\n    private readonly router: Router,\n    private readonly userService: UserService,\n  ) {}\n\n  ngOnInit(): void {\n    const slug = this.route.snapshot.params[\"slug\"];\n    combineLatest([\n      this.articleService.get(slug),\n      this.commentsService.getAll(slug),\n      this.userService.currentUser,\n    ])\n      .pipe(\n        catchError((err) => {\n          void this.router.navigate([\"/\"]);\n          return throwError(() => err);\n        }),\n        takeUntilDestroyed(this.destroyRef),\n      )\n      .subscribe(([article, comments, currentUser]) => {\n        this.article = article;\n        this.comments = comments;\n        this.currentUser = currentUser;\n        this.canModify = currentUser?.username === article.author.username;\n      });\n  }\n\n  onToggleFavorite(favorited: boolean): void {\n    this.article.favorited = favorited;\n\n    if (favorited) {\n      this.article.favoritesCount++;\n    } else {\n      this.article.favoritesCount--;\n    }\n  }\n\n  toggleFollowing(profile: Profile): void {\n    this.article.author.following = profile.following;\n  }\n\n  deleteArticle(): void {\n    this.isDeleting = true;\n\n    this.articleService\n      .delete(this.article.slug)\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe(() => {\n        void this.router.navigate([\"/\"]);\n      });\n  }\n\n  addComment() {\n    this.isSubmitting = true;\n    this.commentFormErrors = null;\n\n    this.commentsService\n      .add(this.article.slug, this.commentControl.value)\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe({\n        next: (comment) => {\n          this.comments.unshift(comment);\n          this.commentControl.reset(\"\");\n          this.isSubmitting = false;\n        },\n        error: (errors) => {\n          this.isSubmitting = false;\n          this.commentFormErrors = errors;\n        },\n      });\n  }\n\n  deleteComment(comment: Comment): void {\n    this.commentsService\n      .delete(comment.id, this.article.slug)\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe(() => {\n        this.comments = this.comments.filter((item) => item !== comment);\n      });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/test/angular-realworld-example-app/src/app/features/article/pages/editor/editor.component.html","messages":[{"ruleId":"@angular-eslint/template/click-events-have-key-events","severity":2,"message":"click must be accompanied by either keyup, keydown or keypress event for accessibility.","line":48,"column":21,"nodeType":null,"messageId":"clickEventsHaveKeyEvents","endLine":48,"endColumn":77},{"ruleId":"@angular-eslint/template/interactive-supports-focus","severity":2,"message":"Elements with interaction handlers must be focusable.","line":48,"column":21,"nodeType":null,"messageId":"interactiveSupportsFocus","endLine":48,"endColumn":77}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<div class=\"editor-page\">\n  <div class=\"container page\">\n    <div class=\"row\">\n      <div class=\"col-md-10 offset-md-1 col-xs-12\">\n        <app-list-errors [errors]=\"errors\" />\n\n        <form [formGroup]=\"articleForm\">\n          <fieldset [disabled]=\"isSubmitting\">\n            <fieldset class=\"form-group\">\n              <input\n                class=\"form-control form-control-lg\"\n                formControlName=\"title\"\n                type=\"text\"\n                placeholder=\"Article Title\"\n              />\n            </fieldset>\n\n            <fieldset class=\"form-group\">\n              <input\n                class=\"form-control\"\n                formControlName=\"description\"\n                type=\"text\"\n                placeholder=\"What's this article about?\"\n              />\n            </fieldset>\n\n            <fieldset class=\"form-group\">\n              <textarea\n                class=\"form-control\"\n                formControlName=\"body\"\n                rows=\"8\"\n                placeholder=\"Write your article (in markdown)\"\n              >\n              </textarea>\n            </fieldset>\n\n            <fieldset class=\"form-group\">\n              <input\n                class=\"form-control\"\n                type=\"text\"\n                placeholder=\"Enter tags\"\n                [formControl]=\"tagField\"\n                (keyup.enter)=\"addTag()\"\n              />\n              <div class=\"tag-list\">\n                @for (tag of tagList; track tag) {\n                  <span class=\"tag-default tag-pill\">\n                    <i class=\"ion-close-round\" (click)=\"removeTag(tag)\"></i>\n                    {{ tag }}\n                  </span>\n                }\n              </div>\n            </fieldset>\n\n            <button\n              class=\"btn btn-lg pull-xs-right btn-primary\"\n              type=\"button\"\n              (click)=\"submitForm()\"\n            >\n              Publish Article\n            </button>\n          </fieldset>\n        </form>\n      </div>\n    </div>\n  </div>\n</div>\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/test/angular-realworld-example-app/src/app/features/article/pages/editor/editor.component.ts","messages":[{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":23,"column":1,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":28,"endColumn":3,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[89,814],"text":", ChangeDetectionStrategy } from \"@angular/core\";\nimport {\n  FormControl,\n  FormGroup,\n  ReactiveFormsModule,\n  UntypedFormGroup,\n} from \"@angular/forms\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { combineLatest } from \"rxjs\";\nimport { Errors } from \"../../../../core/models/errors.model\";\nimport { ArticlesService } from \"../../services/articles.service\";\nimport { UserService } from \"../../../../core/auth/services/user.service\";\nimport { ListErrorsComponent } from \"../../../../shared/components/list-errors.component\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\ninterface ArticleForm {\n  title: FormControl<string>;\n  description: FormControl<string>;\n  body: FormControl<string>;\n}\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NgForOf } from \"@angular/common\";\nimport { Component, DestroyRef, inject, OnInit } from \"@angular/core\";\nimport {\n  FormControl,\n  FormGroup,\n  ReactiveFormsModule,\n  UntypedFormGroup,\n} from \"@angular/forms\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { combineLatest } from \"rxjs\";\nimport { Errors } from \"../../../../core/models/errors.model\";\nimport { ArticlesService } from \"../../services/articles.service\";\nimport { UserService } from \"../../../../core/auth/services/user.service\";\nimport { ListErrorsComponent } from \"../../../../shared/components/list-errors.component\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\ninterface ArticleForm {\n  title: FormControl<string>;\n  description: FormControl<string>;\n  body: FormControl<string>;\n}\n\n@Component({\n  selector: \"app-editor-page\",\n  templateUrl: \"./editor.component.html\",\n  imports: [ListErrorsComponent, ReactiveFormsModule, NgForOf],\n  standalone: true,\n})\nexport default class EditorComponent implements OnInit {\n  tagList: string[] = [];\n  articleForm: UntypedFormGroup = new FormGroup<ArticleForm>({\n    title: new FormControl(\"\", { nonNullable: true }),\n    description: new FormControl(\"\", { nonNullable: true }),\n    body: new FormControl(\"\", { nonNullable: true }),\n  });\n  tagField = new FormControl<string>(\"\", { nonNullable: true });\n\n  errors: Errors | null = null;\n  isSubmitting = false;\n  destroyRef = inject(DestroyRef);\n\n  constructor(\n    private readonly articleService: ArticlesService,\n    private readonly route: ActivatedRoute,\n    private readonly router: Router,\n    private readonly userService: UserService,\n  ) {}\n\n  ngOnInit() {\n    if (this.route.snapshot.params[\"slug\"]) {\n      combineLatest([\n        this.articleService.get(this.route.snapshot.params[\"slug\"]),\n        this.userService.getCurrentUser(),\n      ])\n        .pipe(takeUntilDestroyed(this.destroyRef))\n        .subscribe(([article, { user }]) => {\n          if (user.username === article.author.username) {\n            this.tagList = article.tagList;\n            this.articleForm.patchValue(article);\n          } else {\n            void this.router.navigate([\"/\"]);\n          }\n        });\n    }\n  }\n\n  addTag() {\n    // retrieve tag control\n    const tag = this.tagField.value;\n    // only add tag if it does not exist yet\n    if (tag != null && tag.trim() !== \"\" && this.tagList.indexOf(tag) < 0) {\n      this.tagList.push(tag);\n    }\n    // clear the input\n    this.tagField.reset(\"\");\n  }\n\n  removeTag(tagName: string): void {\n    this.tagList = this.tagList.filter((tag) => tag !== tagName);\n  }\n\n  submitForm(): void {\n    this.isSubmitting = true;\n\n    // update any single tag\n    this.addTag();\n\n    // post the changes\n    this.articleService\n      .create({\n        ...this.articleForm.value,\n        tagList: this.tagList,\n      })\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe({\n        next: (article) => this.router.navigate([\"/article/\", article.slug]),\n        error: (err) => {\n          this.errors = err;\n          this.isSubmitting = false;\n        },\n      });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/test/angular-realworld-example-app/src/app/features/article/pages/home/home.component.html","messages":[{"ruleId":"@angular-eslint/template/click-events-have-key-events","severity":2,"message":"click must be accompanied by either keyup, keydown or keypress event for accessibility.","line":15,"column":15,"nodeType":null,"messageId":"clickEventsHaveKeyEvents","endLine":21,"endColumn":19},{"ruleId":"@angular-eslint/template/interactive-supports-focus","severity":2,"message":"Elements with interaction handlers must be focusable.","line":15,"column":15,"nodeType":null,"messageId":"interactiveSupportsFocus","endLine":21,"endColumn":19},{"ruleId":"@angular-eslint/template/click-events-have-key-events","severity":2,"message":"click must be accompanied by either keyup, keydown or keypress event for accessibility.","line":24,"column":15,"nodeType":null,"messageId":"clickEventsHaveKeyEvents","endLine":32,"endColumn":19},{"ruleId":"@angular-eslint/template/interactive-supports-focus","severity":2,"message":"Elements with interaction handlers must be focusable.","line":24,"column":15,"nodeType":null,"messageId":"interactiveSupportsFocus","endLine":32,"endColumn":19},{"ruleId":"@angular-eslint/template/click-events-have-key-events","severity":2,"message":"click must be accompanied by either keyup, keydown or keypress event for accessibility.","line":51,"column":15,"nodeType":null,"messageId":"clickEventsHaveKeyEvents","endLine":56,"endColumn":19},{"ruleId":"@angular-eslint/template/interactive-supports-focus","severity":2,"message":"Elements with interaction handlers must be focusable.","line":51,"column":15,"nodeType":null,"messageId":"interactiveSupportsFocus","endLine":56,"endColumn":19}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<div class=\"home-page\">\n  <div class=\"banner\" *ifAuthenticated=\"false\">\n    <div class=\"container\">\n      <h1 class=\"logo-font\">conduit</h1>\n      <p>A place to share your <i>Angular</i> knowledge.</p>\n    </div>\n  </div>\n\n  <div class=\"container page\">\n    <div class=\"row\">\n      <div class=\"col-md-9\">\n        <div class=\"feed-toggle\">\n          <ul class=\"nav nav-pills outline-active\">\n            <li class=\"nav-item\">\n              <a\n                class=\"nav-link\"\n                [ngClass]=\"{ active: listConfig.type === 'feed' }\"\n                (click)=\"setListTo('feed')\"\n              >\n                Your Feed\n              </a>\n            </li>\n            <li class=\"nav-item\">\n              <a\n                class=\"nav-link\"\n                [ngClass]=\"{\n                  active: listConfig.type === 'all' && !listConfig.filters.tag\n                }\"\n                (click)=\"setListTo('all')\"\n              >\n                Global Feed\n              </a>\n            </li>\n            <li class=\"nav-item\" [hidden]=\"!listConfig.filters.tag\">\n              <a class=\"nav-link active\">\n                <i class=\"ion-pound\"></i> {{ listConfig.filters.tag }}\n              </a>\n            </li>\n          </ul>\n        </div>\n\n        <app-article-list [limit]=\"10\" [config]=\"listConfig\" />\n      </div>\n\n      <div class=\"col-md-3\" *rxLet=\"tags$; let tags\">\n        <div class=\"sidebar\">\n          <p>Popular Tags</p>\n\n          <div class=\"tag-list\">\n            @for (tag of tags; track tag) {\n              <a\n                class=\"tag-default tag-pill\"\n                (click)=\"setListTo('all', { tag: tag })\"\n              >\n                {{ tag }}\n              </a>\n            }\n          </div>\n\n          <div [hidden]=\"tagsLoaded\">Loading tags...</div>\n\n          <div [hidden]=\"!tagsLoaded || tags.length > 0\">\n            No tags are here... yet.\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/test/angular-realworld-example-app/src/app/features/article/pages/home/home.component.ts","messages":[{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":13,"column":1,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":26,"endColumn":3,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[46,728],"text":", ChangeDetectionStrategy } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { TagsService } from \"../../services/tags.service\";\nimport { ArticleListConfig } from \"../../models/article-list-config.model\";\nimport { AsyncPipe, NgClass, NgForOf } from \"@angular/common\";\nimport { ArticleListComponent } from \"../../components/article-list.component\";\nimport { tap } from \"rxjs/operators\";\nimport { UserService } from \"../../../../core/auth/services/user.service\";\nimport { RxLet } from \"@rx-angular/template/let\";\nimport { IfAuthenticatedDirective } from \"../../../../core/auth/if-authenticated.directive\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/consistent-component-styles","severity":2,"message":"Use `styleUrl` instead of `styleUrls` for a single stylesheet","line":16,"column":3,"nodeType":"Property","messageId":"useStyleUrl","endLine":16,"endColumn":38,"fix":{"range":[797,832],"text":"styleUrl: \"./home.component.css\""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type string trivially inferred from a string literal, remove type annotation.","line":61,"column":13,"nodeType":"AssignmentPattern","messageId":"noInferrableType","endLine":61,"endColumn":30,"fix":{"range":[1831,1839],"text":""}},{"ruleId":"@typescript-eslint/no-wrapper-object-types","severity":2,"message":"Prefer using the primitive `object` as a type name, rather than the upper-cased `Object`.","line":61,"column":41,"nodeType":"Identifier","messageId":"bannedClassType","endLine":61,"endColumn":47,"fix":{"range":[1855,1861],"text":"object"}}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"import { Component, DestroyRef, inject, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { TagsService } from \"../../services/tags.service\";\nimport { ArticleListConfig } from \"../../models/article-list-config.model\";\nimport { AsyncPipe, NgClass, NgForOf } from \"@angular/common\";\nimport { ArticleListComponent } from \"../../components/article-list.component\";\nimport { tap } from \"rxjs/operators\";\nimport { UserService } from \"../../../../core/auth/services/user.service\";\nimport { RxLet } from \"@rx-angular/template/let\";\nimport { IfAuthenticatedDirective } from \"../../../../core/auth/if-authenticated.directive\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Component({\n  selector: \"app-home-page\",\n  templateUrl: \"./home.component.html\",\n  styleUrls: [\"./home.component.css\"],\n  imports: [\n    NgClass,\n    ArticleListComponent,\n    AsyncPipe,\n    RxLet,\n    NgForOf,\n    IfAuthenticatedDirective,\n  ],\n  standalone: true,\n})\nexport default class HomeComponent implements OnInit {\n  isAuthenticated = false;\n  listConfig: ArticleListConfig = {\n    type: \"all\",\n    filters: {},\n  };\n  tags$ = inject(TagsService)\n    .getAll()\n    .pipe(tap(() => (this.tagsLoaded = true)));\n  tagsLoaded = false;\n  destroyRef = inject(DestroyRef);\n\n  constructor(\n    private readonly router: Router,\n    private readonly userService: UserService,\n  ) {}\n\n  ngOnInit(): void {\n    this.userService.isAuthenticated\n      .pipe(\n        tap((isAuthenticated) => {\n          if (isAuthenticated) {\n            this.setListTo(\"feed\");\n          } else {\n            this.setListTo(\"all\");\n          }\n        }),\n        takeUntilDestroyed(this.destroyRef),\n      )\n      .subscribe(\n        (isAuthenticated: boolean) => (this.isAuthenticated = isAuthenticated),\n      );\n  }\n\n  setListTo(type: string = \"\", filters: Object = {}): void {\n    // If feed is requested but user is not authenticated, redirect to login\n    if (type === \"feed\" && !this.isAuthenticated) {\n      void this.router.navigate([\"/login\"]);\n      return;\n    }\n\n    // Otherwise, set the list object\n    this.listConfig = { type: type, filters: filters };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/test/angular-realworld-example-app/src/app/features/article/services/articles.service.ts","messages":[{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":19,"column":7,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":19,"endColumn":20,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[685,698],"text":"// @ts-expect-error"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpParams } from \"@angular/common/http\";\nimport { Observable } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { ArticleListConfig } from \"../models/article-list-config.model\";\nimport { Article } from \"../models/article.model\";\n\n@Injectable({ providedIn: \"root\" })\nexport class ArticlesService {\n  constructor(private readonly http: HttpClient) {}\n\n  query(\n    config: ArticleListConfig,\n  ): Observable<{ articles: Article[]; articlesCount: number }> {\n    // Convert any filters over to Angular's URLSearchParams\n    let params = new HttpParams();\n\n    Object.keys(config.filters).forEach((key) => {\n      // @ts-ignore\n      params = params.set(key, config.filters[key]);\n    });\n\n    return this.http.get<{ articles: Article[]; articlesCount: number }>(\n      \"/articles\" + (config.type === \"feed\" ? \"/feed\" : \"\"),\n      { params },\n    );\n  }\n\n  get(slug: string): Observable<Article> {\n    return this.http\n      .get<{ article: Article }>(`/articles/${slug}`)\n      .pipe(map((data) => data.article));\n  }\n\n  delete(slug: string): Observable<void> {\n    return this.http.delete<void>(`/articles/${slug}`);\n  }\n\n  create(article: Partial<Article>): Observable<Article> {\n    return this.http\n      .post<{ article: Article }>(\"/articles/\", { article: article })\n      .pipe(map((data) => data.article));\n  }\n\n  update(article: Partial<Article>): Observable<Article> {\n    return this.http\n      .put<{ article: Article }>(`/articles/${article.slug}`, {\n        article: article,\n      })\n      .pipe(map((data) => data.article));\n  }\n\n  favorite(slug: string): Observable<Article> {\n    return this.http\n      .post<{ article: Article }>(`/articles/${slug}/favorite`, {})\n      .pipe(map((data) => data.article));\n  }\n\n  unfavorite(slug: string): Observable<void> {\n    return this.http.delete<void>(`/articles/${slug}/favorite`);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/test/angular-realworld-example-app/src/app/features/profile/components/follow-button.component.ts","messages":[{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":18,"column":1,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":37,"endColumn":3,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[79,530],"text":", ChangeDetectionStrategy,\n} from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { switchMap } from \"rxjs/operators\";\nimport { EMPTY } from \"rxjs\";\nimport { ProfileService } from \"../services/profile.service\";\nimport { UserService } from \"../../../core/auth/services/user.service\";\nimport { Profile } from \"../models/profile.model\";\nimport { NgClass } from \"@angular/common\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/component-max-inline-declarations","severity":2,"message":"`template` has too many lines (13). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)","line":20,"column":13,"nodeType":"TemplateLiteral","messageId":"componentMaxInlineDeclarations","endLine":34,"endColumn":4},{"ruleId":"@angular-eslint/prefer-signals","severity":2,"message":"Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator","line":39,"column":3,"nodeType":"Decorator","messageId":"preferInputSignals","endLine":39,"endColumn":11},{"ruleId":"@angular-eslint/prefer-output-readonly","severity":2,"message":"Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned","line":40,"column":13,"nodeType":"Identifier","messageId":"preferOutputReadonly","endLine":40,"endColumn":19,"suggestions":[{"messageId":"suggestAddReadonlyModifier","fix":{"range":[1089,1089],"text":"readonly "},"desc":"Add `readonly` modifier"}]},{"ruleId":"@angular-eslint/no-output-native","severity":2,"message":"Output bindings, including aliases, should not be named as standard DOM events","line":40,"column":13,"nodeType":"Identifier","messageId":"noOutputNative","endLine":40,"endColumn":19}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Component,\n  DestroyRef,\n  EventEmitter,\n  inject,\n  Input,\n  Output,\n} from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { switchMap } from \"rxjs/operators\";\nimport { EMPTY } from \"rxjs\";\nimport { ProfileService } from \"../services/profile.service\";\nimport { UserService } from \"../../../core/auth/services/user.service\";\nimport { Profile } from \"../models/profile.model\";\nimport { NgClass } from \"@angular/common\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Component({\n  selector: \"app-follow-button\",\n  template: `\n    <button\n      class=\"btn btn-sm action-btn\"\n      [ngClass]=\"{\n        disabled: isSubmitting,\n        'btn-outline-secondary': !profile.following,\n        'btn-secondary': profile.following\n      }\"\n      (click)=\"toggleFollowing()\"\n    >\n      <i class=\"ion-plus-round\"></i>\n      &nbsp;\n      {{ profile.following ? \"Unfollow\" : \"Follow\" }} {{ profile.username }}\n    </button>\n  `,\n  imports: [NgClass],\n  standalone: true,\n})\nexport class FollowButtonComponent {\n  @Input() profile!: Profile;\n  @Output() toggle = new EventEmitter<Profile>();\n  isSubmitting = false;\n  destroyRef = inject(DestroyRef);\n\n  constructor(\n    private readonly profileService: ProfileService,\n    private readonly router: Router,\n    private readonly userService: UserService,\n  ) {}\n\n  toggleFollowing(): void {\n    this.isSubmitting = true;\n\n    this.userService.isAuthenticated\n      .pipe(\n        switchMap((isAuthenticated: boolean) => {\n          if (!isAuthenticated) {\n            void this.router.navigate([\"/login\"]);\n            return EMPTY;\n          }\n\n          if (!this.profile.following) {\n            return this.profileService.follow(this.profile.username);\n          } else {\n            return this.profileService.unfollow(this.profile.username);\n          }\n        }),\n        takeUntilDestroyed(this.destroyRef),\n      )\n      .subscribe({\n        next: (profile) => {\n          this.isSubmitting = false;\n          this.toggle.emit(profile);\n        },\n        error: () => (this.isSubmitting = false),\n      });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/test/angular-realworld-example-app/src/app/features/profile/components/profile-articles.component.ts","messages":[{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":9,"column":1,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":14,"endColumn":3,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[46,487],"text":", ChangeDetectionStrategy } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { ArticleListComponent } from \"../../article/components/article-list.component\";\nimport { ProfileService } from \"../services/profile.service\";\nimport { Profile } from \"../models/profile.model\";\nimport { ArticleListConfig } from \"../../article/models/article-list-config.model\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, DestroyRef, inject, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { ArticleListComponent } from \"../../article/components/article-list.component\";\nimport { ProfileService } from \"../services/profile.service\";\nimport { Profile } from \"../models/profile.model\";\nimport { ArticleListConfig } from \"../../article/models/article-list-config.model\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Component({\n  selector: \"app-profile-articles\",\n  template: `<app-article-list [limit]=\"10\" [config]=\"articlesConfig\" />`,\n  imports: [ArticleListComponent],\n  standalone: true,\n})\nexport default class ProfileArticlesComponent implements OnInit {\n  profile!: Profile;\n  articlesConfig!: ArticleListConfig;\n  destroyRef = inject(DestroyRef);\n\n  constructor(\n    private route: ActivatedRoute,\n    private readonly profileService: ProfileService,\n  ) {}\n\n  ngOnInit(): void {\n    this.profileService\n      .get(this.route.snapshot.params[\"username\"])\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe({\n        next: (profile: Profile) => {\n          this.profile = profile;\n          this.articlesConfig = {\n            type: \"all\",\n            filters: {\n              author: this.profile.username,\n            },\n          };\n        },\n      });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/test/angular-realworld-example-app/src/app/features/profile/components/profile-favorites.component.ts","messages":[{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":9,"column":1,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":14,"endColumn":3,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[46,487],"text":", ChangeDetectionStrategy } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { ArticleListComponent } from \"../../article/components/article-list.component\";\nimport { ProfileService } from \"../services/profile.service\";\nimport { Profile } from \"../models/profile.model\";\nimport { ArticleListConfig } from \"../../article/models/article-list-config.model\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, DestroyRef, inject, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { ArticleListComponent } from \"../../article/components/article-list.component\";\nimport { ProfileService } from \"../services/profile.service\";\nimport { Profile } from \"../models/profile.model\";\nimport { ArticleListConfig } from \"../../article/models/article-list-config.model\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Component({\n  selector: \"app-profile-favorites\",\n  template: `<app-article-list [limit]=\"10\" [config]=\"favoritesConfig\" />`,\n  imports: [ArticleListComponent],\n  standalone: true,\n})\nexport default class ProfileFavoritesComponent implements OnInit {\n  profile!: Profile;\n  favoritesConfig!: ArticleListConfig;\n  destroyRef = inject(DestroyRef);\n\n  constructor(\n    private route: ActivatedRoute,\n    private readonly profileService: ProfileService,\n  ) {}\n\n  ngOnInit() {\n    this.profileService\n      .get(this.route.parent?.snapshot.params[\"username\"])\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe({\n        next: (profile: Profile) => {\n          this.profile = profile;\n          this.favoritesConfig = {\n            type: \"all\",\n            filters: {\n              favorited: this.profile.username,\n            },\n          };\n        },\n      });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/test/angular-realworld-example-app/src/app/features/profile/pages/profile/profile.component.html","messages":[{"ruleId":"@angular-eslint/template/alt-text","severity":2,"message":"<img/> element must have a text alternative.","line":7,"column":13,"nodeType":null,"messageId":"altText","endLine":7,"endColumn":59}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"@if (profile) {\n  <div class=\"profile-page\">\n    <div class=\"user-info\">\n      <div class=\"container\">\n        <div class=\"row\">\n          <div class=\"col-xs-12 col-md-10 offset-md-1\">\n            <img [src]=\"profile.image\" class=\"user-img\" />\n            <h4>{{ profile.username }}</h4>\n            <p>{{ profile.bio }}</p>\n            @if (!isUser) {\n              <app-follow-button\n                [profile]=\"profile\"\n                (toggle)=\"onToggleFollowing($event)\"\n              />\n            }\n            @if (isUser) {\n              <a\n                [routerLink]=\"['/settings']\"\n                class=\"btn btn-sm btn-outline-secondary action-btn\"\n              >\n                <i class=\"ion-gear-a\"></i> Edit Profile Settings\n              </a>\n            }\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"container\">\n      <div class=\"row\">\n        <div class=\"col-xs-12 col-md-10 offset-md-1\">\n          <div class=\"articles-toggle\">\n            <ul class=\"nav nav-pills outline-active\">\n              <li class=\"nav-item\">\n                <a\n                  class=\"nav-link\"\n                  routerLinkActive=\"active\"\n                  [routerLinkActiveOptions]=\"{ exact: true }\"\n                  [routerLink]=\"['/profile', profile.username]\"\n                >\n                  My Posts\n                </a>\n              </li>\n              <li class=\"nav-item\">\n                <a\n                  class=\"nav-link\"\n                  routerLinkActive=\"active\"\n                  [routerLinkActiveOptions]=\"{ exact: true }\"\n                  [routerLink]=\"['/profile', profile.username, 'favorites']\"\n                >\n                  Favorited Posts\n                </a>\n              </li>\n            </ul>\n          </div>\n\n          <router-outlet></router-outlet>\n        </div>\n      </div>\n    </div>\n  </div>\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/test/angular-realworld-example-app/src/app/features/profile/pages/profile/profile.component.ts","messages":[{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":18,"column":1,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":31,"endColumn":3,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[46,702],"text":", ChangeDetectionStrategy } from \"@angular/core\";\nimport {\n  ActivatedRoute,\n  Router,\n  RouterLink,\n  RouterLinkActive,\n  RouterOutlet,\n} from \"@angular/router\";\nimport { catchError, switchMap } from \"rxjs/operators\";\nimport { combineLatest, of, throwError } from \"rxjs\";\nimport { UserService } from \"../../../../core/auth/services/user.service\";\nimport { Profile } from \"../../models/profile.model\";\nimport { ProfileService } from \"../../services/profile.service\";\nimport { AsyncPipe, NgIf } from \"@angular/common\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\nimport { FollowButtonComponent } from \"../../components/follow-button.component\";\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/no-duplicates-in-metadata-arrays","severity":2,"message":"Entry is duplicated in metadata array","line":28,"column":5,"nodeType":"Identifier","messageId":"noDuplicatesInMetadataArrays","endLine":28,"endColumn":26},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type boolean trivially inferred from a boolean literal, remove type annotation.","line":34,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":34,"endColumn":27,"fix":{"range":[1030,1039],"text":""}}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { Component, DestroyRef, inject, OnInit } from \"@angular/core\";\nimport {\n  ActivatedRoute,\n  Router,\n  RouterLink,\n  RouterLinkActive,\n  RouterOutlet,\n} from \"@angular/router\";\nimport { catchError, switchMap } from \"rxjs/operators\";\nimport { combineLatest, of, throwError } from \"rxjs\";\nimport { UserService } from \"../../../../core/auth/services/user.service\";\nimport { Profile } from \"../../models/profile.model\";\nimport { ProfileService } from \"../../services/profile.service\";\nimport { AsyncPipe, NgIf } from \"@angular/common\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\nimport { FollowButtonComponent } from \"../../components/follow-button.component\";\n\n@Component({\n  selector: \"app-profile-page\",\n  templateUrl: \"./profile.component.html\",\n  imports: [\n    FollowButtonComponent,\n    NgIf,\n    RouterLink,\n    AsyncPipe,\n    RouterLinkActive,\n    RouterOutlet,\n    FollowButtonComponent,\n  ],\n  standalone: true,\n})\nexport class ProfileComponent implements OnInit {\n  profile!: Profile;\n  isUser: boolean = false;\n  destroyRef = inject(DestroyRef);\n\n  constructor(\n    private readonly route: ActivatedRoute,\n    private readonly router: Router,\n    private readonly userService: UserService,\n    private readonly profileService: ProfileService,\n  ) {}\n\n  ngOnInit() {\n    this.profileService\n      .get(this.route.snapshot.params[\"username\"])\n      .pipe(\n        catchError((error) => {\n          void this.router.navigate([\"/\"]);\n          return throwError(() => error);\n        }),\n        switchMap((profile) => {\n          return combineLatest([of(profile), this.userService.currentUser]);\n        }),\n        takeUntilDestroyed(this.destroyRef),\n      )\n      .subscribe(([profile, user]) => {\n        this.profile = profile;\n        this.isUser = profile.username === user?.username;\n      });\n  }\n\n  onToggleFollowing(profile: Profile) {\n    this.profile = profile;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/test/angular-realworld-example-app/src/app/features/settings/settings.component.ts","messages":[{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":23,"column":1,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":28,"endColumn":3,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[46,737],"text":", ChangeDetectionStrategy } from \"@angular/core\";\nimport {\n  FormControl,\n  FormGroup,\n  ReactiveFormsModule,\n  Validators,\n} from \"@angular/forms\";\nimport { Router } from \"@angular/router\";\nimport { User } from \"../../core/auth/user.model\";\nimport { UserService } from \"../../core/auth/services/user.service\";\nimport { ListErrorsComponent } from \"../../shared/components/list-errors.component\";\nimport { Errors } from \"../../core/models/errors.model\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\ninterface SettingsForm {\n  image: FormControl<string>;\n  username: FormControl<string>;\n  bio: FormControl<string>;\n  email: FormControl<string>;\n  password: FormControl<string>;\n}\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, DestroyRef, inject, OnInit } from \"@angular/core\";\nimport {\n  FormControl,\n  FormGroup,\n  ReactiveFormsModule,\n  Validators,\n} from \"@angular/forms\";\nimport { Router } from \"@angular/router\";\nimport { User } from \"../../core/auth/user.model\";\nimport { UserService } from \"../../core/auth/services/user.service\";\nimport { ListErrorsComponent } from \"../../shared/components/list-errors.component\";\nimport { Errors } from \"../../core/models/errors.model\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\ninterface SettingsForm {\n  image: FormControl<string>;\n  username: FormControl<string>;\n  bio: FormControl<string>;\n  email: FormControl<string>;\n  password: FormControl<string>;\n}\n\n@Component({\n  selector: \"app-settings-page\",\n  templateUrl: \"./settings.component.html\",\n  imports: [ListErrorsComponent, ReactiveFormsModule],\n  standalone: true,\n})\nexport default class SettingsComponent implements OnInit {\n  user!: User;\n  settingsForm = new FormGroup<SettingsForm>({\n    image: new FormControl(\"\", { nonNullable: true }),\n    username: new FormControl(\"\", { nonNullable: true }),\n    bio: new FormControl(\"\", { nonNullable: true }),\n    email: new FormControl(\"\", { nonNullable: true }),\n    password: new FormControl(\"\", {\n      validators: [Validators.required],\n      nonNullable: true,\n    }),\n  });\n  errors: Errors | null = null;\n  isSubmitting = false;\n  destroyRef = inject(DestroyRef);\n\n  constructor(\n    private readonly router: Router,\n    private readonly userService: UserService,\n  ) {}\n\n  ngOnInit(): void {\n    this.settingsForm.patchValue(\n      this.userService.getCurrentUser() as Partial<User>,\n    );\n  }\n\n  logout(): void {\n    this.userService.logout();\n  }\n\n  submitForm() {\n    this.isSubmitting = true;\n\n    this.userService\n      .update(this.settingsForm.value)\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe({\n        next: ({ user }) =>\n          void this.router.navigate([\"/profile/\", user.username]),\n        error: (err) => {\n          this.errors = err;\n          this.isSubmitting = false;\n        },\n      });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documents/GII/42C/TFG/develop/repos/test/angular-realworld-example-app/src/app/shared/components/list-errors.component.ts","messages":[{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":5,"column":1,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":10,"endColumn":3,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[25,172],"text":", ChangeDetectionStrategy } from \"@angular/core\";\nimport { Errors } from \"../../core/models/errors.model\";\nimport { NgForOf, NgIf } from \"@angular/common\";\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/prefer-signals","severity":2,"message":"Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator","line":14,"column":3,"nodeType":"Decorator","messageId":"preferInputSignals","endLine":14,"endColumn":11}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, Input } from \"@angular/core\";\nimport { Errors } from \"../../core/models/errors.model\";\nimport { NgForOf, NgIf } from \"@angular/common\";\n\n@Component({\n  selector: \"app-list-errors\",\n  templateUrl: \"./list-errors.component.html\",\n  imports: [NgIf, NgForOf],\n  standalone: true,\n})\nexport class ListErrorsComponent {\n  errorList: string[] = [];\n\n  @Input() set errors(errorList: Errors | null) {\n    this.errorList = errorList\n      ? Object.keys(errorList.errors || {}).map(\n          (key) => `${key} ${errorList.errors[key]}`,\n        )\n      : [];\n  }\n}\n","usedDeprecatedRules":[]}]
