{
  "ng-apexcharts": {
    "repo": {
      "HEAD": {
        "commit": "8e4f59daece2bbe9605dbdef25488983beb31f85",
        "author": "Juned Chhipa",
        "date": "Wed Mar 19 14:42:20 2025 +0530",
        "message": "Merge remote-tracking branch 'refs/remotes/origin/master'"
      },
      "url": "https://github.com/apexcharts/ng-apexcharts"
    },
    "before": {
      "ng-apexcharts-demo": {
        "recommended": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/ng-apexcharts/src/app/app.component.html",
            "messages": [
              {
                "ruleId": null,
                "fatal": true,
                "severity": 2,
                "message": "Parsing error: Unexpected token <",
                "line": 1,
                "column": 1,
                "nodeType": null
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 1,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "<apx-chart\n #chart\n [series]=\"form.value.series | series : form.value.type\"\n [xaxis]=\"{ categories: form.value.xaxis }\"\n [chart]=\"{\n height: form.value.height,\n type: form.value.type,\n zoom: {\n enabled: false\n },\n shadow: {\n enabled: true,\n color: '#000',\n top: 18,\n left: 7,\n blur: 10,\n opacity: 1\n }\n }\"\n [title]=\"{ text: form.value.title }\"\n [autoUpdateSeries]=\"false\"\n (chartReady)=\"onChartReady($event)\"\n></apx-chart>\n\n<form [formGroup]=\"form\" [class.tes]=\"changeDet()\">\n Title: <input type=\"text\" formControlName=\"title\" /><br />\n Height: <input type=\"number\" formControlName=\"height\" /><br />\n Type:\n <select formControlName=\"type\">\n <option value=\"line\">Line</option>\n <option value=\"area\">Area</option>\n <option value=\"bar\">Bar</option>\n <option value=\"radar\">Radar</option>\n </select>\n\n <h3>Values</h3>\n <button (click)=\"addSeries()\">Add series</button>\n <button (click)=\"addValue()\">Add value</button>\n\n <div>\n <div style=\"width: 80%; display: inline-block\" formArrayName=\"series\">\n <h4>Data</h4>\n\n <div\n *ngFor=\"let series of series.controls; let i = index\"\n style=\"width: 20%; display: inline-block\"\n >\n <div [formGroupName]=\"i\">\n Name: <input type=\"text\" formControlName=\"name\" /><br />\n Type:\n <select formControlName=\"type\">\n <option value=\"line\">Line</option>\n <option value=\"area\">Area</option>\n <option value=\"bar\">Bar</option>\n </select>\n\n <div formArrayName=\"data\">\n <div\n *ngFor=\"\n let alias of form.get('series').controls[i].get('data')\n .controls;\n let y = index\n \"\n >\n <label>\n Value: <input type=\"number\" [formControlName]=\"y\" />\n </label>\n </div>\n </div>\n </div>\n </div>\n </div>\n\n <div formArrayName=\"xaxis\" style=\"width: 20%; display: inline-block\">\n <h4>XAxis</h4>\n <div *ngFor=\"let alias of xaxis.controls; let i = index\">\n <label>\n Value:\n <input type=\"text\" [formControlName]=\"i\" />\n </label>\n </div>\n </div>\n </div>\n</form>\n\n{{ form.value | json }}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/ng-apexcharts/src/index.html",
            "messages": [
              {
                "ruleId": null,
                "fatal": true,
                "severity": 2,
                "message": "Parsing error: Unexpected token <",
                "line": 1,
                "column": 1,
                "nodeType": null
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 1,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "<!doctype html>\n<html lang=\"en\">\n<head>\n <meta charset=\"utf-8\">\n <title>NgApexchartsDemo</title>\n <base href=\"/\">\n\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n</head>\n<body>\n <app-root></app-root>\n</body>\n</html>\n",
            "usedDeprecatedRules": []
          }
        ],
        "all": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/ng-apexcharts/src/app/app.component.html",
            "messages": [
              {
                "ruleId": null,
                "fatal": true,
                "severity": 2,
                "message": "Parsing error: Unexpected token <",
                "line": 1,
                "column": 1,
                "nodeType": null
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 1,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "<apx-chart\n #chart\n [series]=\"form.value.series | series : form.value.type\"\n [xaxis]=\"{ categories: form.value.xaxis }\"\n [chart]=\"{\n height: form.value.height,\n type: form.value.type,\n zoom: {\n enabled: false\n },\n shadow: {\n enabled: true,\n color: '#000',\n top: 18,\n left: 7,\n blur: 10,\n opacity: 1\n }\n }\"\n [title]=\"{ text: form.value.title }\"\n [autoUpdateSeries]=\"false\"\n (chartReady)=\"onChartReady($event)\"\n></apx-chart>\n\n<form [formGroup]=\"form\" [class.tes]=\"changeDet()\">\n Title: <input type=\"text\" formControlName=\"title\" /><br />\n Height: <input type=\"number\" formControlName=\"height\" /><br />\n Type:\n <select formControlName=\"type\">\n <option value=\"line\">Line</option>\n <option value=\"area\">Area</option>\n <option value=\"bar\">Bar</option>\n <option value=\"radar\">Radar</option>\n </select>\n\n <h3>Values</h3>\n <button (click)=\"addSeries()\">Add series</button>\n <button (click)=\"addValue()\">Add value</button>\n\n <div>\n <div style=\"width: 80%; display: inline-block\" formArrayName=\"series\">\n <h4>Data</h4>\n\n <div\n *ngFor=\"let series of series.controls; let i = index\"\n style=\"width: 20%; display: inline-block\"\n >\n <div [formGroupName]=\"i\">\n Name: <input type=\"text\" formControlName=\"name\" /><br />\n Type:\n <select formControlName=\"type\">\n <option value=\"line\">Line</option>\n <option value=\"area\">Area</option>\n <option value=\"bar\">Bar</option>\n </select>\n\n <div formArrayName=\"data\">\n <div\n *ngFor=\"\n let alias of form.get('series').controls[i].get('data')\n .controls;\n let y = index\n \"\n >\n <label>\n Value: <input type=\"number\" [formControlName]=\"y\" />\n </label>\n </div>\n </div>\n </div>\n </div>\n </div>\n\n <div formArrayName=\"xaxis\" style=\"width: 20%; display: inline-block\">\n <h4>XAxis</h4>\n <div *ngFor=\"let alias of xaxis.controls; let i = index\">\n <label>\n Value:\n <input type=\"text\" [formControlName]=\"i\" />\n </label>\n </div>\n </div>\n </div>\n</form>\n\n{{ form.value | json }}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/ng-apexcharts/src/app/app.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 14,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 25,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        29,
                        347
                      ],
                      "text": ", ChangeDetectionStrategy } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport {\n FormsModule,\n ReactiveFormsModule,\n UntypedFormArray,\n UntypedFormControl,\n UntypedFormGroup,\n} from \"@angular/forms\";\nimport { ChartComponent } from \"ng-apexcharts\";\n\nimport { SeriesPipe } from \"./series.pipe\";\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/consistent-component-styles",
                "severity": 2,
                "message": "Use `styleUrl` instead of `styleUrls` for a single stylesheet",
                "line": 17,
                "column": 5,
                "nodeType": "Property",
                "messageId": "useStyleUrl",
                "endLine": 17,
                "endColumn": 40,
                "fix": {
                  "range": [
                    414,
                    449
                  ],
                  "text": "styleUrl: \"./app.component.less\""
                }
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use the `viewChild` function instead of the `ViewChild` decorator",
                "line": 27,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferQuerySignals",
                "endLine": 27,
                "endColumn": 40
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import { Component, ViewChild } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport {\n FormsModule,\n ReactiveFormsModule,\n UntypedFormArray,\n UntypedFormControl,\n UntypedFormGroup,\n} from \"@angular/forms\";\nimport { ChartComponent } from \"ng-apexcharts\";\n\nimport { SeriesPipe } from \"./series.pipe\";\n\n@Component({\n selector: \"app-root\",\n templateUrl: \"./app.component.html\",\n styleUrls: [\"./app.component.less\"],\n imports: [\n CommonModule,\n FormsModule,\n ReactiveFormsModule,\n ChartComponent,\n SeriesPipe,\n ]\n})\nexport class AppComponent {\n @ViewChild(\"chart\", { static: true }) chart: ChartComponent;\n\n form: UntypedFormGroup;\n\n public get series() {\n return this.form.get(\"series\") as UntypedFormArray;\n }\n\n public get xaxis() {\n return this.form.get(\"xaxis\") as UntypedFormArray;\n }\n private det = 0;\n changeDet(): boolean {\n console.log(`change${this.det++}`);\n return false;\n }\n\n constructor() {\n this.form = new UntypedFormGroup({\n title: new UntypedFormControl(\"Basic Chart\"),\n type: new UntypedFormControl(\"line\"),\n height: new UntypedFormControl(350),\n series: new UntypedFormArray([\n new UntypedFormGroup({\n name: new UntypedFormControl(\"Series\"),\n type: new UntypedFormControl(\"line\"),\n data: new UntypedFormArray([\n new UntypedFormControl(this.getRandomArbitrary(0, 100)),\n new UntypedFormControl(this.getRandomArbitrary(0, 100)),\n new UntypedFormControl(this.getRandomArbitrary(0, 100)),\n new UntypedFormControl(this.getRandomArbitrary(0, 100)),\n ]),\n }),\n ]),\n xaxis: new UntypedFormArray([\n new UntypedFormControl(\"Jan\"),\n new UntypedFormControl(\"Feb\"),\n new UntypedFormControl(\"Mar\"),\n new UntypedFormControl(\"Apr\"),\n ]),\n });\n }\n\n addValue() {\n (<UntypedFormArray>this.form.get(\"series\")).controls.forEach((c) => {\n (<UntypedFormArray>c.get(\"data\")).push(\n new UntypedFormControl(this.getRandomArbitrary(0, 100))\n );\n });\n (<UntypedFormArray>this.form.get(\"xaxis\")).push(\n new UntypedFormControl(\"Jan\")\n );\n }\n\n addSeries() {\n (<UntypedFormArray>this.form.get(\"series\")).push(\n new UntypedFormGroup({\n name: new UntypedFormControl(\"Series\"),\n type: new UntypedFormControl(\"line\"),\n data: new UntypedFormArray([\n new UntypedFormControl(this.getRandomArbitrary(0, 100)),\n new UntypedFormControl(this.getRandomArbitrary(0, 100)),\n new UntypedFormControl(this.getRandomArbitrary(0, 100)),\n new UntypedFormControl(this.getRandomArbitrary(0, 100)),\n ]),\n })\n );\n }\n\n onChartReady(event: any) {\n console.log(\"Chart ready\", event);\n }\n\n private getRandomArbitrary(min, max) {\n return Math.random() angular.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-apexcharts.report.json node_modules package.json package-lock.json projects README.md server.ts src tsconfig.app.json tsconfig.json yarn.lock (max - min) + min;\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/ng-apexcharts/src/index.html",
            "messages": [
              {
                "ruleId": null,
                "fatal": true,
                "severity": 2,
                "message": "Parsing error: Unexpected token <",
                "line": 1,
                "column": 1,
                "nodeType": null
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 1,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "<!doctype html>\n<html lang=\"en\">\n<head>\n <meta charset=\"utf-8\">\n <title>NgApexchartsDemo</title>\n <base href=\"/\">\n\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n</head>\n<body>\n <app-root></app-root>\n</body>\n</html>\n",
            "usedDeprecatedRules": []
          }
        ]
      },
      "ng-apexcharts": {
        "recommended": [],
        "all": []
      }
    },
    "after": {
      "ng-apexcharts-demo": {
        "recommended": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/ng-apexcharts/src/app/app.component.html",
            "messages": [
              {
                "ruleId": null,
                "fatal": true,
                "severity": 2,
                "message": "Parsing error: Unexpected token <",
                "line": 1,
                "column": 1,
                "nodeType": null
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 1,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "<apx-chart\n #chart\n [series]=\"form.value.series | series : form.value.type\"\n [xaxis]=\"{ categories: form.value.xaxis }\"\n [chart]=\"{\n height: form.value.height,\n type: form.value.type,\n zoom: {\n enabled: false\n },\n shadow: {\n enabled: true,\n color: '#000',\n top: 18,\n left: 7,\n blur: 10,\n opacity: 1\n }\n }\"\n [title]=\"{ text: form.value.title }\"\n [autoUpdateSeries]=\"false\"\n (chartReady)=\"onChartReady($event)\"\n></apx-chart>\n\n<form [formGroup]=\"form\" [class.tes]=\"changeDet()\">\n Title: <input type=\"text\" formControlName=\"title\" /><br />\n Height: <input type=\"number\" formControlName=\"height\" /><br />\n Type:\n <select formControlName=\"type\">\n <option value=\"line\">Line</option>\n <option value=\"area\">Area</option>\n <option value=\"bar\">Bar</option>\n <option value=\"radar\">Radar</option>\n </select>\n\n <h3>Values</h3>\n <button (click)=\"addSeries()\">Add series</button>\n <button (click)=\"addValue()\">Add value</button>\n\n <div>\n <div style=\"width: 80%; display: inline-block\" formArrayName=\"series\">\n <h4>Data</h4>\n\n <div\n *ngFor=\"let series of series.controls; let i = index\"\n style=\"width: 20%; display: inline-block\"\n >\n <div [formGroupName]=\"i\">\n Name: <input type=\"text\" formControlName=\"name\" /><br />\n Type:\n <select formControlName=\"type\">\n <option value=\"line\">Line</option>\n <option value=\"area\">Area</option>\n <option value=\"bar\">Bar</option>\n </select>\n\n <div formArrayName=\"data\">\n <div\n *ngFor=\"\n let alias of form.get('series').controls[i].get('data')\n .controls;\n let y = index\n \"\n >\n <label>\n Value: <input type=\"number\" [formControlName]=\"y\" />\n </label>\n </div>\n </div>\n </div>\n </div>\n </div>\n\n <div formArrayName=\"xaxis\" style=\"width: 20%; display: inline-block\">\n <h4>XAxis</h4>\n <div *ngFor=\"let alias of xaxis.controls; let i = index\">\n <label>\n Value:\n <input type=\"text\" [formControlName]=\"i\" />\n </label>\n </div>\n </div>\n </div>\n</form>\n\n{{ form.value | json }}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/ng-apexcharts/src/index.html",
            "messages": [
              {
                "ruleId": null,
                "fatal": true,
                "severity": 2,
                "message": "Parsing error: Unexpected token <",
                "line": 1,
                "column": 1,
                "nodeType": null
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 1,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "<!doctype html>\n<html lang=\"en\">\n<head>\n <meta charset=\"utf-8\">\n <title>NgApexchartsDemo</title>\n <base href=\"/\">\n\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n</head>\n<body>\n <app-root></app-root>\n</body>\n</html>\n",
            "usedDeprecatedRules": []
          }
        ],
        "all": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/ng-apexcharts/src/app/app.component.html",
            "messages": [
              {
                "ruleId": null,
                "fatal": true,
                "severity": 2,
                "message": "Parsing error: Unexpected token <",
                "line": 1,
                "column": 1,
                "nodeType": null
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 1,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "<apx-chart\n #chart\n [series]=\"form.value.series | series : form.value.type\"\n [xaxis]=\"{ categories: form.value.xaxis }\"\n [chart]=\"{\n height: form.value.height,\n type: form.value.type,\n zoom: {\n enabled: false\n },\n shadow: {\n enabled: true,\n color: '#000',\n top: 18,\n left: 7,\n blur: 10,\n opacity: 1\n }\n }\"\n [title]=\"{ text: form.value.title }\"\n [autoUpdateSeries]=\"false\"\n (chartReady)=\"onChartReady($event)\"\n></apx-chart>\n\n<form [formGroup]=\"form\" [class.tes]=\"changeDet()\">\n Title: <input type=\"text\" formControlName=\"title\" /><br />\n Height: <input type=\"number\" formControlName=\"height\" /><br />\n Type:\n <select formControlName=\"type\">\n <option value=\"line\">Line</option>\n <option value=\"area\">Area</option>\n <option value=\"bar\">Bar</option>\n <option value=\"radar\">Radar</option>\n </select>\n\n <h3>Values</h3>\n <button (click)=\"addSeries()\">Add series</button>\n <button (click)=\"addValue()\">Add value</button>\n\n <div>\n <div style=\"width: 80%; display: inline-block\" formArrayName=\"series\">\n <h4>Data</h4>\n\n <div\n *ngFor=\"let series of series.controls; let i = index\"\n style=\"width: 20%; display: inline-block\"\n >\n <div [formGroupName]=\"i\">\n Name: <input type=\"text\" formControlName=\"name\" /><br />\n Type:\n <select formControlName=\"type\">\n <option value=\"line\">Line</option>\n <option value=\"area\">Area</option>\n <option value=\"bar\">Bar</option>\n </select>\n\n <div formArrayName=\"data\">\n <div\n *ngFor=\"\n let alias of form.get('series').controls[i].get('data')\n .controls;\n let y = index\n \"\n >\n <label>\n Value: <input type=\"number\" [formControlName]=\"y\" />\n </label>\n </div>\n </div>\n </div>\n </div>\n </div>\n\n <div formArrayName=\"xaxis\" style=\"width: 20%; display: inline-block\">\n <h4>XAxis</h4>\n <div *ngFor=\"let alias of xaxis.controls; let i = index\">\n <label>\n Value:\n <input type=\"text\" [formControlName]=\"i\" />\n </label>\n </div>\n </div>\n </div>\n</form>\n\n{{ form.value | json }}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/ng-apexcharts/src/app/app.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 14,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 25,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        29,
                        347
                      ],
                      "text": ", ChangeDetectionStrategy } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport {\n FormsModule,\n ReactiveFormsModule,\n UntypedFormArray,\n UntypedFormControl,\n UntypedFormGroup,\n} from \"@angular/forms\";\nimport { ChartComponent } from \"ng-apexcharts\";\n\nimport { SeriesPipe } from \"./series.pipe\";\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use the `viewChild` function instead of the `ViewChild` decorator",
                "line": 27,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferQuerySignals",
                "endLine": 27,
                "endColumn": 40
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ViewChild } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport {\n FormsModule,\n ReactiveFormsModule,\n UntypedFormArray,\n UntypedFormControl,\n UntypedFormGroup,\n} from \"@angular/forms\";\nimport { ChartComponent } from \"ng-apexcharts\";\n\nimport { SeriesPipe } from \"./series.pipe\";\n\n@Component({\n selector: \"app-root\",\n templateUrl: \"./app.component.html\",\n styleUrl: \"./app.component.less\",\n imports: [\n CommonModule,\n FormsModule,\n ReactiveFormsModule,\n ChartComponent,\n SeriesPipe,\n ]\n})\nexport class AppComponent {\n @ViewChild(\"chart\", { static: true }) chart: ChartComponent;\n\n form: UntypedFormGroup;\n\n public get series() {\n return this.form.get(\"series\") as UntypedFormArray;\n }\n\n public get xaxis() {\n return this.form.get(\"xaxis\") as UntypedFormArray;\n }\n private det = 0;\n changeDet(): boolean {\n console.log(`change${this.det++}`);\n return false;\n }\n\n constructor() {\n this.form = new UntypedFormGroup({\n title: new UntypedFormControl(\"Basic Chart\"),\n type: new UntypedFormControl(\"line\"),\n height: new UntypedFormControl(350),\n series: new UntypedFormArray([\n new UntypedFormGroup({\n name: new UntypedFormControl(\"Series\"),\n type: new UntypedFormControl(\"line\"),\n data: new UntypedFormArray([\n new UntypedFormControl(this.getRandomArbitrary(0, 100)),\n new UntypedFormControl(this.getRandomArbitrary(0, 100)),\n new UntypedFormControl(this.getRandomArbitrary(0, 100)),\n new UntypedFormControl(this.getRandomArbitrary(0, 100)),\n ]),\n }),\n ]),\n xaxis: new UntypedFormArray([\n new UntypedFormControl(\"Jan\"),\n new UntypedFormControl(\"Feb\"),\n new UntypedFormControl(\"Mar\"),\n new UntypedFormControl(\"Apr\"),\n ]),\n });\n }\n\n addValue() {\n (<UntypedFormArray>this.form.get(\"series\")).controls.forEach((c) => {\n (<UntypedFormArray>c.get(\"data\")).push(\n new UntypedFormControl(this.getRandomArbitrary(0, 100))\n );\n });\n (<UntypedFormArray>this.form.get(\"xaxis\")).push(\n new UntypedFormControl(\"Jan\")\n );\n }\n\n addSeries() {\n (<UntypedFormArray>this.form.get(\"series\")).push(\n new UntypedFormGroup({\n name: new UntypedFormControl(\"Series\"),\n type: new UntypedFormControl(\"line\"),\n data: new UntypedFormArray([\n new UntypedFormControl(this.getRandomArbitrary(0, 100)),\n new UntypedFormControl(this.getRandomArbitrary(0, 100)),\n new UntypedFormControl(this.getRandomArbitrary(0, 100)),\n new UntypedFormControl(this.getRandomArbitrary(0, 100)),\n ]),\n })\n );\n }\n\n onChartReady(event: any) {\n console.log(\"Chart ready\", event);\n }\n\n private getRandomArbitrary(min, max) {\n return Math.random() angular.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-apexcharts.report.json node_modules package.json package-lock.json projects README.md server.ts src tsconfig.app.json tsconfig.json yarn.lock (max - min) + min;\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/ng-apexcharts/src/index.html",
            "messages": [
              {
                "ruleId": null,
                "fatal": true,
                "severity": 2,
                "message": "Parsing error: Unexpected token <",
                "line": 1,
                "column": 1,
                "nodeType": null
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 1,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "<!doctype html>\n<html lang=\"en\">\n<head>\n <meta charset=\"utf-8\">\n <title>NgApexchartsDemo</title>\n <base href=\"/\">\n\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n</head>\n<body>\n <app-root></app-root>\n</body>\n</html>\n",
            "usedDeprecatedRules": []
          }
        ]
      },
      "ng-apexcharts": {
        "recommended": [],
        "all": []
      }
    }
  },
  "mean": {
    "repo": {
      "HEAD": {
        "commit": "5c12e1303c911345f17229ce0b5efbfd3e0a32df",
        "author": "Bob Conan",
        "date": "Thu Nov 7 16:59:52 2024 -0600",
        "message": "Update README.md, fix typos (#2073)"
      },
      "url": "https://github.com/linnovate/mean"
    },
    "before": {
      "mean": {
        "recommended": [],
        "all": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/mean/src/app/admin/admin-user-guard.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 9,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 9,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        231,
                        231
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        231,
                        231
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        231,
                        231
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { AuthService } from '@app/shared/services';\n\n@Injectable()\nexport class OnlyAdminUsersGuard implements CanActivate {\n constructor(private authService: AuthService) {}\n\n canActivate(): Observable<boolean> {\n return this.authService.getUser().pipe(map(user => !!user?.isAdmin));\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/mean/src/app/admin/admin.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 3,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 6,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        59
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\n\n@Component({\n selector: 'app-admin',\n templateUrl: './admin.component.html',\n})\nexport class AdminComponent {}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/mean/src/app/app.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 10,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 14,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        312
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { MatIconRegistry } from '@angular/material/icon';\nimport { DomSanitizer } from '@angular/platform-browser';\n\nimport { merge, Observable } from 'rxjs';\n\nimport { User } from './shared/interfaces';\nimport { AuthService } from './shared/services';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/consistent-component-styles",
                "severity": 2,
                "message": "Use `styleUrl` instead of `styleUrls` for a single stylesheet",
                "line": 13,
                "column": 3,
                "nodeType": "Property",
                "messageId": "useStyleUrl",
                "endLine": 13,
                "endColumn": 38,
                "fix": {
                  "range": [
                    375,
                    410
                  ],
                  "text": "styleUrl: './app.component.scss'"
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\nimport { MatIconRegistry } from '@angular/material/icon';\nimport { DomSanitizer } from '@angular/platform-browser';\n\nimport { merge, Observable } from 'rxjs';\n\nimport { User } from './shared/interfaces';\nimport { AuthService } from './shared/services';\n\n@Component({\n selector: 'app-root',\n templateUrl: './app.component.html',\n styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n user$: Observable<User | null> = merge(\n // Init on startup\n this.authService.me(),\n // Update after login/register/logout\n this.authService.getUser()\n );\n\n constructor(\n private domSanitizer: DomSanitizer,\n private matIconRegistry: MatIconRegistry,\n private authService: AuthService\n ) {\n this.registerSvgIcons();\n }\n\n registerSvgIcons() {\n [\n 'close',\n 'add',\n 'add-blue',\n 'airplane-front-view',\n 'air-station',\n 'balloon',\n 'boat',\n 'cargo-ship',\n 'car',\n 'catamaran',\n 'clone',\n 'convertible',\n 'delete',\n 'drone',\n 'fighter-plane',\n 'fire-truck',\n 'horseback-riding',\n 'motorcycle',\n 'railcar',\n 'railroad-train',\n 'rocket-boot',\n 'sailing-boat',\n 'segway',\n 'shuttle',\n 'space-shuttle',\n 'steam-engine',\n 'suv',\n 'tour-bus',\n 'tow-truck',\n 'transportation',\n 'trolleybus',\n 'water-transportation',\n ].forEach(icon => {\n this.matIconRegistry.addSvgIcon(\n icon,\n this.domSanitizer.bypassSecurityTrustResourceUrl(\n `assets/icons/${icon}.svg`\n )\n );\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/mean/src/app/auth/login/login.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 6,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 10,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        154
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { AuthService } from '@app/shared/services';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/consistent-component-styles",
                "severity": 2,
                "message": "Use `styleUrl` instead of `styleUrls` for a single stylesheet",
                "line": 9,
                "column": 3,
                "nodeType": "Property",
                "messageId": "useStyleUrl",
                "endLine": 9,
                "endColumn": 40,
                "fix": {
                  "range": [
                    220,
                    257
                  ],
                  "text": "styleUrl: '../auth.component.scss'"
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { AuthService } from '@app/shared/services';\n\n@Component({\n selector: 'app-login',\n templateUrl: './login.component.html',\n styleUrls: ['../auth.component.scss'],\n})\nexport class LoginComponent {\n email: string | null = null;\n password: string | null = null;\n\n constructor(private router: Router, private authService: AuthService) {}\n\n login(): void {\n this.authService.login(this.email!, this.password!).subscribe(() => {\n this.router.navigateByUrl('/');\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/mean/src/app/auth/register/register.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 13,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 17,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        283
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { Router } from '@angular/router';\nimport {\n UntypedFormGroup,\n UntypedFormControl,\n Validators,\n ValidationErrors,\n AbstractControl,\n} from '@angular/forms';\n\nimport { AuthService } from '@app/shared/services';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/consistent-component-styles",
                "severity": 2,
                "message": "Use `styleUrl` instead of `styleUrls` for a single stylesheet",
                "line": 16,
                "column": 3,
                "nodeType": "Property",
                "messageId": "useStyleUrl",
                "endLine": 16,
                "endColumn": 40,
                "fix": {
                  "range": [
                    355,
                    392
                  ],
                  "text": "styleUrl: '../auth.component.scss'"
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport {\n UntypedFormGroup,\n UntypedFormControl,\n Validators,\n ValidationErrors,\n AbstractControl,\n} from '@angular/forms';\n\nimport { AuthService } from '@app/shared/services';\n\n@Component({\n selector: 'app-register',\n templateUrl: './register.component.html',\n styleUrls: ['../auth.component.scss'],\n})\nexport class RegisterComponent {\n constructor(private router: Router, private authService: AuthService) {}\n\n passwordsMatchValidator(\n control: UntypedFormControl\n ): ValidationErrors | null {\n const password = control.root.get('password');\n return password && control.value !== password.value\n ? {\n passwordMatch: true,\n }\n : null;\n }\n\n userForm = new UntypedFormGroup({\n fullname: new UntypedFormControl('', [Validators.required]),\n email: new UntypedFormControl('', [Validators.required, Validators.email]),\n password: new UntypedFormControl('', [Validators.required]),\n repeatPassword: new UntypedFormControl('', [\n Validators.required,\n this.passwordsMatchValidator,\n ]),\n });\n\n get fullname(): AbstractControl {\n return this.userForm.get('fullname')!;\n }\n\n get email(): AbstractControl {\n return this.userForm.get('email')!;\n }\n\n get password(): AbstractControl {\n return this.userForm.get('password')!;\n }\n\n get repeatPassword(): AbstractControl {\n return this.userForm.get('repeatPassword')!;\n }\n\n register(): void {\n if (this.userForm.invalid) {\n return;\n }\n\n const { fullname, email, password, repeatPassword } =\n this.userForm.getRawValue();\n\n this.authService\n .register(fullname, email, password, repeatPassword)\n .subscribe(() => {\n this.router.navigate(['']);\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/mean/src/app/header/header.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 8,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 12,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        25,
                        209
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { User } from '@app/shared/interfaces';\n\nimport { AuthService } from '@app/shared/services';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/consistent-component-styles",
                "severity": 2,
                "message": "Use `styleUrl` instead of `styleUrls` for a single stylesheet",
                "line": 11,
                "column": 3,
                "nodeType": "Property",
                "messageId": "useStyleUrl",
                "endLine": 11,
                "endColumn": 41,
                "fix": {
                  "range": [
                    277,
                    315
                  ],
                  "text": "styleUrl: './header.component.scss'"
                }
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 14,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 14,
                "endColumn": 11
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import { Component, Input } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { User } from '@app/shared/interfaces';\n\nimport { AuthService } from '@app/shared/services';\n\n@Component({\n selector: 'app-header',\n templateUrl: './header.component.html',\n styleUrls: ['./header.component.scss'],\n})\nexport class HeaderComponent {\n @Input() user: User | null = null;\n\n constructor(private router: Router, private authService: AuthService) {}\n\n logout(): void {\n this.authService.signOut();\n this.router.navigateByUrl('/auth/login');\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/mean/src/app/home/home.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 3,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 7,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        59
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/consistent-component-styles",
                "severity": 2,
                "message": "Use `styleUrl` instead of `styleUrls` for a single stylesheet",
                "line": 6,
                "column": 3,
                "nodeType": "Property",
                "messageId": "useStyleUrl",
                "endLine": 6,
                "endColumn": 39,
                "fix": {
                  "range": [
                    123,
                    159
                  ],
                  "text": "styleUrl: './home.component.scss'"
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\n\n@Component({\n selector: 'app-home',\n templateUrl: './home.component.html',\n styleUrls: ['./home.component.scss'],\n})\nexport class HomeComponent {}\n",
            "usedDeprecatedRules": []
          }
        ]
      }
    },
    "after": {
      "mean": {
        "recommended": [],
        "all": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/mean/src/app/admin/admin-user-guard.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 9,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 9,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        231,
                        231
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        231,
                        231
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        231,
                        231
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { AuthService } from '@app/shared/services';\n\n@Injectable()\nexport class OnlyAdminUsersGuard implements CanActivate {\n constructor(private authService: AuthService) {}\n\n canActivate(): Observable<boolean> {\n return this.authService.getUser().pipe(map(user => !!user?.isAdmin));\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/mean/src/app/admin/admin.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 3,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 6,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        59
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\n\n@Component({\n selector: 'app-admin',\n templateUrl: './admin.component.html',\n})\nexport class AdminComponent {}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/mean/src/app/app.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 10,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 14,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        312
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { MatIconRegistry } from '@angular/material/icon';\nimport { DomSanitizer } from '@angular/platform-browser';\n\nimport { merge, Observable } from 'rxjs';\n\nimport { User } from './shared/interfaces';\nimport { AuthService } from './shared/services';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\nimport { MatIconRegistry } from '@angular/material/icon';\nimport { DomSanitizer } from '@angular/platform-browser';\n\nimport { merge, Observable } from 'rxjs';\n\nimport { User } from './shared/interfaces';\nimport { AuthService } from './shared/services';\n\n@Component({\n selector: 'app-root',\n templateUrl: './app.component.html',\n styleUrl: './app.component.scss',\n})\nexport class AppComponent {\n user$: Observable<User | null> = merge(\n // Init on startup\n this.authService.me(),\n // Update after login/register/logout\n this.authService.getUser()\n );\n\n constructor(\n private domSanitizer: DomSanitizer,\n private matIconRegistry: MatIconRegistry,\n private authService: AuthService\n ) {\n this.registerSvgIcons();\n }\n\n registerSvgIcons() {\n [\n 'close',\n 'add',\n 'add-blue',\n 'airplane-front-view',\n 'air-station',\n 'balloon',\n 'boat',\n 'cargo-ship',\n 'car',\n 'catamaran',\n 'clone',\n 'convertible',\n 'delete',\n 'drone',\n 'fighter-plane',\n 'fire-truck',\n 'horseback-riding',\n 'motorcycle',\n 'railcar',\n 'railroad-train',\n 'rocket-boot',\n 'sailing-boat',\n 'segway',\n 'shuttle',\n 'space-shuttle',\n 'steam-engine',\n 'suv',\n 'tour-bus',\n 'tow-truck',\n 'transportation',\n 'trolleybus',\n 'water-transportation',\n ].forEach(icon => {\n this.matIconRegistry.addSvgIcon(\n icon,\n this.domSanitizer.bypassSecurityTrustResourceUrl(\n `assets/icons/${icon}.svg`\n )\n );\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/mean/src/app/auth/login/login.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 6,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 10,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        154
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { AuthService } from '@app/shared/services';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { AuthService } from '@app/shared/services';\n\n@Component({\n selector: 'app-login',\n templateUrl: './login.component.html',\n styleUrl: '../auth.component.scss',\n})\nexport class LoginComponent {\n email: string | null = null;\n password: string | null = null;\n\n constructor(private router: Router, private authService: AuthService) {}\n\n login(): void {\n this.authService.login(this.email!, this.password!).subscribe(() => {\n this.router.navigateByUrl('/');\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/mean/src/app/auth/register/register.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 13,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 17,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        283
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { Router } from '@angular/router';\nimport {\n UntypedFormGroup,\n UntypedFormControl,\n Validators,\n ValidationErrors,\n AbstractControl,\n} from '@angular/forms';\n\nimport { AuthService } from '@app/shared/services';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport {\n UntypedFormGroup,\n UntypedFormControl,\n Validators,\n ValidationErrors,\n AbstractControl,\n} from '@angular/forms';\n\nimport { AuthService } from '@app/shared/services';\n\n@Component({\n selector: 'app-register',\n templateUrl: './register.component.html',\n styleUrl: '../auth.component.scss',\n})\nexport class RegisterComponent {\n constructor(private router: Router, private authService: AuthService) {}\n\n passwordsMatchValidator(\n control: UntypedFormControl\n ): ValidationErrors | null {\n const password = control.root.get('password');\n return password && control.value !== password.value\n ? {\n passwordMatch: true,\n }\n : null;\n }\n\n userForm = new UntypedFormGroup({\n fullname: new UntypedFormControl('', [Validators.required]),\n email: new UntypedFormControl('', [Validators.required, Validators.email]),\n password: new UntypedFormControl('', [Validators.required]),\n repeatPassword: new UntypedFormControl('', [\n Validators.required,\n this.passwordsMatchValidator,\n ]),\n });\n\n get fullname(): AbstractControl {\n return this.userForm.get('fullname')!;\n }\n\n get email(): AbstractControl {\n return this.userForm.get('email')!;\n }\n\n get password(): AbstractControl {\n return this.userForm.get('password')!;\n }\n\n get repeatPassword(): AbstractControl {\n return this.userForm.get('repeatPassword')!;\n }\n\n register(): void {\n if (this.userForm.invalid) {\n return;\n }\n\n const { fullname, email, password, repeatPassword } =\n this.userForm.getRawValue();\n\n this.authService\n .register(fullname, email, password, repeatPassword)\n .subscribe(() => {\n this.router.navigate(['']);\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/mean/src/app/header/header.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 8,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 12,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        25,
                        209
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { User } from '@app/shared/interfaces';\n\nimport { AuthService } from '@app/shared/services';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 14,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 14,
                "endColumn": 11
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, Input } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { User } from '@app/shared/interfaces';\n\nimport { AuthService } from '@app/shared/services';\n\n@Component({\n selector: 'app-header',\n templateUrl: './header.component.html',\n styleUrl: './header.component.scss',\n})\nexport class HeaderComponent {\n @Input() user: User | null = null;\n\n constructor(private router: Router, private authService: AuthService) {}\n\n logout(): void {\n this.authService.signOut();\n this.router.navigateByUrl('/auth/login');\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/mean/src/app/home/home.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 3,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 7,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        59
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\n\n@Component({\n selector: 'app-home',\n templateUrl: './home.component.html',\n styleUrl: './home.component.scss',\n})\nexport class HomeComponent {}\n",
            "usedDeprecatedRules": []
          }
        ]
      }
    }
  },
  "angular-16-crud-example": {
    "repo": {
      "HEAD": {
        "commit": "e760ebb02fd950b478b0fa863e767b672929b10d",
        "author": "tienbku",
        "date": "Thu May 25 15:57:13 2023 +0700",
        "message": "first commit"
      },
      "url": "https://github.com/bezkoder/angular-16-crud-example"
    },
    "before": {
      "angular-16-crud": {
        "recommended": [],
        "all": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-16-crud-example/src/app/app.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 3,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 7,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        59
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/consistent-component-styles",
                "severity": 2,
                "message": "Use `styleUrl` instead of `styleUrls` for a single stylesheet",
                "line": 6,
                "column": 3,
                "nodeType": "Property",
                "messageId": "useStyleUrl",
                "endLine": 6,
                "endColumn": 37,
                "fix": {
                  "range": [
                    122,
                    156
                  ],
                  "text": "styleUrl: './app.component.css'"
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\n\n@Component({\n selector: 'app-root',\n templateUrl: './app.component.html',\n styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n title = 'Angular 16 Crud example';\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-16-crud-example/src/app/components/add-tutorial/add-tutorial.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 5,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 9,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        186
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { Tutorial } from 'src/app/models/tutorial.model';\nimport { TutorialService } from 'src/app/services/tutorial.service';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/consistent-component-styles",
                "severity": 2,
                "message": "Use `styleUrl` instead of `styleUrls` for a single stylesheet",
                "line": 8,
                "column": 3,
                "nodeType": "Property",
                "messageId": "useStyleUrl",
                "endLine": 8,
                "endColumn": 46,
                "fix": {
                  "range": [
                    266,
                    309
                  ],
                  "text": "styleUrl: './add-tutorial.component.css'"
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\nimport { Tutorial } from 'src/app/models/tutorial.model';\nimport { TutorialService } from 'src/app/services/tutorial.service';\n\n@Component({\n selector: 'app-add-tutorial',\n templateUrl: './add-tutorial.component.html',\n styleUrls: ['./add-tutorial.component.css'],\n})\nexport class AddTutorialComponent {\n tutorial: Tutorial = {\n title: '',\n description: '',\n published: false\n };\n submitted = false;\n\n constructor(private tutorialService: TutorialService) {}\n\n saveTutorial(): void {\n const data = {\n title: this.tutorial.title,\n description: this.tutorial.description\n };\n\n this.tutorialService.create(data).subscribe({\n next: (res) => {\n console.log(res);\n this.submitted = true;\n },\n error: (e) => console.error(e)\n });\n }\n\n newTutorial(): void {\n this.submitted = false;\n this.tutorial = {\n title: '',\n description: '',\n published: false\n };\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-16-crud-example/src/app/components/tutorial-details/tutorial-details.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 6,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 10,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        33,
                        259
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { TutorialService } from 'src/app/services/tutorial.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Tutorial } from 'src/app/models/tutorial.model';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/consistent-component-styles",
                "severity": 2,
                "message": "Use `styleUrl` instead of `styleUrls` for a single stylesheet",
                "line": 9,
                "column": 3,
                "nodeType": "Property",
                "messageId": "useStyleUrl",
                "endLine": 9,
                "endColumn": 50,
                "fix": {
                  "range": [
                    347,
                    394
                  ],
                  "text": "styleUrl: './tutorial-details.component.css'"
                }
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 12,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 12,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 14,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 14,
                "endColumn": 11
              }
            ],
            "suppressedMessages": [],
            "errorCount": 4,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import { Component, Input, OnInit } from '@angular/core';\nimport { TutorialService } from 'src/app/services/tutorial.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Tutorial } from 'src/app/models/tutorial.model';\n\n@Component({\n selector: 'app-tutorial-details',\n templateUrl: './tutorial-details.component.html',\n styleUrls: ['./tutorial-details.component.css'],\n})\nexport class TutorialDetailsComponent implements OnInit {\n @Input() viewMode = false;\n\n @Input() currentTutorial: Tutorial = {\n title: '',\n description: '',\n published: false\n };\n\n message = '';\n\n constructor(\n private tutorialService: TutorialService,\n private route: ActivatedRoute,\n private router: Router\n ) {}\n\n ngOnInit(): void {\n if (!this.viewMode) {\n this.message = '';\n this.getTutorial(this.route.snapshot.params['id']);\n }\n }\n\n getTutorial(id: string): void {\n this.tutorialService.get(id).subscribe({\n next: (data) => {\n this.currentTutorial = data;\n console.log(data);\n },\n error: (e) => console.error(e)\n });\n }\n\n updatePublished(status: boolean): void {\n const data = {\n title: this.currentTutorial.title,\n description: this.currentTutorial.description,\n published: status\n };\n\n this.message = '';\n\n this.tutorialService.update(this.currentTutorial.id, data).subscribe({\n next: (res) => {\n console.log(res);\n this.currentTutorial.published = status;\n this.message = res.message\n ? res.message\n : 'The status was updated successfully!';\n },\n error: (e) => console.error(e)\n });\n }\n\n updateTutorial(): void {\n this.message = '';\n\n this.tutorialService\n .update(this.currentTutorial.id, this.currentTutorial)\n .subscribe({\n next: (res) => {\n console.log(res);\n this.message = res.message\n ? res.message\n : 'This tutorial was updated successfully!';\n },\n error: (e) => console.error(e)\n });\n }\n\n deleteTutorial(): void {\n this.tutorialService.delete(this.currentTutorial.id).subscribe({\n next: (res) => {\n console.log(res);\n this.router.navigate(['/tutorials']);\n },\n error: (e) => console.error(e)\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-16-crud-example/src/app/components/tutorials-list/tutorials-list.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 5,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 9,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        26,
                        194
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { Tutorial } from 'src/app/models/tutorial.model';\nimport { TutorialService } from 'src/app/services/tutorial.service';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/consistent-component-styles",
                "severity": 2,
                "message": "Use `styleUrl` instead of `styleUrls` for a single stylesheet",
                "line": 8,
                "column": 3,
                "nodeType": "Property",
                "messageId": "useStyleUrl",
                "endLine": 8,
                "endColumn": 48,
                "fix": {
                  "range": [
                    278,
                    323
                  ],
                  "text": "styleUrl: './tutorials-list.component.css'"
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import { Component, OnInit } from '@angular/core';\nimport { Tutorial } from 'src/app/models/tutorial.model';\nimport { TutorialService } from 'src/app/services/tutorial.service';\n\n@Component({\n selector: 'app-tutorials-list',\n templateUrl: './tutorials-list.component.html',\n styleUrls: ['./tutorials-list.component.css'],\n})\nexport class TutorialsListComponent implements OnInit {\n tutorials?: Tutorial[];\n currentTutorial: Tutorial = {};\n currentIndex = -1;\n title = '';\n\n constructor(private tutorialService: TutorialService) {}\n\n ngOnInit(): void {\n this.retrieveTutorials();\n }\n\n retrieveTutorials(): void {\n this.tutorialService.getAll().subscribe({\n next: (data) => {\n this.tutorials = data;\n console.log(data);\n },\n error: (e) => console.error(e)\n });\n }\n\n refreshList(): void {\n this.retrieveTutorials();\n this.currentTutorial = {};\n this.currentIndex = -1;\n }\n\n setActiveTutorial(tutorial: Tutorial, index: number): void {\n this.currentTutorial = tutorial;\n this.currentIndex = index;\n }\n\n removeAllTutorials(): void {\n this.tutorialService.deleteAll().subscribe({\n next: (res) => {\n console.log(res);\n this.refreshList();\n },\n error: (e) => console.error(e)\n });\n }\n\n searchTitle(): void {\n this.currentTutorial = {};\n this.currentIndex = -1;\n\n this.tutorialService.findByTitle(this.title).subscribe({\n next: (data) => {\n this.tutorials = data;\n console.log(data);\n },\n error: (e) => console.error(e)\n });\n }\n}\n",
            "usedDeprecatedRules": []
          }
        ]
      }
    },
    "after": {
      "angular-16-crud": {
        "recommended": [],
        "all": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-16-crud-example/src/app/app.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 3,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 7,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        59
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\n\n@Component({\n selector: 'app-root',\n templateUrl: './app.component.html',\n styleUrl: './app.component.css'\n})\nexport class AppComponent {\n title = 'Angular 16 Crud example';\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-16-crud-example/src/app/components/add-tutorial/add-tutorial.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 5,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 9,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        186
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { Tutorial } from 'src/app/models/tutorial.model';\nimport { TutorialService } from 'src/app/services/tutorial.service';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\nimport { Tutorial } from 'src/app/models/tutorial.model';\nimport { TutorialService } from 'src/app/services/tutorial.service';\n\n@Component({\n selector: 'app-add-tutorial',\n templateUrl: './add-tutorial.component.html',\n styleUrl: './add-tutorial.component.css',\n})\nexport class AddTutorialComponent {\n tutorial: Tutorial = {\n title: '',\n description: '',\n published: false\n };\n submitted = false;\n\n constructor(private tutorialService: TutorialService) {}\n\n saveTutorial(): void {\n const data = {\n title: this.tutorial.title,\n description: this.tutorial.description\n };\n\n this.tutorialService.create(data).subscribe({\n next: (res) => {\n console.log(res);\n this.submitted = true;\n },\n error: (e) => console.error(e)\n });\n }\n\n newTutorial(): void {\n this.submitted = false;\n this.tutorial = {\n title: '',\n description: '',\n published: false\n };\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-16-crud-example/src/app/components/tutorial-details/tutorial-details.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 6,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 10,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        33,
                        259
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { TutorialService } from 'src/app/services/tutorial.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Tutorial } from 'src/app/models/tutorial.model';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 12,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 12,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 14,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 14,
                "endColumn": 11
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, Input, OnInit } from '@angular/core';\nimport { TutorialService } from 'src/app/services/tutorial.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Tutorial } from 'src/app/models/tutorial.model';\n\n@Component({\n selector: 'app-tutorial-details',\n templateUrl: './tutorial-details.component.html',\n styleUrl: './tutorial-details.component.css',\n})\nexport class TutorialDetailsComponent implements OnInit {\n @Input() viewMode = false;\n\n @Input() currentTutorial: Tutorial = {\n title: '',\n description: '',\n published: false\n };\n\n message = '';\n\n constructor(\n private tutorialService: TutorialService,\n private route: ActivatedRoute,\n private router: Router\n ) {}\n\n ngOnInit(): void {\n if (!this.viewMode) {\n this.message = '';\n this.getTutorial(this.route.snapshot.params['id']);\n }\n }\n\n getTutorial(id: string): void {\n this.tutorialService.get(id).subscribe({\n next: (data) => {\n this.currentTutorial = data;\n console.log(data);\n },\n error: (e) => console.error(e)\n });\n }\n\n updatePublished(status: boolean): void {\n const data = {\n title: this.currentTutorial.title,\n description: this.currentTutorial.description,\n published: status\n };\n\n this.message = '';\n\n this.tutorialService.update(this.currentTutorial.id, data).subscribe({\n next: (res) => {\n console.log(res);\n this.currentTutorial.published = status;\n this.message = res.message\n ? res.message\n : 'The status was updated successfully!';\n },\n error: (e) => console.error(e)\n });\n }\n\n updateTutorial(): void {\n this.message = '';\n\n this.tutorialService\n .update(this.currentTutorial.id, this.currentTutorial)\n .subscribe({\n next: (res) => {\n console.log(res);\n this.message = res.message\n ? res.message\n : 'This tutorial was updated successfully!';\n },\n error: (e) => console.error(e)\n });\n }\n\n deleteTutorial(): void {\n this.tutorialService.delete(this.currentTutorial.id).subscribe({\n next: (res) => {\n console.log(res);\n this.router.navigate(['/tutorials']);\n },\n error: (e) => console.error(e)\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-16-crud-example/src/app/components/tutorials-list/tutorials-list.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 5,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 9,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        26,
                        194
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { Tutorial } from 'src/app/models/tutorial.model';\nimport { TutorialService } from 'src/app/services/tutorial.service';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, OnInit } from '@angular/core';\nimport { Tutorial } from 'src/app/models/tutorial.model';\nimport { TutorialService } from 'src/app/services/tutorial.service';\n\n@Component({\n selector: 'app-tutorials-list',\n templateUrl: './tutorials-list.component.html',\n styleUrl: './tutorials-list.component.css',\n})\nexport class TutorialsListComponent implements OnInit {\n tutorials?: Tutorial[];\n currentTutorial: Tutorial = {};\n currentIndex = -1;\n title = '';\n\n constructor(private tutorialService: TutorialService) {}\n\n ngOnInit(): void {\n this.retrieveTutorials();\n }\n\n retrieveTutorials(): void {\n this.tutorialService.getAll().subscribe({\n next: (data) => {\n this.tutorials = data;\n console.log(data);\n },\n error: (e) => console.error(e)\n });\n }\n\n refreshList(): void {\n this.retrieveTutorials();\n this.currentTutorial = {};\n this.currentIndex = -1;\n }\n\n setActiveTutorial(tutorial: Tutorial, index: number): void {\n this.currentTutorial = tutorial;\n this.currentIndex = index;\n }\n\n removeAllTutorials(): void {\n this.tutorialService.deleteAll().subscribe({\n next: (res) => {\n console.log(res);\n this.refreshList();\n },\n error: (e) => console.error(e)\n });\n }\n\n searchTitle(): void {\n this.currentTutorial = {};\n this.currentIndex = -1;\n\n this.tutorialService.findByTitle(this.title).subscribe({\n next: (data) => {\n this.tutorials = data;\n console.log(data);\n },\n error: (e) => console.error(e)\n });\n }\n}\n",
            "usedDeprecatedRules": []
          }
        ]
      }
    }
  },
  "QuickApp": {
    "repo": {
      "HEAD": {
        "commit": "435f959f6d3ef510fef831e64cb6ebe03494a944",
        "author": "Ebenezer Monney",
        "date": "Sun Dec 1 13:21:23 2024 +0000",
        "message": "removed stylePreprocessorOptions from test config"
      },
      "url": "https://github.com/emonney/QuickApp"
    },
    "before": {
      "quickapp.client": {
        "recommended": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/controls/statistics-demo.component.ts",
            "messages": [
              {
                "ruleId": "@typescript-eslint/no-unused-vars",
                "message": "Definition for rule '@typescript-eslint/no-unused-vars' was not found.",
                "line": 123,
                "column": 3,
                "endLine": 123,
                "endColumn": 64,
                "severity": 2,
                "nodeType": null
              },
              {
                "ruleId": "@typescript-eslint/no-unused-vars",
                "message": "Definition for rule '@typescript-eslint/no-unused-vars' was not found.",
                "line": 128,
                "column": 3,
                "endLine": 128,
                "endColumn": 64,
                "severity": 2,
                "nodeType": null
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component, OnInit, OnDestroy, inject, viewChild } from '@angular/core';\nimport { AlertService, DialogType, MessageSeverity } from '../../services/alert.service';\nimport { BaseChartDirective } from 'ng2-charts';\nimport { ChartEvent, ChartType } from 'chart.js';\nimport { NgbDropdown, NgbDropdownToggle, NgbDropdownMenu, NgbDropdownButtonItem, NgbDropdownItem }\n from '@ng-bootstrap/ng-bootstrap';\n\ninterface ChartEventArgs { event: ChartEvent; active: object[] }\n\n@Component({\n selector: 'app-statistics-demo',\n templateUrl: './statistics-demo.component.html',\n styleUrl: './statistics-demo.component.scss',\n imports: [BaseChartDirective, NgbDropdown, NgbDropdownToggle, NgbDropdownMenu, NgbDropdownButtonItem, NgbDropdownItem]\n})\nexport class StatisticsDemoComponent implements OnInit, OnDestroy {\n private alertService = inject(AlertService);\n\n chartOptions: object | undefined;\n chartType: ChartType = 'line';\n chartLabels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'];\n chartData = [\n {\n data: [65, 59, 80, 81, 56, 55],\n label: 'Series A',\n fill: 'origin',\n },\n {\n data: [28, 48, 40, 19, 86, 27],\n label: 'Series B',\n fill: 'origin',\n },\n {\n data: [18, 48, 77, 9, 100, 27],\n label: 'Series C',\n fill: 'origin',\n }\n ];\n\n timerReference: ReturnType<typeof setInterval> | undefined;\n\n readonly chart = viewChild.required(BaseChartDirective);\n\n ngOnInit() {\n this.refreshChartOptions();\n this.timerReference = setInterval(() => this.randomize(), 5000);\n }\n\n ngOnDestroy() {\n clearInterval(this.timerReference);\n }\n\n refreshChartOptions() {\n const baseOptions = {\n responsive: true,\n maintainAspectRatio: false,\n title: {\n display: false,\n fontSize: 16,\n text: 'Important Stuff'\n }\n };\n\n if (this.chartType != 'line') {\n this.chartOptions = baseOptions;\n }\n else {\n const lineChartOptions = {\n elements: {\n line: {\n tension: 0.5\n }\n }\n };\n\n this.chartOptions = { ...baseOptions, ...lineChartOptions };\n }\n }\n\n randomize(): void {\n for (const series of this.chartData) {\n for (let j = 0; j < series.data.length; j++) {\n series.data[j] = Math.floor((Math.random() angular.json aspnetcore-https.js eslint.config.js karma.conf.js lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules nuget.config package.json package-lock.json public quickapp.client.esproj QuickApp.report.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json 100) + 1);\n }\n }\n\n this.chart().update();\n }\n\n changeChartType(type: ChartType) {\n this.chartType = type;\n this.refreshChartOptions();\n }\n\n showMessage(msg: string): void {\n this.alertService.showMessage('Demo', msg, MessageSeverity.info);\n }\n\n showDialog(msg: string): void {\n this.alertService.showDialog(msg, DialogType.prompt, (val) => this.configure(true, val), () => this.configure(false));\n }\n\n configure(response: boolean, value?: string) {\n if (response) {\n this.alertService.showStickyMessage('Simulating...', '', MessageSeverity.wait);\n\n setTimeout(() => {\n this.alertService.resetStickyMessage();\n this.alertService.showMessage('Demo', `Your settings was successfully configured to \"${value}\"`, MessageSeverity.success);\n }, 2000);\n } else {\n this.alertService.showMessage('Demo', 'Operation cancelled by user', MessageSeverity.default);\n }\n }\n\n\n // eslint-disable-next-line @typescript-eslint/no-unused-vars\n chartHovered(e: ChartEventArgs): void {\n // Demo\n }\n\n // eslint-disable-next-line @typescript-eslint/no-unused-vars\n chartClicked(e: Partial<ChartEventArgs>): void {\n // Demo\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/services/notification-endpoint.service.ts",
            "messages": [
              {
                "ruleId": "@typescript-eslint/no-unused-vars",
                "message": "Definition for rule '@typescript-eslint/no-unused-vars' was not found.",
                "line": 98,
                "column": 3,
                "endLine": 98,
                "endColumn": 64,
                "severity": 2,
                "nodeType": null
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Observable, of, throwError } from 'rxjs';\n\n@Injectable({\n providedIn: 'root'\n})\nexport class NotificationEndpoint {\n private demoNotifications = [\n {\n id: 1,\n header: '20 New Products were added to your inventory by \"administrator\"',\n body: '20 new \"BMW M6\" were added to your stock by \"administrator\" on 5/28/2017 4:54:13 PM',\n isRead: true,\n isPinned: true,\n date: '2017-05-28T16:29:13.5877958'\n },\n {\n id: 2,\n header: '1 Product running low',\n body: 'You are running low on \"Nissan Patrol\". 2 Items remaining',\n isRead: false,\n isPinned: false,\n date: '2017-05-28T19:54:42.4144502'\n },\n {\n id: 3,\n header: 'Tomorrow is half day',\n body: 'Guys, tomorrow we close by midday. Please check in your sales before noon. Thanks. Alex.',\n isRead: false,\n isPinned: false,\n date: '2017-05-30T11:13:42.4144502'\n }\n ];\n\n\n getNotificationEndpoint<T>(notificationId: number) {\n const notification = this.demoNotifications.find(val => val.id === notificationId);\n return this.createDemoResponse(notification as T, notification ? null : 404);\n }\n\n getNotificationsEndpoint<T>(page: number, pageSize: number) {\n return this.createDemoResponse(this.demoNotifications as T, null, page, pageSize);\n }\n\n getUnreadNotificationsEndpoint<T>(userId?: string) {\n const unreadNotifications = this.demoNotifications.filter(val => !val.isRead);\n return this.createDemoResponse(unreadNotifications as T, null, userId);\n }\n\n getNewNotificationsEndpoint<T>(lastNotificationDate?: Date) {\n return this.createDemoResponse(this.demoNotifications as T, null, lastNotificationDate);\n }\n\n getPinUnpinNotificationEndpoint(notificationId: number, isPinned?: boolean) {\n const notification = this.demoNotifications.find(val => val.id === notificationId);\n\n if (notification) {\n if (isPinned == null) {\n isPinned = !notification.isPinned;\n }\n\n notification.isPinned = isPinned;\n notification.isRead = true;\n\n return this.createDemoResponse(null);\n } else {\n return this.createDemoResponse(null, 404);\n }\n }\n\n getReadUnreadNotificationEndpoint(notificationIds: number[], isRead: boolean) {\n for (const notificationId of notificationIds) {\n const notification = this.demoNotifications.find(val => val.id === notificationId);\n\n if (notification)\n notification.isRead = isRead;\n }\n\n return this.createDemoResponse(null);\n }\n\n getDeleteNotificationEndpoint<T>(notificationId: number) {\n const notification = this.demoNotifications.find(val => val.id === notificationId);\n\n if (notification)\n this.demoNotifications = this.demoNotifications.filter(val => val.id !== notificationId);\n\n return this.createDemoResponse(notification as T, notification ? null : 404);\n }\n\n // eslint-disable-next-line @typescript-eslint/no-unused-vars\n private createDemoResponse<T>(data: T, errorCode: number | null = null, ...args: unknown[]): Observable<T> {\n if (errorCode == null)\n return of(data);\n else\n return throwError(() => new HttpErrorResponse({ status: errorCode, error: 'Demo. An error occurred' }));\n }\n}\n",
            "usedDeprecatedRules": []
          }
        ],
        "all": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/app-error.handler.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 9,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 9,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        278,
                        278
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        278,
                        278
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        278,
                        278
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Injectable, ErrorHandler } from '@angular/core';\n\n@Injectable()\nexport class AppErrorHandler extends ErrorHandler {\n constructor() {\n super();\n }\n\n override handleError(error: Error) {\n if (confirm(\"Fatal Error!\\nAn unresolved error has occurred. Do you want to reload the page to correct this?\\n\\n\" +\n `Error: ${error.message}`)) {\n window.location.reload();\n }\n\n super.handleError(error);\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/app.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 29,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 37,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        263,
                        1563
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { Router, RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ToastaService, ToastaConfig, ToastOptions, ToastData, ToastaModule } from 'ngx-toasta';\nimport { NgbCollapseModule, NgbModal, NgbPopover } from '@ng-bootstrap/ng-bootstrap';\n\nimport { AlertService, AlertDialog, DialogType, AlertCommand, MessageSeverity } from './services/alert.service';\nimport { NotificationService } from './services/notification.service';\nimport { AppTranslationService } from './services/app-translation.service';\nimport { AccountService } from './services/account.service';\nimport { LocalStoreManager } from './services/local-store-manager.service';\nimport { AppTitleService } from './services/app-title.service';\nimport { AuthService } from './services/auth.service';\nimport { ConfigurationService } from './services/configuration.service';\nimport { Alertify } from './models/Alertify';\nimport { Permissions } from './models/permission.model';\nimport { LoginComponent } from './components/login/login.component';\nimport { NotificationsViewerComponent } from './components/controls/notifications-viewer.component';\n\ndeclare let alertify: Alertify;\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component, OnInit, OnDestroy, inject, Renderer2 } from '@angular/core';\nimport { Router, RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ToastaService, ToastaConfig, ToastOptions, ToastData, ToastaModule } from 'ngx-toasta';\nimport { NgbCollapseModule, NgbModal, NgbPopover } from '@ng-bootstrap/ng-bootstrap';\n\nimport { AlertService, AlertDialog, DialogType, AlertCommand, MessageSeverity } from './services/alert.service';\nimport { NotificationService } from './services/notification.service';\nimport { AppTranslationService } from './services/app-translation.service';\nimport { AccountService } from './services/account.service';\nimport { LocalStoreManager } from './services/local-store-manager.service';\nimport { AppTitleService } from './services/app-title.service';\nimport { AuthService } from './services/auth.service';\nimport { ConfigurationService } from './services/configuration.service';\nimport { Alertify } from './models/Alertify';\nimport { Permissions } from './models/permission.model';\nimport { LoginComponent } from './components/login/login.component';\nimport { NotificationsViewerComponent } from './components/controls/notifications-viewer.component';\n\ndeclare let alertify: Alertify;\n\n@Component({\n selector: 'app-root',\n templateUrl: './app.component.html',\n styleUrl: './app.component.scss',\n imports: [\n ToastaModule, RouterLink, RouterLinkActive, NgbCollapseModule, NgbPopover, NotificationsViewerComponent,\n RouterOutlet, TranslateModule\n ]\n})\nexport class AppComponent implements OnInit, OnDestroy {\n private toastaService = inject(ToastaService);\n private toastaConfig = inject(ToastaConfig);\n private accountService = inject(AccountService);\n private alertService = inject(AlertService);\n private modalService = inject(NgbModal);\n private notificationService = inject(NotificationService);\n private authService = inject(AuthService);\n private translationService = inject(AppTranslationService);\n configurations = inject(ConfigurationService);\n router = inject(Router);\n renderer = inject(Renderer2);\n\n isMenuCollapsed = true;\n isAppLoaded = false;\n isUserLoggedIn = false;\n newNotificationCount = 0;\n appTitle = 'QuickApp';\n\n stickyToasties: number[] = [];\n\n dataLoadingConsecutiveFailures = 0;\n notificationsLoadingSubscription: Subscription | undefined;\n languageChangedSubscription: Subscription | undefined;\n\n loginControl: LoginComponent | undefined;\n\n gT = (key: string | string[], interpolateParams?: object) =>\n this.translationService.getTranslation(key, interpolateParams);\n\n get notificationsTitle() {\n if (this.newNotificationCount) {\n return `${this.gT('app.Notifications')} (${this.newNotificationCount} ${this.gT('app.New')})`;\n } else {\n return this.gT('app.Notifications');\n }\n }\n\n constructor() {\n const storageManager = inject(LocalStoreManager);\n\n storageManager.initialiseStorageSyncListener();\n\n this.toastaConfig.theme = 'bootstrap';\n this.toastaConfig.position = 'top-right';\n this.toastaConfig.limit = 100;\n this.toastaConfig.showClose = true;\n this.toastaConfig.showDuration = false;\n\n AppTitleService.appName = this.appTitle;\n }\n\n ngOnInit() {\n this.isUserLoggedIn = this.authService.isLoggedIn;\n\n // Extra sec to display preboot loaded information\n setTimeout(() => this.isAppLoaded = true, 1000);\n\n setTimeout(() => {\n if (this.isUserLoggedIn) {\n this.alertService.resetStickyMessage();\n this.alertService.showMessage(this.gT('app.alerts.Login'), this.gT('app.alerts.WelcomeBack',\n { username: this.userName }), MessageSeverity.default);\n }\n }, 2000);\n\n this.languageChangedSubscription = this.translationService.languageChanged$\n .subscribe(event => {\n this.renderer.setAttribute(document.documentElement, 'dir', event.lang === 'ar' ? 'rtl' : 'ltr');\n this.renderer.setAttribute(document.documentElement, 'lang', event.lang);\n });\n\n this.alertService.getDialogEvent().subscribe(alert => this.showDialog(alert));\n this.alertService.getMessageEvent().subscribe(message => this.showToast(message));\n\n this.authService.reLoginDelegate = () => this.openLoginModal();\n\n this.authService.getLoginStatusEvent().subscribe(isLoggedIn => {\n this.isUserLoggedIn = isLoggedIn;\n\n if (this.isUserLoggedIn) {\n this.initNotificationsLoading();\n } else {\n this.unsubscribeNotifications();\n }\n\n setTimeout(() => {\n if (!this.isUserLoggedIn) {\n this.alertService.showMessage(this.gT('app.alerts.SessionEnded'), '', MessageSeverity.default);\n }\n }, 500);\n });\n }\n\n ngOnDestroy() {\n this.unsubscribeNotifications();\n this.languageChangedSubscription?.unsubscribe();\n }\n\n private unsubscribeNotifications() {\n this.notificationsLoadingSubscription?.unsubscribe();\n }\n\n initNotificationsLoading() {\n this.notificationsLoadingSubscription = this.notificationService.getNewNotificationsPeriodically()\n .subscribe({\n next: notifications => {\n this.dataLoadingConsecutiveFailures = 0;\n this.newNotificationCount = notifications.filter(n => !n.isRead).length;\n },\n error: error => {\n this.alertService.logError(error);\n\n if (this.dataLoadingConsecutiveFailures++ < 20) {\n setTimeout(() => this.initNotificationsLoading(), 5000);\n } else {\n this.alertService.showStickyMessage(this.gT('app.alerts.LoadingError'),\n this.gT('app.alerts.LoadingNewNotificationsFailed'), MessageSeverity.error);\n }\n }\n });\n }\n\n markNotificationsAsRead() {\n const newNotifications = this.notificationService.newNotifications;\n\n if (newNotifications) {\n this.notificationService.readUnreadNotification(newNotifications.map(n => n.id), true)\n .subscribe({\n next: () => {\n for (const n of newNotifications) {\n n.isRead = true;\n }\n\n this.newNotificationCount = newNotifications.filter(n => !n.isRead).length;\n },\n error: error => {\n this.alertService.logError(error);\n this.alertService.showMessage(this.gT('app.alerts.NotificationError'),\n this.gT('app.alerts.MarkingReadNotificationsFailed'), MessageSeverity.error);\n }\n });\n }\n }\n\n openLoginModal() {\n const modalRef = this.modalService.open(LoginComponent, {\n windowClass: 'login-control',\n modalDialogClass: 'h-75 d-flex flex-column justify-content-center my-0',\n size: 'lg',\n backdrop: 'static'\n });\n\n this.loginControl = modalRef.componentInstance as LoginComponent;\n this.loginControl.isModal = true;\n\n this.loginControl.modalClosedCallback = () => modalRef.close();\n\n modalRef.shown.subscribe(() => {\n this.alertService.showStickyMessage(this.gT('app.alerts.SessionExpired'),\n this.gT('app.alerts.SessionExpiredLoginAgain'), MessageSeverity.info);\n });\n\n modalRef.hidden.subscribe(() => {\n this.alertService.resetStickyMessage();\n this.loginControl?.reset();\n\n if (this.authService.isSessionExpired) {\n this.alertService.showStickyMessage(this.gT('app.alerts.SessionExpired'),\n this.gT('app.alerts.SessionExpiredLoginToRenewSession'), MessageSeverity.warn);\n }\n });\n }\n\n showDialog(dialog: AlertDialog) {\n alertify.set({\n labels: {\n ok: dialog.okLabel || this.gT('app.alerts.OK'),\n cancel: dialog.cancelLabel || this.gT('app.alerts.Cancel')\n }\n });\n\n switch (dialog.type) {\n case DialogType.alert:\n alertify.alert(dialog.message);\n break;\n case DialogType.confirm:\n alertify.confirm(dialog.message, ok => {\n if (ok) {\n if (dialog.okCallback)\n dialog.okCallback();\n } else {\n if (dialog.cancelCallback) {\n dialog.cancelCallback();\n }\n }\n });\n break;\n case DialogType.prompt:\n alertify.prompt(dialog.message, (ok, val) => {\n if (ok) {\n if (dialog.okCallback)\n dialog.okCallback(val);\n } else {\n if (dialog.cancelCallback) {\n dialog.cancelCallback();\n }\n }\n }, dialog.defaultValue);\n break;\n }\n }\n\n showToast(alert: AlertCommand) {\n if (alert.operation === 'clear') {\n for (const id of this.stickyToasties.slice(0)) {\n this.toastaService.clear(id);\n }\n return;\n }\n\n const toastOptions: ToastOptions = {\n title: alert.message?.summary,\n msg: alert.message?.detail,\n };\n\n if (alert.operation === 'add_sticky') {\n toastOptions.timeout = 0;\n\n toastOptions.onAdd = (toast: ToastData) => {\n this.stickyToasties.push(toast.id);\n };\n\n toastOptions.onRemove = (toast: ToastData) => {\n const index = this.stickyToasties.indexOf(toast.id, 0);\n\n if (index > -1) {\n this.stickyToasties.splice(index, 1);\n }\n\n if (alert.onRemove) {\n alert.onRemove();\n }\n\n toast.onAdd = undefined;\n toast.onRemove = undefined;\n };\n } else {\n toastOptions.timeout = 4000;\n }\n\n switch (alert.message?.severity) {\n case MessageSeverity.default: this.toastaService.default(toastOptions); break;\n case MessageSeverity.info: this.toastaService.info(toastOptions); break;\n case MessageSeverity.success: this.toastaService.success(toastOptions); break;\n case MessageSeverity.error: this.toastaService.error(toastOptions); break;\n case MessageSeverity.warn: this.toastaService.warning(toastOptions); break;\n case MessageSeverity.wait: this.toastaService.wait(toastOptions); break;\n }\n }\n\n logout() {\n this.authService.logout();\n this.authService.redirectLogoutUser();\n }\n\n getYear() {\n return new Date().getUTCFullYear();\n }\n\n get userName(): string {\n return this.authService.currentUser?.userName ?? '';\n }\n\n get fullName(): string {\n return this.authService.currentUser?.fullName ?? '';\n }\n\n get canViewCustomers() {\n return this.accountService.userHasPermission(Permissions.viewUsers); // eg. viewCustomersPermission\n }\n\n get canViewProducts() {\n return this.accountService.userHasPermission(Permissions.viewUsers); // eg. viewProductsPermission\n }\n\n get canViewOrders() {\n return !!true; // eg. viewOrdersPermission\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/about/about.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 12,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 18,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        225,
                        379
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { fadeInOut } from '../../services/animations';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { fadeInOut } from '../../services/animations';\n\n@Component({\n selector: 'app-about',\n templateUrl: './about.component.html',\n styleUrl: './about.component.scss',\n animations: [fadeInOut],\n imports: [TranslateModule]\n})\nexport class AboutComponent {\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/controls/banner-demo.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 11,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 16,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        225,
                        379
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { NgClass } from '@angular/common';\nimport { NgbCarousel, NgbSlide } from '@ng-bootstrap/ng-bootstrap';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component } from '@angular/core';\nimport { NgClass } from '@angular/common';\nimport { NgbCarousel, NgbSlide } from '@ng-bootstrap/ng-bootstrap';\n\n@Component({\n selector: 'app-banner-demo',\n templateUrl: './banner-demo.component.html',\n styleUrl: './banner-demo.component.scss',\n imports: [NgbCarousel, NgbSlide, NgClass]\n})\nexport class BannerDemoComponent {\n\n carouselSlides = [\n {\n img: 'images/demo/banner1.png',\n alt: 'ASP.NET',\n caption: 'Learn how to build ASP.NET apps that can run anywhere',\n class: 'btn btn-outline-info btn-sm',\n link: 'http://go.microsoft.com/fwlink/?LinkID=525028&clcid=0x409'\n },\n {\n img: 'images/demo/banner2.png',\n alt: 'Visual Studio',\n caption: 'One platform for building modern web, native mobile and native desktop applications',\n class: 'btn btn-outline-primary btn-sm',\n link: 'http://angular.dev'\n },\n {\n img: 'images/demo/banner3.png',\n alt: 'Package Management',\n caption: 'Bring in libraries from NuGet and npm, and bundle with angular/cli',\n class: 'btn btn-outline-success btn-sm',\n link: 'http://go.microsoft.com/fwlink/?LinkID=525029&clcid=0x409'\n },\n {\n img: 'images/demo/banner4.png',\n alt: 'Eben Monney',\n caption: 'Follow me on social media for updates and tips on using this startup project',\n class: 'btn btn-outline-secondary btn-sm',\n link: 'https://www.ebenmonney.com/about'\n }\n ];\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/controls/notifications-viewer.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 22,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 27,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        283,
                        1080
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { NgClass } from '@angular/common';\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\nimport { Subscription } from 'rxjs';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { TableColumn, NgxDatatableModule } from '@siemens/ngx-datatable';\n\nimport { AlertService, DialogType, MessageSeverity } from '../../services/alert.service';\nimport { AppTranslationService } from '../../services/app-translation.service';\nimport { NotificationService } from '../../services/notification.service';\nimport { AccountService } from '../../services/account.service';\nimport { Permissions } from '../../models/permission.model';\nimport { Utilities } from '../../services/utilities';\nimport { Notification } from '../../models/notification.model';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component, OnInit, OnDestroy, TemplateRef, inject, input, viewChild } from '@angular/core';\nimport { NgClass } from '@angular/common';\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\nimport { Subscription } from 'rxjs';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { TableColumn, NgxDatatableModule } from '@siemens/ngx-datatable';\n\nimport { AlertService, DialogType, MessageSeverity } from '../../services/alert.service';\nimport { AppTranslationService } from '../../services/app-translation.service';\nimport { NotificationService } from '../../services/notification.service';\nimport { AccountService } from '../../services/account.service';\nimport { Permissions } from '../../models/permission.model';\nimport { Utilities } from '../../services/utilities';\nimport { Notification } from '../../models/notification.model';\n\n@Component({\n selector: 'app-notifications-viewer',\n templateUrl: './notifications-viewer.component.html',\n styleUrl: './notifications-viewer.component.scss',\n imports: [NgxDatatableModule, NgbTooltip, NgClass, TranslateModule]\n})\nexport class NotificationsViewerComponent implements OnInit, OnDestroy {\n private alertService = inject(AlertService);\n private translationService = inject(AppTranslationService);\n private accountService = inject(AccountService);\n private notificationService = inject(NotificationService);\n\n columns: TableColumn[] = [];\n rows: Notification[] = [];\n loadingIndicator = false;\n\n dataLoadingConsecutiveFailurs = 0;\n dataLoadingSubscription: Subscription | undefined;\n\n readonly isViewOnly = input(false);\n readonly verticalScrollbar = input(false);\n\n readonly statusHeaderTemplate = viewChild.required<TemplateRef<unknown>>('statusHeaderTemplate');\n\n readonly statusTemplate = viewChild.required<TemplateRef<unknown>>('statusTemplate');\n\n readonly dateTemplate = viewChild.required<TemplateRef<unknown>>('dateTemplate');\n\n readonly contentHeaderTemplate = viewChild.required<TemplateRef<unknown>>('contentHeaderTemplate');\n\n readonly contenBodytTemplate = viewChild.required<TemplateRef<unknown>>('contenBodytTemplate');\n\n readonly actionsTemplate = viewChild.required<TemplateRef<unknown>>('actionsTemplate');\n\n ngOnInit() {\n if (this.isViewOnly()) {\n this.columns = [\n { prop: 'header', cellTemplate: this.contentHeaderTemplate(), width: 200, resizeable: false, sortable: false, draggable: false },\n ];\n } else {\n const gT = (key: string) => this.translationService.getTranslation(key);\n\n this.columns = [\n { prop: '', name: '', width: 10, headerTemplate: this.statusHeaderTemplate(), cellTemplate: this.statusTemplate(), resizeable: false, canAutoResize: false, sortable: false, draggable: false },\n { prop: 'date', name: gT('notifications.Date'), cellTemplate: this.dateTemplate(), width: 30 },\n { prop: 'body', name: gT('notifications.Notification'), cellTemplate: this.contenBodytTemplate(), width: 500 },\n { name: '', width: 80, cellTemplate: this.actionsTemplate(), resizeable: false, canAutoResize: false, sortable: false, draggable: false }\n ];\n }\n\n this.initDataLoading();\n }\n\n ngOnDestroy() {\n this.dataLoadingSubscription?.unsubscribe();\n }\n\n initDataLoading() {\n const isViewOnly = this.isViewOnly();\n if (isViewOnly && this.notificationService.newNotifications) {\n this.rows = this.processResults(this.notificationService.newNotifications);\n return;\n }\n\n this.loadingIndicator = true;\n\n this.dataLoadingSubscription = (isViewOnly ?\n this.notificationService.getNewNotifications() : this.notificationService.getNewNotificationsPeriodically())\n .subscribe({\n next: notifications => {\n this.loadingIndicator = false;\n this.dataLoadingConsecutiveFailurs = 0;\n\n this.rows = this.processResults(notifications);\n },\n error: error => {\n this.loadingIndicator = false;\n\n this.alertService.showMessage('Load Error', 'Loading new notifications from the server failed!', MessageSeverity.warn);\n this.alertService.logError(error);\n\n if (this.dataLoadingConsecutiveFailurs++ < 5) {\n setTimeout(() => this.initDataLoading(), 5000);\n } else {\n this.alertService.showStickyMessage('Load Error', 'Loading new notifications from the server failed!', MessageSeverity.error);\n }\n }\n });\n }\n\n private processResults(notifications: Notification[]) {\n if (this.isViewOnly()) {\n notifications.sort((a, b) => {\n return b.date.valueOf() - a.date.valueOf();\n });\n }\n\n return notifications;\n }\n\n getPrintedDate(value: Date) {\n if (value) {\n return Utilities.printTimeOnly(value) + ' on ' + Utilities.printDateOnly(value);\n }\n\n return '';\n }\n\n deleteNotification(row: Notification) {\n this.alertService.showDialog(`Are you sure you want to delete the notification \"${row.header}\"?`,\n DialogType.confirm, () => this.deleteNotificationHelper(row));\n }\n\n deleteNotificationHelper(row: Notification) {\n this.alertService.startLoadingMessage('Deleting...');\n this.loadingIndicator = true;\n\n this.notificationService.deleteNotification(row)\n .subscribe({\n next: () => {\n this.alertService.stopLoadingMessage();\n this.loadingIndicator = false;\n\n this.rows = this.rows.filter(item => item.id !== row.id);\n },\n error: error => {\n this.alertService.stopLoadingMessage();\n this.loadingIndicator = false;\n\n this.alertService.showStickyMessage('Delete Error',\n `An error occurred whilst deleting the notification.\\r\\nError: \"${Utilities.getHttpResponseMessage(error)}\"`,\n MessageSeverity.error, error);\n }\n });\n }\n\n togglePin(row: Notification) {\n const pin = !row.isPinned;\n const opText = pin ? 'Pinning' : 'Unpinning';\n\n this.alertService.startLoadingMessage(opText + '...');\n this.loadingIndicator = true;\n\n this.notificationService.pinUnpinNotification(row, pin)\n .subscribe({\n next: () => {\n this.alertService.stopLoadingMessage();\n this.loadingIndicator = false;\n\n row.isPinned = pin;\n },\n error: error => {\n this.alertService.stopLoadingMessage();\n this.loadingIndicator = false;\n\n this.alertService.showStickyMessage(opText + ' Error',\n `An error occurred whilst ${opText} the notification.\\r\\nError: \"${Utilities.getHttpResponseMessage(error)}\"`,\n MessageSeverity.error, error);\n }\n });\n }\n\n get canManageNotifications() {\n return this.accountService.userHasPermission(Permissions.manageRoles); // Todo: Create separate permissions for notifications\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/controls/role-editor.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 20,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 25,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        260,
                        890
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { NgClass } from '@angular/common';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { NgForm, FormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\n\nimport { AlertService, MessageSeverity } from '../../services/alert.service';\nimport { AccountService } from '../../services/account.service';\nimport { Role } from '../../models/role.model';\nimport { Permission, Permissions } from '../../models/permission.model';\nimport { GroupByPipe } from '../../pipes/group-by.pipe';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component, OnInit, inject, output, viewChild } from '@angular/core';\nimport { NgClass } from '@angular/common';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { NgForm, FormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\n\nimport { AlertService, MessageSeverity } from '../../services/alert.service';\nimport { AccountService } from '../../services/account.service';\nimport { Role } from '../../models/role.model';\nimport { Permission, Permissions } from '../../models/permission.model';\nimport { GroupByPipe } from '../../pipes/group-by.pipe';\n\n@Component({\n selector: 'app-role-editor',\n templateUrl: './role-editor.component.html',\n styleUrl: './role-editor.component.scss',\n imports: [FormsModule, NgClass, NgbTooltip, TranslateModule, GroupByPipe]\n})\nexport class RoleEditorComponent implements OnInit {\n private alertService = inject(AlertService);\n private accountService = inject(AccountService);\n\n private isNewRole = false;\n public isSaving = false;\n public showValidationErrors = true;\n public roleEdit = new Role();\n public allPermissions: Permission[] = [];\n public selectedValues: Record<string, boolean> = {};\n private editingRoleName: string | null = null;\n\n public formResetToggle = true;\n\n public changesSavedCallback: (() => void) | undefined;\n public changesFailedCallback: (() => void) | undefined;\n public changesCancelledCallback: (() => void) | undefined;\n\n // Outupt to broadcast this instance so it can be accessible from within ng-bootstrap modal template\n readonly afterOnInit = output<RoleEditorComponent>();\n\n readonly form = viewChild.required<NgForm>('f');\n\n ngOnInit() {\n this.afterOnInit.emit(this);\n }\n\n showErrorAlert(caption: string, message: string) {\n this.alertService.showMessage(caption, message, MessageSeverity.error);\n }\n\n save() {\n this.isSaving = true;\n this.alertService.startLoadingMessage('Saving changes...');\n\n this.roleEdit.permissions = this.getSelectedPermissions();\n\n if (this.isNewRole) {\n this.accountService.newRole(this.roleEdit)\n .subscribe({ next: role => this.saveSuccessHelper(role), error: error => this.saveFailedHelper(error) });\n } else {\n this.accountService.updateRole(this.roleEdit)\n .subscribe({ next: () => this.saveSuccessHelper(), error: error => this.saveFailedHelper(error) });\n }\n }\n\n private saveSuccessHelper(role?: Role) {\n if (role) {\n Object.assign(this.roleEdit, role);\n }\n\n this.isSaving = false;\n this.alertService.stopLoadingMessage();\n this.showValidationErrors = false;\n\n if (this.isNewRole) {\n this.alertService.showMessage('Success', `Role \"${this.roleEdit.name}\" was created successfully`, MessageSeverity.success);\n } else {\n this.alertService.showMessage('Success', `Changes to role \"${this.roleEdit.name}\" was saved successfully`, MessageSeverity.success);\n }\n\n this.roleEdit = new Role();\n this.resetForm();\n\n if (!this.isNewRole && this.accountService.currentUser?.roles.some(r => r === this.editingRoleName)) {\n this.refreshLoggedInUser();\n }\n\n if (this.changesSavedCallback) {\n this.changesSavedCallback();\n }\n }\n\n private refreshLoggedInUser() {\n this.accountService.refreshLoggedInUser()\n .subscribe({\n error: error => {\n this.alertService.resetStickyMessage();\n this.alertService.showStickyMessage('Refresh failed', 'An error occurred whilst refreshing logged in user information from the server', MessageSeverity.error, error);\n }\n });\n }\n\n private saveFailedHelper(error: HttpErrorResponse) {\n this.isSaving = false;\n this.alertService.stopLoadingMessage();\n this.alertService.showStickyMessage('Save Error', 'The below errors occurred whilst saving your changes:', MessageSeverity.error, error);\n this.alertService.showStickyMessage(error, null, MessageSeverity.error);\n\n if (this.changesFailedCallback) {\n this.changesFailedCallback();\n }\n }\n\n cancel() {\n this.roleEdit = new Role();\n\n this.showValidationErrors = false;\n this.resetForm();\n\n this.alertService.showMessage('Cancelled', 'Operation cancelled by user', MessageSeverity.default);\n this.alertService.resetStickyMessage();\n\n if (this.changesCancelledCallback) {\n this.changesCancelledCallback();\n }\n }\n\n selectAll() {\n this.allPermissions.forEach(p => this.selectedValues[p.value] = true);\n }\n\n selectNone() {\n this.allPermissions.forEach(p => this.selectedValues[p.value] = false);\n }\n\n toggleGroup(groupName: string) {\n let firstMemberValue: boolean;\n\n this.allPermissions.forEach(p => {\n if (p.groupName !== groupName) {\n return;\n }\n\n if (firstMemberValue == null) {\n firstMemberValue = this.selectedValues[p.value] === true;\n }\n\n this.selectedValues[p.value] = !firstMemberValue;\n });\n }\n\n private getSelectedPermissions() {\n return this.allPermissions.filter(p => this.selectedValues[p.value] === true);\n }\n\n resetForm(replace = false) {\n if (!replace) {\n this.form().reset();\n } else {\n this.formResetToggle = false;\n\n setTimeout(() => {\n this.formResetToggle = true;\n });\n }\n }\n\n newRole(allPermissions: Permission[]) {\n this.isNewRole = true;\n this.showValidationErrors = true;\n\n this.editingRoleName = null;\n this.allPermissions = allPermissions;\n this.selectedValues = {};\n this.roleEdit = new Role();\n\n return this.roleEdit;\n }\n\n editRole(role: Role, allPermissions: Permission[]) {\n if (role) {\n this.isNewRole = false;\n this.showValidationErrors = true;\n\n this.editingRoleName = role.name;\n this.allPermissions = allPermissions;\n this.selectedValues = {};\n role.permissions.forEach(p => this.selectedValues[p.value] = true);\n this.roleEdit = new Role();\n Object.assign(this.roleEdit, role);\n\n return this.roleEdit;\n } else {\n return this.newRole(allPermissions);\n }\n }\n\n get canManageRoles() {\n return this.accountService.userHasPermission(Permissions.manageRoles);\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/controls/roles-management.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 25,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 30,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        265,
                        1080
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { TableColumn, NgxDatatableModule } from '@siemens/ngx-datatable';\n\nimport { AlertService, DialogType, MessageSeverity } from '../../services/alert.service';\nimport { AppTranslationService } from '../../services/app-translation.service';\nimport { AccountService } from '../../services/account.service';\nimport { Utilities } from '../../services/utilities';\nimport { Role } from '../../models/role.model';\nimport { Permission, Permissions } from '../../models/permission.model';\nimport { RoleEditorComponent } from './role-editor.component';\nimport { SearchBoxComponent } from './search-box.component';\n\ninterface RoleIndex extends Role {\n index: number;\n}\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component, OnInit, TemplateRef, inject, viewChild } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { TableColumn, NgxDatatableModule } from '@siemens/ngx-datatable';\n\nimport { AlertService, DialogType, MessageSeverity } from '../../services/alert.service';\nimport { AppTranslationService } from '../../services/app-translation.service';\nimport { AccountService } from '../../services/account.service';\nimport { Utilities } from '../../services/utilities';\nimport { Role } from '../../models/role.model';\nimport { Permission, Permissions } from '../../models/permission.model';\nimport { RoleEditorComponent } from './role-editor.component';\nimport { SearchBoxComponent } from './search-box.component';\n\ninterface RoleIndex extends Role {\n index: number;\n}\n\n@Component({\n selector: 'app-roles-management',\n templateUrl: './roles-management.component.html',\n styleUrl: './roles-management.component.scss',\n imports: [SearchBoxComponent, NgxDatatableModule, RoleEditorComponent, TranslateModule]\n})\nexport class RolesManagementComponent implements OnInit {\n private alertService = inject(AlertService);\n private translationService = inject(AppTranslationService);\n private accountService = inject(AccountService);\n private modalService = inject(NgbModal);\n\n columns: TableColumn[] = [];\n rows: Role[] = [];\n rowsCache: Role[] = [];\n allPermissions: Permission[] = [];\n editedRole: Role | null = null;\n sourceRole: Role | null = null;\n editingRoleName: { name: string } | null = null;\n loadingIndicator = false;\n\n readonly indexTemplate = viewChild.required<TemplateRef<unknown>>('indexTemplate');\n\n readonly actionsTemplate = viewChild.required<TemplateRef<unknown>>('actionsTemplate');\n\n readonly editorModalTemplate = viewChild.required<TemplateRef<unknown>>('editorModal');\n\n roleEditor: RoleEditorComponent | null = null;\n\n ngOnInit() {\n const gT = (key: string) => this.translationService.getTranslation(key);\n\n this.columns = [\n { prop: 'index', name: '#', width: 50, cellTemplate: this.indexTemplate(), canAutoResize: false },\n { prop: 'name', name: gT('roles.management.Name'), width: 180 },\n { prop: 'description', name: gT('roles.management.Description'), width: 320 },\n { prop: 'usersCount', name: gT('roles.management.Users'), width: 50 },\n { name: '', width: 160, cellTemplate: this.actionsTemplate(), resizeable: false, canAutoResize: false, sortable: false, draggable: false }\n ];\n\n this.loadData();\n }\n\n setRoleEditorComponent(roleEditor: RoleEditorComponent) {\n this.roleEditor = roleEditor;\n\n if (this.sourceRole == null)\n this.editedRole = this.roleEditor.newRole(this.allPermissions);\n else\n this.editedRole = this.roleEditor.editRole(this.sourceRole, this.allPermissions);\n }\n\n addNewRoleToList() {\n if (this.sourceRole) {\n Object.assign(this.sourceRole, this.editedRole);\n\n let sourceIndex = this.rowsCache.indexOf(this.sourceRole, 0);\n if (sourceIndex > -1) {\n Utilities.moveArrayItem(this.rowsCache, sourceIndex, 0);\n }\n\n sourceIndex = this.rows.indexOf(this.sourceRole, 0);\n if (sourceIndex > -1) {\n Utilities.moveArrayItem(this.rows, sourceIndex, 0);\n }\n\n this.editedRole = null;\n this.sourceRole = null;\n } else {\n const role = new Role();\n Object.assign(role, this.editedRole);\n this.editedRole = null;\n\n let maxIndex = 0;\n for (const r of this.rowsCache) {\n if ((r as RoleIndex).index > maxIndex) {\n maxIndex = (r as RoleIndex).index;\n }\n }\n\n (role as RoleIndex).index = maxIndex + 1;\n\n this.rowsCache.splice(0, 0, role);\n this.rows.splice(0, 0, role);\n this.rows = [...this.rows];\n }\n }\n\n loadData() {\n this.alertService.startLoadingMessage();\n this.loadingIndicator = true;\n\n this.accountService.getRolesAndPermissions()\n .subscribe({\n next: results => {\n this.alertService.stopLoadingMessage();\n this.loadingIndicator = false;\n\n const roles = results[0];\n const permissions = results[1];\n\n roles.forEach((role, index) => {\n (role as RoleIndex).index = index + 1;\n });\n\n this.rowsCache = [...roles];\n this.rows = roles;\n\n this.allPermissions = permissions;\n },\n error: error => {\n this.alertService.stopLoadingMessage();\n this.loadingIndicator = false;\n\n this.alertService.showStickyMessage('Load Error',\n `Unable to retrieve roles from the server.\\r\\nError: \"${Utilities.getHttpResponseMessage(error)}\"`,\n MessageSeverity.error, error);\n }\n });\n }\n\n onSearchChanged(value: string) {\n this.rows = this.rowsCache.filter(r => Utilities.searchArray(value, false, r.name, r.description));\n }\n\n newRole() {\n this.editingRoleName = null;\n this.sourceRole = null;\n\n this.openRoleEditor();\n }\n\n editRole(row: Role) {\n this.editingRoleName = { name: row.name };\n this.sourceRole = row;\n\n this.openRoleEditor();\n }\n\n openRoleEditor() {\n const modalRef = this.modalService.open(this.editorModalTemplate(), {\n size: 'lg',\n backdrop: 'static'\n });\n\n modalRef.shown.subscribe(() => {\n if (!this.roleEditor)\n throw new Error('The role editor component was not set.');\n\n this.roleEditor.changesSavedCallback = () => {\n this.addNewRoleToList();\n modalRef.close();\n };\n\n this.roleEditor.changesCancelledCallback = () => {\n this.editedRole = null;\n this.sourceRole = null;\n modalRef.close();\n };\n });\n\n modalRef.hidden.subscribe(() => {\n if (!this.roleEditor)\n throw new Error('The role editor component was not set.');\n\n this.editingRoleName = null;\n this.roleEditor.resetForm(true);\n this.roleEditor = null;\n });\n }\n\n deleteRole(row: Role) {\n this.alertService.showDialog(`Are you sure you want to delete the \"${row.name}\" role?`,\n DialogType.confirm, () => this.deleteRoleHelper(row));\n }\n\n deleteRoleHelper(row: Role) {\n this.alertService.startLoadingMessage('Deleting...');\n this.loadingIndicator = true;\n\n this.accountService.deleteRole(row)\n .subscribe({\n next: () => {\n this.alertService.stopLoadingMessage();\n this.loadingIndicator = false;\n\n this.rowsCache = this.rowsCache.filter(item => item !== row);\n this.rows = this.rows.filter(item => item !== row);\n },\n error: error => {\n this.alertService.stopLoadingMessage();\n this.loadingIndicator = false;\n\n this.alertService.showStickyMessage('Delete Error',\n `An error occurred whilst deleting the role.\\r\\nError: \"${Utilities.getHttpResponseMessage(error)}\"`,\n MessageSeverity.error, error);\n }\n });\n }\n\n get canManageRoles() {\n return this.accountService.userHasPermission(Permissions.manageRoles);\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/controls/search-box.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 10,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 15,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        277,
                        364
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component, ElementRef, HostListener, input, output, viewChild } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n selector: 'app-search-box',\n templateUrl: './search-box.component.html',\n styleUrl: './search-box.component.scss',\n imports: [FormsModule]\n})\nexport class SearchBoxComponent {\n readonly placeholder = input('Search...');\n\n readonly searchChange = output<string>();\n\n readonly searchInput = viewChild.required<ElementRef>('searchInput');\n\n onValueChange(value: string) {\n setTimeout(() => this.searchChange.emit(value));\n }\n\n @HostListener('keydown.escape')\n clear() {\n const searchInput = this.searchInput();\n\n searchInput.nativeElement.value = '';\n this.onValueChange(searchInput.nativeElement.value);\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/controls/statistics-demo.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 16,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 21,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        263,
                        695
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { AlertService, DialogType, MessageSeverity } from '../../services/alert.service';\nimport { BaseChartDirective } from 'ng2-charts';\nimport { ChartEvent, ChartType } from 'chart.js';\nimport { NgbDropdown, NgbDropdownToggle, NgbDropdownMenu, NgbDropdownButtonItem, NgbDropdownItem }\n from '@ng-bootstrap/ng-bootstrap';\n\ninterface ChartEventArgs { event: ChartEvent; active: object[] }\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@typescript-eslint/no-unused-vars",
                "message": "Definition for rule '@typescript-eslint/no-unused-vars' was not found.",
                "line": 123,
                "column": 3,
                "endLine": 123,
                "endColumn": 64,
                "severity": 2,
                "nodeType": null
              },
              {
                "ruleId": "@typescript-eslint/no-unused-vars",
                "message": "Definition for rule '@typescript-eslint/no-unused-vars' was not found.",
                "line": 128,
                "column": 3,
                "endLine": 128,
                "endColumn": 64,
                "severity": 2,
                "nodeType": null
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component, OnInit, OnDestroy, inject, viewChild } from '@angular/core';\nimport { AlertService, DialogType, MessageSeverity } from '../../services/alert.service';\nimport { BaseChartDirective } from 'ng2-charts';\nimport { ChartEvent, ChartType } from 'chart.js';\nimport { NgbDropdown, NgbDropdownToggle, NgbDropdownMenu, NgbDropdownButtonItem, NgbDropdownItem }\n from '@ng-bootstrap/ng-bootstrap';\n\ninterface ChartEventArgs { event: ChartEvent; active: object[] }\n\n@Component({\n selector: 'app-statistics-demo',\n templateUrl: './statistics-demo.component.html',\n styleUrl: './statistics-demo.component.scss',\n imports: [BaseChartDirective, NgbDropdown, NgbDropdownToggle, NgbDropdownMenu, NgbDropdownButtonItem, NgbDropdownItem]\n})\nexport class StatisticsDemoComponent implements OnInit, OnDestroy {\n private alertService = inject(AlertService);\n\n chartOptions: object | undefined;\n chartType: ChartType = 'line';\n chartLabels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'];\n chartData = [\n {\n data: [65, 59, 80, 81, 56, 55],\n label: 'Series A',\n fill: 'origin',\n },\n {\n data: [28, 48, 40, 19, 86, 27],\n label: 'Series B',\n fill: 'origin',\n },\n {\n data: [18, 48, 77, 9, 100, 27],\n label: 'Series C',\n fill: 'origin',\n }\n ];\n\n timerReference: ReturnType<typeof setInterval> | undefined;\n\n readonly chart = viewChild.required(BaseChartDirective);\n\n ngOnInit() {\n this.refreshChartOptions();\n this.timerReference = setInterval(() => this.randomize(), 5000);\n }\n\n ngOnDestroy() {\n clearInterval(this.timerReference);\n }\n\n refreshChartOptions() {\n const baseOptions = {\n responsive: true,\n maintainAspectRatio: false,\n title: {\n display: false,\n fontSize: 16,\n text: 'Important Stuff'\n }\n };\n\n if (this.chartType != 'line') {\n this.chartOptions = baseOptions;\n }\n else {\n const lineChartOptions = {\n elements: {\n line: {\n tension: 0.5\n }\n }\n };\n\n this.chartOptions = { ...baseOptions, ...lineChartOptions };\n }\n }\n\n randomize(): void {\n for (const series of this.chartData) {\n for (let j = 0; j < series.data.length; j++) {\n series.data[j] = Math.floor((Math.random() angular.json aspnetcore-https.js eslint.config.js karma.conf.js lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules nuget.config package.json package-lock.json public quickapp.client.esproj QuickApp.report.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json 100) + 1);\n }\n }\n\n this.chart().update();\n }\n\n changeChartType(type: ChartType) {\n this.chartType = type;\n this.refreshChartOptions();\n }\n\n showMessage(msg: string): void {\n this.alertService.showMessage('Demo', msg, MessageSeverity.info);\n }\n\n showDialog(msg: string): void {\n this.alertService.showDialog(msg, DialogType.prompt, (val) => this.configure(true, val), () => this.configure(false));\n }\n\n configure(response: boolean, value?: string) {\n if (response) {\n this.alertService.showStickyMessage('Simulating...', '', MessageSeverity.wait);\n\n setTimeout(() => {\n this.alertService.resetStickyMessage();\n this.alertService.showMessage('Demo', `Your settings was successfully configured to \"${value}\"`, MessageSeverity.success);\n }, 2000);\n } else {\n this.alertService.showMessage('Demo', 'Operation cancelled by user', MessageSeverity.default);\n }\n }\n\n\n // eslint-disable-next-line @typescript-eslint/no-unused-vars\n chartHovered(e: ChartEventArgs): void {\n // Demo\n }\n\n // eslint-disable-next-line @typescript-eslint/no-unused-vars\n chartClicked(e: Partial<ChartEventArgs>): void {\n // Demo\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/controls/todo-demo.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 30,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 35,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        283,
                        1230
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { NgClass } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { NgbModal, NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\nimport { TableColumn, NgxDatatableModule } from '@siemens/ngx-datatable';\n\nimport { AuthService } from '../../services/auth.service';\nimport { AlertService, MessageSeverity, DialogType } from '../../services/alert.service';\nimport { AppTranslationService } from '../../services/app-translation.service';\nimport { LocalStoreManager } from '../../services/local-store-manager.service';\nimport { Utilities } from '../../services/utilities';\nimport { SearchBoxComponent } from './search-box.component';\nimport { AutofocusDirective } from '../../directives/autofocus.directive';\n\ninterface Todo {\n $$index?: number;\n completed: boolean;\n important: boolean\n name: string;\n description: string\n}\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component, OnInit, OnDestroy, TemplateRef, inject, input, viewChild } from '@angular/core';\nimport { NgClass } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { NgbModal, NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\nimport { TableColumn, NgxDatatableModule } from '@siemens/ngx-datatable';\n\nimport { AuthService } from '../../services/auth.service';\nimport { AlertService, MessageSeverity, DialogType } from '../../services/alert.service';\nimport { AppTranslationService } from '../../services/app-translation.service';\nimport { LocalStoreManager } from '../../services/local-store-manager.service';\nimport { Utilities } from '../../services/utilities';\nimport { SearchBoxComponent } from './search-box.component';\nimport { AutofocusDirective } from '../../directives/autofocus.directive';\n\ninterface Todo {\n $$index?: number;\n completed: boolean;\n important: boolean\n name: string;\n description: string\n}\n\n@Component({\n selector: 'app-todo-demo',\n templateUrl: './todo-demo.component.html',\n styleUrl: './todo-demo.component.scss',\n imports: [SearchBoxComponent, NgxDatatableModule, FormsModule, AutofocusDirective, NgbTooltip, NgClass, TranslateModule]\n})\nexport class TodoDemoComponent implements OnInit, OnDestroy {\n private alertService = inject(AlertService);\n private translationService = inject(AppTranslationService);\n private localStorage = inject(LocalStoreManager);\n private authService = inject(AuthService);\n private modalService = inject(NgbModal);\n\n public static readonly DBKeyTodoDemo = 'todo-demo.todo_list';\n\n columns: TableColumn[] = [];\n rows: Todo[] = [];\n rowsCache: Todo[] = [];\n editing: Record<string, boolean> = {};\n taskEdit: Partial<Todo> = {};\n isDataLoaded = false;\n loadingIndicator = true;\n formResetToggle = true;\n private _currentUserId: string | undefined;\n private _hideCompletedTasks = false;\n\n get currentUserId() {\n if (this.authService.currentUser) {\n this._currentUserId = this.authService.currentUser.id;\n }\n\n return this._currentUserId;\n }\n\n set hideCompletedTasks(value: boolean) {\n if (value) {\n this.rows = this.rowsCache.filter(r => !r.completed);\n } else {\n this.rows = [...this.rowsCache];\n }\n\n this._hideCompletedTasks = value;\n }\n get hideCompletedTasks() {\n return this._hideCompletedTasks;\n }\n\n readonly verticalScrollbar = input(false);\n\n readonly statusHeaderTemplate = viewChild.required<TemplateRef<unknown>>('statusHeaderTemplate');\n\n readonly statusTemplate = viewChild.required<TemplateRef<unknown>>('statusTemplate');\n\n readonly nameTemplate = viewChild.required<TemplateRef<unknown>>('nameTemplate');\n\n readonly descriptionTemplate = viewChild.required<TemplateRef<unknown>>('descriptionTemplate');\n\n readonly actionsTemplate = viewChild.required<TemplateRef<unknown>>('actionsTemplate');\n\n readonly editorModalTemplate = viewChild.required<TemplateRef<unknown>>('editorModal');\n\n ngOnInit() {\n this.loadingIndicator = true;\n\n this.fetch(data => {\n this.refreshDataIndexes(data);\n this.rows = data;\n this.rowsCache = [...data];\n this.isDataLoaded = true;\n\n setTimeout(() => { this.loadingIndicator = false; }, 1500);\n });\n\n const gT = (key: string) => this.translationService.getTranslation(key);\n\n this.columns = [\n {\n prop: 'completed',\n name: '',\n width: 30,\n headerTemplate: this.statusHeaderTemplate(),\n cellTemplate: this.statusTemplate(),\n resizeable: false,\n canAutoResize: false,\n sortable: false,\n draggable: false\n },\n {\n prop: 'name',\n name: gT('todoDemo.management.Task'),\n width: 100,\n cellTemplate: this.nameTemplate()\n },\n {\n prop: 'description',\n name: gT('todoDemo.management.Description'),\n width: 300,\n cellTemplate: this.descriptionTemplate()\n },\n {\n name: '',\n width: 80,\n cellTemplate: this.actionsTemplate(),\n resizeable: false,\n canAutoResize: false,\n sortable: false,\n draggable: false\n }\n ];\n }\n\n ngOnDestroy() {\n this.saveToDisk();\n }\n\n fetch(callback: (data: Todo[]) => void) {\n let data = this.getFromDisk();\n\n if (data == null) {\n setTimeout(() => {\n data = this.getFromDisk();\n\n if (data == null) {\n data = [\n {\n completed: true,\n important: true,\n name: 'Create visual studio extension',\n description: 'Create a visual studio VSIX extension package that will add this project as an aspnet-core project template'\n },\n {\n completed: false,\n important: true,\n name: 'Do a quick how-to writeup',\n description: ''\n },\n {\n completed: false,\n important: false,\n name: 'Create aspnet-core/Angular tutorials based on this project',\n description: 'Create tutorials (blog/video/youtube) on how to build applications (full stack)' +\n ' using aspnet-core/Angular. The tutorial will focus on getting productive with the technology right' +\n ' away rather than the details on how and why they work so audience can get onboard quickly.'\n },\n ];\n }\n\n callback(data);\n }, 1000);\n } else {\n callback(data);\n }\n }\n\n refreshDataIndexes(data: Todo[]) {\n let index = 0;\n\n for (const i of data) {\n i.$$index = index++;\n }\n }\n\n onSearchChanged(value: string) {\n this.rows = this.rowsCache.filter(r =>\n Utilities.searchArray(value, false, r.name, r.description) ||\n value === 'important' && r.important ||\n value === 'not important' && !r.important);\n }\n\n showErrorAlert(caption: string, message: string) {\n this.alertService.showMessage(caption, message, MessageSeverity.error);\n }\n\n addTask() {\n this.formResetToggle = false;\n\n setTimeout(() => {\n this.formResetToggle = true;\n\n this.taskEdit = {};\n this.modalService.open(this.editorModalTemplate());\n });\n }\n\n save() {\n this.rowsCache.splice(0, 0, this.taskEdit as Todo);\n this.rows.splice(0, 0, this.taskEdit as Todo);\n this.refreshDataIndexes(this.rowsCache);\n this.rows = [...this.rows];\n\n this.saveToDisk();\n return true;\n }\n\n updateValue(event: Event, cell: 'name' | 'description', row: Todo) {\n this.editing[row.$$index + '-' + cell] = false;\n row[cell] = (event.target as HTMLInputElement).value;\n this.rows = [...this.rows];\n\n this.saveToDisk();\n }\n\n delete(row: Todo) {\n this.alertService.showDialog('Are you sure you want to delete the task?', DialogType.confirm, () => this.deleteHelper(row));\n }\n\n deleteHelper(row: Todo) {\n this.rowsCache = this.rowsCache.filter(item => item !== row);\n this.rows = this.rows.filter(item => item !== row);\n\n this.saveToDisk();\n }\n\n getFromDisk() {\n return this.localStorage.getDataObject<Todo[]>(`${TodoDemoComponent.DBKeyTodoDemo}:${this.currentUserId}`);\n }\n\n saveToDisk() {\n if (this.isDataLoaded) {\n this.localStorage.saveSyncedSessionData(this.rowsCache, `${TodoDemoComponent.DBKeyTodoDemo}:${this.currentUserId}`);\n }\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/controls/user-info.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 24,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 32,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        274,
                        1209
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { NgModel, NgForm, FormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { NgSelectComponent, NgLabelTemplateDirective, NgOptionTemplateDirective } from '@ng-select/ng-select';\n\nimport { AlertService, MessageSeverity } from '../../services/alert.service';\nimport { AccountService } from '../../services/account.service';\nimport { Utilities } from '../../services/utilities';\nimport { User } from '../../models/user.model';\nimport { UserEdit } from '../../models/user-edit.model';\nimport { Role } from '../../models/role.model';\nimport { Permissions } from '../../models/permission.model';\nimport { NgClass } from '@angular/common';\nimport { AutofocusDirective } from '../../directives/autofocus.directive';\nimport { EqualValidator } from '../../directives/equal-validator.directive';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component, OnInit, Input, inject, input, output, viewChild } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { NgModel, NgForm, FormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { NgSelectComponent, NgLabelTemplateDirective, NgOptionTemplateDirective } from '@ng-select/ng-select';\n\nimport { AlertService, MessageSeverity } from '../../services/alert.service';\nimport { AccountService } from '../../services/account.service';\nimport { Utilities } from '../../services/utilities';\nimport { User } from '../../models/user.model';\nimport { UserEdit } from '../../models/user-edit.model';\nimport { Role } from '../../models/role.model';\nimport { Permissions } from '../../models/permission.model';\nimport { NgClass } from '@angular/common';\nimport { AutofocusDirective } from '../../directives/autofocus.directive';\nimport { EqualValidator } from '../../directives/equal-validator.directive';\n\n@Component({\n selector: 'app-user-info',\n templateUrl: './user-info.component.html',\n styleUrl: './user-info.component.scss',\n imports: [\n FormsModule, AutofocusDirective, NgClass, EqualValidator, NgSelectComponent, NgLabelTemplateDirective,\n NgOptionTemplateDirective, TranslateModule\n ]\n})\nexport class UserInfoComponent implements OnInit {\n private alertService = inject(AlertService);\n private accountService = inject(AccountService);\n\n public isEditMode = false;\n public isNewUser = false;\n public isSaving = false;\n public isChangePassword = false;\n public isEditingSelf = false;\n public showValidationErrors = false;\n public uniqueId = Utilities.uniqueId();\n public user = new User();\n public userEdit = new UserEdit();\n public allRoles: Role[] = [];\n\n public formResetToggle = true;\n\n public changesSavedCallback: (() => void) | undefined;\n public changesFailedCallback: (() => void) | undefined;\n public changesCancelledCallback: (() => void) | undefined;\n\n readonly isViewOnly = input(false);\n @Input() isGeneralEditor = false;\n\n // Outupt to broadcast this instance so it can be accessible from within ng-bootstrap modal template\n readonly afterOnInit = output<UserInfoComponent>();\n\n readonly form = viewChild<NgForm>('f');\n\n readonly userName = viewChild<NgModel>('userName');\n\n readonly userPassword = viewChild<NgModel>('userPassword');\n\n readonly email = viewChild<NgModel>('email');\n\n readonly currentPassword = viewChild<NgModel>('currentPassword');\n\n readonly newPassword = viewChild<NgModel>('newPassword');\n\n readonly confirmPassword = viewChild<NgModel>('confirmPassword');\n\n readonly roles = viewChild<NgModel>('roles');\n\n ngOnInit() {\n if (!this.isGeneralEditor) {\n this.loadCurrentUserData();\n }\n\n this.afterOnInit.emit(this);\n }\n\n private loadCurrentUserData() {\n this.alertService.startLoadingMessage();\n\n if (this.canViewAllRoles) {\n this.accountService.getUserAndRoles()\n .subscribe({\n next: results => this.onCurrentUserDataLoadSuccessful(results[0], results[1]),\n error: error => this.onCurrentUserDataLoadFailed(error)\n });\n } else {\n this.accountService.getUser()\n .subscribe({\n next: user => this.onCurrentUserDataLoadSuccessful(user, user.roles.map(role => new Role(role))),\n error: error => this.onCurrentUserDataLoadFailed(error)\n });\n }\n }\n\n private onCurrentUserDataLoadSuccessful(user: User, roles: Role[]) {\n this.alertService.stopLoadingMessage();\n this.user = user;\n this.allRoles = roles;\n }\n\n private onCurrentUserDataLoadFailed(error: HttpErrorResponse) {\n this.alertService.stopLoadingMessage();\n this.alertService.showStickyMessage('Load Error',\n `Unable to retrieve user data from the server.\\r\\nError: \"${Utilities.getHttpResponseMessage(error)}\"`,\n MessageSeverity.error, error);\n\n this.user = new User();\n }\n\n getRoleByName(name: string) {\n return this.allRoles.find((r) => r.name === name);\n }\n\n showErrorAlert(caption: string, message: string) {\n this.alertService.showMessage(caption, message, MessageSeverity.error);\n }\n\n deletePasswordFromUser(user: UserEdit | User) {\n const userEdit = user as UserEdit;\n\n delete userEdit.currentPassword;\n delete userEdit.newPassword;\n delete userEdit.confirmPassword;\n }\n\n edit() {\n if (!this.isGeneralEditor) {\n this.isEditingSelf = true;\n this.userEdit = new UserEdit();\n Object.assign(this.userEdit, this.user);\n } else {\n if (!this.userEdit) {\n this.userEdit = new UserEdit();\n }\n\n this.isEditingSelf = this.accountService.currentUser ? this.userEdit.id === this.accountService.currentUser.id : false;\n }\n\n this.isEditMode = true;\n this.showValidationErrors = true;\n this.isChangePassword = false;\n }\n\n showValidationAlerts() {\n if (!this.userName()?.valid)\n this.showErrorAlert('User name is required', 'Please enter a user name (minimum of 2 and maximum of 200 characters)');\n\n if (this.userPassword() && !this.userPassword()?.valid)\n this.showErrorAlert('Password is required', 'Please enter the current password');\n\n if (this.email()?.errors?.['required'])\n this.showErrorAlert('Email is required', 'Please enter an email address (maximum of 200 characters)');\n\n if (this.email()?.errors?.['pattern'])\n this.showErrorAlert('Invalid Email', 'Please enter a valid email address');\n\n if (this.isChangePassword && this.isEditingSelf && !this.currentPassword()?.valid)\n this.showErrorAlert('Current password is required', 'Please enter the current password');\n\n if ((this.isChangePassword || this.isNewUser) && !this.newPassword()?.valid)\n this.showErrorAlert('New password is required', 'Please enter the new password (minimum of 6 characters)');\n\n if ((this.isChangePassword || this.isNewUser) && this.newPassword()?.valid && this.confirmPassword()?.errors?.['required'])\n this.showErrorAlert('Confirmation password is required', 'Please enter the confirmation password');\n\n if ((this.isChangePassword || this.isNewUser) && this.newPassword()?.valid && this.confirmPassword()?.errors?.['validateEqual'])\n this.showErrorAlert('Passwword mismatch', 'New password and confirmation password do not match');\n\n if (this.canAssignRoles && !this.roles()?.valid)\n this.showErrorAlert('Roles is required', 'Please select a minimum of 1 role');\n }\n\n save() {\n this.isSaving = true;\n this.alertService.startLoadingMessage('Saving changes...');\n\n if (this.isNewUser) {\n this.accountService.newUser(this.userEdit)\n .subscribe({\n next: user => this.saveSuccessHelper(user),\n error: error => this.saveFailedHelper(error)\n });\n } else {\n this.accountService.updateUser(this.userEdit)\n .subscribe({\n next: () => this.saveSuccessHelper(),\n error: error => this.saveFailedHelper(error)\n });\n }\n }\n\n private saveSuccessHelper(user?: User) {\n this.testIsRoleUserCountChanged(this.user, this.userEdit);\n\n if (user) {\n Object.assign(this.userEdit, user);\n }\n\n this.isSaving = false;\n this.alertService.stopLoadingMessage();\n this.isChangePassword = false;\n this.showValidationErrors = false;\n\n this.deletePasswordFromUser(this.userEdit);\n Object.assign(this.user, this.userEdit);\n this.userEdit = new UserEdit();\n this.resetForm();\n\n if (this.isGeneralEditor) {\n if (this.isNewUser) {\n this.alertService.showMessage('Success', `User \"${this.user.userName}\" was created successfully`, MessageSeverity.success);\n } else if (!this.isEditingSelf) {\n this.alertService.showMessage('Success', `Changes to user \"${this.user.userName}\" was saved successfully`, MessageSeverity.success);\n }\n }\n\n if (this.isEditingSelf) {\n this.alertService.showMessage('Success', 'Changes to your User Profile was saved successfully', MessageSeverity.success);\n this.refreshLoggedInUser();\n }\n\n this.isEditMode = false;\n\n if (this.changesSavedCallback) {\n this.changesSavedCallback();\n }\n }\n\n private saveFailedHelper(error: HttpErrorResponse) {\n this.isSaving = false;\n this.alertService.stopLoadingMessage();\n this.alertService.showStickyMessage('Save Error', 'The below errors occurred whilst saving your changes:', MessageSeverity.error, error);\n this.alertService.showStickyMessage(error, null, MessageSeverity.error);\n\n if (this.changesFailedCallback) {\n this.changesFailedCallback();\n }\n }\n\n private testIsRoleUserCountChanged(currentUser: User, editedUser: User) {\n const rolesAdded = this.isNewUser ? editedUser.roles : editedUser.roles.filter(role => currentUser.roles.indexOf(role) === -1);\n const rolesRemoved = this.isNewUser ? [] : currentUser.roles.filter(role => editedUser.roles.indexOf(role) === -1);\n\n const modifiedRoles = rolesAdded.concat(rolesRemoved);\n\n if (modifiedRoles.length) {\n setTimeout(() => this.accountService.onRolesUserCountChanged(modifiedRoles));\n }\n }\n\n cancel() {\n if (this.isGeneralEditor) {\n this.userEdit = this.user = new UserEdit();\n } else {\n this.userEdit = new UserEdit();\n }\n\n this.showValidationErrors = false;\n this.resetForm();\n\n this.alertService.showMessage('Cancelled', 'Operation cancelled by user', MessageSeverity.default);\n this.alertService.resetStickyMessage();\n\n if (!this.isGeneralEditor) {\n this.isEditMode = false;\n }\n\n if (this.changesCancelledCallback) {\n this.changesCancelledCallback();\n }\n }\n\n close() {\n this.userEdit = this.user = new UserEdit();\n this.showValidationErrors = false;\n this.resetForm();\n this.isEditMode = false;\n\n if (this.changesSavedCallback) {\n this.changesSavedCallback();\n }\n }\n\n private refreshLoggedInUser() {\n this.accountService.refreshLoggedInUser()\n .subscribe({\n next: () => {\n this.loadCurrentUserData();\n },\n error: error => {\n this.alertService.resetStickyMessage();\n this.alertService.showStickyMessage('Refresh failed',\n 'An error occurred whilst refreshing logged in user information from the server', MessageSeverity.error, error);\n }\n });\n }\n\n changePassword() {\n this.isChangePassword = true;\n }\n\n unlockUser() {\n this.isSaving = true;\n this.alertService.startLoadingMessage('Unblocking user...');\n\n this.accountService.unblockUser(this.userEdit.id)\n .subscribe({\n next: () => {\n this.isSaving = false;\n this.userEdit.isLockedOut = false;\n this.alertService.stopLoadingMessage();\n this.alertService.showMessage('Success', 'User has been successfully unblocked', MessageSeverity.success);\n },\n error: error => {\n this.isSaving = false;\n this.alertService.stopLoadingMessage();\n this.alertService.showStickyMessage('Unblock Error',\n 'The below errors occurred whilst unblocking the user:', MessageSeverity.error, error);\n this.alertService.showStickyMessage(error, null, MessageSeverity.error);\n }\n });\n }\n\n resetForm(replace = false) {\n this.isChangePassword = false;\n\n if (!replace) {\n this.form()?.reset();\n } else {\n this.formResetToggle = false;\n\n setTimeout(() => {\n this.formResetToggle = true;\n });\n }\n }\n\n newUser(allRoles: Role[]) {\n this.isGeneralEditor = true;\n this.isNewUser = true;\n\n this.allRoles = [...allRoles];\n this.user = this.userEdit = new UserEdit();\n this.userEdit.isEnabled = true;\n this.edit();\n\n return this.userEdit;\n }\n\n editUser(user: User, allRoles: Role[]) {\n if (user) {\n this.isGeneralEditor = true;\n this.isNewUser = false;\n\n this.setRoles(user, allRoles);\n this.user = new User();\n this.userEdit = new UserEdit();\n Object.assign(this.user, user);\n Object.assign(this.userEdit, user);\n this.edit();\n\n return this.userEdit;\n } else {\n return this.newUser(allRoles);\n }\n }\n\n displayUser(user: User, allRoles?: Role[]) {\n this.user = new User();\n Object.assign(this.user, user);\n this.deletePasswordFromUser(this.user);\n this.setRoles(user, allRoles);\n\n this.isEditMode = false;\n }\n\n private setRoles(user: User, allRoles?: Role[]) {\n this.allRoles = allRoles ? [...allRoles] : [];\n\n for (const role of user.roles) {\n if (!this.allRoles.some(r => r.name === role)) {\n this.allRoles.unshift(new Role(role));\n }\n }\n }\n\n get canViewAllRoles() {\n return this.accountService.userHasPermission(Permissions.viewRoles);\n }\n\n get canAssignRoles() {\n return this.accountService.userHasPermission(Permissions.assignRoles);\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/controls/user-preferences.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 19,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 24,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        233,
                        863
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { NgSelectComponent, NgOptionComponent } from '@ng-select/ng-select';\n\nimport { AlertService, DialogType, MessageSeverity } from '../../services/alert.service';\nimport { ConfigurationService } from '../../services/configuration.service';\nimport { AccountService } from '../../services/account.service';\nimport { ThemeManager } from '../../services/theme-manager';\nimport { Utilities } from '../../services/utilities';\nimport { Permissions } from '../../models/permission.model';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component, inject } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { NgSelectComponent, NgOptionComponent } from '@ng-select/ng-select';\n\nimport { AlertService, DialogType, MessageSeverity } from '../../services/alert.service';\nimport { ConfigurationService } from '../../services/configuration.service';\nimport { AccountService } from '../../services/account.service';\nimport { ThemeManager } from '../../services/theme-manager';\nimport { Utilities } from '../../services/utilities';\nimport { Permissions } from '../../models/permission.model';\n\n@Component({\n selector: 'app-user-preferences',\n templateUrl: './user-preferences.component.html',\n styleUrl: './user-preferences.component.scss',\n imports: [NgSelectComponent, FormsModule, NgOptionComponent, TranslateModule]\n})\nexport class UserPreferencesComponent {\n private alertService = inject(AlertService);\n private accountService = inject(AccountService);\n themeManager = inject(ThemeManager);\n configurations = inject(ConfigurationService);\n\n reloadFromServer() {\n this.alertService.startLoadingMessage();\n\n this.accountService.getUserPreferences()\n .subscribe({\n next: results => {\n this.alertService.stopLoadingMessage();\n\n this.configurations.import(results);\n\n this.alertService.showMessage('Defaults loaded!', '', MessageSeverity.info);\n },\n error: error => {\n this.alertService.stopLoadingMessage();\n this.alertService.showStickyMessage('Load Error',\n `Unable to retrieve user preferences from the server.\\r\\nError: \"${Utilities.getHttpResponseMessage(error)}\"`,\n MessageSeverity.error, error);\n }\n });\n }\n\n setAsDefault() {\n this.alertService.showDialog('Are you sure you want to set the current configuration as your new defaults?', DialogType.confirm,\n () => this.setAsDefaultHelper(),\n () => this.alertService.showMessage('Operation Cancelled!', '', MessageSeverity.default));\n }\n\n setAsDefaultHelper() {\n this.alertService.startLoadingMessage('', 'Saving new defaults');\n\n this.accountService.updateUserPreferences(this.configurations.export())\n .subscribe({\n next: () => {\n this.alertService.stopLoadingMessage();\n this.alertService.showMessage('New Defaults', 'Account defaults updated successfully', MessageSeverity.success);\n },\n error: error => {\n this.alertService.stopLoadingMessage();\n this.alertService.showStickyMessage('Save Error',\n `An error occurred whilst saving configuration defaults.\\r\\nError: \"${Utilities.getHttpResponseMessage(error)}\"`,\n MessageSeverity.error, error);\n }\n });\n }\n\n resetDefault() {\n this.alertService.showDialog('Are you sure you want to reset your defaults?', DialogType.confirm,\n () => this.resetDefaultHelper(),\n () => this.alertService.showMessage('Operation Cancelled!', '', MessageSeverity.default));\n }\n\n resetDefaultHelper() {\n this.alertService.startLoadingMessage('', 'Resetting defaults');\n\n this.accountService.updateUserPreferences(null)\n .subscribe({\n next: () => {\n this.alertService.stopLoadingMessage();\n this.configurations.import(null);\n this.alertService.showMessage('Defaults Reset', 'Account defaults reset completed successfully', MessageSeverity.success);\n },\n error: error => {\n this.alertService.stopLoadingMessage();\n this.alertService.showStickyMessage('Save Error',\n `An error occurred whilst resetting configuration defaults.\\r\\nError: \"${Utilities.getHttpResponseMessage(error)}\"`,\n MessageSeverity.error, error);\n }\n });\n }\n\n get canViewCustomers() {\n return this.accountService.userHasPermission(Permissions.viewUsers); // eg. viewCustomersPermission\n }\n\n get canViewProducts() {\n return this.accountService.userHasPermission(Permissions.viewUsers); // eg. viewProductsPermission\n }\n\n get canViewOrders() {\n return !!true; // eg. viewOrdersPermission\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/controls/users-management.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 28,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 33,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        265,
                        1227
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { TableColumn, NgxDatatableModule } from '@siemens/ngx-datatable';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { AlertService, DialogType, MessageSeverity } from '../../services/alert.service';\nimport { AppTranslationService } from '../../services/app-translation.service';\nimport { AccountService } from '../../services/account.service';\nimport { Utilities } from '../../services/utilities';\nimport { User } from '../../models/user.model';\nimport { Role } from '../../models/role.model';\nimport { Permissions } from '../../models/permission.model';\nimport { UserEdit } from '../../models/user-edit.model';\nimport { UserInfoComponent } from './user-info.component';\nimport { SearchBoxComponent } from './search-box.component';\n\ninterface UserIndex extends User {\n index: number;\n}\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component, OnInit, TemplateRef, inject, viewChild } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { TableColumn, NgxDatatableModule } from '@siemens/ngx-datatable';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { AlertService, DialogType, MessageSeverity } from '../../services/alert.service';\nimport { AppTranslationService } from '../../services/app-translation.service';\nimport { AccountService } from '../../services/account.service';\nimport { Utilities } from '../../services/utilities';\nimport { User } from '../../models/user.model';\nimport { Role } from '../../models/role.model';\nimport { Permissions } from '../../models/permission.model';\nimport { UserEdit } from '../../models/user-edit.model';\nimport { UserInfoComponent } from './user-info.component';\nimport { SearchBoxComponent } from './search-box.component';\n\ninterface UserIndex extends User {\n index: number;\n}\n\n@Component({\n selector: 'app-users-management',\n templateUrl: './users-management.component.html',\n styleUrl: './users-management.component.scss',\n imports: [SearchBoxComponent, NgxDatatableModule, UserInfoComponent, TranslateModule]\n})\nexport class UsersManagementComponent implements OnInit {\n private alertService = inject(AlertService);\n private translationService = inject(AppTranslationService);\n private accountService = inject(AccountService);\n private modalService = inject(NgbModal);\n\n columns: TableColumn[] = [];\n rows: User[] = [];\n rowsCache: User[] = [];\n editedUser: UserEdit | null = null;\n sourceUser: UserEdit | null = null;\n editingUserName: { name: string } | null = null;\n loadingIndicator = false;\n\n allRoles: Role[] = [];\n\n readonly indexTemplate = viewChild.required<TemplateRef<unknown>>('indexTemplate');\n\n readonly userNameTemplate = viewChild.required<TemplateRef<unknown>>('userNameTemplate');\n\n readonly rolesTemplate = viewChild.required<TemplateRef<unknown>>('rolesTemplate');\n\n readonly actionsTemplate = viewChild.required<TemplateRef<unknown>>('actionsTemplate');\n\n readonly editorModalTemplate = viewChild.required<TemplateRef<unknown>>('editorModal');\n\n userEditor: UserInfoComponent | null = null;\n\n ngOnInit() {\n const gT = (key: string) => this.translationService.getTranslation(key);\n\n this.columns = [\n { prop: 'index', name: '#', width: 40, cellTemplate: this.indexTemplate(), canAutoResize: false },\n { prop: 'jobTitle', name: gT('users.management.Title'), width: 50 },\n { prop: 'userName', name: gT('users.management.UserName'), width: 90, cellTemplate: this.userNameTemplate() },\n { prop: 'fullName', name: gT('users.management.FullName'), width: 120 },\n { prop: 'email', name: gT('users.management.Email'), width: 140 },\n { prop: 'roles', name: gT('users.management.Roles'), width: 120, cellTemplate: this.rolesTemplate() },\n { prop: 'phoneNumber', name: gT('users.management.PhoneNumber'), width: 100 }\n ];\n\n if (this.canManageUsers) {\n this.columns.push({\n name: '',\n width: 160,\n cellTemplate: this.actionsTemplate(),\n resizeable: false,\n canAutoResize: false,\n sortable: false,\n draggable: false\n });\n }\n\n this.loadData();\n }\n\n setUserEditorComponent(userEditor: UserInfoComponent) {\n this.userEditor = userEditor;\n\n if (this.sourceUser == null)\n this.editedUser = this.userEditor.newUser(this.allRoles);\n else\n this.editedUser = this.userEditor.editUser(this.sourceUser, this.allRoles);\n }\n\n addNewUserToList() {\n if (this.sourceUser) {\n Object.assign(this.sourceUser, this.editedUser);\n\n let sourceIndex = this.rowsCache.indexOf(this.sourceUser, 0);\n if (sourceIndex > -1) {\n Utilities.moveArrayItem(this.rowsCache, sourceIndex, 0);\n }\n\n sourceIndex = this.rows.indexOf(this.sourceUser, 0);\n if (sourceIndex > -1) {\n Utilities.moveArrayItem(this.rows, sourceIndex, 0);\n }\n\n this.editedUser = null;\n this.sourceUser = null;\n } else {\n const user = new User();\n Object.assign(user, this.editedUser);\n this.editedUser = null;\n\n let maxIndex = 0;\n for (const u of this.rowsCache) {\n if ((u as UserIndex).index > maxIndex) {\n maxIndex = (u as UserIndex).index;\n }\n }\n\n (user as UserIndex).index = maxIndex + 1;\n\n this.rowsCache.splice(0, 0, user);\n this.rows.splice(0, 0, user);\n this.rows = [...this.rows];\n }\n }\n\n loadData() {\n this.alertService.startLoadingMessage();\n this.loadingIndicator = true;\n\n if (this.canViewRoles) {\n this.accountService.getUsersAndRoles()\n .subscribe({\n next: results => this.onDataLoadSuccessful(results[0], results[1]),\n error: error => this.onDataLoadFailed(error)\n });\n } else {\n this.accountService.getUsers()\n .subscribe({\n next: users => this.onDataLoadSuccessful(users, this.accountService.currentUser?.roles.map(x => new Role(x)) ?? []),\n error: error => this.onDataLoadFailed(error)\n });\n }\n }\n\n onDataLoadSuccessful(users: User[], roles: Role[]) {\n this.alertService.stopLoadingMessage();\n this.loadingIndicator = false;\n\n users.forEach((user, index) => {\n (user as UserIndex).index = index + 1;\n });\n\n this.rowsCache = [...users];\n this.rows = users;\n\n this.allRoles = roles;\n }\n\n onDataLoadFailed(error: HttpErrorResponse) {\n this.alertService.stopLoadingMessage();\n this.loadingIndicator = false;\n\n this.alertService.showStickyMessage('Load Error',\n `Unable to retrieve users from the server.\\r\\nError: \"${Utilities.getHttpResponseMessage(error)}\"`,\n MessageSeverity.error, error);\n }\n\n onSearchChanged(value: string) {\n this.rows = this.rowsCache.filter(r =>\n Utilities.searchArray(value, false, r.userName, r.fullName, r.email, r.phoneNumber, r.jobTitle, r.roles));\n }\n\n newUser() {\n this.editingUserName = null;\n this.sourceUser = null;\n this.openUserEditor();\n }\n\n editUser(row: UserEdit) {\n this.editingUserName = { name: row.userName };\n this.sourceUser = row;\n this.openUserEditor();\n }\n\n openUserEditor() {\n const modalRef = this.modalService.open(this.editorModalTemplate(), {\n size: 'lg',\n backdrop: 'static'\n });\n\n modalRef.shown.subscribe(() => {\n if (!this.userEditor)\n throw new Error('The user editor component was not set.');\n\n this.userEditor.changesSavedCallback = () => {\n this.addNewUserToList();\n modalRef.close();\n };\n\n this.userEditor.changesCancelledCallback = () => {\n this.editedUser = null;\n this.sourceUser = null;\n modalRef.close();\n };\n });\n\n modalRef.hidden.subscribe(() => {\n if (!this.userEditor)\n throw new Error('The user editor component was not set.');\n\n this.editingUserName = null;\n this.userEditor.resetForm(true);\n this.userEditor = null;\n });\n }\n\n deleteUser(row: UserEdit) {\n this.alertService.showDialog(`Are you sure you want to delete \"${row.userName}\"?`,\n DialogType.confirm, () => this.deleteUserHelper(row));\n }\n\n deleteUserHelper(row: UserEdit) {\n this.alertService.startLoadingMessage('Deleting...');\n this.loadingIndicator = true;\n\n this.accountService.deleteUser(row)\n .subscribe({\n next: () => {\n this.alertService.stopLoadingMessage();\n this.loadingIndicator = false;\n\n this.rowsCache = this.rowsCache.filter(item => item !== row);\n this.rows = this.rows.filter(item => item !== row);\n },\n error: error => {\n this.alertService.stopLoadingMessage();\n this.loadingIndicator = false;\n\n this.alertService.showStickyMessage('Delete Error',\n `An error occurred whilst deleting the user.\\r\\nError: \"${Utilities.getHttpResponseMessage(error)}\"`,\n MessageSeverity.error, error);\n }\n });\n }\n\n get canAssignRoles() {\n return this.accountService.userHasPermission(Permissions.assignRoles);\n }\n\n get canViewRoles() {\n return this.accountService.userHasPermission(Permissions.viewRoles);\n }\n\n get canManageUsers() {\n return this.accountService.userHasPermission(Permissions.manageUsers);\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/customers/customers.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 13,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 19,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        225,
                        448
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { fadeInOut } from '../../services/animations';\nimport { TodoDemoComponent } from '../controls/todo-demo.component';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { fadeInOut } from '../../services/animations';\nimport { TodoDemoComponent } from '../controls/todo-demo.component';\n\n@Component({\n selector: 'app-customers',\n templateUrl: './customers.component.html',\n styleUrl: './customers.component.scss',\n animations: [fadeInOut],\n imports: [TodoDemoComponent, TranslateModule]\n})\nexport class CustomersComponent {\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/home/home.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 22,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 31,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        271,
                        1090
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { RouterLink } from '@angular/router';\nimport { CdkDragDrop, moveItemInArray, CdkDropList, CdkDrag, CdkDragPlaceholder } from '@angular/cdk/drag-drop';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { fadeInOut } from '../../services/animations';\nimport { ConfigurationService } from '../../services/configuration.service';\nimport { AuthService } from '../../services/auth.service';\nimport { StatisticsDemoComponent } from '../controls/statistics-demo.component';\nimport { NotificationsViewerComponent } from '../controls/notifications-viewer.component';\nimport { TodoDemoComponent } from '../controls/todo-demo.component';\nimport { BannerDemoComponent } from '../controls/banner-demo.component';\n\ninterface WidgetIndex { element: string, index: number }\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { AfterViewInit, Component, ElementRef, inject, viewChild } from '@angular/core';\nimport { RouterLink } from '@angular/router';\nimport { CdkDragDrop, moveItemInArray, CdkDropList, CdkDrag, CdkDragPlaceholder } from '@angular/cdk/drag-drop';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { fadeInOut } from '../../services/animations';\nimport { ConfigurationService } from '../../services/configuration.service';\nimport { AuthService } from '../../services/auth.service';\nimport { StatisticsDemoComponent } from '../controls/statistics-demo.component';\nimport { NotificationsViewerComponent } from '../controls/notifications-viewer.component';\nimport { TodoDemoComponent } from '../controls/todo-demo.component';\nimport { BannerDemoComponent } from '../controls/banner-demo.component';\n\ninterface WidgetIndex { element: string, index: number }\n\n@Component({\n selector: 'app-home',\n templateUrl: './home.component.html',\n styleUrl: './home.component.scss',\n animations: [fadeInOut],\n imports: [\n CdkDropList, RouterLink, CdkDrag, CdkDragPlaceholder, StatisticsDemoComponent, NotificationsViewerComponent,\n TodoDemoComponent, BannerDemoComponent, TranslateModule\n ]\n})\nexport class HomeComponent implements AfterViewInit {\n private authService = inject(AuthService);\n configurations = inject(ConfigurationService);\n\n dragStartDelay = 200;\n readonly DBKeyWidgetsOrder = 'home-component.widgets_order';\n\n readonly widgetsContainer = viewChild.required<ElementRef<HTMLDivElement>>('widgetsContainer');\n\n ngAfterViewInit(): void {\n this.restoreWidgetsOrder();\n }\n\n restoreWidgetsOrder() {\n const widgetIndexes = this.loadWidgetIndexes();\n\n if (widgetIndexes == null || widgetIndexes.length == 0)\n return;\n\n const parentEle = this.widgetsContainer().nativeElement;\n\n for (const widget of Array.from(parentEle.children)) {\n const index = widgetIndexes.find(w => w.element == widget.id)?.index;\n\n if (index != null)\n this.insertChildAtIndex(parentEle, widget, index);\n }\n }\n\n getPlaceholderMinHeight(placeholder: HTMLElement, widget: HTMLElement) {\n const placeholderMinHeight = parseInt(placeholder.style.minHeight, 10);\n return placeholderMinHeight || widget.offsetHeight;\n }\n\n insertChildAtIndex(parent: HTMLDivElement, child: Element, index: number) {\n if (!index)\n index = 0;\n\n if (index >= parent.children.length) {\n parent.appendChild(child);\n } else {\n parent.insertBefore(child, parent.children[index]);\n }\n }\n\n drop(event: CdkDragDrop<HTMLDivElement>) {\n const el = event.item.element.nativeElement;\n const parentEle = event.container.element.nativeElement;\n const anchorEle = parentEle.children[event.currentIndex];\n\n const widgetIndexes = new Array<WidgetIndex>(parentEle.children.length);\n\n for (let i = 0; i < parentEle.children.length; i++) {\n widgetIndexes[i] = { element: parentEle.children[i].id, index: i };\n }\n\n moveItemInArray(widgetIndexes, event.previousIndex, event.currentIndex);\n\n for (let i = 0; i < widgetIndexes.length; i++) {\n widgetIndexes[i].index = i;\n }\n\n if (event.currentIndex < event.previousIndex)\n parentEle.insertBefore(el, anchorEle);\n else\n parentEle.insertBefore(el, anchorEle.nextElementSibling);\n\n this.saveWidgetIndexes(widgetIndexes);\n }\n\n saveWidgetIndexes(indexes: WidgetIndex[]) {\n this.configurations\n .saveConfiguration(indexes, `${this.DBKeyWidgetsOrder}:${this.authService.currentUser?.id}`);\n }\n\n loadWidgetIndexes() {\n return this.configurations\n .getConfiguration<WidgetIndex[]>(`${this.DBKeyWidgetsOrder}:${this.authService.currentUser?.id}`);\n }\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/login/login.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 18,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 23,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        259,
                        768
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { NgClass } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Subscription } from 'rxjs';\n\nimport { AlertService, MessageSeverity, DialogType } from '../../services/alert.service';\nimport { AuthService } from '../../services/auth.service';\nimport { ConfigurationService } from '../../services/configuration.service';\nimport { Utilities } from '../../services/utilities';\nimport { UserLogin } from '../../models/user-login.model';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component, OnInit, OnDestroy, Input, inject } from '@angular/core';\nimport { NgClass } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Subscription } from 'rxjs';\n\nimport { AlertService, MessageSeverity, DialogType } from '../../services/alert.service';\nimport { AuthService } from '../../services/auth.service';\nimport { ConfigurationService } from '../../services/configuration.service';\nimport { Utilities } from '../../services/utilities';\nimport { UserLogin } from '../../models/user-login.model';\n\n@Component({\n selector: 'app-login',\n templateUrl: './login.component.html',\n styleUrl: './login.component.scss',\n imports: [FormsModule, NgClass]\n})\n\nexport class LoginComponent implements OnInit, OnDestroy {\n private alertService = inject(AlertService);\n private authService = inject(AuthService);\n private configurations = inject(ConfigurationService);\n\n userLogin = new UserLogin();\n isLoading = false;\n formResetToggle = true;\n modalClosedCallback: (() => void) | undefined;\n loginStatusSubscription: Subscription | undefined;\n\n @Input()\n isModal = false;\n\n ngOnInit() {\n this.userLogin.rememberMe = this.authService.rememberMe;\n\n if (this.getShouldRedirect()) {\n this.authService.redirectLoginUser();\n } else {\n this.loginStatusSubscription = this.authService.getLoginStatusEvent().subscribe(() => {\n if (this.getShouldRedirect()) {\n this.authService.redirectLoginUser();\n }\n });\n }\n }\n\n ngOnDestroy() {\n this.loginStatusSubscription?.unsubscribe();\n }\n\n getShouldRedirect() {\n return !this.isModal && this.authService.isLoggedIn && !this.authService.isSessionExpired;\n }\n\n showErrorAlert(caption: string, message: string) {\n this.alertService.showMessage(caption, message, MessageSeverity.error);\n }\n\n closeModal() {\n if (this.modalClosedCallback) {\n this.modalClosedCallback();\n }\n }\n\n login() {\n this.isLoading = true;\n this.alertService.startLoadingMessage('', 'Attempting login...');\n\n this.authService.loginWithPassword(this.userLogin.userName, this.userLogin.password, this.userLogin.rememberMe)\n .subscribe({\n next: user => {\n setTimeout(() => {\n this.alertService.stopLoadingMessage();\n this.isLoading = false;\n this.reset();\n\n if (!this.isModal) {\n this.alertService.showMessage('Login', `Welcome ${user.userName}!`, MessageSeverity.success);\n } else {\n this.alertService.showMessage('Login', `Session for ${user.userName} restored!`, MessageSeverity.success);\n setTimeout(() => {\n this.alertService.showStickyMessage('Session Restored', 'Please try your last operation again', MessageSeverity.default);\n }, 500);\n\n this.closeModal();\n }\n }, 500);\n },\n error: error => {\n this.alertService.stopLoadingMessage();\n\n if (Utilities.checkNoNetwork(error)) {\n this.alertService.showStickyMessage(Utilities.noNetworkMessageCaption, Utilities.noNetworkMessageDetail, MessageSeverity.error, error);\n this.offerBackendDevServer();\n } else {\n const errorMessage = Utilities.getHttpResponseMessage(error);\n\n if (errorMessage) {\n this.alertService.showStickyMessage('Unable to login', this.mapLoginErrorMessage(errorMessage), MessageSeverity.error, error);\n } else {\n this.alertService.showStickyMessage('Unable to login',\n 'An error occurred whilst logging in, please try again later.\\nError: ' + Utilities.stringify(error), MessageSeverity.error, error);\n }\n }\n\n setTimeout(() => {\n this.isLoading = false;\n }, 500);\n }\n });\n }\n\n offerBackendDevServer() {\n if (Utilities.checkIsLocalHost(location.origin) && Utilities.checkIsLocalHost(this.configurations.baseUrl)) {\n this.alertService.showDialog(\n 'Dear Developer!<br />' +\n 'It appears your backend Web API server is inaccessible or not running...<br />' +\n 'Would you want to temporarily switch to the fallback development API server below? (Or specify another)', DialogType.prompt, value => {\n this.configurations.baseUrl = value as string;\n this.alertService.showStickyMessage('API Changed!', 'The target Web API has been changed to: ' + value, MessageSeverity.warn);\n },\n null,\n null,\n null,\n this.configurations.fallbackBaseUrl);\n }\n }\n\n mapLoginErrorMessage(error: string) {\n if (error === 'invalid_username_or_password') {\n return 'Invalid username or password';\n }\n\n return error;\n }\n\n reset() {\n this.formResetToggle = false;\n\n setTimeout(() => {\n this.formResetToggle = true;\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/not-found/not-found.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 13,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 19,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        225,
                        425
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { RouterLink } from '@angular/router';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { fadeInOut } from '../../services/animations';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component } from '@angular/core';\nimport { RouterLink } from '@angular/router';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { fadeInOut } from '../../services/animations';\n\n@Component({\n selector: 'app-not-found',\n templateUrl: './not-found.component.html',\n styleUrl: './not-found.component.scss',\n animations: [fadeInOut],\n imports: [RouterLink, TranslateModule]\n})\nexport class NotFoundComponent {\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/orders/orders.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 12,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 18,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        225,
                        379
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { fadeInOut } from '../../services/animations';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { fadeInOut } from '../../services/animations';\n\n@Component({\n selector: 'app-orders',\n templateUrl: './orders.component.html',\n styleUrl: './orders.component.scss',\n animations: [fadeInOut],\n imports: [TranslateModule]\n})\nexport class OrdersComponent {\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/products/products.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 12,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 18,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        225,
                        379
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { fadeInOut } from '../../services/animations';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { fadeInOut } from '../../services/animations';\n\n@Component({\n selector: 'app-products',\n templateUrl: './products.component.html',\n styleUrl: './products.component.scss',\n animations: [fadeInOut],\n imports: [TranslateModule]\n})\nexport class ProductsComponent {\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/settings/settings.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 21,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 30,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        267,
                        1031
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { ActivatedRoute, Router, RouterLink } from '@angular/router';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { NgbNavModule } from '@ng-bootstrap/ng-bootstrap';\nimport { Subscription } from 'rxjs';\n\nimport { fadeInOut } from '../../services/animations';\nimport { AccountService } from '../../services/account.service';\nimport { Permissions } from '../../models/permission.model';\nimport { UserInfoComponent } from '../controls/user-info.component';\nimport { UserPreferencesComponent } from '../controls/user-preferences.component';\nimport { UsersManagementComponent } from '../controls/users-management.component';\nimport { RolesManagementComponent } from '../controls/roles-management.component';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component, inject, OnInit, OnDestroy, AfterViewInit } from '@angular/core';\nimport { ActivatedRoute, Router, RouterLink } from '@angular/router';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { NgbNavModule } from '@ng-bootstrap/ng-bootstrap';\nimport { Subscription } from 'rxjs';\n\nimport { fadeInOut } from '../../services/animations';\nimport { AccountService } from '../../services/account.service';\nimport { Permissions } from '../../models/permission.model';\nimport { UserInfoComponent } from '../controls/user-info.component';\nimport { UserPreferencesComponent } from '../controls/user-preferences.component';\nimport { UsersManagementComponent } from '../controls/users-management.component';\nimport { RolesManagementComponent } from '../controls/roles-management.component';\n\n@Component({\n selector: 'app-settings',\n templateUrl: './settings.component.html',\n styleUrl: './settings.component.scss',\n animations: [fadeInOut],\n imports: [\n RouterLink, TranslateModule, NgbNavModule,\n UserInfoComponent, UserPreferencesComponent, UsersManagementComponent, RolesManagementComponent\n ]\n})\nexport class SettingsComponent implements OnInit, AfterViewInit, OnDestroy {\n private router = inject(Router);\n public route = inject(ActivatedRoute);\n private accountService = inject(AccountService);\n\n readonly profileTab = 'profile';\n readonly preferencesTab = 'preferences';\n readonly usersTab = 'users';\n readonly rolesTab = 'roles';\n activeTab = '';\n showDatatable = false; // Delays showing the table until tab is shown so column widths are calculated correctly\n fragmentSubscription: Subscription | undefined;\n\n ngOnInit() {\n this.fragmentSubscription = this.route.fragment.subscribe(fragment => this.setActiveTab(fragment));\n }\n\n ngAfterViewInit() {\n setTimeout(() => this.showDatatable = true);\n }\n\n ngOnDestroy() {\n this.fragmentSubscription?.unsubscribe();\n }\n\n setActiveTab(fragment: string | null) {\n fragment = fragment?.toLowerCase() ?? this.profileTab;\n\n const canViewTab = fragment === this.profileTab || fragment === this.preferencesTab ||\n (fragment === this.usersTab && this.canViewUsers) || (fragment === this.rolesTab && this.canViewRoles);\n\n if (canViewTab)\n this.activeTab = fragment;\n else\n this.router.navigate([], { fragment: this.profileTab });\n }\n\n get canViewUsers() {\n return this.accountService.userHasPermission(Permissions.viewUsers);\n }\n\n get canViewRoles() {\n return this.accountService.userHasPermission(Permissions.viewRoles);\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/directives/equal-validator.directive.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/no-forward-ref",
                "severity": 2,
                "message": "Avoid using `forwardRef`",
                "line": 13,
                "column": 44,
                "nodeType": "CallExpression",
                "messageId": "noForwardRef",
                "endLine": 13,
                "endColumn": 76
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Directive, forwardRef, HostAttributeToken, inject } from '@angular/core';\nimport { Validator, AbstractControl, NG_VALIDATORS, ValidationErrors } from '@angular/forms';\n\n@Directive({\n selector: '[appValidateEqual][formControlName],[appValidateEqual][formControl],[appValidateEqual][ngModel]',\n providers: [\n { provide: NG_VALIDATORS, useExisting: forwardRef(() => EqualValidator), multi: true }\n ],\n standalone: true\n})\nexport class EqualValidator implements Validator {\n validateEqual = inject(new HostAttributeToken('appValidateEqual'));\n reverse = inject(new HostAttributeToken('reverse'), { optional: true });\n\n validate(control: AbstractControl): ValidationErrors | null {\n const other = control.root.get(this.validateEqual);\n\n if (!other) {\n return null;\n }\n\n return this.reverse === 'true' ? this.validateReverse(control, other) : this.validateNoReverse(control, other);\n }\n\n private validateNoReverse(control: AbstractControl, other: AbstractControl): ValidationErrors | null {\n return other.value === control.value ? null : { validateEqual: true };\n }\n\n private validateReverse(control: AbstractControl, other: AbstractControl): ValidationErrors | null {\n if (control.value === other.value) {\n if (other.errors) {\n delete other.errors['validateEqual'];\n\n if (Object.keys(other.errors).length === 0) {\n other.setErrors(null);\n }\n }\n } else {\n other.setErrors({ validateEqual: true });\n }\n\n return null;\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/services/app-title.service.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 13,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 13,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        435,
                        435
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        435,
                        435
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        435,
                        435
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Injectable, inject } from '@angular/core';\nimport { TitleStrategy, RouterStateSnapshot } from '@angular/router';\nimport { Title } from '@angular/platform-browser';\n\nimport { Utilities } from './utilities';\n\n@Injectable()\nexport class AppTitleService extends TitleStrategy {\n private readonly titleService = inject(Title);\n\n static appName: string | undefined;\n\n override updateTitle(routerState: RouterStateSnapshot) {\n let title = this.buildTitle(routerState);\n\n if (title) {\n const fragment = routerState.url.split('#')[1];\n\n if (fragment) {\n title += ` | ${Utilities.toTitleCase(fragment)}`;\n }\n\n if (AppTitleService.appName) {\n title += ` - ${AppTitleService.appName}`;\n }\n\n this.titleService.setTitle(title);\n\n } else if (AppTitleService.appName) {\n this.titleService.setTitle(AppTitleService.appName);\n }\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/services/db-keys.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 9,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 9,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        264,
                        264
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        264,
                        264
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        264,
                        264
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class DBkeys {\n public static readonly CURRENT_USER = 'current_user';\n public static readonly USER_PERMISSIONS = 'user_permissions';\n public static readonly ACCESS_TOKEN = 'access_token';\n public static readonly REFRESH_TOKEN = 'refresh_token';\n public static readonly TOKEN_EXPIRES_IN = 'expires_in';\n\n public static readonly REMEMBER_ME = 'remember_me';\n\n public static readonly LANGUAGE = 'language';\n public static readonly HOME_URL = 'home_url';\n public static readonly THEME_ID = 'themeId';\n public static readonly SHOW_DASHBOARD_STATISTICS = 'show_dashboard_statistics';\n public static readonly SHOW_DASHBOARD_NOTIFICATIONS = 'show_dashboard_notifications';\n public static readonly SHOW_DASHBOARD_TODO = 'show_dashboard_todo';\n public static readonly SHOW_DASHBOARD_BANNER = 'show_dashboard_banner';\n\n public static readonly USER_CONFIG_KEYS = 'user_config_keys';\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/services/endpoint-base.service.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 24,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 24,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        656,
                        656
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        656,
                        656
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        656,
                        656
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Injectable, inject } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\nimport { Observable, Subject, from, throwError } from 'rxjs';\nimport { mergeMap, switchMap, catchError } from 'rxjs/operators';\n\nimport { AuthService } from './auth.service';\nimport { User } from '../models/user.model';\n\ninterface ServerError {\n status: number;\n error: {\n error: string;\n error_description: string;\n };\n}\n\n\n@Injectable()\nexport class EndpointBase {\n private authService = inject(AuthService);\n\n private taskPauser: Subject<boolean> | null = null;\n private isRefreshingLogin = false;\n\n protected get requestHeaders(): { headers: HttpHeaders | Record<string, string | string[]> } {\n const headers = new HttpHeaders({\n Authorization: `Bearer ${this.authService.accessToken}`,\n 'Content-Type': 'application/json',\n Accept: 'application/json, text/plain, */*'\n });\n\n return { headers };\n }\n\n public refreshLogin(): Observable<User> {\n return this.authService.refreshLogin().pipe(\n catchError((error: ServerError) => {\n return this.handleError(error, () => this.refreshLogin());\n }));\n }\n\n protected handleError<T>(error: ServerError, continuation: () => Observable<T>) {\n if (error.status === 401) {\n if (this.isRefreshingLogin) {\n return this.pauseTask(continuation);\n }\n\n this.isRefreshingLogin = true;\n\n return from(this.authService.refreshLogin()).pipe(\n mergeMap(() => {\n this.isRefreshingLogin = false;\n this.resumeTasks(true);\n\n return continuation();\n }),\n catchError(refreshLoginError => {\n this.isRefreshingLogin = false;\n this.resumeTasks(false);\n this.authService.reLogin();\n\n if (refreshLoginError.status === 401 || (refreshLoginError.error && refreshLoginError.error.error === 'invalid_grant')) {\n return throwError(() => new Error('session expired'));\n } else {\n return throwError(() => refreshLoginError || new Error('server error'));\n }\n }));\n }\n\n if (error.error && error.error.error === 'invalid_grant') {\n this.authService.reLogin();\n\n return throwError(() => (error.error && error.error.error_description) ? `session expired (${error.error.error_description})` : 'session expired');\n } else {\n return throwError(() => error);\n }\n }\n\n private pauseTask<T>(continuation: () => Observable<T>) {\n if (!this.taskPauser) {\n this.taskPauser = new Subject();\n }\n\n return this.taskPauser.pipe(switchMap(continueOp => {\n return continueOp ? continuation() : throwError(() => new Error('session expired'));\n }));\n }\n\n private resumeTasks(continueOp: boolean) {\n setTimeout(() => {\n if (this.taskPauser) {\n this.taskPauser.next(continueOp);\n this.taskPauser.complete();\n this.taskPauser = null;\n }\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/services/jwt-helper.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 13,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 13,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        324,
                        324
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        324,
                        324
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        324,
                        324
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\n/**\n angular.json aspnetcore-https.js eslint.config.js karma.conf.js lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules nuget.config package.json package-lock.json public quickapp.client.esproj QuickApp.report.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json Helper class to decode and find JWT expiration.\n */\nimport { Injectable } from '@angular/core';\n\n\n@Injectable()\nexport class JwtHelper {\n\n public urlBase64Decode(str: string): string {\n let output = str.replace(/-/g, '+').replace(/_/g, '/');\n switch (output.length % 4) {\n case 0: { break; }\n case 2: { output += '=='; break; }\n case 3: { output += '='; break; }\n default: {\n throw new Error('Illegal base64url string!');\n }\n }\n return this.b64DecodeUnicode(output);\n }\n\n // https://developer.mozilla.org/en/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#The_Unicode_Problem\n private b64DecodeUnicode(str: string) {\n return decodeURIComponent(Array.prototype.map.call(atob(str), c => {\n return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n }).join(''));\n }\n\n public decodeToken(token: string) {\n const parts = token.split('.');\n\n if (parts.length !== 3) {\n throw new Error('JWT must have 3 parts');\n }\n\n const decoded = this.urlBase64Decode(parts[1]);\n if (!decoded) {\n throw new Error('Cannot decode the token');\n }\n\n return JSON.parse(decoded);\n }\n\n public getTokenExpirationDate(token: string): Date | null {\n const decoded = this.decodeToken(token);\n\n if (!Object.prototype.hasOwnProperty.call(decoded, 'exp')) {\n return null;\n }\n\n const date = new Date(0); // The 0 here is the key, which sets the date to the epoch\n date.setUTCSeconds(decoded.exp);\n\n return date;\n }\n\n public isTokenExpired(token: string, offsetSeconds?: number): boolean {\n const date = this.getTokenExpirationDate(token);\n offsetSeconds = offsetSeconds || 0;\n\n if (date == null) {\n return false;\n }\n\n // Token expired?\n return !(date.valueOf() > (new Date().valueOf() + (offsetSeconds angular.json aspnetcore-https.js eslint.config.js karma.conf.js lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules nuget.config package.json package-lock.json public quickapp.client.esproj QuickApp.report.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json 1000)));\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/services/lowercase-url-serializer.service.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 11,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 11,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        370,
                        370
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        370,
                        370
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        370,
                        370
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Injectable } from \"@angular/core\";\nimport { DefaultUrlSerializer, UrlTree } from \"@angular/router\";\nimport { Utilities } from \"./utilities\";\n\n@Injectable()\nexport class LowerCaseUrlSerializer extends DefaultUrlSerializer {\n override parse(url: string): UrlTree {\n const possibleSeparators = /[?;#]/;\n const indexOfSeparator = url.search(possibleSeparators);\n let processedUrl: string;\n\n if (indexOfSeparator > -1) {\n const separator = url.charAt(indexOfSeparator);\n const urlParts = Utilities.splitInTwo(url, separator);\n urlParts.firstPart = urlParts.firstPart.toLowerCase();\n\n processedUrl = urlParts.firstPart + separator + urlParts.secondPart;\n } else {\n processedUrl = url.toLowerCase();\n }\n\n return super.parse(processedUrl);\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/services/notification-endpoint.service.ts",
            "messages": [
              {
                "ruleId": "@typescript-eslint/no-unused-vars",
                "message": "Definition for rule '@typescript-eslint/no-unused-vars' was not found.",
                "line": 98,
                "column": 3,
                "endLine": 98,
                "endColumn": 64,
                "severity": 2,
                "nodeType": null
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Observable, of, throwError } from 'rxjs';\n\n@Injectable({\n providedIn: 'root'\n})\nexport class NotificationEndpoint {\n private demoNotifications = [\n {\n id: 1,\n header: '20 New Products were added to your inventory by \"administrator\"',\n body: '20 new \"BMW M6\" were added to your stock by \"administrator\" on 5/28/2017 4:54:13 PM',\n isRead: true,\n isPinned: true,\n date: '2017-05-28T16:29:13.5877958'\n },\n {\n id: 2,\n header: '1 Product running low',\n body: 'You are running low on \"Nissan Patrol\". 2 Items remaining',\n isRead: false,\n isPinned: false,\n date: '2017-05-28T19:54:42.4144502'\n },\n {\n id: 3,\n header: 'Tomorrow is half day',\n body: 'Guys, tomorrow we close by midday. Please check in your sales before noon. Thanks. Alex.',\n isRead: false,\n isPinned: false,\n date: '2017-05-30T11:13:42.4144502'\n }\n ];\n\n\n getNotificationEndpoint<T>(notificationId: number) {\n const notification = this.demoNotifications.find(val => val.id === notificationId);\n return this.createDemoResponse(notification as T, notification ? null : 404);\n }\n\n getNotificationsEndpoint<T>(page: number, pageSize: number) {\n return this.createDemoResponse(this.demoNotifications as T, null, page, pageSize);\n }\n\n getUnreadNotificationsEndpoint<T>(userId?: string) {\n const unreadNotifications = this.demoNotifications.filter(val => !val.isRead);\n return this.createDemoResponse(unreadNotifications as T, null, userId);\n }\n\n getNewNotificationsEndpoint<T>(lastNotificationDate?: Date) {\n return this.createDemoResponse(this.demoNotifications as T, null, lastNotificationDate);\n }\n\n getPinUnpinNotificationEndpoint(notificationId: number, isPinned?: boolean) {\n const notification = this.demoNotifications.find(val => val.id === notificationId);\n\n if (notification) {\n if (isPinned == null) {\n isPinned = !notification.isPinned;\n }\n\n notification.isPinned = isPinned;\n notification.isRead = true;\n\n return this.createDemoResponse(null);\n } else {\n return this.createDemoResponse(null, 404);\n }\n }\n\n getReadUnreadNotificationEndpoint(notificationIds: number[], isRead: boolean) {\n for (const notificationId of notificationIds) {\n const notification = this.demoNotifications.find(val => val.id === notificationId);\n\n if (notification)\n notification.isRead = isRead;\n }\n\n return this.createDemoResponse(null);\n }\n\n getDeleteNotificationEndpoint<T>(notificationId: number) {\n const notification = this.demoNotifications.find(val => val.id === notificationId);\n\n if (notification)\n this.demoNotifications = this.demoNotifications.filter(val => val.id !== notificationId);\n\n return this.createDemoResponse(notification as T, notification ? null : 404);\n }\n\n // eslint-disable-next-line @typescript-eslint/no-unused-vars\n private createDemoResponse<T>(data: T, errorCode: number | null = null, ...args: unknown[]): Observable<T> {\n if (errorCode == null)\n return of(data);\n else\n return throwError(() => new HttpErrorResponse({ status: errorCode, error: 'Demo. An error occurred' }));\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/services/utilities.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 20,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 20,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        605,
                        605
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        605,
                        605
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        605,
                        605
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Injectable } from '@angular/core';\nimport { HttpResponseBase, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\ntype HttpMessageSearchOptions = Readonly<{\n searchInCaption?: boolean;\n searchInMessage?: boolean;\n exactMatch?: boolean;\n startsWith?: boolean;\n endsWith?: boolean;\n contains?: boolean;\n resultType?: 'caption' | 'preferMessage' | 'both';\n}>;\n\n@Injectable()\nexport class Utilities {\n public static readonly captionAndMessageSeparator = ':';\n public static readonly noNetworkMessageCaption = 'No Network';\n public static readonly noNetworkMessageDetail = 'The server cannot be reached';\n public static readonly accessDeniedMessageCaption = 'Access Denied!';\n public static readonly accessDeniedMessageDetail = '';\n public static readonly notFoundMessageCaption = 'Not Found';\n public static readonly notFoundMessageDetail = 'The target resource cannot be found';\n\n public static readonly findHttpResponseMessageDefaultSearchOption: HttpMessageSearchOptions = {\n searchInCaption: true,\n searchInMessage: false,\n exactMatch: true,\n startsWith: false,\n endsWith: false,\n contains: false,\n resultType: 'preferMessage',\n };\n\n\n public static cookies =\n {\n getItem: (sKey: string) => {\n return decodeURIComponent(document.cookie.replace(new RegExp('(?:(?:^|.*;)\\\\s*' + encodeURIComponent(sKey)\n .replace(/[-.+*]/g, '\\\\$&') + '\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$'), '$1')) || null;\n },\n setItem: (sKey: string, sValue: string, vEnd: number | string | Date, sPath: string, sDomain: string, bSecure: boolean) => {\n if (!sKey || /^(?:expires|max-age|path|domain|secure)$/i.test(sKey)) {\n return false;\n }\n\n let sExpires = '';\n\n if (vEnd) {\n switch (vEnd.constructor) {\n case Number:\n sExpires = vEnd === Infinity ? '; expires=Fri, 31 Dec 9999 23:59:59 GMT' : '; max-age=' + vEnd;\n break;\n case String:\n sExpires = '; expires=' + vEnd;\n break;\n case Date:\n sExpires = '; expires=' + (vEnd as Date).toUTCString();\n break;\n }\n }\n\n document.cookie = encodeURIComponent(sKey) + '=' + encodeURIComponent(sValue) + sExpires +\n (sDomain ? '; domain=' + sDomain : '') + (sPath ? '; path=' + sPath : '') + (bSecure ? '; secure' : '');\n return true;\n },\n removeItem: (sKey: string, sPath: string, sDomain: string) => {\n if (!sKey) {\n return false;\n }\n document.cookie = encodeURIComponent(sKey) + '=; expires=Thu, 01 Jan 1970 00:00:00 GMT' +\n (sDomain ? '; domain=' + sDomain : '') + (sPath ? '; path=' + sPath : '');\n return true;\n },\n hasItem: (sKey: string) => {\n return (new RegExp('(?:^|;\\\\s*)' + encodeURIComponent(sKey).replace(/[-.+*]/g, '\\\\$&') + '\\\\s*\\\\=')).test(document.cookie);\n },\n keys: () => {\n const aKeys = document.cookie.replace(/((?:^|\\s*;)[^=]+)(?=;|$)|^\\s*|\\s*(?:=[^;]*)?(?:$)/g, '').split(/\\s*(?:=[^;]*)?;\\s*/);\n for (let nIdx = 0; nIdx < aKeys.length; nIdx++) { aKeys[nIdx] = decodeURIComponent(aKeys[nIdx]); }\n return aKeys;\n }\n };\n\n public static getHttpResponseMessages(data: HttpResponseBase): string[] {\n const responses: string[] = [];\n\n if (this.checkNoNetwork(data)) {\n responses.push(`${this.noNetworkMessageCaption}${this.captionAndMessageSeparator} ${this.noNetworkMessageDetail}`);\n } else {\n const responseData = this.getResponseData(data);\n\n if (responseData) {\n if (typeof responseData === 'object') {\n for (const key in responseData) {\n responses.push(`${key}${this.captionAndMessageSeparator} ${responseData[key]}`);\n }\n }\n else {\n responses.push(responseData);\n }\n }\n }\n\n if (this.checkAccessDenied(data)) {\n responses.splice(0, 0, `${this.accessDeniedMessageCaption}${this.captionAndMessageSeparator} ${this.accessDeniedMessageDetail}`);\n }\n\n if (this.checkNotFound(data)) {\n let message = `${this.notFoundMessageCaption}${this.captionAndMessageSeparator} ${this.notFoundMessageDetail}`;\n if (data.url) {\n message += `. ${data.url}`;\n }\n\n responses.splice(0, 0, message);\n }\n\n if (!responses.length) {\n const response = (data as HttpErrorResponse).message ?? data.statusText;\n\n if (response)\n responses.push(response);\n }\n\n return responses;\n }\n\n public static getHttpResponseMessage(data: HttpResponseBase, ...preferredMessageKeys: string[]): string | null {\n let httpMessage =\n Utilities.findHttpResponseMessage(Utilities.noNetworkMessageCaption, data) ||\n Utilities.findHttpResponseMessage(Utilities.notFoundMessageCaption, data) ||\n Utilities.findHttpResponseMessage('error_description', data);\n\n if (!httpMessage) {\n for (const msgKey of preferredMessageKeys) {\n httpMessage = Utilities.findHttpResponseMessage(msgKey, data);\n\n if (httpMessage?.trim() !== '')\n return httpMessage;\n }\n }\n\n if (!httpMessage) {\n httpMessage = Utilities.findHttpResponseMessage('error', data);\n }\n\n if (!httpMessage) {\n const responseMessages = Utilities.getHttpResponseMessages(data);\n\n if (responseMessages.length)\n httpMessage = responseMessages.join('\\n');\n }\n\n return httpMessage;\n }\n\n public static findHttpResponseMessage(searchString: string, data: HttpResponseBase,\n searchOptions?: HttpMessageSearchOptions): string | null {\n\n searchString = searchString.toUpperCase();\n searchOptions = { ...this.findHttpResponseMessageDefaultSearchOption, ...searchOptions };\n\n let result: string | null = null;\n let captionAndMessage = { caption: '', message: null as string | null };\n const httpMessages = this.getHttpResponseMessages(data);\n\n for (const httpMsg of httpMessages) {\n const splitMsg = Utilities.splitInTwo(httpMsg, this.captionAndMessageSeparator);\n captionAndMessage = { caption: splitMsg.firstPart, message: splitMsg.secondPart ?? null };\n\n let messageToSearch = '';\n\n if (searchOptions.searchInCaption && searchOptions.searchInMessage)\n messageToSearch = httpMsg;\n else if (searchOptions.searchInCaption)\n messageToSearch = captionAndMessage.caption;\n else if (searchOptions.searchInMessage)\n messageToSearch = captionAndMessage.message ?? '';\n\n messageToSearch = messageToSearch.toUpperCase();\n\n if (searchOptions.exactMatch && messageToSearch === searchString) {\n result = httpMsg;\n break;\n }\n\n if (searchOptions.startsWith && messageToSearch.startsWith(searchString)) {\n result = httpMsg;\n break;\n }\n\n if (searchOptions.endsWith && messageToSearch.endsWith(searchString)) {\n result = httpMsg;\n break;\n }\n\n if (searchOptions.contains && messageToSearch.includes(searchString)) {\n result = httpMsg;\n break;\n }\n }\n\n if (result && searchOptions.resultType)\n switch (searchOptions.resultType) {\n case 'preferMessage':\n return captionAndMessage.message ?? captionAndMessage.caption;\n case 'caption':\n return captionAndMessage.caption;\n case 'both':\n return result;\n }\n else\n return result;\n }\n\n public static getResponseData(response: HttpResponseBase) {\n let results;\n\n if (response instanceof HttpResponse) {\n results = response.body;\n }\n\n if (response instanceof HttpErrorResponse) {\n results = response.error || response.message || response.statusText;\n }\n\n return results;\n }\n\n public static checkNoNetwork(response: HttpResponseBase) {\n if (response instanceof HttpResponseBase) {\n return response.status === 0;\n }\n\n return false;\n }\n\n public static checkAccessDenied(response: HttpResponseBase) {\n if (response instanceof HttpResponseBase) {\n return response.status === 403;\n }\n\n return false;\n }\n\n public static checkNotFound(response: HttpResponseBase) {\n if (response instanceof HttpResponseBase) {\n return response.status === 404;\n }\n\n return false;\n }\n\n public static checkIsLocalHost(url: string, base?: string) {\n if (url) {\n const location = new URL(url, base);\n return location.hostname === 'localhost' || location.hostname === '127.0.0.1';\n }\n\n return false;\n }\n\n public static getQueryParamsFromString(paramString: string) {\n const params: Record<string, string | undefined> = {};\n\n for (const param of paramString.split('&')) {\n const keyValue = Utilities.splitInTwo(param, '=');\n params[keyValue.firstPart] = keyValue.secondPart;\n }\n\n return params;\n }\n\n public static splitInTwo(text: string, separator: string, splitFromEnd = false): { firstPart: string, secondPart: string | undefined } {\n let separatorIndex = -1;\n\n if (separator !== '') {\n if (!splitFromEnd)\n separatorIndex = text.indexOf(separator);\n else\n separatorIndex = text.lastIndexOf(separator);\n }\n\n if (separatorIndex === -1) {\n return { firstPart: text, secondPart: undefined };\n }\n\n const part1 = text.substring(0, separatorIndex).trim();\n const part2 = text.substring(separatorIndex + 1).trim();\n\n return { firstPart: part1, secondPart: part2 };\n }\n\n public static stringify(value: unknown, depth = 3): string {\n const worker = (value: unknown, depth: number, padding = ''): string => {\n if (value === null || value === undefined) {\n return '';\n }\n\n if (typeof value === 'object') {\n const objectobject = '[object Object]';\n\n const result = value.toString();\n if (result !== objectobject)\n return result;\n\n const keyValuePairs = [];\n let tab = `\\n${padding}`;\n\n for (const key in value) {\n if (Object.prototype.hasOwnProperty.call(value, key)) {\n const keyEntry = value[key as keyof object];\n\n if (typeof keyEntry !== 'function') {\n const keyValue = depth > 0 ? worker(keyEntry, depth - 1, padding + ' ') : String(keyEntry);\n keyValuePairs.push(`${tab}${key}: ${keyValue === objectobject ? '...' : keyValue}`);\n tab = padding;\n }\n }\n }\n\n return keyValuePairs.join('\\n');\n }\n\n return String(value);\n }\n\n return worker(value, depth); //.replace(/^\\s+/, '');\n }\n\n public static JsonTryParse(value: string) {\n try {\n return JSON.parse(value);\n } catch {\n return value;\n }\n }\n\n public static GetObjectWithLoweredPropertyNames<T extends Record<string, unknown>>(obj: T) {\n return Object.keys(obj).reduce((newObj, k) => {\n newObj[k.toLowerCase()] = obj[k];\n return newObj;\n }, {} as Record<string, unknown>) as T;\n }\n\n public static TestIsObjectEmpty(obj: object) {\n for (const prop in obj) {\n if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n return false;\n }\n }\n\n return true;\n }\n\n public static TestIsUndefined(value: unknown) {\n return typeof value === 'undefined';\n }\n\n public static TestIsString(value: unknown) {\n return typeof value === 'string';\n }\n\n public static capitalizeFirstLetter(text: string) {\n if (text) {\n return text.charAt(0).toUpperCase() + text.slice(1);\n } else {\n return text;\n }\n }\n\n public static toTitleCase(text: string) {\n return text.replace(/\\w\\S*/g, (subString) => {\n return subString.charAt(0).toUpperCase() + subString.substring(1).toLowerCase();\n });\n }\n\n public static toLowerCase(item: string | string[]) {\n if (Array.isArray(item)) {\n const loweredArray: string[] = [];\n\n for (let i = 0; i < item.length; i++) {\n loweredArray[i] = item[i].toLowerCase();\n }\n\n return loweredArray;\n } else {\n return item.toLowerCase();\n }\n }\n\n public static uniqueId() {\n return this.randomNumber(1000000, 9000000).toString();\n }\n\n public static randomNumber(min: number, max: number) {\n return Math.floor(Math.random() angular.json aspnetcore-https.js eslint.config.js karma.conf.js lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules nuget.config package.json package-lock.json public quickapp.client.esproj QuickApp.report.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json (max - min + 1) + min);\n }\n\n public static baseUrl() {\n let base = '';\n\n if (window.location.origin) {\n base = window.location.origin;\n } else {\n base = window.location.protocol + '//' + window.location.hostname + (window.location.port ? ':' + window.location.port : '');\n }\n\n return base.replace(/\\/$/, '');\n }\n\n public static printDateOnly(date: Date) {\n date = new Date(date);\n\n const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\n const dayOfWeek = date.getDay();\n const dayOfMonth = date.getDate();\n let sup = '';\n const month = date.getMonth();\n const year = date.getFullYear();\n\n if (dayOfMonth === 1 || dayOfMonth === 21 || dayOfMonth === 31) {\n sup = 'st';\n } else if (dayOfMonth === 2 || dayOfMonth === 22) {\n sup = 'nd';\n } else if (dayOfMonth === 3 || dayOfMonth === 23) {\n sup = 'rd';\n } else {\n sup = 'th';\n }\n\n const dateString = dayNames[dayOfWeek] + ', ' + dayOfMonth + sup + ' ' + monthNames[month] + ' ' + year;\n\n return dateString;\n }\n\n public static printTimeOnly(date: Date) {\n date = new Date(date);\n\n let period = '';\n let minute = date.getMinutes().toString();\n let hour = date.getHours();\n\n period = hour < 12 ? 'AM' : 'PM';\n\n if (hour === 0) {\n hour = 12;\n }\n if (hour > 12) {\n hour = hour - 12;\n }\n\n if (minute.length === 1) {\n minute = '0' + minute;\n }\n\n const timeString = hour + ':' + minute + ' ' + period;\n\n return timeString;\n }\n\n public static printDate(date: Date, separator = 'at') {\n return `${Utilities.printDateOnly(date)} ${separator} ${Utilities.printTimeOnly(date)}`;\n }\n\n public static printFriendlyDate(date: Date, separator = '-') {\n const today = new Date(); today.setHours(0, 0, 0, 0);\n const yesterday = new Date(today); yesterday.setDate(yesterday.getDate() - 1);\n const test = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n\n if (test.toDateString() === today.toDateString()) {\n return `Today ${separator} ${Utilities.printTimeOnly(date)}`;\n }\n if (test.toDateString() === yesterday.toDateString()) {\n return `Yesterday ${separator} ${Utilities.printTimeOnly(date)}`;\n } else {\n return Utilities.printDate(date, separator);\n }\n }\n\n public static printShortDate(date: Date, separator = '/', dateTimeSeparator = '-') {\n let day = date.getDate().toString();\n let month = (date.getMonth() + 1).toString();\n const year = date.getFullYear();\n\n if (day.length === 1) {\n day = '0' + day;\n }\n\n if (month.length === 1) {\n month = '0' + month;\n }\n\n return `${month}${separator}${day}${separator}${year} ${dateTimeSeparator} ${Utilities.printTimeOnly(date)}`;\n }\n\n public static parseDate(input: string | number | Date) {\n if (input instanceof Date) {\n return input;\n }\n\n if (typeof input === 'string') {\n if (input.search(/[a-su-z+]/i) === -1) {\n input = input + 'Z';\n }\n\n return new Date(input);\n }\n\n return new Date(input);\n }\n\n public static printDuration(start: Date, end: Date) {\n start = new Date(start);\n end = new Date(end);\n\n // get total seconds between the times\n let delta = Math.abs(start.valueOf() - end.valueOf()) / 1000;\n\n // calculate (and subtract) whole days\n const days = Math.floor(delta / 86400);\n delta -= days angular.json aspnetcore-https.js eslint.config.js karma.conf.js lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules nuget.config package.json package-lock.json public quickapp.client.esproj QuickApp.report.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json 86400;\n\n // calculate (and subtract) whole hours\n const hours = Math.floor(delta / 3600) % 24;\n delta -= hours angular.json aspnetcore-https.js eslint.config.js karma.conf.js lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules nuget.config package.json package-lock.json public quickapp.client.esproj QuickApp.report.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json 3600;\n\n // calculate (and subtract) whole minutes\n const minutes = Math.floor(delta / 60) % 60;\n delta -= minutes angular.json aspnetcore-https.js eslint.config.js karma.conf.js lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules nuget.config package.json package-lock.json public quickapp.client.esproj QuickApp.report.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json 60;\n\n // what's left is seconds\n const seconds = delta % 60; // in theory the modulus is not required\n\n let printedDays = '';\n\n if (days) {\n printedDays = `${days} days`;\n }\n\n if (hours) {\n printedDays += printedDays ? `, ${hours} hours` : `${hours} hours`;\n }\n\n if (minutes) {\n printedDays += printedDays ? `, ${minutes} minutes` : `${minutes} minutes`;\n }\n\n if (seconds) {\n printedDays += printedDays ? ` and ${seconds} seconds` : `${seconds} seconds`;\n }\n\n\n if (!printedDays) {\n printedDays = '0';\n }\n\n return printedDays;\n }\n\n public static getAge(birthDate: string | number | Date, otherDate: string | number | Date) {\n birthDate = new Date(birthDate);\n otherDate = new Date(otherDate);\n\n let years = (otherDate.getFullYear() - birthDate.getFullYear());\n\n if (otherDate.getMonth() < birthDate.getMonth() ||\n otherDate.getMonth() === birthDate.getMonth() && otherDate.getDate() < birthDate.getDate()) {\n years--;\n }\n\n return years;\n }\n\n public static searchArray(searchTerm: string, caseSensitive: boolean, ...values: unknown[]) {\n if (!searchTerm) {\n return true;\n }\n\n let filter = searchTerm.trim();\n let data = values.join();\n\n if (!caseSensitive) {\n filter = filter.toLowerCase();\n data = data.toLowerCase();\n }\n\n return data.indexOf(filter) !== -1;\n }\n\n public static moveArrayItem(array: unknown[], oldIndex: number, newIndex: number) {\n if (oldIndex < 0) {\n return;\n }\n\n if (newIndex < 0) {\n newIndex += array.length;\n }\n\n if (newIndex >= array.length) {\n let k = newIndex - array.length;\n while ((k--) + 1) {\n array.push(undefined);\n }\n }\n\n array.splice(newIndex, 0, array.splice(oldIndex, 1)[0]);\n }\n\n public static expandCamelCase(text: string) {\n if (!text) {\n return text;\n }\n\n return text.replace(/([A-Z][a-z]+)/g, ' $1')\n .replace(/([A-Z][A-Z]+)/g, ' $1')\n .replace(/([^A-Za-z ]+)/g, ' $1');\n }\n\n public static testIsAbsoluteUrl(url: string) {\n const r = new RegExp('^(?:[a-z]+:)?//', 'i');\n return r.test(url);\n }\n\n public static convertToAbsoluteUrl(url: string) {\n return Utilities.testIsAbsoluteUrl(url) ? url : '//' + url;\n }\n\n public static removeNulls<T extends object | unknown[]>(item: T) {\n const isArray = Array.isArray(item);\n\n for (const k in item) {\n if (Object.prototype.hasOwnProperty.call(item, k)) {\n const propertyValue = item[k as keyof typeof item];\n\n if (propertyValue === null) {\n if (isArray)\n item.splice(+k, 1)\n else\n delete item[k as keyof typeof item];\n } else if (typeof propertyValue === 'object') {\n Utilities.removeNulls(propertyValue);\n }\n\n if (isArray && item.length === +k) {\n Utilities.removeNulls(item);\n }\n }\n }\n\n return item;\n }\n\n public static debounce(fn: (...params: unknown[]) => unknown, delay: number, immediate?: boolean) {\n let timer: ReturnType<typeof setTimeout> | undefined;\n\n return function (this: unknown, ...args: unknown[]) {\n if (timer === undefined && immediate) {\n fn.apply(this, args);\n }\n\n clearTimeout(timer);\n timer = setTimeout(() => fn.apply(this, args), delay);\n return timer;\n }\n }\n}\n",
            "usedDeprecatedRules": []
          }
        ]
      }
    },
    "after": {
      "quickapp.client": {
        "recommended": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/controls/statistics-demo.component.ts",
            "messages": [
              {
                "ruleId": "@typescript-eslint/no-unused-vars",
                "message": "Definition for rule '@typescript-eslint/no-unused-vars' was not found.",
                "line": 123,
                "column": 3,
                "endLine": 123,
                "endColumn": 64,
                "severity": 2,
                "nodeType": null
              },
              {
                "ruleId": "@typescript-eslint/no-unused-vars",
                "message": "Definition for rule '@typescript-eslint/no-unused-vars' was not found.",
                "line": 128,
                "column": 3,
                "endLine": 128,
                "endColumn": 64,
                "severity": 2,
                "nodeType": null
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component, OnInit, OnDestroy, inject, viewChild } from '@angular/core';\nimport { AlertService, DialogType, MessageSeverity } from '../../services/alert.service';\nimport { BaseChartDirective } from 'ng2-charts';\nimport { ChartEvent, ChartType } from 'chart.js';\nimport { NgbDropdown, NgbDropdownToggle, NgbDropdownMenu, NgbDropdownButtonItem, NgbDropdownItem }\n from '@ng-bootstrap/ng-bootstrap';\n\ninterface ChartEventArgs { event: ChartEvent; active: object[] }\n\n@Component({\n selector: 'app-statistics-demo',\n templateUrl: './statistics-demo.component.html',\n styleUrl: './statistics-demo.component.scss',\n imports: [BaseChartDirective, NgbDropdown, NgbDropdownToggle, NgbDropdownMenu, NgbDropdownButtonItem, NgbDropdownItem]\n})\nexport class StatisticsDemoComponent implements OnInit, OnDestroy {\n private alertService = inject(AlertService);\n\n chartOptions: object | undefined;\n chartType: ChartType = 'line';\n chartLabels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'];\n chartData = [\n {\n data: [65, 59, 80, 81, 56, 55],\n label: 'Series A',\n fill: 'origin',\n },\n {\n data: [28, 48, 40, 19, 86, 27],\n label: 'Series B',\n fill: 'origin',\n },\n {\n data: [18, 48, 77, 9, 100, 27],\n label: 'Series C',\n fill: 'origin',\n }\n ];\n\n timerReference: ReturnType<typeof setInterval> | undefined;\n\n readonly chart = viewChild.required(BaseChartDirective);\n\n ngOnInit() {\n this.refreshChartOptions();\n this.timerReference = setInterval(() => this.randomize(), 5000);\n }\n\n ngOnDestroy() {\n clearInterval(this.timerReference);\n }\n\n refreshChartOptions() {\n const baseOptions = {\n responsive: true,\n maintainAspectRatio: false,\n title: {\n display: false,\n fontSize: 16,\n text: 'Important Stuff'\n }\n };\n\n if (this.chartType != 'line') {\n this.chartOptions = baseOptions;\n }\n else {\n const lineChartOptions = {\n elements: {\n line: {\n tension: 0.5\n }\n }\n };\n\n this.chartOptions = { ...baseOptions, ...lineChartOptions };\n }\n }\n\n randomize(): void {\n for (const series of this.chartData) {\n for (let j = 0; j < series.data.length; j++) {\n series.data[j] = Math.floor((Math.random() angular.json aspnetcore-https.js eslint.config.js karma.conf.js lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules nuget.config package.json package-lock.json public quickapp.client.esproj QuickApp.report.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json 100) + 1);\n }\n }\n\n this.chart().update();\n }\n\n changeChartType(type: ChartType) {\n this.chartType = type;\n this.refreshChartOptions();\n }\n\n showMessage(msg: string): void {\n this.alertService.showMessage('Demo', msg, MessageSeverity.info);\n }\n\n showDialog(msg: string): void {\n this.alertService.showDialog(msg, DialogType.prompt, (val) => this.configure(true, val), () => this.configure(false));\n }\n\n configure(response: boolean, value?: string) {\n if (response) {\n this.alertService.showStickyMessage('Simulating...', '', MessageSeverity.wait);\n\n setTimeout(() => {\n this.alertService.resetStickyMessage();\n this.alertService.showMessage('Demo', `Your settings was successfully configured to \"${value}\"`, MessageSeverity.success);\n }, 2000);\n } else {\n this.alertService.showMessage('Demo', 'Operation cancelled by user', MessageSeverity.default);\n }\n }\n\n\n // eslint-disable-next-line @typescript-eslint/no-unused-vars\n chartHovered(e: ChartEventArgs): void {\n // Demo\n }\n\n // eslint-disable-next-line @typescript-eslint/no-unused-vars\n chartClicked(e: Partial<ChartEventArgs>): void {\n // Demo\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/services/notification-endpoint.service.ts",
            "messages": [
              {
                "ruleId": "@typescript-eslint/no-unused-vars",
                "message": "Definition for rule '@typescript-eslint/no-unused-vars' was not found.",
                "line": 98,
                "column": 3,
                "endLine": 98,
                "endColumn": 64,
                "severity": 2,
                "nodeType": null
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Observable, of, throwError } from 'rxjs';\n\n@Injectable({\n providedIn: 'root'\n})\nexport class NotificationEndpoint {\n private demoNotifications = [\n {\n id: 1,\n header: '20 New Products were added to your inventory by \"administrator\"',\n body: '20 new \"BMW M6\" were added to your stock by \"administrator\" on 5/28/2017 4:54:13 PM',\n isRead: true,\n isPinned: true,\n date: '2017-05-28T16:29:13.5877958'\n },\n {\n id: 2,\n header: '1 Product running low',\n body: 'You are running low on \"Nissan Patrol\". 2 Items remaining',\n isRead: false,\n isPinned: false,\n date: '2017-05-28T19:54:42.4144502'\n },\n {\n id: 3,\n header: 'Tomorrow is half day',\n body: 'Guys, tomorrow we close by midday. Please check in your sales before noon. Thanks. Alex.',\n isRead: false,\n isPinned: false,\n date: '2017-05-30T11:13:42.4144502'\n }\n ];\n\n\n getNotificationEndpoint<T>(notificationId: number) {\n const notification = this.demoNotifications.find(val => val.id === notificationId);\n return this.createDemoResponse(notification as T, notification ? null : 404);\n }\n\n getNotificationsEndpoint<T>(page: number, pageSize: number) {\n return this.createDemoResponse(this.demoNotifications as T, null, page, pageSize);\n }\n\n getUnreadNotificationsEndpoint<T>(userId?: string) {\n const unreadNotifications = this.demoNotifications.filter(val => !val.isRead);\n return this.createDemoResponse(unreadNotifications as T, null, userId);\n }\n\n getNewNotificationsEndpoint<T>(lastNotificationDate?: Date) {\n return this.createDemoResponse(this.demoNotifications as T, null, lastNotificationDate);\n }\n\n getPinUnpinNotificationEndpoint(notificationId: number, isPinned?: boolean) {\n const notification = this.demoNotifications.find(val => val.id === notificationId);\n\n if (notification) {\n if (isPinned == null) {\n isPinned = !notification.isPinned;\n }\n\n notification.isPinned = isPinned;\n notification.isRead = true;\n\n return this.createDemoResponse(null);\n } else {\n return this.createDemoResponse(null, 404);\n }\n }\n\n getReadUnreadNotificationEndpoint(notificationIds: number[], isRead: boolean) {\n for (const notificationId of notificationIds) {\n const notification = this.demoNotifications.find(val => val.id === notificationId);\n\n if (notification)\n notification.isRead = isRead;\n }\n\n return this.createDemoResponse(null);\n }\n\n getDeleteNotificationEndpoint<T>(notificationId: number) {\n const notification = this.demoNotifications.find(val => val.id === notificationId);\n\n if (notification)\n this.demoNotifications = this.demoNotifications.filter(val => val.id !== notificationId);\n\n return this.createDemoResponse(notification as T, notification ? null : 404);\n }\n\n // eslint-disable-next-line @typescript-eslint/no-unused-vars\n private createDemoResponse<T>(data: T, errorCode: number | null = null, ...args: unknown[]): Observable<T> {\n if (errorCode == null)\n return of(data);\n else\n return throwError(() => new HttpErrorResponse({ status: errorCode, error: 'Demo. An error occurred' }));\n }\n}\n",
            "usedDeprecatedRules": []
          }
        ],
        "all": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/app-error.handler.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 9,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 9,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        278,
                        278
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        278,
                        278
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        278,
                        278
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Injectable, ErrorHandler } from '@angular/core';\n\n@Injectable()\nexport class AppErrorHandler extends ErrorHandler {\n constructor() {\n super();\n }\n\n override handleError(error: Error) {\n if (confirm(\"Fatal Error!\\nAn unresolved error has occurred. Do you want to reload the page to correct this?\\n\\n\" +\n `Error: ${error.message}`)) {\n window.location.reload();\n }\n\n super.handleError(error);\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/app.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 29,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 37,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        263,
                        1563
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { Router, RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ToastaService, ToastaConfig, ToastOptions, ToastData, ToastaModule } from 'ngx-toasta';\nimport { NgbCollapseModule, NgbModal, NgbPopover } from '@ng-bootstrap/ng-bootstrap';\n\nimport { AlertService, AlertDialog, DialogType, AlertCommand, MessageSeverity } from './services/alert.service';\nimport { NotificationService } from './services/notification.service';\nimport { AppTranslationService } from './services/app-translation.service';\nimport { AccountService } from './services/account.service';\nimport { LocalStoreManager } from './services/local-store-manager.service';\nimport { AppTitleService } from './services/app-title.service';\nimport { AuthService } from './services/auth.service';\nimport { ConfigurationService } from './services/configuration.service';\nimport { Alertify } from './models/Alertify';\nimport { Permissions } from './models/permission.model';\nimport { LoginComponent } from './components/login/login.component';\nimport { NotificationsViewerComponent } from './components/controls/notifications-viewer.component';\n\ndeclare let alertify: Alertify;\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component, OnInit, OnDestroy, inject, Renderer2 } from '@angular/core';\nimport { Router, RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ToastaService, ToastaConfig, ToastOptions, ToastData, ToastaModule } from 'ngx-toasta';\nimport { NgbCollapseModule, NgbModal, NgbPopover } from '@ng-bootstrap/ng-bootstrap';\n\nimport { AlertService, AlertDialog, DialogType, AlertCommand, MessageSeverity } from './services/alert.service';\nimport { NotificationService } from './services/notification.service';\nimport { AppTranslationService } from './services/app-translation.service';\nimport { AccountService } from './services/account.service';\nimport { LocalStoreManager } from './services/local-store-manager.service';\nimport { AppTitleService } from './services/app-title.service';\nimport { AuthService } from './services/auth.service';\nimport { ConfigurationService } from './services/configuration.service';\nimport { Alertify } from './models/Alertify';\nimport { Permissions } from './models/permission.model';\nimport { LoginComponent } from './components/login/login.component';\nimport { NotificationsViewerComponent } from './components/controls/notifications-viewer.component';\n\ndeclare let alertify: Alertify;\n\n@Component({\n selector: 'app-root',\n templateUrl: './app.component.html',\n styleUrl: './app.component.scss',\n imports: [\n ToastaModule, RouterLink, RouterLinkActive, NgbCollapseModule, NgbPopover, NotificationsViewerComponent,\n RouterOutlet, TranslateModule\n ]\n})\nexport class AppComponent implements OnInit, OnDestroy {\n private toastaService = inject(ToastaService);\n private toastaConfig = inject(ToastaConfig);\n private accountService = inject(AccountService);\n private alertService = inject(AlertService);\n private modalService = inject(NgbModal);\n private notificationService = inject(NotificationService);\n private authService = inject(AuthService);\n private translationService = inject(AppTranslationService);\n configurations = inject(ConfigurationService);\n router = inject(Router);\n renderer = inject(Renderer2);\n\n isMenuCollapsed = true;\n isAppLoaded = false;\n isUserLoggedIn = false;\n newNotificationCount = 0;\n appTitle = 'QuickApp';\n\n stickyToasties: number[] = [];\n\n dataLoadingConsecutiveFailures = 0;\n notificationsLoadingSubscription: Subscription | undefined;\n languageChangedSubscription: Subscription | undefined;\n\n loginControl: LoginComponent | undefined;\n\n gT = (key: string | string[], interpolateParams?: object) =>\n this.translationService.getTranslation(key, interpolateParams);\n\n get notificationsTitle() {\n if (this.newNotificationCount) {\n return `${this.gT('app.Notifications')} (${this.newNotificationCount} ${this.gT('app.New')})`;\n } else {\n return this.gT('app.Notifications');\n }\n }\n\n constructor() {\n const storageManager = inject(LocalStoreManager);\n\n storageManager.initialiseStorageSyncListener();\n\n this.toastaConfig.theme = 'bootstrap';\n this.toastaConfig.position = 'top-right';\n this.toastaConfig.limit = 100;\n this.toastaConfig.showClose = true;\n this.toastaConfig.showDuration = false;\n\n AppTitleService.appName = this.appTitle;\n }\n\n ngOnInit() {\n this.isUserLoggedIn = this.authService.isLoggedIn;\n\n // Extra sec to display preboot loaded information\n setTimeout(() => this.isAppLoaded = true, 1000);\n\n setTimeout(() => {\n if (this.isUserLoggedIn) {\n this.alertService.resetStickyMessage();\n this.alertService.showMessage(this.gT('app.alerts.Login'), this.gT('app.alerts.WelcomeBack',\n { username: this.userName }), MessageSeverity.default);\n }\n }, 2000);\n\n this.languageChangedSubscription = this.translationService.languageChanged$\n .subscribe(event => {\n this.renderer.setAttribute(document.documentElement, 'dir', event.lang === 'ar' ? 'rtl' : 'ltr');\n this.renderer.setAttribute(document.documentElement, 'lang', event.lang);\n });\n\n this.alertService.getDialogEvent().subscribe(alert => this.showDialog(alert));\n this.alertService.getMessageEvent().subscribe(message => this.showToast(message));\n\n this.authService.reLoginDelegate = () => this.openLoginModal();\n\n this.authService.getLoginStatusEvent().subscribe(isLoggedIn => {\n this.isUserLoggedIn = isLoggedIn;\n\n if (this.isUserLoggedIn) {\n this.initNotificationsLoading();\n } else {\n this.unsubscribeNotifications();\n }\n\n setTimeout(() => {\n if (!this.isUserLoggedIn) {\n this.alertService.showMessage(this.gT('app.alerts.SessionEnded'), '', MessageSeverity.default);\n }\n }, 500);\n });\n }\n\n ngOnDestroy() {\n this.unsubscribeNotifications();\n this.languageChangedSubscription?.unsubscribe();\n }\n\n private unsubscribeNotifications() {\n this.notificationsLoadingSubscription?.unsubscribe();\n }\n\n initNotificationsLoading() {\n this.notificationsLoadingSubscription = this.notificationService.getNewNotificationsPeriodically()\n .subscribe({\n next: notifications => {\n this.dataLoadingConsecutiveFailures = 0;\n this.newNotificationCount = notifications.filter(n => !n.isRead).length;\n },\n error: error => {\n this.alertService.logError(error);\n\n if (this.dataLoadingConsecutiveFailures++ < 20) {\n setTimeout(() => this.initNotificationsLoading(), 5000);\n } else {\n this.alertService.showStickyMessage(this.gT('app.alerts.LoadingError'),\n this.gT('app.alerts.LoadingNewNotificationsFailed'), MessageSeverity.error);\n }\n }\n });\n }\n\n markNotificationsAsRead() {\n const newNotifications = this.notificationService.newNotifications;\n\n if (newNotifications) {\n this.notificationService.readUnreadNotification(newNotifications.map(n => n.id), true)\n .subscribe({\n next: () => {\n for (const n of newNotifications) {\n n.isRead = true;\n }\n\n this.newNotificationCount = newNotifications.filter(n => !n.isRead).length;\n },\n error: error => {\n this.alertService.logError(error);\n this.alertService.showMessage(this.gT('app.alerts.NotificationError'),\n this.gT('app.alerts.MarkingReadNotificationsFailed'), MessageSeverity.error);\n }\n });\n }\n }\n\n openLoginModal() {\n const modalRef = this.modalService.open(LoginComponent, {\n windowClass: 'login-control',\n modalDialogClass: 'h-75 d-flex flex-column justify-content-center my-0',\n size: 'lg',\n backdrop: 'static'\n });\n\n this.loginControl = modalRef.componentInstance as LoginComponent;\n this.loginControl.isModal = true;\n\n this.loginControl.modalClosedCallback = () => modalRef.close();\n\n modalRef.shown.subscribe(() => {\n this.alertService.showStickyMessage(this.gT('app.alerts.SessionExpired'),\n this.gT('app.alerts.SessionExpiredLoginAgain'), MessageSeverity.info);\n });\n\n modalRef.hidden.subscribe(() => {\n this.alertService.resetStickyMessage();\n this.loginControl?.reset();\n\n if (this.authService.isSessionExpired) {\n this.alertService.showStickyMessage(this.gT('app.alerts.SessionExpired'),\n this.gT('app.alerts.SessionExpiredLoginToRenewSession'), MessageSeverity.warn);\n }\n });\n }\n\n showDialog(dialog: AlertDialog) {\n alertify.set({\n labels: {\n ok: dialog.okLabel || this.gT('app.alerts.OK'),\n cancel: dialog.cancelLabel || this.gT('app.alerts.Cancel')\n }\n });\n\n switch (dialog.type) {\n case DialogType.alert:\n alertify.alert(dialog.message);\n break;\n case DialogType.confirm:\n alertify.confirm(dialog.message, ok => {\n if (ok) {\n if (dialog.okCallback)\n dialog.okCallback();\n } else {\n if (dialog.cancelCallback) {\n dialog.cancelCallback();\n }\n }\n });\n break;\n case DialogType.prompt:\n alertify.prompt(dialog.message, (ok, val) => {\n if (ok) {\n if (dialog.okCallback)\n dialog.okCallback(val);\n } else {\n if (dialog.cancelCallback) {\n dialog.cancelCallback();\n }\n }\n }, dialog.defaultValue);\n break;\n }\n }\n\n showToast(alert: AlertCommand) {\n if (alert.operation === 'clear') {\n for (const id of this.stickyToasties.slice(0)) {\n this.toastaService.clear(id);\n }\n return;\n }\n\n const toastOptions: ToastOptions = {\n title: alert.message?.summary,\n msg: alert.message?.detail,\n };\n\n if (alert.operation === 'add_sticky') {\n toastOptions.timeout = 0;\n\n toastOptions.onAdd = (toast: ToastData) => {\n this.stickyToasties.push(toast.id);\n };\n\n toastOptions.onRemove = (toast: ToastData) => {\n const index = this.stickyToasties.indexOf(toast.id, 0);\n\n if (index > -1) {\n this.stickyToasties.splice(index, 1);\n }\n\n if (alert.onRemove) {\n alert.onRemove();\n }\n\n toast.onAdd = undefined;\n toast.onRemove = undefined;\n };\n } else {\n toastOptions.timeout = 4000;\n }\n\n switch (alert.message?.severity) {\n case MessageSeverity.default: this.toastaService.default(toastOptions); break;\n case MessageSeverity.info: this.toastaService.info(toastOptions); break;\n case MessageSeverity.success: this.toastaService.success(toastOptions); break;\n case MessageSeverity.error: this.toastaService.error(toastOptions); break;\n case MessageSeverity.warn: this.toastaService.warning(toastOptions); break;\n case MessageSeverity.wait: this.toastaService.wait(toastOptions); break;\n }\n }\n\n logout() {\n this.authService.logout();\n this.authService.redirectLogoutUser();\n }\n\n getYear() {\n return new Date().getUTCFullYear();\n }\n\n get userName(): string {\n return this.authService.currentUser?.userName ?? '';\n }\n\n get fullName(): string {\n return this.authService.currentUser?.fullName ?? '';\n }\n\n get canViewCustomers() {\n return this.accountService.userHasPermission(Permissions.viewUsers); // eg. viewCustomersPermission\n }\n\n get canViewProducts() {\n return this.accountService.userHasPermission(Permissions.viewUsers); // eg. viewProductsPermission\n }\n\n get canViewOrders() {\n return !!true; // eg. viewOrdersPermission\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/about/about.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 12,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 18,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        225,
                        379
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { fadeInOut } from '../../services/animations';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { fadeInOut } from '../../services/animations';\n\n@Component({\n selector: 'app-about',\n templateUrl: './about.component.html',\n styleUrl: './about.component.scss',\n animations: [fadeInOut],\n imports: [TranslateModule]\n})\nexport class AboutComponent {\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/controls/banner-demo.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 11,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 16,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        225,
                        379
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { NgClass } from '@angular/common';\nimport { NgbCarousel, NgbSlide } from '@ng-bootstrap/ng-bootstrap';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component } from '@angular/core';\nimport { NgClass } from '@angular/common';\nimport { NgbCarousel, NgbSlide } from '@ng-bootstrap/ng-bootstrap';\n\n@Component({\n selector: 'app-banner-demo',\n templateUrl: './banner-demo.component.html',\n styleUrl: './banner-demo.component.scss',\n imports: [NgbCarousel, NgbSlide, NgClass]\n})\nexport class BannerDemoComponent {\n\n carouselSlides = [\n {\n img: 'images/demo/banner1.png',\n alt: 'ASP.NET',\n caption: 'Learn how to build ASP.NET apps that can run anywhere',\n class: 'btn btn-outline-info btn-sm',\n link: 'http://go.microsoft.com/fwlink/?LinkID=525028&clcid=0x409'\n },\n {\n img: 'images/demo/banner2.png',\n alt: 'Visual Studio',\n caption: 'One platform for building modern web, native mobile and native desktop applications',\n class: 'btn btn-outline-primary btn-sm',\n link: 'http://angular.dev'\n },\n {\n img: 'images/demo/banner3.png',\n alt: 'Package Management',\n caption: 'Bring in libraries from NuGet and npm, and bundle with angular/cli',\n class: 'btn btn-outline-success btn-sm',\n link: 'http://go.microsoft.com/fwlink/?LinkID=525029&clcid=0x409'\n },\n {\n img: 'images/demo/banner4.png',\n alt: 'Eben Monney',\n caption: 'Follow me on social media for updates and tips on using this startup project',\n class: 'btn btn-outline-secondary btn-sm',\n link: 'https://www.ebenmonney.com/about'\n }\n ];\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/controls/notifications-viewer.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 22,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 27,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        283,
                        1080
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { NgClass } from '@angular/common';\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\nimport { Subscription } from 'rxjs';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { TableColumn, NgxDatatableModule } from '@siemens/ngx-datatable';\n\nimport { AlertService, DialogType, MessageSeverity } from '../../services/alert.service';\nimport { AppTranslationService } from '../../services/app-translation.service';\nimport { NotificationService } from '../../services/notification.service';\nimport { AccountService } from '../../services/account.service';\nimport { Permissions } from '../../models/permission.model';\nimport { Utilities } from '../../services/utilities';\nimport { Notification } from '../../models/notification.model';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component, OnInit, OnDestroy, TemplateRef, inject, input, viewChild } from '@angular/core';\nimport { NgClass } from '@angular/common';\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\nimport { Subscription } from 'rxjs';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { TableColumn, NgxDatatableModule } from '@siemens/ngx-datatable';\n\nimport { AlertService, DialogType, MessageSeverity } from '../../services/alert.service';\nimport { AppTranslationService } from '../../services/app-translation.service';\nimport { NotificationService } from '../../services/notification.service';\nimport { AccountService } from '../../services/account.service';\nimport { Permissions } from '../../models/permission.model';\nimport { Utilities } from '../../services/utilities';\nimport { Notification } from '../../models/notification.model';\n\n@Component({\n selector: 'app-notifications-viewer',\n templateUrl: './notifications-viewer.component.html',\n styleUrl: './notifications-viewer.component.scss',\n imports: [NgxDatatableModule, NgbTooltip, NgClass, TranslateModule]\n})\nexport class NotificationsViewerComponent implements OnInit, OnDestroy {\n private alertService = inject(AlertService);\n private translationService = inject(AppTranslationService);\n private accountService = inject(AccountService);\n private notificationService = inject(NotificationService);\n\n columns: TableColumn[] = [];\n rows: Notification[] = [];\n loadingIndicator = false;\n\n dataLoadingConsecutiveFailurs = 0;\n dataLoadingSubscription: Subscription | undefined;\n\n readonly isViewOnly = input(false);\n readonly verticalScrollbar = input(false);\n\n readonly statusHeaderTemplate = viewChild.required<TemplateRef<unknown>>('statusHeaderTemplate');\n\n readonly statusTemplate = viewChild.required<TemplateRef<unknown>>('statusTemplate');\n\n readonly dateTemplate = viewChild.required<TemplateRef<unknown>>('dateTemplate');\n\n readonly contentHeaderTemplate = viewChild.required<TemplateRef<unknown>>('contentHeaderTemplate');\n\n readonly contenBodytTemplate = viewChild.required<TemplateRef<unknown>>('contenBodytTemplate');\n\n readonly actionsTemplate = viewChild.required<TemplateRef<unknown>>('actionsTemplate');\n\n ngOnInit() {\n if (this.isViewOnly()) {\n this.columns = [\n { prop: 'header', cellTemplate: this.contentHeaderTemplate(), width: 200, resizeable: false, sortable: false, draggable: false },\n ];\n } else {\n const gT = (key: string) => this.translationService.getTranslation(key);\n\n this.columns = [\n { prop: '', name: '', width: 10, headerTemplate: this.statusHeaderTemplate(), cellTemplate: this.statusTemplate(), resizeable: false, canAutoResize: false, sortable: false, draggable: false },\n { prop: 'date', name: gT('notifications.Date'), cellTemplate: this.dateTemplate(), width: 30 },\n { prop: 'body', name: gT('notifications.Notification'), cellTemplate: this.contenBodytTemplate(), width: 500 },\n { name: '', width: 80, cellTemplate: this.actionsTemplate(), resizeable: false, canAutoResize: false, sortable: false, draggable: false }\n ];\n }\n\n this.initDataLoading();\n }\n\n ngOnDestroy() {\n this.dataLoadingSubscription?.unsubscribe();\n }\n\n initDataLoading() {\n const isViewOnly = this.isViewOnly();\n if (isViewOnly && this.notificationService.newNotifications) {\n this.rows = this.processResults(this.notificationService.newNotifications);\n return;\n }\n\n this.loadingIndicator = true;\n\n this.dataLoadingSubscription = (isViewOnly ?\n this.notificationService.getNewNotifications() : this.notificationService.getNewNotificationsPeriodically())\n .subscribe({\n next: notifications => {\n this.loadingIndicator = false;\n this.dataLoadingConsecutiveFailurs = 0;\n\n this.rows = this.processResults(notifications);\n },\n error: error => {\n this.loadingIndicator = false;\n\n this.alertService.showMessage('Load Error', 'Loading new notifications from the server failed!', MessageSeverity.warn);\n this.alertService.logError(error);\n\n if (this.dataLoadingConsecutiveFailurs++ < 5) {\n setTimeout(() => this.initDataLoading(), 5000);\n } else {\n this.alertService.showStickyMessage('Load Error', 'Loading new notifications from the server failed!', MessageSeverity.error);\n }\n }\n });\n }\n\n private processResults(notifications: Notification[]) {\n if (this.isViewOnly()) {\n notifications.sort((a, b) => {\n return b.date.valueOf() - a.date.valueOf();\n });\n }\n\n return notifications;\n }\n\n getPrintedDate(value: Date) {\n if (value) {\n return Utilities.printTimeOnly(value) + ' on ' + Utilities.printDateOnly(value);\n }\n\n return '';\n }\n\n deleteNotification(row: Notification) {\n this.alertService.showDialog(`Are you sure you want to delete the notification \"${row.header}\"?`,\n DialogType.confirm, () => this.deleteNotificationHelper(row));\n }\n\n deleteNotificationHelper(row: Notification) {\n this.alertService.startLoadingMessage('Deleting...');\n this.loadingIndicator = true;\n\n this.notificationService.deleteNotification(row)\n .subscribe({\n next: () => {\n this.alertService.stopLoadingMessage();\n this.loadingIndicator = false;\n\n this.rows = this.rows.filter(item => item.id !== row.id);\n },\n error: error => {\n this.alertService.stopLoadingMessage();\n this.loadingIndicator = false;\n\n this.alertService.showStickyMessage('Delete Error',\n `An error occurred whilst deleting the notification.\\r\\nError: \"${Utilities.getHttpResponseMessage(error)}\"`,\n MessageSeverity.error, error);\n }\n });\n }\n\n togglePin(row: Notification) {\n const pin = !row.isPinned;\n const opText = pin ? 'Pinning' : 'Unpinning';\n\n this.alertService.startLoadingMessage(opText + '...');\n this.loadingIndicator = true;\n\n this.notificationService.pinUnpinNotification(row, pin)\n .subscribe({\n next: () => {\n this.alertService.stopLoadingMessage();\n this.loadingIndicator = false;\n\n row.isPinned = pin;\n },\n error: error => {\n this.alertService.stopLoadingMessage();\n this.loadingIndicator = false;\n\n this.alertService.showStickyMessage(opText + ' Error',\n `An error occurred whilst ${opText} the notification.\\r\\nError: \"${Utilities.getHttpResponseMessage(error)}\"`,\n MessageSeverity.error, error);\n }\n });\n }\n\n get canManageNotifications() {\n return this.accountService.userHasPermission(Permissions.manageRoles); // Todo: Create separate permissions for notifications\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/controls/role-editor.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 20,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 25,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        260,
                        890
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { NgClass } from '@angular/common';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { NgForm, FormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\n\nimport { AlertService, MessageSeverity } from '../../services/alert.service';\nimport { AccountService } from '../../services/account.service';\nimport { Role } from '../../models/role.model';\nimport { Permission, Permissions } from '../../models/permission.model';\nimport { GroupByPipe } from '../../pipes/group-by.pipe';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component, OnInit, inject, output, viewChild } from '@angular/core';\nimport { NgClass } from '@angular/common';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { NgForm, FormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\n\nimport { AlertService, MessageSeverity } from '../../services/alert.service';\nimport { AccountService } from '../../services/account.service';\nimport { Role } from '../../models/role.model';\nimport { Permission, Permissions } from '../../models/permission.model';\nimport { GroupByPipe } from '../../pipes/group-by.pipe';\n\n@Component({\n selector: 'app-role-editor',\n templateUrl: './role-editor.component.html',\n styleUrl: './role-editor.component.scss',\n imports: [FormsModule, NgClass, NgbTooltip, TranslateModule, GroupByPipe]\n})\nexport class RoleEditorComponent implements OnInit {\n private alertService = inject(AlertService);\n private accountService = inject(AccountService);\n\n private isNewRole = false;\n public isSaving = false;\n public showValidationErrors = true;\n public roleEdit = new Role();\n public allPermissions: Permission[] = [];\n public selectedValues: Record<string, boolean> = {};\n private editingRoleName: string | null = null;\n\n public formResetToggle = true;\n\n public changesSavedCallback: (() => void) | undefined;\n public changesFailedCallback: (() => void) | undefined;\n public changesCancelledCallback: (() => void) | undefined;\n\n // Outupt to broadcast this instance so it can be accessible from within ng-bootstrap modal template\n readonly afterOnInit = output<RoleEditorComponent>();\n\n readonly form = viewChild.required<NgForm>('f');\n\n ngOnInit() {\n this.afterOnInit.emit(this);\n }\n\n showErrorAlert(caption: string, message: string) {\n this.alertService.showMessage(caption, message, MessageSeverity.error);\n }\n\n save() {\n this.isSaving = true;\n this.alertService.startLoadingMessage('Saving changes...');\n\n this.roleEdit.permissions = this.getSelectedPermissions();\n\n if (this.isNewRole) {\n this.accountService.newRole(this.roleEdit)\n .subscribe({ next: role => this.saveSuccessHelper(role), error: error => this.saveFailedHelper(error) });\n } else {\n this.accountService.updateRole(this.roleEdit)\n .subscribe({ next: () => this.saveSuccessHelper(), error: error => this.saveFailedHelper(error) });\n }\n }\n\n private saveSuccessHelper(role?: Role) {\n if (role) {\n Object.assign(this.roleEdit, role);\n }\n\n this.isSaving = false;\n this.alertService.stopLoadingMessage();\n this.showValidationErrors = false;\n\n if (this.isNewRole) {\n this.alertService.showMessage('Success', `Role \"${this.roleEdit.name}\" was created successfully`, MessageSeverity.success);\n } else {\n this.alertService.showMessage('Success', `Changes to role \"${this.roleEdit.name}\" was saved successfully`, MessageSeverity.success);\n }\n\n this.roleEdit = new Role();\n this.resetForm();\n\n if (!this.isNewRole && this.accountService.currentUser?.roles.some(r => r === this.editingRoleName)) {\n this.refreshLoggedInUser();\n }\n\n if (this.changesSavedCallback) {\n this.changesSavedCallback();\n }\n }\n\n private refreshLoggedInUser() {\n this.accountService.refreshLoggedInUser()\n .subscribe({\n error: error => {\n this.alertService.resetStickyMessage();\n this.alertService.showStickyMessage('Refresh failed', 'An error occurred whilst refreshing logged in user information from the server', MessageSeverity.error, error);\n }\n });\n }\n\n private saveFailedHelper(error: HttpErrorResponse) {\n this.isSaving = false;\n this.alertService.stopLoadingMessage();\n this.alertService.showStickyMessage('Save Error', 'The below errors occurred whilst saving your changes:', MessageSeverity.error, error);\n this.alertService.showStickyMessage(error, null, MessageSeverity.error);\n\n if (this.changesFailedCallback) {\n this.changesFailedCallback();\n }\n }\n\n cancel() {\n this.roleEdit = new Role();\n\n this.showValidationErrors = false;\n this.resetForm();\n\n this.alertService.showMessage('Cancelled', 'Operation cancelled by user', MessageSeverity.default);\n this.alertService.resetStickyMessage();\n\n if (this.changesCancelledCallback) {\n this.changesCancelledCallback();\n }\n }\n\n selectAll() {\n this.allPermissions.forEach(p => this.selectedValues[p.value] = true);\n }\n\n selectNone() {\n this.allPermissions.forEach(p => this.selectedValues[p.value] = false);\n }\n\n toggleGroup(groupName: string) {\n let firstMemberValue: boolean;\n\n this.allPermissions.forEach(p => {\n if (p.groupName !== groupName) {\n return;\n }\n\n if (firstMemberValue == null) {\n firstMemberValue = this.selectedValues[p.value] === true;\n }\n\n this.selectedValues[p.value] = !firstMemberValue;\n });\n }\n\n private getSelectedPermissions() {\n return this.allPermissions.filter(p => this.selectedValues[p.value] === true);\n }\n\n resetForm(replace = false) {\n if (!replace) {\n this.form().reset();\n } else {\n this.formResetToggle = false;\n\n setTimeout(() => {\n this.formResetToggle = true;\n });\n }\n }\n\n newRole(allPermissions: Permission[]) {\n this.isNewRole = true;\n this.showValidationErrors = true;\n\n this.editingRoleName = null;\n this.allPermissions = allPermissions;\n this.selectedValues = {};\n this.roleEdit = new Role();\n\n return this.roleEdit;\n }\n\n editRole(role: Role, allPermissions: Permission[]) {\n if (role) {\n this.isNewRole = false;\n this.showValidationErrors = true;\n\n this.editingRoleName = role.name;\n this.allPermissions = allPermissions;\n this.selectedValues = {};\n role.permissions.forEach(p => this.selectedValues[p.value] = true);\n this.roleEdit = new Role();\n Object.assign(this.roleEdit, role);\n\n return this.roleEdit;\n } else {\n return this.newRole(allPermissions);\n }\n }\n\n get canManageRoles() {\n return this.accountService.userHasPermission(Permissions.manageRoles);\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/controls/roles-management.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 25,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 30,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        265,
                        1080
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { TableColumn, NgxDatatableModule } from '@siemens/ngx-datatable';\n\nimport { AlertService, DialogType, MessageSeverity } from '../../services/alert.service';\nimport { AppTranslationService } from '../../services/app-translation.service';\nimport { AccountService } from '../../services/account.service';\nimport { Utilities } from '../../services/utilities';\nimport { Role } from '../../models/role.model';\nimport { Permission, Permissions } from '../../models/permission.model';\nimport { RoleEditorComponent } from './role-editor.component';\nimport { SearchBoxComponent } from './search-box.component';\n\ninterface RoleIndex extends Role {\n index: number;\n}\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component, OnInit, TemplateRef, inject, viewChild } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { TableColumn, NgxDatatableModule } from '@siemens/ngx-datatable';\n\nimport { AlertService, DialogType, MessageSeverity } from '../../services/alert.service';\nimport { AppTranslationService } from '../../services/app-translation.service';\nimport { AccountService } from '../../services/account.service';\nimport { Utilities } from '../../services/utilities';\nimport { Role } from '../../models/role.model';\nimport { Permission, Permissions } from '../../models/permission.model';\nimport { RoleEditorComponent } from './role-editor.component';\nimport { SearchBoxComponent } from './search-box.component';\n\ninterface RoleIndex extends Role {\n index: number;\n}\n\n@Component({\n selector: 'app-roles-management',\n templateUrl: './roles-management.component.html',\n styleUrl: './roles-management.component.scss',\n imports: [SearchBoxComponent, NgxDatatableModule, RoleEditorComponent, TranslateModule]\n})\nexport class RolesManagementComponent implements OnInit {\n private alertService = inject(AlertService);\n private translationService = inject(AppTranslationService);\n private accountService = inject(AccountService);\n private modalService = inject(NgbModal);\n\n columns: TableColumn[] = [];\n rows: Role[] = [];\n rowsCache: Role[] = [];\n allPermissions: Permission[] = [];\n editedRole: Role | null = null;\n sourceRole: Role | null = null;\n editingRoleName: { name: string } | null = null;\n loadingIndicator = false;\n\n readonly indexTemplate = viewChild.required<TemplateRef<unknown>>('indexTemplate');\n\n readonly actionsTemplate = viewChild.required<TemplateRef<unknown>>('actionsTemplate');\n\n readonly editorModalTemplate = viewChild.required<TemplateRef<unknown>>('editorModal');\n\n roleEditor: RoleEditorComponent | null = null;\n\n ngOnInit() {\n const gT = (key: string) => this.translationService.getTranslation(key);\n\n this.columns = [\n { prop: 'index', name: '#', width: 50, cellTemplate: this.indexTemplate(), canAutoResize: false },\n { prop: 'name', name: gT('roles.management.Name'), width: 180 },\n { prop: 'description', name: gT('roles.management.Description'), width: 320 },\n { prop: 'usersCount', name: gT('roles.management.Users'), width: 50 },\n { name: '', width: 160, cellTemplate: this.actionsTemplate(), resizeable: false, canAutoResize: false, sortable: false, draggable: false }\n ];\n\n this.loadData();\n }\n\n setRoleEditorComponent(roleEditor: RoleEditorComponent) {\n this.roleEditor = roleEditor;\n\n if (this.sourceRole == null)\n this.editedRole = this.roleEditor.newRole(this.allPermissions);\n else\n this.editedRole = this.roleEditor.editRole(this.sourceRole, this.allPermissions);\n }\n\n addNewRoleToList() {\n if (this.sourceRole) {\n Object.assign(this.sourceRole, this.editedRole);\n\n let sourceIndex = this.rowsCache.indexOf(this.sourceRole, 0);\n if (sourceIndex > -1) {\n Utilities.moveArrayItem(this.rowsCache, sourceIndex, 0);\n }\n\n sourceIndex = this.rows.indexOf(this.sourceRole, 0);\n if (sourceIndex > -1) {\n Utilities.moveArrayItem(this.rows, sourceIndex, 0);\n }\n\n this.editedRole = null;\n this.sourceRole = null;\n } else {\n const role = new Role();\n Object.assign(role, this.editedRole);\n this.editedRole = null;\n\n let maxIndex = 0;\n for (const r of this.rowsCache) {\n if ((r as RoleIndex).index > maxIndex) {\n maxIndex = (r as RoleIndex).index;\n }\n }\n\n (role as RoleIndex).index = maxIndex + 1;\n\n this.rowsCache.splice(0, 0, role);\n this.rows.splice(0, 0, role);\n this.rows = [...this.rows];\n }\n }\n\n loadData() {\n this.alertService.startLoadingMessage();\n this.loadingIndicator = true;\n\n this.accountService.getRolesAndPermissions()\n .subscribe({\n next: results => {\n this.alertService.stopLoadingMessage();\n this.loadingIndicator = false;\n\n const roles = results[0];\n const permissions = results[1];\n\n roles.forEach((role, index) => {\n (role as RoleIndex).index = index + 1;\n });\n\n this.rowsCache = [...roles];\n this.rows = roles;\n\n this.allPermissions = permissions;\n },\n error: error => {\n this.alertService.stopLoadingMessage();\n this.loadingIndicator = false;\n\n this.alertService.showStickyMessage('Load Error',\n `Unable to retrieve roles from the server.\\r\\nError: \"${Utilities.getHttpResponseMessage(error)}\"`,\n MessageSeverity.error, error);\n }\n });\n }\n\n onSearchChanged(value: string) {\n this.rows = this.rowsCache.filter(r => Utilities.searchArray(value, false, r.name, r.description));\n }\n\n newRole() {\n this.editingRoleName = null;\n this.sourceRole = null;\n\n this.openRoleEditor();\n }\n\n editRole(row: Role) {\n this.editingRoleName = { name: row.name };\n this.sourceRole = row;\n\n this.openRoleEditor();\n }\n\n openRoleEditor() {\n const modalRef = this.modalService.open(this.editorModalTemplate(), {\n size: 'lg',\n backdrop: 'static'\n });\n\n modalRef.shown.subscribe(() => {\n if (!this.roleEditor)\n throw new Error('The role editor component was not set.');\n\n this.roleEditor.changesSavedCallback = () => {\n this.addNewRoleToList();\n modalRef.close();\n };\n\n this.roleEditor.changesCancelledCallback = () => {\n this.editedRole = null;\n this.sourceRole = null;\n modalRef.close();\n };\n });\n\n modalRef.hidden.subscribe(() => {\n if (!this.roleEditor)\n throw new Error('The role editor component was not set.');\n\n this.editingRoleName = null;\n this.roleEditor.resetForm(true);\n this.roleEditor = null;\n });\n }\n\n deleteRole(row: Role) {\n this.alertService.showDialog(`Are you sure you want to delete the \"${row.name}\" role?`,\n DialogType.confirm, () => this.deleteRoleHelper(row));\n }\n\n deleteRoleHelper(row: Role) {\n this.alertService.startLoadingMessage('Deleting...');\n this.loadingIndicator = true;\n\n this.accountService.deleteRole(row)\n .subscribe({\n next: () => {\n this.alertService.stopLoadingMessage();\n this.loadingIndicator = false;\n\n this.rowsCache = this.rowsCache.filter(item => item !== row);\n this.rows = this.rows.filter(item => item !== row);\n },\n error: error => {\n this.alertService.stopLoadingMessage();\n this.loadingIndicator = false;\n\n this.alertService.showStickyMessage('Delete Error',\n `An error occurred whilst deleting the role.\\r\\nError: \"${Utilities.getHttpResponseMessage(error)}\"`,\n MessageSeverity.error, error);\n }\n });\n }\n\n get canManageRoles() {\n return this.accountService.userHasPermission(Permissions.manageRoles);\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/controls/search-box.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 10,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 15,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        277,
                        364
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component, ElementRef, HostListener, input, output, viewChild } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n selector: 'app-search-box',\n templateUrl: './search-box.component.html',\n styleUrl: './search-box.component.scss',\n imports: [FormsModule]\n})\nexport class SearchBoxComponent {\n readonly placeholder = input('Search...');\n\n readonly searchChange = output<string>();\n\n readonly searchInput = viewChild.required<ElementRef>('searchInput');\n\n onValueChange(value: string) {\n setTimeout(() => this.searchChange.emit(value));\n }\n\n @HostListener('keydown.escape')\n clear() {\n const searchInput = this.searchInput();\n\n searchInput.nativeElement.value = '';\n this.onValueChange(searchInput.nativeElement.value);\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/controls/statistics-demo.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 16,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 21,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        263,
                        695
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { AlertService, DialogType, MessageSeverity } from '../../services/alert.service';\nimport { BaseChartDirective } from 'ng2-charts';\nimport { ChartEvent, ChartType } from 'chart.js';\nimport { NgbDropdown, NgbDropdownToggle, NgbDropdownMenu, NgbDropdownButtonItem, NgbDropdownItem }\n from '@ng-bootstrap/ng-bootstrap';\n\ninterface ChartEventArgs { event: ChartEvent; active: object[] }\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@typescript-eslint/no-unused-vars",
                "message": "Definition for rule '@typescript-eslint/no-unused-vars' was not found.",
                "line": 123,
                "column": 3,
                "endLine": 123,
                "endColumn": 64,
                "severity": 2,
                "nodeType": null
              },
              {
                "ruleId": "@typescript-eslint/no-unused-vars",
                "message": "Definition for rule '@typescript-eslint/no-unused-vars' was not found.",
                "line": 128,
                "column": 3,
                "endLine": 128,
                "endColumn": 64,
                "severity": 2,
                "nodeType": null
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component, OnInit, OnDestroy, inject, viewChild } from '@angular/core';\nimport { AlertService, DialogType, MessageSeverity } from '../../services/alert.service';\nimport { BaseChartDirective } from 'ng2-charts';\nimport { ChartEvent, ChartType } from 'chart.js';\nimport { NgbDropdown, NgbDropdownToggle, NgbDropdownMenu, NgbDropdownButtonItem, NgbDropdownItem }\n from '@ng-bootstrap/ng-bootstrap';\n\ninterface ChartEventArgs { event: ChartEvent; active: object[] }\n\n@Component({\n selector: 'app-statistics-demo',\n templateUrl: './statistics-demo.component.html',\n styleUrl: './statistics-demo.component.scss',\n imports: [BaseChartDirective, NgbDropdown, NgbDropdownToggle, NgbDropdownMenu, NgbDropdownButtonItem, NgbDropdownItem]\n})\nexport class StatisticsDemoComponent implements OnInit, OnDestroy {\n private alertService = inject(AlertService);\n\n chartOptions: object | undefined;\n chartType: ChartType = 'line';\n chartLabels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'];\n chartData = [\n {\n data: [65, 59, 80, 81, 56, 55],\n label: 'Series A',\n fill: 'origin',\n },\n {\n data: [28, 48, 40, 19, 86, 27],\n label: 'Series B',\n fill: 'origin',\n },\n {\n data: [18, 48, 77, 9, 100, 27],\n label: 'Series C',\n fill: 'origin',\n }\n ];\n\n timerReference: ReturnType<typeof setInterval> | undefined;\n\n readonly chart = viewChild.required(BaseChartDirective);\n\n ngOnInit() {\n this.refreshChartOptions();\n this.timerReference = setInterval(() => this.randomize(), 5000);\n }\n\n ngOnDestroy() {\n clearInterval(this.timerReference);\n }\n\n refreshChartOptions() {\n const baseOptions = {\n responsive: true,\n maintainAspectRatio: false,\n title: {\n display: false,\n fontSize: 16,\n text: 'Important Stuff'\n }\n };\n\n if (this.chartType != 'line') {\n this.chartOptions = baseOptions;\n }\n else {\n const lineChartOptions = {\n elements: {\n line: {\n tension: 0.5\n }\n }\n };\n\n this.chartOptions = { ...baseOptions, ...lineChartOptions };\n }\n }\n\n randomize(): void {\n for (const series of this.chartData) {\n for (let j = 0; j < series.data.length; j++) {\n series.data[j] = Math.floor((Math.random() angular.json aspnetcore-https.js eslint.config.js karma.conf.js lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules nuget.config package.json package-lock.json public quickapp.client.esproj QuickApp.report.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json 100) + 1);\n }\n }\n\n this.chart().update();\n }\n\n changeChartType(type: ChartType) {\n this.chartType = type;\n this.refreshChartOptions();\n }\n\n showMessage(msg: string): void {\n this.alertService.showMessage('Demo', msg, MessageSeverity.info);\n }\n\n showDialog(msg: string): void {\n this.alertService.showDialog(msg, DialogType.prompt, (val) => this.configure(true, val), () => this.configure(false));\n }\n\n configure(response: boolean, value?: string) {\n if (response) {\n this.alertService.showStickyMessage('Simulating...', '', MessageSeverity.wait);\n\n setTimeout(() => {\n this.alertService.resetStickyMessage();\n this.alertService.showMessage('Demo', `Your settings was successfully configured to \"${value}\"`, MessageSeverity.success);\n }, 2000);\n } else {\n this.alertService.showMessage('Demo', 'Operation cancelled by user', MessageSeverity.default);\n }\n }\n\n\n // eslint-disable-next-line @typescript-eslint/no-unused-vars\n chartHovered(e: ChartEventArgs): void {\n // Demo\n }\n\n // eslint-disable-next-line @typescript-eslint/no-unused-vars\n chartClicked(e: Partial<ChartEventArgs>): void {\n // Demo\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/controls/todo-demo.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 30,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 35,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        283,
                        1230
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { NgClass } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { NgbModal, NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\nimport { TableColumn, NgxDatatableModule } from '@siemens/ngx-datatable';\n\nimport { AuthService } from '../../services/auth.service';\nimport { AlertService, MessageSeverity, DialogType } from '../../services/alert.service';\nimport { AppTranslationService } from '../../services/app-translation.service';\nimport { LocalStoreManager } from '../../services/local-store-manager.service';\nimport { Utilities } from '../../services/utilities';\nimport { SearchBoxComponent } from './search-box.component';\nimport { AutofocusDirective } from '../../directives/autofocus.directive';\n\ninterface Todo {\n $$index?: number;\n completed: boolean;\n important: boolean\n name: string;\n description: string\n}\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component, OnInit, OnDestroy, TemplateRef, inject, input, viewChild } from '@angular/core';\nimport { NgClass } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { NgbModal, NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\nimport { TableColumn, NgxDatatableModule } from '@siemens/ngx-datatable';\n\nimport { AuthService } from '../../services/auth.service';\nimport { AlertService, MessageSeverity, DialogType } from '../../services/alert.service';\nimport { AppTranslationService } from '../../services/app-translation.service';\nimport { LocalStoreManager } from '../../services/local-store-manager.service';\nimport { Utilities } from '../../services/utilities';\nimport { SearchBoxComponent } from './search-box.component';\nimport { AutofocusDirective } from '../../directives/autofocus.directive';\n\ninterface Todo {\n $$index?: number;\n completed: boolean;\n important: boolean\n name: string;\n description: string\n}\n\n@Component({\n selector: 'app-todo-demo',\n templateUrl: './todo-demo.component.html',\n styleUrl: './todo-demo.component.scss',\n imports: [SearchBoxComponent, NgxDatatableModule, FormsModule, AutofocusDirective, NgbTooltip, NgClass, TranslateModule]\n})\nexport class TodoDemoComponent implements OnInit, OnDestroy {\n private alertService = inject(AlertService);\n private translationService = inject(AppTranslationService);\n private localStorage = inject(LocalStoreManager);\n private authService = inject(AuthService);\n private modalService = inject(NgbModal);\n\n public static readonly DBKeyTodoDemo = 'todo-demo.todo_list';\n\n columns: TableColumn[] = [];\n rows: Todo[] = [];\n rowsCache: Todo[] = [];\n editing: Record<string, boolean> = {};\n taskEdit: Partial<Todo> = {};\n isDataLoaded = false;\n loadingIndicator = true;\n formResetToggle = true;\n private _currentUserId: string | undefined;\n private _hideCompletedTasks = false;\n\n get currentUserId() {\n if (this.authService.currentUser) {\n this._currentUserId = this.authService.currentUser.id;\n }\n\n return this._currentUserId;\n }\n\n set hideCompletedTasks(value: boolean) {\n if (value) {\n this.rows = this.rowsCache.filter(r => !r.completed);\n } else {\n this.rows = [...this.rowsCache];\n }\n\n this._hideCompletedTasks = value;\n }\n get hideCompletedTasks() {\n return this._hideCompletedTasks;\n }\n\n readonly verticalScrollbar = input(false);\n\n readonly statusHeaderTemplate = viewChild.required<TemplateRef<unknown>>('statusHeaderTemplate');\n\n readonly statusTemplate = viewChild.required<TemplateRef<unknown>>('statusTemplate');\n\n readonly nameTemplate = viewChild.required<TemplateRef<unknown>>('nameTemplate');\n\n readonly descriptionTemplate = viewChild.required<TemplateRef<unknown>>('descriptionTemplate');\n\n readonly actionsTemplate = viewChild.required<TemplateRef<unknown>>('actionsTemplate');\n\n readonly editorModalTemplate = viewChild.required<TemplateRef<unknown>>('editorModal');\n\n ngOnInit() {\n this.loadingIndicator = true;\n\n this.fetch(data => {\n this.refreshDataIndexes(data);\n this.rows = data;\n this.rowsCache = [...data];\n this.isDataLoaded = true;\n\n setTimeout(() => { this.loadingIndicator = false; }, 1500);\n });\n\n const gT = (key: string) => this.translationService.getTranslation(key);\n\n this.columns = [\n {\n prop: 'completed',\n name: '',\n width: 30,\n headerTemplate: this.statusHeaderTemplate(),\n cellTemplate: this.statusTemplate(),\n resizeable: false,\n canAutoResize: false,\n sortable: false,\n draggable: false\n },\n {\n prop: 'name',\n name: gT('todoDemo.management.Task'),\n width: 100,\n cellTemplate: this.nameTemplate()\n },\n {\n prop: 'description',\n name: gT('todoDemo.management.Description'),\n width: 300,\n cellTemplate: this.descriptionTemplate()\n },\n {\n name: '',\n width: 80,\n cellTemplate: this.actionsTemplate(),\n resizeable: false,\n canAutoResize: false,\n sortable: false,\n draggable: false\n }\n ];\n }\n\n ngOnDestroy() {\n this.saveToDisk();\n }\n\n fetch(callback: (data: Todo[]) => void) {\n let data = this.getFromDisk();\n\n if (data == null) {\n setTimeout(() => {\n data = this.getFromDisk();\n\n if (data == null) {\n data = [\n {\n completed: true,\n important: true,\n name: 'Create visual studio extension',\n description: 'Create a visual studio VSIX extension package that will add this project as an aspnet-core project template'\n },\n {\n completed: false,\n important: true,\n name: 'Do a quick how-to writeup',\n description: ''\n },\n {\n completed: false,\n important: false,\n name: 'Create aspnet-core/Angular tutorials based on this project',\n description: 'Create tutorials (blog/video/youtube) on how to build applications (full stack)' +\n ' using aspnet-core/Angular. The tutorial will focus on getting productive with the technology right' +\n ' away rather than the details on how and why they work so audience can get onboard quickly.'\n },\n ];\n }\n\n callback(data);\n }, 1000);\n } else {\n callback(data);\n }\n }\n\n refreshDataIndexes(data: Todo[]) {\n let index = 0;\n\n for (const i of data) {\n i.$$index = index++;\n }\n }\n\n onSearchChanged(value: string) {\n this.rows = this.rowsCache.filter(r =>\n Utilities.searchArray(value, false, r.name, r.description) ||\n value === 'important' && r.important ||\n value === 'not important' && !r.important);\n }\n\n showErrorAlert(caption: string, message: string) {\n this.alertService.showMessage(caption, message, MessageSeverity.error);\n }\n\n addTask() {\n this.formResetToggle = false;\n\n setTimeout(() => {\n this.formResetToggle = true;\n\n this.taskEdit = {};\n this.modalService.open(this.editorModalTemplate());\n });\n }\n\n save() {\n this.rowsCache.splice(0, 0, this.taskEdit as Todo);\n this.rows.splice(0, 0, this.taskEdit as Todo);\n this.refreshDataIndexes(this.rowsCache);\n this.rows = [...this.rows];\n\n this.saveToDisk();\n return true;\n }\n\n updateValue(event: Event, cell: 'name' | 'description', row: Todo) {\n this.editing[row.$$index + '-' + cell] = false;\n row[cell] = (event.target as HTMLInputElement).value;\n this.rows = [...this.rows];\n\n this.saveToDisk();\n }\n\n delete(row: Todo) {\n this.alertService.showDialog('Are you sure you want to delete the task?', DialogType.confirm, () => this.deleteHelper(row));\n }\n\n deleteHelper(row: Todo) {\n this.rowsCache = this.rowsCache.filter(item => item !== row);\n this.rows = this.rows.filter(item => item !== row);\n\n this.saveToDisk();\n }\n\n getFromDisk() {\n return this.localStorage.getDataObject<Todo[]>(`${TodoDemoComponent.DBKeyTodoDemo}:${this.currentUserId}`);\n }\n\n saveToDisk() {\n if (this.isDataLoaded) {\n this.localStorage.saveSyncedSessionData(this.rowsCache, `${TodoDemoComponent.DBKeyTodoDemo}:${this.currentUserId}`);\n }\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/controls/user-info.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 24,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 32,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        274,
                        1209
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { NgModel, NgForm, FormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { NgSelectComponent, NgLabelTemplateDirective, NgOptionTemplateDirective } from '@ng-select/ng-select';\n\nimport { AlertService, MessageSeverity } from '../../services/alert.service';\nimport { AccountService } from '../../services/account.service';\nimport { Utilities } from '../../services/utilities';\nimport { User } from '../../models/user.model';\nimport { UserEdit } from '../../models/user-edit.model';\nimport { Role } from '../../models/role.model';\nimport { Permissions } from '../../models/permission.model';\nimport { NgClass } from '@angular/common';\nimport { AutofocusDirective } from '../../directives/autofocus.directive';\nimport { EqualValidator } from '../../directives/equal-validator.directive';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component, OnInit, Input, inject, input, output, viewChild } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { NgModel, NgForm, FormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { NgSelectComponent, NgLabelTemplateDirective, NgOptionTemplateDirective } from '@ng-select/ng-select';\n\nimport { AlertService, MessageSeverity } from '../../services/alert.service';\nimport { AccountService } from '../../services/account.service';\nimport { Utilities } from '../../services/utilities';\nimport { User } from '../../models/user.model';\nimport { UserEdit } from '../../models/user-edit.model';\nimport { Role } from '../../models/role.model';\nimport { Permissions } from '../../models/permission.model';\nimport { NgClass } from '@angular/common';\nimport { AutofocusDirective } from '../../directives/autofocus.directive';\nimport { EqualValidator } from '../../directives/equal-validator.directive';\n\n@Component({\n selector: 'app-user-info',\n templateUrl: './user-info.component.html',\n styleUrl: './user-info.component.scss',\n imports: [\n FormsModule, AutofocusDirective, NgClass, EqualValidator, NgSelectComponent, NgLabelTemplateDirective,\n NgOptionTemplateDirective, TranslateModule\n ]\n})\nexport class UserInfoComponent implements OnInit {\n private alertService = inject(AlertService);\n private accountService = inject(AccountService);\n\n public isEditMode = false;\n public isNewUser = false;\n public isSaving = false;\n public isChangePassword = false;\n public isEditingSelf = false;\n public showValidationErrors = false;\n public uniqueId = Utilities.uniqueId();\n public user = new User();\n public userEdit = new UserEdit();\n public allRoles: Role[] = [];\n\n public formResetToggle = true;\n\n public changesSavedCallback: (() => void) | undefined;\n public changesFailedCallback: (() => void) | undefined;\n public changesCancelledCallback: (() => void) | undefined;\n\n readonly isViewOnly = input(false);\n @Input() isGeneralEditor = false;\n\n // Outupt to broadcast this instance so it can be accessible from within ng-bootstrap modal template\n readonly afterOnInit = output<UserInfoComponent>();\n\n readonly form = viewChild<NgForm>('f');\n\n readonly userName = viewChild<NgModel>('userName');\n\n readonly userPassword = viewChild<NgModel>('userPassword');\n\n readonly email = viewChild<NgModel>('email');\n\n readonly currentPassword = viewChild<NgModel>('currentPassword');\n\n readonly newPassword = viewChild<NgModel>('newPassword');\n\n readonly confirmPassword = viewChild<NgModel>('confirmPassword');\n\n readonly roles = viewChild<NgModel>('roles');\n\n ngOnInit() {\n if (!this.isGeneralEditor) {\n this.loadCurrentUserData();\n }\n\n this.afterOnInit.emit(this);\n }\n\n private loadCurrentUserData() {\n this.alertService.startLoadingMessage();\n\n if (this.canViewAllRoles) {\n this.accountService.getUserAndRoles()\n .subscribe({\n next: results => this.onCurrentUserDataLoadSuccessful(results[0], results[1]),\n error: error => this.onCurrentUserDataLoadFailed(error)\n });\n } else {\n this.accountService.getUser()\n .subscribe({\n next: user => this.onCurrentUserDataLoadSuccessful(user, user.roles.map(role => new Role(role))),\n error: error => this.onCurrentUserDataLoadFailed(error)\n });\n }\n }\n\n private onCurrentUserDataLoadSuccessful(user: User, roles: Role[]) {\n this.alertService.stopLoadingMessage();\n this.user = user;\n this.allRoles = roles;\n }\n\n private onCurrentUserDataLoadFailed(error: HttpErrorResponse) {\n this.alertService.stopLoadingMessage();\n this.alertService.showStickyMessage('Load Error',\n `Unable to retrieve user data from the server.\\r\\nError: \"${Utilities.getHttpResponseMessage(error)}\"`,\n MessageSeverity.error, error);\n\n this.user = new User();\n }\n\n getRoleByName(name: string) {\n return this.allRoles.find((r) => r.name === name);\n }\n\n showErrorAlert(caption: string, message: string) {\n this.alertService.showMessage(caption, message, MessageSeverity.error);\n }\n\n deletePasswordFromUser(user: UserEdit | User) {\n const userEdit = user as UserEdit;\n\n delete userEdit.currentPassword;\n delete userEdit.newPassword;\n delete userEdit.confirmPassword;\n }\n\n edit() {\n if (!this.isGeneralEditor) {\n this.isEditingSelf = true;\n this.userEdit = new UserEdit();\n Object.assign(this.userEdit, this.user);\n } else {\n if (!this.userEdit) {\n this.userEdit = new UserEdit();\n }\n\n this.isEditingSelf = this.accountService.currentUser ? this.userEdit.id === this.accountService.currentUser.id : false;\n }\n\n this.isEditMode = true;\n this.showValidationErrors = true;\n this.isChangePassword = false;\n }\n\n showValidationAlerts() {\n if (!this.userName()?.valid)\n this.showErrorAlert('User name is required', 'Please enter a user name (minimum of 2 and maximum of 200 characters)');\n\n if (this.userPassword() && !this.userPassword()?.valid)\n this.showErrorAlert('Password is required', 'Please enter the current password');\n\n if (this.email()?.errors?.['required'])\n this.showErrorAlert('Email is required', 'Please enter an email address (maximum of 200 characters)');\n\n if (this.email()?.errors?.['pattern'])\n this.showErrorAlert('Invalid Email', 'Please enter a valid email address');\n\n if (this.isChangePassword && this.isEditingSelf && !this.currentPassword()?.valid)\n this.showErrorAlert('Current password is required', 'Please enter the current password');\n\n if ((this.isChangePassword || this.isNewUser) && !this.newPassword()?.valid)\n this.showErrorAlert('New password is required', 'Please enter the new password (minimum of 6 characters)');\n\n if ((this.isChangePassword || this.isNewUser) && this.newPassword()?.valid && this.confirmPassword()?.errors?.['required'])\n this.showErrorAlert('Confirmation password is required', 'Please enter the confirmation password');\n\n if ((this.isChangePassword || this.isNewUser) && this.newPassword()?.valid && this.confirmPassword()?.errors?.['validateEqual'])\n this.showErrorAlert('Passwword mismatch', 'New password and confirmation password do not match');\n\n if (this.canAssignRoles && !this.roles()?.valid)\n this.showErrorAlert('Roles is required', 'Please select a minimum of 1 role');\n }\n\n save() {\n this.isSaving = true;\n this.alertService.startLoadingMessage('Saving changes...');\n\n if (this.isNewUser) {\n this.accountService.newUser(this.userEdit)\n .subscribe({\n next: user => this.saveSuccessHelper(user),\n error: error => this.saveFailedHelper(error)\n });\n } else {\n this.accountService.updateUser(this.userEdit)\n .subscribe({\n next: () => this.saveSuccessHelper(),\n error: error => this.saveFailedHelper(error)\n });\n }\n }\n\n private saveSuccessHelper(user?: User) {\n this.testIsRoleUserCountChanged(this.user, this.userEdit);\n\n if (user) {\n Object.assign(this.userEdit, user);\n }\n\n this.isSaving = false;\n this.alertService.stopLoadingMessage();\n this.isChangePassword = false;\n this.showValidationErrors = false;\n\n this.deletePasswordFromUser(this.userEdit);\n Object.assign(this.user, this.userEdit);\n this.userEdit = new UserEdit();\n this.resetForm();\n\n if (this.isGeneralEditor) {\n if (this.isNewUser) {\n this.alertService.showMessage('Success', `User \"${this.user.userName}\" was created successfully`, MessageSeverity.success);\n } else if (!this.isEditingSelf) {\n this.alertService.showMessage('Success', `Changes to user \"${this.user.userName}\" was saved successfully`, MessageSeverity.success);\n }\n }\n\n if (this.isEditingSelf) {\n this.alertService.showMessage('Success', 'Changes to your User Profile was saved successfully', MessageSeverity.success);\n this.refreshLoggedInUser();\n }\n\n this.isEditMode = false;\n\n if (this.changesSavedCallback) {\n this.changesSavedCallback();\n }\n }\n\n private saveFailedHelper(error: HttpErrorResponse) {\n this.isSaving = false;\n this.alertService.stopLoadingMessage();\n this.alertService.showStickyMessage('Save Error', 'The below errors occurred whilst saving your changes:', MessageSeverity.error, error);\n this.alertService.showStickyMessage(error, null, MessageSeverity.error);\n\n if (this.changesFailedCallback) {\n this.changesFailedCallback();\n }\n }\n\n private testIsRoleUserCountChanged(currentUser: User, editedUser: User) {\n const rolesAdded = this.isNewUser ? editedUser.roles : editedUser.roles.filter(role => currentUser.roles.indexOf(role) === -1);\n const rolesRemoved = this.isNewUser ? [] : currentUser.roles.filter(role => editedUser.roles.indexOf(role) === -1);\n\n const modifiedRoles = rolesAdded.concat(rolesRemoved);\n\n if (modifiedRoles.length) {\n setTimeout(() => this.accountService.onRolesUserCountChanged(modifiedRoles));\n }\n }\n\n cancel() {\n if (this.isGeneralEditor) {\n this.userEdit = this.user = new UserEdit();\n } else {\n this.userEdit = new UserEdit();\n }\n\n this.showValidationErrors = false;\n this.resetForm();\n\n this.alertService.showMessage('Cancelled', 'Operation cancelled by user', MessageSeverity.default);\n this.alertService.resetStickyMessage();\n\n if (!this.isGeneralEditor) {\n this.isEditMode = false;\n }\n\n if (this.changesCancelledCallback) {\n this.changesCancelledCallback();\n }\n }\n\n close() {\n this.userEdit = this.user = new UserEdit();\n this.showValidationErrors = false;\n this.resetForm();\n this.isEditMode = false;\n\n if (this.changesSavedCallback) {\n this.changesSavedCallback();\n }\n }\n\n private refreshLoggedInUser() {\n this.accountService.refreshLoggedInUser()\n .subscribe({\n next: () => {\n this.loadCurrentUserData();\n },\n error: error => {\n this.alertService.resetStickyMessage();\n this.alertService.showStickyMessage('Refresh failed',\n 'An error occurred whilst refreshing logged in user information from the server', MessageSeverity.error, error);\n }\n });\n }\n\n changePassword() {\n this.isChangePassword = true;\n }\n\n unlockUser() {\n this.isSaving = true;\n this.alertService.startLoadingMessage('Unblocking user...');\n\n this.accountService.unblockUser(this.userEdit.id)\n .subscribe({\n next: () => {\n this.isSaving = false;\n this.userEdit.isLockedOut = false;\n this.alertService.stopLoadingMessage();\n this.alertService.showMessage('Success', 'User has been successfully unblocked', MessageSeverity.success);\n },\n error: error => {\n this.isSaving = false;\n this.alertService.stopLoadingMessage();\n this.alertService.showStickyMessage('Unblock Error',\n 'The below errors occurred whilst unblocking the user:', MessageSeverity.error, error);\n this.alertService.showStickyMessage(error, null, MessageSeverity.error);\n }\n });\n }\n\n resetForm(replace = false) {\n this.isChangePassword = false;\n\n if (!replace) {\n this.form()?.reset();\n } else {\n this.formResetToggle = false;\n\n setTimeout(() => {\n this.formResetToggle = true;\n });\n }\n }\n\n newUser(allRoles: Role[]) {\n this.isGeneralEditor = true;\n this.isNewUser = true;\n\n this.allRoles = [...allRoles];\n this.user = this.userEdit = new UserEdit();\n this.userEdit.isEnabled = true;\n this.edit();\n\n return this.userEdit;\n }\n\n editUser(user: User, allRoles: Role[]) {\n if (user) {\n this.isGeneralEditor = true;\n this.isNewUser = false;\n\n this.setRoles(user, allRoles);\n this.user = new User();\n this.userEdit = new UserEdit();\n Object.assign(this.user, user);\n Object.assign(this.userEdit, user);\n this.edit();\n\n return this.userEdit;\n } else {\n return this.newUser(allRoles);\n }\n }\n\n displayUser(user: User, allRoles?: Role[]) {\n this.user = new User();\n Object.assign(this.user, user);\n this.deletePasswordFromUser(this.user);\n this.setRoles(user, allRoles);\n\n this.isEditMode = false;\n }\n\n private setRoles(user: User, allRoles?: Role[]) {\n this.allRoles = allRoles ? [...allRoles] : [];\n\n for (const role of user.roles) {\n if (!this.allRoles.some(r => r.name === role)) {\n this.allRoles.unshift(new Role(role));\n }\n }\n }\n\n get canViewAllRoles() {\n return this.accountService.userHasPermission(Permissions.viewRoles);\n }\n\n get canAssignRoles() {\n return this.accountService.userHasPermission(Permissions.assignRoles);\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/controls/user-preferences.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 19,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 24,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        233,
                        863
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { NgSelectComponent, NgOptionComponent } from '@ng-select/ng-select';\n\nimport { AlertService, DialogType, MessageSeverity } from '../../services/alert.service';\nimport { ConfigurationService } from '../../services/configuration.service';\nimport { AccountService } from '../../services/account.service';\nimport { ThemeManager } from '../../services/theme-manager';\nimport { Utilities } from '../../services/utilities';\nimport { Permissions } from '../../models/permission.model';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component, inject } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { NgSelectComponent, NgOptionComponent } from '@ng-select/ng-select';\n\nimport { AlertService, DialogType, MessageSeverity } from '../../services/alert.service';\nimport { ConfigurationService } from '../../services/configuration.service';\nimport { AccountService } from '../../services/account.service';\nimport { ThemeManager } from '../../services/theme-manager';\nimport { Utilities } from '../../services/utilities';\nimport { Permissions } from '../../models/permission.model';\n\n@Component({\n selector: 'app-user-preferences',\n templateUrl: './user-preferences.component.html',\n styleUrl: './user-preferences.component.scss',\n imports: [NgSelectComponent, FormsModule, NgOptionComponent, TranslateModule]\n})\nexport class UserPreferencesComponent {\n private alertService = inject(AlertService);\n private accountService = inject(AccountService);\n themeManager = inject(ThemeManager);\n configurations = inject(ConfigurationService);\n\n reloadFromServer() {\n this.alertService.startLoadingMessage();\n\n this.accountService.getUserPreferences()\n .subscribe({\n next: results => {\n this.alertService.stopLoadingMessage();\n\n this.configurations.import(results);\n\n this.alertService.showMessage('Defaults loaded!', '', MessageSeverity.info);\n },\n error: error => {\n this.alertService.stopLoadingMessage();\n this.alertService.showStickyMessage('Load Error',\n `Unable to retrieve user preferences from the server.\\r\\nError: \"${Utilities.getHttpResponseMessage(error)}\"`,\n MessageSeverity.error, error);\n }\n });\n }\n\n setAsDefault() {\n this.alertService.showDialog('Are you sure you want to set the current configuration as your new defaults?', DialogType.confirm,\n () => this.setAsDefaultHelper(),\n () => this.alertService.showMessage('Operation Cancelled!', '', MessageSeverity.default));\n }\n\n setAsDefaultHelper() {\n this.alertService.startLoadingMessage('', 'Saving new defaults');\n\n this.accountService.updateUserPreferences(this.configurations.export())\n .subscribe({\n next: () => {\n this.alertService.stopLoadingMessage();\n this.alertService.showMessage('New Defaults', 'Account defaults updated successfully', MessageSeverity.success);\n },\n error: error => {\n this.alertService.stopLoadingMessage();\n this.alertService.showStickyMessage('Save Error',\n `An error occurred whilst saving configuration defaults.\\r\\nError: \"${Utilities.getHttpResponseMessage(error)}\"`,\n MessageSeverity.error, error);\n }\n });\n }\n\n resetDefault() {\n this.alertService.showDialog('Are you sure you want to reset your defaults?', DialogType.confirm,\n () => this.resetDefaultHelper(),\n () => this.alertService.showMessage('Operation Cancelled!', '', MessageSeverity.default));\n }\n\n resetDefaultHelper() {\n this.alertService.startLoadingMessage('', 'Resetting defaults');\n\n this.accountService.updateUserPreferences(null)\n .subscribe({\n next: () => {\n this.alertService.stopLoadingMessage();\n this.configurations.import(null);\n this.alertService.showMessage('Defaults Reset', 'Account defaults reset completed successfully', MessageSeverity.success);\n },\n error: error => {\n this.alertService.stopLoadingMessage();\n this.alertService.showStickyMessage('Save Error',\n `An error occurred whilst resetting configuration defaults.\\r\\nError: \"${Utilities.getHttpResponseMessage(error)}\"`,\n MessageSeverity.error, error);\n }\n });\n }\n\n get canViewCustomers() {\n return this.accountService.userHasPermission(Permissions.viewUsers); // eg. viewCustomersPermission\n }\n\n get canViewProducts() {\n return this.accountService.userHasPermission(Permissions.viewUsers); // eg. viewProductsPermission\n }\n\n get canViewOrders() {\n return !!true; // eg. viewOrdersPermission\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/controls/users-management.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 28,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 33,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        265,
                        1227
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { TableColumn, NgxDatatableModule } from '@siemens/ngx-datatable';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { AlertService, DialogType, MessageSeverity } from '../../services/alert.service';\nimport { AppTranslationService } from '../../services/app-translation.service';\nimport { AccountService } from '../../services/account.service';\nimport { Utilities } from '../../services/utilities';\nimport { User } from '../../models/user.model';\nimport { Role } from '../../models/role.model';\nimport { Permissions } from '../../models/permission.model';\nimport { UserEdit } from '../../models/user-edit.model';\nimport { UserInfoComponent } from './user-info.component';\nimport { SearchBoxComponent } from './search-box.component';\n\ninterface UserIndex extends User {\n index: number;\n}\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component, OnInit, TemplateRef, inject, viewChild } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { TableColumn, NgxDatatableModule } from '@siemens/ngx-datatable';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { AlertService, DialogType, MessageSeverity } from '../../services/alert.service';\nimport { AppTranslationService } from '../../services/app-translation.service';\nimport { AccountService } from '../../services/account.service';\nimport { Utilities } from '../../services/utilities';\nimport { User } from '../../models/user.model';\nimport { Role } from '../../models/role.model';\nimport { Permissions } from '../../models/permission.model';\nimport { UserEdit } from '../../models/user-edit.model';\nimport { UserInfoComponent } from './user-info.component';\nimport { SearchBoxComponent } from './search-box.component';\n\ninterface UserIndex extends User {\n index: number;\n}\n\n@Component({\n selector: 'app-users-management',\n templateUrl: './users-management.component.html',\n styleUrl: './users-management.component.scss',\n imports: [SearchBoxComponent, NgxDatatableModule, UserInfoComponent, TranslateModule]\n})\nexport class UsersManagementComponent implements OnInit {\n private alertService = inject(AlertService);\n private translationService = inject(AppTranslationService);\n private accountService = inject(AccountService);\n private modalService = inject(NgbModal);\n\n columns: TableColumn[] = [];\n rows: User[] = [];\n rowsCache: User[] = [];\n editedUser: UserEdit | null = null;\n sourceUser: UserEdit | null = null;\n editingUserName: { name: string } | null = null;\n loadingIndicator = false;\n\n allRoles: Role[] = [];\n\n readonly indexTemplate = viewChild.required<TemplateRef<unknown>>('indexTemplate');\n\n readonly userNameTemplate = viewChild.required<TemplateRef<unknown>>('userNameTemplate');\n\n readonly rolesTemplate = viewChild.required<TemplateRef<unknown>>('rolesTemplate');\n\n readonly actionsTemplate = viewChild.required<TemplateRef<unknown>>('actionsTemplate');\n\n readonly editorModalTemplate = viewChild.required<TemplateRef<unknown>>('editorModal');\n\n userEditor: UserInfoComponent | null = null;\n\n ngOnInit() {\n const gT = (key: string) => this.translationService.getTranslation(key);\n\n this.columns = [\n { prop: 'index', name: '#', width: 40, cellTemplate: this.indexTemplate(), canAutoResize: false },\n { prop: 'jobTitle', name: gT('users.management.Title'), width: 50 },\n { prop: 'userName', name: gT('users.management.UserName'), width: 90, cellTemplate: this.userNameTemplate() },\n { prop: 'fullName', name: gT('users.management.FullName'), width: 120 },\n { prop: 'email', name: gT('users.management.Email'), width: 140 },\n { prop: 'roles', name: gT('users.management.Roles'), width: 120, cellTemplate: this.rolesTemplate() },\n { prop: 'phoneNumber', name: gT('users.management.PhoneNumber'), width: 100 }\n ];\n\n if (this.canManageUsers) {\n this.columns.push({\n name: '',\n width: 160,\n cellTemplate: this.actionsTemplate(),\n resizeable: false,\n canAutoResize: false,\n sortable: false,\n draggable: false\n });\n }\n\n this.loadData();\n }\n\n setUserEditorComponent(userEditor: UserInfoComponent) {\n this.userEditor = userEditor;\n\n if (this.sourceUser == null)\n this.editedUser = this.userEditor.newUser(this.allRoles);\n else\n this.editedUser = this.userEditor.editUser(this.sourceUser, this.allRoles);\n }\n\n addNewUserToList() {\n if (this.sourceUser) {\n Object.assign(this.sourceUser, this.editedUser);\n\n let sourceIndex = this.rowsCache.indexOf(this.sourceUser, 0);\n if (sourceIndex > -1) {\n Utilities.moveArrayItem(this.rowsCache, sourceIndex, 0);\n }\n\n sourceIndex = this.rows.indexOf(this.sourceUser, 0);\n if (sourceIndex > -1) {\n Utilities.moveArrayItem(this.rows, sourceIndex, 0);\n }\n\n this.editedUser = null;\n this.sourceUser = null;\n } else {\n const user = new User();\n Object.assign(user, this.editedUser);\n this.editedUser = null;\n\n let maxIndex = 0;\n for (const u of this.rowsCache) {\n if ((u as UserIndex).index > maxIndex) {\n maxIndex = (u as UserIndex).index;\n }\n }\n\n (user as UserIndex).index = maxIndex + 1;\n\n this.rowsCache.splice(0, 0, user);\n this.rows.splice(0, 0, user);\n this.rows = [...this.rows];\n }\n }\n\n loadData() {\n this.alertService.startLoadingMessage();\n this.loadingIndicator = true;\n\n if (this.canViewRoles) {\n this.accountService.getUsersAndRoles()\n .subscribe({\n next: results => this.onDataLoadSuccessful(results[0], results[1]),\n error: error => this.onDataLoadFailed(error)\n });\n } else {\n this.accountService.getUsers()\n .subscribe({\n next: users => this.onDataLoadSuccessful(users, this.accountService.currentUser?.roles.map(x => new Role(x)) ?? []),\n error: error => this.onDataLoadFailed(error)\n });\n }\n }\n\n onDataLoadSuccessful(users: User[], roles: Role[]) {\n this.alertService.stopLoadingMessage();\n this.loadingIndicator = false;\n\n users.forEach((user, index) => {\n (user as UserIndex).index = index + 1;\n });\n\n this.rowsCache = [...users];\n this.rows = users;\n\n this.allRoles = roles;\n }\n\n onDataLoadFailed(error: HttpErrorResponse) {\n this.alertService.stopLoadingMessage();\n this.loadingIndicator = false;\n\n this.alertService.showStickyMessage('Load Error',\n `Unable to retrieve users from the server.\\r\\nError: \"${Utilities.getHttpResponseMessage(error)}\"`,\n MessageSeverity.error, error);\n }\n\n onSearchChanged(value: string) {\n this.rows = this.rowsCache.filter(r =>\n Utilities.searchArray(value, false, r.userName, r.fullName, r.email, r.phoneNumber, r.jobTitle, r.roles));\n }\n\n newUser() {\n this.editingUserName = null;\n this.sourceUser = null;\n this.openUserEditor();\n }\n\n editUser(row: UserEdit) {\n this.editingUserName = { name: row.userName };\n this.sourceUser = row;\n this.openUserEditor();\n }\n\n openUserEditor() {\n const modalRef = this.modalService.open(this.editorModalTemplate(), {\n size: 'lg',\n backdrop: 'static'\n });\n\n modalRef.shown.subscribe(() => {\n if (!this.userEditor)\n throw new Error('The user editor component was not set.');\n\n this.userEditor.changesSavedCallback = () => {\n this.addNewUserToList();\n modalRef.close();\n };\n\n this.userEditor.changesCancelledCallback = () => {\n this.editedUser = null;\n this.sourceUser = null;\n modalRef.close();\n };\n });\n\n modalRef.hidden.subscribe(() => {\n if (!this.userEditor)\n throw new Error('The user editor component was not set.');\n\n this.editingUserName = null;\n this.userEditor.resetForm(true);\n this.userEditor = null;\n });\n }\n\n deleteUser(row: UserEdit) {\n this.alertService.showDialog(`Are you sure you want to delete \"${row.userName}\"?`,\n DialogType.confirm, () => this.deleteUserHelper(row));\n }\n\n deleteUserHelper(row: UserEdit) {\n this.alertService.startLoadingMessage('Deleting...');\n this.loadingIndicator = true;\n\n this.accountService.deleteUser(row)\n .subscribe({\n next: () => {\n this.alertService.stopLoadingMessage();\n this.loadingIndicator = false;\n\n this.rowsCache = this.rowsCache.filter(item => item !== row);\n this.rows = this.rows.filter(item => item !== row);\n },\n error: error => {\n this.alertService.stopLoadingMessage();\n this.loadingIndicator = false;\n\n this.alertService.showStickyMessage('Delete Error',\n `An error occurred whilst deleting the user.\\r\\nError: \"${Utilities.getHttpResponseMessage(error)}\"`,\n MessageSeverity.error, error);\n }\n });\n }\n\n get canAssignRoles() {\n return this.accountService.userHasPermission(Permissions.assignRoles);\n }\n\n get canViewRoles() {\n return this.accountService.userHasPermission(Permissions.viewRoles);\n }\n\n get canManageUsers() {\n return this.accountService.userHasPermission(Permissions.manageUsers);\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/customers/customers.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 13,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 19,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        225,
                        448
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { fadeInOut } from '../../services/animations';\nimport { TodoDemoComponent } from '../controls/todo-demo.component';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { fadeInOut } from '../../services/animations';\nimport { TodoDemoComponent } from '../controls/todo-demo.component';\n\n@Component({\n selector: 'app-customers',\n templateUrl: './customers.component.html',\n styleUrl: './customers.component.scss',\n animations: [fadeInOut],\n imports: [TodoDemoComponent, TranslateModule]\n})\nexport class CustomersComponent {\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/home/home.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 22,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 31,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        271,
                        1090
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { RouterLink } from '@angular/router';\nimport { CdkDragDrop, moveItemInArray, CdkDropList, CdkDrag, CdkDragPlaceholder } from '@angular/cdk/drag-drop';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { fadeInOut } from '../../services/animations';\nimport { ConfigurationService } from '../../services/configuration.service';\nimport { AuthService } from '../../services/auth.service';\nimport { StatisticsDemoComponent } from '../controls/statistics-demo.component';\nimport { NotificationsViewerComponent } from '../controls/notifications-viewer.component';\nimport { TodoDemoComponent } from '../controls/todo-demo.component';\nimport { BannerDemoComponent } from '../controls/banner-demo.component';\n\ninterface WidgetIndex { element: string, index: number }\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { AfterViewInit, Component, ElementRef, inject, viewChild } from '@angular/core';\nimport { RouterLink } from '@angular/router';\nimport { CdkDragDrop, moveItemInArray, CdkDropList, CdkDrag, CdkDragPlaceholder } from '@angular/cdk/drag-drop';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { fadeInOut } from '../../services/animations';\nimport { ConfigurationService } from '../../services/configuration.service';\nimport { AuthService } from '../../services/auth.service';\nimport { StatisticsDemoComponent } from '../controls/statistics-demo.component';\nimport { NotificationsViewerComponent } from '../controls/notifications-viewer.component';\nimport { TodoDemoComponent } from '../controls/todo-demo.component';\nimport { BannerDemoComponent } from '../controls/banner-demo.component';\n\ninterface WidgetIndex { element: string, index: number }\n\n@Component({\n selector: 'app-home',\n templateUrl: './home.component.html',\n styleUrl: './home.component.scss',\n animations: [fadeInOut],\n imports: [\n CdkDropList, RouterLink, CdkDrag, CdkDragPlaceholder, StatisticsDemoComponent, NotificationsViewerComponent,\n TodoDemoComponent, BannerDemoComponent, TranslateModule\n ]\n})\nexport class HomeComponent implements AfterViewInit {\n private authService = inject(AuthService);\n configurations = inject(ConfigurationService);\n\n dragStartDelay = 200;\n readonly DBKeyWidgetsOrder = 'home-component.widgets_order';\n\n readonly widgetsContainer = viewChild.required<ElementRef<HTMLDivElement>>('widgetsContainer');\n\n ngAfterViewInit(): void {\n this.restoreWidgetsOrder();\n }\n\n restoreWidgetsOrder() {\n const widgetIndexes = this.loadWidgetIndexes();\n\n if (widgetIndexes == null || widgetIndexes.length == 0)\n return;\n\n const parentEle = this.widgetsContainer().nativeElement;\n\n for (const widget of Array.from(parentEle.children)) {\n const index = widgetIndexes.find(w => w.element == widget.id)?.index;\n\n if (index != null)\n this.insertChildAtIndex(parentEle, widget, index);\n }\n }\n\n getPlaceholderMinHeight(placeholder: HTMLElement, widget: HTMLElement) {\n const placeholderMinHeight = parseInt(placeholder.style.minHeight, 10);\n return placeholderMinHeight || widget.offsetHeight;\n }\n\n insertChildAtIndex(parent: HTMLDivElement, child: Element, index: number) {\n if (!index)\n index = 0;\n\n if (index >= parent.children.length) {\n parent.appendChild(child);\n } else {\n parent.insertBefore(child, parent.children[index]);\n }\n }\n\n drop(event: CdkDragDrop<HTMLDivElement>) {\n const el = event.item.element.nativeElement;\n const parentEle = event.container.element.nativeElement;\n const anchorEle = parentEle.children[event.currentIndex];\n\n const widgetIndexes = new Array<WidgetIndex>(parentEle.children.length);\n\n for (let i = 0; i < parentEle.children.length; i++) {\n widgetIndexes[i] = { element: parentEle.children[i].id, index: i };\n }\n\n moveItemInArray(widgetIndexes, event.previousIndex, event.currentIndex);\n\n for (let i = 0; i < widgetIndexes.length; i++) {\n widgetIndexes[i].index = i;\n }\n\n if (event.currentIndex < event.previousIndex)\n parentEle.insertBefore(el, anchorEle);\n else\n parentEle.insertBefore(el, anchorEle.nextElementSibling);\n\n this.saveWidgetIndexes(widgetIndexes);\n }\n\n saveWidgetIndexes(indexes: WidgetIndex[]) {\n this.configurations\n .saveConfiguration(indexes, `${this.DBKeyWidgetsOrder}:${this.authService.currentUser?.id}`);\n }\n\n loadWidgetIndexes() {\n return this.configurations\n .getConfiguration<WidgetIndex[]>(`${this.DBKeyWidgetsOrder}:${this.authService.currentUser?.id}`);\n }\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/login/login.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 18,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 23,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        259,
                        768
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { NgClass } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Subscription } from 'rxjs';\n\nimport { AlertService, MessageSeverity, DialogType } from '../../services/alert.service';\nimport { AuthService } from '../../services/auth.service';\nimport { ConfigurationService } from '../../services/configuration.service';\nimport { Utilities } from '../../services/utilities';\nimport { UserLogin } from '../../models/user-login.model';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component, OnInit, OnDestroy, Input, inject } from '@angular/core';\nimport { NgClass } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Subscription } from 'rxjs';\n\nimport { AlertService, MessageSeverity, DialogType } from '../../services/alert.service';\nimport { AuthService } from '../../services/auth.service';\nimport { ConfigurationService } from '../../services/configuration.service';\nimport { Utilities } from '../../services/utilities';\nimport { UserLogin } from '../../models/user-login.model';\n\n@Component({\n selector: 'app-login',\n templateUrl: './login.component.html',\n styleUrl: './login.component.scss',\n imports: [FormsModule, NgClass]\n})\n\nexport class LoginComponent implements OnInit, OnDestroy {\n private alertService = inject(AlertService);\n private authService = inject(AuthService);\n private configurations = inject(ConfigurationService);\n\n userLogin = new UserLogin();\n isLoading = false;\n formResetToggle = true;\n modalClosedCallback: (() => void) | undefined;\n loginStatusSubscription: Subscription | undefined;\n\n @Input()\n isModal = false;\n\n ngOnInit() {\n this.userLogin.rememberMe = this.authService.rememberMe;\n\n if (this.getShouldRedirect()) {\n this.authService.redirectLoginUser();\n } else {\n this.loginStatusSubscription = this.authService.getLoginStatusEvent().subscribe(() => {\n if (this.getShouldRedirect()) {\n this.authService.redirectLoginUser();\n }\n });\n }\n }\n\n ngOnDestroy() {\n this.loginStatusSubscription?.unsubscribe();\n }\n\n getShouldRedirect() {\n return !this.isModal && this.authService.isLoggedIn && !this.authService.isSessionExpired;\n }\n\n showErrorAlert(caption: string, message: string) {\n this.alertService.showMessage(caption, message, MessageSeverity.error);\n }\n\n closeModal() {\n if (this.modalClosedCallback) {\n this.modalClosedCallback();\n }\n }\n\n login() {\n this.isLoading = true;\n this.alertService.startLoadingMessage('', 'Attempting login...');\n\n this.authService.loginWithPassword(this.userLogin.userName, this.userLogin.password, this.userLogin.rememberMe)\n .subscribe({\n next: user => {\n setTimeout(() => {\n this.alertService.stopLoadingMessage();\n this.isLoading = false;\n this.reset();\n\n if (!this.isModal) {\n this.alertService.showMessage('Login', `Welcome ${user.userName}!`, MessageSeverity.success);\n } else {\n this.alertService.showMessage('Login', `Session for ${user.userName} restored!`, MessageSeverity.success);\n setTimeout(() => {\n this.alertService.showStickyMessage('Session Restored', 'Please try your last operation again', MessageSeverity.default);\n }, 500);\n\n this.closeModal();\n }\n }, 500);\n },\n error: error => {\n this.alertService.stopLoadingMessage();\n\n if (Utilities.checkNoNetwork(error)) {\n this.alertService.showStickyMessage(Utilities.noNetworkMessageCaption, Utilities.noNetworkMessageDetail, MessageSeverity.error, error);\n this.offerBackendDevServer();\n } else {\n const errorMessage = Utilities.getHttpResponseMessage(error);\n\n if (errorMessage) {\n this.alertService.showStickyMessage('Unable to login', this.mapLoginErrorMessage(errorMessage), MessageSeverity.error, error);\n } else {\n this.alertService.showStickyMessage('Unable to login',\n 'An error occurred whilst logging in, please try again later.\\nError: ' + Utilities.stringify(error), MessageSeverity.error, error);\n }\n }\n\n setTimeout(() => {\n this.isLoading = false;\n }, 500);\n }\n });\n }\n\n offerBackendDevServer() {\n if (Utilities.checkIsLocalHost(location.origin) && Utilities.checkIsLocalHost(this.configurations.baseUrl)) {\n this.alertService.showDialog(\n 'Dear Developer!<br />' +\n 'It appears your backend Web API server is inaccessible or not running...<br />' +\n 'Would you want to temporarily switch to the fallback development API server below? (Or specify another)', DialogType.prompt, value => {\n this.configurations.baseUrl = value as string;\n this.alertService.showStickyMessage('API Changed!', 'The target Web API has been changed to: ' + value, MessageSeverity.warn);\n },\n null,\n null,\n null,\n this.configurations.fallbackBaseUrl);\n }\n }\n\n mapLoginErrorMessage(error: string) {\n if (error === 'invalid_username_or_password') {\n return 'Invalid username or password';\n }\n\n return error;\n }\n\n reset() {\n this.formResetToggle = false;\n\n setTimeout(() => {\n this.formResetToggle = true;\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/not-found/not-found.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 13,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 19,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        225,
                        425
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { RouterLink } from '@angular/router';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { fadeInOut } from '../../services/animations';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component } from '@angular/core';\nimport { RouterLink } from '@angular/router';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { fadeInOut } from '../../services/animations';\n\n@Component({\n selector: 'app-not-found',\n templateUrl: './not-found.component.html',\n styleUrl: './not-found.component.scss',\n animations: [fadeInOut],\n imports: [RouterLink, TranslateModule]\n})\nexport class NotFoundComponent {\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/orders/orders.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 12,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 18,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        225,
                        379
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { fadeInOut } from '../../services/animations';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { fadeInOut } from '../../services/animations';\n\n@Component({\n selector: 'app-orders',\n templateUrl: './orders.component.html',\n styleUrl: './orders.component.scss',\n animations: [fadeInOut],\n imports: [TranslateModule]\n})\nexport class OrdersComponent {\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/products/products.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 12,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 18,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        225,
                        379
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { fadeInOut } from '../../services/animations';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { fadeInOut } from '../../services/animations';\n\n@Component({\n selector: 'app-products',\n templateUrl: './products.component.html',\n styleUrl: './products.component.scss',\n animations: [fadeInOut],\n imports: [TranslateModule]\n})\nexport class ProductsComponent {\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/components/settings/settings.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 21,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 30,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        267,
                        1031
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { ActivatedRoute, Router, RouterLink } from '@angular/router';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { NgbNavModule } from '@ng-bootstrap/ng-bootstrap';\nimport { Subscription } from 'rxjs';\n\nimport { fadeInOut } from '../../services/animations';\nimport { AccountService } from '../../services/account.service';\nimport { Permissions } from '../../models/permission.model';\nimport { UserInfoComponent } from '../controls/user-info.component';\nimport { UserPreferencesComponent } from '../controls/user-preferences.component';\nimport { UsersManagementComponent } from '../controls/users-management.component';\nimport { RolesManagementComponent } from '../controls/roles-management.component';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Component, inject, OnInit, OnDestroy, AfterViewInit } from '@angular/core';\nimport { ActivatedRoute, Router, RouterLink } from '@angular/router';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { NgbNavModule } from '@ng-bootstrap/ng-bootstrap';\nimport { Subscription } from 'rxjs';\n\nimport { fadeInOut } from '../../services/animations';\nimport { AccountService } from '../../services/account.service';\nimport { Permissions } from '../../models/permission.model';\nimport { UserInfoComponent } from '../controls/user-info.component';\nimport { UserPreferencesComponent } from '../controls/user-preferences.component';\nimport { UsersManagementComponent } from '../controls/users-management.component';\nimport { RolesManagementComponent } from '../controls/roles-management.component';\n\n@Component({\n selector: 'app-settings',\n templateUrl: './settings.component.html',\n styleUrl: './settings.component.scss',\n animations: [fadeInOut],\n imports: [\n RouterLink, TranslateModule, NgbNavModule,\n UserInfoComponent, UserPreferencesComponent, UsersManagementComponent, RolesManagementComponent\n ]\n})\nexport class SettingsComponent implements OnInit, AfterViewInit, OnDestroy {\n private router = inject(Router);\n public route = inject(ActivatedRoute);\n private accountService = inject(AccountService);\n\n readonly profileTab = 'profile';\n readonly preferencesTab = 'preferences';\n readonly usersTab = 'users';\n readonly rolesTab = 'roles';\n activeTab = '';\n showDatatable = false; // Delays showing the table until tab is shown so column widths are calculated correctly\n fragmentSubscription: Subscription | undefined;\n\n ngOnInit() {\n this.fragmentSubscription = this.route.fragment.subscribe(fragment => this.setActiveTab(fragment));\n }\n\n ngAfterViewInit() {\n setTimeout(() => this.showDatatable = true);\n }\n\n ngOnDestroy() {\n this.fragmentSubscription?.unsubscribe();\n }\n\n setActiveTab(fragment: string | null) {\n fragment = fragment?.toLowerCase() ?? this.profileTab;\n\n const canViewTab = fragment === this.profileTab || fragment === this.preferencesTab ||\n (fragment === this.usersTab && this.canViewUsers) || (fragment === this.rolesTab && this.canViewRoles);\n\n if (canViewTab)\n this.activeTab = fragment;\n else\n this.router.navigate([], { fragment: this.profileTab });\n }\n\n get canViewUsers() {\n return this.accountService.userHasPermission(Permissions.viewUsers);\n }\n\n get canViewRoles() {\n return this.accountService.userHasPermission(Permissions.viewRoles);\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/directives/equal-validator.directive.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/no-forward-ref",
                "severity": 2,
                "message": "Avoid using `forwardRef`",
                "line": 13,
                "column": 44,
                "nodeType": "CallExpression",
                "messageId": "noForwardRef",
                "endLine": 13,
                "endColumn": 76
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Directive, forwardRef, HostAttributeToken, inject } from '@angular/core';\nimport { Validator, AbstractControl, NG_VALIDATORS, ValidationErrors } from '@angular/forms';\n\n@Directive({\n selector: '[appValidateEqual][formControlName],[appValidateEqual][formControl],[appValidateEqual][ngModel]',\n providers: [\n { provide: NG_VALIDATORS, useExisting: forwardRef(() => EqualValidator), multi: true }\n ],\n standalone: true\n})\nexport class EqualValidator implements Validator {\n validateEqual = inject(new HostAttributeToken('appValidateEqual'));\n reverse = inject(new HostAttributeToken('reverse'), { optional: true });\n\n validate(control: AbstractControl): ValidationErrors | null {\n const other = control.root.get(this.validateEqual);\n\n if (!other) {\n return null;\n }\n\n return this.reverse === 'true' ? this.validateReverse(control, other) : this.validateNoReverse(control, other);\n }\n\n private validateNoReverse(control: AbstractControl, other: AbstractControl): ValidationErrors | null {\n return other.value === control.value ? null : { validateEqual: true };\n }\n\n private validateReverse(control: AbstractControl, other: AbstractControl): ValidationErrors | null {\n if (control.value === other.value) {\n if (other.errors) {\n delete other.errors['validateEqual'];\n\n if (Object.keys(other.errors).length === 0) {\n other.setErrors(null);\n }\n }\n } else {\n other.setErrors({ validateEqual: true });\n }\n\n return null;\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/services/app-title.service.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 13,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 13,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        435,
                        435
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        435,
                        435
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        435,
                        435
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Injectable, inject } from '@angular/core';\nimport { TitleStrategy, RouterStateSnapshot } from '@angular/router';\nimport { Title } from '@angular/platform-browser';\n\nimport { Utilities } from './utilities';\n\n@Injectable()\nexport class AppTitleService extends TitleStrategy {\n private readonly titleService = inject(Title);\n\n static appName: string | undefined;\n\n override updateTitle(routerState: RouterStateSnapshot) {\n let title = this.buildTitle(routerState);\n\n if (title) {\n const fragment = routerState.url.split('#')[1];\n\n if (fragment) {\n title += ` | ${Utilities.toTitleCase(fragment)}`;\n }\n\n if (AppTitleService.appName) {\n title += ` - ${AppTitleService.appName}`;\n }\n\n this.titleService.setTitle(title);\n\n } else if (AppTitleService.appName) {\n this.titleService.setTitle(AppTitleService.appName);\n }\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/services/db-keys.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 9,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 9,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        264,
                        264
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        264,
                        264
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        264,
                        264
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class DBkeys {\n public static readonly CURRENT_USER = 'current_user';\n public static readonly USER_PERMISSIONS = 'user_permissions';\n public static readonly ACCESS_TOKEN = 'access_token';\n public static readonly REFRESH_TOKEN = 'refresh_token';\n public static readonly TOKEN_EXPIRES_IN = 'expires_in';\n\n public static readonly REMEMBER_ME = 'remember_me';\n\n public static readonly LANGUAGE = 'language';\n public static readonly HOME_URL = 'home_url';\n public static readonly THEME_ID = 'themeId';\n public static readonly SHOW_DASHBOARD_STATISTICS = 'show_dashboard_statistics';\n public static readonly SHOW_DASHBOARD_NOTIFICATIONS = 'show_dashboard_notifications';\n public static readonly SHOW_DASHBOARD_TODO = 'show_dashboard_todo';\n public static readonly SHOW_DASHBOARD_BANNER = 'show_dashboard_banner';\n\n public static readonly USER_CONFIG_KEYS = 'user_config_keys';\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/services/endpoint-base.service.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 24,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 24,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        656,
                        656
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        656,
                        656
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        656,
                        656
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Injectable, inject } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\nimport { Observable, Subject, from, throwError } from 'rxjs';\nimport { mergeMap, switchMap, catchError } from 'rxjs/operators';\n\nimport { AuthService } from './auth.service';\nimport { User } from '../models/user.model';\n\ninterface ServerError {\n status: number;\n error: {\n error: string;\n error_description: string;\n };\n}\n\n\n@Injectable()\nexport class EndpointBase {\n private authService = inject(AuthService);\n\n private taskPauser: Subject<boolean> | null = null;\n private isRefreshingLogin = false;\n\n protected get requestHeaders(): { headers: HttpHeaders | Record<string, string | string[]> } {\n const headers = new HttpHeaders({\n Authorization: `Bearer ${this.authService.accessToken}`,\n 'Content-Type': 'application/json',\n Accept: 'application/json, text/plain, */*'\n });\n\n return { headers };\n }\n\n public refreshLogin(): Observable<User> {\n return this.authService.refreshLogin().pipe(\n catchError((error: ServerError) => {\n return this.handleError(error, () => this.refreshLogin());\n }));\n }\n\n protected handleError<T>(error: ServerError, continuation: () => Observable<T>) {\n if (error.status === 401) {\n if (this.isRefreshingLogin) {\n return this.pauseTask(continuation);\n }\n\n this.isRefreshingLogin = true;\n\n return from(this.authService.refreshLogin()).pipe(\n mergeMap(() => {\n this.isRefreshingLogin = false;\n this.resumeTasks(true);\n\n return continuation();\n }),\n catchError(refreshLoginError => {\n this.isRefreshingLogin = false;\n this.resumeTasks(false);\n this.authService.reLogin();\n\n if (refreshLoginError.status === 401 || (refreshLoginError.error && refreshLoginError.error.error === 'invalid_grant')) {\n return throwError(() => new Error('session expired'));\n } else {\n return throwError(() => refreshLoginError || new Error('server error'));\n }\n }));\n }\n\n if (error.error && error.error.error === 'invalid_grant') {\n this.authService.reLogin();\n\n return throwError(() => (error.error && error.error.error_description) ? `session expired (${error.error.error_description})` : 'session expired');\n } else {\n return throwError(() => error);\n }\n }\n\n private pauseTask<T>(continuation: () => Observable<T>) {\n if (!this.taskPauser) {\n this.taskPauser = new Subject();\n }\n\n return this.taskPauser.pipe(switchMap(continueOp => {\n return continueOp ? continuation() : throwError(() => new Error('session expired'));\n }));\n }\n\n private resumeTasks(continueOp: boolean) {\n setTimeout(() => {\n if (this.taskPauser) {\n this.taskPauser.next(continueOp);\n this.taskPauser.complete();\n this.taskPauser = null;\n }\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/services/jwt-helper.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 13,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 13,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        324,
                        324
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        324,
                        324
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        324,
                        324
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\n/**\n angular.json aspnetcore-https.js eslint.config.js karma.conf.js lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules nuget.config package.json package-lock.json public quickapp.client.esproj QuickApp.report.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json Helper class to decode and find JWT expiration.\n */\nimport { Injectable } from '@angular/core';\n\n\n@Injectable()\nexport class JwtHelper {\n\n public urlBase64Decode(str: string): string {\n let output = str.replace(/-/g, '+').replace(/_/g, '/');\n switch (output.length % 4) {\n case 0: { break; }\n case 2: { output += '=='; break; }\n case 3: { output += '='; break; }\n default: {\n throw new Error('Illegal base64url string!');\n }\n }\n return this.b64DecodeUnicode(output);\n }\n\n // https://developer.mozilla.org/en/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#The_Unicode_Problem\n private b64DecodeUnicode(str: string) {\n return decodeURIComponent(Array.prototype.map.call(atob(str), c => {\n return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n }).join(''));\n }\n\n public decodeToken(token: string) {\n const parts = token.split('.');\n\n if (parts.length !== 3) {\n throw new Error('JWT must have 3 parts');\n }\n\n const decoded = this.urlBase64Decode(parts[1]);\n if (!decoded) {\n throw new Error('Cannot decode the token');\n }\n\n return JSON.parse(decoded);\n }\n\n public getTokenExpirationDate(token: string): Date | null {\n const decoded = this.decodeToken(token);\n\n if (!Object.prototype.hasOwnProperty.call(decoded, 'exp')) {\n return null;\n }\n\n const date = new Date(0); // The 0 here is the key, which sets the date to the epoch\n date.setUTCSeconds(decoded.exp);\n\n return date;\n }\n\n public isTokenExpired(token: string, offsetSeconds?: number): boolean {\n const date = this.getTokenExpirationDate(token);\n offsetSeconds = offsetSeconds || 0;\n\n if (date == null) {\n return false;\n }\n\n // Token expired?\n return !(date.valueOf() > (new Date().valueOf() + (offsetSeconds angular.json aspnetcore-https.js eslint.config.js karma.conf.js lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules nuget.config package.json package-lock.json public quickapp.client.esproj QuickApp.report.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json 1000)));\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/services/lowercase-url-serializer.service.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 11,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 11,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        370,
                        370
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        370,
                        370
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        370,
                        370
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Injectable } from \"@angular/core\";\nimport { DefaultUrlSerializer, UrlTree } from \"@angular/router\";\nimport { Utilities } from \"./utilities\";\n\n@Injectable()\nexport class LowerCaseUrlSerializer extends DefaultUrlSerializer {\n override parse(url: string): UrlTree {\n const possibleSeparators = /[?;#]/;\n const indexOfSeparator = url.search(possibleSeparators);\n let processedUrl: string;\n\n if (indexOfSeparator > -1) {\n const separator = url.charAt(indexOfSeparator);\n const urlParts = Utilities.splitInTwo(url, separator);\n urlParts.firstPart = urlParts.firstPart.toLowerCase();\n\n processedUrl = urlParts.firstPart + separator + urlParts.secondPart;\n } else {\n processedUrl = url.toLowerCase();\n }\n\n return super.parse(processedUrl);\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/services/notification-endpoint.service.ts",
            "messages": [
              {
                "ruleId": "@typescript-eslint/no-unused-vars",
                "message": "Definition for rule '@typescript-eslint/no-unused-vars' was not found.",
                "line": 98,
                "column": 3,
                "endLine": 98,
                "endColumn": 64,
                "severity": 2,
                "nodeType": null
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Observable, of, throwError } from 'rxjs';\n\n@Injectable({\n providedIn: 'root'\n})\nexport class NotificationEndpoint {\n private demoNotifications = [\n {\n id: 1,\n header: '20 New Products were added to your inventory by \"administrator\"',\n body: '20 new \"BMW M6\" were added to your stock by \"administrator\" on 5/28/2017 4:54:13 PM',\n isRead: true,\n isPinned: true,\n date: '2017-05-28T16:29:13.5877958'\n },\n {\n id: 2,\n header: '1 Product running low',\n body: 'You are running low on \"Nissan Patrol\". 2 Items remaining',\n isRead: false,\n isPinned: false,\n date: '2017-05-28T19:54:42.4144502'\n },\n {\n id: 3,\n header: 'Tomorrow is half day',\n body: 'Guys, tomorrow we close by midday. Please check in your sales before noon. Thanks. Alex.',\n isRead: false,\n isPinned: false,\n date: '2017-05-30T11:13:42.4144502'\n }\n ];\n\n\n getNotificationEndpoint<T>(notificationId: number) {\n const notification = this.demoNotifications.find(val => val.id === notificationId);\n return this.createDemoResponse(notification as T, notification ? null : 404);\n }\n\n getNotificationsEndpoint<T>(page: number, pageSize: number) {\n return this.createDemoResponse(this.demoNotifications as T, null, page, pageSize);\n }\n\n getUnreadNotificationsEndpoint<T>(userId?: string) {\n const unreadNotifications = this.demoNotifications.filter(val => !val.isRead);\n return this.createDemoResponse(unreadNotifications as T, null, userId);\n }\n\n getNewNotificationsEndpoint<T>(lastNotificationDate?: Date) {\n return this.createDemoResponse(this.demoNotifications as T, null, lastNotificationDate);\n }\n\n getPinUnpinNotificationEndpoint(notificationId: number, isPinned?: boolean) {\n const notification = this.demoNotifications.find(val => val.id === notificationId);\n\n if (notification) {\n if (isPinned == null) {\n isPinned = !notification.isPinned;\n }\n\n notification.isPinned = isPinned;\n notification.isRead = true;\n\n return this.createDemoResponse(null);\n } else {\n return this.createDemoResponse(null, 404);\n }\n }\n\n getReadUnreadNotificationEndpoint(notificationIds: number[], isRead: boolean) {\n for (const notificationId of notificationIds) {\n const notification = this.demoNotifications.find(val => val.id === notificationId);\n\n if (notification)\n notification.isRead = isRead;\n }\n\n return this.createDemoResponse(null);\n }\n\n getDeleteNotificationEndpoint<T>(notificationId: number) {\n const notification = this.demoNotifications.find(val => val.id === notificationId);\n\n if (notification)\n this.demoNotifications = this.demoNotifications.filter(val => val.id !== notificationId);\n\n return this.createDemoResponse(notification as T, notification ? null : 404);\n }\n\n // eslint-disable-next-line @typescript-eslint/no-unused-vars\n private createDemoResponse<T>(data: T, errorCode: number | null = null, ...args: unknown[]): Observable<T> {\n if (errorCode == null)\n return of(data);\n else\n return throwError(() => new HttpErrorResponse({ status: errorCode, error: 'Demo. An error occurred' }));\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/QuickApp/quickapp.client/src/app/services/utilities.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 20,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 20,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        605,
                        605
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        605,
                        605
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        605,
                        605
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// ---------------------------------------\n// Email: quickapp@ebenmonney.com\n// Templates: www.ebenmonney.com/templates\n// (c) 2024 www.ebenmonney.com/mit-license\n// ---------------------------------------\n\nimport { Injectable } from '@angular/core';\nimport { HttpResponseBase, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\ntype HttpMessageSearchOptions = Readonly<{\n searchInCaption?: boolean;\n searchInMessage?: boolean;\n exactMatch?: boolean;\n startsWith?: boolean;\n endsWith?: boolean;\n contains?: boolean;\n resultType?: 'caption' | 'preferMessage' | 'both';\n}>;\n\n@Injectable()\nexport class Utilities {\n public static readonly captionAndMessageSeparator = ':';\n public static readonly noNetworkMessageCaption = 'No Network';\n public static readonly noNetworkMessageDetail = 'The server cannot be reached';\n public static readonly accessDeniedMessageCaption = 'Access Denied!';\n public static readonly accessDeniedMessageDetail = '';\n public static readonly notFoundMessageCaption = 'Not Found';\n public static readonly notFoundMessageDetail = 'The target resource cannot be found';\n\n public static readonly findHttpResponseMessageDefaultSearchOption: HttpMessageSearchOptions = {\n searchInCaption: true,\n searchInMessage: false,\n exactMatch: true,\n startsWith: false,\n endsWith: false,\n contains: false,\n resultType: 'preferMessage',\n };\n\n\n public static cookies =\n {\n getItem: (sKey: string) => {\n return decodeURIComponent(document.cookie.replace(new RegExp('(?:(?:^|.*;)\\\\s*' + encodeURIComponent(sKey)\n .replace(/[-.+*]/g, '\\\\$&') + '\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$'), '$1')) || null;\n },\n setItem: (sKey: string, sValue: string, vEnd: number | string | Date, sPath: string, sDomain: string, bSecure: boolean) => {\n if (!sKey || /^(?:expires|max-age|path|domain|secure)$/i.test(sKey)) {\n return false;\n }\n\n let sExpires = '';\n\n if (vEnd) {\n switch (vEnd.constructor) {\n case Number:\n sExpires = vEnd === Infinity ? '; expires=Fri, 31 Dec 9999 23:59:59 GMT' : '; max-age=' + vEnd;\n break;\n case String:\n sExpires = '; expires=' + vEnd;\n break;\n case Date:\n sExpires = '; expires=' + (vEnd as Date).toUTCString();\n break;\n }\n }\n\n document.cookie = encodeURIComponent(sKey) + '=' + encodeURIComponent(sValue) + sExpires +\n (sDomain ? '; domain=' + sDomain : '') + (sPath ? '; path=' + sPath : '') + (bSecure ? '; secure' : '');\n return true;\n },\n removeItem: (sKey: string, sPath: string, sDomain: string) => {\n if (!sKey) {\n return false;\n }\n document.cookie = encodeURIComponent(sKey) + '=; expires=Thu, 01 Jan 1970 00:00:00 GMT' +\n (sDomain ? '; domain=' + sDomain : '') + (sPath ? '; path=' + sPath : '');\n return true;\n },\n hasItem: (sKey: string) => {\n return (new RegExp('(?:^|;\\\\s*)' + encodeURIComponent(sKey).replace(/[-.+*]/g, '\\\\$&') + '\\\\s*\\\\=')).test(document.cookie);\n },\n keys: () => {\n const aKeys = document.cookie.replace(/((?:^|\\s*;)[^=]+)(?=;|$)|^\\s*|\\s*(?:=[^;]*)?(?:$)/g, '').split(/\\s*(?:=[^;]*)?;\\s*/);\n for (let nIdx = 0; nIdx < aKeys.length; nIdx++) { aKeys[nIdx] = decodeURIComponent(aKeys[nIdx]); }\n return aKeys;\n }\n };\n\n public static getHttpResponseMessages(data: HttpResponseBase): string[] {\n const responses: string[] = [];\n\n if (this.checkNoNetwork(data)) {\n responses.push(`${this.noNetworkMessageCaption}${this.captionAndMessageSeparator} ${this.noNetworkMessageDetail}`);\n } else {\n const responseData = this.getResponseData(data);\n\n if (responseData) {\n if (typeof responseData === 'object') {\n for (const key in responseData) {\n responses.push(`${key}${this.captionAndMessageSeparator} ${responseData[key]}`);\n }\n }\n else {\n responses.push(responseData);\n }\n }\n }\n\n if (this.checkAccessDenied(data)) {\n responses.splice(0, 0, `${this.accessDeniedMessageCaption}${this.captionAndMessageSeparator} ${this.accessDeniedMessageDetail}`);\n }\n\n if (this.checkNotFound(data)) {\n let message = `${this.notFoundMessageCaption}${this.captionAndMessageSeparator} ${this.notFoundMessageDetail}`;\n if (data.url) {\n message += `. ${data.url}`;\n }\n\n responses.splice(0, 0, message);\n }\n\n if (!responses.length) {\n const response = (data as HttpErrorResponse).message ?? data.statusText;\n\n if (response)\n responses.push(response);\n }\n\n return responses;\n }\n\n public static getHttpResponseMessage(data: HttpResponseBase, ...preferredMessageKeys: string[]): string | null {\n let httpMessage =\n Utilities.findHttpResponseMessage(Utilities.noNetworkMessageCaption, data) ||\n Utilities.findHttpResponseMessage(Utilities.notFoundMessageCaption, data) ||\n Utilities.findHttpResponseMessage('error_description', data);\n\n if (!httpMessage) {\n for (const msgKey of preferredMessageKeys) {\n httpMessage = Utilities.findHttpResponseMessage(msgKey, data);\n\n if (httpMessage?.trim() !== '')\n return httpMessage;\n }\n }\n\n if (!httpMessage) {\n httpMessage = Utilities.findHttpResponseMessage('error', data);\n }\n\n if (!httpMessage) {\n const responseMessages = Utilities.getHttpResponseMessages(data);\n\n if (responseMessages.length)\n httpMessage = responseMessages.join('\\n');\n }\n\n return httpMessage;\n }\n\n public static findHttpResponseMessage(searchString: string, data: HttpResponseBase,\n searchOptions?: HttpMessageSearchOptions): string | null {\n\n searchString = searchString.toUpperCase();\n searchOptions = { ...this.findHttpResponseMessageDefaultSearchOption, ...searchOptions };\n\n let result: string | null = null;\n let captionAndMessage = { caption: '', message: null as string | null };\n const httpMessages = this.getHttpResponseMessages(data);\n\n for (const httpMsg of httpMessages) {\n const splitMsg = Utilities.splitInTwo(httpMsg, this.captionAndMessageSeparator);\n captionAndMessage = { caption: splitMsg.firstPart, message: splitMsg.secondPart ?? null };\n\n let messageToSearch = '';\n\n if (searchOptions.searchInCaption && searchOptions.searchInMessage)\n messageToSearch = httpMsg;\n else if (searchOptions.searchInCaption)\n messageToSearch = captionAndMessage.caption;\n else if (searchOptions.searchInMessage)\n messageToSearch = captionAndMessage.message ?? '';\n\n messageToSearch = messageToSearch.toUpperCase();\n\n if (searchOptions.exactMatch && messageToSearch === searchString) {\n result = httpMsg;\n break;\n }\n\n if (searchOptions.startsWith && messageToSearch.startsWith(searchString)) {\n result = httpMsg;\n break;\n }\n\n if (searchOptions.endsWith && messageToSearch.endsWith(searchString)) {\n result = httpMsg;\n break;\n }\n\n if (searchOptions.contains && messageToSearch.includes(searchString)) {\n result = httpMsg;\n break;\n }\n }\n\n if (result && searchOptions.resultType)\n switch (searchOptions.resultType) {\n case 'preferMessage':\n return captionAndMessage.message ?? captionAndMessage.caption;\n case 'caption':\n return captionAndMessage.caption;\n case 'both':\n return result;\n }\n else\n return result;\n }\n\n public static getResponseData(response: HttpResponseBase) {\n let results;\n\n if (response instanceof HttpResponse) {\n results = response.body;\n }\n\n if (response instanceof HttpErrorResponse) {\n results = response.error || response.message || response.statusText;\n }\n\n return results;\n }\n\n public static checkNoNetwork(response: HttpResponseBase) {\n if (response instanceof HttpResponseBase) {\n return response.status === 0;\n }\n\n return false;\n }\n\n public static checkAccessDenied(response: HttpResponseBase) {\n if (response instanceof HttpResponseBase) {\n return response.status === 403;\n }\n\n return false;\n }\n\n public static checkNotFound(response: HttpResponseBase) {\n if (response instanceof HttpResponseBase) {\n return response.status === 404;\n }\n\n return false;\n }\n\n public static checkIsLocalHost(url: string, base?: string) {\n if (url) {\n const location = new URL(url, base);\n return location.hostname === 'localhost' || location.hostname === '127.0.0.1';\n }\n\n return false;\n }\n\n public static getQueryParamsFromString(paramString: string) {\n const params: Record<string, string | undefined> = {};\n\n for (const param of paramString.split('&')) {\n const keyValue = Utilities.splitInTwo(param, '=');\n params[keyValue.firstPart] = keyValue.secondPart;\n }\n\n return params;\n }\n\n public static splitInTwo(text: string, separator: string, splitFromEnd = false): { firstPart: string, secondPart: string | undefined } {\n let separatorIndex = -1;\n\n if (separator !== '') {\n if (!splitFromEnd)\n separatorIndex = text.indexOf(separator);\n else\n separatorIndex = text.lastIndexOf(separator);\n }\n\n if (separatorIndex === -1) {\n return { firstPart: text, secondPart: undefined };\n }\n\n const part1 = text.substring(0, separatorIndex).trim();\n const part2 = text.substring(separatorIndex + 1).trim();\n\n return { firstPart: part1, secondPart: part2 };\n }\n\n public static stringify(value: unknown, depth = 3): string {\n const worker = (value: unknown, depth: number, padding = ''): string => {\n if (value === null || value === undefined) {\n return '';\n }\n\n if (typeof value === 'object') {\n const objectobject = '[object Object]';\n\n const result = value.toString();\n if (result !== objectobject)\n return result;\n\n const keyValuePairs = [];\n let tab = `\\n${padding}`;\n\n for (const key in value) {\n if (Object.prototype.hasOwnProperty.call(value, key)) {\n const keyEntry = value[key as keyof object];\n\n if (typeof keyEntry !== 'function') {\n const keyValue = depth > 0 ? worker(keyEntry, depth - 1, padding + ' ') : String(keyEntry);\n keyValuePairs.push(`${tab}${key}: ${keyValue === objectobject ? '...' : keyValue}`);\n tab = padding;\n }\n }\n }\n\n return keyValuePairs.join('\\n');\n }\n\n return String(value);\n }\n\n return worker(value, depth); //.replace(/^\\s+/, '');\n }\n\n public static JsonTryParse(value: string) {\n try {\n return JSON.parse(value);\n } catch {\n return value;\n }\n }\n\n public static GetObjectWithLoweredPropertyNames<T extends Record<string, unknown>>(obj: T) {\n return Object.keys(obj).reduce((newObj, k) => {\n newObj[k.toLowerCase()] = obj[k];\n return newObj;\n }, {} as Record<string, unknown>) as T;\n }\n\n public static TestIsObjectEmpty(obj: object) {\n for (const prop in obj) {\n if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n return false;\n }\n }\n\n return true;\n }\n\n public static TestIsUndefined(value: unknown) {\n return typeof value === 'undefined';\n }\n\n public static TestIsString(value: unknown) {\n return typeof value === 'string';\n }\n\n public static capitalizeFirstLetter(text: string) {\n if (text) {\n return text.charAt(0).toUpperCase() + text.slice(1);\n } else {\n return text;\n }\n }\n\n public static toTitleCase(text: string) {\n return text.replace(/\\w\\S*/g, (subString) => {\n return subString.charAt(0).toUpperCase() + subString.substring(1).toLowerCase();\n });\n }\n\n public static toLowerCase(item: string | string[]) {\n if (Array.isArray(item)) {\n const loweredArray: string[] = [];\n\n for (let i = 0; i < item.length; i++) {\n loweredArray[i] = item[i].toLowerCase();\n }\n\n return loweredArray;\n } else {\n return item.toLowerCase();\n }\n }\n\n public static uniqueId() {\n return this.randomNumber(1000000, 9000000).toString();\n }\n\n public static randomNumber(min: number, max: number) {\n return Math.floor(Math.random() angular.json aspnetcore-https.js eslint.config.js karma.conf.js lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules nuget.config package.json package-lock.json public quickapp.client.esproj QuickApp.report.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json (max - min + 1) + min);\n }\n\n public static baseUrl() {\n let base = '';\n\n if (window.location.origin) {\n base = window.location.origin;\n } else {\n base = window.location.protocol + '//' + window.location.hostname + (window.location.port ? ':' + window.location.port : '');\n }\n\n return base.replace(/\\/$/, '');\n }\n\n public static printDateOnly(date: Date) {\n date = new Date(date);\n\n const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\n const dayOfWeek = date.getDay();\n const dayOfMonth = date.getDate();\n let sup = '';\n const month = date.getMonth();\n const year = date.getFullYear();\n\n if (dayOfMonth === 1 || dayOfMonth === 21 || dayOfMonth === 31) {\n sup = 'st';\n } else if (dayOfMonth === 2 || dayOfMonth === 22) {\n sup = 'nd';\n } else if (dayOfMonth === 3 || dayOfMonth === 23) {\n sup = 'rd';\n } else {\n sup = 'th';\n }\n\n const dateString = dayNames[dayOfWeek] + ', ' + dayOfMonth + sup + ' ' + monthNames[month] + ' ' + year;\n\n return dateString;\n }\n\n public static printTimeOnly(date: Date) {\n date = new Date(date);\n\n let period = '';\n let minute = date.getMinutes().toString();\n let hour = date.getHours();\n\n period = hour < 12 ? 'AM' : 'PM';\n\n if (hour === 0) {\n hour = 12;\n }\n if (hour > 12) {\n hour = hour - 12;\n }\n\n if (minute.length === 1) {\n minute = '0' + minute;\n }\n\n const timeString = hour + ':' + minute + ' ' + period;\n\n return timeString;\n }\n\n public static printDate(date: Date, separator = 'at') {\n return `${Utilities.printDateOnly(date)} ${separator} ${Utilities.printTimeOnly(date)}`;\n }\n\n public static printFriendlyDate(date: Date, separator = '-') {\n const today = new Date(); today.setHours(0, 0, 0, 0);\n const yesterday = new Date(today); yesterday.setDate(yesterday.getDate() - 1);\n const test = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n\n if (test.toDateString() === today.toDateString()) {\n return `Today ${separator} ${Utilities.printTimeOnly(date)}`;\n }\n if (test.toDateString() === yesterday.toDateString()) {\n return `Yesterday ${separator} ${Utilities.printTimeOnly(date)}`;\n } else {\n return Utilities.printDate(date, separator);\n }\n }\n\n public static printShortDate(date: Date, separator = '/', dateTimeSeparator = '-') {\n let day = date.getDate().toString();\n let month = (date.getMonth() + 1).toString();\n const year = date.getFullYear();\n\n if (day.length === 1) {\n day = '0' + day;\n }\n\n if (month.length === 1) {\n month = '0' + month;\n }\n\n return `${month}${separator}${day}${separator}${year} ${dateTimeSeparator} ${Utilities.printTimeOnly(date)}`;\n }\n\n public static parseDate(input: string | number | Date) {\n if (input instanceof Date) {\n return input;\n }\n\n if (typeof input === 'string') {\n if (input.search(/[a-su-z+]/i) === -1) {\n input = input + 'Z';\n }\n\n return new Date(input);\n }\n\n return new Date(input);\n }\n\n public static printDuration(start: Date, end: Date) {\n start = new Date(start);\n end = new Date(end);\n\n // get total seconds between the times\n let delta = Math.abs(start.valueOf() - end.valueOf()) / 1000;\n\n // calculate (and subtract) whole days\n const days = Math.floor(delta / 86400);\n delta -= days angular.json aspnetcore-https.js eslint.config.js karma.conf.js lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules nuget.config package.json package-lock.json public quickapp.client.esproj QuickApp.report.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json 86400;\n\n // calculate (and subtract) whole hours\n const hours = Math.floor(delta / 3600) % 24;\n delta -= hours angular.json aspnetcore-https.js eslint.config.js karma.conf.js lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules nuget.config package.json package-lock.json public quickapp.client.esproj QuickApp.report.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json 3600;\n\n // calculate (and subtract) whole minutes\n const minutes = Math.floor(delta / 60) % 60;\n delta -= minutes angular.json aspnetcore-https.js eslint.config.js karma.conf.js lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules nuget.config package.json package-lock.json public quickapp.client.esproj QuickApp.report.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json 60;\n\n // what's left is seconds\n const seconds = delta % 60; // in theory the modulus is not required\n\n let printedDays = '';\n\n if (days) {\n printedDays = `${days} days`;\n }\n\n if (hours) {\n printedDays += printedDays ? `, ${hours} hours` : `${hours} hours`;\n }\n\n if (minutes) {\n printedDays += printedDays ? `, ${minutes} minutes` : `${minutes} minutes`;\n }\n\n if (seconds) {\n printedDays += printedDays ? ` and ${seconds} seconds` : `${seconds} seconds`;\n }\n\n\n if (!printedDays) {\n printedDays = '0';\n }\n\n return printedDays;\n }\n\n public static getAge(birthDate: string | number | Date, otherDate: string | number | Date) {\n birthDate = new Date(birthDate);\n otherDate = new Date(otherDate);\n\n let years = (otherDate.getFullYear() - birthDate.getFullYear());\n\n if (otherDate.getMonth() < birthDate.getMonth() ||\n otherDate.getMonth() === birthDate.getMonth() && otherDate.getDate() < birthDate.getDate()) {\n years--;\n }\n\n return years;\n }\n\n public static searchArray(searchTerm: string, caseSensitive: boolean, ...values: unknown[]) {\n if (!searchTerm) {\n return true;\n }\n\n let filter = searchTerm.trim();\n let data = values.join();\n\n if (!caseSensitive) {\n filter = filter.toLowerCase();\n data = data.toLowerCase();\n }\n\n return data.indexOf(filter) !== -1;\n }\n\n public static moveArrayItem(array: unknown[], oldIndex: number, newIndex: number) {\n if (oldIndex < 0) {\n return;\n }\n\n if (newIndex < 0) {\n newIndex += array.length;\n }\n\n if (newIndex >= array.length) {\n let k = newIndex - array.length;\n while ((k--) + 1) {\n array.push(undefined);\n }\n }\n\n array.splice(newIndex, 0, array.splice(oldIndex, 1)[0]);\n }\n\n public static expandCamelCase(text: string) {\n if (!text) {\n return text;\n }\n\n return text.replace(/([A-Z][a-z]+)/g, ' $1')\n .replace(/([A-Z][A-Z]+)/g, ' $1')\n .replace(/([^A-Za-z ]+)/g, ' $1');\n }\n\n public static testIsAbsoluteUrl(url: string) {\n const r = new RegExp('^(?:[a-z]+:)?//', 'i');\n return r.test(url);\n }\n\n public static convertToAbsoluteUrl(url: string) {\n return Utilities.testIsAbsoluteUrl(url) ? url : '//' + url;\n }\n\n public static removeNulls<T extends object | unknown[]>(item: T) {\n const isArray = Array.isArray(item);\n\n for (const k in item) {\n if (Object.prototype.hasOwnProperty.call(item, k)) {\n const propertyValue = item[k as keyof typeof item];\n\n if (propertyValue === null) {\n if (isArray)\n item.splice(+k, 1)\n else\n delete item[k as keyof typeof item];\n } else if (typeof propertyValue === 'object') {\n Utilities.removeNulls(propertyValue);\n }\n\n if (isArray && item.length === +k) {\n Utilities.removeNulls(item);\n }\n }\n }\n\n return item;\n }\n\n public static debounce(fn: (...params: unknown[]) => unknown, delay: number, immediate?: boolean) {\n let timer: ReturnType<typeof setTimeout> | undefined;\n\n return function (this: unknown, ...args: unknown[]) {\n if (timer === undefined && immediate) {\n fn.apply(this, args);\n }\n\n clearTimeout(timer);\n timer = setTimeout(() => fn.apply(this, args), delay);\n return timer;\n }\n }\n}\n",
            "usedDeprecatedRules": []
          }
        ]
      }
    }
  },
  "ng-three-template": {
    "repo": {
      "HEAD": {
        "commit": "31fec97f2b3a25561f68b845a3aa63b64b4c70c2",
        "author": "JohnnyDevNull",
        "date": "Thu May 2 12:10:19 2024 +0200",
        "message": "Update README.md"
      },
      "url": "https://github.com/JohnnyDevNull/ng-three-template"
    },
    "before": {
      "ng-three-template": {
        "recommended": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/ng-three-template/src/app/ui/ui-infobar-bottom/ui-infobar-bottom.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/no-empty-lifecycle-method",
                "severity": 2,
                "message": "Lifecycle methods should not be empty",
                "line": 15,
                "column": 3,
                "nodeType": "MethodDefinition",
                "messageId": "noEmptyLifecycleMethod",
                "endLine": 16,
                "endColumn": 4,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveLifecycleMethod",
                    "fix": {
                      "range": [
                        43,
                        433
                      ],
                      "text": ", ViewEncapsulation } from '@angular/core';\n\n@Component({\n selector: 'app-ui-infobar-bottom',\n standalone: true,\n encapsulation: ViewEncapsulation.None,\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './ui-infobar-bottom.component.html'\n})\nexport class UiInfobarBottomComponent {\n\n public constructor() {\n }\n\n "
                    },
                    "desc": "Remove lifecycle method"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { ChangeDetectionStrategy, Component, OnInit, ViewEncapsulation } from '@angular/core';\n\n@Component({\n selector: 'app-ui-infobar-bottom',\n standalone: true,\n encapsulation: ViewEncapsulation.None,\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './ui-infobar-bottom.component.html'\n})\nexport class UiInfobarBottomComponent implements OnInit {\n\n public constructor() {\n }\n\n public ngOnInit(): void {\n }\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/ng-three-template/src/app/ui/ui-infobar-top/ui-infobar-top.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/no-empty-lifecycle-method",
                "severity": 2,
                "message": "Lifecycle methods should not be empty",
                "line": 15,
                "column": 3,
                "nodeType": "MethodDefinition",
                "messageId": "noEmptyLifecycleMethod",
                "endLine": 16,
                "endColumn": 4,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveLifecycleMethod",
                    "fix": {
                      "range": [
                        43,
                        424
                      ],
                      "text": ", ViewEncapsulation } from '@angular/core';\n\n@Component({\n selector: 'app-ui-infobar-top',\n standalone: true,\n encapsulation: ViewEncapsulation.None,\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './ui-infobar-top.component.html'\n})\nexport class UiInfobarTopComponent {\n\n public constructor() {\n }\n\n "
                    },
                    "desc": "Remove lifecycle method"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { ChangeDetectionStrategy, Component, OnInit, ViewEncapsulation } from '@angular/core';\n\n@Component({\n selector: 'app-ui-infobar-top',\n standalone: true,\n encapsulation: ViewEncapsulation.None,\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './ui-infobar-top.component.html'\n})\nexport class UiInfobarTopComponent implements OnInit {\n\n public constructor() {\n }\n\n public ngOnInit(): void {\n }\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/ng-three-template/src/app/ui/ui-sidebar-left/ui-sidebar-left.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/no-empty-lifecycle-method",
                "severity": 2,
                "message": "Lifecycle methods should not be empty",
                "line": 15,
                "column": 3,
                "nodeType": "MethodDefinition",
                "messageId": "noEmptyLifecycleMethod",
                "endLine": 16,
                "endColumn": 4,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveLifecycleMethod",
                    "fix": {
                      "range": [
                        43,
                        427
                      ],
                      "text": ", ViewEncapsulation } from '@angular/core';\n\n@Component({\n selector: 'app-ui-sidebar-left',\n standalone: true,\n encapsulation: ViewEncapsulation.None,\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './ui-sidebar-left.component.html'\n})\nexport class UiSidebarLeftComponent {\n\n public constructor() {\n }\n\n "
                    },
                    "desc": "Remove lifecycle method"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { ChangeDetectionStrategy, Component, OnInit, ViewEncapsulation } from '@angular/core';\n\n@Component({\n selector: 'app-ui-sidebar-left',\n standalone: true,\n encapsulation: ViewEncapsulation.None,\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './ui-sidebar-left.component.html'\n})\nexport class UiSidebarLeftComponent implements OnInit {\n\n public constructor() {\n }\n\n public ngOnInit(): void {\n }\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/ng-three-template/src/app/ui/ui-sidebar-right/ui-sidebar-right.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/no-empty-lifecycle-method",
                "severity": 2,
                "message": "Lifecycle methods should not be empty",
                "line": 15,
                "column": 3,
                "nodeType": "MethodDefinition",
                "messageId": "noEmptyLifecycleMethod",
                "endLine": 16,
                "endColumn": 4,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveLifecycleMethod",
                    "fix": {
                      "range": [
                        43,
                        430
                      ],
                      "text": ", ViewEncapsulation } from '@angular/core';\n\n@Component({\n selector: 'app-ui-sidebar-right',\n standalone: true,\n encapsulation: ViewEncapsulation.None,\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './ui-sidebar-right.component.html'\n})\nexport class UiSidebarRightComponent {\n\n public constructor() {\n }\n\n "
                    },
                    "desc": "Remove lifecycle method"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { ChangeDetectionStrategy, Component, OnInit, ViewEncapsulation } from '@angular/core';\n\n@Component({\n selector: 'app-ui-sidebar-right',\n standalone: true,\n encapsulation: ViewEncapsulation.None,\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './ui-sidebar-right.component.html'\n})\nexport class UiSidebarRightComponent implements OnInit {\n\n public constructor() {\n }\n\n public ngOnInit(): void {\n }\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/ng-three-template/src/app/ui/ui.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/no-empty-lifecycle-method",
                "severity": 2,
                "message": "Lifecycle methods should not be empty",
                "line": 26,
                "column": 3,
                "nodeType": "MethodDefinition",
                "messageId": "noEmptyLifecycleMethod",
                "endLine": 27,
                "endColumn": 4,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveLifecycleMethod",
                    "fix": {
                      "range": [
                        43,
                        872
                      ],
                      "text": ", ViewEncapsulation } from '@angular/core';\n\nimport { UiInfobarBottomComponent } from './ui-infobar-bottom/ui-infobar-bottom.component';\nimport { UiInfobarTopComponent } from './ui-infobar-top/ui-infobar-top.component';\nimport { UiSidebarLeftComponent } from './ui-sidebar-left/ui-sidebar-left.component';\nimport { UiSidebarRightComponent } from './ui-sidebar-right/ui-sidebar-right.component';\n\n@Component({\n selector: 'app-ui',\n standalone: true,\n encapsulation: ViewEncapsulation.None,\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './ui.component.html',\n imports: [\n UiInfobarBottomComponent,\n UiInfobarTopComponent,\n UiSidebarLeftComponent,\n UiSidebarRightComponent\n ]\n})\nexport class UiComponent {\n\n public constructor() {\n }\n\n "
                    },
                    "desc": "Remove lifecycle method"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { ChangeDetectionStrategy, Component, OnInit, ViewEncapsulation } from '@angular/core';\n\nimport { UiInfobarBottomComponent } from './ui-infobar-bottom/ui-infobar-bottom.component';\nimport { UiInfobarTopComponent } from './ui-infobar-top/ui-infobar-top.component';\nimport { UiSidebarLeftComponent } from './ui-sidebar-left/ui-sidebar-left.component';\nimport { UiSidebarRightComponent } from './ui-sidebar-right/ui-sidebar-right.component';\n\n@Component({\n selector: 'app-ui',\n standalone: true,\n encapsulation: ViewEncapsulation.None,\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './ui.component.html',\n imports: [\n UiInfobarBottomComponent,\n UiInfobarTopComponent,\n UiSidebarLeftComponent,\n UiSidebarRightComponent\n ]\n})\nexport class UiComponent implements OnInit {\n\n public constructor() {\n }\n\n public ngOnInit(): void {\n }\n\n}\n",
            "usedDeprecatedRules": []
          }
        ],
        "all": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/ng-three-template/src/app/app.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 9,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 9,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        43,
                        296
                      ],
                      "text": " } from '@angular/core';\n\nimport { EngineComponent } from './engine/engine.component';\nimport { UiComponent } from './ui/ui.component';\n\n@Component({\n selector: 'app-root',\n standalone: true,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\n\nimport { EngineComponent } from './engine/engine.component';\nimport { UiComponent } from './ui/ui.component';\n\n@Component({\n selector: 'app-root',\n standalone: true,\n encapsulation: ViewEncapsulation.None,\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './app.component.html',\n imports: [\n EngineComponent,\n UiComponent,\n ]\n})\nexport class AppComponent {\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/ng-three-template/src/app/engine/engine.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 7,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 7,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        74,
                        268
                      ],
                      "text": " } from '@angular/core';\nimport { EngineService } from './engine.service';\n\n@Component({\n selector: 'app-engine',\n standalone: true,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use the `viewChild` function instead of the `ViewChild` decorator",
                "line": 13,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferQuerySignals",
                "endLine": 13,
                "endColumn": 47
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { ChangeDetectionStrategy, Component, ElementRef, OnInit, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { EngineService } from './engine.service';\n\n@Component({\n selector: 'app-engine',\n standalone: true,\n encapsulation: ViewEncapsulation.None,\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './engine.component.html'\n})\nexport class EngineComponent implements OnInit {\n\n @ViewChild('rendererCanvas', {static: true})\n public rendererCanvas: ElementRef<HTMLCanvasElement>;\n\n public constructor(private engServ: EngineService) {\n }\n\n public ngOnInit(): void {\n this.engServ.createScene(this.rendererCanvas);\n this.engServ.animate();\n }\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/ng-three-template/src/app/ui/ui-infobar-bottom/ui-infobar-bottom.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 6,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 6,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        51,
                        206
                      ],
                      "text": " } from '@angular/core';\n\n@Component({\n selector: 'app-ui-infobar-bottom',\n standalone: true,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/no-empty-lifecycle-method",
                "severity": 2,
                "message": "Lifecycle methods should not be empty",
                "line": 15,
                "column": 3,
                "nodeType": "MethodDefinition",
                "messageId": "noEmptyLifecycleMethod",
                "endLine": 16,
                "endColumn": 4,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveLifecycleMethod",
                    "fix": {
                      "range": [
                        43,
                        433
                      ],
                      "text": ", ViewEncapsulation } from '@angular/core';\n\n@Component({\n selector: 'app-ui-infobar-bottom',\n standalone: true,\n encapsulation: ViewEncapsulation.None,\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './ui-infobar-bottom.component.html'\n})\nexport class UiInfobarBottomComponent {\n\n public constructor() {\n }\n\n "
                    },
                    "desc": "Remove lifecycle method"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { ChangeDetectionStrategy, Component, OnInit, ViewEncapsulation } from '@angular/core';\n\n@Component({\n selector: 'app-ui-infobar-bottom',\n standalone: true,\n encapsulation: ViewEncapsulation.None,\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './ui-infobar-bottom.component.html'\n})\nexport class UiInfobarBottomComponent implements OnInit {\n\n public constructor() {\n }\n\n public ngOnInit(): void {\n }\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/ng-three-template/src/app/ui/ui-infobar-top/ui-infobar-top.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 6,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 6,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        51,
                        203
                      ],
                      "text": " } from '@angular/core';\n\n@Component({\n selector: 'app-ui-infobar-top',\n standalone: true,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/no-empty-lifecycle-method",
                "severity": 2,
                "message": "Lifecycle methods should not be empty",
                "line": 15,
                "column": 3,
                "nodeType": "MethodDefinition",
                "messageId": "noEmptyLifecycleMethod",
                "endLine": 16,
                "endColumn": 4,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveLifecycleMethod",
                    "fix": {
                      "range": [
                        43,
                        424
                      ],
                      "text": ", ViewEncapsulation } from '@angular/core';\n\n@Component({\n selector: 'app-ui-infobar-top',\n standalone: true,\n encapsulation: ViewEncapsulation.None,\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './ui-infobar-top.component.html'\n})\nexport class UiInfobarTopComponent {\n\n public constructor() {\n }\n\n "
                    },
                    "desc": "Remove lifecycle method"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { ChangeDetectionStrategy, Component, OnInit, ViewEncapsulation } from '@angular/core';\n\n@Component({\n selector: 'app-ui-infobar-top',\n standalone: true,\n encapsulation: ViewEncapsulation.None,\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './ui-infobar-top.component.html'\n})\nexport class UiInfobarTopComponent implements OnInit {\n\n public constructor() {\n }\n\n public ngOnInit(): void {\n }\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/ng-three-template/src/app/ui/ui-sidebar-left/ui-sidebar-left.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 6,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 6,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        51,
                        204
                      ],
                      "text": " } from '@angular/core';\n\n@Component({\n selector: 'app-ui-sidebar-left',\n standalone: true,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/no-empty-lifecycle-method",
                "severity": 2,
                "message": "Lifecycle methods should not be empty",
                "line": 15,
                "column": 3,
                "nodeType": "MethodDefinition",
                "messageId": "noEmptyLifecycleMethod",
                "endLine": 16,
                "endColumn": 4,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveLifecycleMethod",
                    "fix": {
                      "range": [
                        43,
                        427
                      ],
                      "text": ", ViewEncapsulation } from '@angular/core';\n\n@Component({\n selector: 'app-ui-sidebar-left',\n standalone: true,\n encapsulation: ViewEncapsulation.None,\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './ui-sidebar-left.component.html'\n})\nexport class UiSidebarLeftComponent {\n\n public constructor() {\n }\n\n "
                    },
                    "desc": "Remove lifecycle method"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { ChangeDetectionStrategy, Component, OnInit, ViewEncapsulation } from '@angular/core';\n\n@Component({\n selector: 'app-ui-sidebar-left',\n standalone: true,\n encapsulation: ViewEncapsulation.None,\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './ui-sidebar-left.component.html'\n})\nexport class UiSidebarLeftComponent implements OnInit {\n\n public constructor() {\n }\n\n public ngOnInit(): void {\n }\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/ng-three-template/src/app/ui/ui-sidebar-right/ui-sidebar-right.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 6,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 6,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        51,
                        205
                      ],
                      "text": " } from '@angular/core';\n\n@Component({\n selector: 'app-ui-sidebar-right',\n standalone: true,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/no-empty-lifecycle-method",
                "severity": 2,
                "message": "Lifecycle methods should not be empty",
                "line": 15,
                "column": 3,
                "nodeType": "MethodDefinition",
                "messageId": "noEmptyLifecycleMethod",
                "endLine": 16,
                "endColumn": 4,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveLifecycleMethod",
                    "fix": {
                      "range": [
                        43,
                        430
                      ],
                      "text": ", ViewEncapsulation } from '@angular/core';\n\n@Component({\n selector: 'app-ui-sidebar-right',\n standalone: true,\n encapsulation: ViewEncapsulation.None,\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './ui-sidebar-right.component.html'\n})\nexport class UiSidebarRightComponent {\n\n public constructor() {\n }\n\n "
                    },
                    "desc": "Remove lifecycle method"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { ChangeDetectionStrategy, Component, OnInit, ViewEncapsulation } from '@angular/core';\n\n@Component({\n selector: 'app-ui-sidebar-right',\n standalone: true,\n encapsulation: ViewEncapsulation.None,\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './ui-sidebar-right.component.html'\n})\nexport class UiSidebarRightComponent implements OnInit {\n\n public constructor() {\n }\n\n public ngOnInit(): void {\n }\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/ng-three-template/src/app/ui/ui.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 11,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 11,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        51,
                        542
                      ],
                      "text": " } from '@angular/core';\n\nimport { UiInfobarBottomComponent } from './ui-infobar-bottom/ui-infobar-bottom.component';\nimport { UiInfobarTopComponent } from './ui-infobar-top/ui-infobar-top.component';\nimport { UiSidebarLeftComponent } from './ui-sidebar-left/ui-sidebar-left.component';\nimport { UiSidebarRightComponent } from './ui-sidebar-right/ui-sidebar-right.component';\n\n@Component({\n selector: 'app-ui',\n standalone: true,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/no-empty-lifecycle-method",
                "severity": 2,
                "message": "Lifecycle methods should not be empty",
                "line": 26,
                "column": 3,
                "nodeType": "MethodDefinition",
                "messageId": "noEmptyLifecycleMethod",
                "endLine": 27,
                "endColumn": 4,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveLifecycleMethod",
                    "fix": {
                      "range": [
                        43,
                        872
                      ],
                      "text": ", ViewEncapsulation } from '@angular/core';\n\nimport { UiInfobarBottomComponent } from './ui-infobar-bottom/ui-infobar-bottom.component';\nimport { UiInfobarTopComponent } from './ui-infobar-top/ui-infobar-top.component';\nimport { UiSidebarLeftComponent } from './ui-sidebar-left/ui-sidebar-left.component';\nimport { UiSidebarRightComponent } from './ui-sidebar-right/ui-sidebar-right.component';\n\n@Component({\n selector: 'app-ui',\n standalone: true,\n encapsulation: ViewEncapsulation.None,\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './ui.component.html',\n imports: [\n UiInfobarBottomComponent,\n UiInfobarTopComponent,\n UiSidebarLeftComponent,\n UiSidebarRightComponent\n ]\n})\nexport class UiComponent {\n\n public constructor() {\n }\n\n "
                    },
                    "desc": "Remove lifecycle method"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { ChangeDetectionStrategy, Component, OnInit, ViewEncapsulation } from '@angular/core';\n\nimport { UiInfobarBottomComponent } from './ui-infobar-bottom/ui-infobar-bottom.component';\nimport { UiInfobarTopComponent } from './ui-infobar-top/ui-infobar-top.component';\nimport { UiSidebarLeftComponent } from './ui-sidebar-left/ui-sidebar-left.component';\nimport { UiSidebarRightComponent } from './ui-sidebar-right/ui-sidebar-right.component';\n\n@Component({\n selector: 'app-ui',\n standalone: true,\n encapsulation: ViewEncapsulation.None,\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './ui.component.html',\n imports: [\n UiInfobarBottomComponent,\n UiInfobarTopComponent,\n UiSidebarLeftComponent,\n UiSidebarRightComponent\n ]\n})\nexport class UiComponent implements OnInit {\n\n public constructor() {\n }\n\n public ngOnInit(): void {\n }\n\n}\n",
            "usedDeprecatedRules": []
          }
        ]
      }
    },
    "after": {
      "ng-three-template": {
        "recommended": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/ng-three-template/src/app/ui/ui-infobar-bottom/ui-infobar-bottom.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/no-empty-lifecycle-method",
                "severity": 2,
                "message": "Lifecycle methods should not be empty",
                "line": 15,
                "column": 3,
                "nodeType": "MethodDefinition",
                "messageId": "noEmptyLifecycleMethod",
                "endLine": 16,
                "endColumn": 4,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveLifecycleMethod",
                    "fix": {
                      "range": [
                        43,
                        433
                      ],
                      "text": ", ViewEncapsulation } from '@angular/core';\n\n@Component({\n selector: 'app-ui-infobar-bottom',\n standalone: true,\n encapsulation: ViewEncapsulation.None,\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './ui-infobar-bottom.component.html'\n})\nexport class UiInfobarBottomComponent {\n\n public constructor() {\n }\n\n "
                    },
                    "desc": "Remove lifecycle method"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { ChangeDetectionStrategy, Component, OnInit, ViewEncapsulation } from '@angular/core';\n\n@Component({\n selector: 'app-ui-infobar-bottom',\n standalone: true,\n encapsulation: ViewEncapsulation.None,\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './ui-infobar-bottom.component.html'\n})\nexport class UiInfobarBottomComponent implements OnInit {\n\n public constructor() {\n }\n\n public ngOnInit(): void {\n }\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/ng-three-template/src/app/ui/ui-infobar-top/ui-infobar-top.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/no-empty-lifecycle-method",
                "severity": 2,
                "message": "Lifecycle methods should not be empty",
                "line": 15,
                "column": 3,
                "nodeType": "MethodDefinition",
                "messageId": "noEmptyLifecycleMethod",
                "endLine": 16,
                "endColumn": 4,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveLifecycleMethod",
                    "fix": {
                      "range": [
                        43,
                        424
                      ],
                      "text": ", ViewEncapsulation } from '@angular/core';\n\n@Component({\n selector: 'app-ui-infobar-top',\n standalone: true,\n encapsulation: ViewEncapsulation.None,\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './ui-infobar-top.component.html'\n})\nexport class UiInfobarTopComponent {\n\n public constructor() {\n }\n\n "
                    },
                    "desc": "Remove lifecycle method"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { ChangeDetectionStrategy, Component, OnInit, ViewEncapsulation } from '@angular/core';\n\n@Component({\n selector: 'app-ui-infobar-top',\n standalone: true,\n encapsulation: ViewEncapsulation.None,\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './ui-infobar-top.component.html'\n})\nexport class UiInfobarTopComponent implements OnInit {\n\n public constructor() {\n }\n\n public ngOnInit(): void {\n }\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/ng-three-template/src/app/ui/ui-sidebar-left/ui-sidebar-left.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/no-empty-lifecycle-method",
                "severity": 2,
                "message": "Lifecycle methods should not be empty",
                "line": 15,
                "column": 3,
                "nodeType": "MethodDefinition",
                "messageId": "noEmptyLifecycleMethod",
                "endLine": 16,
                "endColumn": 4,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveLifecycleMethod",
                    "fix": {
                      "range": [
                        43,
                        427
                      ],
                      "text": ", ViewEncapsulation } from '@angular/core';\n\n@Component({\n selector: 'app-ui-sidebar-left',\n standalone: true,\n encapsulation: ViewEncapsulation.None,\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './ui-sidebar-left.component.html'\n})\nexport class UiSidebarLeftComponent {\n\n public constructor() {\n }\n\n "
                    },
                    "desc": "Remove lifecycle method"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { ChangeDetectionStrategy, Component, OnInit, ViewEncapsulation } from '@angular/core';\n\n@Component({\n selector: 'app-ui-sidebar-left',\n standalone: true,\n encapsulation: ViewEncapsulation.None,\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './ui-sidebar-left.component.html'\n})\nexport class UiSidebarLeftComponent implements OnInit {\n\n public constructor() {\n }\n\n public ngOnInit(): void {\n }\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/ng-three-template/src/app/ui/ui-sidebar-right/ui-sidebar-right.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/no-empty-lifecycle-method",
                "severity": 2,
                "message": "Lifecycle methods should not be empty",
                "line": 15,
                "column": 3,
                "nodeType": "MethodDefinition",
                "messageId": "noEmptyLifecycleMethod",
                "endLine": 16,
                "endColumn": 4,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveLifecycleMethod",
                    "fix": {
                      "range": [
                        43,
                        430
                      ],
                      "text": ", ViewEncapsulation } from '@angular/core';\n\n@Component({\n selector: 'app-ui-sidebar-right',\n standalone: true,\n encapsulation: ViewEncapsulation.None,\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './ui-sidebar-right.component.html'\n})\nexport class UiSidebarRightComponent {\n\n public constructor() {\n }\n\n "
                    },
                    "desc": "Remove lifecycle method"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { ChangeDetectionStrategy, Component, OnInit, ViewEncapsulation } from '@angular/core';\n\n@Component({\n selector: 'app-ui-sidebar-right',\n standalone: true,\n encapsulation: ViewEncapsulation.None,\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './ui-sidebar-right.component.html'\n})\nexport class UiSidebarRightComponent implements OnInit {\n\n public constructor() {\n }\n\n public ngOnInit(): void {\n }\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/ng-three-template/src/app/ui/ui.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/no-empty-lifecycle-method",
                "severity": 2,
                "message": "Lifecycle methods should not be empty",
                "line": 26,
                "column": 3,
                "nodeType": "MethodDefinition",
                "messageId": "noEmptyLifecycleMethod",
                "endLine": 27,
                "endColumn": 4,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveLifecycleMethod",
                    "fix": {
                      "range": [
                        43,
                        872
                      ],
                      "text": ", ViewEncapsulation } from '@angular/core';\n\nimport { UiInfobarBottomComponent } from './ui-infobar-bottom/ui-infobar-bottom.component';\nimport { UiInfobarTopComponent } from './ui-infobar-top/ui-infobar-top.component';\nimport { UiSidebarLeftComponent } from './ui-sidebar-left/ui-sidebar-left.component';\nimport { UiSidebarRightComponent } from './ui-sidebar-right/ui-sidebar-right.component';\n\n@Component({\n selector: 'app-ui',\n standalone: true,\n encapsulation: ViewEncapsulation.None,\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './ui.component.html',\n imports: [\n UiInfobarBottomComponent,\n UiInfobarTopComponent,\n UiSidebarLeftComponent,\n UiSidebarRightComponent\n ]\n})\nexport class UiComponent {\n\n public constructor() {\n }\n\n "
                    },
                    "desc": "Remove lifecycle method"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { ChangeDetectionStrategy, Component, OnInit, ViewEncapsulation } from '@angular/core';\n\nimport { UiInfobarBottomComponent } from './ui-infobar-bottom/ui-infobar-bottom.component';\nimport { UiInfobarTopComponent } from './ui-infobar-top/ui-infobar-top.component';\nimport { UiSidebarLeftComponent } from './ui-sidebar-left/ui-sidebar-left.component';\nimport { UiSidebarRightComponent } from './ui-sidebar-right/ui-sidebar-right.component';\n\n@Component({\n selector: 'app-ui',\n standalone: true,\n encapsulation: ViewEncapsulation.None,\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './ui.component.html',\n imports: [\n UiInfobarBottomComponent,\n UiInfobarTopComponent,\n UiSidebarLeftComponent,\n UiSidebarRightComponent\n ]\n})\nexport class UiComponent implements OnInit {\n\n public constructor() {\n }\n\n public ngOnInit(): void {\n }\n\n}\n",
            "usedDeprecatedRules": []
          }
        ],
        "all": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/ng-three-template/src/app/app.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 9,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 9,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        43,
                        296
                      ],
                      "text": " } from '@angular/core';\n\nimport { EngineComponent } from './engine/engine.component';\nimport { UiComponent } from './ui/ui.component';\n\n@Component({\n selector: 'app-root',\n standalone: true,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\n\nimport { EngineComponent } from './engine/engine.component';\nimport { UiComponent } from './ui/ui.component';\n\n@Component({\n selector: 'app-root',\n standalone: true,\n encapsulation: ViewEncapsulation.None,\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './app.component.html',\n imports: [\n EngineComponent,\n UiComponent,\n ]\n})\nexport class AppComponent {\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/ng-three-template/src/app/engine/engine.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 7,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 7,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        74,
                        268
                      ],
                      "text": " } from '@angular/core';\nimport { EngineService } from './engine.service';\n\n@Component({\n selector: 'app-engine',\n standalone: true,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use the `viewChild` function instead of the `ViewChild` decorator",
                "line": 13,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferQuerySignals",
                "endLine": 13,
                "endColumn": 47
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { ChangeDetectionStrategy, Component, ElementRef, OnInit, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { EngineService } from './engine.service';\n\n@Component({\n selector: 'app-engine',\n standalone: true,\n encapsulation: ViewEncapsulation.None,\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './engine.component.html'\n})\nexport class EngineComponent implements OnInit {\n\n @ViewChild('rendererCanvas', {static: true})\n public rendererCanvas: ElementRef<HTMLCanvasElement>;\n\n public constructor(private engServ: EngineService) {\n }\n\n public ngOnInit(): void {\n this.engServ.createScene(this.rendererCanvas);\n this.engServ.animate();\n }\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/ng-three-template/src/app/ui/ui-infobar-bottom/ui-infobar-bottom.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 6,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 6,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        51,
                        206
                      ],
                      "text": " } from '@angular/core';\n\n@Component({\n selector: 'app-ui-infobar-bottom',\n standalone: true,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/no-empty-lifecycle-method",
                "severity": 2,
                "message": "Lifecycle methods should not be empty",
                "line": 15,
                "column": 3,
                "nodeType": "MethodDefinition",
                "messageId": "noEmptyLifecycleMethod",
                "endLine": 16,
                "endColumn": 4,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveLifecycleMethod",
                    "fix": {
                      "range": [
                        43,
                        433
                      ],
                      "text": ", ViewEncapsulation } from '@angular/core';\n\n@Component({\n selector: 'app-ui-infobar-bottom',\n standalone: true,\n encapsulation: ViewEncapsulation.None,\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './ui-infobar-bottom.component.html'\n})\nexport class UiInfobarBottomComponent {\n\n public constructor() {\n }\n\n "
                    },
                    "desc": "Remove lifecycle method"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { ChangeDetectionStrategy, Component, OnInit, ViewEncapsulation } from '@angular/core';\n\n@Component({\n selector: 'app-ui-infobar-bottom',\n standalone: true,\n encapsulation: ViewEncapsulation.None,\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './ui-infobar-bottom.component.html'\n})\nexport class UiInfobarBottomComponent implements OnInit {\n\n public constructor() {\n }\n\n public ngOnInit(): void {\n }\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/ng-three-template/src/app/ui/ui-infobar-top/ui-infobar-top.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 6,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 6,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        51,
                        203
                      ],
                      "text": " } from '@angular/core';\n\n@Component({\n selector: 'app-ui-infobar-top',\n standalone: true,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/no-empty-lifecycle-method",
                "severity": 2,
                "message": "Lifecycle methods should not be empty",
                "line": 15,
                "column": 3,
                "nodeType": "MethodDefinition",
                "messageId": "noEmptyLifecycleMethod",
                "endLine": 16,
                "endColumn": 4,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveLifecycleMethod",
                    "fix": {
                      "range": [
                        43,
                        424
                      ],
                      "text": ", ViewEncapsulation } from '@angular/core';\n\n@Component({\n selector: 'app-ui-infobar-top',\n standalone: true,\n encapsulation: ViewEncapsulation.None,\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './ui-infobar-top.component.html'\n})\nexport class UiInfobarTopComponent {\n\n public constructor() {\n }\n\n "
                    },
                    "desc": "Remove lifecycle method"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { ChangeDetectionStrategy, Component, OnInit, ViewEncapsulation } from '@angular/core';\n\n@Component({\n selector: 'app-ui-infobar-top',\n standalone: true,\n encapsulation: ViewEncapsulation.None,\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './ui-infobar-top.component.html'\n})\nexport class UiInfobarTopComponent implements OnInit {\n\n public constructor() {\n }\n\n public ngOnInit(): void {\n }\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/ng-three-template/src/app/ui/ui-sidebar-left/ui-sidebar-left.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 6,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 6,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        51,
                        204
                      ],
                      "text": " } from '@angular/core';\n\n@Component({\n selector: 'app-ui-sidebar-left',\n standalone: true,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/no-empty-lifecycle-method",
                "severity": 2,
                "message": "Lifecycle methods should not be empty",
                "line": 15,
                "column": 3,
                "nodeType": "MethodDefinition",
                "messageId": "noEmptyLifecycleMethod",
                "endLine": 16,
                "endColumn": 4,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveLifecycleMethod",
                    "fix": {
                      "range": [
                        43,
                        427
                      ],
                      "text": ", ViewEncapsulation } from '@angular/core';\n\n@Component({\n selector: 'app-ui-sidebar-left',\n standalone: true,\n encapsulation: ViewEncapsulation.None,\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './ui-sidebar-left.component.html'\n})\nexport class UiSidebarLeftComponent {\n\n public constructor() {\n }\n\n "
                    },
                    "desc": "Remove lifecycle method"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { ChangeDetectionStrategy, Component, OnInit, ViewEncapsulation } from '@angular/core';\n\n@Component({\n selector: 'app-ui-sidebar-left',\n standalone: true,\n encapsulation: ViewEncapsulation.None,\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './ui-sidebar-left.component.html'\n})\nexport class UiSidebarLeftComponent implements OnInit {\n\n public constructor() {\n }\n\n public ngOnInit(): void {\n }\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/ng-three-template/src/app/ui/ui-sidebar-right/ui-sidebar-right.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 6,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 6,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        51,
                        205
                      ],
                      "text": " } from '@angular/core';\n\n@Component({\n selector: 'app-ui-sidebar-right',\n standalone: true,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/no-empty-lifecycle-method",
                "severity": 2,
                "message": "Lifecycle methods should not be empty",
                "line": 15,
                "column": 3,
                "nodeType": "MethodDefinition",
                "messageId": "noEmptyLifecycleMethod",
                "endLine": 16,
                "endColumn": 4,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveLifecycleMethod",
                    "fix": {
                      "range": [
                        43,
                        430
                      ],
                      "text": ", ViewEncapsulation } from '@angular/core';\n\n@Component({\n selector: 'app-ui-sidebar-right',\n standalone: true,\n encapsulation: ViewEncapsulation.None,\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './ui-sidebar-right.component.html'\n})\nexport class UiSidebarRightComponent {\n\n public constructor() {\n }\n\n "
                    },
                    "desc": "Remove lifecycle method"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { ChangeDetectionStrategy, Component, OnInit, ViewEncapsulation } from '@angular/core';\n\n@Component({\n selector: 'app-ui-sidebar-right',\n standalone: true,\n encapsulation: ViewEncapsulation.None,\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './ui-sidebar-right.component.html'\n})\nexport class UiSidebarRightComponent implements OnInit {\n\n public constructor() {\n }\n\n public ngOnInit(): void {\n }\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/ng-three-template/src/app/ui/ui.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 11,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 11,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        51,
                        542
                      ],
                      "text": " } from '@angular/core';\n\nimport { UiInfobarBottomComponent } from './ui-infobar-bottom/ui-infobar-bottom.component';\nimport { UiInfobarTopComponent } from './ui-infobar-top/ui-infobar-top.component';\nimport { UiSidebarLeftComponent } from './ui-sidebar-left/ui-sidebar-left.component';\nimport { UiSidebarRightComponent } from './ui-sidebar-right/ui-sidebar-right.component';\n\n@Component({\n selector: 'app-ui',\n standalone: true,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/no-empty-lifecycle-method",
                "severity": 2,
                "message": "Lifecycle methods should not be empty",
                "line": 26,
                "column": 3,
                "nodeType": "MethodDefinition",
                "messageId": "noEmptyLifecycleMethod",
                "endLine": 27,
                "endColumn": 4,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveLifecycleMethod",
                    "fix": {
                      "range": [
                        43,
                        872
                      ],
                      "text": ", ViewEncapsulation } from '@angular/core';\n\nimport { UiInfobarBottomComponent } from './ui-infobar-bottom/ui-infobar-bottom.component';\nimport { UiInfobarTopComponent } from './ui-infobar-top/ui-infobar-top.component';\nimport { UiSidebarLeftComponent } from './ui-sidebar-left/ui-sidebar-left.component';\nimport { UiSidebarRightComponent } from './ui-sidebar-right/ui-sidebar-right.component';\n\n@Component({\n selector: 'app-ui',\n standalone: true,\n encapsulation: ViewEncapsulation.None,\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './ui.component.html',\n imports: [\n UiInfobarBottomComponent,\n UiInfobarTopComponent,\n UiSidebarLeftComponent,\n UiSidebarRightComponent\n ]\n})\nexport class UiComponent {\n\n public constructor() {\n }\n\n "
                    },
                    "desc": "Remove lifecycle method"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { ChangeDetectionStrategy, Component, OnInit, ViewEncapsulation } from '@angular/core';\n\nimport { UiInfobarBottomComponent } from './ui-infobar-bottom/ui-infobar-bottom.component';\nimport { UiInfobarTopComponent } from './ui-infobar-top/ui-infobar-top.component';\nimport { UiSidebarLeftComponent } from './ui-sidebar-left/ui-sidebar-left.component';\nimport { UiSidebarRightComponent } from './ui-sidebar-right/ui-sidebar-right.component';\n\n@Component({\n selector: 'app-ui',\n standalone: true,\n encapsulation: ViewEncapsulation.None,\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './ui.component.html',\n imports: [\n UiInfobarBottomComponent,\n UiInfobarTopComponent,\n UiSidebarLeftComponent,\n UiSidebarRightComponent\n ]\n})\nexport class UiComponent implements OnInit {\n\n public constructor() {\n }\n\n public ngOnInit(): void {\n }\n\n}\n",
            "usedDeprecatedRules": []
          }
        ]
      }
    }
  },
  "gojs-angular-basic": {
    "repo": {
      "HEAD": {
        "commit": "6662f0a49e70f94c5705521dffa1af845256726f",
        "author": "Simon Sarris",
        "date": "Fri Jan 31 10:42:13 2025 -0500",
        "message": "corrected inspector"
      },
      "url": "https://github.com/NorthwoodsSoftware/gojs-angular-basic"
    },
    "before": {
      "first-app": {
        "recommended": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/gojs-angular-basic/src/app/app.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-lifecycle-interface",
                "severity": 1,
                "message": "Lifecycle interface 'AfterViewInit' should be implemented for method 'ngAfterViewInit'. (https://angular.dev/style-guide#style-09-01)",
                "line": 188,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "useLifecycleInterface",
                "endLine": 188,
                "endColumn": 25,
                "fix": {
                  "range": [
                    345,
                    977
                  ],
                  "text": ", AfterViewInit } from '@angular/core';\nimport angular.json eslint.config.js gojs-angular-basic.report.json LICENSE.md lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json as go from 'gojs';\nimport {\n DataSyncService,\n DiagramComponent,\n OverviewComponent,\n PaletteComponent,\n} from 'gojs-angular';\nimport { produce } from 'immer';\nimport { InspectorComponent } from './inspector/inspector.component';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n selector: 'app-root',\n templateUrl: './app.component.html',\n styleUrls: ['./app.component.css'],\n imports: [\n DiagramComponent,\n PaletteComponent,\n InspectorComponent,\n OverviewComponent,\n CommonModule,\n ],\n encapsulation: ViewEncapsulation.ShadowDom,\n})\nexport class AppComponent implements AfterViewInit"
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 0,
            "fatalErrorCount": 0,
            "warningCount": 1,
            "fixableErrorCount": 0,
            "fixableWarningCount": 1,
            "source": "/**\n angular.json eslint.config.js gojs-angular-basic.report.json LICENSE.md lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json Sample app showcasing gojs-angular components\n angular.json eslint.config.js gojs-angular-basic.report.json LICENSE.md lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json For use with gojs-angular version 2.x, assuming immutable data\n angular.json eslint.config.js gojs-angular-basic.report.json LICENSE.md lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json This now uses GoJS version 3.0, using some of its new features,\n angular.json eslint.config.js gojs-angular-basic.report.json LICENSE.md lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json but your app could use GoJS version 2.3.17, if you don't yet want to upgrade to v3.\n */\n\nimport { ChangeDetectorRef, Component, ViewChild, ViewEncapsulation } from '@angular/core';\nimport angular.json eslint.config.js gojs-angular-basic.report.json LICENSE.md lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json as go from 'gojs';\nimport {\n DataSyncService,\n DiagramComponent,\n OverviewComponent,\n PaletteComponent,\n} from 'gojs-angular';\nimport { produce } from 'immer';\nimport { InspectorComponent } from './inspector/inspector.component';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n selector: 'app-root',\n templateUrl: './app.component.html',\n styleUrls: ['./app.component.css'],\n imports: [\n DiagramComponent,\n PaletteComponent,\n InspectorComponent,\n OverviewComponent,\n CommonModule,\n ],\n encapsulation: ViewEncapsulation.ShadowDom,\n})\nexport class AppComponent {\n @ViewChild('myDiagram', { static: true }) public myDiagramComponent: DiagramComponent;\n @ViewChild('myPalette', { static: true }) public myPaletteComponent: PaletteComponent;\n\n // Big object that holds app-level state data\n // As of gojs-angular 2.0, immutability is expected and required of state for ease of change detection.\n // Whenever updating state, immutability must be preserved. It is recommended to use immer for this, a small package that makes working with immutable data easy.\n public state = {\n // Diagram state props\n diagramNodeData: [\n { key: 'Alpha', text: 'Alpha', color: 'lightblue', loc: '0 0' },\n { key: 'Beta', text: 'Beta', color: 'orange', loc: '150 0' },\n { key: 'Gamma', text: 'Gamma', color: 'lightgreen', loc: '0 100' },\n { key: 'Delta', text: 'Delta', color: 'pink', loc: '100 100' },\n ],\n diagramLinkData: [\n { key: -1, from: 'Alpha', to: 'Beta', fromPort: 'r', toPort: 'l' },\n { key: -2, from: 'Alpha', to: 'Gamma', fromPort: 'b', toPort: 't' },\n { key: -3, from: 'Beta', to: 'Beta' },\n { key: -4, from: 'Gamma', to: 'Delta', fromPort: 'r', toPort: 'l' },\n { key: -5, from: 'Delta', to: 'Alpha', fromPort: 't', toPort: 'r' },\n ],\n diagramModelData: { prop: 'value' },\n skipsDiagramUpdate: false,\n selectedNodeData: null, // used by InspectorComponent\n\n // Palette state props\n paletteNodeData: [\n { key: 'Epsilon', text: 'Epsilon', color: 'moccasin' },\n { key: 'Kappa', text: 'Kappa', color: 'lavender' },\n ],\n paletteModelData: { prop: 'val' },\n };\n\n public diagramDivClassName = 'myDiagramDiv';\n public paletteDivClassName = 'myPaletteDiv';\n\n // initialize diagram / templates\n public initDiagram(): go.Diagram {\n const diagram = new go.Diagram({\n 'commandHandler.archetypeGroupData': { key: 'Group', isGroup: true },\n 'clickCreatingTool.archetypeNodeData': { text: 'new node', color: 'lightblue' },\n 'undoManager.isEnabled': true,\n model: new go.GraphLinksModel({\n linkToPortIdProperty: 'toPort', // want to support multiple ports per node\n linkFromPortIdProperty: 'fromPort',\n linkKeyProperty: 'key', // IMPORTANT! must be defined for merges and data sync when using GraphLinksModel\n }),\n });\n\n // a helper function for defining multiple ports in node templates\n function makePort(id: string, spot: go.Spot) {\n return new go.Shape('Circle', {\n desiredSize: new go.Size(8, 8),\n opacity: 0.5,\n fill: 'gray',\n strokeWidth: 0,\n portId: id,\n alignment: spot,\n fromSpot: spot,\n toSpot: spot,\n fromLinkable: true,\n toLinkable: true,\n cursor: 'pointer',\n });\n }\n\n // define the Node template\n diagram.nodeTemplate = new go.Node('Spot', {\n contextMenu: (go.GraphObject.build('ContextMenu') as go.Adornment).add(\n (go.GraphObject.build('ContextMenuButton') as go.Panel).add(\n new go.TextBlock('Group', {\n click: (e, obj) => e.diagram.commandHandler.groupSelection(),\n })\n )\n ),\n })\n .bindTwoWay('location', 'loc', go.Point.parse, go.Point.stringifyFixed(1))\n .add(\n new go.Panel('Auto').add(\n new go.Shape('RoundedRectangle', { strokeWidth: 0.5 }).bind('fill', 'color'),\n new go.TextBlock({ margin: 8, editable: true }).bindTwoWay('text')\n ),\n // Ports\n makePort('t', go.Spot.Top),\n makePort('l', go.Spot.Left),\n makePort('r', go.Spot.Right),\n makePort('b', go.Spot.Bottom)\n );\n\n diagram.linkTemplate = new go.Link({\n curve: go.Curve.Bezier,\n fromEndSegmentLength: 30,\n toEndSegmentLength: 30,\n }).add(new go.Shape({ strokeWidth: 1.5 }), new go.Shape({ toArrow: 'Standard' }));\n\n return diagram;\n }\n\n // When the diagram model changes, update app data to reflect those changes. Be sure to use immer's \"produce\" function to preserve immutability\n public diagramModelChange = function (changes: go.IncrementalData) {\n if (!changes) return;\n const appComp = this;\n this.state = produce(this.state, (draft) => {\n // set skipsDiagramUpdate: true since GoJS already has this update\n // this way, we don't log an unneeded transaction in the Diagram's undoManager history\n draft.skipsDiagramUpdate = true;\n draft.diagramNodeData = DataSyncService.syncNodeData(\n changes,\n draft.diagramNodeData,\n appComp.observedDiagram.model\n );\n draft.diagramLinkData = DataSyncService.syncLinkData(\n changes,\n draft.diagramLinkData,\n appComp.observedDiagram.model\n );\n draft.diagramModelData = DataSyncService.syncModelData(changes, draft.diagramModelData);\n // If one of the modified nodes was the selected node used by the inspector, update the inspector selectedNodeData object\n const modifiedNodeData = changes.modifiedNodeData;\n if (modifiedNodeData && draft.selectedNodeData) {\n for (let i = 0; i < modifiedNodeData.length; i++) {\n const mn = modifiedNodeData[i];\n const nodeKeyProperty = appComp.myDiagramComponent.diagram.model\n .nodeKeyProperty as string;\n if (mn[nodeKeyProperty] === draft.selectedNodeData[nodeKeyProperty]) {\n draft.selectedNodeData = mn;\n }\n }\n }\n });\n };\n\n public initPalette(): go.Palette {\n const palette = new go.Palette();\n // define a simpler Node template than the one used by the main Diagram\n palette.nodeTemplate = new go.Node('Auto').add(\n new go.Shape('RoundedRectangle', { strokeWidth: 0.5 }).bind('fill', 'color'),\n new go.TextBlock({ margin: 8 }).bind('text')\n );\n return palette;\n }\n\n constructor(private cdr: ChangeDetectorRef) {}\n\n // Overview Component testing\n public oDivClassName = 'myOverviewDiv';\n public initOverview(): go.Overview {\n return new go.Overview();\n }\n public observedDiagram = null;\n\n // currently selected node; for inspector\n public selectedNodeData: go.ObjectData = null;\n\n public ngAfterViewInit() {\n if (this.observedDiagram) return;\n this.observedDiagram = this.myDiagramComponent.diagram;\n this.cdr.detectChanges(); // IMPORTANT: without this, Angular will throw ExpressionChangedAfterItHasBeenCheckedError (dev mode only)\n\n const appComp: AppComponent = this;\n // listener for inspector\n this.myDiagramComponent.diagram.addDiagramListener('ChangedSelection', function (e) {\n if (e.diagram.selection.count === 0) {\n appComp.selectedNodeData = null;\n }\n const node = e.diagram.selection.first();\n appComp.state = produce(appComp.state, (draft) => {\n if (node instanceof go.Node) {\n var idx = draft.diagramNodeData.findIndex((nd) => nd.key == node.data.key);\n var nd = draft.diagramNodeData[idx];\n draft.selectedNodeData = nd;\n } else {\n draft.selectedNodeData = null;\n }\n });\n });\n } // end ngAfterViewInit\n\n /bin /run /sbin angular.json eslint.config.js gojs-angular-basic.report.json LICENSE.md lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json Update a node's data based on some change to an inspector row's input\n angular.json eslint.config.js gojs-angular-basic.report.json LICENSE.md lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json @param changedPropAndVal An object with 2 entries: \"prop\" (the node data prop changed), and \"newVal\" (the value the user entered in the inspector <input>)\n */\n public handleInspectorChange(changedPropAndVal) {\n const path = changedPropAndVal.prop;\n const value = changedPropAndVal.newVal;\n\n this.state = produce(this.state, (draft) => {\n var data = draft.selectedNodeData;\n data[path] = value;\n const key = data.key;\n const idx = draft.diagramNodeData.findIndex((nd) => nd.key == key);\n if (idx >= 0) {\n draft.diagramNodeData[idx] = data;\n draft.skipsDiagramUpdate = false; // we need to sync GoJS data with this new app state, so do not skips Diagram update\n }\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/gojs-angular-basic/src/app/inspector/inspector-row.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/no-output-on-prefix",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named \"on\", nor prefixed with it (https://angular.dev/style-guide#style-05-16)",
                "line": 18,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "noOutputOnPrefix",
                "endLine": 18,
                "endColumn": 30
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Input } from '@angular/core';\nimport { Component, EventEmitter, Output } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n selector: 'app-inspector-row',\n templateUrl: './inspector-row.component.html',\n imports: [FormsModule],\n})\nexport class InspectorRowComponent {\n @Input()\n public id: string;\n\n @Input()\n public value: string;\n\n @Output()\n public onInputChangeEmitter: EventEmitter<any> = new EventEmitter<any>();\n\n constructor() {}\n\n public onInputChange(e: any) {\n // when <input> is changed, emit an Object up, with what property changed, and to what new value\n this.onInputChangeEmitter.emit({ prop: this.id, newVal: e.target.value });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/gojs-angular-basic/src/app/inspector/inspector.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/no-output-on-prefix",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named \"on\", nor prefixed with it (https://angular.dev/style-guide#style-05-16)",
                "line": 17,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "noOutputOnPrefix",
                "endLine": 17,
                "endColumn": 27
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport angular.json eslint.config.js gojs-angular-basic.report.json LICENSE.md lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json as go from 'gojs';\nimport { CommonModule } from '@angular/common';\nimport { InspectorRowComponent } from './inspector-row.component';\n\n@Component({\n selector: 'app-inspector',\n imports: [CommonModule, InspectorRowComponent],\n templateUrl: './inspector.component.html',\n styleUrls: ['./inspector.component.css'],\n})\nexport class InspectorComponent {\n @Input()\n public nodeData: go.ObjectData;\n\n @Output()\n public onInspectorChange: EventEmitter<any> = new EventEmitter<any>();\n\n constructor() {}\n\n public onInputChange(propAndValObj: any) {\n this.onInspectorChange.emit(propAndValObj);\n }\n}\n",
            "usedDeprecatedRules": []
          }
        ],
        "all": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/gojs-angular-basic/src/app/app.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 20,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 32,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        345,
                        677
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport angular.json eslint.config.js gojs-angular-basic.report.json LICENSE.md lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json as go from 'gojs';\nimport {\n DataSyncService,\n DiagramComponent,\n OverviewComponent,\n PaletteComponent,\n} from 'gojs-angular';\nimport { produce } from 'immer';\nimport { InspectorComponent } from './inspector/inspector.component';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/consistent-component-styles",
                "severity": 2,
                "message": "Use `styleUrl` instead of `styleUrls` for a single stylesheet",
                "line": 23,
                "column": 3,
                "nodeType": "Property",
                "messageId": "useStyleUrl",
                "endLine": 23,
                "endColumn": 37,
                "fix": {
                  "range": [
                    740,
                    774
                  ],
                  "text": "styleUrl: './app.component.css'"
                }
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use the `viewChild` function instead of the `ViewChild` decorator",
                "line": 34,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferQuerySignals",
                "endLine": 34,
                "endColumn": 44
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use the `viewChild` function instead of the `ViewChild` decorator",
                "line": 35,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferQuerySignals",
                "endLine": 35,
                "endColumn": 44
              },
              {
                "ruleId": "@angular-eslint/use-lifecycle-interface",
                "severity": 2,
                "message": "Lifecycle interface 'AfterViewInit' should be implemented for method 'ngAfterViewInit'. (https://angular.dev/style-guide#style-09-01)",
                "line": 188,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "useLifecycleInterface",
                "endLine": 188,
                "endColumn": 25,
                "fix": {
                  "range": [
                    345,
                    977
                  ],
                  "text": ", AfterViewInit } from '@angular/core';\nimport angular.json eslint.config.js gojs-angular-basic.report.json LICENSE.md lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json as go from 'gojs';\nimport {\n DataSyncService,\n DiagramComponent,\n OverviewComponent,\n PaletteComponent,\n} from 'gojs-angular';\nimport { produce } from 'immer';\nimport { InspectorComponent } from './inspector/inspector.component';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n selector: 'app-root',\n templateUrl: './app.component.html',\n styleUrls: ['./app.component.css'],\n imports: [\n DiagramComponent,\n PaletteComponent,\n InspectorComponent,\n OverviewComponent,\n CommonModule,\n ],\n encapsulation: ViewEncapsulation.ShadowDom,\n})\nexport class AppComponent implements AfterViewInit"
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 5,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 2,
            "fixableWarningCount": 0,
            "source": "/**\n angular.json eslint.config.js gojs-angular-basic.report.json LICENSE.md lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json Sample app showcasing gojs-angular components\n angular.json eslint.config.js gojs-angular-basic.report.json LICENSE.md lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json For use with gojs-angular version 2.x, assuming immutable data\n angular.json eslint.config.js gojs-angular-basic.report.json LICENSE.md lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json This now uses GoJS version 3.0, using some of its new features,\n angular.json eslint.config.js gojs-angular-basic.report.json LICENSE.md lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json but your app could use GoJS version 2.3.17, if you don't yet want to upgrade to v3.\n */\n\nimport { ChangeDetectorRef, Component, ViewChild, ViewEncapsulation } from '@angular/core';\nimport angular.json eslint.config.js gojs-angular-basic.report.json LICENSE.md lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json as go from 'gojs';\nimport {\n DataSyncService,\n DiagramComponent,\n OverviewComponent,\n PaletteComponent,\n} from 'gojs-angular';\nimport { produce } from 'immer';\nimport { InspectorComponent } from './inspector/inspector.component';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n selector: 'app-root',\n templateUrl: './app.component.html',\n styleUrls: ['./app.component.css'],\n imports: [\n DiagramComponent,\n PaletteComponent,\n InspectorComponent,\n OverviewComponent,\n CommonModule,\n ],\n encapsulation: ViewEncapsulation.ShadowDom,\n})\nexport class AppComponent {\n @ViewChild('myDiagram', { static: true }) public myDiagramComponent: DiagramComponent;\n @ViewChild('myPalette', { static: true }) public myPaletteComponent: PaletteComponent;\n\n // Big object that holds app-level state data\n // As of gojs-angular 2.0, immutability is expected and required of state for ease of change detection.\n // Whenever updating state, immutability must be preserved. It is recommended to use immer for this, a small package that makes working with immutable data easy.\n public state = {\n // Diagram state props\n diagramNodeData: [\n { key: 'Alpha', text: 'Alpha', color: 'lightblue', loc: '0 0' },\n { key: 'Beta', text: 'Beta', color: 'orange', loc: '150 0' },\n { key: 'Gamma', text: 'Gamma', color: 'lightgreen', loc: '0 100' },\n { key: 'Delta', text: 'Delta', color: 'pink', loc: '100 100' },\n ],\n diagramLinkData: [\n { key: -1, from: 'Alpha', to: 'Beta', fromPort: 'r', toPort: 'l' },\n { key: -2, from: 'Alpha', to: 'Gamma', fromPort: 'b', toPort: 't' },\n { key: -3, from: 'Beta', to: 'Beta' },\n { key: -4, from: 'Gamma', to: 'Delta', fromPort: 'r', toPort: 'l' },\n { key: -5, from: 'Delta', to: 'Alpha', fromPort: 't', toPort: 'r' },\n ],\n diagramModelData: { prop: 'value' },\n skipsDiagramUpdate: false,\n selectedNodeData: null, // used by InspectorComponent\n\n // Palette state props\n paletteNodeData: [\n { key: 'Epsilon', text: 'Epsilon', color: 'moccasin' },\n { key: 'Kappa', text: 'Kappa', color: 'lavender' },\n ],\n paletteModelData: { prop: 'val' },\n };\n\n public diagramDivClassName = 'myDiagramDiv';\n public paletteDivClassName = 'myPaletteDiv';\n\n // initialize diagram / templates\n public initDiagram(): go.Diagram {\n const diagram = new go.Diagram({\n 'commandHandler.archetypeGroupData': { key: 'Group', isGroup: true },\n 'clickCreatingTool.archetypeNodeData': { text: 'new node', color: 'lightblue' },\n 'undoManager.isEnabled': true,\n model: new go.GraphLinksModel({\n linkToPortIdProperty: 'toPort', // want to support multiple ports per node\n linkFromPortIdProperty: 'fromPort',\n linkKeyProperty: 'key', // IMPORTANT! must be defined for merges and data sync when using GraphLinksModel\n }),\n });\n\n // a helper function for defining multiple ports in node templates\n function makePort(id: string, spot: go.Spot) {\n return new go.Shape('Circle', {\n desiredSize: new go.Size(8, 8),\n opacity: 0.5,\n fill: 'gray',\n strokeWidth: 0,\n portId: id,\n alignment: spot,\n fromSpot: spot,\n toSpot: spot,\n fromLinkable: true,\n toLinkable: true,\n cursor: 'pointer',\n });\n }\n\n // define the Node template\n diagram.nodeTemplate = new go.Node('Spot', {\n contextMenu: (go.GraphObject.build('ContextMenu') as go.Adornment).add(\n (go.GraphObject.build('ContextMenuButton') as go.Panel).add(\n new go.TextBlock('Group', {\n click: (e, obj) => e.diagram.commandHandler.groupSelection(),\n })\n )\n ),\n })\n .bindTwoWay('location', 'loc', go.Point.parse, go.Point.stringifyFixed(1))\n .add(\n new go.Panel('Auto').add(\n new go.Shape('RoundedRectangle', { strokeWidth: 0.5 }).bind('fill', 'color'),\n new go.TextBlock({ margin: 8, editable: true }).bindTwoWay('text')\n ),\n // Ports\n makePort('t', go.Spot.Top),\n makePort('l', go.Spot.Left),\n makePort('r', go.Spot.Right),\n makePort('b', go.Spot.Bottom)\n );\n\n diagram.linkTemplate = new go.Link({\n curve: go.Curve.Bezier,\n fromEndSegmentLength: 30,\n toEndSegmentLength: 30,\n }).add(new go.Shape({ strokeWidth: 1.5 }), new go.Shape({ toArrow: 'Standard' }));\n\n return diagram;\n }\n\n // When the diagram model changes, update app data to reflect those changes. Be sure to use immer's \"produce\" function to preserve immutability\n public diagramModelChange = function (changes: go.IncrementalData) {\n if (!changes) return;\n const appComp = this;\n this.state = produce(this.state, (draft) => {\n // set skipsDiagramUpdate: true since GoJS already has this update\n // this way, we don't log an unneeded transaction in the Diagram's undoManager history\n draft.skipsDiagramUpdate = true;\n draft.diagramNodeData = DataSyncService.syncNodeData(\n changes,\n draft.diagramNodeData,\n appComp.observedDiagram.model\n );\n draft.diagramLinkData = DataSyncService.syncLinkData(\n changes,\n draft.diagramLinkData,\n appComp.observedDiagram.model\n );\n draft.diagramModelData = DataSyncService.syncModelData(changes, draft.diagramModelData);\n // If one of the modified nodes was the selected node used by the inspector, update the inspector selectedNodeData object\n const modifiedNodeData = changes.modifiedNodeData;\n if (modifiedNodeData && draft.selectedNodeData) {\n for (let i = 0; i < modifiedNodeData.length; i++) {\n const mn = modifiedNodeData[i];\n const nodeKeyProperty = appComp.myDiagramComponent.diagram.model\n .nodeKeyProperty as string;\n if (mn[nodeKeyProperty] === draft.selectedNodeData[nodeKeyProperty]) {\n draft.selectedNodeData = mn;\n }\n }\n }\n });\n };\n\n public initPalette(): go.Palette {\n const palette = new go.Palette();\n // define a simpler Node template than the one used by the main Diagram\n palette.nodeTemplate = new go.Node('Auto').add(\n new go.Shape('RoundedRectangle', { strokeWidth: 0.5 }).bind('fill', 'color'),\n new go.TextBlock({ margin: 8 }).bind('text')\n );\n return palette;\n }\n\n constructor(private cdr: ChangeDetectorRef) {}\n\n // Overview Component testing\n public oDivClassName = 'myOverviewDiv';\n public initOverview(): go.Overview {\n return new go.Overview();\n }\n public observedDiagram = null;\n\n // currently selected node; for inspector\n public selectedNodeData: go.ObjectData = null;\n\n public ngAfterViewInit() {\n if (this.observedDiagram) return;\n this.observedDiagram = this.myDiagramComponent.diagram;\n this.cdr.detectChanges(); // IMPORTANT: without this, Angular will throw ExpressionChangedAfterItHasBeenCheckedError (dev mode only)\n\n const appComp: AppComponent = this;\n // listener for inspector\n this.myDiagramComponent.diagram.addDiagramListener('ChangedSelection', function (e) {\n if (e.diagram.selection.count === 0) {\n appComp.selectedNodeData = null;\n }\n const node = e.diagram.selection.first();\n appComp.state = produce(appComp.state, (draft) => {\n if (node instanceof go.Node) {\n var idx = draft.diagramNodeData.findIndex((nd) => nd.key == node.data.key);\n var nd = draft.diagramNodeData[idx];\n draft.selectedNodeData = nd;\n } else {\n draft.selectedNodeData = null;\n }\n });\n });\n } // end ngAfterViewInit\n\n /bin /run /sbin angular.json eslint.config.js gojs-angular-basic.report.json LICENSE.md lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json Update a node's data based on some change to an inspector row's input\n angular.json eslint.config.js gojs-angular-basic.report.json LICENSE.md lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json @param changedPropAndVal An object with 2 entries: \"prop\" (the node data prop changed), and \"newVal\" (the value the user entered in the inspector <input>)\n */\n public handleInspectorChange(changedPropAndVal) {\n const path = changedPropAndVal.prop;\n const value = changedPropAndVal.newVal;\n\n this.state = produce(this.state, (draft) => {\n var data = draft.selectedNodeData;\n data[path] = value;\n const key = data.key;\n const idx = draft.diagramNodeData.findIndex((nd) => nd.key == key);\n if (idx >= 0) {\n draft.diagramNodeData[idx] = data;\n draft.skipsDiagramUpdate = false; // we need to sync GoJS data with this new app state, so do not skips Diagram update\n }\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/gojs-angular-basic/src/app/inspector/inspector-row.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 5,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 9,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        79,
                        166
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 11,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 11,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 14,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 14,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 18,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 18,
                "endColumn": 30,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        402,
                        402
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/no-output-on-prefix",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named \"on\", nor prefixed with it (https://angular.dev/style-guide#style-05-16)",
                "line": 18,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "noOutputOnPrefix",
                "endLine": 18,
                "endColumn": 30
              }
            ],
            "suppressedMessages": [],
            "errorCount": 5,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Input } from '@angular/core';\nimport { Component, EventEmitter, Output } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n selector: 'app-inspector-row',\n templateUrl: './inspector-row.component.html',\n imports: [FormsModule],\n})\nexport class InspectorRowComponent {\n @Input()\n public id: string;\n\n @Input()\n public value: string;\n\n @Output()\n public onInputChangeEmitter: EventEmitter<any> = new EventEmitter<any>();\n\n constructor() {}\n\n public onInputChange(e: any) {\n // when <input> is changed, emit an Object up, with what property changed, and to what new value\n this.onInputChangeEmitter.emit({ prop: this.id, newVal: e.target.value });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/gojs-angular-basic/src/app/inspector/inspector.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 6,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 11,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        47,
                        231
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport angular.json eslint.config.js gojs-angular-basic.report.json LICENSE.md lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json as go from 'gojs';\nimport { CommonModule } from '@angular/common';\nimport { InspectorRowComponent } from './inspector-row.component';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/consistent-component-styles",
                "severity": 2,
                "message": "Use `styleUrl` instead of `styleUrls` for a single stylesheet",
                "line": 10,
                "column": 3,
                "nodeType": "Property",
                "messageId": "useStyleUrl",
                "endLine": 10,
                "endColumn": 43,
                "fix": {
                  "range": [
                    355,
                    395
                  ],
                  "text": "styleUrl: './inspector.component.css'"
                }
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 13,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 13,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 17,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 17,
                "endColumn": 27,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        501,
                        501
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/no-output-on-prefix",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named \"on\", nor prefixed with it (https://angular.dev/style-guide#style-05-16)",
                "line": 17,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "noOutputOnPrefix",
                "endLine": 17,
                "endColumn": 27
              }
            ],
            "suppressedMessages": [],
            "errorCount": 5,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport angular.json eslint.config.js gojs-angular-basic.report.json LICENSE.md lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json as go from 'gojs';\nimport { CommonModule } from '@angular/common';\nimport { InspectorRowComponent } from './inspector-row.component';\n\n@Component({\n selector: 'app-inspector',\n imports: [CommonModule, InspectorRowComponent],\n templateUrl: './inspector.component.html',\n styleUrls: ['./inspector.component.css'],\n})\nexport class InspectorComponent {\n @Input()\n public nodeData: go.ObjectData;\n\n @Output()\n public onInspectorChange: EventEmitter<any> = new EventEmitter<any>();\n\n constructor() {}\n\n public onInputChange(propAndValObj: any) {\n this.onInspectorChange.emit(propAndValObj);\n }\n}\n",
            "usedDeprecatedRules": []
          }
        ]
      }
    },
    "after": {
      "first-app": {
        "recommended": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/gojs-angular-basic/src/app/inspector/inspector-row.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/no-output-on-prefix",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named \"on\", nor prefixed with it (https://angular.dev/style-guide#style-05-16)",
                "line": 18,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "noOutputOnPrefix",
                "endLine": 18,
                "endColumn": 30
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Input } from '@angular/core';\nimport { Component, EventEmitter, Output } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n selector: 'app-inspector-row',\n templateUrl: './inspector-row.component.html',\n imports: [FormsModule],\n})\nexport class InspectorRowComponent {\n @Input()\n public id: string;\n\n @Input()\n public value: string;\n\n @Output()\n public onInputChangeEmitter: EventEmitter<any> = new EventEmitter<any>();\n\n constructor() {}\n\n public onInputChange(e: any) {\n // when <input> is changed, emit an Object up, with what property changed, and to what new value\n this.onInputChangeEmitter.emit({ prop: this.id, newVal: e.target.value });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/gojs-angular-basic/src/app/inspector/inspector.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/no-output-on-prefix",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named \"on\", nor prefixed with it (https://angular.dev/style-guide#style-05-16)",
                "line": 17,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "noOutputOnPrefix",
                "endLine": 17,
                "endColumn": 27
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport angular.json eslint.config.js gojs-angular-basic.report.json LICENSE.md lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json as go from 'gojs';\nimport { CommonModule } from '@angular/common';\nimport { InspectorRowComponent } from './inspector-row.component';\n\n@Component({\n selector: 'app-inspector',\n imports: [CommonModule, InspectorRowComponent],\n templateUrl: './inspector.component.html',\n styleUrl: './inspector.component.css',\n})\nexport class InspectorComponent {\n @Input()\n public nodeData: go.ObjectData;\n\n @Output()\n public onInspectorChange: EventEmitter<any> = new EventEmitter<any>();\n\n constructor() {}\n\n public onInputChange(propAndValObj: any) {\n this.onInspectorChange.emit(propAndValObj);\n }\n}\n",
            "usedDeprecatedRules": []
          }
        ],
        "all": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/gojs-angular-basic/src/app/app.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 20,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 32,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        360,
                        692
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport angular.json eslint.config.js gojs-angular-basic.report.json LICENSE.md lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json as go from 'gojs';\nimport {\n DataSyncService,\n DiagramComponent,\n OverviewComponent,\n PaletteComponent,\n} from 'gojs-angular';\nimport { produce } from 'immer';\nimport { InspectorComponent } from './inspector/inspector.component';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use the `viewChild` function instead of the `ViewChild` decorator",
                "line": 34,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferQuerySignals",
                "endLine": 34,
                "endColumn": 44
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use the `viewChild` function instead of the `ViewChild` decorator",
                "line": 35,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferQuerySignals",
                "endLine": 35,
                "endColumn": 44
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "/**\n angular.json eslint.config.js gojs-angular-basic.report.json LICENSE.md lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json Sample app showcasing gojs-angular components\n angular.json eslint.config.js gojs-angular-basic.report.json LICENSE.md lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json For use with gojs-angular version 2.x, assuming immutable data\n angular.json eslint.config.js gojs-angular-basic.report.json LICENSE.md lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json This now uses GoJS version 3.0, using some of its new features,\n angular.json eslint.config.js gojs-angular-basic.report.json LICENSE.md lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json but your app could use GoJS version 2.3.17, if you don't yet want to upgrade to v3.\n */\n\nimport { ChangeDetectorRef, Component, ViewChild, ViewEncapsulation, AfterViewInit } from '@angular/core';\nimport angular.json eslint.config.js gojs-angular-basic.report.json LICENSE.md lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json as go from 'gojs';\nimport {\n DataSyncService,\n DiagramComponent,\n OverviewComponent,\n PaletteComponent,\n} from 'gojs-angular';\nimport { produce } from 'immer';\nimport { InspectorComponent } from './inspector/inspector.component';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n selector: 'app-root',\n templateUrl: './app.component.html',\n styleUrl: './app.component.css',\n imports: [\n DiagramComponent,\n PaletteComponent,\n InspectorComponent,\n OverviewComponent,\n CommonModule,\n ],\n encapsulation: ViewEncapsulation.ShadowDom,\n})\nexport class AppComponent implements AfterViewInit {\n @ViewChild('myDiagram', { static: true }) public myDiagramComponent: DiagramComponent;\n @ViewChild('myPalette', { static: true }) public myPaletteComponent: PaletteComponent;\n\n // Big object that holds app-level state data\n // As of gojs-angular 2.0, immutability is expected and required of state for ease of change detection.\n // Whenever updating state, immutability must be preserved. It is recommended to use immer for this, a small package that makes working with immutable data easy.\n public state = {\n // Diagram state props\n diagramNodeData: [\n { key: 'Alpha', text: 'Alpha', color: 'lightblue', loc: '0 0' },\n { key: 'Beta', text: 'Beta', color: 'orange', loc: '150 0' },\n { key: 'Gamma', text: 'Gamma', color: 'lightgreen', loc: '0 100' },\n { key: 'Delta', text: 'Delta', color: 'pink', loc: '100 100' },\n ],\n diagramLinkData: [\n { key: -1, from: 'Alpha', to: 'Beta', fromPort: 'r', toPort: 'l' },\n { key: -2, from: 'Alpha', to: 'Gamma', fromPort: 'b', toPort: 't' },\n { key: -3, from: 'Beta', to: 'Beta' },\n { key: -4, from: 'Gamma', to: 'Delta', fromPort: 'r', toPort: 'l' },\n { key: -5, from: 'Delta', to: 'Alpha', fromPort: 't', toPort: 'r' },\n ],\n diagramModelData: { prop: 'value' },\n skipsDiagramUpdate: false,\n selectedNodeData: null, // used by InspectorComponent\n\n // Palette state props\n paletteNodeData: [\n { key: 'Epsilon', text: 'Epsilon', color: 'moccasin' },\n { key: 'Kappa', text: 'Kappa', color: 'lavender' },\n ],\n paletteModelData: { prop: 'val' },\n };\n\n public diagramDivClassName = 'myDiagramDiv';\n public paletteDivClassName = 'myPaletteDiv';\n\n // initialize diagram / templates\n public initDiagram(): go.Diagram {\n const diagram = new go.Diagram({\n 'commandHandler.archetypeGroupData': { key: 'Group', isGroup: true },\n 'clickCreatingTool.archetypeNodeData': { text: 'new node', color: 'lightblue' },\n 'undoManager.isEnabled': true,\n model: new go.GraphLinksModel({\n linkToPortIdProperty: 'toPort', // want to support multiple ports per node\n linkFromPortIdProperty: 'fromPort',\n linkKeyProperty: 'key', // IMPORTANT! must be defined for merges and data sync when using GraphLinksModel\n }),\n });\n\n // a helper function for defining multiple ports in node templates\n function makePort(id: string, spot: go.Spot) {\n return new go.Shape('Circle', {\n desiredSize: new go.Size(8, 8),\n opacity: 0.5,\n fill: 'gray',\n strokeWidth: 0,\n portId: id,\n alignment: spot,\n fromSpot: spot,\n toSpot: spot,\n fromLinkable: true,\n toLinkable: true,\n cursor: 'pointer',\n });\n }\n\n // define the Node template\n diagram.nodeTemplate = new go.Node('Spot', {\n contextMenu: (go.GraphObject.build('ContextMenu') as go.Adornment).add(\n (go.GraphObject.build('ContextMenuButton') as go.Panel).add(\n new go.TextBlock('Group', {\n click: (e, obj) => e.diagram.commandHandler.groupSelection(),\n })\n )\n ),\n })\n .bindTwoWay('location', 'loc', go.Point.parse, go.Point.stringifyFixed(1))\n .add(\n new go.Panel('Auto').add(\n new go.Shape('RoundedRectangle', { strokeWidth: 0.5 }).bind('fill', 'color'),\n new go.TextBlock({ margin: 8, editable: true }).bindTwoWay('text')\n ),\n // Ports\n makePort('t', go.Spot.Top),\n makePort('l', go.Spot.Left),\n makePort('r', go.Spot.Right),\n makePort('b', go.Spot.Bottom)\n );\n\n diagram.linkTemplate = new go.Link({\n curve: go.Curve.Bezier,\n fromEndSegmentLength: 30,\n toEndSegmentLength: 30,\n }).add(new go.Shape({ strokeWidth: 1.5 }), new go.Shape({ toArrow: 'Standard' }));\n\n return diagram;\n }\n\n // When the diagram model changes, update app data to reflect those changes. Be sure to use immer's \"produce\" function to preserve immutability\n public diagramModelChange = function (changes: go.IncrementalData) {\n if (!changes) return;\n const appComp = this;\n this.state = produce(this.state, (draft) => {\n // set skipsDiagramUpdate: true since GoJS already has this update\n // this way, we don't log an unneeded transaction in the Diagram's undoManager history\n draft.skipsDiagramUpdate = true;\n draft.diagramNodeData = DataSyncService.syncNodeData(\n changes,\n draft.diagramNodeData,\n appComp.observedDiagram.model\n );\n draft.diagramLinkData = DataSyncService.syncLinkData(\n changes,\n draft.diagramLinkData,\n appComp.observedDiagram.model\n );\n draft.diagramModelData = DataSyncService.syncModelData(changes, draft.diagramModelData);\n // If one of the modified nodes was the selected node used by the inspector, update the inspector selectedNodeData object\n const modifiedNodeData = changes.modifiedNodeData;\n if (modifiedNodeData && draft.selectedNodeData) {\n for (let i = 0; i < modifiedNodeData.length; i++) {\n const mn = modifiedNodeData[i];\n const nodeKeyProperty = appComp.myDiagramComponent.diagram.model\n .nodeKeyProperty as string;\n if (mn[nodeKeyProperty] === draft.selectedNodeData[nodeKeyProperty]) {\n draft.selectedNodeData = mn;\n }\n }\n }\n });\n };\n\n public initPalette(): go.Palette {\n const palette = new go.Palette();\n // define a simpler Node template than the one used by the main Diagram\n palette.nodeTemplate = new go.Node('Auto').add(\n new go.Shape('RoundedRectangle', { strokeWidth: 0.5 }).bind('fill', 'color'),\n new go.TextBlock({ margin: 8 }).bind('text')\n );\n return palette;\n }\n\n constructor(private cdr: ChangeDetectorRef) {}\n\n // Overview Component testing\n public oDivClassName = 'myOverviewDiv';\n public initOverview(): go.Overview {\n return new go.Overview();\n }\n public observedDiagram = null;\n\n // currently selected node; for inspector\n public selectedNodeData: go.ObjectData = null;\n\n public ngAfterViewInit() {\n if (this.observedDiagram) return;\n this.observedDiagram = this.myDiagramComponent.diagram;\n this.cdr.detectChanges(); // IMPORTANT: without this, Angular will throw ExpressionChangedAfterItHasBeenCheckedError (dev mode only)\n\n const appComp: AppComponent = this;\n // listener for inspector\n this.myDiagramComponent.diagram.addDiagramListener('ChangedSelection', function (e) {\n if (e.diagram.selection.count === 0) {\n appComp.selectedNodeData = null;\n }\n const node = e.diagram.selection.first();\n appComp.state = produce(appComp.state, (draft) => {\n if (node instanceof go.Node) {\n var idx = draft.diagramNodeData.findIndex((nd) => nd.key == node.data.key);\n var nd = draft.diagramNodeData[idx];\n draft.selectedNodeData = nd;\n } else {\n draft.selectedNodeData = null;\n }\n });\n });\n } // end ngAfterViewInit\n\n /bin /run /sbin angular.json eslint.config.js gojs-angular-basic.report.json LICENSE.md lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json Update a node's data based on some change to an inspector row's input\n angular.json eslint.config.js gojs-angular-basic.report.json LICENSE.md lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json @param changedPropAndVal An object with 2 entries: \"prop\" (the node data prop changed), and \"newVal\" (the value the user entered in the inspector <input>)\n */\n public handleInspectorChange(changedPropAndVal) {\n const path = changedPropAndVal.prop;\n const value = changedPropAndVal.newVal;\n\n this.state = produce(this.state, (draft) => {\n var data = draft.selectedNodeData;\n data[path] = value;\n const key = data.key;\n const idx = draft.diagramNodeData.findIndex((nd) => nd.key == key);\n if (idx >= 0) {\n draft.diagramNodeData[idx] = data;\n draft.skipsDiagramUpdate = false; // we need to sync GoJS data with this new app state, so do not skips Diagram update\n }\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/gojs-angular-basic/src/app/inspector/inspector-row.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 5,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 9,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        79,
                        166
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 11,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 11,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 14,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 14,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 18,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 18,
                "endColumn": 30,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        402,
                        402
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/no-output-on-prefix",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named \"on\", nor prefixed with it (https://angular.dev/style-guide#style-05-16)",
                "line": 18,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "noOutputOnPrefix",
                "endLine": 18,
                "endColumn": 30
              }
            ],
            "suppressedMessages": [],
            "errorCount": 5,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Input } from '@angular/core';\nimport { Component, EventEmitter, Output } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n selector: 'app-inspector-row',\n templateUrl: './inspector-row.component.html',\n imports: [FormsModule],\n})\nexport class InspectorRowComponent {\n @Input()\n public id: string;\n\n @Input()\n public value: string;\n\n @Output()\n public onInputChangeEmitter: EventEmitter<any> = new EventEmitter<any>();\n\n constructor() {}\n\n public onInputChange(e: any) {\n // when <input> is changed, emit an Object up, with what property changed, and to what new value\n this.onInputChangeEmitter.emit({ prop: this.id, newVal: e.target.value });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/gojs-angular-basic/src/app/inspector/inspector.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 6,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 11,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        47,
                        231
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport angular.json eslint.config.js gojs-angular-basic.report.json LICENSE.md lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json as go from 'gojs';\nimport { CommonModule } from '@angular/common';\nimport { InspectorRowComponent } from './inspector-row.component';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 13,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 13,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 17,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 17,
                "endColumn": 27,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        498,
                        498
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/no-output-on-prefix",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named \"on\", nor prefixed with it (https://angular.dev/style-guide#style-05-16)",
                "line": 17,
                "column": 10,
                "nodeType": "Identifier",
                "messageId": "noOutputOnPrefix",
                "endLine": 17,
                "endColumn": 27
              }
            ],
            "suppressedMessages": [],
            "errorCount": 4,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport angular.json eslint.config.js gojs-angular-basic.report.json LICENSE.md lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json as go from 'gojs';\nimport { CommonModule } from '@angular/common';\nimport { InspectorRowComponent } from './inspector-row.component';\n\n@Component({\n selector: 'app-inspector',\n imports: [CommonModule, InspectorRowComponent],\n templateUrl: './inspector.component.html',\n styleUrl: './inspector.component.css',\n})\nexport class InspectorComponent {\n @Input()\n public nodeData: go.ObjectData;\n\n @Output()\n public onInspectorChange: EventEmitter<any> = new EventEmitter<any>();\n\n constructor() {}\n\n public onInputChange(propAndValObj: any) {\n this.onInspectorChange.emit(propAndValObj);\n }\n}\n",
            "usedDeprecatedRules": []
          }
        ]
      }
    }
  },
  "angular-ionic-ngxs-movies": {
    "repo": {
      "HEAD": {
        "commit": "8f02cdce74b58725f3010362e926a38688cf48f2",
        "author": "Adrián Brito Pacheco",
        "date": "Thu Feb 8 22:43:28 2024 +0000",
        "message": "Merge pull request #98 from abritopach/develop"
      },
      "url": "https://github.com/abritopach/angular-ionic-ngxs-movies"
    },
    "before": {
      "angular-ionic-ngxs-movies": {
        "recommended": [],
        "all": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-ionic-ngxs-movies/src/app/app.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-standalone-component",
                "severity": 2,
                "message": "The component `standalone` property should be set to `true`",
                "line": 3,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferStandaloneComponent",
                "endLine": 8,
                "endColumn": 3,
                "fix": {
                  "range": [
                    78,
                    78
                  ],
                  "text": "standalone: true,"
                }
              },
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 3,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 8,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        37,
                        78
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 7,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 7,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        18,
                        216
                      ],
                      "text": " } from '@angular/core';\n\n@Component({\n selector: 'app-root',\n templateUrl: './app.component.html',\n styleUrls: ['./app.component.css'],\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import { Component, ViewEncapsulation } from '@angular/core';\n\n@Component({\n selector: 'app-root',\n templateUrl: './app.component.html',\n styleUrls: ['./app.component.css'],\n encapsulation: ViewEncapsulation.None\n})\nexport class AppComponent {\n title = 'app';\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-ionic-ngxs-movies/src/app/app.module.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/sort-ngmodule-metadata-arrays",
                "severity": 2,
                "message": "`NgModule` metadata arrays should be sorted in ASC alphabetical order",
                "line": 32,
                "column": 5,
                "nodeType": "Identifier",
                "messageId": "sortNgmoduleMetadataArrays",
                "endLine": 32,
                "endColumn": 21,
                "fix": {
                  "range": [
                    1175,
                    1213
                  ],
                  "text": "AppRoutingModule,\n HttpClientModule"
                }
              },
              {
                "ruleId": "@angular-eslint/sort-ngmodule-metadata-arrays",
                "severity": 2,
                "message": "`NgModule` metadata arrays should be sorted in ASC alphabetical order",
                "line": 42,
                "column": 49,
                "nodeType": "Identifier",
                "messageId": "sortNgmoduleMetadataArrays",
                "endLine": 42,
                "endColumn": 67,
                "fix": {
                  "range": [
                    1527,
                    1564
                  ],
                  "text": "SearchImageService, YoutubeApiService"
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 2,
            "fixableWarningCount": 0,
            "source": "import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { IonicModule } from '@ionic/angular';\nimport { HttpClientModule } from '@angular/common/http';\n\n// NGXS\nimport { MovieState } from '@store/state/movies.state';\nimport { NgxsModule } from '@ngxs/store';\nimport { NgxsReduxDevtoolsPluginModule } from '@ngxs/devtools-plugin';\nimport { NgxsLoggerPluginModule } from '@ngxs/logger-plugin';\nimport { NgxsFormPluginModule } from '@ngxs/form-plugin';\nimport { NgxsStoragePluginModule } from '@ngxs/storage-plugin';\n\nimport { AppRoutingModule } from './app-routing.module';\n\nimport { AppComponent } from './app.component';\n\nimport { MoviesService } from '@services/movies/movies-service';\nimport { YoutubeApiService } from '@services/youtube-api/youtube-api-service';\nimport { SearchImageService } from '@services/search-image/search-image-service';\nimport { environment } from '@environments/environment';\n// import { GenreCarouselComponent } from './components/genre-carousel/genre-carousel.component';\n\n@NgModule({\n declarations: [\n AppComponent\n // GenreCarouselComponent,\n ],\n imports: [\n BrowserModule,\n HttpClientModule,\n AppRoutingModule,\n IonicModule.forRoot(),\n NgxsModule.forRoot([MovieState], {\n developmentMode: !environment.production\n }),\n NgxsStoragePluginModule.forRoot(),\n NgxsReduxDevtoolsPluginModule.forRoot(),\n NgxsLoggerPluginModule.forRoot(),\n NgxsFormPluginModule.forRoot()\n ],\n providers: [MoviesService, YoutubeApiService, SearchImageService],\n bootstrap: [AppComponent]\n})\nexport class AppModule {}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-ionic-ngxs-movies/src/app/components/genre-carousel/genre-carousel.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-standalone-component",
                "severity": 2,
                "message": "The component `standalone` property should be set to `true`",
                "line": 6,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferStandaloneComponent",
                "endLine": 10,
                "endColumn": 3,
                "fix": {
                  "range": [
                    159,
                    159
                  ],
                  "text": "standalone: true,"
                }
              },
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 6,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 10,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        159
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\n\nimport { Store } from '@ngxs/store';\nimport { FilterMovies } from '@store/actions/movies.actions';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\n\nimport { Store } from '@ngxs/store';\nimport { FilterMovies } from '@store/actions/movies.actions';\n\n@Component({\n selector: 'app-genre-carousel',\n templateUrl: './genre-carousel.component.html',\n styleUrls: ['./genre-carousel.component.css']\n})\nexport class GenreCarouselComponent {\n genres: any;\n filters: any = {\n years: {\n lower: 1900,\n upper: new Date().getFullYear()\n },\n genre: 'Action',\n rating: 0\n };\n selected: Number = -1;\n\n constructor(private store: Store) {\n this.genres = [\n { text: 'Science fiction', src: 'assets/movies-genres/image1.png' },\n { text: 'Westerns', src: 'assets/movies-genres/image2.png' },\n { text: 'Crime', src: 'assets/movies-genres/image3.png' },\n { text: 'Romance', src: 'assets/movies-genres/image4.png' },\n { text: 'Comedy', src: 'assets/movies-genres/image5.png' },\n { text: 'Drama', src: 'assets/movies-genres/image6.png' },\n { text: 'Cartoon', src: 'assets/movies-genres/image7.png' },\n { text: 'Action', src: 'assets/movies-genres/image8.png' },\n { text: 'Adventure', src: 'assets/movies-genres/image9.png' },\n { text: 'Thriller', src: 'assets/movies-genres/image10.png' },\n { text: 'Fantasy', src: 'assets/movies-genres/image11.png' },\n { text: 'Horror', src: 'assets/movies-genres/image12.png' }\n ];\n }\n\n selectGenre(genre, index) {\n console.log('GenreCarouselComponent::selectGenre() | method called', genre);\n this.selected = index;\n this.filters.genre = genre.text;\n this.store.dispatch([new FilterMovies(this.filters)]);\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-ionic-ngxs-movies/src/app/modals/comment-modal/comment.modal.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-standalone-component",
                "severity": 2,
                "message": "The component `standalone` property should be set to `true`",
                "line": 14,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferStandaloneComponent",
                "endLine": 19,
                "endColumn": 3,
                "fix": {
                  "range": [
                    335,
                    335
                  ],
                  "text": "standalone: true,"
                }
              },
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 14,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 19,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        45,
                        335
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { ModalController, NavParams } from '@ionic/angular';\n\nimport {\n FormBuilder,\n FormGroup,\n FormControl,\n Validators\n} from '@angular/forms';\n\nimport { EditMovie } from '@store/actions/movies.actions';\nimport { Store } from '@ngxs/store';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)",
                "line": 16,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 16,
                "endColumn": 36
              },
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 18,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 18,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        18,
                        481
                      ],
                      "text": ", OnInit } from '@angular/core';\nimport { ModalController, NavParams } from '@ionic/angular';\n\nimport {\n FormBuilder,\n FormGroup,\n FormControl,\n Validators\n} from '@angular/forms';\n\nimport { EditMovie } from '@store/actions/movies.actions';\nimport { Store } from '@ngxs/store';\n\n@Component({\n selector: 'app-comment-modal',\n templateUrl: 'comment.modal.html',\n styleUrls: ['./comment.modal.scss'],\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 4,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import { Component, ViewEncapsulation, OnInit } from '@angular/core';\nimport { ModalController, NavParams } from '@ionic/angular';\n\nimport {\n FormBuilder,\n FormGroup,\n FormControl,\n Validators\n} from '@angular/forms';\n\nimport { EditMovie } from '@store/actions/movies.actions';\nimport { Store } from '@ngxs/store';\n\n@Component({\n selector: 'app-comment-modal',\n templateUrl: 'comment.modal.html',\n styleUrls: ['./comment.modal.scss'],\n encapsulation: ViewEncapsulation.None\n})\nexport class CommentModalComponent implements OnInit {\n commentForm: FormGroup;\n\n modal: any = {\n title: ''\n };\n\n constructor(\n private modalCtrl: ModalController,\n private formBuilder: FormBuilder,\n private navParams: NavParams,\n private store: Store\n ) {\n this.createForm();\n }\n\n createForm() {\n this.commentForm = this.formBuilder.group({\n comment: new FormControl('', Validators.required),\n rating: new FormControl('')\n });\n }\n\n ngOnInit() {\n this.modal = { ...this.navParams.data.modalProps };\n }\n\n dismiss() {\n // Using the injected ModalController this page\n // can \"dismiss\" itself and pass back data.\n this.modalCtrl.dismiss();\n }\n\n commentFormSubmit() {\n let comments;\n let movieToUpdate = { ...this.modal.movie };\n if (typeof this.modal.movie.comments === 'undefined') {\n comments = [];\n } else {\n comments = [...this.modal.movie.comments];\n }\n\n if (typeof this.modal.movie.rate === 'undefined') {\n movieToUpdate = {\n ...movieToUpdate,\n rate: this.commentForm.value.rating,\n numVotes: 1\n };\n } else {\n movieToUpdate = {\n ...movieToUpdate,\n numVotes: movieToUpdate.numVotes + 1,\n rate:\n (movieToUpdate.rate + this.commentForm.value.rating) /\n (movieToUpdate.numVotes + 1)\n };\n }\n\n comments.push(this.commentForm.value.comment);\n movieToUpdate.comments = comments;\n this.store.dispatch(new EditMovie(movieToUpdate));\n }\n\n onRatingChange(event) {\n this.commentForm.patchValue({ rating: event.detail });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-ionic-ngxs-movies/src/app/modals/favorites-movies-modal/favorites.movies.modal.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-standalone-component",
                "severity": 2,
                "message": "The component `standalone` property should be set to `true`",
                "line": 13,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferStandaloneComponent",
                "endLine": 18,
                "endColumn": 3,
                "fix": {
                  "range": [
                    389,
                    389
                  ],
                  "text": "standalone: true,"
                }
              },
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 13,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 18,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        45,
                        389
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { ModalController, NavParams, AlertController } from '@ionic/angular';\n\nimport { Store } from '@ngxs/store';\nimport { Movie } from '@models/movie.model';\n\nimport {\n DeleteFavoriteMovie,\n DeleteAllFavoritesMovies\n} from '@store/actions/movies.actions';\nimport { Router } from '@angular/router';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)",
                "line": 15,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 15,
                "endColumn": 45
              },
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 17,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 17,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        18,
                        562
                      ],
                      "text": ", OnInit } from '@angular/core';\nimport { ModalController, NavParams, AlertController } from '@ionic/angular';\n\nimport { Store } from '@ngxs/store';\nimport { Movie } from '@models/movie.model';\n\nimport {\n DeleteFavoriteMovie,\n DeleteAllFavoritesMovies\n} from '@store/actions/movies.actions';\nimport { Router } from '@angular/router';\n\n@Component({\n selector: 'app-favorites-movies-modal',\n templateUrl: 'favorites.movies.modal.html',\n styleUrls: ['./favorites.movies.modal.scss'],\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 4,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import { Component, ViewEncapsulation, OnInit } from '@angular/core';\nimport { ModalController, NavParams, AlertController } from '@ionic/angular';\n\nimport { Store } from '@ngxs/store';\nimport { Movie } from '@models/movie.model';\n\nimport {\n DeleteFavoriteMovie,\n DeleteAllFavoritesMovies\n} from '@store/actions/movies.actions';\nimport { Router } from '@angular/router';\n\n@Component({\n selector: 'app-favorites-movies-modal',\n templateUrl: 'favorites.movies.modal.html',\n styleUrls: ['./favorites.movies.modal.scss'],\n encapsulation: ViewEncapsulation.None\n})\nexport class FavoritesMoviesModalComponent implements OnInit {\n modal: any = {\n title: ''\n };\n\n constructor(\n private modalCtrl: ModalController,\n private navParams: NavParams,\n private store: Store,\n private router: Router,\n private alertCtrl: AlertController\n ) {}\n\n ngOnInit() {\n this.modal = { ...this.navParams.data.modalProps };\n }\n\n dismiss() {\n // Using the injected ModalController this page\n // can \"dismiss\" itself and pass back data.\n this.modalCtrl.dismiss();\n }\n\n viewMovieDetails(movie: Movie) {\n const movieDetailsURL = `/detail/${movie.id}`;\n this.router.navigate([movieDetailsURL]);\n this.modalCtrl.dismiss();\n }\n\n deleteFavoriteMovie(movie: Movie) {\n console.log(\n 'FavoritesMoviesModalComponent::deleteFavoriteMovie() | method called'\n );\n this.store.dispatch(new DeleteFavoriteMovie(movie));\n this.modal.favoritesMovies = this.modal.favoritesMovies.filter(\n (m) => m.title !== movie.title\n );\n }\n\n deleteAll() {\n console.log('FavoritesMoviesModalComponent::deleteAll() | method called');\n this.modal.favoritesMovies = [];\n const state = JSON.parse(localStorage.getItem('@@STATE'));\n state.catalog.favorites = [];\n this.store.dispatch(new DeleteAllFavoritesMovies());\n }\n\n async presentAlertConfirm() {\n const alert = await this.alertCtrl.create({\n header: 'Delete all favorites',\n message: 'Are you sure you want to delete all the favorites?',\n buttons: [\n {\n text: 'Cancel',\n role: 'cancel',\n cssClass: 'secondary'\n },\n {\n text: 'Okay',\n handler: () => {\n this.deleteAll();\n }\n }\n ]\n });\n\n await alert.present();\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-ionic-ngxs-movies/src/app/modals/movie-modal/movie.modal.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-standalone-component",
                "severity": 2,
                "message": "The component `standalone` property should be set to `true`",
                "line": 23,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferStandaloneComponent",
                "endLine": 28,
                "endColumn": 3,
                "fix": {
                  "range": [
                    677,
                    677
                  ],
                  "text": "standalone: true,"
                }
              },
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 23,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 28,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        81,
                        677
                      ],
                      "text": ", ChangeDetectionStrategy\n} from '@angular/core';\nimport { ModalController, NavParams } from '@ionic/angular';\nimport { Store } from '@ngxs/store';\nimport { UpdateFormValue, UpdateFormStatus } from '@ngxs/form-plugin';\nimport { AddMovie, EditMovie } from '@store/actions/movies.actions';\nimport { Movie } from '@models/movie.model';\nimport {\n FormBuilder,\n FormGroup,\n FormControl,\n Validators\n} from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { FormErrorHandlerService } from '@services/form-error-hanlder/form-error-handler.service';\nimport { MovieForm } from '@models/form.model';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)",
                "line": 25,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 25,
                "endColumn": 34
              },
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 27,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 27,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        20,
                        817
                      ],
                      "text": ",\n OnInit,\n Renderer2,\n AfterViewInit\n} from '@angular/core';\nimport { ModalController, NavParams } from '@ionic/angular';\nimport { Store } from '@ngxs/store';\nimport { UpdateFormValue, UpdateFormStatus } from '@ngxs/form-plugin';\nimport { AddMovie, EditMovie } from '@store/actions/movies.actions';\nimport { Movie } from '@models/movie.model';\nimport {\n FormBuilder,\n FormGroup,\n FormControl,\n Validators\n} from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { FormErrorHandlerService } from '@services/form-error-hanlder/form-error-handler.service';\nimport { MovieForm } from '@models/form.model';\n\n@Component({\n selector: 'app-movie-modal',\n templateUrl: 'movie.modal.html',\n styleUrls: ['./movie.modal.scss'],\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 4,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n ViewEncapsulation,\n OnInit,\n Renderer2,\n AfterViewInit\n} from '@angular/core';\nimport { ModalController, NavParams } from '@ionic/angular';\nimport { Store } from '@ngxs/store';\nimport { UpdateFormValue, UpdateFormStatus } from '@ngxs/form-plugin';\nimport { AddMovie, EditMovie } from '@store/actions/movies.actions';\nimport { Movie } from '@models/movie.model';\nimport {\n FormBuilder,\n FormGroup,\n FormControl,\n Validators\n} from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { FormErrorHandlerService } from '@services/form-error-hanlder/form-error-handler.service';\nimport { MovieForm } from '@models/form.model';\n\n@Component({\n selector: 'app-movie-modal',\n templateUrl: 'movie.modal.html',\n styleUrls: ['./movie.modal.scss'],\n encapsulation: ViewEncapsulation.None\n})\nexport class MovieModalComponent implements OnInit, AfterViewInit {\n modal: any = {\n title: '',\n buttonText: ''\n };\n\n movieForm: FormGroup;\n errorsForm: any = {};\n\n // Reads the name of the store from the store class.\n movieForm$: Observable<Movie[]>;\n\n genres = [\n { id: 1, name: 'Action', image: 'assets/movies-genres/action.png' },\n { id: 2, name: 'Comedy', image: 'assets/movies-genres/comedy.png' },\n { id: 3, name: 'Crime', image: 'assets/movies-genres/crime.png' },\n {\n id: 4,\n name: 'Documentary',\n image: 'assets/movies-genres/documentary.png'\n },\n { id: 5, name: 'Drama', image: 'assets/movies-genres/drama.png' },\n { id: 6, name: 'Fantasy', image: 'assets/movies-genres/fantasy.png' },\n { id: 7, name: 'Film noir', image: 'assets/movies-genres/film noir.png' },\n { id: 8, name: 'Horror', image: 'assets/movies-genres/horror.png' },\n { id: 9, name: 'Romance', image: 'assets/movies-genres/romance.png' },\n {\n id: 10,\n name: 'Science fiction',\n image: 'assets/movies-genres/science fiction.png'\n },\n { id: 11, name: 'Westerns', image: 'assets/movies-genres/westerns.png' }\n ];\n\n constructor(\n private formBuilder: FormBuilder,\n private modalCtrl: ModalController,\n public navParams: NavParams,\n private store: Store,\n private renderer: Renderer2,\n private formErrorHandler: FormErrorHandlerService\n ) {\n this.createForm();\n this.formErrorHandler.handleErrors(this.movieForm, this.errorsForm);\n }\n\n createForm() {\n this.movieForm = this.formBuilder.group<MovieForm>({\n id: new FormControl('', { nonNullable: true }),\n title: new FormControl('', {\n nonNullable: true,\n validators: [Validators.required]\n }),\n year: new FormControl(new Date().getFullYear(), {\n nonNullable: true,\n validators: [Validators.required]\n }),\n director: new FormControl('', { nonNullable: true }),\n cast: new FormControl('', { nonNullable: true }),\n genre: new FormControl('Action', { nonNullable: true }),\n notes: new FormControl('', { nonNullable: true }),\n poster: new FormControl('', { nonNullable: true })\n });\n\n this.movieForm$ = this.store.select((state) => state.catalog.movieForm);\n this.movieForm$.subscribe((data) => {\n if (data['model'] !== null && data['status'] === 'PENDING') {\n // Check if the user has added information about a movie but has not inserted it.\n this.movieForm.patchValue(data['model']);\n }\n });\n }\n\n ngOnInit() {\n this.modal = { ...this.navParams.data.modalProps };\n if (this.navParams.data.option === 'edit') {\n this.movieForm.patchValue(this.navParams.data.modalProps.movie);\n }\n }\n\n ngAfterViewInit() {\n const element = this.renderer.selectRootElement('#myInput');\n setTimeout(() => element.focus(), 3000);\n }\n\n dismiss(data?: any) {\n // Using the injected ModalController this page\n // can \"dismiss\" itself and pass back data.\n if (this.navParams.data.option === 'add') {\n this.store.dispatch([\n new UpdateFormValue({\n value: data,\n path: 'catalog.movieForm'\n }),\n new UpdateFormStatus({\n status: 'PENDING',\n path: 'catalog.movieForm'\n })\n ]);\n }\n this.modalCtrl.dismiss(data);\n }\n\n movieFormSubmit() {\n if (this.navParams.data.option === 'add') {\n this.store\n .dispatch(new AddMovie(this.movieForm.value))\n .subscribe(() => this.clearMovieForm());\n } else if (this.navParams.data.option === 'edit') {\n this.store.dispatch(new EditMovie(this.movieForm.value));\n }\n }\n\n clearMovieForm() {\n this.movieForm.reset();\n this.store.dispatch([\n new UpdateFormValue({\n value: <Movie>{},\n path: 'catalog.movieForm'\n }),\n new UpdateFormStatus({\n status: '',\n path: 'catalog.movieForm'\n })\n ]);\n }\n\n takePicture() {\n console.log('takePicture');\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-ionic-ngxs-movies/src/app/modals/show-actors-modal/show.actors.modal.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-standalone-component",
                "severity": 2,
                "message": "The component `standalone` property should be set to `true`",
                "line": 9,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferStandaloneComponent",
                "endLine": 14,
                "endColumn": 3,
                "fix": {
                  "range": [
                    329,
                    329
                  ],
                  "text": "standalone: true,"
                }
              },
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 9,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 14,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        78,
                        329
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { ModalController, NavParams } from '@ionic/angular';\n\nimport { SearchImageService } from '@services/search-image/search-image-service';\n\nimport { LoaderService } from '@services/loader/loader.service';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)",
                "line": 11,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 11,
                "endColumn": 40
              },
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 13,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 13,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        51,
                        487
                      ],
                      "text": ", OnInit } from '@angular/core';\nimport { ModalController, NavParams } from '@ionic/angular';\n\nimport { SearchImageService } from '@services/search-image/search-image-service';\n\nimport { LoaderService } from '@services/loader/loader.service';\n\n@Component({\n selector: 'app-show-actors-modal',\n templateUrl: 'show.actors.modal.html',\n styleUrls: ['./show.actors.modal.scss'],\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 4,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import { forkJoin } from 'rxjs';\nimport { Component, ViewEncapsulation, OnInit } from '@angular/core';\nimport { ModalController, NavParams } from '@ionic/angular';\n\nimport { SearchImageService } from '@services/search-image/search-image-service';\n\nimport { LoaderService } from '@services/loader/loader.service';\n\n@Component({\n selector: 'app-show-actors-modal',\n templateUrl: 'show.actors.modal.html',\n styleUrls: ['./show.actors.modal.scss'],\n encapsulation: ViewEncapsulation.None\n})\nexport class ShowActorsModalComponent implements OnInit {\n actors: any = [];\n\n constructor(\n private modalCtrl: ModalController,\n private navParams: NavParams,\n private searchImageService: SearchImageService,\n private loaderService: LoaderService\n ) {\n console.log('ShowActorsModalComponent::constructor | method called');\n }\n\n ngOnInit() {\n console.log('ShowActorsModalComponent::ngOnInit | method called');\n\n this.loaderService.present('Please wait, loading actors...');\n let actors = this.navParams.data.modalProps.actors;\n actors = actors.split(',');\n\n forkJoin(\n actors.map((actor) => {\n // Code to use Google Custom Search Api.\n return this.searchImageService.searchImage(actor);\n })\n ).subscribe((results: any) => {\n if (results.length > 0) {\n results.map((result, index) => {\n this.actors.push({\n name: actors[index],\n image: result['items'][0].image.thumbnailLink\n });\n });\n this.loaderService.dismiss();\n }\n });\n }\n\n dismiss() {\n // Using the injected ModalController this page\n // can \"dismiss\" itself and pass back data.\n this.modalCtrl.dismiss();\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-ionic-ngxs-movies/src/app/modals/show-comments-modal/show.comments.modal.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-standalone-component",
                "severity": 2,
                "message": "The component `standalone` property should be set to `true`",
                "line": 4,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferStandaloneComponent",
                "endLine": 9,
                "endColumn": 3,
                "fix": {
                  "range": [
                    147,
                    147
                  ],
                  "text": "standalone: true,"
                }
              },
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 4,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 9,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        45,
                        147
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { ModalController, NavParams } from '@ionic/angular';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)",
                "line": 6,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 6,
                "endColumn": 42
              },
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 8,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 8,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        18,
                        311
                      ],
                      "text": ", OnInit } from '@angular/core';\nimport { ModalController, NavParams } from '@ionic/angular';\n\n@Component({\n selector: 'app-show-comments-modal',\n templateUrl: 'show.comments.modal.html',\n styleUrls: ['./show.comments.modal.scss'],\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 4,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import { Component, ViewEncapsulation, OnInit } from '@angular/core';\nimport { ModalController, NavParams } from '@ionic/angular';\n\n@Component({\n selector: 'app-show-comments-modal',\n templateUrl: 'show.comments.modal.html',\n styleUrls: ['./show.comments.modal.scss'],\n encapsulation: ViewEncapsulation.None\n})\nexport class ShowCommentsModalComponent implements OnInit {\n modal: any = {\n title: ''\n };\n\n constructor(\n private modalCtrl: ModalController,\n private navParams: NavParams\n ) {}\n\n ngOnInit() {\n this.modal = { ...this.navParams.data.modalProps };\n }\n\n dismiss() {\n // Using the injected ModalController this page\n // can \"dismiss\" itself and pass back data.\n this.modalCtrl.dismiss();\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-ionic-ngxs-movies/src/app/modals/youtube-modal/youtube.modal.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-standalone-component",
                "severity": 2,
                "message": "The component `standalone` property should be set to `true`",
                "line": 11,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferStandaloneComponent",
                "endLine": 16,
                "endColumn": 3,
                "fix": {
                  "range": [
                    229,
                    229
                  ],
                  "text": "standalone: true,"
                }
              },
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 11,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 16,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        68,
                        229
                      ],
                      "text": ", ChangeDetectionStrategy\n} from '@angular/core';\nimport { ModalController, NavParams } from '@ionic/angular';\n\nimport { YoutubePlayer } from 'capacitor-youtube-player';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)",
                "line": 13,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 13,
                "endColumn": 36
              },
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 15,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 15,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        20,
                        375
                      ],
                      "text": ",\n OnInit,\n AfterViewInit\n} from '@angular/core';\nimport { ModalController, NavParams } from '@ionic/angular';\n\nimport { YoutubePlayer } from 'capacitor-youtube-player';\n\n@Component({\n selector: 'app-youtube-modal',\n templateUrl: 'youtube.modal.html',\n styleUrls: ['./youtube.modal.scss'],\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 4,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n ViewEncapsulation,\n OnInit,\n AfterViewInit\n} from '@angular/core';\nimport { ModalController, NavParams } from '@ionic/angular';\n\nimport { YoutubePlayer } from 'capacitor-youtube-player';\n\n@Component({\n selector: 'app-youtube-modal',\n templateUrl: 'youtube.modal.html',\n styleUrls: ['./youtube.modal.scss'],\n encapsulation: ViewEncapsulation.None\n})\nexport class YoutubeModalComponent implements OnInit, AfterViewInit {\n item: any;\n\n constructor(\n private modalCtrl: ModalController,\n private navParams: NavParams\n ) {\n console.log('YoutubeModalComponent::constructor | method called');\n }\n\n ngOnInit() {\n console.log('YoutubeModalComponent::ngOnInit | method called');\n this.item = this.navParams.data.modalProps.item;\n }\n\n ngAfterViewInit() {\n this.initializeYoutubePlayerPluginWeb();\n }\n\n dismiss() {\n // Using the injected ModalController this page\n // can \"dismiss\" itself and pass back data.\n this.destroyYoutubePlayer();\n this.modalCtrl.dismiss();\n }\n\n async initializeYoutubePlayerPluginWeb() {\n const options = {\n playerId: this.item.id,\n playerSize: { width: 640, height: 360 },\n videoId: this.item.videoId\n };\n const result = await YoutubePlayer.initialize(options);\n console.log('playerReady', result);\n }\n\n async destroyYoutubePlayer() {\n const result = await YoutubePlayer.destroy(this.item.id);\n console.log('destroyYoutubePlayer', result);\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-ionic-ngxs-movies/src/app/pages/detail/detail.module.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/sort-ngmodule-metadata-arrays",
                "severity": 2,
                "message": "`NgModule` metadata arrays should be sorted in ASC alphabetical order",
                "line": 21,
                "column": 5,
                "nodeType": "Identifier",
                "messageId": "sortNgmoduleMetadataArrays",
                "endLine": 21,
                "endColumn": 33,
                "fix": {
                  "range": [
                    793,
                    838
                  ],
                  "text": "DetailComponentRoutingModule,\n IonicModule"
                }
              },
              {
                "ruleId": "@angular-eslint/sort-ngmodule-metadata-arrays",
                "severity": 2,
                "message": "`NgModule` metadata arrays should be sorted in ASC alphabetical order",
                "line": 29,
                "column": 5,
                "nodeType": "Identifier",
                "messageId": "sortNgmoduleMetadataArrays",
                "endLine": 29,
                "endColumn": 26,
                "fix": {
                  "range": [
                    952,
                    1000
                  ],
                  "text": "CommentModalComponent,\n YoutubeModalComponent"
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 2,
            "fixableWarningCount": 0,
            "source": "import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IonicModule } from '@ionic/angular';\n\nimport { DetailComponent } from './detail';\nimport { DetailComponentRoutingModule } from './detail-routing.module';\n\nimport { YoutubeModalComponent } from '@modals/youtube-modal/youtube.modal';\nimport { CommentModalComponent } from '@modals/comment-modal/comment.modal';\nimport { ShowCommentsModalComponent } from '@modals/show-comments-modal/show.comments.modal';\nimport { ShowActorsModalComponent } from '@modals/show-actors-modal/show.actors.modal';\n\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\n\nimport { NtkmeButtonModule } from '@ctrl/ngx-github-buttons';\n\n@NgModule({\n imports: [\n CommonModule,\n IonicModule,\n DetailComponentRoutingModule,\n ReactiveFormsModule,\n FormsModule,\n NtkmeButtonModule\n ],\n declarations: [\n DetailComponent,\n YoutubeModalComponent,\n CommentModalComponent,\n ShowCommentsModalComponent,\n ShowActorsModalComponent\n ],\n schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class DetailModule {}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-ionic-ngxs-movies/src/app/pages/detail/detail.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-standalone-component",
                "severity": 2,
                "message": "The component `standalone` property should be set to `true`",
                "line": 36,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferStandaloneComponent",
                "endLine": 41,
                "endColumn": 3,
                "fix": {
                  "range": [
                    1179,
                    1179
                  ],
                  "text": "standalone: true,"
                }
              },
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 36,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 41,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        48,
                        1179
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n// Ionic\nimport { ModalController } from '@ionic/angular';\n\n// Rxjs\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n// Third parties\nimport { Store } from '@ngxs/store';\nimport { Capacitor } from '@capacitor/core';\nimport { YoutubePlayer } from 'capacitor-youtube-player';\n\n/* Project */\n\n// State\nimport { LikeMovie, FavoriteMovie } from '@store/actions/movies.actions';\nimport { MovieState } from '@store/state/movies.state';\n\n// Models | Interfaces\nimport { Movie } from '@models/movie.model';\n\n// Components\nimport { YoutubeModalComponent } from '@modals/youtube-modal/youtube.modal';\nimport { CommentModalComponent } from '@modals/comment-modal/comment.modal';\nimport { ShowCommentsModalComponent } from '@modals/show-comments-modal/show.comments.modal';\nimport { ShowActorsModalComponent } from '@modals/show-actors-modal/show.actors.modal';\n\n// Services\nimport { YoutubeApiService } from '@services/youtube-api/youtube-api-service';\nimport { IziToastService } from '@services/izi-toast/izi-toast.service';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 40,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 40,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        29,
                        1311
                      ],
                      "text": " } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n// Ionic\nimport { ModalController } from '@ionic/angular';\n\n// Rxjs\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n// Third parties\nimport { Store } from '@ngxs/store';\nimport { Capacitor } from '@capacitor/core';\nimport { YoutubePlayer } from 'capacitor-youtube-player';\n\n/* Project */\n\n// State\nimport { LikeMovie, FavoriteMovie } from '@store/actions/movies.actions';\nimport { MovieState } from '@store/state/movies.state';\n\n// Models | Interfaces\nimport { Movie } from '@models/movie.model';\n\n// Components\nimport { YoutubeModalComponent } from '@modals/youtube-modal/youtube.modal';\nimport { CommentModalComponent } from '@modals/comment-modal/comment.modal';\nimport { ShowCommentsModalComponent } from '@modals/show-comments-modal/show.comments.modal';\nimport { ShowActorsModalComponent } from '@modals/show-actors-modal/show.actors.modal';\n\n// Services\nimport { YoutubeApiService } from '@services/youtube-api/youtube-api-service';\nimport { IziToastService } from '@services/izi-toast/izi-toast.service';\n\n@Component({\n selector: 'app-page-detail',\n templateUrl: './detail.html',\n styleUrls: ['./detail.scss'],\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "// Angular\nimport { Component, ViewEncapsulation } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n// Ionic\nimport { ModalController } from '@ionic/angular';\n\n// Rxjs\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n// Third parties\nimport { Store } from '@ngxs/store';\nimport { Capacitor } from '@capacitor/core';\nimport { YoutubePlayer } from 'capacitor-youtube-player';\n\n/* Project */\n\n// State\nimport { LikeMovie, FavoriteMovie } from '@store/actions/movies.actions';\nimport { MovieState } from '@store/state/movies.state';\n\n// Models | Interfaces\nimport { Movie } from '@models/movie.model';\n\n// Components\nimport { YoutubeModalComponent } from '@modals/youtube-modal/youtube.modal';\nimport { CommentModalComponent } from '@modals/comment-modal/comment.modal';\nimport { ShowCommentsModalComponent } from '@modals/show-comments-modal/show.comments.modal';\nimport { ShowActorsModalComponent } from '@modals/show-actors-modal/show.actors.modal';\n\n// Services\nimport { YoutubeApiService } from '@services/youtube-api/youtube-api-service';\nimport { IziToastService } from '@services/izi-toast/izi-toast.service';\n\n@Component({\n selector: 'app-page-detail',\n templateUrl: './detail.html',\n styleUrls: ['./detail.scss'],\n encapsulation: ViewEncapsulation.None\n})\nexport class DetailComponent {\n currentYear = new Date().getFullYear();\n selectedMovie: Observable<Movie>;\n movie: Movie;\n\n constructor(\n private store: Store,\n private youtubeApiService: YoutubeApiService,\n private modalCtrl: ModalController,\n private activatedRoute: ActivatedRoute,\n private iziToast: IziToastService\n ) {}\n\n ionViewWillEnter() {\n const id = this.activatedRoute.snapshot.paramMap.get('id');\n this.getMovieDetails(id);\n }\n\n getMovieDetails(id: string) {\n this.selectedMovie = this.store\n .select(MovieState.movieById)\n .pipe(map((filterFn) => filterFn(id)));\n this.selectedMovie.subscribe((movie) => {\n this.movie = movie;\n });\n }\n\n watchTrailer() {\n console.log('DetailsPage::watchTrailer | method called');\n\n // Code to use Youtube Api Service: providers/youtube-api-service.ts\n this.youtubeApiService.searchMovieTrailer(this.movie.title).subscribe({\n next: (result) => {\n if (result.items.length > 0) {\n const { videoId } = result.items[0].id;\n this.movie.videoId = videoId;\n\n // Code to use capacitor-youtube-player plugin.\n console.log(\n 'DetailsPage::watchTrailer -> platform: ' + Capacitor.platform\n );\n if (Capacitor.getPlatform() === 'web') {\n const componentProps = { modalProps: { item: this.movie } };\n this.presentModal(componentProps, YoutubeModalComponent);\n } else {\n // Native\n this.testYoutubePlayerPlugin();\n }\n\n /bin /run /sbin if (Capacitor.getPlatform() === 'web') {\n window.open('https://www.youtube.com/watch?v=' + videoId);\n } else { // TODO: Use capacitor-youtube-player plugin.\n window.open('https://www.youtube.com/watch?v=' + videoId, '_blank');\n }\n */\n }\n },\n error: (error) => {\n this.iziToast.show(\n 'Watch Trailer',\n 'Sorry, an error has occurred.',\n 'red',\n 'ico-error',\n 'assets/avatar.png'\n );\n }\n });\n }\n\n async presentModal(componentProps: any, component) {\n console.log(\n 'DetailsPage::presentModal | method called -> movie',\n this.movie\n );\n // const componentProps = { modalProps: { item: this.movie}};\n const modal = await this.modalCtrl.create({\n component: component,\n componentProps: componentProps\n });\n await modal.present();\n\n const { data } = await modal.onWillDismiss();\n if (data) {\n console.log('data', data);\n }\n }\n\n async testYoutubePlayerPlugin() {\n const options = {\n playerSize: { width: 640, height: 360 },\n videoId: this.movie.videoId\n };\n const playerReady = await YoutubePlayer.initialize(options);\n }\n\n onClickLike() {\n console.log('DetailsPage::onClickLike');\n if (typeof this.movie.likes === 'undefined') {\n this.movie.likes = 0;\n }\n this.movie.likes += 1;\n this.store.dispatch(new LikeMovie(this.movie));\n }\n\n onClickComment() {\n console.log('DetailsPage::onClickComment');\n const componentProps = {\n modalProps: { title: 'Comment', movie: this.movie }\n };\n this.presentModal(componentProps, CommentModalComponent);\n }\n\n onClickShowComment() {\n console.log('DetailsPage::onClickShowComment');\n const componentProps = {\n modalProps: { title: 'Comments', movie: this.movie }\n };\n this.presentModal(componentProps, ShowCommentsModalComponent);\n }\n\n onClickFavorite() {\n console.log('DetailsPage::onClickFavorite');\n\n if (typeof localStorage.getItem('@@STATE') !== 'undefined') {\n const state = JSON.parse(localStorage.getItem('@@STATE'));\n const favorites = state.catalog.favorites;\n\n if (typeof favorites !== 'undefined') {\n const condition = (item) => item.title === this.movie.title;\n if (!favorites.some(condition)) {\n this.store.dispatch(new FavoriteMovie(this.movie)).subscribe(() => {\n this.iziToast.success('Favorite movie', 'Favorite Movie added.');\n });\n } else {\n this.iziToast.show(\n 'Favorite movie',\n 'The movie has already been added.',\n 'red',\n 'ico-error',\n 'assets/avatar.png'\n );\n }\n }\n }\n }\n\n onClickShare() {\n console.log('DetailsPage::onClickShare');\n if (navigator['share']) {\n navigator['share']({\n title: 'WebShare API Demo',\n url: 'https://codepen.io/ayoisaiah/pen/YbNazJ'\n })\n .then(() => {\n console.log('Thanks for sharing!');\n })\n .catch(console.error);\n } else {\n // fallback\n }\n }\n\n showActors() {\n console.log('DetailsPage::showActors | method called');\n const componentProps = { modalProps: { actors: this.movie.cast } };\n this.presentModal(componentProps, ShowActorsModalComponent);\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-ionic-ngxs-movies/src/app/pages/home/home.module.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/sort-ngmodule-metadata-arrays",
                "severity": 2,
                "message": "`NgModule` metadata arrays should be sorted in ASC alphabetical order",
                "line": 24,
                "column": 5,
                "nodeType": "Identifier",
                "messageId": "sortNgmoduleMetadataArrays",
                "endLine": 24,
                "endColumn": 31,
                "fix": {
                  "range": [
                    900,
                    943
                  ],
                  "text": "HomeComponentRoutingModule,\n IonicModule"
                }
              },
              {
                "ruleId": "@angular-eslint/sort-ngmodule-metadata-arrays",
                "severity": 2,
                "message": "`NgModule` metadata arrays should be sorted in ASC alphabetical order",
                "line": 33,
                "column": 5,
                "nodeType": "Identifier",
                "messageId": "sortNgmoduleMetadataArrays",
                "endLine": 33,
                "endColumn": 32,
                "fix": {
                  "range": [
                    1075,
                    1127
                  ],
                  "text": "FilterMoviePopoverComponent,\n MovieModalComponent"
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 2,
            "fixableWarningCount": 0,
            "source": "import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IonicModule } from '@ionic/angular';\n\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { HomeComponent } from './home';\nimport { MovieModalComponent } from '@modals/movie-modal/movie.modal';\nimport { FavoritesMoviesModalComponent } from '@modals/favorites-movies-modal/favorites.movies.modal';\nimport { FilterMoviePopoverComponent } from '@popovers/filter-movie.popover';\nimport { HomeComponentRoutingModule } from './home-routing.module';\n\nimport { NgSelectModule } from '@ng-select/ng-select';\n\nimport { GenreCarouselComponent } from '@components/genre-carousel/genre-carousel.component';\n\nimport { FilterPipe } from '@pipes/filter.pipe';\n\nimport { NtkmeButtonModule } from '@ctrl/ngx-github-buttons';\n\n@NgModule({\n imports: [\n CommonModule,\n IonicModule,\n HomeComponentRoutingModule,\n NgSelectModule,\n ReactiveFormsModule,\n FormsModule,\n NtkmeButtonModule\n ],\n declarations: [\n HomeComponent,\n MovieModalComponent,\n FilterMoviePopoverComponent,\n FavoritesMoviesModalComponent,\n GenreCarouselComponent,\n FilterPipe\n ],\n schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class HomeModule {}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-ionic-ngxs-movies/src/app/pages/home/home.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-standalone-component",
                "severity": 2,
                "message": "The component `standalone` property should be set to `true`",
                "line": 40,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferStandaloneComponent",
                "endLine": 45,
                "endColumn": 3,
                "fix": {
                  "range": [
                    1015,
                    1015
                  ],
                  "text": "standalone: true,"
                }
              },
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 40,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 45,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        89,
                        1015
                      ],
                      "text": ", ChangeDetectionStrategy\n} from '@angular/core';\nimport { Router } from '@angular/router';\n\n// Ionic\nimport {\n ModalController,\n PopoverController,\n IonInfiniteScroll,\n IonContent\n} from '@ionic/angular';\n\n// Rx\nimport { Observable } from 'rxjs';\nimport { withLatestFrom } from 'rxjs/operators';\n\n// Third parties\nimport { Store, Select, Actions, ofActionSuccessful } from '@ngxs/store';\n\n// Project\nimport {\n FetchMovies,\n DeleteMovie,\n AddMovie,\n EditMovie\n} from '@store/actions/movies.actions';\nimport { MovieModalComponent } from '@modals/movie-modal/movie.modal';\nimport { FavoritesMoviesModalComponent } from '@modals/favorites-movies-modal/favorites.movies.modal';\nimport { FilterMoviePopoverComponent } from '@popovers/filter-movie.popover';\nimport { Movie } from '@models/movie.model';\nimport { IziToastService } from '@services/izi-toast/izi-toast.service';\nimport { AsyncEvent } from '@models/custom-event.model';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 44,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 44,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        31,
                        1141
                      ],
                      "text": ",\n OnInit,\n ViewChild,\n ElementRef\n} from '@angular/core';\nimport { Router } from '@angular/router';\n\n// Ionic\nimport {\n ModalController,\n PopoverController,\n IonInfiniteScroll,\n IonContent\n} from '@ionic/angular';\n\n// Rx\nimport { Observable } from 'rxjs';\nimport { withLatestFrom } from 'rxjs/operators';\n\n// Third parties\nimport { Store, Select, Actions, ofActionSuccessful } from '@ngxs/store';\n\n// Project\nimport {\n FetchMovies,\n DeleteMovie,\n AddMovie,\n EditMovie\n} from '@store/actions/movies.actions';\nimport { MovieModalComponent } from '@modals/movie-modal/movie.modal';\nimport { FavoritesMoviesModalComponent } from '@modals/favorites-movies-modal/favorites.movies.modal';\nimport { FilterMoviePopoverComponent } from '@popovers/filter-movie.popover';\nimport { Movie } from '@models/movie.model';\nimport { IziToastService } from '@services/izi-toast/izi-toast.service';\nimport { AsyncEvent } from '@models/custom-event.model';\n\n@Component({\n selector: 'app-page-home',\n templateUrl: './home.html',\n styleUrls: ['./home.scss'],\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "// Angular\nimport {\n Component,\n ViewEncapsulation,\n OnInit,\n ViewChild,\n ElementRef\n} from '@angular/core';\nimport { Router } from '@angular/router';\n\n// Ionic\nimport {\n ModalController,\n PopoverController,\n IonInfiniteScroll,\n IonContent\n} from '@ionic/angular';\n\n// Rx\nimport { Observable } from 'rxjs';\nimport { withLatestFrom } from 'rxjs/operators';\n\n// Third parties\nimport { Store, Select, Actions, ofActionSuccessful } from '@ngxs/store';\n\n// Project\nimport {\n FetchMovies,\n DeleteMovie,\n AddMovie,\n EditMovie\n} from '@store/actions/movies.actions';\nimport { MovieModalComponent } from '@modals/movie-modal/movie.modal';\nimport { FavoritesMoviesModalComponent } from '@modals/favorites-movies-modal/favorites.movies.modal';\nimport { FilterMoviePopoverComponent } from '@popovers/filter-movie.popover';\nimport { Movie } from '@models/movie.model';\nimport { IziToastService } from '@services/izi-toast/izi-toast.service';\nimport { AsyncEvent } from '@models/custom-event.model';\n\n@Component({\n selector: 'app-page-home',\n templateUrl: './home.html',\n styleUrls: ['./home.scss'],\n encapsulation: ViewEncapsulation.None\n})\nexport class HomeComponent implements OnInit {\n @ViewChild('infiniteScroll', { read: ElementRef, static: true })\n infiniteScroll: IonInfiniteScroll;\n @ViewChild(IonContent, { read: ElementRef, static: true })\n content: IonContent;\n\n // Reads the name of the store from the store class.\n @Select((state) => state.catalog.movies) movies$: Observable<Movie[]>;\n\n currentYear = new Date().getFullYear();\n start: number;\n end: number;\n showScrollTop: Boolean = false;\n showSkeleton: Boolean = true;\n iconView = 'apps';\n\n constructor(\n private store: Store,\n private router: Router,\n private modalCtrl: ModalController,\n private actions$: Actions,\n private popoverCtrl: PopoverController,\n private iziToast: IziToastService\n ) {\n this.start = 0;\n this.end = 20;\n }\n\n ngOnInit() {\n this.fetchMovies(this.start, this.end);\n // Check if we have movies in local storage.\n if (localStorage.getItem('@@STATE') !== 'undefined') {\n const state = JSON.parse(localStorage.getItem('@@STATE'));\n console.log('state', state);\n }\n\n this.actions$.pipe(ofActionSuccessful(AddMovie)).subscribe({\n next: () => {\n this.modalCtrl.dismiss();\n this.iziToast.success('Add movie', 'Movie added successfully.');\n },\n error: (err) =>\n console.log(\n 'HomePage::ngOnInit ofActionSuccessful(AddMovie) | method called -> received error' +\n err\n )\n });\n\n this.actions$.pipe(ofActionSuccessful(EditMovie)).subscribe({\n next: () => {\n this.modalCtrl.dismiss();\n this.iziToast.success('Edit movie', 'Movie updated successfully.');\n },\n error: (err) =>\n console.log(\n 'HomePage::ngOnInit ofActionSuccessful(EditMovie) | method called -> received error' +\n err\n )\n });\n\n this.actions$.pipe(ofActionSuccessful(DeleteMovie)).subscribe({\n next: () => {\n this.iziToast.success('Delete movie', 'Movie deleted successfully.');\n },\n error: (err) =>\n console.log(\n 'HomePage::ngOnInit ofActionSuccessful(DeleteMovie) | method called -> received error' +\n err\n )\n });\n }\n\n fetchMovies(start: number, end: number) {\n console.log('HomePage::fetchMovies | method called', start, end);\n this.store\n .dispatch(new FetchMovies({ start: start, end: end }))\n .pipe(withLatestFrom(this.movies$))\n .subscribe({\n next: ([movies]) => {\n setTimeout(() => {\n this.showSkeleton = false;\n }, 2000);\n },\n error: (err) =>\n console.log(\n 'HomePage::fetchMovies() | method called -> received error' + err\n )\n });\n }\n\n viewMovieDetails(movie: Movie) {\n const movieDetailsURL = `/detail/${movie.id}`;\n this.router.navigate([movieDetailsURL]);\n }\n\n async presentModal(componentProps: any, component) {\n const modal = await this.modalCtrl.create({\n component: component,\n componentProps: componentProps\n });\n await modal.present();\n\n const { data } = await modal.onWillDismiss();\n if (data) {\n console.log('data', data);\n }\n }\n\n addMovie() {\n const componentProps = {\n modalProps: { title: 'Add Movie', buttonText: 'Add Movie' },\n option: 'add'\n };\n this.presentModal(componentProps, MovieModalComponent);\n }\n\n editMovie(movie: Movie) {\n const componentProps = {\n modalProps: {\n title: 'Edit Movie',\n buttonText: 'Edit Movie',\n movie: movie\n },\n option: 'edit'\n };\n this.presentModal(componentProps, MovieModalComponent);\n }\n\n deleteMovie(movie: Movie) {\n this.store.dispatch(new DeleteMovie(movie));\n }\n\n doInfinite(event: Event) {\n const customEvent = event as AsyncEvent;\n setTimeout(() => {\n customEvent.target.complete();\n this.showSkeleton = true;\n this.start = this.end;\n this.end += 20;\n this.showScrollTop = true;\n this.fetchMovies(this.start, this.end);\n }, 500);\n }\n\n async presentPopover(event: MouseEvent) {\n const popover = await this.popoverCtrl.create({\n component: FilterMoviePopoverComponent,\n event: event\n });\n\n await popover.present();\n\n const { data } = await popover.onWillDismiss();\n\n if (data) {\n console.log('data popover.onWillDismiss', data);\n }\n }\n\n scrollToTop() {\n this.content['nativeElement'].scrollToTop();\n }\n\n changeView() {\n console.log('HomePage::changeView() | method called');\n this.iconView = this.iconView === 'apps' ? 'list' : 'apps';\n }\n\n showFavoritesMovies() {\n console.log('HomePage::showFavoritesMovies() | method called');\n const state = JSON.parse(localStorage.getItem('@@STATE'));\n console.log('state', state);\n const componentProps = {\n modalProps: {\n title: 'Favorites Movies',\n favoritesMovies: state.catalog.favorites\n }\n };\n this.presentModal(componentProps, FavoritesMoviesModalComponent);\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-ionic-ngxs-movies/src/app/popovers/filter-movie.popover.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-standalone-component",
                "severity": 2,
                "message": "The component `standalone` property should be set to `true`",
                "line": 14,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferStandaloneComponent",
                "endLine": 19,
                "endColumn": 3,
                "fix": {
                  "range": [
                    403,
                    403
                  ],
                  "text": "standalone: true,"
                }
              },
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 14,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 19,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        74,
                        403
                      ],
                      "text": ", ChangeDetectionStrategy\n} from '@angular/core';\nimport { PopoverController } from '@ionic/angular';\nimport { Store } from '@ngxs/store';\nimport { Observable, Subscription } from 'rxjs';\nimport { FormBuilder, FormGroup, FormControl } from '@angular/forms';\nimport { FilterMovies, SaveFilterMovies } from '@store/actions/movies.actions';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)",
                "line": 16,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 16,
                "endColumn": 43
              },
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 18,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 18,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        20,
                        570
                      ],
                      "text": ",\n OnInit,\n OnDestroy,\n NgZone\n} from '@angular/core';\nimport { PopoverController } from '@ionic/angular';\nimport { Store } from '@ngxs/store';\nimport { Observable, Subscription } from 'rxjs';\nimport { FormBuilder, FormGroup, FormControl } from '@angular/forms';\nimport { FilterMovies, SaveFilterMovies } from '@store/actions/movies.actions';\n\n@Component({\n selector: 'app-filter-movie-popover',\n templateUrl: 'filter-movie.popover.html',\n styleUrls: ['./filter-movie.popover.scss'],\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 4,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n ViewEncapsulation,\n OnInit,\n OnDestroy,\n NgZone\n} from '@angular/core';\nimport { PopoverController } from '@ionic/angular';\nimport { Store } from '@ngxs/store';\nimport { Observable, Subscription } from 'rxjs';\nimport { FormBuilder, FormGroup, FormControl } from '@angular/forms';\nimport { FilterMovies, SaveFilterMovies } from '@store/actions/movies.actions';\n\n@Component({\n selector: 'app-filter-movie-popover',\n templateUrl: 'filter-movie.popover.html',\n styleUrls: ['./filter-movie.popover.scss'],\n encapsulation: ViewEncapsulation.None\n})\nexport class FilterMoviePopoverComponent implements OnInit, OnDestroy {\n range: any = {\n lower: 1900,\n upper: new Date().getFullYear()\n };\n\n filter$: Observable<any>;\n filterSubscription: Subscription;\n\n filterForm: FormGroup;\n\n customPopoverOptions: any = {\n header: 'Genre',\n subHeader: 'Select movie genre'\n };\n\n genres = [\n { id: 1, name: 'Action', image: 'assets/movies-genres/action.png' },\n { id: 2, name: 'Comedy', image: 'assets/movies-genres/comedy.png' },\n { id: 3, name: 'Crime', image: 'assets/movies-genres/crime.png' },\n {\n id: 4,\n name: 'Documentary',\n image: 'assets/movies-genres/documentary.png'\n },\n { id: 5, name: 'Drama', image: 'assets/movies-genres/drama.png' },\n { id: 6, name: 'Fantasy', image: 'assets/movies-genres/fantasy.png' },\n { id: 7, name: 'Film noir', image: 'assets/movies-genres/film noir.png' },\n { id: 8, name: 'Horror', image: 'assets/movies-genres/horror.png' },\n { id: 9, name: 'Romance', image: 'assets/movies-genres/romance.png' },\n {\n id: 10,\n name: 'Science fiction',\n image: 'assets/movies-genres/science fiction.png'\n },\n { id: 11, name: 'Westerns', image: 'assets/movies-genres/westerns.png' }\n ];\n\n constructor(\n private popoverCtrl: PopoverController,\n private store: Store,\n private zone: NgZone,\n private formBuilder: FormBuilder\n ) {\n this.createForm();\n }\n\n createForm() {\n this.filterForm = this.formBuilder.group({\n rate: new FormControl(''),\n years: new FormControl(''),\n genre: new FormControl('')\n });\n }\n\n ngOnInit() {\n this.filter$ = this.store.select((state) => state.catalog.filter);\n this.filterSubscription = this.filter$.subscribe((filter) => {\n this.filterForm.setValue(filter);\n if (filter.genre === '') {\n this.filterForm.patchValue({ genre: 'Action' });\n }\n });\n }\n\n ngOnDestroy() {\n this.filterSubscription.unsubscribe();\n }\n\n filterMovies() {\n console.log(this.filterForm.value);\n this.store.dispatch([\n new FilterMovies(this.filterForm.value),\n new SaveFilterMovies(this.filterForm.value)\n ]);\n this.popoverCtrl.dismiss();\n }\n\n clearFilterMovies() {\n this.filterForm.patchValue({\n rate: 0,\n years: { lower: 1900, upper: new Date().getFullYear() },\n genre: ''\n });\n this.store.dispatch([\n new FilterMovies(this.filterForm.value),\n new SaveFilterMovies(this.filterForm.value)\n ]);\n this.popoverCtrl.dismiss();\n }\n\n onRatingChange(event) {\n this.filterForm.patchValue({ rate: event.detail });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-ionic-ngxs-movies/src/app/services/movies/movies-service.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 9,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 9,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        353,
                        353
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        353,
                        353
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        353,
                        353
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { timeout, retryWhen, delay } from 'rxjs/operators';\nimport { v4 as uuid } from 'uuid';\nimport { Movie } from '@models/movie.model';\nimport { environment } from '@environments/environment';\n\n@Injectable()\nexport class MoviesService {\n private readonly URL_BASE: string = environment.API_URL_BASE;\n\n constructor(private http: HttpClient) {}\n\n getMovies(start: number, end: number): Observable<Movie[]> {\n return (\n this.http\n // Type-checking the response => .get<Movie[]>\n .get<Movie[]>(\n this.URL_BASE +\n `movies?_start=${start}&_end=${end}&_sort=year,title&_order=desc,asc`\n )\n .pipe(\n retryWhen((error) => error.pipe(delay(500))),\n timeout(5000)\n )\n );\n }\n\n getMovie(title: string): Observable<Movie> {\n return (\n this.http\n // Type-checking the response => .get<Movie>\n .get<Movie>(encodeURI(this.URL_BASE + `movies?title=${title}`))\n .pipe(\n retryWhen((error) => error.pipe(delay(500))),\n timeout(5000)\n )\n );\n }\n\n addMovie(movie: Movie): Observable<Movie> {\n movie['id'] = uuid();\n\n const httpOptions = {\n headers: new HttpHeaders({\n 'Content-Type': 'application/json'\n })\n };\n\n return (\n this.http\n // Type-checking the response => .post<Movie>\n .post<Movie>(encodeURI(this.URL_BASE + `movies/`), movie, httpOptions)\n .pipe(\n retryWhen((error) => error.pipe(delay(500))),\n timeout(5000)\n )\n );\n }\n\n editMovie(movie: Movie): Observable<Movie> {\n const httpOptions = {\n headers: new HttpHeaders({\n 'Content-Type': 'application/json'\n })\n };\n\n return (\n this.http\n // Type-checking the response => .post<Movie>\n .put<Movie>(\n encodeURI(this.URL_BASE + `movies/${movie['id']}`),\n movie,\n httpOptions\n )\n .pipe(\n retryWhen((error) => error.pipe(delay(500))),\n timeout(5000)\n )\n );\n }\n\n deleteMovie(movie: Movie): Observable<Movie> {\n return (\n this.http\n // Type-checking the response => .post<Movie>\n .delete<Movie>(encodeURI(this.URL_BASE + `movies/${movie['id']}`))\n .pipe(\n retryWhen((error) => error.pipe(delay(500))),\n timeout(5000)\n )\n );\n }\n\n filterMovies(filters): Observable<Movie[]> {\n const strFilters = this.checkFilters(filters);\n console.log(\n this.URL_BASE +\n `movies${strFilters}_sort=year,title&_order=desc,asc&_limit=20`\n );\n return (\n this.http\n // Type-checking the response => .get<Movie[]>\n .get<Movie[]>(\n this.URL_BASE +\n `movies${strFilters}_sort=year,title&_order=desc,asc&_limit=20`\n )\n .pipe(\n retryWhen((error) => error.pipe(delay(500))),\n timeout(5000)\n )\n );\n }\n\n checkFilters(filters: any) {\n let strFilters = '';\n strFilters +=\n typeof filters['genre'] !== 'undefined' && filters['genre'] !== ''\n ? `?genre=${filters.genre}&`\n : '?';\n strFilters +=\n typeof filters['years'] !== 'undefined'\n ? `year_gte=${filters.years.lower}&year_lte=${filters.years.upper}&`\n : '';\n strFilters +=\n typeof filters['rate'] !== 'undefined' && filters['rate'] !== 0\n ? `rate=${filters.rate}&`\n : '';\n return strFilters;\n }\n\n searchMovies(queryText: string): Observable<Movie[]> {\n return (\n this.http\n // Type-checking the response => .get<Movie[]>\n .get<Movie[]>(this.URL_BASE + `movies?q=${queryText}&_limit=20`)\n .pipe(\n retryWhen((error) => error.pipe(delay(500))),\n timeout(5000)\n )\n );\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-ionic-ngxs-movies/src/app/services/search-image/search-image-service.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 6,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 6,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        203,
                        203
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        203,
                        203
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        203,
                        203
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { timeout, retryWhen, delay } from 'rxjs/operators';\n\n@Injectable()\nexport class SearchImageService {\n private readonly URL_BASE: string =\n 'https://www.googleapis.com/customsearch/v1';\n private readonly API_KEY: string = 'AIzaSyCPqf8puyl9DyVFPy_KTAARdaBPRpfYHoA';\n private readonly CUSTOM_SEARCH_ENGINE_ID: string =\n '012020920993535583437:nqayyeenfrw';\n\n constructor(private http: HttpClient) {}\n\n searchImage(searchQuery: string): Observable<any> {\n return (\n this.http\n // https://www.googleapis.com/customsearch/v1?q=Mia%20Wasikowska&cx=012020920993535583437:nqayyeenfrw\n // &key=AIzaSyCPqf8puyl9DyVFPy_KTAARdaBPRpfYHoA&searchType=image&alt=json\n .get(\n encodeURI(\n this.URL_BASE +\n `?q=${searchQuery}&cx=${this.CUSTOM_SEARCH_ENGINE_ID}&key=${this.API_KEY}&searchType=image&alt=json`\n )\n )\n .pipe(\n retryWhen((error) => error.pipe(delay(500))),\n timeout(5000)\n )\n );\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-ionic-ngxs-movies/src/app/services/youtube-api/youtube-api-service.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 6,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 6,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        203,
                        203
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        203,
                        203
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        203,
                        203
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { timeout, retryWhen, delay } from 'rxjs/operators';\n\n@Injectable()\nexport class YoutubeApiService {\n private readonly URL_BASE: string =\n 'https://www.googleapis.com/youtube/v3/search';\n private readonly API_KEY: string = 'AIzaSyDxuxEANLFVy5q4sG1NrAUJNhoX6nW4VQ4';\n\n constructor(private http: HttpClient) {}\n\n searchMovieTrailer(movieTitle: string): Observable<any> {\n return this.http\n .get(\n encodeURI(\n this.URL_BASE +\n `?key=${this.API_KEY}&q=${movieTitle}&type=video&part=snippet,id&maxResults=5`\n )\n )\n .pipe(\n retryWhen((error) => error.pipe(delay(500))),\n timeout(5000)\n );\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-ionic-ngxs-movies/src/app/store/state/movies.state.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 67,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 67,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        1404,
                        1404
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        1404,
                        1404
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        1404,
                        1404
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { State, Action, StateContext, Selector, NgxsOnInit } from '@ngxs/store';\nimport { patch, append, removeItem, updateItem } from '@ngxs/store/operators';\nimport { tap, catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport { Movie } from '@models/movie.model';\nimport {\n FetchMovies,\n AddMovie,\n EditMovie,\n DeleteMovie,\n FilterMovies,\n SaveFilterMovies,\n GetMovieTrailer,\n ClearMovies,\n LikeMovie,\n CommentMovie,\n FavoriteMovie,\n DeleteFavoriteMovie,\n DeleteAllFavoritesMovies,\n ClearState\n} from '@store/actions/movies.actions';\n\nimport { MoviesService } from '@services/movies/movies-service';\nimport { YoutubeApiService } from '@services/youtube-api/youtube-api-service';\nimport { Injectable } from '@angular/core';\n\nexport class MoviesStateModel {\n movies: Movie[];\n movieForm: {\n model: Movie;\n dirty: boolean;\n status: string;\n errors: {};\n };\n filter: {\n genre: string;\n years: {\n lower: number;\n upper: number;\n };\n rate: number;\n };\n favorites: Movie[];\n}\n\n@State<MoviesStateModel>({\n name: 'catalog',\n defaults: {\n movies: [],\n movieForm: {\n model: null,\n dirty: false,\n status: '',\n errors: {}\n },\n filter: {\n genre: 'Action',\n years: {\n lower: 1900,\n upper: new Date().getFullYear()\n },\n rate: 0\n },\n favorites: []\n }\n})\n@Injectable()\nexport class MovieState implements NgxsOnInit {\n private readonly GENRES: string[] = [\n 'action',\n 'comedy',\n 'crime',\n 'documentary',\n 'drama',\n 'fantasy',\n 'film noir',\n 'horror',\n 'romance',\n 'science fiction',\n 'westerns',\n 'animation'\n ];\n\n constructor(\n private moviesService: MoviesService,\n private youtubeApiService: YoutubeApiService\n ) {}\n\n @Selector()\n static getMovies(state: MoviesStateModel) {\n return state.movies;\n }\n\n @Selector()\n static movieById(state: MoviesStateModel) {\n return (id: string) => {\n return state.movies.filter((movie) => movie.id === id)[0];\n };\n }\n\n ngxsOnInit(ctx: StateContext<MoviesStateModel>) {\n ctx.dispatch(new ClearState());\n }\n\n @Action(ClearState)\n clearState({ setState }: StateContext<MoviesStateModel>) {\n setState({\n movies: [],\n movieForm: {\n model: null,\n dirty: false,\n status: '',\n errors: {}\n },\n filter: {\n genre: 'Action',\n years: {\n lower: 1900,\n upper: new Date().getFullYear()\n },\n rate: 0\n },\n favorites: []\n });\n }\n\n @Action(FetchMovies, { cancelUncompleted: true })\n fetchMovies(\n { getState, setState }: StateContext<MoviesStateModel>,\n { payload }\n ) {\n const { start, end } = payload;\n return this.moviesService.getMovies(start, end).pipe(\n catchError((x, caught) => {\n return throwError(() => new Error(x));\n }),\n tap({\n next: (movies) => {\n movies.forEach((movie) => {\n const genre = movie.genre.toLowerCase().split(',', 1)[0];\n if (this.GENRES.indexOf(genre) !== -1) {\n movie.genreImage = 'assets/movies-genres/' + genre + '.png';\n }\n });\n const state = getState();\n setState({\n ...state,\n movies: [...state.movies, ...movies]\n });\n },\n error: (error) => {\n console.log('error', error.message);\n }\n })\n );\n }\n\n @Action(AddMovie)\n addMovie({ setState }: StateContext<MoviesStateModel>, { payload }) {\n payload.poster =\n payload.poster === ''\n ? 'https://in.bmscdn.com/iedb/movies/images/website/poster/large/ela-cheppanu-et00016781-24-03-2017-18-31-40.jpg'\n : payload.poster;\n return this.moviesService.addMovie(payload).pipe(\n catchError((x, caught) => {\n return throwError(() => new Error(x));\n }),\n tap({\n next: (result) => {\n setState(\n patch({\n movies: append([result])\n })\n );\n }\n })\n );\n }\n\n @Action(EditMovie)\n editMovie({ setState }: StateContext<MoviesStateModel>, { payload }) {\n return this.moviesService.editMovie(payload).pipe(\n catchError((x, caught) => {\n return throwError(() => new Error(x));\n }),\n tap({\n next: (result) => {\n setState(\n patch({\n movies: updateItem<Movie>(\n (movie) => movie.id === result.id,\n result\n )\n })\n );\n }\n })\n );\n }\n\n @Action(DeleteMovie)\n deleteMovie({ setState }: StateContext<MoviesStateModel>, { payload }) {\n return this.moviesService.deleteMovie(payload).pipe(\n catchError((x, caught) => {\n return throwError(() => new Error(x));\n }),\n tap({\n next: (result) => {\n setState(\n patch({\n movies: removeItem<Movie>((movie) => movie.id === payload.id)\n })\n );\n }\n })\n );\n }\n\n @Action(FilterMovies, { cancelUncompleted: true })\n filterMovies(\n { getState, setState }: StateContext<MoviesStateModel>,\n { payload }\n ) {\n return this.moviesService.filterMovies(payload).pipe(\n catchError((x, caught) => {\n return throwError(() => new Error(x));\n }),\n tap({\n next: (result) => {\n const state = getState();\n setState({\n ...state,\n movies: [...result]\n });\n },\n error: (error) => {\n console.log('error', error.message);\n }\n })\n );\n }\n\n @Action(SaveFilterMovies)\n saveFilterMovies({ setState }: StateContext<MoviesStateModel>, { payload }) {\n setState(\n patch({\n filter: { ...payload }\n })\n );\n }\n\n @Action(GetMovieTrailer, { cancelUncompleted: true })\n getMovieTrailer(\n { getState, setState }: StateContext<MoviesStateModel>,\n { payload }\n ) {\n return this.youtubeApiService.searchMovieTrailer(payload.movieTitle).pipe(\n catchError((x, caught) => {\n return throwError(() => new Error(x));\n }),\n tap({\n next: (result) => {},\n error: (error) => {\n console.log('error', error.message);\n }\n })\n );\n }\n\n @Action(ClearMovies)\n clearMovies({ getState, setState }: StateContext<MoviesStateModel>) {\n const state = getState();\n setState({\n ...state,\n movies: []\n });\n }\n\n @Action(LikeMovie)\n likeMovie({ setState }: StateContext<MoviesStateModel>, { payload }) {\n return this.moviesService.editMovie(payload).pipe(\n catchError((x, caught) => {\n return throwError(() => new Error(x));\n }),\n tap({\n next: (result) => {\n setState(\n patch({\n movies: updateItem<Movie>(\n (movie) => movie.id === result.id,\n result\n )\n })\n );\n },\n error: (error) => {\n console.log('error', error.message);\n }\n })\n );\n }\n\n @Action(CommentMovie)\n commentMovie({ setState }: StateContext<MoviesStateModel>, { payload }) {\n return this.moviesService.editMovie(payload).pipe(\n catchError((x, caught) => {\n return throwError(() => new Error(x));\n }),\n tap({\n next: (result) => {\n setState(\n patch({\n movies: updateItem<Movie>(\n (movie) => movie.id === result.id,\n result\n )\n })\n );\n },\n error: (error) => {\n console.log('error', error.message);\n }\n })\n );\n }\n\n @Action(FavoriteMovie)\n favoriteMovie({ setState }: StateContext<MoviesStateModel>, { payload }) {\n setState(\n patch({\n favorites: append([payload])\n })\n );\n }\n\n @Action(DeleteFavoriteMovie)\n deleteFavoriteMovie(\n { setState }: StateContext<MoviesStateModel>,\n { payload }\n ) {\n setState(\n patch({\n favorites: removeItem<Movie>((movie) => movie.id === payload.id)\n })\n );\n }\n\n @Action(DeleteAllFavoritesMovies)\n deleteAllFavoritesMovies({\n getState,\n setState\n }: StateContext<MoviesStateModel>) {\n const state = getState();\n setState({\n ...state,\n favorites: []\n });\n }\n}\n",
            "usedDeprecatedRules": []
          }
        ]
      }
    },
    "after": {
      "angular-ionic-ngxs-movies": {
        "recommended": [],
        "all": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-ionic-ngxs-movies/src/app/app.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 3,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 8,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        37,
                        78
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 7,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 7,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        18,
                        233
                      ],
                      "text": " } from '@angular/core';\n\n@Component({\n standalone: true,selector: 'app-root',\n templateUrl: './app.component.html',\n styleUrls: ['./app.component.css'],\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ViewEncapsulation } from '@angular/core';\n\n@Component({\n standalone: true,selector: 'app-root',\n templateUrl: './app.component.html',\n styleUrls: ['./app.component.css'],\n encapsulation: ViewEncapsulation.None\n})\nexport class AppComponent {\n title = 'app';\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-ionic-ngxs-movies/src/app/components/genre-carousel/genre-carousel.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 6,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 10,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        159
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\n\nimport { Store } from '@ngxs/store';\nimport { FilterMovies } from '@store/actions/movies.actions';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\n\nimport { Store } from '@ngxs/store';\nimport { FilterMovies } from '@store/actions/movies.actions';\n\n@Component({\n standalone: true,selector: 'app-genre-carousel',\n templateUrl: './genre-carousel.component.html',\n styleUrls: ['./genre-carousel.component.css']\n})\nexport class GenreCarouselComponent {\n genres: any;\n filters: any = {\n years: {\n lower: 1900,\n upper: new Date().getFullYear()\n },\n genre: 'Action',\n rating: 0\n };\n selected: Number = -1;\n\n constructor(private store: Store) {\n this.genres = [\n { text: 'Science fiction', src: 'assets/movies-genres/image1.png' },\n { text: 'Westerns', src: 'assets/movies-genres/image2.png' },\n { text: 'Crime', src: 'assets/movies-genres/image3.png' },\n { text: 'Romance', src: 'assets/movies-genres/image4.png' },\n { text: 'Comedy', src: 'assets/movies-genres/image5.png' },\n { text: 'Drama', src: 'assets/movies-genres/image6.png' },\n { text: 'Cartoon', src: 'assets/movies-genres/image7.png' },\n { text: 'Action', src: 'assets/movies-genres/image8.png' },\n { text: 'Adventure', src: 'assets/movies-genres/image9.png' },\n { text: 'Thriller', src: 'assets/movies-genres/image10.png' },\n { text: 'Fantasy', src: 'assets/movies-genres/image11.png' },\n { text: 'Horror', src: 'assets/movies-genres/image12.png' }\n ];\n }\n\n selectGenre(genre, index) {\n console.log('GenreCarouselComponent::selectGenre() | method called', genre);\n this.selected = index;\n this.filters.genre = genre.text;\n this.store.dispatch([new FilterMovies(this.filters)]);\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-ionic-ngxs-movies/src/app/modals/comment-modal/comment.modal.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 14,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 19,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        45,
                        335
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { ModalController, NavParams } from '@ionic/angular';\n\nimport {\n FormBuilder,\n FormGroup,\n FormControl,\n Validators\n} from '@angular/forms';\n\nimport { EditMovie } from '@store/actions/movies.actions';\nimport { Store } from '@ngxs/store';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)",
                "line": 16,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 16,
                "endColumn": 36
              },
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 18,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 18,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        18,
                        498
                      ],
                      "text": ", OnInit } from '@angular/core';\nimport { ModalController, NavParams } from '@ionic/angular';\n\nimport {\n FormBuilder,\n FormGroup,\n FormControl,\n Validators\n} from '@angular/forms';\n\nimport { EditMovie } from '@store/actions/movies.actions';\nimport { Store } from '@ngxs/store';\n\n@Component({\n standalone: true,selector: 'app-comment-modal',\n templateUrl: 'comment.modal.html',\n styleUrls: ['./comment.modal.scss'],\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ViewEncapsulation, OnInit } from '@angular/core';\nimport { ModalController, NavParams } from '@ionic/angular';\n\nimport {\n FormBuilder,\n FormGroup,\n FormControl,\n Validators\n} from '@angular/forms';\n\nimport { EditMovie } from '@store/actions/movies.actions';\nimport { Store } from '@ngxs/store';\n\n@Component({\n standalone: true,selector: 'app-comment-modal',\n templateUrl: 'comment.modal.html',\n styleUrls: ['./comment.modal.scss'],\n encapsulation: ViewEncapsulation.None\n})\nexport class CommentModalComponent implements OnInit {\n commentForm: FormGroup;\n\n modal: any = {\n title: ''\n };\n\n constructor(\n private modalCtrl: ModalController,\n private formBuilder: FormBuilder,\n private navParams: NavParams,\n private store: Store\n ) {\n this.createForm();\n }\n\n createForm() {\n this.commentForm = this.formBuilder.group({\n comment: new FormControl('', Validators.required),\n rating: new FormControl('')\n });\n }\n\n ngOnInit() {\n this.modal = { ...this.navParams.data.modalProps };\n }\n\n dismiss() {\n // Using the injected ModalController this page\n // can \"dismiss\" itself and pass back data.\n this.modalCtrl.dismiss();\n }\n\n commentFormSubmit() {\n let comments;\n let movieToUpdate = { ...this.modal.movie };\n if (typeof this.modal.movie.comments === 'undefined') {\n comments = [];\n } else {\n comments = [...this.modal.movie.comments];\n }\n\n if (typeof this.modal.movie.rate === 'undefined') {\n movieToUpdate = {\n ...movieToUpdate,\n rate: this.commentForm.value.rating,\n numVotes: 1\n };\n } else {\n movieToUpdate = {\n ...movieToUpdate,\n numVotes: movieToUpdate.numVotes + 1,\n rate:\n (movieToUpdate.rate + this.commentForm.value.rating) /\n (movieToUpdate.numVotes + 1)\n };\n }\n\n comments.push(this.commentForm.value.comment);\n movieToUpdate.comments = comments;\n this.store.dispatch(new EditMovie(movieToUpdate));\n }\n\n onRatingChange(event) {\n this.commentForm.patchValue({ rating: event.detail });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-ionic-ngxs-movies/src/app/modals/favorites-movies-modal/favorites.movies.modal.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 13,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 18,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        45,
                        389
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { ModalController, NavParams, AlertController } from '@ionic/angular';\n\nimport { Store } from '@ngxs/store';\nimport { Movie } from '@models/movie.model';\n\nimport {\n DeleteFavoriteMovie,\n DeleteAllFavoritesMovies\n} from '@store/actions/movies.actions';\nimport { Router } from '@angular/router';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)",
                "line": 15,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 15,
                "endColumn": 45
              },
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 17,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 17,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        18,
                        579
                      ],
                      "text": ", OnInit } from '@angular/core';\nimport { ModalController, NavParams, AlertController } from '@ionic/angular';\n\nimport { Store } from '@ngxs/store';\nimport { Movie } from '@models/movie.model';\n\nimport {\n DeleteFavoriteMovie,\n DeleteAllFavoritesMovies\n} from '@store/actions/movies.actions';\nimport { Router } from '@angular/router';\n\n@Component({\n standalone: true,selector: 'app-favorites-movies-modal',\n templateUrl: 'favorites.movies.modal.html',\n styleUrls: ['./favorites.movies.modal.scss'],\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ViewEncapsulation, OnInit } from '@angular/core';\nimport { ModalController, NavParams, AlertController } from '@ionic/angular';\n\nimport { Store } from '@ngxs/store';\nimport { Movie } from '@models/movie.model';\n\nimport {\n DeleteFavoriteMovie,\n DeleteAllFavoritesMovies\n} from '@store/actions/movies.actions';\nimport { Router } from '@angular/router';\n\n@Component({\n standalone: true,selector: 'app-favorites-movies-modal',\n templateUrl: 'favorites.movies.modal.html',\n styleUrls: ['./favorites.movies.modal.scss'],\n encapsulation: ViewEncapsulation.None\n})\nexport class FavoritesMoviesModalComponent implements OnInit {\n modal: any = {\n title: ''\n };\n\n constructor(\n private modalCtrl: ModalController,\n private navParams: NavParams,\n private store: Store,\n private router: Router,\n private alertCtrl: AlertController\n ) {}\n\n ngOnInit() {\n this.modal = { ...this.navParams.data.modalProps };\n }\n\n dismiss() {\n // Using the injected ModalController this page\n // can \"dismiss\" itself and pass back data.\n this.modalCtrl.dismiss();\n }\n\n viewMovieDetails(movie: Movie) {\n const movieDetailsURL = `/detail/${movie.id}`;\n this.router.navigate([movieDetailsURL]);\n this.modalCtrl.dismiss();\n }\n\n deleteFavoriteMovie(movie: Movie) {\n console.log(\n 'FavoritesMoviesModalComponent::deleteFavoriteMovie() | method called'\n );\n this.store.dispatch(new DeleteFavoriteMovie(movie));\n this.modal.favoritesMovies = this.modal.favoritesMovies.filter(\n (m) => m.title !== movie.title\n );\n }\n\n deleteAll() {\n console.log('FavoritesMoviesModalComponent::deleteAll() | method called');\n this.modal.favoritesMovies = [];\n const state = JSON.parse(localStorage.getItem('@@STATE'));\n state.catalog.favorites = [];\n this.store.dispatch(new DeleteAllFavoritesMovies());\n }\n\n async presentAlertConfirm() {\n const alert = await this.alertCtrl.create({\n header: 'Delete all favorites',\n message: 'Are you sure you want to delete all the favorites?',\n buttons: [\n {\n text: 'Cancel',\n role: 'cancel',\n cssClass: 'secondary'\n },\n {\n text: 'Okay',\n handler: () => {\n this.deleteAll();\n }\n }\n ]\n });\n\n await alert.present();\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-ionic-ngxs-movies/src/app/modals/movie-modal/movie.modal.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 23,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 28,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        81,
                        677
                      ],
                      "text": ", ChangeDetectionStrategy\n} from '@angular/core';\nimport { ModalController, NavParams } from '@ionic/angular';\nimport { Store } from '@ngxs/store';\nimport { UpdateFormValue, UpdateFormStatus } from '@ngxs/form-plugin';\nimport { AddMovie, EditMovie } from '@store/actions/movies.actions';\nimport { Movie } from '@models/movie.model';\nimport {\n FormBuilder,\n FormGroup,\n FormControl,\n Validators\n} from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { FormErrorHandlerService } from '@services/form-error-hanlder/form-error-handler.service';\nimport { MovieForm } from '@models/form.model';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)",
                "line": 25,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 25,
                "endColumn": 34
              },
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 27,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 27,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        20,
                        834
                      ],
                      "text": ",\n OnInit,\n Renderer2,\n AfterViewInit\n} from '@angular/core';\nimport { ModalController, NavParams } from '@ionic/angular';\nimport { Store } from '@ngxs/store';\nimport { UpdateFormValue, UpdateFormStatus } from '@ngxs/form-plugin';\nimport { AddMovie, EditMovie } from '@store/actions/movies.actions';\nimport { Movie } from '@models/movie.model';\nimport {\n FormBuilder,\n FormGroup,\n FormControl,\n Validators\n} from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { FormErrorHandlerService } from '@services/form-error-hanlder/form-error-handler.service';\nimport { MovieForm } from '@models/form.model';\n\n@Component({\n standalone: true,selector: 'app-movie-modal',\n templateUrl: 'movie.modal.html',\n styleUrls: ['./movie.modal.scss'],\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n ViewEncapsulation,\n OnInit,\n Renderer2,\n AfterViewInit\n} from '@angular/core';\nimport { ModalController, NavParams } from '@ionic/angular';\nimport { Store } from '@ngxs/store';\nimport { UpdateFormValue, UpdateFormStatus } from '@ngxs/form-plugin';\nimport { AddMovie, EditMovie } from '@store/actions/movies.actions';\nimport { Movie } from '@models/movie.model';\nimport {\n FormBuilder,\n FormGroup,\n FormControl,\n Validators\n} from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { FormErrorHandlerService } from '@services/form-error-hanlder/form-error-handler.service';\nimport { MovieForm } from '@models/form.model';\n\n@Component({\n standalone: true,selector: 'app-movie-modal',\n templateUrl: 'movie.modal.html',\n styleUrls: ['./movie.modal.scss'],\n encapsulation: ViewEncapsulation.None\n})\nexport class MovieModalComponent implements OnInit, AfterViewInit {\n modal: any = {\n title: '',\n buttonText: ''\n };\n\n movieForm: FormGroup;\n errorsForm: any = {};\n\n // Reads the name of the store from the store class.\n movieForm$: Observable<Movie[]>;\n\n genres = [\n { id: 1, name: 'Action', image: 'assets/movies-genres/action.png' },\n { id: 2, name: 'Comedy', image: 'assets/movies-genres/comedy.png' },\n { id: 3, name: 'Crime', image: 'assets/movies-genres/crime.png' },\n {\n id: 4,\n name: 'Documentary',\n image: 'assets/movies-genres/documentary.png'\n },\n { id: 5, name: 'Drama', image: 'assets/movies-genres/drama.png' },\n { id: 6, name: 'Fantasy', image: 'assets/movies-genres/fantasy.png' },\n { id: 7, name: 'Film noir', image: 'assets/movies-genres/film noir.png' },\n { id: 8, name: 'Horror', image: 'assets/movies-genres/horror.png' },\n { id: 9, name: 'Romance', image: 'assets/movies-genres/romance.png' },\n {\n id: 10,\n name: 'Science fiction',\n image: 'assets/movies-genres/science fiction.png'\n },\n { id: 11, name: 'Westerns', image: 'assets/movies-genres/westerns.png' }\n ];\n\n constructor(\n private formBuilder: FormBuilder,\n private modalCtrl: ModalController,\n public navParams: NavParams,\n private store: Store,\n private renderer: Renderer2,\n private formErrorHandler: FormErrorHandlerService\n ) {\n this.createForm();\n this.formErrorHandler.handleErrors(this.movieForm, this.errorsForm);\n }\n\n createForm() {\n this.movieForm = this.formBuilder.group<MovieForm>({\n id: new FormControl('', { nonNullable: true }),\n title: new FormControl('', {\n nonNullable: true,\n validators: [Validators.required]\n }),\n year: new FormControl(new Date().getFullYear(), {\n nonNullable: true,\n validators: [Validators.required]\n }),\n director: new FormControl('', { nonNullable: true }),\n cast: new FormControl('', { nonNullable: true }),\n genre: new FormControl('Action', { nonNullable: true }),\n notes: new FormControl('', { nonNullable: true }),\n poster: new FormControl('', { nonNullable: true })\n });\n\n this.movieForm$ = this.store.select((state) => state.catalog.movieForm);\n this.movieForm$.subscribe((data) => {\n if (data['model'] !== null && data['status'] === 'PENDING') {\n // Check if the user has added information about a movie but has not inserted it.\n this.movieForm.patchValue(data['model']);\n }\n });\n }\n\n ngOnInit() {\n this.modal = { ...this.navParams.data.modalProps };\n if (this.navParams.data.option === 'edit') {\n this.movieForm.patchValue(this.navParams.data.modalProps.movie);\n }\n }\n\n ngAfterViewInit() {\n const element = this.renderer.selectRootElement('#myInput');\n setTimeout(() => element.focus(), 3000);\n }\n\n dismiss(data?: any) {\n // Using the injected ModalController this page\n // can \"dismiss\" itself and pass back data.\n if (this.navParams.data.option === 'add') {\n this.store.dispatch([\n new UpdateFormValue({\n value: data,\n path: 'catalog.movieForm'\n }),\n new UpdateFormStatus({\n status: 'PENDING',\n path: 'catalog.movieForm'\n })\n ]);\n }\n this.modalCtrl.dismiss(data);\n }\n\n movieFormSubmit() {\n if (this.navParams.data.option === 'add') {\n this.store\n .dispatch(new AddMovie(this.movieForm.value))\n .subscribe(() => this.clearMovieForm());\n } else if (this.navParams.data.option === 'edit') {\n this.store.dispatch(new EditMovie(this.movieForm.value));\n }\n }\n\n clearMovieForm() {\n this.movieForm.reset();\n this.store.dispatch([\n new UpdateFormValue({\n value: <Movie>{},\n path: 'catalog.movieForm'\n }),\n new UpdateFormStatus({\n status: '',\n path: 'catalog.movieForm'\n })\n ]);\n }\n\n takePicture() {\n console.log('takePicture');\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-ionic-ngxs-movies/src/app/modals/show-actors-modal/show.actors.modal.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 9,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 14,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        78,
                        329
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { ModalController, NavParams } from '@ionic/angular';\n\nimport { SearchImageService } from '@services/search-image/search-image-service';\n\nimport { LoaderService } from '@services/loader/loader.service';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)",
                "line": 11,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 11,
                "endColumn": 40
              },
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 13,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 13,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        51,
                        504
                      ],
                      "text": ", OnInit } from '@angular/core';\nimport { ModalController, NavParams } from '@ionic/angular';\n\nimport { SearchImageService } from '@services/search-image/search-image-service';\n\nimport { LoaderService } from '@services/loader/loader.service';\n\n@Component({\n standalone: true,selector: 'app-show-actors-modal',\n templateUrl: 'show.actors.modal.html',\n styleUrls: ['./show.actors.modal.scss'],\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { forkJoin } from 'rxjs';\nimport { Component, ViewEncapsulation, OnInit } from '@angular/core';\nimport { ModalController, NavParams } from '@ionic/angular';\n\nimport { SearchImageService } from '@services/search-image/search-image-service';\n\nimport { LoaderService } from '@services/loader/loader.service';\n\n@Component({\n standalone: true,selector: 'app-show-actors-modal',\n templateUrl: 'show.actors.modal.html',\n styleUrls: ['./show.actors.modal.scss'],\n encapsulation: ViewEncapsulation.None\n})\nexport class ShowActorsModalComponent implements OnInit {\n actors: any = [];\n\n constructor(\n private modalCtrl: ModalController,\n private navParams: NavParams,\n private searchImageService: SearchImageService,\n private loaderService: LoaderService\n ) {\n console.log('ShowActorsModalComponent::constructor | method called');\n }\n\n ngOnInit() {\n console.log('ShowActorsModalComponent::ngOnInit | method called');\n\n this.loaderService.present('Please wait, loading actors...');\n let actors = this.navParams.data.modalProps.actors;\n actors = actors.split(',');\n\n forkJoin(\n actors.map((actor) => {\n // Code to use Google Custom Search Api.\n return this.searchImageService.searchImage(actor);\n })\n ).subscribe((results: any) => {\n if (results.length > 0) {\n results.map((result, index) => {\n this.actors.push({\n name: actors[index],\n image: result['items'][0].image.thumbnailLink\n });\n });\n this.loaderService.dismiss();\n }\n });\n }\n\n dismiss() {\n // Using the injected ModalController this page\n // can \"dismiss\" itself and pass back data.\n this.modalCtrl.dismiss();\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-ionic-ngxs-movies/src/app/modals/show-comments-modal/show.comments.modal.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 4,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 9,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        45,
                        147
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { ModalController, NavParams } from '@ionic/angular';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)",
                "line": 6,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 6,
                "endColumn": 42
              },
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 8,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 8,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        18,
                        328
                      ],
                      "text": ", OnInit } from '@angular/core';\nimport { ModalController, NavParams } from '@ionic/angular';\n\n@Component({\n standalone: true,selector: 'app-show-comments-modal',\n templateUrl: 'show.comments.modal.html',\n styleUrls: ['./show.comments.modal.scss'],\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ViewEncapsulation, OnInit } from '@angular/core';\nimport { ModalController, NavParams } from '@ionic/angular';\n\n@Component({\n standalone: true,selector: 'app-show-comments-modal',\n templateUrl: 'show.comments.modal.html',\n styleUrls: ['./show.comments.modal.scss'],\n encapsulation: ViewEncapsulation.None\n})\nexport class ShowCommentsModalComponent implements OnInit {\n modal: any = {\n title: ''\n };\n\n constructor(\n private modalCtrl: ModalController,\n private navParams: NavParams\n ) {}\n\n ngOnInit() {\n this.modal = { ...this.navParams.data.modalProps };\n }\n\n dismiss() {\n // Using the injected ModalController this page\n // can \"dismiss\" itself and pass back data.\n this.modalCtrl.dismiss();\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-ionic-ngxs-movies/src/app/modals/youtube-modal/youtube.modal.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 11,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 16,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        68,
                        229
                      ],
                      "text": ", ChangeDetectionStrategy\n} from '@angular/core';\nimport { ModalController, NavParams } from '@ionic/angular';\n\nimport { YoutubePlayer } from 'capacitor-youtube-player';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)",
                "line": 13,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 13,
                "endColumn": 36
              },
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 15,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 15,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        20,
                        392
                      ],
                      "text": ",\n OnInit,\n AfterViewInit\n} from '@angular/core';\nimport { ModalController, NavParams } from '@ionic/angular';\n\nimport { YoutubePlayer } from 'capacitor-youtube-player';\n\n@Component({\n standalone: true,selector: 'app-youtube-modal',\n templateUrl: 'youtube.modal.html',\n styleUrls: ['./youtube.modal.scss'],\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n ViewEncapsulation,\n OnInit,\n AfterViewInit\n} from '@angular/core';\nimport { ModalController, NavParams } from '@ionic/angular';\n\nimport { YoutubePlayer } from 'capacitor-youtube-player';\n\n@Component({\n standalone: true,selector: 'app-youtube-modal',\n templateUrl: 'youtube.modal.html',\n styleUrls: ['./youtube.modal.scss'],\n encapsulation: ViewEncapsulation.None\n})\nexport class YoutubeModalComponent implements OnInit, AfterViewInit {\n item: any;\n\n constructor(\n private modalCtrl: ModalController,\n private navParams: NavParams\n ) {\n console.log('YoutubeModalComponent::constructor | method called');\n }\n\n ngOnInit() {\n console.log('YoutubeModalComponent::ngOnInit | method called');\n this.item = this.navParams.data.modalProps.item;\n }\n\n ngAfterViewInit() {\n this.initializeYoutubePlayerPluginWeb();\n }\n\n dismiss() {\n // Using the injected ModalController this page\n // can \"dismiss\" itself and pass back data.\n this.destroyYoutubePlayer();\n this.modalCtrl.dismiss();\n }\n\n async initializeYoutubePlayerPluginWeb() {\n const options = {\n playerId: this.item.id,\n playerSize: { width: 640, height: 360 },\n videoId: this.item.videoId\n };\n const result = await YoutubePlayer.initialize(options);\n console.log('playerReady', result);\n }\n\n async destroyYoutubePlayer() {\n const result = await YoutubePlayer.destroy(this.item.id);\n console.log('destroyYoutubePlayer', result);\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-ionic-ngxs-movies/src/app/pages/detail/detail.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 36,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 41,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        48,
                        1179
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n// Ionic\nimport { ModalController } from '@ionic/angular';\n\n// Rxjs\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n// Third parties\nimport { Store } from '@ngxs/store';\nimport { Capacitor } from '@capacitor/core';\nimport { YoutubePlayer } from 'capacitor-youtube-player';\n\n/* Project */\n\n// State\nimport { LikeMovie, FavoriteMovie } from '@store/actions/movies.actions';\nimport { MovieState } from '@store/state/movies.state';\n\n// Models | Interfaces\nimport { Movie } from '@models/movie.model';\n\n// Components\nimport { YoutubeModalComponent } from '@modals/youtube-modal/youtube.modal';\nimport { CommentModalComponent } from '@modals/comment-modal/comment.modal';\nimport { ShowCommentsModalComponent } from '@modals/show-comments-modal/show.comments.modal';\nimport { ShowActorsModalComponent } from '@modals/show-actors-modal/show.actors.modal';\n\n// Services\nimport { YoutubeApiService } from '@services/youtube-api/youtube-api-service';\nimport { IziToastService } from '@services/izi-toast/izi-toast.service';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 40,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 40,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        29,
                        1328
                      ],
                      "text": " } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n// Ionic\nimport { ModalController } from '@ionic/angular';\n\n// Rxjs\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n// Third parties\nimport { Store } from '@ngxs/store';\nimport { Capacitor } from '@capacitor/core';\nimport { YoutubePlayer } from 'capacitor-youtube-player';\n\n/* Project */\n\n// State\nimport { LikeMovie, FavoriteMovie } from '@store/actions/movies.actions';\nimport { MovieState } from '@store/state/movies.state';\n\n// Models | Interfaces\nimport { Movie } from '@models/movie.model';\n\n// Components\nimport { YoutubeModalComponent } from '@modals/youtube-modal/youtube.modal';\nimport { CommentModalComponent } from '@modals/comment-modal/comment.modal';\nimport { ShowCommentsModalComponent } from '@modals/show-comments-modal/show.comments.modal';\nimport { ShowActorsModalComponent } from '@modals/show-actors-modal/show.actors.modal';\n\n// Services\nimport { YoutubeApiService } from '@services/youtube-api/youtube-api-service';\nimport { IziToastService } from '@services/izi-toast/izi-toast.service';\n\n@Component({\n standalone: true,selector: 'app-page-detail',\n templateUrl: './detail.html',\n styleUrls: ['./detail.scss'],\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// Angular\nimport { Component, ViewEncapsulation } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n// Ionic\nimport { ModalController } from '@ionic/angular';\n\n// Rxjs\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n// Third parties\nimport { Store } from '@ngxs/store';\nimport { Capacitor } from '@capacitor/core';\nimport { YoutubePlayer } from 'capacitor-youtube-player';\n\n/* Project */\n\n// State\nimport { LikeMovie, FavoriteMovie } from '@store/actions/movies.actions';\nimport { MovieState } from '@store/state/movies.state';\n\n// Models | Interfaces\nimport { Movie } from '@models/movie.model';\n\n// Components\nimport { YoutubeModalComponent } from '@modals/youtube-modal/youtube.modal';\nimport { CommentModalComponent } from '@modals/comment-modal/comment.modal';\nimport { ShowCommentsModalComponent } from '@modals/show-comments-modal/show.comments.modal';\nimport { ShowActorsModalComponent } from '@modals/show-actors-modal/show.actors.modal';\n\n// Services\nimport { YoutubeApiService } from '@services/youtube-api/youtube-api-service';\nimport { IziToastService } from '@services/izi-toast/izi-toast.service';\n\n@Component({\n standalone: true,selector: 'app-page-detail',\n templateUrl: './detail.html',\n styleUrls: ['./detail.scss'],\n encapsulation: ViewEncapsulation.None\n})\nexport class DetailComponent {\n currentYear = new Date().getFullYear();\n selectedMovie: Observable<Movie>;\n movie: Movie;\n\n constructor(\n private store: Store,\n private youtubeApiService: YoutubeApiService,\n private modalCtrl: ModalController,\n private activatedRoute: ActivatedRoute,\n private iziToast: IziToastService\n ) {}\n\n ionViewWillEnter() {\n const id = this.activatedRoute.snapshot.paramMap.get('id');\n this.getMovieDetails(id);\n }\n\n getMovieDetails(id: string) {\n this.selectedMovie = this.store\n .select(MovieState.movieById)\n .pipe(map((filterFn) => filterFn(id)));\n this.selectedMovie.subscribe((movie) => {\n this.movie = movie;\n });\n }\n\n watchTrailer() {\n console.log('DetailsPage::watchTrailer | method called');\n\n // Code to use Youtube Api Service: providers/youtube-api-service.ts\n this.youtubeApiService.searchMovieTrailer(this.movie.title).subscribe({\n next: (result) => {\n if (result.items.length > 0) {\n const { videoId } = result.items[0].id;\n this.movie.videoId = videoId;\n\n // Code to use capacitor-youtube-player plugin.\n console.log(\n 'DetailsPage::watchTrailer -> platform: ' + Capacitor.platform\n );\n if (Capacitor.getPlatform() === 'web') {\n const componentProps = { modalProps: { item: this.movie } };\n this.presentModal(componentProps, YoutubeModalComponent);\n } else {\n // Native\n this.testYoutubePlayerPlugin();\n }\n\n /bin /run /sbin if (Capacitor.getPlatform() === 'web') {\n window.open('https://www.youtube.com/watch?v=' + videoId);\n } else { // TODO: Use capacitor-youtube-player plugin.\n window.open('https://www.youtube.com/watch?v=' + videoId, '_blank');\n }\n */\n }\n },\n error: (error) => {\n this.iziToast.show(\n 'Watch Trailer',\n 'Sorry, an error has occurred.',\n 'red',\n 'ico-error',\n 'assets/avatar.png'\n );\n }\n });\n }\n\n async presentModal(componentProps: any, component) {\n console.log(\n 'DetailsPage::presentModal | method called -> movie',\n this.movie\n );\n // const componentProps = { modalProps: { item: this.movie}};\n const modal = await this.modalCtrl.create({\n component: component,\n componentProps: componentProps\n });\n await modal.present();\n\n const { data } = await modal.onWillDismiss();\n if (data) {\n console.log('data', data);\n }\n }\n\n async testYoutubePlayerPlugin() {\n const options = {\n playerSize: { width: 640, height: 360 },\n videoId: this.movie.videoId\n };\n const playerReady = await YoutubePlayer.initialize(options);\n }\n\n onClickLike() {\n console.log('DetailsPage::onClickLike');\n if (typeof this.movie.likes === 'undefined') {\n this.movie.likes = 0;\n }\n this.movie.likes += 1;\n this.store.dispatch(new LikeMovie(this.movie));\n }\n\n onClickComment() {\n console.log('DetailsPage::onClickComment');\n const componentProps = {\n modalProps: { title: 'Comment', movie: this.movie }\n };\n this.presentModal(componentProps, CommentModalComponent);\n }\n\n onClickShowComment() {\n console.log('DetailsPage::onClickShowComment');\n const componentProps = {\n modalProps: { title: 'Comments', movie: this.movie }\n };\n this.presentModal(componentProps, ShowCommentsModalComponent);\n }\n\n onClickFavorite() {\n console.log('DetailsPage::onClickFavorite');\n\n if (typeof localStorage.getItem('@@STATE') !== 'undefined') {\n const state = JSON.parse(localStorage.getItem('@@STATE'));\n const favorites = state.catalog.favorites;\n\n if (typeof favorites !== 'undefined') {\n const condition = (item) => item.title === this.movie.title;\n if (!favorites.some(condition)) {\n this.store.dispatch(new FavoriteMovie(this.movie)).subscribe(() => {\n this.iziToast.success('Favorite movie', 'Favorite Movie added.');\n });\n } else {\n this.iziToast.show(\n 'Favorite movie',\n 'The movie has already been added.',\n 'red',\n 'ico-error',\n 'assets/avatar.png'\n );\n }\n }\n }\n }\n\n onClickShare() {\n console.log('DetailsPage::onClickShare');\n if (navigator['share']) {\n navigator['share']({\n title: 'WebShare API Demo',\n url: 'https://codepen.io/ayoisaiah/pen/YbNazJ'\n })\n .then(() => {\n console.log('Thanks for sharing!');\n })\n .catch(console.error);\n } else {\n // fallback\n }\n }\n\n showActors() {\n console.log('DetailsPage::showActors | method called');\n const componentProps = { modalProps: { actors: this.movie.cast } };\n this.presentModal(componentProps, ShowActorsModalComponent);\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-ionic-ngxs-movies/src/app/pages/home/home.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 40,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 45,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        89,
                        1015
                      ],
                      "text": ", ChangeDetectionStrategy\n} from '@angular/core';\nimport { Router } from '@angular/router';\n\n// Ionic\nimport {\n ModalController,\n PopoverController,\n IonInfiniteScroll,\n IonContent\n} from '@ionic/angular';\n\n// Rx\nimport { Observable } from 'rxjs';\nimport { withLatestFrom } from 'rxjs/operators';\n\n// Third parties\nimport { Store, Select, Actions, ofActionSuccessful } from '@ngxs/store';\n\n// Project\nimport {\n FetchMovies,\n DeleteMovie,\n AddMovie,\n EditMovie\n} from '@store/actions/movies.actions';\nimport { MovieModalComponent } from '@modals/movie-modal/movie.modal';\nimport { FavoritesMoviesModalComponent } from '@modals/favorites-movies-modal/favorites.movies.modal';\nimport { FilterMoviePopoverComponent } from '@popovers/filter-movie.popover';\nimport { Movie } from '@models/movie.model';\nimport { IziToastService } from '@services/izi-toast/izi-toast.service';\nimport { AsyncEvent } from '@models/custom-event.model';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 44,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 44,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        31,
                        1158
                      ],
                      "text": ",\n OnInit,\n ViewChild,\n ElementRef\n} from '@angular/core';\nimport { Router } from '@angular/router';\n\n// Ionic\nimport {\n ModalController,\n PopoverController,\n IonInfiniteScroll,\n IonContent\n} from '@ionic/angular';\n\n// Rx\nimport { Observable } from 'rxjs';\nimport { withLatestFrom } from 'rxjs/operators';\n\n// Third parties\nimport { Store, Select, Actions, ofActionSuccessful } from '@ngxs/store';\n\n// Project\nimport {\n FetchMovies,\n DeleteMovie,\n AddMovie,\n EditMovie\n} from '@store/actions/movies.actions';\nimport { MovieModalComponent } from '@modals/movie-modal/movie.modal';\nimport { FavoritesMoviesModalComponent } from '@modals/favorites-movies-modal/favorites.movies.modal';\nimport { FilterMoviePopoverComponent } from '@popovers/filter-movie.popover';\nimport { Movie } from '@models/movie.model';\nimport { IziToastService } from '@services/izi-toast/izi-toast.service';\nimport { AsyncEvent } from '@models/custom-event.model';\n\n@Component({\n standalone: true,selector: 'app-page-home',\n templateUrl: './home.html',\n styleUrls: ['./home.scss'],\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// Angular\nimport {\n Component,\n ViewEncapsulation,\n OnInit,\n ViewChild,\n ElementRef\n} from '@angular/core';\nimport { Router } from '@angular/router';\n\n// Ionic\nimport {\n ModalController,\n PopoverController,\n IonInfiniteScroll,\n IonContent\n} from '@ionic/angular';\n\n// Rx\nimport { Observable } from 'rxjs';\nimport { withLatestFrom } from 'rxjs/operators';\n\n// Third parties\nimport { Store, Select, Actions, ofActionSuccessful } from '@ngxs/store';\n\n// Project\nimport {\n FetchMovies,\n DeleteMovie,\n AddMovie,\n EditMovie\n} from '@store/actions/movies.actions';\nimport { MovieModalComponent } from '@modals/movie-modal/movie.modal';\nimport { FavoritesMoviesModalComponent } from '@modals/favorites-movies-modal/favorites.movies.modal';\nimport { FilterMoviePopoverComponent } from '@popovers/filter-movie.popover';\nimport { Movie } from '@models/movie.model';\nimport { IziToastService } from '@services/izi-toast/izi-toast.service';\nimport { AsyncEvent } from '@models/custom-event.model';\n\n@Component({\n standalone: true,selector: 'app-page-home',\n templateUrl: './home.html',\n styleUrls: ['./home.scss'],\n encapsulation: ViewEncapsulation.None\n})\nexport class HomeComponent implements OnInit {\n @ViewChild('infiniteScroll', { read: ElementRef, static: true })\n infiniteScroll: IonInfiniteScroll;\n @ViewChild(IonContent, { read: ElementRef, static: true })\n content: IonContent;\n\n // Reads the name of the store from the store class.\n @Select((state) => state.catalog.movies) movies$: Observable<Movie[]>;\n\n currentYear = new Date().getFullYear();\n start: number;\n end: number;\n showScrollTop: Boolean = false;\n showSkeleton: Boolean = true;\n iconView = 'apps';\n\n constructor(\n private store: Store,\n private router: Router,\n private modalCtrl: ModalController,\n private actions$: Actions,\n private popoverCtrl: PopoverController,\n private iziToast: IziToastService\n ) {\n this.start = 0;\n this.end = 20;\n }\n\n ngOnInit() {\n this.fetchMovies(this.start, this.end);\n // Check if we have movies in local storage.\n if (localStorage.getItem('@@STATE') !== 'undefined') {\n const state = JSON.parse(localStorage.getItem('@@STATE'));\n console.log('state', state);\n }\n\n this.actions$.pipe(ofActionSuccessful(AddMovie)).subscribe({\n next: () => {\n this.modalCtrl.dismiss();\n this.iziToast.success('Add movie', 'Movie added successfully.');\n },\n error: (err) =>\n console.log(\n 'HomePage::ngOnInit ofActionSuccessful(AddMovie) | method called -> received error' +\n err\n )\n });\n\n this.actions$.pipe(ofActionSuccessful(EditMovie)).subscribe({\n next: () => {\n this.modalCtrl.dismiss();\n this.iziToast.success('Edit movie', 'Movie updated successfully.');\n },\n error: (err) =>\n console.log(\n 'HomePage::ngOnInit ofActionSuccessful(EditMovie) | method called -> received error' +\n err\n )\n });\n\n this.actions$.pipe(ofActionSuccessful(DeleteMovie)).subscribe({\n next: () => {\n this.iziToast.success('Delete movie', 'Movie deleted successfully.');\n },\n error: (err) =>\n console.log(\n 'HomePage::ngOnInit ofActionSuccessful(DeleteMovie) | method called -> received error' +\n err\n )\n });\n }\n\n fetchMovies(start: number, end: number) {\n console.log('HomePage::fetchMovies | method called', start, end);\n this.store\n .dispatch(new FetchMovies({ start: start, end: end }))\n .pipe(withLatestFrom(this.movies$))\n .subscribe({\n next: ([movies]) => {\n setTimeout(() => {\n this.showSkeleton = false;\n }, 2000);\n },\n error: (err) =>\n console.log(\n 'HomePage::fetchMovies() | method called -> received error' + err\n )\n });\n }\n\n viewMovieDetails(movie: Movie) {\n const movieDetailsURL = `/detail/${movie.id}`;\n this.router.navigate([movieDetailsURL]);\n }\n\n async presentModal(componentProps: any, component) {\n const modal = await this.modalCtrl.create({\n component: component,\n componentProps: componentProps\n });\n await modal.present();\n\n const { data } = await modal.onWillDismiss();\n if (data) {\n console.log('data', data);\n }\n }\n\n addMovie() {\n const componentProps = {\n modalProps: { title: 'Add Movie', buttonText: 'Add Movie' },\n option: 'add'\n };\n this.presentModal(componentProps, MovieModalComponent);\n }\n\n editMovie(movie: Movie) {\n const componentProps = {\n modalProps: {\n title: 'Edit Movie',\n buttonText: 'Edit Movie',\n movie: movie\n },\n option: 'edit'\n };\n this.presentModal(componentProps, MovieModalComponent);\n }\n\n deleteMovie(movie: Movie) {\n this.store.dispatch(new DeleteMovie(movie));\n }\n\n doInfinite(event: Event) {\n const customEvent = event as AsyncEvent;\n setTimeout(() => {\n customEvent.target.complete();\n this.showSkeleton = true;\n this.start = this.end;\n this.end += 20;\n this.showScrollTop = true;\n this.fetchMovies(this.start, this.end);\n }, 500);\n }\n\n async presentPopover(event: MouseEvent) {\n const popover = await this.popoverCtrl.create({\n component: FilterMoviePopoverComponent,\n event: event\n });\n\n await popover.present();\n\n const { data } = await popover.onWillDismiss();\n\n if (data) {\n console.log('data popover.onWillDismiss', data);\n }\n }\n\n scrollToTop() {\n this.content['nativeElement'].scrollToTop();\n }\n\n changeView() {\n console.log('HomePage::changeView() | method called');\n this.iconView = this.iconView === 'apps' ? 'list' : 'apps';\n }\n\n showFavoritesMovies() {\n console.log('HomePage::showFavoritesMovies() | method called');\n const state = JSON.parse(localStorage.getItem('@@STATE'));\n console.log('state', state);\n const componentProps = {\n modalProps: {\n title: 'Favorites Movies',\n favoritesMovies: state.catalog.favorites\n }\n };\n this.presentModal(componentProps, FavoritesMoviesModalComponent);\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-ionic-ngxs-movies/src/app/popovers/filter-movie.popover.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 14,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 19,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        74,
                        403
                      ],
                      "text": ", ChangeDetectionStrategy\n} from '@angular/core';\nimport { PopoverController } from '@ionic/angular';\nimport { Store } from '@ngxs/store';\nimport { Observable, Subscription } from 'rxjs';\nimport { FormBuilder, FormGroup, FormControl } from '@angular/forms';\nimport { FilterMovies, SaveFilterMovies } from '@store/actions/movies.actions';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.io/styleguide#style-05-04)",
                "line": 16,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 16,
                "endColumn": 43
              },
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 18,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 18,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        20,
                        587
                      ],
                      "text": ",\n OnInit,\n OnDestroy,\n NgZone\n} from '@angular/core';\nimport { PopoverController } from '@ionic/angular';\nimport { Store } from '@ngxs/store';\nimport { Observable, Subscription } from 'rxjs';\nimport { FormBuilder, FormGroup, FormControl } from '@angular/forms';\nimport { FilterMovies, SaveFilterMovies } from '@store/actions/movies.actions';\n\n@Component({\n standalone: true,selector: 'app-filter-movie-popover',\n templateUrl: 'filter-movie.popover.html',\n styleUrls: ['./filter-movie.popover.scss'],\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n ViewEncapsulation,\n OnInit,\n OnDestroy,\n NgZone\n} from '@angular/core';\nimport { PopoverController } from '@ionic/angular';\nimport { Store } from '@ngxs/store';\nimport { Observable, Subscription } from 'rxjs';\nimport { FormBuilder, FormGroup, FormControl } from '@angular/forms';\nimport { FilterMovies, SaveFilterMovies } from '@store/actions/movies.actions';\n\n@Component({\n standalone: true,selector: 'app-filter-movie-popover',\n templateUrl: 'filter-movie.popover.html',\n styleUrls: ['./filter-movie.popover.scss'],\n encapsulation: ViewEncapsulation.None\n})\nexport class FilterMoviePopoverComponent implements OnInit, OnDestroy {\n range: any = {\n lower: 1900,\n upper: new Date().getFullYear()\n };\n\n filter$: Observable<any>;\n filterSubscription: Subscription;\n\n filterForm: FormGroup;\n\n customPopoverOptions: any = {\n header: 'Genre',\n subHeader: 'Select movie genre'\n };\n\n genres = [\n { id: 1, name: 'Action', image: 'assets/movies-genres/action.png' },\n { id: 2, name: 'Comedy', image: 'assets/movies-genres/comedy.png' },\n { id: 3, name: 'Crime', image: 'assets/movies-genres/crime.png' },\n {\n id: 4,\n name: 'Documentary',\n image: 'assets/movies-genres/documentary.png'\n },\n { id: 5, name: 'Drama', image: 'assets/movies-genres/drama.png' },\n { id: 6, name: 'Fantasy', image: 'assets/movies-genres/fantasy.png' },\n { id: 7, name: 'Film noir', image: 'assets/movies-genres/film noir.png' },\n { id: 8, name: 'Horror', image: 'assets/movies-genres/horror.png' },\n { id: 9, name: 'Romance', image: 'assets/movies-genres/romance.png' },\n {\n id: 10,\n name: 'Science fiction',\n image: 'assets/movies-genres/science fiction.png'\n },\n { id: 11, name: 'Westerns', image: 'assets/movies-genres/westerns.png' }\n ];\n\n constructor(\n private popoverCtrl: PopoverController,\n private store: Store,\n private zone: NgZone,\n private formBuilder: FormBuilder\n ) {\n this.createForm();\n }\n\n createForm() {\n this.filterForm = this.formBuilder.group({\n rate: new FormControl(''),\n years: new FormControl(''),\n genre: new FormControl('')\n });\n }\n\n ngOnInit() {\n this.filter$ = this.store.select((state) => state.catalog.filter);\n this.filterSubscription = this.filter$.subscribe((filter) => {\n this.filterForm.setValue(filter);\n if (filter.genre === '') {\n this.filterForm.patchValue({ genre: 'Action' });\n }\n });\n }\n\n ngOnDestroy() {\n this.filterSubscription.unsubscribe();\n }\n\n filterMovies() {\n console.log(this.filterForm.value);\n this.store.dispatch([\n new FilterMovies(this.filterForm.value),\n new SaveFilterMovies(this.filterForm.value)\n ]);\n this.popoverCtrl.dismiss();\n }\n\n clearFilterMovies() {\n this.filterForm.patchValue({\n rate: 0,\n years: { lower: 1900, upper: new Date().getFullYear() },\n genre: ''\n });\n this.store.dispatch([\n new FilterMovies(this.filterForm.value),\n new SaveFilterMovies(this.filterForm.value)\n ]);\n this.popoverCtrl.dismiss();\n }\n\n onRatingChange(event) {\n this.filterForm.patchValue({ rate: event.detail });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-ionic-ngxs-movies/src/app/services/movies/movies-service.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 9,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 9,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        353,
                        353
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        353,
                        353
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        353,
                        353
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { timeout, retryWhen, delay } from 'rxjs/operators';\nimport { v4 as uuid } from 'uuid';\nimport { Movie } from '@models/movie.model';\nimport { environment } from '@environments/environment';\n\n@Injectable()\nexport class MoviesService {\n private readonly URL_BASE: string = environment.API_URL_BASE;\n\n constructor(private http: HttpClient) {}\n\n getMovies(start: number, end: number): Observable<Movie[]> {\n return (\n this.http\n // Type-checking the response => .get<Movie[]>\n .get<Movie[]>(\n this.URL_BASE +\n `movies?_start=${start}&_end=${end}&_sort=year,title&_order=desc,asc`\n )\n .pipe(\n retryWhen((error) => error.pipe(delay(500))),\n timeout(5000)\n )\n );\n }\n\n getMovie(title: string): Observable<Movie> {\n return (\n this.http\n // Type-checking the response => .get<Movie>\n .get<Movie>(encodeURI(this.URL_BASE + `movies?title=${title}`))\n .pipe(\n retryWhen((error) => error.pipe(delay(500))),\n timeout(5000)\n )\n );\n }\n\n addMovie(movie: Movie): Observable<Movie> {\n movie['id'] = uuid();\n\n const httpOptions = {\n headers: new HttpHeaders({\n 'Content-Type': 'application/json'\n })\n };\n\n return (\n this.http\n // Type-checking the response => .post<Movie>\n .post<Movie>(encodeURI(this.URL_BASE + `movies/`), movie, httpOptions)\n .pipe(\n retryWhen((error) => error.pipe(delay(500))),\n timeout(5000)\n )\n );\n }\n\n editMovie(movie: Movie): Observable<Movie> {\n const httpOptions = {\n headers: new HttpHeaders({\n 'Content-Type': 'application/json'\n })\n };\n\n return (\n this.http\n // Type-checking the response => .post<Movie>\n .put<Movie>(\n encodeURI(this.URL_BASE + `movies/${movie['id']}`),\n movie,\n httpOptions\n )\n .pipe(\n retryWhen((error) => error.pipe(delay(500))),\n timeout(5000)\n )\n );\n }\n\n deleteMovie(movie: Movie): Observable<Movie> {\n return (\n this.http\n // Type-checking the response => .post<Movie>\n .delete<Movie>(encodeURI(this.URL_BASE + `movies/${movie['id']}`))\n .pipe(\n retryWhen((error) => error.pipe(delay(500))),\n timeout(5000)\n )\n );\n }\n\n filterMovies(filters): Observable<Movie[]> {\n const strFilters = this.checkFilters(filters);\n console.log(\n this.URL_BASE +\n `movies${strFilters}_sort=year,title&_order=desc,asc&_limit=20`\n );\n return (\n this.http\n // Type-checking the response => .get<Movie[]>\n .get<Movie[]>(\n this.URL_BASE +\n `movies${strFilters}_sort=year,title&_order=desc,asc&_limit=20`\n )\n .pipe(\n retryWhen((error) => error.pipe(delay(500))),\n timeout(5000)\n )\n );\n }\n\n checkFilters(filters: any) {\n let strFilters = '';\n strFilters +=\n typeof filters['genre'] !== 'undefined' && filters['genre'] !== ''\n ? `?genre=${filters.genre}&`\n : '?';\n strFilters +=\n typeof filters['years'] !== 'undefined'\n ? `year_gte=${filters.years.lower}&year_lte=${filters.years.upper}&`\n : '';\n strFilters +=\n typeof filters['rate'] !== 'undefined' && filters['rate'] !== 0\n ? `rate=${filters.rate}&`\n : '';\n return strFilters;\n }\n\n searchMovies(queryText: string): Observable<Movie[]> {\n return (\n this.http\n // Type-checking the response => .get<Movie[]>\n .get<Movie[]>(this.URL_BASE + `movies?q=${queryText}&_limit=20`)\n .pipe(\n retryWhen((error) => error.pipe(delay(500))),\n timeout(5000)\n )\n );\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-ionic-ngxs-movies/src/app/services/search-image/search-image-service.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 6,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 6,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        203,
                        203
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        203,
                        203
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        203,
                        203
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { timeout, retryWhen, delay } from 'rxjs/operators';\n\n@Injectable()\nexport class SearchImageService {\n private readonly URL_BASE: string =\n 'https://www.googleapis.com/customsearch/v1';\n private readonly API_KEY: string = 'AIzaSyCPqf8puyl9DyVFPy_KTAARdaBPRpfYHoA';\n private readonly CUSTOM_SEARCH_ENGINE_ID: string =\n '012020920993535583437:nqayyeenfrw';\n\n constructor(private http: HttpClient) {}\n\n searchImage(searchQuery: string): Observable<any> {\n return (\n this.http\n // https://www.googleapis.com/customsearch/v1?q=Mia%20Wasikowska&cx=012020920993535583437:nqayyeenfrw\n // &key=AIzaSyCPqf8puyl9DyVFPy_KTAARdaBPRpfYHoA&searchType=image&alt=json\n .get(\n encodeURI(\n this.URL_BASE +\n `?q=${searchQuery}&cx=${this.CUSTOM_SEARCH_ENGINE_ID}&key=${this.API_KEY}&searchType=image&alt=json`\n )\n )\n .pipe(\n retryWhen((error) => error.pipe(delay(500))),\n timeout(5000)\n )\n );\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-ionic-ngxs-movies/src/app/services/youtube-api/youtube-api-service.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 6,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 6,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        203,
                        203
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        203,
                        203
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        203,
                        203
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { timeout, retryWhen, delay } from 'rxjs/operators';\n\n@Injectable()\nexport class YoutubeApiService {\n private readonly URL_BASE: string =\n 'https://www.googleapis.com/youtube/v3/search';\n private readonly API_KEY: string = 'AIzaSyDxuxEANLFVy5q4sG1NrAUJNhoX6nW4VQ4';\n\n constructor(private http: HttpClient) {}\n\n searchMovieTrailer(movieTitle: string): Observable<any> {\n return this.http\n .get(\n encodeURI(\n this.URL_BASE +\n `?key=${this.API_KEY}&q=${movieTitle}&type=video&part=snippet,id&maxResults=5`\n )\n )\n .pipe(\n retryWhen((error) => error.pipe(delay(500))),\n timeout(5000)\n );\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-ionic-ngxs-movies/src/app/store/state/movies.state.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 67,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 67,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        1404,
                        1404
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        1404,
                        1404
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        1404,
                        1404
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { State, Action, StateContext, Selector, NgxsOnInit } from '@ngxs/store';\nimport { patch, append, removeItem, updateItem } from '@ngxs/store/operators';\nimport { tap, catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport { Movie } from '@models/movie.model';\nimport {\n FetchMovies,\n AddMovie,\n EditMovie,\n DeleteMovie,\n FilterMovies,\n SaveFilterMovies,\n GetMovieTrailer,\n ClearMovies,\n LikeMovie,\n CommentMovie,\n FavoriteMovie,\n DeleteFavoriteMovie,\n DeleteAllFavoritesMovies,\n ClearState\n} from '@store/actions/movies.actions';\n\nimport { MoviesService } from '@services/movies/movies-service';\nimport { YoutubeApiService } from '@services/youtube-api/youtube-api-service';\nimport { Injectable } from '@angular/core';\n\nexport class MoviesStateModel {\n movies: Movie[];\n movieForm: {\n model: Movie;\n dirty: boolean;\n status: string;\n errors: {};\n };\n filter: {\n genre: string;\n years: {\n lower: number;\n upper: number;\n };\n rate: number;\n };\n favorites: Movie[];\n}\n\n@State<MoviesStateModel>({\n name: 'catalog',\n defaults: {\n movies: [],\n movieForm: {\n model: null,\n dirty: false,\n status: '',\n errors: {}\n },\n filter: {\n genre: 'Action',\n years: {\n lower: 1900,\n upper: new Date().getFullYear()\n },\n rate: 0\n },\n favorites: []\n }\n})\n@Injectable()\nexport class MovieState implements NgxsOnInit {\n private readonly GENRES: string[] = [\n 'action',\n 'comedy',\n 'crime',\n 'documentary',\n 'drama',\n 'fantasy',\n 'film noir',\n 'horror',\n 'romance',\n 'science fiction',\n 'westerns',\n 'animation'\n ];\n\n constructor(\n private moviesService: MoviesService,\n private youtubeApiService: YoutubeApiService\n ) {}\n\n @Selector()\n static getMovies(state: MoviesStateModel) {\n return state.movies;\n }\n\n @Selector()\n static movieById(state: MoviesStateModel) {\n return (id: string) => {\n return state.movies.filter((movie) => movie.id === id)[0];\n };\n }\n\n ngxsOnInit(ctx: StateContext<MoviesStateModel>) {\n ctx.dispatch(new ClearState());\n }\n\n @Action(ClearState)\n clearState({ setState }: StateContext<MoviesStateModel>) {\n setState({\n movies: [],\n movieForm: {\n model: null,\n dirty: false,\n status: '',\n errors: {}\n },\n filter: {\n genre: 'Action',\n years: {\n lower: 1900,\n upper: new Date().getFullYear()\n },\n rate: 0\n },\n favorites: []\n });\n }\n\n @Action(FetchMovies, { cancelUncompleted: true })\n fetchMovies(\n { getState, setState }: StateContext<MoviesStateModel>,\n { payload }\n ) {\n const { start, end } = payload;\n return this.moviesService.getMovies(start, end).pipe(\n catchError((x, caught) => {\n return throwError(() => new Error(x));\n }),\n tap({\n next: (movies) => {\n movies.forEach((movie) => {\n const genre = movie.genre.toLowerCase().split(',', 1)[0];\n if (this.GENRES.indexOf(genre) !== -1) {\n movie.genreImage = 'assets/movies-genres/' + genre + '.png';\n }\n });\n const state = getState();\n setState({\n ...state,\n movies: [...state.movies, ...movies]\n });\n },\n error: (error) => {\n console.log('error', error.message);\n }\n })\n );\n }\n\n @Action(AddMovie)\n addMovie({ setState }: StateContext<MoviesStateModel>, { payload }) {\n payload.poster =\n payload.poster === ''\n ? 'https://in.bmscdn.com/iedb/movies/images/website/poster/large/ela-cheppanu-et00016781-24-03-2017-18-31-40.jpg'\n : payload.poster;\n return this.moviesService.addMovie(payload).pipe(\n catchError((x, caught) => {\n return throwError(() => new Error(x));\n }),\n tap({\n next: (result) => {\n setState(\n patch({\n movies: append([result])\n })\n );\n }\n })\n );\n }\n\n @Action(EditMovie)\n editMovie({ setState }: StateContext<MoviesStateModel>, { payload }) {\n return this.moviesService.editMovie(payload).pipe(\n catchError((x, caught) => {\n return throwError(() => new Error(x));\n }),\n tap({\n next: (result) => {\n setState(\n patch({\n movies: updateItem<Movie>(\n (movie) => movie.id === result.id,\n result\n )\n })\n );\n }\n })\n );\n }\n\n @Action(DeleteMovie)\n deleteMovie({ setState }: StateContext<MoviesStateModel>, { payload }) {\n return this.moviesService.deleteMovie(payload).pipe(\n catchError((x, caught) => {\n return throwError(() => new Error(x));\n }),\n tap({\n next: (result) => {\n setState(\n patch({\n movies: removeItem<Movie>((movie) => movie.id === payload.id)\n })\n );\n }\n })\n );\n }\n\n @Action(FilterMovies, { cancelUncompleted: true })\n filterMovies(\n { getState, setState }: StateContext<MoviesStateModel>,\n { payload }\n ) {\n return this.moviesService.filterMovies(payload).pipe(\n catchError((x, caught) => {\n return throwError(() => new Error(x));\n }),\n tap({\n next: (result) => {\n const state = getState();\n setState({\n ...state,\n movies: [...result]\n });\n },\n error: (error) => {\n console.log('error', error.message);\n }\n })\n );\n }\n\n @Action(SaveFilterMovies)\n saveFilterMovies({ setState }: StateContext<MoviesStateModel>, { payload }) {\n setState(\n patch({\n filter: { ...payload }\n })\n );\n }\n\n @Action(GetMovieTrailer, { cancelUncompleted: true })\n getMovieTrailer(\n { getState, setState }: StateContext<MoviesStateModel>,\n { payload }\n ) {\n return this.youtubeApiService.searchMovieTrailer(payload.movieTitle).pipe(\n catchError((x, caught) => {\n return throwError(() => new Error(x));\n }),\n tap({\n next: (result) => {},\n error: (error) => {\n console.log('error', error.message);\n }\n })\n );\n }\n\n @Action(ClearMovies)\n clearMovies({ getState, setState }: StateContext<MoviesStateModel>) {\n const state = getState();\n setState({\n ...state,\n movies: []\n });\n }\n\n @Action(LikeMovie)\n likeMovie({ setState }: StateContext<MoviesStateModel>, { payload }) {\n return this.moviesService.editMovie(payload).pipe(\n catchError((x, caught) => {\n return throwError(() => new Error(x));\n }),\n tap({\n next: (result) => {\n setState(\n patch({\n movies: updateItem<Movie>(\n (movie) => movie.id === result.id,\n result\n )\n })\n );\n },\n error: (error) => {\n console.log('error', error.message);\n }\n })\n );\n }\n\n @Action(CommentMovie)\n commentMovie({ setState }: StateContext<MoviesStateModel>, { payload }) {\n return this.moviesService.editMovie(payload).pipe(\n catchError((x, caught) => {\n return throwError(() => new Error(x));\n }),\n tap({\n next: (result) => {\n setState(\n patch({\n movies: updateItem<Movie>(\n (movie) => movie.id === result.id,\n result\n )\n })\n );\n },\n error: (error) => {\n console.log('error', error.message);\n }\n })\n );\n }\n\n @Action(FavoriteMovie)\n favoriteMovie({ setState }: StateContext<MoviesStateModel>, { payload }) {\n setState(\n patch({\n favorites: append([payload])\n })\n );\n }\n\n @Action(DeleteFavoriteMovie)\n deleteFavoriteMovie(\n { setState }: StateContext<MoviesStateModel>,\n { payload }\n ) {\n setState(\n patch({\n favorites: removeItem<Movie>((movie) => movie.id === payload.id)\n })\n );\n }\n\n @Action(DeleteAllFavoritesMovies)\n deleteAllFavoritesMovies({\n getState,\n setState\n }: StateContext<MoviesStateModel>) {\n const state = getState();\n setState({\n ...state,\n favorites: []\n });\n }\n}\n",
            "usedDeprecatedRules": []
          }
        ]
      }
    }
  },
  "angular-17-crud-example": {
    "repo": {
      "HEAD": {
        "commit": "c0af324c915716b34f61ae10acae98092ec8570a",
        "author": "tienbku",
        "date": "Sun Feb 4 15:39:28 2024 +0700",
        "message": "update references"
      },
      "url": "https://github.com/bezkoder/angular-17-crud-example"
    },
    "before": {
      "angular-17-crud": {
        "recommended": [],
        "all": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-17-crud-example/src/app/app.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 3,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 7,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        59
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\n\n@Component({\n selector: 'app-root',\n templateUrl: './app.component.html',\n styleUrl: './app.component.css'\n})\nexport class AppComponent {\n title = 'Angular 17 Crud example';\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-17-crud-example/src/app/components/add-tutorial/add-tutorial.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 5,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 9,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        182
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { Tutorial } from '../../models/tutorial.model';\nimport { TutorialService } from '../../services/tutorial.service';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/consistent-component-styles",
                "severity": 2,
                "message": "Use `styleUrl` instead of `styleUrls` for a single stylesheet",
                "line": 8,
                "column": 3,
                "nodeType": "Property",
                "messageId": "useStyleUrl",
                "endLine": 8,
                "endColumn": 46,
                "fix": {
                  "range": [
                    262,
                    305
                  ],
                  "text": "styleUrl: './add-tutorial.component.css'"
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\nimport { Tutorial } from '../../models/tutorial.model';\nimport { TutorialService } from '../../services/tutorial.service';\n\n@Component({\n selector: 'app-add-tutorial',\n templateUrl: './add-tutorial.component.html',\n styleUrls: ['./add-tutorial.component.css'],\n})\nexport class AddTutorialComponent {\n tutorial: Tutorial = {\n title: '',\n description: '',\n published: false\n };\n submitted = false;\n\n constructor(private tutorialService: TutorialService) {}\n\n saveTutorial(): void {\n const data = {\n title: this.tutorial.title,\n description: this.tutorial.description\n };\n\n this.tutorialService.create(data).subscribe({\n next: (res) => {\n console.log(res);\n this.submitted = true;\n },\n error: (e) => console.error(e)\n });\n }\n\n newTutorial(): void {\n this.submitted = false;\n this.tutorial = {\n title: '',\n description: '',\n published: false\n };\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-17-crud-example/src/app/components/tutorial-details/tutorial-details.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 6,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 10,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        33,
                        255
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Tutorial } from '../../models/tutorial.model';\nimport { TutorialService } from '../../services/tutorial.service';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/consistent-component-styles",
                "severity": 2,
                "message": "Use `styleUrl` instead of `styleUrls` for a single stylesheet",
                "line": 9,
                "column": 3,
                "nodeType": "Property",
                "messageId": "useStyleUrl",
                "endLine": 9,
                "endColumn": 50,
                "fix": {
                  "range": [
                    343,
                    390
                  ],
                  "text": "styleUrl: './tutorial-details.component.css'"
                }
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 12,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 12,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 14,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 14,
                "endColumn": 11
              }
            ],
            "suppressedMessages": [],
            "errorCount": 4,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import { Component, Input, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Tutorial } from '../../models/tutorial.model';\nimport { TutorialService } from '../../services/tutorial.service';\n\n@Component({\n selector: 'app-tutorial-details',\n templateUrl: './tutorial-details.component.html',\n styleUrls: ['./tutorial-details.component.css'],\n})\nexport class TutorialDetailsComponent implements OnInit {\n @Input() viewMode = false;\n\n @Input() currentTutorial: Tutorial = {\n title: '',\n description: '',\n published: false\n };\n\n message = '';\n\n constructor(\n private tutorialService: TutorialService,\n private route: ActivatedRoute,\n private router: Router\n ) {}\n\n ngOnInit(): void {\n if (!this.viewMode) {\n this.message = '';\n this.getTutorial(this.route.snapshot.params['id']);\n }\n }\n\n getTutorial(id: string): void {\n this.tutorialService.get(id).subscribe({\n next: (data) => {\n this.currentTutorial = data;\n console.log(data);\n },\n error: (e) => console.error(e)\n });\n }\n\n updatePublished(status: boolean): void {\n const data = {\n title: this.currentTutorial.title,\n description: this.currentTutorial.description,\n published: status\n };\n\n this.message = '';\n\n this.tutorialService.update(this.currentTutorial.id, data).subscribe({\n next: (res) => {\n console.log(res);\n this.currentTutorial.published = status;\n this.message = res.message\n ? res.message\n : 'The status was updated successfully!';\n },\n error: (e) => console.error(e)\n });\n }\n\n updateTutorial(): void {\n this.message = '';\n\n this.tutorialService\n .update(this.currentTutorial.id, this.currentTutorial)\n .subscribe({\n next: (res) => {\n console.log(res);\n this.message = res.message\n ? res.message\n : 'This tutorial was updated successfully!';\n },\n error: (e) => console.error(e)\n });\n }\n\n deleteTutorial(): void {\n this.tutorialService.delete(this.currentTutorial.id).subscribe({\n next: (res) => {\n console.log(res);\n this.router.navigate(['/tutorials']);\n },\n error: (e) => console.error(e)\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-17-crud-example/src/app/components/tutorials-list/tutorials-list.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 5,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 9,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        26,
                        190
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { Tutorial } from '../../models/tutorial.model';\nimport { TutorialService } from '../../services/tutorial.service';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/consistent-component-styles",
                "severity": 2,
                "message": "Use `styleUrl` instead of `styleUrls` for a single stylesheet",
                "line": 8,
                "column": 3,
                "nodeType": "Property",
                "messageId": "useStyleUrl",
                "endLine": 8,
                "endColumn": 48,
                "fix": {
                  "range": [
                    274,
                    319
                  ],
                  "text": "styleUrl: './tutorials-list.component.css'"
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import { Component, OnInit } from '@angular/core';\nimport { Tutorial } from '../../models/tutorial.model';\nimport { TutorialService } from '../../services/tutorial.service';\n\n@Component({\n selector: 'app-tutorials-list',\n templateUrl: './tutorials-list.component.html',\n styleUrls: ['./tutorials-list.component.css'],\n})\nexport class TutorialsListComponent implements OnInit {\n tutorials?: Tutorial[];\n currentTutorial: Tutorial = {};\n currentIndex = -1;\n title = '';\n\n constructor(private tutorialService: TutorialService) {}\n\n ngOnInit(): void {\n this.retrieveTutorials();\n }\n\n retrieveTutorials(): void {\n this.tutorialService.getAll().subscribe({\n next: (data) => {\n this.tutorials = data;\n console.log(data);\n },\n error: (e) => console.error(e)\n });\n }\n\n refreshList(): void {\n this.retrieveTutorials();\n this.currentTutorial = {};\n this.currentIndex = -1;\n }\n\n setActiveTutorial(tutorial: Tutorial, index: number): void {\n this.currentTutorial = tutorial;\n this.currentIndex = index;\n }\n\n removeAllTutorials(): void {\n this.tutorialService.deleteAll().subscribe({\n next: (res) => {\n console.log(res);\n this.refreshList();\n },\n error: (e) => console.error(e)\n });\n }\n\n searchTitle(): void {\n this.currentTutorial = {};\n this.currentIndex = -1;\n\n this.tutorialService.findByTitle(this.title).subscribe({\n next: (data) => {\n this.tutorials = data;\n console.log(data);\n },\n error: (e) => console.error(e)\n });\n }\n}\n",
            "usedDeprecatedRules": []
          }
        ]
      }
    },
    "after": {
      "angular-17-crud": {
        "recommended": [],
        "all": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-17-crud-example/src/app/app.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 3,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 7,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        59
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\n\n@Component({\n selector: 'app-root',\n templateUrl: './app.component.html',\n styleUrl: './app.component.css'\n})\nexport class AppComponent {\n title = 'Angular 17 Crud example';\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-17-crud-example/src/app/components/add-tutorial/add-tutorial.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 5,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 9,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        182
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { Tutorial } from '../../models/tutorial.model';\nimport { TutorialService } from '../../services/tutorial.service';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\nimport { Tutorial } from '../../models/tutorial.model';\nimport { TutorialService } from '../../services/tutorial.service';\n\n@Component({\n selector: 'app-add-tutorial',\n templateUrl: './add-tutorial.component.html',\n styleUrl: './add-tutorial.component.css',\n})\nexport class AddTutorialComponent {\n tutorial: Tutorial = {\n title: '',\n description: '',\n published: false\n };\n submitted = false;\n\n constructor(private tutorialService: TutorialService) {}\n\n saveTutorial(): void {\n const data = {\n title: this.tutorial.title,\n description: this.tutorial.description\n };\n\n this.tutorialService.create(data).subscribe({\n next: (res) => {\n console.log(res);\n this.submitted = true;\n },\n error: (e) => console.error(e)\n });\n }\n\n newTutorial(): void {\n this.submitted = false;\n this.tutorial = {\n title: '',\n description: '',\n published: false\n };\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-17-crud-example/src/app/components/tutorial-details/tutorial-details.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 6,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 10,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        33,
                        255
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Tutorial } from '../../models/tutorial.model';\nimport { TutorialService } from '../../services/tutorial.service';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 12,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 12,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 14,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 14,
                "endColumn": 11
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, Input, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Tutorial } from '../../models/tutorial.model';\nimport { TutorialService } from '../../services/tutorial.service';\n\n@Component({\n selector: 'app-tutorial-details',\n templateUrl: './tutorial-details.component.html',\n styleUrl: './tutorial-details.component.css',\n})\nexport class TutorialDetailsComponent implements OnInit {\n @Input() viewMode = false;\n\n @Input() currentTutorial: Tutorial = {\n title: '',\n description: '',\n published: false\n };\n\n message = '';\n\n constructor(\n private tutorialService: TutorialService,\n private route: ActivatedRoute,\n private router: Router\n ) {}\n\n ngOnInit(): void {\n if (!this.viewMode) {\n this.message = '';\n this.getTutorial(this.route.snapshot.params['id']);\n }\n }\n\n getTutorial(id: string): void {\n this.tutorialService.get(id).subscribe({\n next: (data) => {\n this.currentTutorial = data;\n console.log(data);\n },\n error: (e) => console.error(e)\n });\n }\n\n updatePublished(status: boolean): void {\n const data = {\n title: this.currentTutorial.title,\n description: this.currentTutorial.description,\n published: status\n };\n\n this.message = '';\n\n this.tutorialService.update(this.currentTutorial.id, data).subscribe({\n next: (res) => {\n console.log(res);\n this.currentTutorial.published = status;\n this.message = res.message\n ? res.message\n : 'The status was updated successfully!';\n },\n error: (e) => console.error(e)\n });\n }\n\n updateTutorial(): void {\n this.message = '';\n\n this.tutorialService\n .update(this.currentTutorial.id, this.currentTutorial)\n .subscribe({\n next: (res) => {\n console.log(res);\n this.message = res.message\n ? res.message\n : 'This tutorial was updated successfully!';\n },\n error: (e) => console.error(e)\n });\n }\n\n deleteTutorial(): void {\n this.tutorialService.delete(this.currentTutorial.id).subscribe({\n next: (res) => {\n console.log(res);\n this.router.navigate(['/tutorials']);\n },\n error: (e) => console.error(e)\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-17-crud-example/src/app/components/tutorials-list/tutorials-list.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 5,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 9,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        26,
                        190
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { Tutorial } from '../../models/tutorial.model';\nimport { TutorialService } from '../../services/tutorial.service';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, OnInit } from '@angular/core';\nimport { Tutorial } from '../../models/tutorial.model';\nimport { TutorialService } from '../../services/tutorial.service';\n\n@Component({\n selector: 'app-tutorials-list',\n templateUrl: './tutorials-list.component.html',\n styleUrl: './tutorials-list.component.css',\n})\nexport class TutorialsListComponent implements OnInit {\n tutorials?: Tutorial[];\n currentTutorial: Tutorial = {};\n currentIndex = -1;\n title = '';\n\n constructor(private tutorialService: TutorialService) {}\n\n ngOnInit(): void {\n this.retrieveTutorials();\n }\n\n retrieveTutorials(): void {\n this.tutorialService.getAll().subscribe({\n next: (data) => {\n this.tutorials = data;\n console.log(data);\n },\n error: (e) => console.error(e)\n });\n }\n\n refreshList(): void {\n this.retrieveTutorials();\n this.currentTutorial = {};\n this.currentIndex = -1;\n }\n\n setActiveTutorial(tutorial: Tutorial, index: number): void {\n this.currentTutorial = tutorial;\n this.currentIndex = index;\n }\n\n removeAllTutorials(): void {\n this.tutorialService.deleteAll().subscribe({\n next: (res) => {\n console.log(res);\n this.refreshList();\n },\n error: (e) => console.error(e)\n });\n }\n\n searchTitle(): void {\n this.currentTutorial = {};\n this.currentIndex = -1;\n\n this.tutorialService.findByTitle(this.title).subscribe({\n next: (data) => {\n this.tutorials = data;\n console.log(data);\n },\n error: (e) => console.error(e)\n });\n }\n}\n",
            "usedDeprecatedRules": []
          }
        ]
      }
    }
  },
  "angular-basics-project": {
    "repo": {
      "HEAD": {
        "commit": "504cab8f87defbbaf6462988956b8176861ba802",
        "author": "akotech",
        "date": "Sun Oct 24 18:47:33 2021 +0200",
        "message": "update playlist link"
      },
      "url": "https://github.com/ako-tech/angular-basics-project"
    },
    "before": {
      "shopping-cart": {
        "recommended": [],
        "all": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-basics-project/src/app/app.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 3,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 7,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        59
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/consistent-component-styles",
                "severity": 2,
                "message": "Use `styleUrl` instead of `styleUrls` for a single stylesheet",
                "line": 6,
                "column": 3,
                "nodeType": "Property",
                "messageId": "useStyleUrl",
                "endLine": 6,
                "endColumn": 37,
                "fix": {
                  "range": [
                    122,
                    156
                  ],
                  "text": "styleUrl: './app.component.css'"
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\n\n@Component({\n selector: 'app-root',\n templateUrl: './app.component.html',\n styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n title = 'shopping-cart';\n}\n",
            "usedDeprecatedRules": []
          }
        ]
      }
    },
    "after": {
      "shopping-cart": {
        "recommended": [],
        "all": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-basics-project/src/app/app.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 3,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 7,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        59
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\n\n@Component({\n selector: 'app-root',\n templateUrl: './app.component.html',\n styleUrl: './app.component.css'\n})\nexport class AppComponent {\n title = 'shopping-cart';\n}\n",
            "usedDeprecatedRules": []
          }
        ]
      }
    }
  },
  "Angular-Full-Stack": {
    "repo": {
      "HEAD": {
        "commit": "64a8ed9eb474c08896cbc6b436a810739c6a534e",
        "author": "DavideViolante",
        "date": "Wed Jan 22 09:38:49 2025 +0100",
        "message": "chore(deps): upgrade to angular v19"
      },
      "url": "https://github.com/DavideViolante/Angular-Full-Stack"
    },
    "before": {
      "angular2-full-stack": {
        "recommended": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/Angular-Full-Stack/client/app/about/about.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-standalone",
                "severity": 2,
                "message": "Components, Directives and Pipes should not opt out of standalone",
                "line": 7,
                "column": 3,
                "nodeType": "Property",
                "messageId": "preferStandalone",
                "endLine": 7,
                "endColumn": 20,
                "fix": {
                  "range": [
                    166,
                    183
                  ],
                  "text": ""
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\n\n@Component({\n selector: 'app-about',\n templateUrl: './about.component.html',\n styleUrls: ['./about.component.scss'],\n standalone: false\n})\nexport class AboutComponent {\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/Angular-Full-Stack/client/app/account/account.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-standalone",
                "severity": 2,
                "message": "Components, Directives and Pipes should not opt out of standalone",
                "line": 10,
                "column": 3,
                "nodeType": "Property",
                "messageId": "preferStandalone",
                "endLine": 10,
                "endColumn": 20,
                "fix": {
                  "range": [
                    367,
                    384
                  ],
                  "text": ""
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import { Component, OnInit } from '@angular/core';\nimport { ToastComponent } from '../shared/toast/toast.component';\nimport { AuthService } from '../services/auth.service';\nimport { UserService } from '../services/user.service';\nimport { User } from '../shared/models/user.model';\n\n@Component({\n selector: 'app-account',\n templateUrl: './account.component.html',\n standalone: false\n})\nexport class AccountComponent implements OnInit {\n\n user: User = new User();\n isLoading = true;\n\n constructor(private auth: AuthService,\n public toast: ToastComponent,\n private userService: UserService) { }\n\n ngOnInit(): void {\n this.getUser();\n }\n\n getUser(): void {\n this.userService.getUser(this.auth.currentUser).subscribe({\n next: data => this.user = data,\n error: error => console.log(error),\n complete: () => this.isLoading = false\n });\n }\n\n save(user: User): void {\n this.userService.editUser(user).subscribe({\n next: () => {\n this.toast.setMessage('Account settings saved!', 'success');\n this.auth.currentUser = user;\n this.auth.isAdmin = user.role === 'admin';\n },\n error: error => console.log(error)\n });\n }\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/Angular-Full-Stack/client/app/add-cat-form/add-cat-form.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-standalone",
                "severity": 2,
                "message": "Components, Directives and Pipes should not opt out of standalone",
                "line": 11,
                "column": 3,
                "nodeType": "Property",
                "messageId": "preferStandalone",
                "endLine": 11,
                "endColumn": 20,
                "fix": {
                  "range": [
                    467,
                    484
                  ],
                  "text": ""
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import { Component, Input } from '@angular/core';\nimport { UntypedFormGroup, UntypedFormControl, Validators, UntypedFormBuilder } from '@angular/forms';\nimport { CatService } from '../services/cat.service';\nimport { ToastComponent } from '../shared/toast/toast.component';\nimport { Cat } from '../shared/models/cat.model';\n\n@Component({\n selector: 'app-add-cat-form',\n templateUrl: './add-cat-form.component.html',\n styleUrls: ['./add-cat-form.component.scss'],\n standalone: false\n})\n\nexport class AddCatFormComponent {\n @Input() cats: Cat[] = [];\n\n addCatForm: UntypedFormGroup;\n name = new UntypedFormControl('', Validators.required);\n age = new UntypedFormControl('', Validators.required);\n weight = new UntypedFormControl('', Validators.required);\n\n constructor(private catService: CatService,\n private formBuilder: UntypedFormBuilder,\n public toast: ToastComponent) {\n this.addCatForm = this.formBuilder.group({\n name: this.name,\n age: this.age,\n weight: this.weight\n });\n }\n\n addCat(): void {\n this.catService.addCat(this.addCatForm.value).subscribe({\n next: res => {\n this.cats.push(res);\n this.addCatForm.reset();\n this.toast.setMessage('Item added successfully.', 'success');\n },\n error: error => console.log(error)\n });\n }\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/Angular-Full-Stack/client/app/admin/admin.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-standalone",
                "severity": 2,
                "message": "Components, Directives and Pipes should not opt out of standalone",
                "line": 11,
                "column": 3,
                "nodeType": "Property",
                "messageId": "preferStandalone",
                "endLine": 11,
                "endColumn": 20,
                "fix": {
                  "range": [
                    364,
                    381
                  ],
                  "text": ""
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import { Component, OnInit } from '@angular/core';\n\nimport { ToastComponent } from '../shared/toast/toast.component';\nimport { AuthService } from '../services/auth.service';\nimport { UserService } from '../services/user.service';\nimport { User } from '../shared/models/user.model';\n\n@Component({\n selector: 'app-admin',\n templateUrl: './admin.component.html',\n standalone: false\n})\nexport class AdminComponent implements OnInit {\n\n users: User[] = [];\n isLoading = true;\n\n constructor(public auth: AuthService,\n public toast: ToastComponent,\n private userService: UserService) { }\n\n ngOnInit(): void {\n this.getUsers();\n }\n\n getUsers(): void {\n this.userService.getUsers().subscribe({\n next: data => this.users = data,\n error: error => console.log(error),\n complete: () => this.isLoading = false\n });\n }\n\n deleteUser(user: User): void {\n if (window.confirm('Are you sure you want to delete ' + user.username + '?')) {\n this.userService.deleteUser(user).subscribe({\n next: () => this.toast.setMessage('User deleted successfully.', 'success'),\n error: error => console.log(error),\n complete: () => this.getUsers()\n });\n }\n }\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/Angular-Full-Stack/client/app/app.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-standalone",
                "severity": 2,
                "message": "Components, Directives and Pipes should not opt out of standalone",
                "line": 7,
                "column": 3,
                "nodeType": "Property",
                "messageId": "preferStandalone",
                "endLine": 7,
                "endColumn": 20,
                "fix": {
                  "range": [
                    214,
                    231
                  ],
                  "text": ""
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import { AfterViewChecked, ChangeDetectorRef, Component } from '@angular/core';\nimport { AuthService } from './services/auth.service';\n\n@Component({\n selector: 'app-root',\n templateUrl: './app.component.html',\n standalone: false\n})\nexport class AppComponent implements AfterViewChecked {\n\n constructor(public auth: AuthService,\n private changeDetector: ChangeDetectorRef) { }\n\n // This fixes: https://github.com/DavideViolante/Angular-Full-Stack/issues/105\n ngAfterViewChecked(): void {\n this.changeDetector.detectChanges();\n }\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/Angular-Full-Stack/client/app/cats/cats.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-standalone",
                "severity": 2,
                "message": "Components, Directives and Pipes should not opt out of standalone",
                "line": 11,
                "column": 3,
                "nodeType": "Property",
                "messageId": "preferStandalone",
                "endLine": 11,
                "endColumn": 20,
                "fix": {
                  "range": [
                    342,
                    359
                  ],
                  "text": ""
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import { Component, OnInit } from '@angular/core';\n\nimport { CatService } from '../services/cat.service';\nimport { ToastComponent } from '../shared/toast/toast.component';\nimport { Cat } from '../shared/models/cat.model';\n\n@Component({\n selector: 'app-cats',\n templateUrl: './cats.component.html',\n styleUrls: ['./cats.component.scss'],\n standalone: false\n})\nexport class CatsComponent implements OnInit {\n\n cat = new Cat();\n cats: Cat[] = [];\n isLoading = true;\n isEditing = false;\n\n constructor(private catService: CatService,\n public toast: ToastComponent) { }\n\n ngOnInit(): void {\n this.getCats();\n }\n\n getCats(): void {\n this.catService.getCats().subscribe({\n next: data => this.cats = data,\n error: error => console.log(error),\n complete: () => this.isLoading = false\n });\n }\n\n enableEditing(cat: Cat): void {\n this.isEditing = true;\n this.cat = cat;\n }\n\n cancelEditing(): void {\n this.isEditing = false;\n this.cat = new Cat();\n this.toast.setMessage('Item editing cancelled.', 'warning');\n // reload the cats to reset the editing\n this.getCats();\n }\n\n editCat(cat: Cat): void {\n this.catService.editCat(cat).subscribe({\n next: () => {\n this.isEditing = false;\n this.cat = cat;\n this.toast.setMessage('Item edited successfully.', 'success');\n },\n error: error => console.log(error)\n });\n }\n\n deleteCat(cat: Cat): void {\n if (window.confirm('Are you sure you want to permanently delete this item?')) {\n this.catService.deleteCat(cat).subscribe({\n next: () => {\n this.cats = this.cats.filter(elem => elem._id !== cat._id);\n this.toast.setMessage('Item deleted successfully.', 'success');\n },\n error: error => console.log(error)\n });\n }\n }\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/Angular-Full-Stack/client/app/login/login.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-standalone",
                "severity": 2,
                "message": "Components, Directives and Pipes should not opt out of standalone",
                "line": 11,
                "column": 3,
                "nodeType": "Property",
                "messageId": "preferStandalone",
                "endLine": 11,
                "endColumn": 20,
                "fix": {
                  "range": [
                    401,
                    418
                  ],
                  "text": ""
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { UntypedFormBuilder, UntypedFormControl, UntypedFormGroup, Validators } from '@angular/forms';\n\nimport { AuthService } from '../services/auth.service';\nimport { ToastComponent } from '../shared/toast/toast.component';\n\n@Component({\n selector: 'app-login',\n templateUrl: './login.component.html',\n standalone: false\n})\nexport class LoginComponent implements OnInit {\n\n loginForm: UntypedFormGroup;\n email = new UntypedFormControl('', [\n Validators.email,\n Validators.required,\n Validators.minLength(3),\n Validators.maxLength(100)\n ]);\n password = new UntypedFormControl('', [\n Validators.required,\n Validators.minLength(6)\n ]);\n\n constructor(private auth: AuthService,\n private formBuilder: UntypedFormBuilder,\n private router: Router,\n public toast: ToastComponent) {\n this.loginForm = this.formBuilder.group({\n email: this.email,\n password: this.password\n });\n }\n\n ngOnInit(): void {\n if (this.auth.loggedIn) {\n this.router.navigate(['/']);\n }\n }\n\n setClassEmail(): object {\n return { 'has-danger': !this.email.pristine && !this.email.valid };\n }\n\n setClassPassword(): object {\n return { 'has-danger': !this.password.pristine && !this.password.valid };\n }\n\n login(): void {\n this.auth.login(this.loginForm.value);\n }\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/Angular-Full-Stack/client/app/logout/logout.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-standalone",
                "severity": 2,
                "message": "Components, Directives and Pipes should not opt out of standalone",
                "line": 7,
                "column": 3,
                "nodeType": "Property",
                "messageId": "preferStandalone",
                "endLine": 7,
                "endColumn": 20,
                "fix": {
                  "range": [
                    165,
                    182
                  ],
                  "text": ""
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../services/auth.service';\n\n@Component({\n selector: 'app-logout',\n template: '',\n standalone: false\n})\nexport class LogoutComponent implements OnInit {\n\n constructor(private auth: AuthService) { }\n\n ngOnInit(): void {\n this.auth.logout();\n }\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/Angular-Full-Stack/client/app/not-found/not-found.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-standalone",
                "severity": 2,
                "message": "Components, Directives and Pipes should not opt out of standalone",
                "line": 6,
                "column": 3,
                "nodeType": "Property",
                "messageId": "preferStandalone",
                "endLine": 6,
                "endColumn": 20,
                "fix": {
                  "range": [
                    133,
                    150
                  ],
                  "text": ""
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\n\n@Component({\n selector: 'app-not-found',\n templateUrl: './not-found.component.html',\n standalone: false\n})\nexport class NotFoundComponent {\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/Angular-Full-Stack/client/app/register/register.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-standalone",
                "severity": 2,
                "message": "Components, Directives and Pipes should not opt out of standalone",
                "line": 11,
                "column": 3,
                "nodeType": "Property",
                "messageId": "preferStandalone",
                "endLine": 11,
                "endColumn": 20,
                "fix": {
                  "range": [
                    399,
                    416
                  ],
                  "text": ""
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { UntypedFormBuilder, UntypedFormControl, UntypedFormGroup, Validators } from '@angular/forms';\n\nimport { UserService } from '../services/user.service';\nimport { ToastComponent } from '../shared/toast/toast.component';\n\n@Component({\n selector: 'app-register',\n templateUrl: './register.component.html',\n standalone: false\n})\nexport class RegisterComponent {\n\n registerForm: UntypedFormGroup;\n username = new UntypedFormControl('', [\n Validators.required,\n Validators.minLength(2),\n Validators.maxLength(30),\n Validators.pattern('[a-zA-Z0-9_-\\\\s]*')\n ]);\n email = new UntypedFormControl('', [\n Validators.email,\n Validators.required,\n Validators.minLength(3),\n Validators.maxLength(100)\n ]);\n password = new UntypedFormControl('', [\n Validators.required,\n Validators.minLength(6)\n ]);\n role = new UntypedFormControl('', [\n Validators.required\n ]);\n\n constructor(private formBuilder: UntypedFormBuilder,\n private router: Router,\n public toast: ToastComponent,\n private userService: UserService) {\n this.registerForm = this.formBuilder.group({\n username: this.username,\n email: this.email,\n password: this.password,\n role: this.role\n });\n }\n\n setClassUsername(): object {\n return { 'has-danger': !this.username.pristine && !this.username.valid };\n }\n\n setClassEmail(): object {\n return { 'has-danger': !this.email.pristine && !this.email.valid };\n }\n\n setClassPassword(): object {\n return { 'has-danger': !this.password.pristine && !this.password.valid };\n }\n\n register(): void {\n this.userService.register(this.registerForm.value).subscribe({\n next: () => {\n this.toast.setMessage('You successfully registered!', 'success');\n this.router.navigate(['/login']);\n },\n error: () => this.toast.setMessage('Email already exists', 'danger')\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/Angular-Full-Stack/client/app/shared/loading/loading.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-standalone",
                "severity": 2,
                "message": "Components, Directives and Pipes should not opt out of standalone",
                "line": 6,
                "column": 3,
                "nodeType": "Property",
                "messageId": "preferStandalone",
                "endLine": 6,
                "endColumn": 20,
                "fix": {
                  "range": [
                    136,
                    153
                  ],
                  "text": ""
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import { Component, Input } from '@angular/core';\n\n@Component({\n selector: 'app-loading',\n templateUrl: './loading.component.html',\n standalone: false\n})\nexport class LoadingComponent {\n @Input() condition = false;\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/Angular-Full-Stack/client/app/shared/toast/toast.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-standalone",
                "severity": 2,
                "message": "Components, Directives and Pipes should not opt out of standalone",
                "line": 7,
                "column": 3,
                "nodeType": "Property",
                "messageId": "preferStandalone",
                "endLine": 7,
                "endColumn": 20,
                "fix": {
                  "range": [
                    173,
                    190
                  ],
                  "text": ""
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import { Component, Input } from '@angular/core';\n\n@Component({\n selector: 'app-toast',\n templateUrl: './toast.component.html',\n styleUrls: ['./toast.component.scss'],\n standalone: false\n})\nexport class ToastComponent {\n @Input() message = { body: '', type: '' };\n existingTimeout = 0;\n\n setMessage(body: string, type: string, time = 3000): void {\n if (this.existingTimeout) {\n clearTimeout(this.existingTimeout);\n }\n this.message.body = body;\n this.message.type = type;\n this.existingTimeout = window.setTimeout(() => this.message.body = '', time);\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/Angular-Full-Stack/server/models/user.ts",
            "messages": [
              {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "message": "Definition for rule '@typescript-eslint/no-explicit-any' was not found.",
                "line": 10,
                "column": 3,
                "endLine": 10,
                "endColumn": 65,
                "severity": 2,
                "nodeType": null
              },
              {
                "ruleId": "@typescript-eslint/no-this-alias",
                "message": "Definition for rule '@typescript-eslint/no-this-alias' was not found.",
                "line": 23,
                "column": 3,
                "endLine": 23,
                "endColumn": 63,
                "severity": 2,
                "nodeType": null
              },
              {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "message": "Definition for rule '@typescript-eslint/no-explicit-any' was not found.",
                "line": 36,
                "column": 1,
                "endLine": 36,
                "endColumn": 63,
                "severity": 2,
                "nodeType": null
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { compare, genSalt, hash } from 'bcryptjs';\nimport { model, Schema } from 'mongoose';\n\ninterface IUser {\n username: string;\n email: string;\n password: string;\n role: string;\n isModified(password: string): boolean;\n // eslint-disable-next-line @typescript-eslint/no-explicit-any\n comparePassword(password: string, callback: (err: any, isMatch: boolean) => void): boolean;\n}\n\nconst userSchema = new Schema<IUser>({\n email: { type: String, unique: true, lowercase: true, trim: true },\n username: String,\n password: String,\n role: String\n});\n\n// Before saving the user, hash the password\nuserSchema.pre<IUser>('save', function(next): void {\n // eslint-disable-next-line @typescript-eslint/no-this-alias\n const user = this;\n if (!user.isModified('password')) { return next(); }\n genSalt(10, (err, salt) => {\n if (err) { return next(err); }\n hash(user.password, salt, (error, hashedPassword) => {\n if (error) { return next(error); }\n user.password = hashedPassword;\n next();\n });\n });\n});\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nuserSchema.methods.comparePassword = function(candidatePassword: string, callback: any): void {\n compare(candidatePassword, this.password, (err, isMatch) => {\n if (err) { return callback(err); }\n callback(null, isMatch);\n });\n};\n\n// Omit the password when returning a user\nuserSchema.set('toJSON', {\n transform: (doc, ret) => {\n delete ret.password;\n return ret;\n }\n});\n\nconst User = model<IUser>('User', userSchema);\n\nexport type { IUser };\nexport default User;\n",
            "usedDeprecatedRules": []
          }
        ],
        "all": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/Angular-Full-Stack/client/app/about/about.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 3,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 8,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        59
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/consistent-component-styles",
                "severity": 2,
                "message": "Use `styleUrl` instead of `styleUrls` for a single stylesheet",
                "line": 6,
                "column": 3,
                "nodeType": "Property",
                "messageId": "useStyleUrl",
                "endLine": 6,
                "endColumn": 40,
                "fix": {
                  "range": [
                    125,
                    162
                  ],
                  "text": "styleUrl: './about.component.scss'"
                }
              },
              {
                "ruleId": "@angular-eslint/prefer-standalone",
                "severity": 2,
                "message": "Components, Directives and Pipes should not opt out of standalone",
                "line": 7,
                "column": 3,
                "nodeType": "Property",
                "messageId": "preferStandalone",
                "endLine": 7,
                "endColumn": 20,
                "fix": {
                  "range": [
                    166,
                    183
                  ],
                  "text": ""
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 2,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\n\n@Component({\n selector: 'app-about',\n templateUrl: './about.component.html',\n styleUrls: ['./about.component.scss'],\n standalone: false\n})\nexport class AboutComponent {\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/Angular-Full-Stack/client/app/account/account.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 7,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 11,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        26,
                        297
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { ToastComponent } from '../shared/toast/toast.component';\nimport { AuthService } from '../services/auth.service';\nimport { UserService } from '../services/user.service';\nimport { User } from '../shared/models/user.model';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-standalone",
                "severity": 2,
                "message": "Components, Directives and Pipes should not opt out of standalone",
                "line": 10,
                "column": 3,
                "nodeType": "Property",
                "messageId": "preferStandalone",
                "endLine": 10,
                "endColumn": 20,
                "fix": {
                  "range": [
                    367,
                    384
                  ],
                  "text": ""
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import { Component, OnInit } from '@angular/core';\nimport { ToastComponent } from '../shared/toast/toast.component';\nimport { AuthService } from '../services/auth.service';\nimport { UserService } from '../services/user.service';\nimport { User } from '../shared/models/user.model';\n\n@Component({\n selector: 'app-account',\n templateUrl: './account.component.html',\n standalone: false\n})\nexport class AccountComponent implements OnInit {\n\n user: User = new User();\n isLoading = true;\n\n constructor(private auth: AuthService,\n public toast: ToastComponent,\n private userService: UserService) { }\n\n ngOnInit(): void {\n this.getUser();\n }\n\n getUser(): void {\n this.userService.getUser(this.auth.currentUser).subscribe({\n next: data => this.user = data,\n error: error => console.log(error),\n complete: () => this.isLoading = false\n });\n }\n\n save(user: User): void {\n this.userService.editUser(user).subscribe({\n next: () => {\n this.toast.setMessage('Account settings saved!', 'success');\n this.auth.currentUser = user;\n this.auth.isAdmin = user.role === 'admin';\n },\n error: error => console.log(error)\n });\n }\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/Angular-Full-Stack/client/app/add-cat-form/add-cat-form.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 7,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 12,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        25,
                        339
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { UntypedFormGroup, UntypedFormControl, Validators, UntypedFormBuilder } from '@angular/forms';\nimport { CatService } from '../services/cat.service';\nimport { ToastComponent } from '../shared/toast/toast.component';\nimport { Cat } from '../shared/models/cat.model';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/consistent-component-styles",
                "severity": 2,
                "message": "Use `styleUrl` instead of `styleUrls` for a single stylesheet",
                "line": 10,
                "column": 3,
                "nodeType": "Property",
                "messageId": "useStyleUrl",
                "endLine": 10,
                "endColumn": 47,
                "fix": {
                  "range": [
                    419,
                    463
                  ],
                  "text": "styleUrl: './add-cat-form.component.scss'"
                }
              },
              {
                "ruleId": "@angular-eslint/prefer-standalone",
                "severity": 2,
                "message": "Components, Directives and Pipes should not opt out of standalone",
                "line": 11,
                "column": 3,
                "nodeType": "Property",
                "messageId": "preferStandalone",
                "endLine": 11,
                "endColumn": 20,
                "fix": {
                  "range": [
                    467,
                    484
                  ],
                  "text": ""
                }
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 15,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 15,
                "endColumn": 11
              }
            ],
            "suppressedMessages": [],
            "errorCount": 4,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 2,
            "fixableWarningCount": 0,
            "source": "import { Component, Input } from '@angular/core';\nimport { UntypedFormGroup, UntypedFormControl, Validators, UntypedFormBuilder } from '@angular/forms';\nimport { CatService } from '../services/cat.service';\nimport { ToastComponent } from '../shared/toast/toast.component';\nimport { Cat } from '../shared/models/cat.model';\n\n@Component({\n selector: 'app-add-cat-form',\n templateUrl: './add-cat-form.component.html',\n styleUrls: ['./add-cat-form.component.scss'],\n standalone: false\n})\n\nexport class AddCatFormComponent {\n @Input() cats: Cat[] = [];\n\n addCatForm: UntypedFormGroup;\n name = new UntypedFormControl('', Validators.required);\n age = new UntypedFormControl('', Validators.required);\n weight = new UntypedFormControl('', Validators.required);\n\n constructor(private catService: CatService,\n private formBuilder: UntypedFormBuilder,\n public toast: ToastComponent) {\n this.addCatForm = this.formBuilder.group({\n name: this.name,\n age: this.age,\n weight: this.weight\n });\n }\n\n addCat(): void {\n this.catService.addCat(this.addCatForm.value).subscribe({\n next: res => {\n this.cats.push(res);\n this.addCatForm.reset();\n this.toast.setMessage('Item added successfully.', 'success');\n },\n error: error => console.log(error)\n });\n }\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/Angular-Full-Stack/client/app/admin/admin.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 8,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 12,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        26,
                        298
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\n\nimport { ToastComponent } from '../shared/toast/toast.component';\nimport { AuthService } from '../services/auth.service';\nimport { UserService } from '../services/user.service';\nimport { User } from '../shared/models/user.model';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-standalone",
                "severity": 2,
                "message": "Components, Directives and Pipes should not opt out of standalone",
                "line": 11,
                "column": 3,
                "nodeType": "Property",
                "messageId": "preferStandalone",
                "endLine": 11,
                "endColumn": 20,
                "fix": {
                  "range": [
                    364,
                    381
                  ],
                  "text": ""
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import { Component, OnInit } from '@angular/core';\n\nimport { ToastComponent } from '../shared/toast/toast.component';\nimport { AuthService } from '../services/auth.service';\nimport { UserService } from '../services/user.service';\nimport { User } from '../shared/models/user.model';\n\n@Component({\n selector: 'app-admin',\n templateUrl: './admin.component.html',\n standalone: false\n})\nexport class AdminComponent implements OnInit {\n\n users: User[] = [];\n isLoading = true;\n\n constructor(public auth: AuthService,\n public toast: ToastComponent,\n private userService: UserService) { }\n\n ngOnInit(): void {\n this.getUsers();\n }\n\n getUsers(): void {\n this.userService.getUsers().subscribe({\n next: data => this.users = data,\n error: error => console.log(error),\n complete: () => this.isLoading = false\n });\n }\n\n deleteUser(user: User): void {\n if (window.confirm('Are you sure you want to delete ' + user.username + '?')) {\n this.userService.deleteUser(user).subscribe({\n next: () => this.toast.setMessage('User deleted successfully.', 'success'),\n error: error => console.log(error),\n complete: () => this.getUsers()\n });\n }\n }\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/Angular-Full-Stack/client/app/app.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 4,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 8,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        55,
                        151
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { AuthService } from './services/auth.service';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-standalone",
                "severity": 2,
                "message": "Components, Directives and Pipes should not opt out of standalone",
                "line": 7,
                "column": 3,
                "nodeType": "Property",
                "messageId": "preferStandalone",
                "endLine": 7,
                "endColumn": 20,
                "fix": {
                  "range": [
                    214,
                    231
                  ],
                  "text": ""
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import { AfterViewChecked, ChangeDetectorRef, Component } from '@angular/core';\nimport { AuthService } from './services/auth.service';\n\n@Component({\n selector: 'app-root',\n templateUrl: './app.component.html',\n standalone: false\n})\nexport class AppComponent implements AfterViewChecked {\n\n constructor(public auth: AuthService,\n private changeDetector: ChangeDetectorRef) { }\n\n // This fixes: https://github.com/DavideViolante/Angular-Full-Stack/issues/105\n ngAfterViewChecked(): void {\n this.changeDetector.detectChanges();\n }\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/Angular-Full-Stack/client/app/cats/cats.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 7,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 12,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        26,
                        238
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\n\nimport { CatService } from '../services/cat.service';\nimport { ToastComponent } from '../shared/toast/toast.component';\nimport { Cat } from '../shared/models/cat.model';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/consistent-component-styles",
                "severity": 2,
                "message": "Use `styleUrl` instead of `styleUrls` for a single stylesheet",
                "line": 10,
                "column": 3,
                "nodeType": "Property",
                "messageId": "useStyleUrl",
                "endLine": 10,
                "endColumn": 39,
                "fix": {
                  "range": [
                    302,
                    338
                  ],
                  "text": "styleUrl: './cats.component.scss'"
                }
              },
              {
                "ruleId": "@angular-eslint/prefer-standalone",
                "severity": 2,
                "message": "Components, Directives and Pipes should not opt out of standalone",
                "line": 11,
                "column": 3,
                "nodeType": "Property",
                "messageId": "preferStandalone",
                "endLine": 11,
                "endColumn": 20,
                "fix": {
                  "range": [
                    342,
                    359
                  ],
                  "text": ""
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 2,
            "fixableWarningCount": 0,
            "source": "import { Component, OnInit } from '@angular/core';\n\nimport { CatService } from '../services/cat.service';\nimport { ToastComponent } from '../shared/toast/toast.component';\nimport { Cat } from '../shared/models/cat.model';\n\n@Component({\n selector: 'app-cats',\n templateUrl: './cats.component.html',\n styleUrls: ['./cats.component.scss'],\n standalone: false\n})\nexport class CatsComponent implements OnInit {\n\n cat = new Cat();\n cats: Cat[] = [];\n isLoading = true;\n isEditing = false;\n\n constructor(private catService: CatService,\n public toast: ToastComponent) { }\n\n ngOnInit(): void {\n this.getCats();\n }\n\n getCats(): void {\n this.catService.getCats().subscribe({\n next: data => this.cats = data,\n error: error => console.log(error),\n complete: () => this.isLoading = false\n });\n }\n\n enableEditing(cat: Cat): void {\n this.isEditing = true;\n this.cat = cat;\n }\n\n cancelEditing(): void {\n this.isEditing = false;\n this.cat = new Cat();\n this.toast.setMessage('Item editing cancelled.', 'warning');\n // reload the cats to reset the editing\n this.getCats();\n }\n\n editCat(cat: Cat): void {\n this.catService.editCat(cat).subscribe({\n next: () => {\n this.isEditing = false;\n this.cat = cat;\n this.toast.setMessage('Item edited successfully.', 'success');\n },\n error: error => console.log(error)\n });\n }\n\n deleteCat(cat: Cat): void {\n if (window.confirm('Are you sure you want to permanently delete this item?')) {\n this.catService.deleteCat(cat).subscribe({\n next: () => {\n this.cats = this.cats.filter(elem => elem._id !== cat._id);\n this.toast.setMessage('Item deleted successfully.', 'success');\n },\n error: error => console.log(error)\n });\n }\n }\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/Angular-Full-Stack/client/app/login/login.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 8,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 12,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        26,
                        335
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { UntypedFormBuilder, UntypedFormControl, UntypedFormGroup, Validators } from '@angular/forms';\n\nimport { AuthService } from '../services/auth.service';\nimport { ToastComponent } from '../shared/toast/toast.component';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-standalone",
                "severity": 2,
                "message": "Components, Directives and Pipes should not opt out of standalone",
                "line": 11,
                "column": 3,
                "nodeType": "Property",
                "messageId": "preferStandalone",
                "endLine": 11,
                "endColumn": 20,
                "fix": {
                  "range": [
                    401,
                    418
                  ],
                  "text": ""
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { UntypedFormBuilder, UntypedFormControl, UntypedFormGroup, Validators } from '@angular/forms';\n\nimport { AuthService } from '../services/auth.service';\nimport { ToastComponent } from '../shared/toast/toast.component';\n\n@Component({\n selector: 'app-login',\n templateUrl: './login.component.html',\n standalone: false\n})\nexport class LoginComponent implements OnInit {\n\n loginForm: UntypedFormGroup;\n email = new UntypedFormControl('', [\n Validators.email,\n Validators.required,\n Validators.minLength(3),\n Validators.maxLength(100)\n ]);\n password = new UntypedFormControl('', [\n Validators.required,\n Validators.minLength(6)\n ]);\n\n constructor(private auth: AuthService,\n private formBuilder: UntypedFormBuilder,\n private router: Router,\n public toast: ToastComponent) {\n this.loginForm = this.formBuilder.group({\n email: this.email,\n password: this.password\n });\n }\n\n ngOnInit(): void {\n if (this.auth.loggedIn) {\n this.router.navigate(['/']);\n }\n }\n\n setClassEmail(): object {\n return { 'has-danger': !this.email.pristine && !this.email.valid };\n }\n\n setClassPassword(): object {\n return { 'has-danger': !this.password.pristine && !this.password.valid };\n }\n\n login(): void {\n this.auth.login(this.loginForm.value);\n }\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/Angular-Full-Stack/client/app/logout/logout.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 4,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 8,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        26,
                        123
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { AuthService } from '../services/auth.service';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-standalone",
                "severity": 2,
                "message": "Components, Directives and Pipes should not opt out of standalone",
                "line": 7,
                "column": 3,
                "nodeType": "Property",
                "messageId": "preferStandalone",
                "endLine": 7,
                "endColumn": 20,
                "fix": {
                  "range": [
                    165,
                    182
                  ],
                  "text": ""
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../services/auth.service';\n\n@Component({\n selector: 'app-logout',\n template: '',\n standalone: false\n})\nexport class LogoutComponent implements OnInit {\n\n constructor(private auth: AuthService) { }\n\n ngOnInit(): void {\n this.auth.logout();\n }\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/Angular-Full-Stack/client/app/not-found/not-found.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 3,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 7,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        59
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-standalone",
                "severity": 2,
                "message": "Components, Directives and Pipes should not opt out of standalone",
                "line": 6,
                "column": 3,
                "nodeType": "Property",
                "messageId": "preferStandalone",
                "endLine": 6,
                "endColumn": 20,
                "fix": {
                  "range": [
                    133,
                    150
                  ],
                  "text": ""
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\n\n@Component({\n selector: 'app-not-found',\n templateUrl: './not-found.component.html',\n standalone: false\n})\nexport class NotFoundComponent {\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/Angular-Full-Stack/client/app/register/register.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 8,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 12,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        327
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { UntypedFormBuilder, UntypedFormControl, UntypedFormGroup, Validators } from '@angular/forms';\n\nimport { UserService } from '../services/user.service';\nimport { ToastComponent } from '../shared/toast/toast.component';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-standalone",
                "severity": 2,
                "message": "Components, Directives and Pipes should not opt out of standalone",
                "line": 11,
                "column": 3,
                "nodeType": "Property",
                "messageId": "preferStandalone",
                "endLine": 11,
                "endColumn": 20,
                "fix": {
                  "range": [
                    399,
                    416
                  ],
                  "text": ""
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { UntypedFormBuilder, UntypedFormControl, UntypedFormGroup, Validators } from '@angular/forms';\n\nimport { UserService } from '../services/user.service';\nimport { ToastComponent } from '../shared/toast/toast.component';\n\n@Component({\n selector: 'app-register',\n templateUrl: './register.component.html',\n standalone: false\n})\nexport class RegisterComponent {\n\n registerForm: UntypedFormGroup;\n username = new UntypedFormControl('', [\n Validators.required,\n Validators.minLength(2),\n Validators.maxLength(30),\n Validators.pattern('[a-zA-Z0-9_-\\\\s]*')\n ]);\n email = new UntypedFormControl('', [\n Validators.email,\n Validators.required,\n Validators.minLength(3),\n Validators.maxLength(100)\n ]);\n password = new UntypedFormControl('', [\n Validators.required,\n Validators.minLength(6)\n ]);\n role = new UntypedFormControl('', [\n Validators.required\n ]);\n\n constructor(private formBuilder: UntypedFormBuilder,\n private router: Router,\n public toast: ToastComponent,\n private userService: UserService) {\n this.registerForm = this.formBuilder.group({\n username: this.username,\n email: this.email,\n password: this.password,\n role: this.role\n });\n }\n\n setClassUsername(): object {\n return { 'has-danger': !this.username.pristine && !this.username.valid };\n }\n\n setClassEmail(): object {\n return { 'has-danger': !this.email.pristine && !this.email.valid };\n }\n\n setClassPassword(): object {\n return { 'has-danger': !this.password.pristine && !this.password.valid };\n }\n\n register(): void {\n this.userService.register(this.registerForm.value).subscribe({\n next: () => {\n this.toast.setMessage('You successfully registered!', 'success');\n this.router.navigate(['/login']);\n },\n error: () => this.toast.setMessage('Email already exists', 'danger')\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/Angular-Full-Stack/client/app/services/auth-guard-admin.service.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 5,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 5,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        104,
                        104
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        104,
                        104
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        104,
                        104
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Injectable } from '@angular/core';\n\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class AuthGuardAdmin {\n\n constructor(public auth: AuthService) {}\n\n canActivate(): boolean {\n return this.auth.isAdmin;\n }\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/Angular-Full-Stack/client/app/services/auth-guard-login.service.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 5,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 5,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        104,
                        104
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        104,
                        104
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        104,
                        104
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Injectable } from '@angular/core';\n\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class AuthGuardLogin {\n\n constructor(public auth: AuthService) {}\n\n canActivate(): boolean {\n return this.auth.loggedIn;\n }\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/Angular-Full-Stack/client/app/services/auth.service.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 10,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 10,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        320,
                        320
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        320,
                        320
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        320,
                        320
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { JwtHelperService } from '@auth0/angular-jwt';\n\nimport { UserService } from './user.service';\nimport { ToastComponent } from '../shared/toast/toast.component';\nimport { User } from '../shared/models/user.model';\n\n@Injectable()\nexport class AuthService {\n loggedIn = false;\n isAdmin = false;\n\n currentUser: User = new User();\n\n constructor(private userService: UserService,\n private router: Router,\n private jwtHelper: JwtHelperService,\n public toast: ToastComponent) {\n const token = localStorage.getItem('token');\n if (token) {\n const decodedUser = this.decodeUserFromToken(token);\n this.setCurrentUser(decodedUser);\n }\n }\n\n login(emailAndPassword: { email: string; password: string }): void {\n this.userService.login(emailAndPassword).subscribe({\n next: res => {\n localStorage.setItem('token', res.token);\n const decodedUser = this.decodeUserFromToken(res.token);\n this.setCurrentUser(decodedUser);\n this.loggedIn = true;\n this.router.navigate(['/']);\n },\n error: () => this.toast.setMessage('Invalid email or password!', 'danger')\n });\n }\n\n logout(): void {\n localStorage.removeItem('token');\n this.loggedIn = false;\n this.isAdmin = false;\n this.currentUser = new User();\n this.router.navigate(['/']);\n }\n\n decodeUserFromToken(token: string): object {\n return this.jwtHelper.decodeToken(token).user;\n }\n\n setCurrentUser(decodedUser: User): void {\n this.loggedIn = true;\n this.currentUser._id = decodedUser._id;\n this.currentUser.username = decodedUser.username;\n this.currentUser.role = decodedUser.role;\n this.isAdmin = decodedUser.role === 'admin';\n delete decodedUser.role;\n }\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/Angular-Full-Stack/client/app/services/cat.service.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 7,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 7,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        194,
                        194
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        194,
                        194
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        194,
                        194
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { Cat } from '../shared/models/cat.model';\n\n@Injectable()\nexport class CatService {\n\n constructor(private http: HttpClient) { }\n\n getCats(): Observable<Cat[]> {\n return this.http.get<Cat[]>('/api/cats');\n }\n\n countCats(): Observable<number> {\n return this.http.get<number>('/api/cats/count');\n }\n\n addCat(cat: Cat): Observable<Cat> {\n return this.http.post<Cat>('/api/cat', cat);\n }\n\n getCat(cat: Cat): Observable<Cat> {\n return this.http.get<Cat>(`/api/cat/${cat._id}`);\n }\n\n editCat(cat: Cat): Observable<string> {\n return this.http.put(`/api/cat/${cat._id}`, cat, { responseType: 'text' });\n }\n\n deleteCat(cat: Cat): Observable<string> {\n return this.http.delete(`/api/cat/${cat._id}`, { responseType: 'text' });\n }\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/Angular-Full-Stack/client/app/services/user.service.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 7,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 7,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        196,
                        196
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        196,
                        196
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        196,
                        196
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { User } from '../shared/models/user.model';\n\n@Injectable()\nexport class UserService {\n\n constructor(private http: HttpClient) { }\n\n register(user: User): Observable<User> {\n return this.http.post<User>('/api/user', user);\n }\n\n login(credentials: { email: string; password: string }): Observable<{ token: string }> {\n return this.http.post<{ token: string }>('/api/login', credentials);\n }\n\n getUsers(): Observable<User[]> {\n return this.http.get<User[]>('/api/users');\n }\n\n countUsers(): Observable<number> {\n return this.http.get<number>('/api/users/count');\n }\n\n addUser(user: User): Observable<User> {\n return this.http.post<User>('/api/user', user);\n }\n\n getUser(user: User): Observable<User> {\n return this.http.get<User>(`/api/user/${user._id}`);\n }\n\n editUser(user: User): Observable<string> {\n return this.http.put(`/api/user/${user._id}`, user, { responseType: 'text' });\n }\n\n deleteUser(user: User): Observable<string> {\n return this.http.delete(`/api/user/${user._id}`, { responseType: 'text' });\n }\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/Angular-Full-Stack/client/app/shared/loading/loading.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 3,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 7,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        25,
                        66
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-standalone",
                "severity": 2,
                "message": "Components, Directives and Pipes should not opt out of standalone",
                "line": 6,
                "column": 3,
                "nodeType": "Property",
                "messageId": "preferStandalone",
                "endLine": 6,
                "endColumn": 20,
                "fix": {
                  "range": [
                    136,
                    153
                  ],
                  "text": ""
                }
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 9,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 9,
                "endColumn": 11
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import { Component, Input } from '@angular/core';\n\n@Component({\n selector: 'app-loading',\n templateUrl: './loading.component.html',\n standalone: false\n})\nexport class LoadingComponent {\n @Input() condition = false;\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/Angular-Full-Stack/client/app/shared/toast/toast.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 3,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 8,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        25,
                        66
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/consistent-component-styles",
                "severity": 2,
                "message": "Use `styleUrl` instead of `styleUrls` for a single stylesheet",
                "line": 6,
                "column": 3,
                "nodeType": "Property",
                "messageId": "useStyleUrl",
                "endLine": 6,
                "endColumn": 40,
                "fix": {
                  "range": [
                    132,
                    169
                  ],
                  "text": "styleUrl: './toast.component.scss'"
                }
              },
              {
                "ruleId": "@angular-eslint/prefer-standalone",
                "severity": 2,
                "message": "Components, Directives and Pipes should not opt out of standalone",
                "line": 7,
                "column": 3,
                "nodeType": "Property",
                "messageId": "preferStandalone",
                "endLine": 7,
                "endColumn": 20,
                "fix": {
                  "range": [
                    173,
                    190
                  ],
                  "text": ""
                }
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 10,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 10,
                "endColumn": 11
              }
            ],
            "suppressedMessages": [],
            "errorCount": 4,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 2,
            "fixableWarningCount": 0,
            "source": "import { Component, Input } from '@angular/core';\n\n@Component({\n selector: 'app-toast',\n templateUrl: './toast.component.html',\n styleUrls: ['./toast.component.scss'],\n standalone: false\n})\nexport class ToastComponent {\n @Input() message = { body: '', type: '' };\n existingTimeout = 0;\n\n setMessage(body: string, type: string, time = 3000): void {\n if (this.existingTimeout) {\n clearTimeout(this.existingTimeout);\n }\n this.message.body = body;\n this.message.type = type;\n this.existingTimeout = window.setTimeout(() => this.message.body = '', time);\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/Angular-Full-Stack/server/models/user.ts",
            "messages": [
              {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "message": "Definition for rule '@typescript-eslint/no-explicit-any' was not found.",
                "line": 10,
                "column": 3,
                "endLine": 10,
                "endColumn": 65,
                "severity": 2,
                "nodeType": null
              },
              {
                "ruleId": "@typescript-eslint/no-this-alias",
                "message": "Definition for rule '@typescript-eslint/no-this-alias' was not found.",
                "line": 23,
                "column": 3,
                "endLine": 23,
                "endColumn": 63,
                "severity": 2,
                "nodeType": null
              },
              {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "message": "Definition for rule '@typescript-eslint/no-explicit-any' was not found.",
                "line": 36,
                "column": 1,
                "endLine": 36,
                "endColumn": 63,
                "severity": 2,
                "nodeType": null
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { compare, genSalt, hash } from 'bcryptjs';\nimport { model, Schema } from 'mongoose';\n\ninterface IUser {\n username: string;\n email: string;\n password: string;\n role: string;\n isModified(password: string): boolean;\n // eslint-disable-next-line @typescript-eslint/no-explicit-any\n comparePassword(password: string, callback: (err: any, isMatch: boolean) => void): boolean;\n}\n\nconst userSchema = new Schema<IUser>({\n email: { type: String, unique: true, lowercase: true, trim: true },\n username: String,\n password: String,\n role: String\n});\n\n// Before saving the user, hash the password\nuserSchema.pre<IUser>('save', function(next): void {\n // eslint-disable-next-line @typescript-eslint/no-this-alias\n const user = this;\n if (!user.isModified('password')) { return next(); }\n genSalt(10, (err, salt) => {\n if (err) { return next(err); }\n hash(user.password, salt, (error, hashedPassword) => {\n if (error) { return next(error); }\n user.password = hashedPassword;\n next();\n });\n });\n});\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nuserSchema.methods.comparePassword = function(candidatePassword: string, callback: any): void {\n compare(candidatePassword, this.password, (err, isMatch) => {\n if (err) { return callback(err); }\n callback(null, isMatch);\n });\n};\n\n// Omit the password when returning a user\nuserSchema.set('toJSON', {\n transform: (doc, ret) => {\n delete ret.password;\n return ret;\n }\n});\n\nconst User = model<IUser>('User', userSchema);\n\nexport type { IUser };\nexport default User;\n",
            "usedDeprecatedRules": []
          }
        ]
      }
    },
    "after": {
      "angular2-full-stack": {
        "recommended": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/Angular-Full-Stack/server/models/user.ts",
            "messages": [
              {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "message": "Definition for rule '@typescript-eslint/no-explicit-any' was not found.",
                "line": 10,
                "column": 3,
                "endLine": 10,
                "endColumn": 65,
                "severity": 2,
                "nodeType": null
              },
              {
                "ruleId": "@typescript-eslint/no-this-alias",
                "message": "Definition for rule '@typescript-eslint/no-this-alias' was not found.",
                "line": 23,
                "column": 3,
                "endLine": 23,
                "endColumn": 63,
                "severity": 2,
                "nodeType": null
              },
              {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "message": "Definition for rule '@typescript-eslint/no-explicit-any' was not found.",
                "line": 36,
                "column": 1,
                "endLine": 36,
                "endColumn": 63,
                "severity": 2,
                "nodeType": null
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { compare, genSalt, hash } from 'bcryptjs';\nimport { model, Schema } from 'mongoose';\n\ninterface IUser {\n username: string;\n email: string;\n password: string;\n role: string;\n isModified(password: string): boolean;\n // eslint-disable-next-line @typescript-eslint/no-explicit-any\n comparePassword(password: string, callback: (err: any, isMatch: boolean) => void): boolean;\n}\n\nconst userSchema = new Schema<IUser>({\n email: { type: String, unique: true, lowercase: true, trim: true },\n username: String,\n password: String,\n role: String\n});\n\n// Before saving the user, hash the password\nuserSchema.pre<IUser>('save', function(next): void {\n // eslint-disable-next-line @typescript-eslint/no-this-alias\n const user = this;\n if (!user.isModified('password')) { return next(); }\n genSalt(10, (err, salt) => {\n if (err) { return next(err); }\n hash(user.password, salt, (error, hashedPassword) => {\n if (error) { return next(error); }\n user.password = hashedPassword;\n next();\n });\n });\n});\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nuserSchema.methods.comparePassword = function(candidatePassword: string, callback: any): void {\n compare(candidatePassword, this.password, (err, isMatch) => {\n if (err) { return callback(err); }\n callback(null, isMatch);\n });\n};\n\n// Omit the password when returning a user\nuserSchema.set('toJSON', {\n transform: (doc, ret) => {\n delete ret.password;\n return ret;\n }\n});\n\nconst User = model<IUser>('User', userSchema);\n\nexport type { IUser };\nexport default User;\n",
            "usedDeprecatedRules": []
          }
        ],
        "all": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/Angular-Full-Stack/client/app/about/about.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 3,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 8,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        59
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\n\n@Component({\n selector: 'app-about',\n templateUrl: './about.component.html',\n styleUrl: './about.component.scss',\n \n})\nexport class AboutComponent {\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/Angular-Full-Stack/client/app/account/account.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 7,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 11,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        26,
                        297
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { ToastComponent } from '../shared/toast/toast.component';\nimport { AuthService } from '../services/auth.service';\nimport { UserService } from '../services/user.service';\nimport { User } from '../shared/models/user.model';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, OnInit } from '@angular/core';\nimport { ToastComponent } from '../shared/toast/toast.component';\nimport { AuthService } from '../services/auth.service';\nimport { UserService } from '../services/user.service';\nimport { User } from '../shared/models/user.model';\n\n@Component({\n selector: 'app-account',\n templateUrl: './account.component.html',\n \n})\nexport class AccountComponent implements OnInit {\n\n user: User = new User();\n isLoading = true;\n\n constructor(private auth: AuthService,\n public toast: ToastComponent,\n private userService: UserService) { }\n\n ngOnInit(): void {\n this.getUser();\n }\n\n getUser(): void {\n this.userService.getUser(this.auth.currentUser).subscribe({\n next: data => this.user = data,\n error: error => console.log(error),\n complete: () => this.isLoading = false\n });\n }\n\n save(user: User): void {\n this.userService.editUser(user).subscribe({\n next: () => {\n this.toast.setMessage('Account settings saved!', 'success');\n this.auth.currentUser = user;\n this.auth.isAdmin = user.role === 'admin';\n },\n error: error => console.log(error)\n });\n }\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/Angular-Full-Stack/client/app/add-cat-form/add-cat-form.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 7,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 12,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        25,
                        339
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { UntypedFormGroup, UntypedFormControl, Validators, UntypedFormBuilder } from '@angular/forms';\nimport { CatService } from '../services/cat.service';\nimport { ToastComponent } from '../shared/toast/toast.component';\nimport { Cat } from '../shared/models/cat.model';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 15,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 15,
                "endColumn": 11
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, Input } from '@angular/core';\nimport { UntypedFormGroup, UntypedFormControl, Validators, UntypedFormBuilder } from '@angular/forms';\nimport { CatService } from '../services/cat.service';\nimport { ToastComponent } from '../shared/toast/toast.component';\nimport { Cat } from '../shared/models/cat.model';\n\n@Component({\n selector: 'app-add-cat-form',\n templateUrl: './add-cat-form.component.html',\n styleUrl: './add-cat-form.component.scss',\n \n})\n\nexport class AddCatFormComponent {\n @Input() cats: Cat[] = [];\n\n addCatForm: UntypedFormGroup;\n name = new UntypedFormControl('', Validators.required);\n age = new UntypedFormControl('', Validators.required);\n weight = new UntypedFormControl('', Validators.required);\n\n constructor(private catService: CatService,\n private formBuilder: UntypedFormBuilder,\n public toast: ToastComponent) {\n this.addCatForm = this.formBuilder.group({\n name: this.name,\n age: this.age,\n weight: this.weight\n });\n }\n\n addCat(): void {\n this.catService.addCat(this.addCatForm.value).subscribe({\n next: res => {\n this.cats.push(res);\n this.addCatForm.reset();\n this.toast.setMessage('Item added successfully.', 'success');\n },\n error: error => console.log(error)\n });\n }\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/Angular-Full-Stack/client/app/admin/admin.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 8,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 12,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        26,
                        298
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\n\nimport { ToastComponent } from '../shared/toast/toast.component';\nimport { AuthService } from '../services/auth.service';\nimport { UserService } from '../services/user.service';\nimport { User } from '../shared/models/user.model';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, OnInit } from '@angular/core';\n\nimport { ToastComponent } from '../shared/toast/toast.component';\nimport { AuthService } from '../services/auth.service';\nimport { UserService } from '../services/user.service';\nimport { User } from '../shared/models/user.model';\n\n@Component({\n selector: 'app-admin',\n templateUrl: './admin.component.html',\n \n})\nexport class AdminComponent implements OnInit {\n\n users: User[] = [];\n isLoading = true;\n\n constructor(public auth: AuthService,\n public toast: ToastComponent,\n private userService: UserService) { }\n\n ngOnInit(): void {\n this.getUsers();\n }\n\n getUsers(): void {\n this.userService.getUsers().subscribe({\n next: data => this.users = data,\n error: error => console.log(error),\n complete: () => this.isLoading = false\n });\n }\n\n deleteUser(user: User): void {\n if (window.confirm('Are you sure you want to delete ' + user.username + '?')) {\n this.userService.deleteUser(user).subscribe({\n next: () => this.toast.setMessage('User deleted successfully.', 'success'),\n error: error => console.log(error),\n complete: () => this.getUsers()\n });\n }\n }\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/Angular-Full-Stack/client/app/app.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 4,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 8,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        55,
                        151
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { AuthService } from './services/auth.service';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { AfterViewChecked, ChangeDetectorRef, Component } from '@angular/core';\nimport { AuthService } from './services/auth.service';\n\n@Component({\n selector: 'app-root',\n templateUrl: './app.component.html',\n \n})\nexport class AppComponent implements AfterViewChecked {\n\n constructor(public auth: AuthService,\n private changeDetector: ChangeDetectorRef) { }\n\n // This fixes: https://github.com/DavideViolante/Angular-Full-Stack/issues/105\n ngAfterViewChecked(): void {\n this.changeDetector.detectChanges();\n }\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/Angular-Full-Stack/client/app/cats/cats.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 7,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 12,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        26,
                        238
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\n\nimport { CatService } from '../services/cat.service';\nimport { ToastComponent } from '../shared/toast/toast.component';\nimport { Cat } from '../shared/models/cat.model';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, OnInit } from '@angular/core';\n\nimport { CatService } from '../services/cat.service';\nimport { ToastComponent } from '../shared/toast/toast.component';\nimport { Cat } from '../shared/models/cat.model';\n\n@Component({\n selector: 'app-cats',\n templateUrl: './cats.component.html',\n styleUrl: './cats.component.scss',\n \n})\nexport class CatsComponent implements OnInit {\n\n cat = new Cat();\n cats: Cat[] = [];\n isLoading = true;\n isEditing = false;\n\n constructor(private catService: CatService,\n public toast: ToastComponent) { }\n\n ngOnInit(): void {\n this.getCats();\n }\n\n getCats(): void {\n this.catService.getCats().subscribe({\n next: data => this.cats = data,\n error: error => console.log(error),\n complete: () => this.isLoading = false\n });\n }\n\n enableEditing(cat: Cat): void {\n this.isEditing = true;\n this.cat = cat;\n }\n\n cancelEditing(): void {\n this.isEditing = false;\n this.cat = new Cat();\n this.toast.setMessage('Item editing cancelled.', 'warning');\n // reload the cats to reset the editing\n this.getCats();\n }\n\n editCat(cat: Cat): void {\n this.catService.editCat(cat).subscribe({\n next: () => {\n this.isEditing = false;\n this.cat = cat;\n this.toast.setMessage('Item edited successfully.', 'success');\n },\n error: error => console.log(error)\n });\n }\n\n deleteCat(cat: Cat): void {\n if (window.confirm('Are you sure you want to permanently delete this item?')) {\n this.catService.deleteCat(cat).subscribe({\n next: () => {\n this.cats = this.cats.filter(elem => elem._id !== cat._id);\n this.toast.setMessage('Item deleted successfully.', 'success');\n },\n error: error => console.log(error)\n });\n }\n }\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/Angular-Full-Stack/client/app/login/login.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 8,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 12,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        26,
                        335
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { UntypedFormBuilder, UntypedFormControl, UntypedFormGroup, Validators } from '@angular/forms';\n\nimport { AuthService } from '../services/auth.service';\nimport { ToastComponent } from '../shared/toast/toast.component';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { UntypedFormBuilder, UntypedFormControl, UntypedFormGroup, Validators } from '@angular/forms';\n\nimport { AuthService } from '../services/auth.service';\nimport { ToastComponent } from '../shared/toast/toast.component';\n\n@Component({\n selector: 'app-login',\n templateUrl: './login.component.html',\n \n})\nexport class LoginComponent implements OnInit {\n\n loginForm: UntypedFormGroup;\n email = new UntypedFormControl('', [\n Validators.email,\n Validators.required,\n Validators.minLength(3),\n Validators.maxLength(100)\n ]);\n password = new UntypedFormControl('', [\n Validators.required,\n Validators.minLength(6)\n ]);\n\n constructor(private auth: AuthService,\n private formBuilder: UntypedFormBuilder,\n private router: Router,\n public toast: ToastComponent) {\n this.loginForm = this.formBuilder.group({\n email: this.email,\n password: this.password\n });\n }\n\n ngOnInit(): void {\n if (this.auth.loggedIn) {\n this.router.navigate(['/']);\n }\n }\n\n setClassEmail(): object {\n return { 'has-danger': !this.email.pristine && !this.email.valid };\n }\n\n setClassPassword(): object {\n return { 'has-danger': !this.password.pristine && !this.password.valid };\n }\n\n login(): void {\n this.auth.login(this.loginForm.value);\n }\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/Angular-Full-Stack/client/app/logout/logout.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 4,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 8,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        26,
                        123
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { AuthService } from '../services/auth.service';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../services/auth.service';\n\n@Component({\n selector: 'app-logout',\n template: '',\n \n})\nexport class LogoutComponent implements OnInit {\n\n constructor(private auth: AuthService) { }\n\n ngOnInit(): void {\n this.auth.logout();\n }\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/Angular-Full-Stack/client/app/not-found/not-found.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 3,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 7,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        59
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\n\n@Component({\n selector: 'app-not-found',\n templateUrl: './not-found.component.html',\n \n})\nexport class NotFoundComponent {\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/Angular-Full-Stack/client/app/register/register.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 8,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 12,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        327
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { UntypedFormBuilder, UntypedFormControl, UntypedFormGroup, Validators } from '@angular/forms';\n\nimport { UserService } from '../services/user.service';\nimport { ToastComponent } from '../shared/toast/toast.component';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { UntypedFormBuilder, UntypedFormControl, UntypedFormGroup, Validators } from '@angular/forms';\n\nimport { UserService } from '../services/user.service';\nimport { ToastComponent } from '../shared/toast/toast.component';\n\n@Component({\n selector: 'app-register',\n templateUrl: './register.component.html',\n \n})\nexport class RegisterComponent {\n\n registerForm: UntypedFormGroup;\n username = new UntypedFormControl('', [\n Validators.required,\n Validators.minLength(2),\n Validators.maxLength(30),\n Validators.pattern('[a-zA-Z0-9_-\\\\s]*')\n ]);\n email = new UntypedFormControl('', [\n Validators.email,\n Validators.required,\n Validators.minLength(3),\n Validators.maxLength(100)\n ]);\n password = new UntypedFormControl('', [\n Validators.required,\n Validators.minLength(6)\n ]);\n role = new UntypedFormControl('', [\n Validators.required\n ]);\n\n constructor(private formBuilder: UntypedFormBuilder,\n private router: Router,\n public toast: ToastComponent,\n private userService: UserService) {\n this.registerForm = this.formBuilder.group({\n username: this.username,\n email: this.email,\n password: this.password,\n role: this.role\n });\n }\n\n setClassUsername(): object {\n return { 'has-danger': !this.username.pristine && !this.username.valid };\n }\n\n setClassEmail(): object {\n return { 'has-danger': !this.email.pristine && !this.email.valid };\n }\n\n setClassPassword(): object {\n return { 'has-danger': !this.password.pristine && !this.password.valid };\n }\n\n register(): void {\n this.userService.register(this.registerForm.value).subscribe({\n next: () => {\n this.toast.setMessage('You successfully registered!', 'success');\n this.router.navigate(['/login']);\n },\n error: () => this.toast.setMessage('Email already exists', 'danger')\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/Angular-Full-Stack/client/app/services/auth-guard-admin.service.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 5,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 5,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        104,
                        104
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        104,
                        104
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        104,
                        104
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Injectable } from '@angular/core';\n\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class AuthGuardAdmin {\n\n constructor(public auth: AuthService) {}\n\n canActivate(): boolean {\n return this.auth.isAdmin;\n }\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/Angular-Full-Stack/client/app/services/auth-guard-login.service.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 5,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 5,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        104,
                        104
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        104,
                        104
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        104,
                        104
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Injectable } from '@angular/core';\n\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class AuthGuardLogin {\n\n constructor(public auth: AuthService) {}\n\n canActivate(): boolean {\n return this.auth.loggedIn;\n }\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/Angular-Full-Stack/client/app/services/auth.service.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 10,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 10,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        320,
                        320
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        320,
                        320
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        320,
                        320
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { JwtHelperService } from '@auth0/angular-jwt';\n\nimport { UserService } from './user.service';\nimport { ToastComponent } from '../shared/toast/toast.component';\nimport { User } from '../shared/models/user.model';\n\n@Injectable()\nexport class AuthService {\n loggedIn = false;\n isAdmin = false;\n\n currentUser: User = new User();\n\n constructor(private userService: UserService,\n private router: Router,\n private jwtHelper: JwtHelperService,\n public toast: ToastComponent) {\n const token = localStorage.getItem('token');\n if (token) {\n const decodedUser = this.decodeUserFromToken(token);\n this.setCurrentUser(decodedUser);\n }\n }\n\n login(emailAndPassword: { email: string; password: string }): void {\n this.userService.login(emailAndPassword).subscribe({\n next: res => {\n localStorage.setItem('token', res.token);\n const decodedUser = this.decodeUserFromToken(res.token);\n this.setCurrentUser(decodedUser);\n this.loggedIn = true;\n this.router.navigate(['/']);\n },\n error: () => this.toast.setMessage('Invalid email or password!', 'danger')\n });\n }\n\n logout(): void {\n localStorage.removeItem('token');\n this.loggedIn = false;\n this.isAdmin = false;\n this.currentUser = new User();\n this.router.navigate(['/']);\n }\n\n decodeUserFromToken(token: string): object {\n return this.jwtHelper.decodeToken(token).user;\n }\n\n setCurrentUser(decodedUser: User): void {\n this.loggedIn = true;\n this.currentUser._id = decodedUser._id;\n this.currentUser.username = decodedUser.username;\n this.currentUser.role = decodedUser.role;\n this.isAdmin = decodedUser.role === 'admin';\n delete decodedUser.role;\n }\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/Angular-Full-Stack/client/app/services/cat.service.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 7,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 7,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        194,
                        194
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        194,
                        194
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        194,
                        194
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { Cat } from '../shared/models/cat.model';\n\n@Injectable()\nexport class CatService {\n\n constructor(private http: HttpClient) { }\n\n getCats(): Observable<Cat[]> {\n return this.http.get<Cat[]>('/api/cats');\n }\n\n countCats(): Observable<number> {\n return this.http.get<number>('/api/cats/count');\n }\n\n addCat(cat: Cat): Observable<Cat> {\n return this.http.post<Cat>('/api/cat', cat);\n }\n\n getCat(cat: Cat): Observable<Cat> {\n return this.http.get<Cat>(`/api/cat/${cat._id}`);\n }\n\n editCat(cat: Cat): Observable<string> {\n return this.http.put(`/api/cat/${cat._id}`, cat, { responseType: 'text' });\n }\n\n deleteCat(cat: Cat): Observable<string> {\n return this.http.delete(`/api/cat/${cat._id}`, { responseType: 'text' });\n }\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/Angular-Full-Stack/client/app/services/user.service.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 7,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 7,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        196,
                        196
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        196,
                        196
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        196,
                        196
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { User } from '../shared/models/user.model';\n\n@Injectable()\nexport class UserService {\n\n constructor(private http: HttpClient) { }\n\n register(user: User): Observable<User> {\n return this.http.post<User>('/api/user', user);\n }\n\n login(credentials: { email: string; password: string }): Observable<{ token: string }> {\n return this.http.post<{ token: string }>('/api/login', credentials);\n }\n\n getUsers(): Observable<User[]> {\n return this.http.get<User[]>('/api/users');\n }\n\n countUsers(): Observable<number> {\n return this.http.get<number>('/api/users/count');\n }\n\n addUser(user: User): Observable<User> {\n return this.http.post<User>('/api/user', user);\n }\n\n getUser(user: User): Observable<User> {\n return this.http.get<User>(`/api/user/${user._id}`);\n }\n\n editUser(user: User): Observable<string> {\n return this.http.put(`/api/user/${user._id}`, user, { responseType: 'text' });\n }\n\n deleteUser(user: User): Observable<string> {\n return this.http.delete(`/api/user/${user._id}`, { responseType: 'text' });\n }\n\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/Angular-Full-Stack/client/app/shared/loading/loading.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 3,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 7,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        25,
                        66
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 9,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 9,
                "endColumn": 11
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, Input } from '@angular/core';\n\n@Component({\n selector: 'app-loading',\n templateUrl: './loading.component.html',\n \n})\nexport class LoadingComponent {\n @Input() condition = false;\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/Angular-Full-Stack/client/app/shared/toast/toast.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 3,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 8,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        25,
                        66
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 10,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 10,
                "endColumn": 11
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, Input } from '@angular/core';\n\n@Component({\n selector: 'app-toast',\n templateUrl: './toast.component.html',\n styleUrl: './toast.component.scss',\n \n})\nexport class ToastComponent {\n @Input() message = { body: '', type: '' };\n existingTimeout = 0;\n\n setMessage(body: string, type: string, time = 3000): void {\n if (this.existingTimeout) {\n clearTimeout(this.existingTimeout);\n }\n this.message.body = body;\n this.message.type = type;\n this.existingTimeout = window.setTimeout(() => this.message.body = '', time);\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/Angular-Full-Stack/server/models/user.ts",
            "messages": [
              {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "message": "Definition for rule '@typescript-eslint/no-explicit-any' was not found.",
                "line": 10,
                "column": 3,
                "endLine": 10,
                "endColumn": 65,
                "severity": 2,
                "nodeType": null
              },
              {
                "ruleId": "@typescript-eslint/no-this-alias",
                "message": "Definition for rule '@typescript-eslint/no-this-alias' was not found.",
                "line": 23,
                "column": 3,
                "endLine": 23,
                "endColumn": 63,
                "severity": 2,
                "nodeType": null
              },
              {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "message": "Definition for rule '@typescript-eslint/no-explicit-any' was not found.",
                "line": 36,
                "column": 1,
                "endLine": 36,
                "endColumn": 63,
                "severity": 2,
                "nodeType": null
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { compare, genSalt, hash } from 'bcryptjs';\nimport { model, Schema } from 'mongoose';\n\ninterface IUser {\n username: string;\n email: string;\n password: string;\n role: string;\n isModified(password: string): boolean;\n // eslint-disable-next-line @typescript-eslint/no-explicit-any\n comparePassword(password: string, callback: (err: any, isMatch: boolean) => void): boolean;\n}\n\nconst userSchema = new Schema<IUser>({\n email: { type: String, unique: true, lowercase: true, trim: true },\n username: String,\n password: String,\n role: String\n});\n\n// Before saving the user, hash the password\nuserSchema.pre<IUser>('save', function(next): void {\n // eslint-disable-next-line @typescript-eslint/no-this-alias\n const user = this;\n if (!user.isModified('password')) { return next(); }\n genSalt(10, (err, salt) => {\n if (err) { return next(err); }\n hash(user.password, salt, (error, hashedPassword) => {\n if (error) { return next(error); }\n user.password = hashedPassword;\n next();\n });\n });\n});\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nuserSchema.methods.comparePassword = function(candidatePassword: string, callback: any): void {\n compare(candidatePassword, this.password, (err, isMatch) => {\n if (err) { return callback(err); }\n callback(null, isMatch);\n });\n};\n\n// Omit the password when returning a user\nuserSchema.set('toJSON', {\n transform: (doc, ret) => {\n delete ret.password;\n return ret;\n }\n});\n\nconst User = model<IUser>('User', userSchema);\n\nexport type { IUser };\nexport default User;\n",
            "usedDeprecatedRules": []
          }
        ]
      }
    }
  },
  "play-scala-angular-seed": {
    "repo": {
      "HEAD": {
        "commit": "814ab8bc3a2002edcf71952c7aed7eaf635a54b4",
        "author": "Matthias Kurz",
        "date": "Thu Mar 13 23:39:41 2025 +0100",
        "message": "Merge pull request #88 from scala-steward/update/play-filters-helpers-3.0.7"
      },
      "url": "https://github.com/playframework/play-scala-angular-seed"
    },
    "before": {
      "scala-play-angular-seed": {
        "recommended": [],
        "all": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/play-scala-angular-seed/ui/src/app/app.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 5,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 9,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        104
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\n\nimport { AppService } from './app.service';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/consistent-component-styles",
                "severity": 2,
                "message": "Use `styleUrl` instead of `styleUrls` for a single stylesheet",
                "line": 8,
                "column": 3,
                "nodeType": "Property",
                "messageId": "useStyleUrl",
                "endLine": 8,
                "endColumn": 37,
                "fix": {
                  "range": [
                    167,
                    201
                  ],
                  "text": "styleUrl: './app.component.css'"
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\n\nimport { AppService } from './app.service';\n\n@Component({\n selector: 'app-root',\n templateUrl: './app.component.html',\n styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n title: string | undefined;\n postRequestResponse: string | undefined;\n\n constructor(private appService: AppService) {\n this.appService.getWelcomeMessage().subscribe((data: any) => {\n this.title = data.content;\n });\n }\n\n /bin /run /sbin angular.json e2e lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json play-scala-angular-seed.report.json README.md src tsconfig.json tslint.json yarn.lock This method is used to test the post request\n */\n public postData(): void {\n this.appService.sendData().subscribe((data: any) => {\n this.postRequestResponse = data.content;\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/play-scala-angular-seed/ui/src/app/app.service.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 12,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 12,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        264,
                        264
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        264,
                        264
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        264,
                        264
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { map } from 'rxjs/operators';\nimport { Observable } from 'rxjs/index';\n\n/**\n angular.json e2e lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json play-scala-angular-seed.report.json README.md src tsconfig.json tslint.json yarn.lock Class representing application service.\n angular.json package.json package-lock.json play-scala-angular-seed.report.json tsconfig.json tslint.json angular.json e2e lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json play-scala-angular-seed.report.json README.md src tsconfig.json tslint.json yarn.lock @class AppService.\n */\n@Injectable()\nexport class AppService {\n private serviceUrl = '/api/summary';\n private dataPostTestUrl = '/api/postTest';\n\n constructor(private http: HttpClient) {\n }\n\n /bin /run /sbin angular.json e2e lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json play-scala-angular-seed.report.json README.md src tsconfig.json tslint.json yarn.lock Makes a http get request to retrieve the welcome message from the backend service.\n */\n public getWelcomeMessage() {\n return this.http.get(this.serviceUrl).pipe(\n map(response => response)\n );\n }\n\n /bin /run /sbin angular.json e2e lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json play-scala-angular-seed.report.json README.md src tsconfig.json tslint.json yarn.lock Makes a http post request to send some data to backend & get response.\n */\n public sendData(): Observable<any> {\n return this.http.post(this.dataPostTestUrl, {});\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/play-scala-angular-seed/ui/src/app/route-example/route-example.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 6,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 10,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        148
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { map } from 'rxjs/operators';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/consistent-component-styles",
                "severity": 2,
                "message": "Use `styleUrl` instead of `styleUrls` for a single stylesheet",
                "line": 9,
                "column": 3,
                "nodeType": "Property",
                "messageId": "useStyleUrl",
                "endLine": 9,
                "endColumn": 47,
                "fix": {
                  "range": [
                    230,
                    274
                  ],
                  "text": "styleUrl: './route-example.component.css'"
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { map } from 'rxjs/operators';\n\n@Component({\n selector: 'app-route-example',\n templateUrl: './route-example.component.html',\n styleUrls: ['./route-example.component.css']\n})\nexport class RouteExampleComponent {\n public tech: any;\n\n constructor(route: ActivatedRoute) {\n this.tech = route.data.pipe(map(data => data.technology));\n }\n}\n",
            "usedDeprecatedRules": []
          }
        ]
      }
    },
    "after": {
      "scala-play-angular-seed": {
        "recommended": [],
        "all": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/play-scala-angular-seed/ui/src/app/app.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 5,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 9,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        104
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\n\nimport { AppService } from './app.service';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\n\nimport { AppService } from './app.service';\n\n@Component({\n selector: 'app-root',\n templateUrl: './app.component.html',\n styleUrl: './app.component.css'\n})\nexport class AppComponent {\n title: string | undefined;\n postRequestResponse: string | undefined;\n\n constructor(private appService: AppService) {\n this.appService.getWelcomeMessage().subscribe((data: any) => {\n this.title = data.content;\n });\n }\n\n /bin /run /sbin angular.json e2e lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json play-scala-angular-seed.report.json README.md src tsconfig.json tslint.json yarn.lock This method is used to test the post request\n */\n public postData(): void {\n this.appService.sendData().subscribe((data: any) => {\n this.postRequestResponse = data.content;\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/play-scala-angular-seed/ui/src/app/app.service.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 12,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 12,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        264,
                        264
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        264,
                        264
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        264,
                        264
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { map } from 'rxjs/operators';\nimport { Observable } from 'rxjs/index';\n\n/**\n angular.json e2e lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json play-scala-angular-seed.report.json README.md src tsconfig.json tslint.json yarn.lock Class representing application service.\n angular.json package.json package-lock.json play-scala-angular-seed.report.json tsconfig.json tslint.json angular.json e2e lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json play-scala-angular-seed.report.json README.md src tsconfig.json tslint.json yarn.lock @class AppService.\n */\n@Injectable()\nexport class AppService {\n private serviceUrl = '/api/summary';\n private dataPostTestUrl = '/api/postTest';\n\n constructor(private http: HttpClient) {\n }\n\n /bin /run /sbin angular.json e2e lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json play-scala-angular-seed.report.json README.md src tsconfig.json tslint.json yarn.lock Makes a http get request to retrieve the welcome message from the backend service.\n */\n public getWelcomeMessage() {\n return this.http.get(this.serviceUrl).pipe(\n map(response => response)\n );\n }\n\n /bin /run /sbin angular.json e2e lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json play-scala-angular-seed.report.json README.md src tsconfig.json tslint.json yarn.lock Makes a http post request to send some data to backend & get response.\n */\n public sendData(): Observable<any> {\n return this.http.post(this.dataPostTestUrl, {});\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/play-scala-angular-seed/ui/src/app/route-example/route-example.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 6,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 10,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        148
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { map } from 'rxjs/operators';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { map } from 'rxjs/operators';\n\n@Component({\n selector: 'app-route-example',\n templateUrl: './route-example.component.html',\n styleUrl: './route-example.component.css'\n})\nexport class RouteExampleComponent {\n public tech: any;\n\n constructor(route: ActivatedRoute) {\n this.tech = route.data.pipe(map(data => data.technology));\n }\n}\n",
            "usedDeprecatedRules": []
          }
        ]
      }
    }
  },
  "angular-realworld-example-app": {
    "repo": {
      "HEAD": {
        "commit": "2555e2f86dd85f6b9e3a34e720bb46689c8646f8",
        "author": "Gerome Grignon",
        "date": "Mon Dec 9 09:26:42 2024 +0100",
        "message": "remove demo link"
      },
      "url": "https://github.com/gothinkster/angular-realworld-example-app"
    },
    "before": {
      "angular-conduit": {
        "recommended": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/core/auth/if-authenticated.directive.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/directive-selector",
                "severity": 2,
                "message": "The selector should start with one of these prefixes: \"app\" (https://angular.dev/style-guide#style-02-08)",
                "line": 14,
                "column": 13,
                "nodeType": "Literal",
                "messageId": "prefixFailure",
                "endLine": 14,
                "endColumn": 32
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n DestroyRef,\n Directive,\n inject,\n Input,\n OnInit,\n TemplateRef,\n ViewContainerRef,\n} from \"@angular/core\";\nimport { UserService } from \"./services/user.service\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Directive({\n selector: \"[ifAuthenticated]\",\n standalone: true,\n})\nexport class IfAuthenticatedDirective<T> implements OnInit {\n destroyRef = inject(DestroyRef);\n constructor(\n private templateRef: TemplateRef<T>,\n private userService: UserService,\n private viewContainer: ViewContainerRef,\n ) {}\n\n condition: boolean = false;\n hasView = false;\n\n ngOnInit() {\n this.userService.isAuthenticated\n .pipe(takeUntilDestroyed(this.destroyRef))\n .subscribe((isAuthenticated: boolean) => {\n const authRequired = isAuthenticated && this.condition;\n const unauthRequired = !isAuthenticated && !this.condition;\n\n if ((authRequired || unauthRequired) && !this.hasView) {\n this.viewContainer.createEmbeddedView(this.templateRef);\n this.hasView = true;\n } else if (this.hasView) {\n this.viewContainer.clear();\n this.hasView = false;\n }\n });\n }\n\n @Input() set ifAuthenticated(condition: boolean) {\n this.condition = condition;\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/features/article/components/favorite-button.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/no-output-native",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named as standard DOM events",
                "line": 40,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "noOutputNative",
                "endLine": 40,
                "endColumn": 19
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n DestroyRef,\n EventEmitter,\n inject,\n Input,\n Output,\n} from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { EMPTY, switchMap } from \"rxjs\";\nimport { NgClass } from \"@angular/common\";\nimport { ArticlesService } from \"../services/articles.service\";\nimport { UserService } from \"../../../core/auth/services/user.service\";\nimport { Article } from \"../models/article.model\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Component({\n selector: \"app-favorite-button\",\n template: `\n <button\n class=\"btn btn-sm\"\n [ngClass]=\"{\n disabled: isSubmitting,\n 'btn-outline-primary': !article.favorited,\n 'btn-primary': article.favorited\n }\"\n (click)=\"toggleFavorite()\"\n >\n <i class=\"ion-heart\"></i> <ng-content></ng-content>\n </button>\n `,\n imports: [NgClass],\n standalone: true,\n})\nexport class FavoriteButtonComponent {\n destroyRef = inject(DestroyRef);\n isSubmitting = false;\n\n @Input() article!: Article;\n @Output() toggle = new EventEmitter<boolean>();\n\n constructor(\n private readonly articleService: ArticlesService,\n private readonly router: Router,\n private readonly userService: UserService,\n ) {}\n\n toggleFavorite(): void {\n this.isSubmitting = true;\n\n this.userService.isAuthenticated\n .pipe(\n switchMap((authenticated) => {\n if (!authenticated) {\n void this.router.navigate([\"/register\"]);\n return EMPTY;\n }\n\n if (!this.article.favorited) {\n return this.articleService.favorite(this.article.slug);\n } else {\n return this.articleService.unfavorite(this.article.slug);\n }\n }),\n takeUntilDestroyed(this.destroyRef),\n )\n .subscribe({\n next: () => {\n this.isSubmitting = false;\n this.toggle.emit(!this.article.favorited);\n },\n error: () => (this.isSubmitting = false),\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/features/profile/components/follow-button.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/no-output-native",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named as standard DOM events",
                "line": 40,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "noOutputNative",
                "endLine": 40,
                "endColumn": 19
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n DestroyRef,\n EventEmitter,\n inject,\n Input,\n Output,\n} from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { switchMap } from \"rxjs/operators\";\nimport { EMPTY } from \"rxjs\";\nimport { ProfileService } from \"../services/profile.service\";\nimport { UserService } from \"../../../core/auth/services/user.service\";\nimport { Profile } from \"../models/profile.model\";\nimport { NgClass } from \"@angular/common\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Component({\n selector: \"app-follow-button\",\n template: `\n <button\n class=\"btn btn-sm action-btn\"\n [ngClass]=\"{\n disabled: isSubmitting,\n 'btn-outline-secondary': !profile.following,\n 'btn-secondary': profile.following\n }\"\n (click)=\"toggleFollowing()\"\n >\n <i class=\"ion-plus-round\"></i>\n &nbsp;\n {{ profile.following ? \"Unfollow\" : \"Follow\" }} {{ profile.username }}\n </button>\n `,\n imports: [NgClass],\n standalone: true,\n})\nexport class FollowButtonComponent {\n @Input() profile!: Profile;\n @Output() toggle = new EventEmitter<Profile>();\n isSubmitting = false;\n destroyRef = inject(DestroyRef);\n\n constructor(\n private readonly profileService: ProfileService,\n private readonly router: Router,\n private readonly userService: UserService,\n ) {}\n\n toggleFollowing(): void {\n this.isSubmitting = true;\n\n this.userService.isAuthenticated\n .pipe(\n switchMap((isAuthenticated: boolean) => {\n if (!isAuthenticated) {\n void this.router.navigate([\"/login\"]);\n return EMPTY;\n }\n\n if (!this.profile.following) {\n return this.profileService.follow(this.profile.username);\n } else {\n return this.profileService.unfollow(this.profile.username);\n }\n }),\n takeUntilDestroyed(this.destroyRef),\n )\n .subscribe({\n next: (profile) => {\n this.isSubmitting = false;\n this.toggle.emit(profile);\n },\n error: () => (this.isSubmitting = false),\n });\n }\n}\n",
            "usedDeprecatedRules": []
          }
        ],
        "all": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/app.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 6,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 11,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        239
                      ],
                      "text": ", ChangeDetectionStrategy } from \"@angular/core\";\nimport { HeaderComponent } from \"./core/layout/header.component\";\nimport { RouterOutlet } from \"@angular/router\";\nimport { FooterComponent } from \"./core/layout/footer.component\";\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component } from \"@angular/core\";\nimport { HeaderComponent } from \"./core/layout/header.component\";\nimport { RouterOutlet } from \"@angular/router\";\nimport { FooterComponent } from \"./core/layout/footer.component\";\n\n@Component({\n selector: \"app-root\",\n templateUrl: \"./app.component.html\",\n standalone: true,\n imports: [HeaderComponent, RouterOutlet, FooterComponent],\n})\nexport class AppComponent {}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/core/auth/auth.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 21,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 26,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        46,
                        671
                      ],
                      "text": ", ChangeDetectionStrategy } from \"@angular/core\";\nimport {\n Validators,\n FormGroup,\n FormControl,\n ReactiveFormsModule,\n} from \"@angular/forms\";\nimport { ActivatedRoute, Router, RouterLink } from \"@angular/router\";\nimport { NgIf } from \"@angular/common\";\nimport { ListErrorsComponent } from \"../../shared/components/list-errors.component\";\nimport { Errors } from \"../models/errors.model\";\nimport { UserService } from \"./services/user.service\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\ninterface AuthForm {\n email: FormControl<string>;\n password: FormControl<string>;\n username?: FormControl<string>;\n}\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, DestroyRef, inject, OnInit } from \"@angular/core\";\nimport {\n Validators,\n FormGroup,\n FormControl,\n ReactiveFormsModule,\n} from \"@angular/forms\";\nimport { ActivatedRoute, Router, RouterLink } from \"@angular/router\";\nimport { NgIf } from \"@angular/common\";\nimport { ListErrorsComponent } from \"../../shared/components/list-errors.component\";\nimport { Errors } from \"../models/errors.model\";\nimport { UserService } from \"./services/user.service\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\ninterface AuthForm {\n email: FormControl<string>;\n password: FormControl<string>;\n username?: FormControl<string>;\n}\n\n@Component({\n selector: \"app-auth-page\",\n templateUrl: \"./auth.component.html\",\n imports: [RouterLink, NgIf, ListErrorsComponent, ReactiveFormsModule],\n standalone: true,\n})\nexport default class AuthComponent implements OnInit {\n authType = \"\";\n title = \"\";\n errors: Errors = { errors: {} };\n isSubmitting = false;\n authForm: FormGroup<AuthForm>;\n destroyRef = inject(DestroyRef);\n\n constructor(\n private readonly route: ActivatedRoute,\n private readonly router: Router,\n private readonly userService: UserService,\n ) {\n this.authForm = new FormGroup<AuthForm>({\n email: new FormControl(\"\", {\n validators: [Validators.required],\n nonNullable: true,\n }),\n password: new FormControl(\"\", {\n validators: [Validators.required],\n nonNullable: true,\n }),\n });\n }\n\n ngOnInit(): void {\n this.authType = this.route.snapshot.url.at(-1)!.path;\n this.title = this.authType === \"login\" ? \"Sign in\" : \"Sign up\";\n if (this.authType === \"register\") {\n this.authForm.addControl(\n \"username\",\n new FormControl(\"\", {\n validators: [Validators.required],\n nonNullable: true,\n }),\n );\n }\n }\n\n submitForm(): void {\n this.isSubmitting = true;\n this.errors = { errors: {} };\n\n let observable =\n this.authType === \"login\"\n ? this.userService.login(\n this.authForm.value as { email: string; password: string },\n )\n : this.userService.register(\n this.authForm.value as {\n email: string;\n password: string;\n username: string;\n },\n );\n\n observable.pipe(takeUntilDestroyed(this.destroyRef)).subscribe({\n next: () => void this.router.navigate([\"/\"]),\n error: (err) => {\n this.errors = err;\n this.isSubmitting = false;\n },\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/core/auth/if-authenticated.directive.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/directive-selector",
                "severity": 2,
                "message": "The selector should start with one of these prefixes: \"app\" (https://angular.dev/style-guide#style-02-08)",
                "line": 14,
                "column": 13,
                "nodeType": "Literal",
                "messageId": "prefixFailure",
                "endLine": 14,
                "endColumn": 32
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 45,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 45,
                "endColumn": 11
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n DestroyRef,\n Directive,\n inject,\n Input,\n OnInit,\n TemplateRef,\n ViewContainerRef,\n} from \"@angular/core\";\nimport { UserService } from \"./services/user.service\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Directive({\n selector: \"[ifAuthenticated]\",\n standalone: true,\n})\nexport class IfAuthenticatedDirective<T> implements OnInit {\n destroyRef = inject(DestroyRef);\n constructor(\n private templateRef: TemplateRef<T>,\n private userService: UserService,\n private viewContainer: ViewContainerRef,\n ) {}\n\n condition: boolean = false;\n hasView = false;\n\n ngOnInit() {\n this.userService.isAuthenticated\n .pipe(takeUntilDestroyed(this.destroyRef))\n .subscribe((isAuthenticated: boolean) => {\n const authRequired = isAuthenticated && this.condition;\n const unauthRequired = !isAuthenticated && !this.condition;\n\n if ((authRequired || unauthRequired) && !this.hasView) {\n this.viewContainer.createEmbeddedView(this.templateRef);\n this.hasView = true;\n } else if (this.hasView) {\n this.viewContainer.clear();\n this.hasView = false;\n }\n });\n }\n\n @Input() set ifAuthenticated(condition: boolean) {\n this.condition = condition;\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/core/layout/header.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 7,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 18,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        26,
                        322
                      ],
                      "text": ", ChangeDetectionStrategy } from \"@angular/core\";\nimport { UserService } from \"../auth/services/user.service\";\nimport { RouterLink, RouterLinkActive } from \"@angular/router\";\nimport { AsyncPipe, NgIf } from \"@angular/common\";\nimport { IfAuthenticatedDirective } from \"../auth/if-authenticated.directive\";\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, inject } from \"@angular/core\";\nimport { UserService } from \"../auth/services/user.service\";\nimport { RouterLink, RouterLinkActive } from \"@angular/router\";\nimport { AsyncPipe, NgIf } from \"@angular/common\";\nimport { IfAuthenticatedDirective } from \"../auth/if-authenticated.directive\";\n\n@Component({\n selector: \"app-layout-header\",\n templateUrl: \"./header.component.html\",\n imports: [\n RouterLinkActive,\n RouterLink,\n AsyncPipe,\n NgIf,\n IfAuthenticatedDirective,\n ],\n standalone: true,\n})\nexport class HeaderComponent {\n currentUser$ = inject(UserService).currentUser;\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/features/article/components/article-comment.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 9,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 47,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        55,
                        418
                      ],
                      "text": ", ChangeDetectionStrategy } from \"@angular/core\";\nimport { UserService } from \"../../../core/auth/services/user.service\";\nimport { User } from \"../../../core/auth/user.model\";\nimport { RouterLink } from \"@angular/router\";\nimport { map } from \"rxjs/operators\";\nimport { Comment } from \"../models/comment.model\";\nimport { AsyncPipe, DatePipe, NgIf } from \"@angular/common\";\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (32). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 11,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 44,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 49,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 49,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 50,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 50,
                "endColumn": 19,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        1568,
                        1568
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 4,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, EventEmitter, Input, Output, inject } from \"@angular/core\";\nimport { UserService } from \"../../../core/auth/services/user.service\";\nimport { User } from \"../../../core/auth/user.model\";\nimport { RouterLink } from \"@angular/router\";\nimport { map } from \"rxjs/operators\";\nimport { Comment } from \"../models/comment.model\";\nimport { AsyncPipe, DatePipe, NgIf } from \"@angular/common\";\n\n@Component({\n selector: \"app-article-comment\",\n template: `\n @if (comment) {\n <div class=\"card\">\n <div class=\"card-block\">\n <p class=\"card-text\">\n {{ comment.body }}\n </p>\n </div>\n <div class=\"card-footer\">\n <a\n class=\"comment-author\"\n [routerLink]=\"['/profile', comment.author.username]\"\n >\n <img [src]=\"comment.author.image\" class=\"comment-author-img\" />\n </a>\n &nbsp;\n <a\n class=\"comment-author\"\n [routerLink]=\"['/profile', comment.author.username]\"\n >\n {{ comment.author.username }}\n </a>\n <span class=\"date-posted\">\n {{ comment.createdAt | date: \"longDate\" }}\n </span>\n @if (canModify$ | async) {\n <span class=\"mod-options\">\n <i class=\"ion-trash-a\" (click)=\"delete.emit(true)\"></i>\n </span>\n }\n </div>\n </div>\n }\n `,\n imports: [RouterLink, DatePipe, NgIf, AsyncPipe],\n standalone: true,\n})\nexport class ArticleCommentComponent {\n @Input() comment!: Comment;\n @Output() delete = new EventEmitter<boolean>();\n\n canModify$ = inject(UserService).currentUser.pipe(\n map(\n (userData: User | null) =>\n userData?.username === this.comment.author.username,\n ),\n );\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/features/article/components/article-list.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 10,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 47,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        45,
                        541
                      ],
                      "text": ", ChangeDetectionStrategy } from \"@angular/core\";\nimport { ArticlesService } from \"../services/articles.service\";\nimport { ArticleListConfig } from \"../models/article-list-config.model\";\nimport { Article } from \"../models/article.model\";\nimport { ArticlePreviewComponent } from \"./article-preview.component\";\nimport { NgClass, NgForOf, NgIf } from \"@angular/common\";\nimport { LoadingState } from \"../../../core/models/loading-state.model\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (26). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 12,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 39,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 57,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 57,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 58,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 58,
                "endColumn": 11
              }
            ],
            "suppressedMessages": [],
            "errorCount": 4,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, DestroyRef, inject, Input } from \"@angular/core\";\nimport { ArticlesService } from \"../services/articles.service\";\nimport { ArticleListConfig } from \"../models/article-list-config.model\";\nimport { Article } from \"../models/article.model\";\nimport { ArticlePreviewComponent } from \"./article-preview.component\";\nimport { NgClass, NgForOf, NgIf } from \"@angular/common\";\nimport { LoadingState } from \"../../../core/models/loading-state.model\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Component({\n selector: \"app-article-list\",\n template: `\n @if (loading === LoadingState.LOADING) {\n <div class=\"article-preview\">Loading articles...</div>\n }\n\n @if (loading === LoadingState.LOADED) {\n @for (article of results; track article.slug) {\n <app-article-preview [article]=\"article\" />\n } @empty {\n <div class=\"article-preview\">No articles are here... yet.</div>\n }\n\n <nav>\n <ul class=\"pagination\">\n @for (pageNumber of totalPages; track pageNumber) {\n <li\n class=\"page-item\"\n [ngClass]=\"{ active: pageNumber === currentPage }\"\n >\n <button class=\"page-link\" (click)=\"setPageTo(pageNumber)\">\n {{ pageNumber }}\n </button>\n </li>\n }\n </ul>\n </nav>\n }\n `,\n imports: [ArticlePreviewComponent, NgForOf, NgClass, NgIf],\n styles: `\n .page-link {\n cursor: pointer;\n }\n `,\n standalone: true,\n})\nexport class ArticleListComponent {\n query!: ArticleListConfig;\n results: Article[] = [];\n currentPage = 1;\n totalPages: Array<number> = [];\n loading = LoadingState.NOT_LOADED;\n LoadingState = LoadingState;\n destroyRef = inject(DestroyRef);\n\n @Input() limit!: number;\n @Input()\n set config(config: ArticleListConfig) {\n if (config) {\n this.query = config;\n this.currentPage = 1;\n this.runQuery();\n }\n }\n\n constructor(private articlesService: ArticlesService) {}\n\n setPageTo(pageNumber: number) {\n this.currentPage = pageNumber;\n this.runQuery();\n }\n\n runQuery() {\n this.loading = LoadingState.LOADING;\n this.results = [];\n\n // Create limit and offset filter (if necessary)\n if (this.limit) {\n this.query.filters.limit = this.limit;\n this.query.filters.offset = this.limit angular.json angular-realworld-example-app.report.json CODE_OF_CONDUCT.md eslint.config.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended logo.png node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json (this.currentPage - 1);\n }\n\n this.articlesService\n .query(this.query)\n .pipe(takeUntilDestroyed(this.destroyRef))\n .subscribe((data) => {\n this.loading = LoadingState.LOADED;\n this.results = data.articles;\n\n // Used from http://www.jstips.co/en/create-range-0...n-easily-using-one-line/\n this.totalPages = Array.from(\n new Array(Math.ceil(data.articlesCount / this.limit)),\n (val, index) => index + 1,\n );\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/features/article/components/article-meta.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (16). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 8,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 25,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 31,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 31,
                "endColumn": 11
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { ChangeDetectionStrategy, Component, Input } from \"@angular/core\";\nimport { Article } from \"../models/article.model\";\nimport { RouterLink } from \"@angular/router\";\nimport { DatePipe } from \"@angular/common\";\n\n@Component({\n selector: \"app-article-meta\",\n template: `\n <div class=\"article-meta\">\n <a [routerLink]=\"['/profile', article.author.username]\">\n <img [src]=\"article.author.image\" />\n </a>\n\n <div class=\"info\">\n <a class=\"author\" [routerLink]=\"['/profile', article.author.username]\">\n {{ article.author.username }}\n </a>\n <span class=\"date\">\n {{ article.createdAt | date: \"longDate\" }}\n </span>\n </div>\n\n <ng-content></ng-content>\n </div>\n `,\n changeDetection: ChangeDetectionStrategy.OnPush,\n imports: [RouterLink, DatePipe],\n standalone: true,\n})\nexport class ArticleMetaComponent {\n @Input() article!: Article;\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/features/article/components/article-preview.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 8,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 38,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        25,
                        342
                      ],
                      "text": ", ChangeDetectionStrategy } from \"@angular/core\";\nimport { Article } from \"../models/article.model\";\nimport { ArticleMetaComponent } from \"./article-meta.component\";\nimport { RouterLink } from \"@angular/router\";\nimport { NgForOf } from \"@angular/common\";\nimport { FavoriteButtonComponent } from \"./favorite-button.component\";\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (24). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 10,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 35,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 40,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 40,
                "endColumn": 11
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, Input } from \"@angular/core\";\nimport { Article } from \"../models/article.model\";\nimport { ArticleMetaComponent } from \"./article-meta.component\";\nimport { RouterLink } from \"@angular/router\";\nimport { NgForOf } from \"@angular/common\";\nimport { FavoriteButtonComponent } from \"./favorite-button.component\";\n\n@Component({\n selector: \"app-article-preview\",\n template: `\n <div class=\"article-preview\">\n <app-article-meta [article]=\"article\">\n <app-favorite-button\n [article]=\"article\"\n (toggle)=\"toggleFavorite($event)\"\n class=\"pull-xs-right\"\n >\n {{ article.favoritesCount }}\n </app-favorite-button>\n </app-article-meta>\n\n <a [routerLink]=\"['/article', article.slug]\" class=\"preview-link\">\n <h1>{{ article.title }}</h1>\n <p>{{ article.description }}</p>\n <span>Read more...</span>\n <ul class=\"tag-list\">\n @for (tag of article.tagList; track tag) {\n <li class=\"tag-default tag-pill tag-outline\">\n {{ tag }}\n </li>\n }\n </ul>\n </a>\n </div>\n `,\n imports: [ArticleMetaComponent, FavoriteButtonComponent, RouterLink, NgForOf],\n standalone: true,\n})\nexport class ArticlePreviewComponent {\n @Input() article!: Article;\n\n toggleFavorite(favorited: boolean): void {\n this.article.favorited = favorited;\n\n if (favorited) {\n this.article.favoritesCount++;\n } else {\n this.article.favoritesCount--;\n }\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/features/article/components/favorite-button.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 17,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 34,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        79,
                        499
                      ],
                      "text": ", ChangeDetectionStrategy,\n} from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { EMPTY, switchMap } from \"rxjs\";\nimport { NgClass } from \"@angular/common\";\nimport { ArticlesService } from \"../services/articles.service\";\nimport { UserService } from \"../../../core/auth/services/user.service\";\nimport { Article } from \"../models/article.model\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (11). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 19,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 31,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 39,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 39,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 40,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 40,
                "endColumn": 19,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        1037,
                        1037
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/no-output-native",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named as standard DOM events",
                "line": 40,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "noOutputNative",
                "endLine": 40,
                "endColumn": 19
              }
            ],
            "suppressedMessages": [],
            "errorCount": 5,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n DestroyRef,\n EventEmitter,\n inject,\n Input,\n Output,\n} from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { EMPTY, switchMap } from \"rxjs\";\nimport { NgClass } from \"@angular/common\";\nimport { ArticlesService } from \"../services/articles.service\";\nimport { UserService } from \"../../../core/auth/services/user.service\";\nimport { Article } from \"../models/article.model\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Component({\n selector: \"app-favorite-button\",\n template: `\n <button\n class=\"btn btn-sm\"\n [ngClass]=\"{\n disabled: isSubmitting,\n 'btn-outline-primary': !article.favorited,\n 'btn-primary': article.favorited\n }\"\n (click)=\"toggleFavorite()\"\n >\n <i class=\"ion-heart\"></i> <ng-content></ng-content>\n </button>\n `,\n imports: [NgClass],\n standalone: true,\n})\nexport class FavoriteButtonComponent {\n destroyRef = inject(DestroyRef);\n isSubmitting = false;\n\n @Input() article!: Article;\n @Output() toggle = new EventEmitter<boolean>();\n\n constructor(\n private readonly articleService: ArticlesService,\n private readonly router: Router,\n private readonly userService: UserService,\n ) {}\n\n toggleFavorite(): void {\n this.isSubmitting = true;\n\n this.userService.isAuthenticated\n .pipe(\n switchMap((authenticated) => {\n if (!authenticated) {\n void this.router.navigate([\"/register\"]);\n return EMPTY;\n }\n\n if (!this.article.favorited) {\n return this.articleService.favorite(this.article.slug);\n } else {\n return this.articleService.unfavorite(this.article.slug);\n }\n }),\n takeUntilDestroyed(this.destroyRef),\n )\n .subscribe({\n next: () => {\n this.isSubmitting = false;\n this.toggle.emit(!this.article.favorited);\n },\n error: () => (this.isSubmitting = false),\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/features/article/pages/article/article.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 24,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 44,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        46,
                        1568
                      ],
                      "text": ", ChangeDetectionStrategy } from \"@angular/core\";\nimport { FormControl, FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport { ActivatedRoute, Router, RouterLink } from \"@angular/router\";\nimport { User } from \"../../../../core/auth/user.model\";\nimport { Article } from \"../../models/article.model\";\nimport { ArticlesService } from \"../../services/articles.service\";\nimport { CommentsService } from \"../../services/comments.service\";\nimport { UserService } from \"../../../../core/auth/services/user.service\";\nimport { ArticleMetaComponent } from \"../../components/article-meta.component\";\nimport { AsyncPipe, NgClass, NgForOf, NgIf } from \"@angular/common\";\nimport { MarkdownPipe } from \"../../../../shared/pipes/markdown.pipe\";\nimport { ListErrorsComponent } from \"../../../../shared/components/list-errors.component\";\nimport { ArticleCommentComponent } from \"../../components/article-comment.component\";\nimport { catchError } from \"rxjs/operators\";\nimport { combineLatest, throwError } from \"rxjs\";\nimport { Comment } from \"../../models/comment.model\";\nimport { IfAuthenticatedDirective } from \"../../../../core/auth/if-authenticated.directive\";\nimport { Errors } from \"../../../../core/models/errors.model\";\nimport { Profile } from \"../../../profile/models/profile.model\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\nimport { FavoriteButtonComponent } from \"../../components/favorite-button.component\";\nimport { FollowButtonComponent } from \"../../../profile/components/follow-button.component\";\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, DestroyRef, inject, OnInit } from \"@angular/core\";\nimport { FormControl, FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport { ActivatedRoute, Router, RouterLink } from \"@angular/router\";\nimport { User } from \"../../../../core/auth/user.model\";\nimport { Article } from \"../../models/article.model\";\nimport { ArticlesService } from \"../../services/articles.service\";\nimport { CommentsService } from \"../../services/comments.service\";\nimport { UserService } from \"../../../../core/auth/services/user.service\";\nimport { ArticleMetaComponent } from \"../../components/article-meta.component\";\nimport { AsyncPipe, NgClass, NgForOf, NgIf } from \"@angular/common\";\nimport { MarkdownPipe } from \"../../../../shared/pipes/markdown.pipe\";\nimport { ListErrorsComponent } from \"../../../../shared/components/list-errors.component\";\nimport { ArticleCommentComponent } from \"../../components/article-comment.component\";\nimport { catchError } from \"rxjs/operators\";\nimport { combineLatest, throwError } from \"rxjs\";\nimport { Comment } from \"../../models/comment.model\";\nimport { IfAuthenticatedDirective } from \"../../../../core/auth/if-authenticated.directive\";\nimport { Errors } from \"../../../../core/models/errors.model\";\nimport { Profile } from \"../../../profile/models/profile.model\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\nimport { FavoriteButtonComponent } from \"../../components/favorite-button.component\";\nimport { FollowButtonComponent } from \"../../../profile/components/follow-button.component\";\n\n@Component({\n selector: \"app-article-page\",\n templateUrl: \"./article.component.html\",\n imports: [\n ArticleMetaComponent,\n RouterLink,\n NgClass,\n FollowButtonComponent,\n FavoriteButtonComponent,\n NgForOf,\n MarkdownPipe,\n AsyncPipe,\n ListErrorsComponent,\n FormsModule,\n ArticleCommentComponent,\n ReactiveFormsModule,\n IfAuthenticatedDirective,\n NgIf,\n ],\n standalone: true,\n})\nexport default class ArticleComponent implements OnInit {\n article!: Article;\n currentUser!: User | null;\n comments: Comment[] = [];\n canModify: boolean = false;\n\n commentControl = new FormControl<string>(\"\", { nonNullable: true });\n commentFormErrors: Errors | null = null;\n\n isSubmitting = false;\n isDeleting = false;\n destroyRef = inject(DestroyRef);\n\n constructor(\n private readonly route: ActivatedRoute,\n private readonly articleService: ArticlesService,\n private readonly commentsService: CommentsService,\n private readonly router: Router,\n private readonly userService: UserService,\n ) {}\n\n ngOnInit(): void {\n const slug = this.route.snapshot.params[\"slug\"];\n combineLatest([\n this.articleService.get(slug),\n this.commentsService.getAll(slug),\n this.userService.currentUser,\n ])\n .pipe(\n catchError((err) => {\n void this.router.navigate([\"/\"]);\n return throwError(() => err);\n }),\n takeUntilDestroyed(this.destroyRef),\n )\n .subscribe(([article, comments, currentUser]) => {\n this.article = article;\n this.comments = comments;\n this.currentUser = currentUser;\n this.canModify = currentUser?.username === article.author.username;\n });\n }\n\n onToggleFavorite(favorited: boolean): void {\n this.article.favorited = favorited;\n\n if (favorited) {\n this.article.favoritesCount++;\n } else {\n this.article.favoritesCount--;\n }\n }\n\n toggleFollowing(profile: Profile): void {\n this.article.author.following = profile.following;\n }\n\n deleteArticle(): void {\n this.isDeleting = true;\n\n this.articleService\n .delete(this.article.slug)\n .pipe(takeUntilDestroyed(this.destroyRef))\n .subscribe(() => {\n void this.router.navigate([\"/\"]);\n });\n }\n\n addComment() {\n this.isSubmitting = true;\n this.commentFormErrors = null;\n\n this.commentsService\n .add(this.article.slug, this.commentControl.value)\n .pipe(takeUntilDestroyed(this.destroyRef))\n .subscribe({\n next: (comment) => {\n this.comments.unshift(comment);\n this.commentControl.reset(\"\");\n this.isSubmitting = false;\n },\n error: (errors) => {\n this.isSubmitting = false;\n this.commentFormErrors = errors;\n },\n });\n }\n\n deleteComment(comment: Comment): void {\n this.commentsService\n .delete(comment.id, this.article.slug)\n .pipe(takeUntilDestroyed(this.destroyRef))\n .subscribe(() => {\n this.comments = this.comments.filter((item) => item !== comment);\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/features/article/pages/editor/editor.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 23,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 28,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        89,
                        814
                      ],
                      "text": ", ChangeDetectionStrategy } from \"@angular/core\";\nimport {\n FormControl,\n FormGroup,\n ReactiveFormsModule,\n UntypedFormGroup,\n} from \"@angular/forms\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { combineLatest } from \"rxjs\";\nimport { Errors } from \"../../../../core/models/errors.model\";\nimport { ArticlesService } from \"../../services/articles.service\";\nimport { UserService } from \"../../../../core/auth/services/user.service\";\nimport { ListErrorsComponent } from \"../../../../shared/components/list-errors.component\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\ninterface ArticleForm {\n title: FormControl<string>;\n description: FormControl<string>;\n body: FormControl<string>;\n}\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { NgForOf } from \"@angular/common\";\nimport { Component, DestroyRef, inject, OnInit } from \"@angular/core\";\nimport {\n FormControl,\n FormGroup,\n ReactiveFormsModule,\n UntypedFormGroup,\n} from \"@angular/forms\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { combineLatest } from \"rxjs\";\nimport { Errors } from \"../../../../core/models/errors.model\";\nimport { ArticlesService } from \"../../services/articles.service\";\nimport { UserService } from \"../../../../core/auth/services/user.service\";\nimport { ListErrorsComponent } from \"../../../../shared/components/list-errors.component\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\ninterface ArticleForm {\n title: FormControl<string>;\n description: FormControl<string>;\n body: FormControl<string>;\n}\n\n@Component({\n selector: \"app-editor-page\",\n templateUrl: \"./editor.component.html\",\n imports: [ListErrorsComponent, ReactiveFormsModule, NgForOf],\n standalone: true,\n})\nexport default class EditorComponent implements OnInit {\n tagList: string[] = [];\n articleForm: UntypedFormGroup = new FormGroup<ArticleForm>({\n title: new FormControl(\"\", { nonNullable: true }),\n description: new FormControl(\"\", { nonNullable: true }),\n body: new FormControl(\"\", { nonNullable: true }),\n });\n tagField = new FormControl<string>(\"\", { nonNullable: true });\n\n errors: Errors | null = null;\n isSubmitting = false;\n destroyRef = inject(DestroyRef);\n\n constructor(\n private readonly articleService: ArticlesService,\n private readonly route: ActivatedRoute,\n private readonly router: Router,\n private readonly userService: UserService,\n ) {}\n\n ngOnInit() {\n if (this.route.snapshot.params[\"slug\"]) {\n combineLatest([\n this.articleService.get(this.route.snapshot.params[\"slug\"]),\n this.userService.getCurrentUser(),\n ])\n .pipe(takeUntilDestroyed(this.destroyRef))\n .subscribe(([article, { user }]) => {\n if (user.username === article.author.username) {\n this.tagList = article.tagList;\n this.articleForm.patchValue(article);\n } else {\n void this.router.navigate([\"/\"]);\n }\n });\n }\n }\n\n addTag() {\n // retrieve tag control\n const tag = this.tagField.value;\n // only add tag if it does not exist yet\n if (tag != null && tag.trim() !== \"\" && this.tagList.indexOf(tag) < 0) {\n this.tagList.push(tag);\n }\n // clear the input\n this.tagField.reset(\"\");\n }\n\n removeTag(tagName: string): void {\n this.tagList = this.tagList.filter((tag) => tag !== tagName);\n }\n\n submitForm(): void {\n this.isSubmitting = true;\n\n // update any single tag\n this.addTag();\n\n // post the changes\n this.articleService\n .create({\n ...this.articleForm.value,\n tagList: this.tagList,\n })\n .pipe(takeUntilDestroyed(this.destroyRef))\n .subscribe({\n next: (article) => this.router.navigate([\"/article/\", article.slug]),\n error: (err) => {\n this.errors = err;\n this.isSubmitting = false;\n },\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/features/article/pages/home/home.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 13,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 26,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        46,
                        728
                      ],
                      "text": ", ChangeDetectionStrategy } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { TagsService } from \"../../services/tags.service\";\nimport { ArticleListConfig } from \"../../models/article-list-config.model\";\nimport { AsyncPipe, NgClass, NgForOf } from \"@angular/common\";\nimport { ArticleListComponent } from \"../../components/article-list.component\";\nimport { tap } from \"rxjs/operators\";\nimport { UserService } from \"../../../../core/auth/services/user.service\";\nimport { RxLet } from \"@rx-angular/template/let\";\nimport { IfAuthenticatedDirective } from \"../../../../core/auth/if-authenticated.directive\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/consistent-component-styles",
                "severity": 2,
                "message": "Use `styleUrl` instead of `styleUrls` for a single stylesheet",
                "line": 16,
                "column": 3,
                "nodeType": "Property",
                "messageId": "useStyleUrl",
                "endLine": 16,
                "endColumn": 38,
                "fix": {
                  "range": [
                    797,
                    832
                  ],
                  "text": "styleUrl: \"./home.component.css\""
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import { Component, DestroyRef, inject, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { TagsService } from \"../../services/tags.service\";\nimport { ArticleListConfig } from \"../../models/article-list-config.model\";\nimport { AsyncPipe, NgClass, NgForOf } from \"@angular/common\";\nimport { ArticleListComponent } from \"../../components/article-list.component\";\nimport { tap } from \"rxjs/operators\";\nimport { UserService } from \"../../../../core/auth/services/user.service\";\nimport { RxLet } from \"@rx-angular/template/let\";\nimport { IfAuthenticatedDirective } from \"../../../../core/auth/if-authenticated.directive\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Component({\n selector: \"app-home-page\",\n templateUrl: \"./home.component.html\",\n styleUrls: [\"./home.component.css\"],\n imports: [\n NgClass,\n ArticleListComponent,\n AsyncPipe,\n RxLet,\n NgForOf,\n IfAuthenticatedDirective,\n ],\n standalone: true,\n})\nexport default class HomeComponent implements OnInit {\n isAuthenticated = false;\n listConfig: ArticleListConfig = {\n type: \"all\",\n filters: {},\n };\n tags$ = inject(TagsService)\n .getAll()\n .pipe(tap(() => (this.tagsLoaded = true)));\n tagsLoaded = false;\n destroyRef = inject(DestroyRef);\n\n constructor(\n private readonly router: Router,\n private readonly userService: UserService,\n ) {}\n\n ngOnInit(): void {\n this.userService.isAuthenticated\n .pipe(\n tap((isAuthenticated) => {\n if (isAuthenticated) {\n this.setListTo(\"feed\");\n } else {\n this.setListTo(\"all\");\n }\n }),\n takeUntilDestroyed(this.destroyRef),\n )\n .subscribe(\n (isAuthenticated: boolean) => (this.isAuthenticated = isAuthenticated),\n );\n }\n\n setListTo(type: string = \"\", filters: Object = {}): void {\n // If feed is requested but user is not authenticated, redirect to login\n if (type === \"feed\" && !this.isAuthenticated) {\n void this.router.navigate([\"/login\"]);\n return;\n }\n\n // Otherwise, set the list object\n this.listConfig = { type: type, filters: filters };\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/features/profile/components/follow-button.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 18,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 37,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        79,
                        530
                      ],
                      "text": ", ChangeDetectionStrategy,\n} from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { switchMap } from \"rxjs/operators\";\nimport { EMPTY } from \"rxjs\";\nimport { ProfileService } from \"../services/profile.service\";\nimport { UserService } from \"../../../core/auth/services/user.service\";\nimport { Profile } from \"../models/profile.model\";\nimport { NgClass } from \"@angular/common\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (13). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 20,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 34,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 39,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 39,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 40,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 40,
                "endColumn": 19,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        1089,
                        1089
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/no-output-native",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named as standard DOM events",
                "line": 40,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "noOutputNative",
                "endLine": 40,
                "endColumn": 19
              }
            ],
            "suppressedMessages": [],
            "errorCount": 5,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n DestroyRef,\n EventEmitter,\n inject,\n Input,\n Output,\n} from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { switchMap } from \"rxjs/operators\";\nimport { EMPTY } from \"rxjs\";\nimport { ProfileService } from \"../services/profile.service\";\nimport { UserService } from \"../../../core/auth/services/user.service\";\nimport { Profile } from \"../models/profile.model\";\nimport { NgClass } from \"@angular/common\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Component({\n selector: \"app-follow-button\",\n template: `\n <button\n class=\"btn btn-sm action-btn\"\n [ngClass]=\"{\n disabled: isSubmitting,\n 'btn-outline-secondary': !profile.following,\n 'btn-secondary': profile.following\n }\"\n (click)=\"toggleFollowing()\"\n >\n <i class=\"ion-plus-round\"></i>\n &nbsp;\n {{ profile.following ? \"Unfollow\" : \"Follow\" }} {{ profile.username }}\n </button>\n `,\n imports: [NgClass],\n standalone: true,\n})\nexport class FollowButtonComponent {\n @Input() profile!: Profile;\n @Output() toggle = new EventEmitter<Profile>();\n isSubmitting = false;\n destroyRef = inject(DestroyRef);\n\n constructor(\n private readonly profileService: ProfileService,\n private readonly router: Router,\n private readonly userService: UserService,\n ) {}\n\n toggleFollowing(): void {\n this.isSubmitting = true;\n\n this.userService.isAuthenticated\n .pipe(\n switchMap((isAuthenticated: boolean) => {\n if (!isAuthenticated) {\n void this.router.navigate([\"/login\"]);\n return EMPTY;\n }\n\n if (!this.profile.following) {\n return this.profileService.follow(this.profile.username);\n } else {\n return this.profileService.unfollow(this.profile.username);\n }\n }),\n takeUntilDestroyed(this.destroyRef),\n )\n .subscribe({\n next: (profile) => {\n this.isSubmitting = false;\n this.toggle.emit(profile);\n },\n error: () => (this.isSubmitting = false),\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/features/profile/components/profile-articles.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 9,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 14,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        46,
                        487
                      ],
                      "text": ", ChangeDetectionStrategy } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { ArticleListComponent } from \"../../article/components/article-list.component\";\nimport { ProfileService } from \"../services/profile.service\";\nimport { Profile } from \"../models/profile.model\";\nimport { ArticleListConfig } from \"../../article/models/article-list-config.model\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, DestroyRef, inject, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { ArticleListComponent } from \"../../article/components/article-list.component\";\nimport { ProfileService } from \"../services/profile.service\";\nimport { Profile } from \"../models/profile.model\";\nimport { ArticleListConfig } from \"../../article/models/article-list-config.model\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Component({\n selector: \"app-profile-articles\",\n template: `<app-article-list [limit]=\"10\" [config]=\"articlesConfig\" />`,\n imports: [ArticleListComponent],\n standalone: true,\n})\nexport default class ProfileArticlesComponent implements OnInit {\n profile!: Profile;\n articlesConfig!: ArticleListConfig;\n destroyRef = inject(DestroyRef);\n\n constructor(\n private route: ActivatedRoute,\n private readonly profileService: ProfileService,\n ) {}\n\n ngOnInit(): void {\n this.profileService\n .get(this.route.snapshot.params[\"username\"])\n .pipe(takeUntilDestroyed(this.destroyRef))\n .subscribe({\n next: (profile: Profile) => {\n this.profile = profile;\n this.articlesConfig = {\n type: \"all\",\n filters: {\n author: this.profile.username,\n },\n };\n },\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/features/profile/components/profile-favorites.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 9,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 14,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        46,
                        487
                      ],
                      "text": ", ChangeDetectionStrategy } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { ArticleListComponent } from \"../../article/components/article-list.component\";\nimport { ProfileService } from \"../services/profile.service\";\nimport { Profile } from \"../models/profile.model\";\nimport { ArticleListConfig } from \"../../article/models/article-list-config.model\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, DestroyRef, inject, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { ArticleListComponent } from \"../../article/components/article-list.component\";\nimport { ProfileService } from \"../services/profile.service\";\nimport { Profile } from \"../models/profile.model\";\nimport { ArticleListConfig } from \"../../article/models/article-list-config.model\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Component({\n selector: \"app-profile-favorites\",\n template: `<app-article-list [limit]=\"10\" [config]=\"favoritesConfig\" />`,\n imports: [ArticleListComponent],\n standalone: true,\n})\nexport default class ProfileFavoritesComponent implements OnInit {\n profile!: Profile;\n favoritesConfig!: ArticleListConfig;\n destroyRef = inject(DestroyRef);\n\n constructor(\n private route: ActivatedRoute,\n private readonly profileService: ProfileService,\n ) {}\n\n ngOnInit() {\n this.profileService\n .get(this.route.parent?.snapshot.params[\"username\"])\n .pipe(takeUntilDestroyed(this.destroyRef))\n .subscribe({\n next: (profile: Profile) => {\n this.profile = profile;\n this.favoritesConfig = {\n type: \"all\",\n filters: {\n favorited: this.profile.username,\n },\n };\n },\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/features/profile/pages/profile/profile.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 18,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 31,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        46,
                        702
                      ],
                      "text": ", ChangeDetectionStrategy } from \"@angular/core\";\nimport {\n ActivatedRoute,\n Router,\n RouterLink,\n RouterLinkActive,\n RouterOutlet,\n} from \"@angular/router\";\nimport { catchError, switchMap } from \"rxjs/operators\";\nimport { combineLatest, of, throwError } from \"rxjs\";\nimport { UserService } from \"../../../../core/auth/services/user.service\";\nimport { Profile } from \"../../models/profile.model\";\nimport { ProfileService } from \"../../services/profile.service\";\nimport { AsyncPipe, NgIf } from \"@angular/common\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\nimport { FollowButtonComponent } from \"../../components/follow-button.component\";\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/no-duplicates-in-metadata-arrays",
                "severity": 2,
                "message": "Entry is duplicated in metadata array",
                "line": 28,
                "column": 5,
                "nodeType": "Identifier",
                "messageId": "noDuplicatesInMetadataArrays",
                "endLine": 28,
                "endColumn": 26
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, DestroyRef, inject, OnInit } from \"@angular/core\";\nimport {\n ActivatedRoute,\n Router,\n RouterLink,\n RouterLinkActive,\n RouterOutlet,\n} from \"@angular/router\";\nimport { catchError, switchMap } from \"rxjs/operators\";\nimport { combineLatest, of, throwError } from \"rxjs\";\nimport { UserService } from \"../../../../core/auth/services/user.service\";\nimport { Profile } from \"../../models/profile.model\";\nimport { ProfileService } from \"../../services/profile.service\";\nimport { AsyncPipe, NgIf } from \"@angular/common\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\nimport { FollowButtonComponent } from \"../../components/follow-button.component\";\n\n@Component({\n selector: \"app-profile-page\",\n templateUrl: \"./profile.component.html\",\n imports: [\n FollowButtonComponent,\n NgIf,\n RouterLink,\n AsyncPipe,\n RouterLinkActive,\n RouterOutlet,\n FollowButtonComponent,\n ],\n standalone: true,\n})\nexport class ProfileComponent implements OnInit {\n profile!: Profile;\n isUser: boolean = false;\n destroyRef = inject(DestroyRef);\n\n constructor(\n private readonly route: ActivatedRoute,\n private readonly router: Router,\n private readonly userService: UserService,\n private readonly profileService: ProfileService,\n ) {}\n\n ngOnInit() {\n this.profileService\n .get(this.route.snapshot.params[\"username\"])\n .pipe(\n catchError((error) => {\n void this.router.navigate([\"/\"]);\n return throwError(() => error);\n }),\n switchMap((profile) => {\n return combineLatest([of(profile), this.userService.currentUser]);\n }),\n takeUntilDestroyed(this.destroyRef),\n )\n .subscribe(([profile, user]) => {\n this.profile = profile;\n this.isUser = profile.username === user?.username;\n });\n }\n\n onToggleFollowing(profile: Profile) {\n this.profile = profile;\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/features/settings/settings.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 23,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 28,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        46,
                        737
                      ],
                      "text": ", ChangeDetectionStrategy } from \"@angular/core\";\nimport {\n FormControl,\n FormGroup,\n ReactiveFormsModule,\n Validators,\n} from \"@angular/forms\";\nimport { Router } from \"@angular/router\";\nimport { User } from \"../../core/auth/user.model\";\nimport { UserService } from \"../../core/auth/services/user.service\";\nimport { ListErrorsComponent } from \"../../shared/components/list-errors.component\";\nimport { Errors } from \"../../core/models/errors.model\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\ninterface SettingsForm {\n image: FormControl<string>;\n username: FormControl<string>;\n bio: FormControl<string>;\n email: FormControl<string>;\n password: FormControl<string>;\n}\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, DestroyRef, inject, OnInit } from \"@angular/core\";\nimport {\n FormControl,\n FormGroup,\n ReactiveFormsModule,\n Validators,\n} from \"@angular/forms\";\nimport { Router } from \"@angular/router\";\nimport { User } from \"../../core/auth/user.model\";\nimport { UserService } from \"../../core/auth/services/user.service\";\nimport { ListErrorsComponent } from \"../../shared/components/list-errors.component\";\nimport { Errors } from \"../../core/models/errors.model\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\ninterface SettingsForm {\n image: FormControl<string>;\n username: FormControl<string>;\n bio: FormControl<string>;\n email: FormControl<string>;\n password: FormControl<string>;\n}\n\n@Component({\n selector: \"app-settings-page\",\n templateUrl: \"./settings.component.html\",\n imports: [ListErrorsComponent, ReactiveFormsModule],\n standalone: true,\n})\nexport default class SettingsComponent implements OnInit {\n user!: User;\n settingsForm = new FormGroup<SettingsForm>({\n image: new FormControl(\"\", { nonNullable: true }),\n username: new FormControl(\"\", { nonNullable: true }),\n bio: new FormControl(\"\", { nonNullable: true }),\n email: new FormControl(\"\", { nonNullable: true }),\n password: new FormControl(\"\", {\n validators: [Validators.required],\n nonNullable: true,\n }),\n });\n errors: Errors | null = null;\n isSubmitting = false;\n destroyRef = inject(DestroyRef);\n\n constructor(\n private readonly router: Router,\n private readonly userService: UserService,\n ) {}\n\n ngOnInit(): void {\n this.settingsForm.patchValue(\n this.userService.getCurrentUser() as Partial<User>,\n );\n }\n\n logout(): void {\n this.userService.logout();\n }\n\n submitForm() {\n this.isSubmitting = true;\n\n this.userService\n .update(this.settingsForm.value)\n .pipe(takeUntilDestroyed(this.destroyRef))\n .subscribe({\n next: ({ user }) =>\n void this.router.navigate([\"/profile/\", user.username]),\n error: (err) => {\n this.errors = err;\n this.isSubmitting = false;\n },\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/shared/components/list-errors.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 5,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 10,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        25,
                        172
                      ],
                      "text": ", ChangeDetectionStrategy } from \"@angular/core\";\nimport { Errors } from \"../../core/models/errors.model\";\nimport { NgForOf, NgIf } from \"@angular/common\";\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 14,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 14,
                "endColumn": 11
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, Input } from \"@angular/core\";\nimport { Errors } from \"../../core/models/errors.model\";\nimport { NgForOf, NgIf } from \"@angular/common\";\n\n@Component({\n selector: \"app-list-errors\",\n templateUrl: \"./list-errors.component.html\",\n imports: [NgIf, NgForOf],\n standalone: true,\n})\nexport class ListErrorsComponent {\n errorList: string[] = [];\n\n @Input() set errors(errorList: Errors | null) {\n this.errorList = errorList\n ? Object.keys(errorList.errors || {}).map(\n (key) => `${key} ${errorList.errors[key]}`,\n )\n : [];\n }\n}\n",
            "usedDeprecatedRules": []
          }
        ]
      }
    },
    "after": {
      "angular-conduit": {
        "recommended": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/core/auth/if-authenticated.directive.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/directive-selector",
                "severity": 2,
                "message": "The selector should start with one of these prefixes: \"app\" (https://angular.dev/style-guide#style-02-08)",
                "line": 14,
                "column": 13,
                "nodeType": "Literal",
                "messageId": "prefixFailure",
                "endLine": 14,
                "endColumn": 32
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n DestroyRef,\n Directive,\n inject,\n Input,\n OnInit,\n TemplateRef,\n ViewContainerRef,\n} from \"@angular/core\";\nimport { UserService } from \"./services/user.service\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Directive({\n selector: \"[ifAuthenticated]\",\n standalone: true,\n})\nexport class IfAuthenticatedDirective<T> implements OnInit {\n destroyRef = inject(DestroyRef);\n constructor(\n private templateRef: TemplateRef<T>,\n private userService: UserService,\n private viewContainer: ViewContainerRef,\n ) {}\n\n condition: boolean = false;\n hasView = false;\n\n ngOnInit() {\n this.userService.isAuthenticated\n .pipe(takeUntilDestroyed(this.destroyRef))\n .subscribe((isAuthenticated: boolean) => {\n const authRequired = isAuthenticated && this.condition;\n const unauthRequired = !isAuthenticated && !this.condition;\n\n if ((authRequired || unauthRequired) && !this.hasView) {\n this.viewContainer.createEmbeddedView(this.templateRef);\n this.hasView = true;\n } else if (this.hasView) {\n this.viewContainer.clear();\n this.hasView = false;\n }\n });\n }\n\n @Input() set ifAuthenticated(condition: boolean) {\n this.condition = condition;\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/features/article/components/favorite-button.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/no-output-native",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named as standard DOM events",
                "line": 40,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "noOutputNative",
                "endLine": 40,
                "endColumn": 19
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n DestroyRef,\n EventEmitter,\n inject,\n Input,\n Output,\n} from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { EMPTY, switchMap } from \"rxjs\";\nimport { NgClass } from \"@angular/common\";\nimport { ArticlesService } from \"../services/articles.service\";\nimport { UserService } from \"../../../core/auth/services/user.service\";\nimport { Article } from \"../models/article.model\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Component({\n selector: \"app-favorite-button\",\n template: `\n <button\n class=\"btn btn-sm\"\n [ngClass]=\"{\n disabled: isSubmitting,\n 'btn-outline-primary': !article.favorited,\n 'btn-primary': article.favorited\n }\"\n (click)=\"toggleFavorite()\"\n >\n <i class=\"ion-heart\"></i> <ng-content></ng-content>\n </button>\n `,\n imports: [NgClass],\n standalone: true,\n})\nexport class FavoriteButtonComponent {\n destroyRef = inject(DestroyRef);\n isSubmitting = false;\n\n @Input() article!: Article;\n @Output() toggle = new EventEmitter<boolean>();\n\n constructor(\n private readonly articleService: ArticlesService,\n private readonly router: Router,\n private readonly userService: UserService,\n ) {}\n\n toggleFavorite(): void {\n this.isSubmitting = true;\n\n this.userService.isAuthenticated\n .pipe(\n switchMap((authenticated) => {\n if (!authenticated) {\n void this.router.navigate([\"/register\"]);\n return EMPTY;\n }\n\n if (!this.article.favorited) {\n return this.articleService.favorite(this.article.slug);\n } else {\n return this.articleService.unfavorite(this.article.slug);\n }\n }),\n takeUntilDestroyed(this.destroyRef),\n )\n .subscribe({\n next: () => {\n this.isSubmitting = false;\n this.toggle.emit(!this.article.favorited);\n },\n error: () => (this.isSubmitting = false),\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/features/profile/components/follow-button.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/no-output-native",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named as standard DOM events",
                "line": 40,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "noOutputNative",
                "endLine": 40,
                "endColumn": 19
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n DestroyRef,\n EventEmitter,\n inject,\n Input,\n Output,\n} from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { switchMap } from \"rxjs/operators\";\nimport { EMPTY } from \"rxjs\";\nimport { ProfileService } from \"../services/profile.service\";\nimport { UserService } from \"../../../core/auth/services/user.service\";\nimport { Profile } from \"../models/profile.model\";\nimport { NgClass } from \"@angular/common\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Component({\n selector: \"app-follow-button\",\n template: `\n <button\n class=\"btn btn-sm action-btn\"\n [ngClass]=\"{\n disabled: isSubmitting,\n 'btn-outline-secondary': !profile.following,\n 'btn-secondary': profile.following\n }\"\n (click)=\"toggleFollowing()\"\n >\n <i class=\"ion-plus-round\"></i>\n &nbsp;\n {{ profile.following ? \"Unfollow\" : \"Follow\" }} {{ profile.username }}\n </button>\n `,\n imports: [NgClass],\n standalone: true,\n})\nexport class FollowButtonComponent {\n @Input() profile!: Profile;\n @Output() toggle = new EventEmitter<Profile>();\n isSubmitting = false;\n destroyRef = inject(DestroyRef);\n\n constructor(\n private readonly profileService: ProfileService,\n private readonly router: Router,\n private readonly userService: UserService,\n ) {}\n\n toggleFollowing(): void {\n this.isSubmitting = true;\n\n this.userService.isAuthenticated\n .pipe(\n switchMap((isAuthenticated: boolean) => {\n if (!isAuthenticated) {\n void this.router.navigate([\"/login\"]);\n return EMPTY;\n }\n\n if (!this.profile.following) {\n return this.profileService.follow(this.profile.username);\n } else {\n return this.profileService.unfollow(this.profile.username);\n }\n }),\n takeUntilDestroyed(this.destroyRef),\n )\n .subscribe({\n next: (profile) => {\n this.isSubmitting = false;\n this.toggle.emit(profile);\n },\n error: () => (this.isSubmitting = false),\n });\n }\n}\n",
            "usedDeprecatedRules": []
          }
        ],
        "all": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/app.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 6,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 11,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        239
                      ],
                      "text": ", ChangeDetectionStrategy } from \"@angular/core\";\nimport { HeaderComponent } from \"./core/layout/header.component\";\nimport { RouterOutlet } from \"@angular/router\";\nimport { FooterComponent } from \"./core/layout/footer.component\";\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component } from \"@angular/core\";\nimport { HeaderComponent } from \"./core/layout/header.component\";\nimport { RouterOutlet } from \"@angular/router\";\nimport { FooterComponent } from \"./core/layout/footer.component\";\n\n@Component({\n selector: \"app-root\",\n templateUrl: \"./app.component.html\",\n standalone: true,\n imports: [HeaderComponent, RouterOutlet, FooterComponent],\n})\nexport class AppComponent {}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/core/auth/auth.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 21,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 26,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        46,
                        671
                      ],
                      "text": ", ChangeDetectionStrategy } from \"@angular/core\";\nimport {\n Validators,\n FormGroup,\n FormControl,\n ReactiveFormsModule,\n} from \"@angular/forms\";\nimport { ActivatedRoute, Router, RouterLink } from \"@angular/router\";\nimport { NgIf } from \"@angular/common\";\nimport { ListErrorsComponent } from \"../../shared/components/list-errors.component\";\nimport { Errors } from \"../models/errors.model\";\nimport { UserService } from \"./services/user.service\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\ninterface AuthForm {\n email: FormControl<string>;\n password: FormControl<string>;\n username?: FormControl<string>;\n}\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, DestroyRef, inject, OnInit } from \"@angular/core\";\nimport {\n Validators,\n FormGroup,\n FormControl,\n ReactiveFormsModule,\n} from \"@angular/forms\";\nimport { ActivatedRoute, Router, RouterLink } from \"@angular/router\";\nimport { NgIf } from \"@angular/common\";\nimport { ListErrorsComponent } from \"../../shared/components/list-errors.component\";\nimport { Errors } from \"../models/errors.model\";\nimport { UserService } from \"./services/user.service\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\ninterface AuthForm {\n email: FormControl<string>;\n password: FormControl<string>;\n username?: FormControl<string>;\n}\n\n@Component({\n selector: \"app-auth-page\",\n templateUrl: \"./auth.component.html\",\n imports: [RouterLink, NgIf, ListErrorsComponent, ReactiveFormsModule],\n standalone: true,\n})\nexport default class AuthComponent implements OnInit {\n authType = \"\";\n title = \"\";\n errors: Errors = { errors: {} };\n isSubmitting = false;\n authForm: FormGroup<AuthForm>;\n destroyRef = inject(DestroyRef);\n\n constructor(\n private readonly route: ActivatedRoute,\n private readonly router: Router,\n private readonly userService: UserService,\n ) {\n this.authForm = new FormGroup<AuthForm>({\n email: new FormControl(\"\", {\n validators: [Validators.required],\n nonNullable: true,\n }),\n password: new FormControl(\"\", {\n validators: [Validators.required],\n nonNullable: true,\n }),\n });\n }\n\n ngOnInit(): void {\n this.authType = this.route.snapshot.url.at(-1)!.path;\n this.title = this.authType === \"login\" ? \"Sign in\" : \"Sign up\";\n if (this.authType === \"register\") {\n this.authForm.addControl(\n \"username\",\n new FormControl(\"\", {\n validators: [Validators.required],\n nonNullable: true,\n }),\n );\n }\n }\n\n submitForm(): void {\n this.isSubmitting = true;\n this.errors = { errors: {} };\n\n let observable =\n this.authType === \"login\"\n ? this.userService.login(\n this.authForm.value as { email: string; password: string },\n )\n : this.userService.register(\n this.authForm.value as {\n email: string;\n password: string;\n username: string;\n },\n );\n\n observable.pipe(takeUntilDestroyed(this.destroyRef)).subscribe({\n next: () => void this.router.navigate([\"/\"]),\n error: (err) => {\n this.errors = err;\n this.isSubmitting = false;\n },\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/core/auth/if-authenticated.directive.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/directive-selector",
                "severity": 2,
                "message": "The selector should start with one of these prefixes: \"app\" (https://angular.dev/style-guide#style-02-08)",
                "line": 14,
                "column": 13,
                "nodeType": "Literal",
                "messageId": "prefixFailure",
                "endLine": 14,
                "endColumn": 32
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 45,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 45,
                "endColumn": 11
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n DestroyRef,\n Directive,\n inject,\n Input,\n OnInit,\n TemplateRef,\n ViewContainerRef,\n} from \"@angular/core\";\nimport { UserService } from \"./services/user.service\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Directive({\n selector: \"[ifAuthenticated]\",\n standalone: true,\n})\nexport class IfAuthenticatedDirective<T> implements OnInit {\n destroyRef = inject(DestroyRef);\n constructor(\n private templateRef: TemplateRef<T>,\n private userService: UserService,\n private viewContainer: ViewContainerRef,\n ) {}\n\n condition: boolean = false;\n hasView = false;\n\n ngOnInit() {\n this.userService.isAuthenticated\n .pipe(takeUntilDestroyed(this.destroyRef))\n .subscribe((isAuthenticated: boolean) => {\n const authRequired = isAuthenticated && this.condition;\n const unauthRequired = !isAuthenticated && !this.condition;\n\n if ((authRequired || unauthRequired) && !this.hasView) {\n this.viewContainer.createEmbeddedView(this.templateRef);\n this.hasView = true;\n } else if (this.hasView) {\n this.viewContainer.clear();\n this.hasView = false;\n }\n });\n }\n\n @Input() set ifAuthenticated(condition: boolean) {\n this.condition = condition;\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/core/layout/header.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 7,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 18,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        26,
                        322
                      ],
                      "text": ", ChangeDetectionStrategy } from \"@angular/core\";\nimport { UserService } from \"../auth/services/user.service\";\nimport { RouterLink, RouterLinkActive } from \"@angular/router\";\nimport { AsyncPipe, NgIf } from \"@angular/common\";\nimport { IfAuthenticatedDirective } from \"../auth/if-authenticated.directive\";\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, inject } from \"@angular/core\";\nimport { UserService } from \"../auth/services/user.service\";\nimport { RouterLink, RouterLinkActive } from \"@angular/router\";\nimport { AsyncPipe, NgIf } from \"@angular/common\";\nimport { IfAuthenticatedDirective } from \"../auth/if-authenticated.directive\";\n\n@Component({\n selector: \"app-layout-header\",\n templateUrl: \"./header.component.html\",\n imports: [\n RouterLinkActive,\n RouterLink,\n AsyncPipe,\n NgIf,\n IfAuthenticatedDirective,\n ],\n standalone: true,\n})\nexport class HeaderComponent {\n currentUser$ = inject(UserService).currentUser;\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/features/article/components/article-comment.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 9,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 47,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        55,
                        418
                      ],
                      "text": ", ChangeDetectionStrategy } from \"@angular/core\";\nimport { UserService } from \"../../../core/auth/services/user.service\";\nimport { User } from \"../../../core/auth/user.model\";\nimport { RouterLink } from \"@angular/router\";\nimport { map } from \"rxjs/operators\";\nimport { Comment } from \"../models/comment.model\";\nimport { AsyncPipe, DatePipe, NgIf } from \"@angular/common\";\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (32). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 11,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 44,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 49,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 49,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 50,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 50,
                "endColumn": 19,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        1568,
                        1568
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 4,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, EventEmitter, Input, Output, inject } from \"@angular/core\";\nimport { UserService } from \"../../../core/auth/services/user.service\";\nimport { User } from \"../../../core/auth/user.model\";\nimport { RouterLink } from \"@angular/router\";\nimport { map } from \"rxjs/operators\";\nimport { Comment } from \"../models/comment.model\";\nimport { AsyncPipe, DatePipe, NgIf } from \"@angular/common\";\n\n@Component({\n selector: \"app-article-comment\",\n template: `\n @if (comment) {\n <div class=\"card\">\n <div class=\"card-block\">\n <p class=\"card-text\">\n {{ comment.body }}\n </p>\n </div>\n <div class=\"card-footer\">\n <a\n class=\"comment-author\"\n [routerLink]=\"['/profile', comment.author.username]\"\n >\n <img [src]=\"comment.author.image\" class=\"comment-author-img\" />\n </a>\n &nbsp;\n <a\n class=\"comment-author\"\n [routerLink]=\"['/profile', comment.author.username]\"\n >\n {{ comment.author.username }}\n </a>\n <span class=\"date-posted\">\n {{ comment.createdAt | date: \"longDate\" }}\n </span>\n @if (canModify$ | async) {\n <span class=\"mod-options\">\n <i class=\"ion-trash-a\" (click)=\"delete.emit(true)\"></i>\n </span>\n }\n </div>\n </div>\n }\n `,\n imports: [RouterLink, DatePipe, NgIf, AsyncPipe],\n standalone: true,\n})\nexport class ArticleCommentComponent {\n @Input() comment!: Comment;\n @Output() delete = new EventEmitter<boolean>();\n\n canModify$ = inject(UserService).currentUser.pipe(\n map(\n (userData: User | null) =>\n userData?.username === this.comment.author.username,\n ),\n );\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/features/article/components/article-list.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 10,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 47,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        45,
                        541
                      ],
                      "text": ", ChangeDetectionStrategy } from \"@angular/core\";\nimport { ArticlesService } from \"../services/articles.service\";\nimport { ArticleListConfig } from \"../models/article-list-config.model\";\nimport { Article } from \"../models/article.model\";\nimport { ArticlePreviewComponent } from \"./article-preview.component\";\nimport { NgClass, NgForOf, NgIf } from \"@angular/common\";\nimport { LoadingState } from \"../../../core/models/loading-state.model\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (26). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 12,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 39,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 57,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 57,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 58,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 58,
                "endColumn": 11
              }
            ],
            "suppressedMessages": [],
            "errorCount": 4,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, DestroyRef, inject, Input } from \"@angular/core\";\nimport { ArticlesService } from \"../services/articles.service\";\nimport { ArticleListConfig } from \"../models/article-list-config.model\";\nimport { Article } from \"../models/article.model\";\nimport { ArticlePreviewComponent } from \"./article-preview.component\";\nimport { NgClass, NgForOf, NgIf } from \"@angular/common\";\nimport { LoadingState } from \"../../../core/models/loading-state.model\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Component({\n selector: \"app-article-list\",\n template: `\n @if (loading === LoadingState.LOADING) {\n <div class=\"article-preview\">Loading articles...</div>\n }\n\n @if (loading === LoadingState.LOADED) {\n @for (article of results; track article.slug) {\n <app-article-preview [article]=\"article\" />\n } @empty {\n <div class=\"article-preview\">No articles are here... yet.</div>\n }\n\n <nav>\n <ul class=\"pagination\">\n @for (pageNumber of totalPages; track pageNumber) {\n <li\n class=\"page-item\"\n [ngClass]=\"{ active: pageNumber === currentPage }\"\n >\n <button class=\"page-link\" (click)=\"setPageTo(pageNumber)\">\n {{ pageNumber }}\n </button>\n </li>\n }\n </ul>\n </nav>\n }\n `,\n imports: [ArticlePreviewComponent, NgForOf, NgClass, NgIf],\n styles: `\n .page-link {\n cursor: pointer;\n }\n `,\n standalone: true,\n})\nexport class ArticleListComponent {\n query!: ArticleListConfig;\n results: Article[] = [];\n currentPage = 1;\n totalPages: Array<number> = [];\n loading = LoadingState.NOT_LOADED;\n LoadingState = LoadingState;\n destroyRef = inject(DestroyRef);\n\n @Input() limit!: number;\n @Input()\n set config(config: ArticleListConfig) {\n if (config) {\n this.query = config;\n this.currentPage = 1;\n this.runQuery();\n }\n }\n\n constructor(private articlesService: ArticlesService) {}\n\n setPageTo(pageNumber: number) {\n this.currentPage = pageNumber;\n this.runQuery();\n }\n\n runQuery() {\n this.loading = LoadingState.LOADING;\n this.results = [];\n\n // Create limit and offset filter (if necessary)\n if (this.limit) {\n this.query.filters.limit = this.limit;\n this.query.filters.offset = this.limit angular.json angular-realworld-example-app.report.json CODE_OF_CONDUCT.md eslint.config.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended logo.png node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json (this.currentPage - 1);\n }\n\n this.articlesService\n .query(this.query)\n .pipe(takeUntilDestroyed(this.destroyRef))\n .subscribe((data) => {\n this.loading = LoadingState.LOADED;\n this.results = data.articles;\n\n // Used from http://www.jstips.co/en/create-range-0...n-easily-using-one-line/\n this.totalPages = Array.from(\n new Array(Math.ceil(data.articlesCount / this.limit)),\n (val, index) => index + 1,\n );\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/features/article/components/article-meta.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (16). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 8,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 25,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 31,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 31,
                "endColumn": 11
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { ChangeDetectionStrategy, Component, Input } from \"@angular/core\";\nimport { Article } from \"../models/article.model\";\nimport { RouterLink } from \"@angular/router\";\nimport { DatePipe } from \"@angular/common\";\n\n@Component({\n selector: \"app-article-meta\",\n template: `\n <div class=\"article-meta\">\n <a [routerLink]=\"['/profile', article.author.username]\">\n <img [src]=\"article.author.image\" />\n </a>\n\n <div class=\"info\">\n <a class=\"author\" [routerLink]=\"['/profile', article.author.username]\">\n {{ article.author.username }}\n </a>\n <span class=\"date\">\n {{ article.createdAt | date: \"longDate\" }}\n </span>\n </div>\n\n <ng-content></ng-content>\n </div>\n `,\n changeDetection: ChangeDetectionStrategy.OnPush,\n imports: [RouterLink, DatePipe],\n standalone: true,\n})\nexport class ArticleMetaComponent {\n @Input() article!: Article;\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/features/article/components/article-preview.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 8,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 38,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        25,
                        342
                      ],
                      "text": ", ChangeDetectionStrategy } from \"@angular/core\";\nimport { Article } from \"../models/article.model\";\nimport { ArticleMetaComponent } from \"./article-meta.component\";\nimport { RouterLink } from \"@angular/router\";\nimport { NgForOf } from \"@angular/common\";\nimport { FavoriteButtonComponent } from \"./favorite-button.component\";\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (24). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 10,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 35,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 40,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 40,
                "endColumn": 11
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, Input } from \"@angular/core\";\nimport { Article } from \"../models/article.model\";\nimport { ArticleMetaComponent } from \"./article-meta.component\";\nimport { RouterLink } from \"@angular/router\";\nimport { NgForOf } from \"@angular/common\";\nimport { FavoriteButtonComponent } from \"./favorite-button.component\";\n\n@Component({\n selector: \"app-article-preview\",\n template: `\n <div class=\"article-preview\">\n <app-article-meta [article]=\"article\">\n <app-favorite-button\n [article]=\"article\"\n (toggle)=\"toggleFavorite($event)\"\n class=\"pull-xs-right\"\n >\n {{ article.favoritesCount }}\n </app-favorite-button>\n </app-article-meta>\n\n <a [routerLink]=\"['/article', article.slug]\" class=\"preview-link\">\n <h1>{{ article.title }}</h1>\n <p>{{ article.description }}</p>\n <span>Read more...</span>\n <ul class=\"tag-list\">\n @for (tag of article.tagList; track tag) {\n <li class=\"tag-default tag-pill tag-outline\">\n {{ tag }}\n </li>\n }\n </ul>\n </a>\n </div>\n `,\n imports: [ArticleMetaComponent, FavoriteButtonComponent, RouterLink, NgForOf],\n standalone: true,\n})\nexport class ArticlePreviewComponent {\n @Input() article!: Article;\n\n toggleFavorite(favorited: boolean): void {\n this.article.favorited = favorited;\n\n if (favorited) {\n this.article.favoritesCount++;\n } else {\n this.article.favoritesCount--;\n }\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/features/article/components/favorite-button.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 17,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 34,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        79,
                        499
                      ],
                      "text": ", ChangeDetectionStrategy,\n} from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { EMPTY, switchMap } from \"rxjs\";\nimport { NgClass } from \"@angular/common\";\nimport { ArticlesService } from \"../services/articles.service\";\nimport { UserService } from \"../../../core/auth/services/user.service\";\nimport { Article } from \"../models/article.model\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (11). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 19,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 31,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 39,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 39,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 40,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 40,
                "endColumn": 19,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        1037,
                        1037
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/no-output-native",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named as standard DOM events",
                "line": 40,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "noOutputNative",
                "endLine": 40,
                "endColumn": 19
              }
            ],
            "suppressedMessages": [],
            "errorCount": 5,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n DestroyRef,\n EventEmitter,\n inject,\n Input,\n Output,\n} from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { EMPTY, switchMap } from \"rxjs\";\nimport { NgClass } from \"@angular/common\";\nimport { ArticlesService } from \"../services/articles.service\";\nimport { UserService } from \"../../../core/auth/services/user.service\";\nimport { Article } from \"../models/article.model\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Component({\n selector: \"app-favorite-button\",\n template: `\n <button\n class=\"btn btn-sm\"\n [ngClass]=\"{\n disabled: isSubmitting,\n 'btn-outline-primary': !article.favorited,\n 'btn-primary': article.favorited\n }\"\n (click)=\"toggleFavorite()\"\n >\n <i class=\"ion-heart\"></i> <ng-content></ng-content>\n </button>\n `,\n imports: [NgClass],\n standalone: true,\n})\nexport class FavoriteButtonComponent {\n destroyRef = inject(DestroyRef);\n isSubmitting = false;\n\n @Input() article!: Article;\n @Output() toggle = new EventEmitter<boolean>();\n\n constructor(\n private readonly articleService: ArticlesService,\n private readonly router: Router,\n private readonly userService: UserService,\n ) {}\n\n toggleFavorite(): void {\n this.isSubmitting = true;\n\n this.userService.isAuthenticated\n .pipe(\n switchMap((authenticated) => {\n if (!authenticated) {\n void this.router.navigate([\"/register\"]);\n return EMPTY;\n }\n\n if (!this.article.favorited) {\n return this.articleService.favorite(this.article.slug);\n } else {\n return this.articleService.unfavorite(this.article.slug);\n }\n }),\n takeUntilDestroyed(this.destroyRef),\n )\n .subscribe({\n next: () => {\n this.isSubmitting = false;\n this.toggle.emit(!this.article.favorited);\n },\n error: () => (this.isSubmitting = false),\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/features/article/pages/article/article.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 24,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 44,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        46,
                        1568
                      ],
                      "text": ", ChangeDetectionStrategy } from \"@angular/core\";\nimport { FormControl, FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport { ActivatedRoute, Router, RouterLink } from \"@angular/router\";\nimport { User } from \"../../../../core/auth/user.model\";\nimport { Article } from \"../../models/article.model\";\nimport { ArticlesService } from \"../../services/articles.service\";\nimport { CommentsService } from \"../../services/comments.service\";\nimport { UserService } from \"../../../../core/auth/services/user.service\";\nimport { ArticleMetaComponent } from \"../../components/article-meta.component\";\nimport { AsyncPipe, NgClass, NgForOf, NgIf } from \"@angular/common\";\nimport { MarkdownPipe } from \"../../../../shared/pipes/markdown.pipe\";\nimport { ListErrorsComponent } from \"../../../../shared/components/list-errors.component\";\nimport { ArticleCommentComponent } from \"../../components/article-comment.component\";\nimport { catchError } from \"rxjs/operators\";\nimport { combineLatest, throwError } from \"rxjs\";\nimport { Comment } from \"../../models/comment.model\";\nimport { IfAuthenticatedDirective } from \"../../../../core/auth/if-authenticated.directive\";\nimport { Errors } from \"../../../../core/models/errors.model\";\nimport { Profile } from \"../../../profile/models/profile.model\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\nimport { FavoriteButtonComponent } from \"../../components/favorite-button.component\";\nimport { FollowButtonComponent } from \"../../../profile/components/follow-button.component\";\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, DestroyRef, inject, OnInit } from \"@angular/core\";\nimport { FormControl, FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport { ActivatedRoute, Router, RouterLink } from \"@angular/router\";\nimport { User } from \"../../../../core/auth/user.model\";\nimport { Article } from \"../../models/article.model\";\nimport { ArticlesService } from \"../../services/articles.service\";\nimport { CommentsService } from \"../../services/comments.service\";\nimport { UserService } from \"../../../../core/auth/services/user.service\";\nimport { ArticleMetaComponent } from \"../../components/article-meta.component\";\nimport { AsyncPipe, NgClass, NgForOf, NgIf } from \"@angular/common\";\nimport { MarkdownPipe } from \"../../../../shared/pipes/markdown.pipe\";\nimport { ListErrorsComponent } from \"../../../../shared/components/list-errors.component\";\nimport { ArticleCommentComponent } from \"../../components/article-comment.component\";\nimport { catchError } from \"rxjs/operators\";\nimport { combineLatest, throwError } from \"rxjs\";\nimport { Comment } from \"../../models/comment.model\";\nimport { IfAuthenticatedDirective } from \"../../../../core/auth/if-authenticated.directive\";\nimport { Errors } from \"../../../../core/models/errors.model\";\nimport { Profile } from \"../../../profile/models/profile.model\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\nimport { FavoriteButtonComponent } from \"../../components/favorite-button.component\";\nimport { FollowButtonComponent } from \"../../../profile/components/follow-button.component\";\n\n@Component({\n selector: \"app-article-page\",\n templateUrl: \"./article.component.html\",\n imports: [\n ArticleMetaComponent,\n RouterLink,\n NgClass,\n FollowButtonComponent,\n FavoriteButtonComponent,\n NgForOf,\n MarkdownPipe,\n AsyncPipe,\n ListErrorsComponent,\n FormsModule,\n ArticleCommentComponent,\n ReactiveFormsModule,\n IfAuthenticatedDirective,\n NgIf,\n ],\n standalone: true,\n})\nexport default class ArticleComponent implements OnInit {\n article!: Article;\n currentUser!: User | null;\n comments: Comment[] = [];\n canModify: boolean = false;\n\n commentControl = new FormControl<string>(\"\", { nonNullable: true });\n commentFormErrors: Errors | null = null;\n\n isSubmitting = false;\n isDeleting = false;\n destroyRef = inject(DestroyRef);\n\n constructor(\n private readonly route: ActivatedRoute,\n private readonly articleService: ArticlesService,\n private readonly commentsService: CommentsService,\n private readonly router: Router,\n private readonly userService: UserService,\n ) {}\n\n ngOnInit(): void {\n const slug = this.route.snapshot.params[\"slug\"];\n combineLatest([\n this.articleService.get(slug),\n this.commentsService.getAll(slug),\n this.userService.currentUser,\n ])\n .pipe(\n catchError((err) => {\n void this.router.navigate([\"/\"]);\n return throwError(() => err);\n }),\n takeUntilDestroyed(this.destroyRef),\n )\n .subscribe(([article, comments, currentUser]) => {\n this.article = article;\n this.comments = comments;\n this.currentUser = currentUser;\n this.canModify = currentUser?.username === article.author.username;\n });\n }\n\n onToggleFavorite(favorited: boolean): void {\n this.article.favorited = favorited;\n\n if (favorited) {\n this.article.favoritesCount++;\n } else {\n this.article.favoritesCount--;\n }\n }\n\n toggleFollowing(profile: Profile): void {\n this.article.author.following = profile.following;\n }\n\n deleteArticle(): void {\n this.isDeleting = true;\n\n this.articleService\n .delete(this.article.slug)\n .pipe(takeUntilDestroyed(this.destroyRef))\n .subscribe(() => {\n void this.router.navigate([\"/\"]);\n });\n }\n\n addComment() {\n this.isSubmitting = true;\n this.commentFormErrors = null;\n\n this.commentsService\n .add(this.article.slug, this.commentControl.value)\n .pipe(takeUntilDestroyed(this.destroyRef))\n .subscribe({\n next: (comment) => {\n this.comments.unshift(comment);\n this.commentControl.reset(\"\");\n this.isSubmitting = false;\n },\n error: (errors) => {\n this.isSubmitting = false;\n this.commentFormErrors = errors;\n },\n });\n }\n\n deleteComment(comment: Comment): void {\n this.commentsService\n .delete(comment.id, this.article.slug)\n .pipe(takeUntilDestroyed(this.destroyRef))\n .subscribe(() => {\n this.comments = this.comments.filter((item) => item !== comment);\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/features/article/pages/editor/editor.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 23,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 28,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        89,
                        814
                      ],
                      "text": ", ChangeDetectionStrategy } from \"@angular/core\";\nimport {\n FormControl,\n FormGroup,\n ReactiveFormsModule,\n UntypedFormGroup,\n} from \"@angular/forms\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { combineLatest } from \"rxjs\";\nimport { Errors } from \"../../../../core/models/errors.model\";\nimport { ArticlesService } from \"../../services/articles.service\";\nimport { UserService } from \"../../../../core/auth/services/user.service\";\nimport { ListErrorsComponent } from \"../../../../shared/components/list-errors.component\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\ninterface ArticleForm {\n title: FormControl<string>;\n description: FormControl<string>;\n body: FormControl<string>;\n}\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { NgForOf } from \"@angular/common\";\nimport { Component, DestroyRef, inject, OnInit } from \"@angular/core\";\nimport {\n FormControl,\n FormGroup,\n ReactiveFormsModule,\n UntypedFormGroup,\n} from \"@angular/forms\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { combineLatest } from \"rxjs\";\nimport { Errors } from \"../../../../core/models/errors.model\";\nimport { ArticlesService } from \"../../services/articles.service\";\nimport { UserService } from \"../../../../core/auth/services/user.service\";\nimport { ListErrorsComponent } from \"../../../../shared/components/list-errors.component\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\ninterface ArticleForm {\n title: FormControl<string>;\n description: FormControl<string>;\n body: FormControl<string>;\n}\n\n@Component({\n selector: \"app-editor-page\",\n templateUrl: \"./editor.component.html\",\n imports: [ListErrorsComponent, ReactiveFormsModule, NgForOf],\n standalone: true,\n})\nexport default class EditorComponent implements OnInit {\n tagList: string[] = [];\n articleForm: UntypedFormGroup = new FormGroup<ArticleForm>({\n title: new FormControl(\"\", { nonNullable: true }),\n description: new FormControl(\"\", { nonNullable: true }),\n body: new FormControl(\"\", { nonNullable: true }),\n });\n tagField = new FormControl<string>(\"\", { nonNullable: true });\n\n errors: Errors | null = null;\n isSubmitting = false;\n destroyRef = inject(DestroyRef);\n\n constructor(\n private readonly articleService: ArticlesService,\n private readonly route: ActivatedRoute,\n private readonly router: Router,\n private readonly userService: UserService,\n ) {}\n\n ngOnInit() {\n if (this.route.snapshot.params[\"slug\"]) {\n combineLatest([\n this.articleService.get(this.route.snapshot.params[\"slug\"]),\n this.userService.getCurrentUser(),\n ])\n .pipe(takeUntilDestroyed(this.destroyRef))\n .subscribe(([article, { user }]) => {\n if (user.username === article.author.username) {\n this.tagList = article.tagList;\n this.articleForm.patchValue(article);\n } else {\n void this.router.navigate([\"/\"]);\n }\n });\n }\n }\n\n addTag() {\n // retrieve tag control\n const tag = this.tagField.value;\n // only add tag if it does not exist yet\n if (tag != null && tag.trim() !== \"\" && this.tagList.indexOf(tag) < 0) {\n this.tagList.push(tag);\n }\n // clear the input\n this.tagField.reset(\"\");\n }\n\n removeTag(tagName: string): void {\n this.tagList = this.tagList.filter((tag) => tag !== tagName);\n }\n\n submitForm(): void {\n this.isSubmitting = true;\n\n // update any single tag\n this.addTag();\n\n // post the changes\n this.articleService\n .create({\n ...this.articleForm.value,\n tagList: this.tagList,\n })\n .pipe(takeUntilDestroyed(this.destroyRef))\n .subscribe({\n next: (article) => this.router.navigate([\"/article/\", article.slug]),\n error: (err) => {\n this.errors = err;\n this.isSubmitting = false;\n },\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/features/article/pages/home/home.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 13,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 26,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        46,
                        728
                      ],
                      "text": ", ChangeDetectionStrategy } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { TagsService } from \"../../services/tags.service\";\nimport { ArticleListConfig } from \"../../models/article-list-config.model\";\nimport { AsyncPipe, NgClass, NgForOf } from \"@angular/common\";\nimport { ArticleListComponent } from \"../../components/article-list.component\";\nimport { tap } from \"rxjs/operators\";\nimport { UserService } from \"../../../../core/auth/services/user.service\";\nimport { RxLet } from \"@rx-angular/template/let\";\nimport { IfAuthenticatedDirective } from \"../../../../core/auth/if-authenticated.directive\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, DestroyRef, inject, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { TagsService } from \"../../services/tags.service\";\nimport { ArticleListConfig } from \"../../models/article-list-config.model\";\nimport { AsyncPipe, NgClass, NgForOf } from \"@angular/common\";\nimport { ArticleListComponent } from \"../../components/article-list.component\";\nimport { tap } from \"rxjs/operators\";\nimport { UserService } from \"../../../../core/auth/services/user.service\";\nimport { RxLet } from \"@rx-angular/template/let\";\nimport { IfAuthenticatedDirective } from \"../../../../core/auth/if-authenticated.directive\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Component({\n selector: \"app-home-page\",\n templateUrl: \"./home.component.html\",\n styleUrl: \"./home.component.css\",\n imports: [\n NgClass,\n ArticleListComponent,\n AsyncPipe,\n RxLet,\n NgForOf,\n IfAuthenticatedDirective,\n ],\n standalone: true,\n})\nexport default class HomeComponent implements OnInit {\n isAuthenticated = false;\n listConfig: ArticleListConfig = {\n type: \"all\",\n filters: {},\n };\n tags$ = inject(TagsService)\n .getAll()\n .pipe(tap(() => (this.tagsLoaded = true)));\n tagsLoaded = false;\n destroyRef = inject(DestroyRef);\n\n constructor(\n private readonly router: Router,\n private readonly userService: UserService,\n ) {}\n\n ngOnInit(): void {\n this.userService.isAuthenticated\n .pipe(\n tap((isAuthenticated) => {\n if (isAuthenticated) {\n this.setListTo(\"feed\");\n } else {\n this.setListTo(\"all\");\n }\n }),\n takeUntilDestroyed(this.destroyRef),\n )\n .subscribe(\n (isAuthenticated: boolean) => (this.isAuthenticated = isAuthenticated),\n );\n }\n\n setListTo(type: string = \"\", filters: Object = {}): void {\n // If feed is requested but user is not authenticated, redirect to login\n if (type === \"feed\" && !this.isAuthenticated) {\n void this.router.navigate([\"/login\"]);\n return;\n }\n\n // Otherwise, set the list object\n this.listConfig = { type: type, filters: filters };\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/features/profile/components/follow-button.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 18,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 37,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        79,
                        530
                      ],
                      "text": ", ChangeDetectionStrategy,\n} from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { switchMap } from \"rxjs/operators\";\nimport { EMPTY } from \"rxjs\";\nimport { ProfileService } from \"../services/profile.service\";\nimport { UserService } from \"../../../core/auth/services/user.service\";\nimport { Profile } from \"../models/profile.model\";\nimport { NgClass } from \"@angular/common\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (13). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 20,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 34,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 39,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 39,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 40,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 40,
                "endColumn": 19,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        1089,
                        1089
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/no-output-native",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named as standard DOM events",
                "line": 40,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "noOutputNative",
                "endLine": 40,
                "endColumn": 19
              }
            ],
            "suppressedMessages": [],
            "errorCount": 5,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n DestroyRef,\n EventEmitter,\n inject,\n Input,\n Output,\n} from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { switchMap } from \"rxjs/operators\";\nimport { EMPTY } from \"rxjs\";\nimport { ProfileService } from \"../services/profile.service\";\nimport { UserService } from \"../../../core/auth/services/user.service\";\nimport { Profile } from \"../models/profile.model\";\nimport { NgClass } from \"@angular/common\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Component({\n selector: \"app-follow-button\",\n template: `\n <button\n class=\"btn btn-sm action-btn\"\n [ngClass]=\"{\n disabled: isSubmitting,\n 'btn-outline-secondary': !profile.following,\n 'btn-secondary': profile.following\n }\"\n (click)=\"toggleFollowing()\"\n >\n <i class=\"ion-plus-round\"></i>\n &nbsp;\n {{ profile.following ? \"Unfollow\" : \"Follow\" }} {{ profile.username }}\n </button>\n `,\n imports: [NgClass],\n standalone: true,\n})\nexport class FollowButtonComponent {\n @Input() profile!: Profile;\n @Output() toggle = new EventEmitter<Profile>();\n isSubmitting = false;\n destroyRef = inject(DestroyRef);\n\n constructor(\n private readonly profileService: ProfileService,\n private readonly router: Router,\n private readonly userService: UserService,\n ) {}\n\n toggleFollowing(): void {\n this.isSubmitting = true;\n\n this.userService.isAuthenticated\n .pipe(\n switchMap((isAuthenticated: boolean) => {\n if (!isAuthenticated) {\n void this.router.navigate([\"/login\"]);\n return EMPTY;\n }\n\n if (!this.profile.following) {\n return this.profileService.follow(this.profile.username);\n } else {\n return this.profileService.unfollow(this.profile.username);\n }\n }),\n takeUntilDestroyed(this.destroyRef),\n )\n .subscribe({\n next: (profile) => {\n this.isSubmitting = false;\n this.toggle.emit(profile);\n },\n error: () => (this.isSubmitting = false),\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/features/profile/components/profile-articles.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 9,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 14,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        46,
                        487
                      ],
                      "text": ", ChangeDetectionStrategy } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { ArticleListComponent } from \"../../article/components/article-list.component\";\nimport { ProfileService } from \"../services/profile.service\";\nimport { Profile } from \"../models/profile.model\";\nimport { ArticleListConfig } from \"../../article/models/article-list-config.model\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, DestroyRef, inject, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { ArticleListComponent } from \"../../article/components/article-list.component\";\nimport { ProfileService } from \"../services/profile.service\";\nimport { Profile } from \"../models/profile.model\";\nimport { ArticleListConfig } from \"../../article/models/article-list-config.model\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Component({\n selector: \"app-profile-articles\",\n template: `<app-article-list [limit]=\"10\" [config]=\"articlesConfig\" />`,\n imports: [ArticleListComponent],\n standalone: true,\n})\nexport default class ProfileArticlesComponent implements OnInit {\n profile!: Profile;\n articlesConfig!: ArticleListConfig;\n destroyRef = inject(DestroyRef);\n\n constructor(\n private route: ActivatedRoute,\n private readonly profileService: ProfileService,\n ) {}\n\n ngOnInit(): void {\n this.profileService\n .get(this.route.snapshot.params[\"username\"])\n .pipe(takeUntilDestroyed(this.destroyRef))\n .subscribe({\n next: (profile: Profile) => {\n this.profile = profile;\n this.articlesConfig = {\n type: \"all\",\n filters: {\n author: this.profile.username,\n },\n };\n },\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/features/profile/components/profile-favorites.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 9,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 14,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        46,
                        487
                      ],
                      "text": ", ChangeDetectionStrategy } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { ArticleListComponent } from \"../../article/components/article-list.component\";\nimport { ProfileService } from \"../services/profile.service\";\nimport { Profile } from \"../models/profile.model\";\nimport { ArticleListConfig } from \"../../article/models/article-list-config.model\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, DestroyRef, inject, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { ArticleListComponent } from \"../../article/components/article-list.component\";\nimport { ProfileService } from \"../services/profile.service\";\nimport { Profile } from \"../models/profile.model\";\nimport { ArticleListConfig } from \"../../article/models/article-list-config.model\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\n@Component({\n selector: \"app-profile-favorites\",\n template: `<app-article-list [limit]=\"10\" [config]=\"favoritesConfig\" />`,\n imports: [ArticleListComponent],\n standalone: true,\n})\nexport default class ProfileFavoritesComponent implements OnInit {\n profile!: Profile;\n favoritesConfig!: ArticleListConfig;\n destroyRef = inject(DestroyRef);\n\n constructor(\n private route: ActivatedRoute,\n private readonly profileService: ProfileService,\n ) {}\n\n ngOnInit() {\n this.profileService\n .get(this.route.parent?.snapshot.params[\"username\"])\n .pipe(takeUntilDestroyed(this.destroyRef))\n .subscribe({\n next: (profile: Profile) => {\n this.profile = profile;\n this.favoritesConfig = {\n type: \"all\",\n filters: {\n favorited: this.profile.username,\n },\n };\n },\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/features/profile/pages/profile/profile.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 18,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 31,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        46,
                        702
                      ],
                      "text": ", ChangeDetectionStrategy } from \"@angular/core\";\nimport {\n ActivatedRoute,\n Router,\n RouterLink,\n RouterLinkActive,\n RouterOutlet,\n} from \"@angular/router\";\nimport { catchError, switchMap } from \"rxjs/operators\";\nimport { combineLatest, of, throwError } from \"rxjs\";\nimport { UserService } from \"../../../../core/auth/services/user.service\";\nimport { Profile } from \"../../models/profile.model\";\nimport { ProfileService } from \"../../services/profile.service\";\nimport { AsyncPipe, NgIf } from \"@angular/common\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\nimport { FollowButtonComponent } from \"../../components/follow-button.component\";\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/no-duplicates-in-metadata-arrays",
                "severity": 2,
                "message": "Entry is duplicated in metadata array",
                "line": 28,
                "column": 5,
                "nodeType": "Identifier",
                "messageId": "noDuplicatesInMetadataArrays",
                "endLine": 28,
                "endColumn": 26
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, DestroyRef, inject, OnInit } from \"@angular/core\";\nimport {\n ActivatedRoute,\n Router,\n RouterLink,\n RouterLinkActive,\n RouterOutlet,\n} from \"@angular/router\";\nimport { catchError, switchMap } from \"rxjs/operators\";\nimport { combineLatest, of, throwError } from \"rxjs\";\nimport { UserService } from \"../../../../core/auth/services/user.service\";\nimport { Profile } from \"../../models/profile.model\";\nimport { ProfileService } from \"../../services/profile.service\";\nimport { AsyncPipe, NgIf } from \"@angular/common\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\nimport { FollowButtonComponent } from \"../../components/follow-button.component\";\n\n@Component({\n selector: \"app-profile-page\",\n templateUrl: \"./profile.component.html\",\n imports: [\n FollowButtonComponent,\n NgIf,\n RouterLink,\n AsyncPipe,\n RouterLinkActive,\n RouterOutlet,\n FollowButtonComponent,\n ],\n standalone: true,\n})\nexport class ProfileComponent implements OnInit {\n profile!: Profile;\n isUser: boolean = false;\n destroyRef = inject(DestroyRef);\n\n constructor(\n private readonly route: ActivatedRoute,\n private readonly router: Router,\n private readonly userService: UserService,\n private readonly profileService: ProfileService,\n ) {}\n\n ngOnInit() {\n this.profileService\n .get(this.route.snapshot.params[\"username\"])\n .pipe(\n catchError((error) => {\n void this.router.navigate([\"/\"]);\n return throwError(() => error);\n }),\n switchMap((profile) => {\n return combineLatest([of(profile), this.userService.currentUser]);\n }),\n takeUntilDestroyed(this.destroyRef),\n )\n .subscribe(([profile, user]) => {\n this.profile = profile;\n this.isUser = profile.username === user?.username;\n });\n }\n\n onToggleFollowing(profile: Profile) {\n this.profile = profile;\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/features/settings/settings.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 23,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 28,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        46,
                        737
                      ],
                      "text": ", ChangeDetectionStrategy } from \"@angular/core\";\nimport {\n FormControl,\n FormGroup,\n ReactiveFormsModule,\n Validators,\n} from \"@angular/forms\";\nimport { Router } from \"@angular/router\";\nimport { User } from \"../../core/auth/user.model\";\nimport { UserService } from \"../../core/auth/services/user.service\";\nimport { ListErrorsComponent } from \"../../shared/components/list-errors.component\";\nimport { Errors } from \"../../core/models/errors.model\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\ninterface SettingsForm {\n image: FormControl<string>;\n username: FormControl<string>;\n bio: FormControl<string>;\n email: FormControl<string>;\n password: FormControl<string>;\n}\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, DestroyRef, inject, OnInit } from \"@angular/core\";\nimport {\n FormControl,\n FormGroup,\n ReactiveFormsModule,\n Validators,\n} from \"@angular/forms\";\nimport { Router } from \"@angular/router\";\nimport { User } from \"../../core/auth/user.model\";\nimport { UserService } from \"../../core/auth/services/user.service\";\nimport { ListErrorsComponent } from \"../../shared/components/list-errors.component\";\nimport { Errors } from \"../../core/models/errors.model\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\n\ninterface SettingsForm {\n image: FormControl<string>;\n username: FormControl<string>;\n bio: FormControl<string>;\n email: FormControl<string>;\n password: FormControl<string>;\n}\n\n@Component({\n selector: \"app-settings-page\",\n templateUrl: \"./settings.component.html\",\n imports: [ListErrorsComponent, ReactiveFormsModule],\n standalone: true,\n})\nexport default class SettingsComponent implements OnInit {\n user!: User;\n settingsForm = new FormGroup<SettingsForm>({\n image: new FormControl(\"\", { nonNullable: true }),\n username: new FormControl(\"\", { nonNullable: true }),\n bio: new FormControl(\"\", { nonNullable: true }),\n email: new FormControl(\"\", { nonNullable: true }),\n password: new FormControl(\"\", {\n validators: [Validators.required],\n nonNullable: true,\n }),\n });\n errors: Errors | null = null;\n isSubmitting = false;\n destroyRef = inject(DestroyRef);\n\n constructor(\n private readonly router: Router,\n private readonly userService: UserService,\n ) {}\n\n ngOnInit(): void {\n this.settingsForm.patchValue(\n this.userService.getCurrentUser() as Partial<User>,\n );\n }\n\n logout(): void {\n this.userService.logout();\n }\n\n submitForm() {\n this.isSubmitting = true;\n\n this.userService\n .update(this.settingsForm.value)\n .pipe(takeUntilDestroyed(this.destroyRef))\n .subscribe({\n next: ({ user }) =>\n void this.router.navigate([\"/profile/\", user.username]),\n error: (err) => {\n this.errors = err;\n this.isSubmitting = false;\n },\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-realworld-example-app/src/app/shared/components/list-errors.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 5,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 10,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        25,
                        172
                      ],
                      "text": ", ChangeDetectionStrategy } from \"@angular/core\";\nimport { Errors } from \"../../core/models/errors.model\";\nimport { NgForOf, NgIf } from \"@angular/common\";\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 14,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 14,
                "endColumn": 11
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, Input } from \"@angular/core\";\nimport { Errors } from \"../../core/models/errors.model\";\nimport { NgForOf, NgIf } from \"@angular/common\";\n\n@Component({\n selector: \"app-list-errors\",\n templateUrl: \"./list-errors.component.html\",\n imports: [NgIf, NgForOf],\n standalone: true,\n})\nexport class ListErrorsComponent {\n errorList: string[] = [];\n\n @Input() set errors(errorList: Errors | null) {\n this.errorList = errorList\n ? Object.keys(errorList.errors || {}).map(\n (key) => `${key} ${errorList.errors[key]}`,\n )\n : [];\n }\n}\n",
            "usedDeprecatedRules": []
          }
        ]
      }
    }
  },
  "angular-example-app": {
    "repo": {
      "HEAD": {
        "commit": "b43fcab316a8a4c87549eca67a8b7d915f850434",
        "author": "ismaestro",
        "date": "Sat Feb 1 07:47:16 2025 +0100",
        "message": "fix(tools): solve stylelint issues"
      },
      "url": "https://github.com/Ismaestro/angular-example-app"
    },
    "before": {
      "angularexampleapp": {
        "recommended": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-example-app/src/app/core/components/theme-button/theme-button.component.ts",
            "messages": [
              {
                "ruleId": "@typescript-eslint/prefer-nullish-coalescing",
                "message": "Definition for rule '@typescript-eslint/prefer-nullish-coalescing' was not found.",
                "line": 40,
                "column": 7,
                "endLine": 40,
                "endColumn": 79,
                "severity": 2,
                "nodeType": null
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n CUSTOM_ELEMENTS_SCHEMA,\n effect,\n inject,\n} from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthenticationService } from '~features/authentication/services/authentication.service';\nimport { Theme, ThemeManagerService } from '~core/services/theme-manager.service';\n\nimport '@shoelace-style/shoelace/dist/components/button/button.js';\nimport '@shoelace-style/shoelace/dist/components/icon/icon.js';\n\n@Component({\n selector: 'app-theme-button',\n templateUrl: './theme-button.component.html',\n standalone: true,\n changeDetection: ChangeDetectionStrategy.OnPush,\n schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class ThemeButtonComponent {\n private readonly authenticationService = inject(AuthenticationService);\n private readonly themeManagerService = inject(ThemeManagerService);\n\n readonly router = inject(Router);\n readonly Theme = Theme;\n\n isUserLoggedIn = this.authenticationService.isUserLoggedIn();\n themeSelected = this.themeManagerService.getThemeFromLocalStorageValue();\n\n constructor() {\n effect(() => {\n this.isUserLoggedIn = this.authenticationService.isUserLoggedIn();\n });\n }\n\n toggleTheme() {\n this.themeSelected =\n // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n this.themeManagerService.getThemeFromLocalStorageValue() === Theme.DARK ||\n this.themeSelected === null\n ? Theme.LIGHT\n : Theme.DARK;\n this.themeManagerService.setTheme(this.themeSelected);\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-example-app/src/app/core/directives/sl-checkbox-control.directive.ts",
            "messages": [
              {
                "ruleId": "@typescript-eslint/no-empty-function",
                "message": "Definition for rule '@typescript-eslint/no-empty-function' was not found.",
                "line": 23,
                "column": 3,
                "endLine": 23,
                "endColumn": 101,
                "severity": 2,
                "nodeType": null
              },
              {
                "ruleId": "@typescript-eslint/no-unused-vars",
                "message": "Definition for rule '@typescript-eslint/no-unused-vars' was not found.",
                "line": 23,
                "column": 3,
                "endLine": 23,
                "endColumn": 101,
                "severity": 2,
                "nodeType": null
              },
              {
                "ruleId": "@typescript-eslint/no-empty-function",
                "message": "Definition for rule '@typescript-eslint/no-empty-function' was not found.",
                "line": 26,
                "column": 3,
                "endLine": 26,
                "endColumn": 67,
                "severity": 2,
                "nodeType": null
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Directive, ElementRef, inject, model } from '@angular/core';\nimport type { ControlValueAccessor } from '@angular/forms';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Directive({\n selector: '[appSlCheckboxControl]',\n providers: [\n {\n provide: NG_VALUE_ACCESSOR,\n useExisting: AppSlCheckboxControlDirective,\n multi: true,\n },\n ],\n standalone: true,\n host: {\n '[attr.checked]': 'checked()',\n '(sl-change)': 'onSlChange()',\n },\n})\nexport class AppSlCheckboxControlDirective implements ControlValueAccessor {\n private readonly el = inject(ElementRef);\n\n // eslint-disable-next-line @typescript-eslint/no-empty-function,@typescript-eslint/no-unused-vars\n private onChangeFn = (value: boolean) => {};\n\n // eslint-disable-next-line @typescript-eslint/no-empty-function\n private onTouchedFn = () => {};\n\n readonly checked = model(false);\n\n writeValue(value: boolean): void {\n this.checked.set(value);\n }\n\n registerOnChange(function_: () => void): void {\n this.onChangeFn = function_;\n }\n\n registerOnTouched(function_: () => void): void {\n this.onTouchedFn = function_;\n }\n\n onSlChange(): void {\n const { checked } = this.el.nativeElement;\n this.onChangeFn(checked);\n this.onTouchedFn();\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-example-app/src/app/core/directives/sl-select-control.directive.ts",
            "messages": [
              {
                "ruleId": "@typescript-eslint/no-empty-function",
                "message": "Definition for rule '@typescript-eslint/no-empty-function' was not found.",
                "line": 23,
                "column": 3,
                "endLine": 23,
                "endColumn": 101,
                "severity": 2,
                "nodeType": null
              },
              {
                "ruleId": "@typescript-eslint/no-unused-vars",
                "message": "Definition for rule '@typescript-eslint/no-unused-vars' was not found.",
                "line": 23,
                "column": 3,
                "endLine": 23,
                "endColumn": 101,
                "severity": 2,
                "nodeType": null
              },
              {
                "ruleId": "@typescript-eslint/no-empty-function",
                "message": "Definition for rule '@typescript-eslint/no-empty-function' was not found.",
                "line": 26,
                "column": 3,
                "endLine": 26,
                "endColumn": 67,
                "severity": 2,
                "nodeType": null
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Directive, ElementRef, inject, model } from '@angular/core';\nimport type { ControlValueAccessor } from '@angular/forms';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Directive({\n selector: '[appSlSelectControl]',\n providers: [\n {\n provide: NG_VALUE_ACCESSOR,\n useExisting: AppSlSelectControlDirective,\n multi: true,\n },\n ],\n standalone: true,\n host: {\n '[attr.value]': 'value()',\n '(sl-change)': 'onSlChange()',\n },\n})\nexport class AppSlSelectControlDirective implements ControlValueAccessor {\n private readonly el = inject(ElementRef);\n\n // eslint-disable-next-line @typescript-eslint/no-empty-function,@typescript-eslint/no-unused-vars\n private onChangeFn = (value: unknown) => {};\n\n // eslint-disable-next-line @typescript-eslint/no-empty-function\n private onTouchedFn = () => {};\n\n readonly value = model('');\n\n writeValue(value: string): void {\n this.value.set(value);\n }\n\n registerOnChange(function_: () => void): void {\n this.onChangeFn = function_;\n }\n\n registerOnTouched(function_: () => void): void {\n this.onTouchedFn = function_;\n }\n\n onSlChange(): void {\n const { value } = this.el.nativeElement;\n this.onChangeFn(value);\n this.onTouchedFn();\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-example-app/src/app/core/services/alert.service.ts",
            "messages": [
              {
                "ruleId": "@typescript-eslint/consistent-type-imports",
                "message": "Definition for rule '@typescript-eslint/consistent-type-imports' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 71,
                "severity": 2,
                "nodeType": null
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// eslint-disable-next-line @typescript-eslint/consistent-type-imports\nimport { Injectable, Renderer2, RendererFactory2 } from '@angular/core';\n\nenum AlertType {\n SUCCESS = 'success',\n ERROR = 'error',\n}\n\ntype Alert = {\n message: string;\n type: AlertType;\n hasCountdown?: boolean;\n duration?: number;\n};\n\n@Injectable({\n providedIn: 'root',\n})\nexport class AlertService {\n private readonly renderer: Renderer2;\n\n constructor(rendererFactory: RendererFactory2) {\n this.renderer = rendererFactory.createRenderer(null, null);\n }\n\n createSuccessAlert(message: string) {\n this.createAlert({ message, type: AlertType.SUCCESS, duration: 7000, hasCountdown: true });\n }\n\n createErrorAlert(message: string) {\n this.createAlert({ message, type: AlertType.ERROR });\n }\n\n private createAlert(alert: Alert): void {\n const alertElement = this.createAlertElement(alert);\n const container = document.body;\n this.renderer.appendChild(container, alertElement);\n alertElement.toast();\n }\n\n private createAlertElement(alert: Alert): HTMLElement & { toast: () => void } {\n const alertElement = this.renderer.createElement('sl-alert');\n alertElement.classList.add(`alert--${alert.type}`);\n this.renderer.setAttribute(alertElement, 'closable', '');\n this.renderer.setAttribute(alertElement, 'variant', alert.type);\n if (alert.duration) {\n this.renderer.setAttribute(alertElement, 'duration', alert.duration.toString());\n }\n if (alert.hasCountdown) {\n this.renderer.setAttribute(alertElement, 'countdown', 'rtl');\n }\n this.renderer.setProperty(alertElement, 'innerHTML', alert.message);\n return alertElement as HTMLElement & { toast: () => void };\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-example-app/src/app/core/services/cookie-consent.service.ts",
            "messages": [
              {
                "ruleId": "@typescript-eslint/max-params",
                "message": "Definition for rule '@typescript-eslint/max-params' was not found.",
                "line": 5,
                "column": 3,
                "endLine": 5,
                "endColumn": 60,
                "severity": 2,
                "nodeType": null
              },
              {
                "ruleId": null,
                "message": "Unused eslint-disable directive (no problems were reported from 'camelcase').",
                "line": 46,
                "column": 11,
                "severity": 1,
                "nodeType": null,
                "fix": {
                  "range": [
                    1223,
                    1252
                  ],
                  "text": " "
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 1,
            "fixableErrorCount": 0,
            "fixableWarningCount": 1,
            "source": "import { inject, Injectable } from '@angular/core';\nimport { LOCAL_STORAGE } from '~core/providers/local-storage';\n\ndeclare const window: Window &\n // eslint-disable-next-line @typescript-eslint/max-params\n typeof globalThis & { gtag?: (a: string, b: string, o: object) => void };\n\nconst CONSENT_COOKIE_KEY = 'isCookiesConsentAccepted';\nconst CONSENT_COOKIE_VALUE = 'true';\n\nexport enum ConsentState {\n DENIED = 'denied',\n GRANTED = 'granted',\n}\n\n@Injectable({\n providedIn: 'root',\n})\nexport class CookieConsentService {\n private readonly localStorage: Storage | null = inject(LOCAL_STORAGE);\n\n setCookieConsent(state: ConsentState): boolean {\n if (!this.setConsentInLocalStorage()) {\n return false;\n }\n return this.updateGtagConsent(state);\n }\n\n getCookieState(): boolean {\n return this.localStorage?.getItem(CONSENT_COOKIE_KEY) === CONSENT_COOKIE_VALUE;\n }\n\n private setConsentInLocalStorage(): boolean {\n try {\n this.localStorage?.setItem(CONSENT_COOKIE_KEY, CONSENT_COOKIE_VALUE);\n return true;\n } catch {\n return false;\n }\n }\n\n private updateGtagConsent(state: ConsentState): boolean {\n try {\n if (window.gtag) {\n const consentOptions = {\n /bin /boot /cdrom /dev /etc /home /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /swapfile /sys /tmp /usr /var eslint-disable camelcase*/\n ad_user_data: state,\n ad_personalization: state,\n ad_storage: state,\n analytics_storage: state,\n };\n\n if (state === ConsentState.DENIED) {\n window.gtag('consent', 'default', {\n ...consentOptions,\n wait_for_update: 500,\n /bin /boot /cdrom /dev /etc /home /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /swapfile /sys /tmp /usr /var eslint-enable camelcase*/\n });\n } else {\n window.gtag('consent', 'update', {\n ...consentOptions,\n });\n }\n }\n return true;\n } catch {\n return false;\n }\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-example-app/src/app/core/services/crop-image.service.ts",
            "messages": [
              {
                "ruleId": null,
                "message": "Unused eslint-disable directive (no problems were reported from 'max-statements').",
                "line": 48,
                "column": 3,
                "severity": 1,
                "nodeType": null,
                "fix": {
                  "range": [
                    1498,
                    1540
                  ],
                  "text": " "
                }
              },
              {
                "ruleId": null,
                "message": "Unused eslint-disable directive (no problems were reported from 'max-lines-per-function').",
                "line": 72,
                "column": 3,
                "severity": 1,
                "nodeType": null,
                "fix": {
                  "range": [
                    2250,
                    2300
                  ],
                  "text": " "
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 0,
            "fatalErrorCount": 0,
            "warningCount": 2,
            "fixableErrorCount": 0,
            "fixableWarningCount": 2,
            "source": "import { Injectable } from '@angular/core';\n\n@Injectable({\n providedIn: 'root',\n})\nexport class CropImageService {\n async getCroppedImageURL(canvas: HTMLCanvasElement, imageUrl: string): Promise<string> {\n return new Promise((resolve, reject) => {\n const context = canvas.getContext('2d', { willReadFrequently: true });\n if (!context) {\n reject(new Error('Canvas context not found'));\n return;\n }\n\n const image = new Image();\n image.crossOrigin = 'Anonymous';\n image.src = imageUrl;\n image.addEventListener('load', () => {\n canvas.width = image.width;\n canvas.height = image.height;\n context.drawImage(image, 0, 0);\n const croppedImageUrl = this.cropImageToFitContent({ context, image, canvas });\n resolve(croppedImageUrl);\n });\n\n image.addEventListener('error', () => {\n reject(new Error('Image failed to load'));\n });\n });\n }\n\n private cropImageToFitContent({\n context,\n image,\n canvas,\n }: {\n context: CanvasRenderingContext2D;\n image: HTMLImageElement;\n canvas: HTMLCanvasElement;\n }): string {\n const imageData = context.getImageData(0, 0, canvas.width, canvas.height);\n const { top, bottom, left, right } = this.findCropBoundaries(imageData, canvas);\n const croppedWidth = Math.max(right - left, 1);\n const croppedHeight = Math.max(bottom - top, 1);\n return this.createCroppedImage({ image, left, top, croppedWidth, croppedHeight });\n }\n\n // eslint-disable-next-line max-statements\n private findCropBoundaries(imageData: ImageData, canvas: HTMLCanvasElement) {\n let bottom = 0,\n left = canvas.width,\n right = 0,\n top = canvas.height;\n\n for (let row = 0; row < canvas.height; row++) {\n for (let column = 0; column < canvas.width; column++) {\n const index = (row angular-example-app.report.json angular.json CHANGELOG.md commitlint.config.js e2e _eslint.config.js eslint.config.js eslint.config.mjs karma.conf.js lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json playwright.config.ts public README.md src tsconfig.app.json tsconfig.eslint.json tsconfig.json tsconfig.spec.json canvas.width + column) angular-example-app.report.json angular.json CHANGELOG.md commitlint.config.js e2e _eslint.config.js eslint.config.js eslint.config.mjs karma.conf.js lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json playwright.config.ts public README.md src tsconfig.app.json tsconfig.eslint.json tsconfig.json tsconfig.spec.json 4;\n const alpha = imageData.data[index + 3];\n if (alpha > 0) {\n // Update boundaries for non-transparent pixel\n top = Math.min(top, row);\n bottom = Math.max(bottom, row);\n left = Math.min(left, column);\n right = Math.max(right, column);\n }\n }\n }\n\n return { top, bottom, left, right };\n }\n\n // eslint-disable-next-line max-lines-per-function\n private createCroppedImage({\n image,\n left,\n top,\n croppedWidth,\n croppedHeight,\n }: {\n image: HTMLImageElement;\n left: number;\n top: number;\n croppedWidth: number;\n croppedHeight: number;\n }): string {\n const croppedCanvas = document.createElement('canvas');\n const croppedContext = croppedCanvas.getContext('2d');\n if (!croppedContext) {\n return '';\n }\n croppedCanvas.width = croppedWidth;\n croppedCanvas.height = croppedHeight;\n\n croppedContext.drawImage(\n image,\n left,\n top,\n croppedWidth,\n croppedHeight,\n 0,\n 0,\n croppedWidth,\n croppedHeight,\n );\n\n return croppedCanvas.toDataURL();\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-example-app/src/app/features/pokemon/pages/pokemon-detail/pokemon-detail.component.ts",
            "messages": [
              {
                "ruleId": null,
                "message": "Unused eslint-disable directive (no problems were reported from '@angular-eslint/prefer-signals').",
                "line": 39,
                "column": 3,
                "severity": 1,
                "nodeType": null,
                "fix": {
                  "range": [
                    1701,
                    1759
                  ],
                  "text": " "
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 0,
            "fatalErrorCount": 0,
            "warningCount": 1,
            "fixableErrorCount": 0,
            "fixableWarningCount": 1,
            "source": "import type { OnInit } from '@angular/core';\nimport {\n ChangeDetectionStrategy,\n ChangeDetectorRef,\n Component,\n CUSTOM_ELEMENTS_SCHEMA,\n DestroyRef,\n inject,\n signal,\n} from '@angular/core';\nimport { PokemonService } from '~features/pokemon/services/pokemon.service';\nimport type { Pokemon } from '~features/pokemon/types/pokemon.type';\nimport type { ParamMap } from '@angular/router';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { PokemonBattlefieldComponent } from '~features/pokemon/components/pokemon-battlefield/pokemon-battlefield.component';\nimport { PokedexComponent } from '~features/pokemon/components/pokedex/pokedex.component';\nimport { BattleEvent } from '~features/pokemon/components/pokedex/enums/pokedex-action.enum';\nimport { translations } from '../../../../../locale/translations';\nimport { AlertService } from '~core/services/alert.service';\nimport { ROOT_URLS } from '~core/constants/urls.constants';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\n\n@Component({\n selector: 'app-pokemon-detail',\n templateUrl: './pokemon-detail.component.html',\n styleUrl: './pokemon-detail.component.scss',\n changeDetection: ChangeDetectionStrategy.OnPush,\n schemas: [CUSTOM_ELEMENTS_SCHEMA],\n imports: [PokemonBattlefieldComponent, PokedexComponent],\n})\nexport class PokemonDetailComponent implements OnInit {\n private readonly changeDetectorRef = inject(ChangeDetectorRef);\n readonly router = inject(Router);\n private readonly destroyRef = inject(DestroyRef);\n private readonly activatedRoute = inject(ActivatedRoute);\n private readonly pokemonService = inject(PokemonService);\n private readonly alertService = inject(AlertService);\n\n // eslint-disable-next-line @angular-eslint/prefer-signals\n pokemonBattleEvent = signal(BattleEvent.POKEMON_LOADED);\n\n pokemon!: Pokemon;\n\n ngOnInit() {\n this.activatedRoute.paramMap.pipe(takeUntilDestroyed(this.destroyRef)).subscribe({\n next: (parameterMap) => {\n this.handleRouteChange(parameterMap);\n },\n });\n }\n\n private handleRouteChange(parameterMap: ParamMap) {\n const pokemonId = parameterMap.get('pokemonId');\n if (pokemonId) {\n this.loadPokemonData(pokemonId);\n }\n }\n\n private loadPokemonData(pokemonId: string) {\n this.pokemonService\n .getPokemon(pokemonId)\n .pipe(takeUntilDestroyed(this.destroyRef))\n .subscribe({\n next: (pokemon) => {\n this.pokemon = pokemon;\n this.pokemonBattleEvent.set(BattleEvent.RESET_BATTLE);\n this.changeDetectorRef.markForCheck();\n },\n error: () => {\n this.alertService.createErrorAlert(translations.pokemonNotFoundError);\n void this.router.navigate([ROOT_URLS.error404]);\n },\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-example-app/src/main.ts",
            "messages": [
              {
                "ruleId": null,
                "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
                "line": 10,
                "column": 3,
                "severity": 1,
                "nodeType": null,
                "fix": {
                  "range": [
                    443,
                    481
                  ],
                  "text": " "
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 0,
            "fatalErrorCount": 0,
            "warningCount": 1,
            "fixableErrorCount": 0,
            "fixableWarningCount": 1,
            "source": "/// <reference types=\"@angular/localize\" />\nimport { bootstrapApplication } from '@angular/platform-browser';\nimport { AppComponent } from './app/app.component';\nimport { appConfig } from './app/app.config';\nimport { setBasePath } from '@shoelace-style/shoelace/dist/utilities/base-path.js';\n\nsetBasePath('https://cdn.jsdelivr.net/npm/@shoelace-style/shoelace@2.17.1/cdn/');\n\nbootstrapApplication(AppComponent, appConfig).catch((error) => {\n // eslint-disable-next-line no-console\n console.error(error);\n});\n",
            "usedDeprecatedRules": []
          }
        ],
        "all": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-example-app/src/app/core/components/theme-button/theme-button.component.ts",
            "messages": [
              {
                "ruleId": "@typescript-eslint/prefer-nullish-coalescing",
                "message": "Definition for rule '@typescript-eslint/prefer-nullish-coalescing' was not found.",
                "line": 40,
                "column": 7,
                "endLine": 40,
                "endColumn": 79,
                "severity": 2,
                "nodeType": null
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n CUSTOM_ELEMENTS_SCHEMA,\n effect,\n inject,\n} from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthenticationService } from '~features/authentication/services/authentication.service';\nimport { Theme, ThemeManagerService } from '~core/services/theme-manager.service';\n\nimport '@shoelace-style/shoelace/dist/components/button/button.js';\nimport '@shoelace-style/shoelace/dist/components/icon/icon.js';\n\n@Component({\n selector: 'app-theme-button',\n templateUrl: './theme-button.component.html',\n standalone: true,\n changeDetection: ChangeDetectionStrategy.OnPush,\n schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class ThemeButtonComponent {\n private readonly authenticationService = inject(AuthenticationService);\n private readonly themeManagerService = inject(ThemeManagerService);\n\n readonly router = inject(Router);\n readonly Theme = Theme;\n\n isUserLoggedIn = this.authenticationService.isUserLoggedIn();\n themeSelected = this.themeManagerService.getThemeFromLocalStorageValue();\n\n constructor() {\n effect(() => {\n this.isUserLoggedIn = this.authenticationService.isUserLoggedIn();\n });\n }\n\n toggleTheme() {\n this.themeSelected =\n // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n this.themeManagerService.getThemeFromLocalStorageValue() === Theme.DARK ||\n this.themeSelected === null\n ? Theme.LIGHT\n : Theme.DARK;\n this.themeManagerService.setTheme(this.themeSelected);\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-example-app/src/app/core/directives/sl-checkbox-control.directive.ts",
            "messages": [
              {
                "ruleId": "@typescript-eslint/no-empty-function",
                "message": "Definition for rule '@typescript-eslint/no-empty-function' was not found.",
                "line": 23,
                "column": 3,
                "endLine": 23,
                "endColumn": 101,
                "severity": 2,
                "nodeType": null
              },
              {
                "ruleId": "@typescript-eslint/no-unused-vars",
                "message": "Definition for rule '@typescript-eslint/no-unused-vars' was not found.",
                "line": 23,
                "column": 3,
                "endLine": 23,
                "endColumn": 101,
                "severity": 2,
                "nodeType": null
              },
              {
                "ruleId": "@typescript-eslint/no-empty-function",
                "message": "Definition for rule '@typescript-eslint/no-empty-function' was not found.",
                "line": 26,
                "column": 3,
                "endLine": 26,
                "endColumn": 67,
                "severity": 2,
                "nodeType": null
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Directive, ElementRef, inject, model } from '@angular/core';\nimport type { ControlValueAccessor } from '@angular/forms';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Directive({\n selector: '[appSlCheckboxControl]',\n providers: [\n {\n provide: NG_VALUE_ACCESSOR,\n useExisting: AppSlCheckboxControlDirective,\n multi: true,\n },\n ],\n standalone: true,\n host: {\n '[attr.checked]': 'checked()',\n '(sl-change)': 'onSlChange()',\n },\n})\nexport class AppSlCheckboxControlDirective implements ControlValueAccessor {\n private readonly el = inject(ElementRef);\n\n // eslint-disable-next-line @typescript-eslint/no-empty-function,@typescript-eslint/no-unused-vars\n private onChangeFn = (value: boolean) => {};\n\n // eslint-disable-next-line @typescript-eslint/no-empty-function\n private onTouchedFn = () => {};\n\n readonly checked = model(false);\n\n writeValue(value: boolean): void {\n this.checked.set(value);\n }\n\n registerOnChange(function_: () => void): void {\n this.onChangeFn = function_;\n }\n\n registerOnTouched(function_: () => void): void {\n this.onTouchedFn = function_;\n }\n\n onSlChange(): void {\n const { checked } = this.el.nativeElement;\n this.onChangeFn(checked);\n this.onTouchedFn();\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-example-app/src/app/core/directives/sl-select-control.directive.ts",
            "messages": [
              {
                "ruleId": "@typescript-eslint/no-empty-function",
                "message": "Definition for rule '@typescript-eslint/no-empty-function' was not found.",
                "line": 23,
                "column": 3,
                "endLine": 23,
                "endColumn": 101,
                "severity": 2,
                "nodeType": null
              },
              {
                "ruleId": "@typescript-eslint/no-unused-vars",
                "message": "Definition for rule '@typescript-eslint/no-unused-vars' was not found.",
                "line": 23,
                "column": 3,
                "endLine": 23,
                "endColumn": 101,
                "severity": 2,
                "nodeType": null
              },
              {
                "ruleId": "@typescript-eslint/no-empty-function",
                "message": "Definition for rule '@typescript-eslint/no-empty-function' was not found.",
                "line": 26,
                "column": 3,
                "endLine": 26,
                "endColumn": 67,
                "severity": 2,
                "nodeType": null
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Directive, ElementRef, inject, model } from '@angular/core';\nimport type { ControlValueAccessor } from '@angular/forms';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Directive({\n selector: '[appSlSelectControl]',\n providers: [\n {\n provide: NG_VALUE_ACCESSOR,\n useExisting: AppSlSelectControlDirective,\n multi: true,\n },\n ],\n standalone: true,\n host: {\n '[attr.value]': 'value()',\n '(sl-change)': 'onSlChange()',\n },\n})\nexport class AppSlSelectControlDirective implements ControlValueAccessor {\n private readonly el = inject(ElementRef);\n\n // eslint-disable-next-line @typescript-eslint/no-empty-function,@typescript-eslint/no-unused-vars\n private onChangeFn = (value: unknown) => {};\n\n // eslint-disable-next-line @typescript-eslint/no-empty-function\n private onTouchedFn = () => {};\n\n readonly value = model('');\n\n writeValue(value: string): void {\n this.value.set(value);\n }\n\n registerOnChange(function_: () => void): void {\n this.onChangeFn = function_;\n }\n\n registerOnTouched(function_: () => void): void {\n this.onTouchedFn = function_;\n }\n\n onSlChange(): void {\n const { value } = this.el.nativeElement;\n this.onChangeFn(value);\n this.onTouchedFn();\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-example-app/src/app/core/services/alert.service.ts",
            "messages": [
              {
                "ruleId": "@typescript-eslint/consistent-type-imports",
                "message": "Definition for rule '@typescript-eslint/consistent-type-imports' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 71,
                "severity": 2,
                "nodeType": null
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// eslint-disable-next-line @typescript-eslint/consistent-type-imports\nimport { Injectable, Renderer2, RendererFactory2 } from '@angular/core';\n\nenum AlertType {\n SUCCESS = 'success',\n ERROR = 'error',\n}\n\ntype Alert = {\n message: string;\n type: AlertType;\n hasCountdown?: boolean;\n duration?: number;\n};\n\n@Injectable({\n providedIn: 'root',\n})\nexport class AlertService {\n private readonly renderer: Renderer2;\n\n constructor(rendererFactory: RendererFactory2) {\n this.renderer = rendererFactory.createRenderer(null, null);\n }\n\n createSuccessAlert(message: string) {\n this.createAlert({ message, type: AlertType.SUCCESS, duration: 7000, hasCountdown: true });\n }\n\n createErrorAlert(message: string) {\n this.createAlert({ message, type: AlertType.ERROR });\n }\n\n private createAlert(alert: Alert): void {\n const alertElement = this.createAlertElement(alert);\n const container = document.body;\n this.renderer.appendChild(container, alertElement);\n alertElement.toast();\n }\n\n private createAlertElement(alert: Alert): HTMLElement & { toast: () => void } {\n const alertElement = this.renderer.createElement('sl-alert');\n alertElement.classList.add(`alert--${alert.type}`);\n this.renderer.setAttribute(alertElement, 'closable', '');\n this.renderer.setAttribute(alertElement, 'variant', alert.type);\n if (alert.duration) {\n this.renderer.setAttribute(alertElement, 'duration', alert.duration.toString());\n }\n if (alert.hasCountdown) {\n this.renderer.setAttribute(alertElement, 'countdown', 'rtl');\n }\n this.renderer.setProperty(alertElement, 'innerHTML', alert.message);\n return alertElement as HTMLElement & { toast: () => void };\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-example-app/src/app/core/services/cookie-consent.service.ts",
            "messages": [
              {
                "ruleId": "@typescript-eslint/max-params",
                "message": "Definition for rule '@typescript-eslint/max-params' was not found.",
                "line": 5,
                "column": 3,
                "endLine": 5,
                "endColumn": 60,
                "severity": 2,
                "nodeType": null
              },
              {
                "ruleId": null,
                "message": "Unused eslint-disable directive (no problems were reported from 'camelcase').",
                "line": 46,
                "column": 11,
                "severity": 1,
                "nodeType": null,
                "fix": {
                  "range": [
                    1223,
                    1252
                  ],
                  "text": " "
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 1,
            "fixableErrorCount": 0,
            "fixableWarningCount": 1,
            "source": "import { inject, Injectable } from '@angular/core';\nimport { LOCAL_STORAGE } from '~core/providers/local-storage';\n\ndeclare const window: Window &\n // eslint-disable-next-line @typescript-eslint/max-params\n typeof globalThis & { gtag?: (a: string, b: string, o: object) => void };\n\nconst CONSENT_COOKIE_KEY = 'isCookiesConsentAccepted';\nconst CONSENT_COOKIE_VALUE = 'true';\n\nexport enum ConsentState {\n DENIED = 'denied',\n GRANTED = 'granted',\n}\n\n@Injectable({\n providedIn: 'root',\n})\nexport class CookieConsentService {\n private readonly localStorage: Storage | null = inject(LOCAL_STORAGE);\n\n setCookieConsent(state: ConsentState): boolean {\n if (!this.setConsentInLocalStorage()) {\n return false;\n }\n return this.updateGtagConsent(state);\n }\n\n getCookieState(): boolean {\n return this.localStorage?.getItem(CONSENT_COOKIE_KEY) === CONSENT_COOKIE_VALUE;\n }\n\n private setConsentInLocalStorage(): boolean {\n try {\n this.localStorage?.setItem(CONSENT_COOKIE_KEY, CONSENT_COOKIE_VALUE);\n return true;\n } catch {\n return false;\n }\n }\n\n private updateGtagConsent(state: ConsentState): boolean {\n try {\n if (window.gtag) {\n const consentOptions = {\n /bin /boot /cdrom /dev /etc /home /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /swapfile /sys /tmp /usr /var eslint-disable camelcase*/\n ad_user_data: state,\n ad_personalization: state,\n ad_storage: state,\n analytics_storage: state,\n };\n\n if (state === ConsentState.DENIED) {\n window.gtag('consent', 'default', {\n ...consentOptions,\n wait_for_update: 500,\n /bin /boot /cdrom /dev /etc /home /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /swapfile /sys /tmp /usr /var eslint-enable camelcase*/\n });\n } else {\n window.gtag('consent', 'update', {\n ...consentOptions,\n });\n }\n }\n return true;\n } catch {\n return false;\n }\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-example-app/src/app/core/services/crop-image.service.ts",
            "messages": [
              {
                "ruleId": null,
                "message": "Unused eslint-disable directive (no problems were reported from 'max-statements').",
                "line": 48,
                "column": 3,
                "severity": 1,
                "nodeType": null,
                "fix": {
                  "range": [
                    1498,
                    1540
                  ],
                  "text": " "
                }
              },
              {
                "ruleId": null,
                "message": "Unused eslint-disable directive (no problems were reported from 'max-lines-per-function').",
                "line": 72,
                "column": 3,
                "severity": 1,
                "nodeType": null,
                "fix": {
                  "range": [
                    2250,
                    2300
                  ],
                  "text": " "
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 0,
            "fatalErrorCount": 0,
            "warningCount": 2,
            "fixableErrorCount": 0,
            "fixableWarningCount": 2,
            "source": "import { Injectable } from '@angular/core';\n\n@Injectable({\n providedIn: 'root',\n})\nexport class CropImageService {\n async getCroppedImageURL(canvas: HTMLCanvasElement, imageUrl: string): Promise<string> {\n return new Promise((resolve, reject) => {\n const context = canvas.getContext('2d', { willReadFrequently: true });\n if (!context) {\n reject(new Error('Canvas context not found'));\n return;\n }\n\n const image = new Image();\n image.crossOrigin = 'Anonymous';\n image.src = imageUrl;\n image.addEventListener('load', () => {\n canvas.width = image.width;\n canvas.height = image.height;\n context.drawImage(image, 0, 0);\n const croppedImageUrl = this.cropImageToFitContent({ context, image, canvas });\n resolve(croppedImageUrl);\n });\n\n image.addEventListener('error', () => {\n reject(new Error('Image failed to load'));\n });\n });\n }\n\n private cropImageToFitContent({\n context,\n image,\n canvas,\n }: {\n context: CanvasRenderingContext2D;\n image: HTMLImageElement;\n canvas: HTMLCanvasElement;\n }): string {\n const imageData = context.getImageData(0, 0, canvas.width, canvas.height);\n const { top, bottom, left, right } = this.findCropBoundaries(imageData, canvas);\n const croppedWidth = Math.max(right - left, 1);\n const croppedHeight = Math.max(bottom - top, 1);\n return this.createCroppedImage({ image, left, top, croppedWidth, croppedHeight });\n }\n\n // eslint-disable-next-line max-statements\n private findCropBoundaries(imageData: ImageData, canvas: HTMLCanvasElement) {\n let bottom = 0,\n left = canvas.width,\n right = 0,\n top = canvas.height;\n\n for (let row = 0; row < canvas.height; row++) {\n for (let column = 0; column < canvas.width; column++) {\n const index = (row angular-example-app.report.json angular.json CHANGELOG.md commitlint.config.js e2e _eslint.config.js eslint.config.js eslint.config.mjs karma.conf.js lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json playwright.config.ts public README.md src tsconfig.app.json tsconfig.eslint.json tsconfig.json tsconfig.spec.json canvas.width + column) angular-example-app.report.json angular.json CHANGELOG.md commitlint.config.js e2e _eslint.config.js eslint.config.js eslint.config.mjs karma.conf.js lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json playwright.config.ts public README.md src tsconfig.app.json tsconfig.eslint.json tsconfig.json tsconfig.spec.json 4;\n const alpha = imageData.data[index + 3];\n if (alpha > 0) {\n // Update boundaries for non-transparent pixel\n top = Math.min(top, row);\n bottom = Math.max(bottom, row);\n left = Math.min(left, column);\n right = Math.max(right, column);\n }\n }\n }\n\n return { top, bottom, left, right };\n }\n\n // eslint-disable-next-line max-lines-per-function\n private createCroppedImage({\n image,\n left,\n top,\n croppedWidth,\n croppedHeight,\n }: {\n image: HTMLImageElement;\n left: number;\n top: number;\n croppedWidth: number;\n croppedHeight: number;\n }): string {\n const croppedCanvas = document.createElement('canvas');\n const croppedContext = croppedCanvas.getContext('2d');\n if (!croppedContext) {\n return '';\n }\n croppedCanvas.width = croppedWidth;\n croppedCanvas.height = croppedHeight;\n\n croppedContext.drawImage(\n image,\n left,\n top,\n croppedWidth,\n croppedHeight,\n 0,\n 0,\n croppedWidth,\n croppedHeight,\n );\n\n return croppedCanvas.toDataURL();\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-example-app/src/locale/translations.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/runtime-localize",
                "severity": 2,
                "message": "$localize could be called before translations are loaded",
                "line": 2,
                "column": 10,
                "nodeType": null,
                "messageId": "runtimeLocalize",
                "endLine": 2,
                "endColumn": 19
              },
              {
                "ruleId": "@angular-eslint/runtime-localize",
                "severity": 2,
                "message": "$localize could be called before translations are loaded",
                "line": 3,
                "column": 9,
                "nodeType": null,
                "messageId": "runtimeLocalize",
                "endLine": 3,
                "endColumn": 18
              },
              {
                "ruleId": "@angular-eslint/runtime-localize",
                "severity": 2,
                "message": "$localize could be called before translations are loaded",
                "line": 4,
                "column": 10,
                "nodeType": null,
                "messageId": "runtimeLocalize",
                "endLine": 4,
                "endColumn": 19
              },
              {
                "ruleId": "@angular-eslint/runtime-localize",
                "severity": 2,
                "message": "$localize could be called before translations are loaded",
                "line": 5,
                "column": 13,
                "nodeType": null,
                "messageId": "runtimeLocalize",
                "endLine": 5,
                "endColumn": 22
              },
              {
                "ruleId": "@angular-eslint/runtime-localize",
                "severity": 2,
                "message": "$localize could be called before translations are loaded",
                "line": 6,
                "column": 14,
                "nodeType": null,
                "messageId": "runtimeLocalize",
                "endLine": 6,
                "endColumn": 23
              },
              {
                "ruleId": "@angular-eslint/runtime-localize",
                "severity": 2,
                "message": "$localize could be called before translations are loaded",
                "line": 7,
                "column": 14,
                "nodeType": null,
                "messageId": "runtimeLocalize",
                "endLine": 7,
                "endColumn": 23
              },
              {
                "ruleId": "@angular-eslint/runtime-localize",
                "severity": 2,
                "message": "$localize could be called before translations are loaded",
                "line": 8,
                "column": 11,
                "nodeType": null,
                "messageId": "runtimeLocalize",
                "endLine": 8,
                "endColumn": 20
              },
              {
                "ruleId": "@angular-eslint/runtime-localize",
                "severity": 2,
                "message": "$localize could be called before translations are loaded",
                "line": 9,
                "column": 18,
                "nodeType": null,
                "messageId": "runtimeLocalize",
                "endLine": 9,
                "endColumn": 27
              },
              {
                "ruleId": "@angular-eslint/runtime-localize",
                "severity": 2,
                "message": "$localize could be called before translations are loaded",
                "line": 10,
                "column": 18,
                "nodeType": null,
                "messageId": "runtimeLocalize",
                "endLine": 10,
                "endColumn": 27
              },
              {
                "ruleId": "@angular-eslint/runtime-localize",
                "severity": 2,
                "message": "$localize could be called before translations are loaded",
                "line": 11,
                "column": 21,
                "nodeType": null,
                "messageId": "runtimeLocalize",
                "endLine": 11,
                "endColumn": 30
              },
              {
                "ruleId": "@angular-eslint/runtime-localize",
                "severity": 2,
                "message": "$localize could be called before translations are loaded",
                "line": 12,
                "column": 28,
                "nodeType": null,
                "messageId": "runtimeLocalize",
                "endLine": 12,
                "endColumn": 37
              },
              {
                "ruleId": "@angular-eslint/runtime-localize",
                "severity": 2,
                "message": "$localize could be called before translations are loaded",
                "line": 13,
                "column": 20,
                "nodeType": null,
                "messageId": "runtimeLocalize",
                "endLine": 13,
                "endColumn": 29
              },
              {
                "ruleId": "@angular-eslint/runtime-localize",
                "severity": 2,
                "message": "$localize could be called before translations are loaded",
                "line": 14,
                "column": 11,
                "nodeType": null,
                "messageId": "runtimeLocalize",
                "endLine": 14,
                "endColumn": 20
              },
              {
                "ruleId": "@angular-eslint/runtime-localize",
                "severity": 2,
                "message": "$localize could be called before translations are loaded",
                "line": 15,
                "column": 13,
                "nodeType": null,
                "messageId": "runtimeLocalize",
                "endLine": 15,
                "endColumn": 22
              },
              {
                "ruleId": "@angular-eslint/runtime-localize",
                "severity": 2,
                "message": "$localize could be called before translations are loaded",
                "line": 16,
                "column": 16,
                "nodeType": null,
                "messageId": "runtimeLocalize",
                "endLine": 16,
                "endColumn": 25
              },
              {
                "ruleId": "@angular-eslint/runtime-localize",
                "severity": 2,
                "message": "$localize could be called before translations are loaded",
                "line": 17,
                "column": 26,
                "nodeType": null,
                "messageId": "runtimeLocalize",
                "endLine": 17,
                "endColumn": 35
              },
              {
                "ruleId": "@angular-eslint/runtime-localize",
                "severity": 2,
                "message": "$localize could be called before translations are loaded",
                "line": 18,
                "column": 22,
                "nodeType": null,
                "messageId": "runtimeLocalize",
                "endLine": 18,
                "endColumn": 31
              },
              {
                "ruleId": "@angular-eslint/runtime-localize",
                "severity": 2,
                "message": "$localize could be called before translations are loaded",
                "line": 19,
                "column": 26,
                "nodeType": null,
                "messageId": "runtimeLocalize",
                "endLine": 19,
                "endColumn": 35
              },
              {
                "ruleId": "@angular-eslint/runtime-localize",
                "severity": 2,
                "message": "$localize could be called before translations are loaded",
                "line": 20,
                "column": 25,
                "nodeType": null,
                "messageId": "runtimeLocalize",
                "endLine": 20,
                "endColumn": 34
              },
              {
                "ruleId": "@angular-eslint/runtime-localize",
                "severity": 2,
                "message": "$localize could be called before translations are loaded",
                "line": 21,
                "column": 25,
                "nodeType": null,
                "messageId": "runtimeLocalize",
                "endLine": 21,
                "endColumn": 34
              },
              {
                "ruleId": "@angular-eslint/runtime-localize",
                "severity": 2,
                "message": "$localize could be called before translations are loaded",
                "line": 22,
                "column": 19,
                "nodeType": null,
                "messageId": "runtimeLocalize",
                "endLine": 22,
                "endColumn": 28
              }
            ],
            "suppressedMessages": [],
            "errorCount": 21,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "export const translations = {\n title: $localize`Angular Example App`,\n home: $localize`Home`,\n logIn: $localize`Log in`,\n register: $localize`Register`,\n myAccount: $localize`My account`,\n myPokemon: $localize`My pokemon`,\n logOut: $localize`Log out`,\n fieldRequired: $localize`Field required.`,\n emailHelpText: $localize`No real email validation. Field required. Format: example@domain.com`,\n passwordHelpText: $localize`Must contain at least one lowercase letter, one uppercase letter and one number. No special characters.`,\n confirmPasswordHelpText: $localize`Passwords do not match.`,\n pokemonHelpText: $localize`Field required. PokeAPI does not found that pokemon name.`,\n logout: $localize`Log out`,\n findMore: $localize`Find more!`,\n findPokemon: $localize`Find a pokemon`,\n myAccountSuccessAlert: $localize`Account settings saved. You're all set!`,\n genericErrorAlert: $localize`Oops! Something went wrong. Please try again later or leave an issue if it persists.`,\n loginCredentialsError: $localize`Invalid credentials. Not very effective, try again!`,\n genericRegisterError: $localize`Register failed. This attempt wasn’t very effective, try again!`,\n pokemonNotFoundError: $localize`Pokémon not found. Double-check the name and try again!`,\n sessionExpired: $localize`Session expired. Please log in.`,\n};\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-example-app/src/main.ts",
            "messages": [
              {
                "ruleId": null,
                "message": "Unused eslint-disable directive (no problems were reported from 'no-console').",
                "line": 10,
                "column": 3,
                "severity": 1,
                "nodeType": null,
                "fix": {
                  "range": [
                    443,
                    481
                  ],
                  "text": " "
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 0,
            "fatalErrorCount": 0,
            "warningCount": 1,
            "fixableErrorCount": 0,
            "fixableWarningCount": 1,
            "source": "/// <reference types=\"@angular/localize\" />\nimport { bootstrapApplication } from '@angular/platform-browser';\nimport { AppComponent } from './app/app.component';\nimport { appConfig } from './app/app.config';\nimport { setBasePath } from '@shoelace-style/shoelace/dist/utilities/base-path.js';\n\nsetBasePath('https://cdn.jsdelivr.net/npm/@shoelace-style/shoelace@2.17.1/cdn/');\n\nbootstrapApplication(AppComponent, appConfig).catch((error) => {\n // eslint-disable-next-line no-console\n console.error(error);\n});\n",
            "usedDeprecatedRules": []
          }
        ]
      }
    },
    "after": {
      "angularexampleapp": {
        "recommended": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-example-app/src/app/core/components/theme-button/theme-button.component.ts",
            "messages": [
              {
                "ruleId": "@typescript-eslint/prefer-nullish-coalescing",
                "message": "Definition for rule '@typescript-eslint/prefer-nullish-coalescing' was not found.",
                "line": 40,
                "column": 7,
                "endLine": 40,
                "endColumn": 79,
                "severity": 2,
                "nodeType": null
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n CUSTOM_ELEMENTS_SCHEMA,\n effect,\n inject,\n} from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthenticationService } from '~features/authentication/services/authentication.service';\nimport { Theme, ThemeManagerService } from '~core/services/theme-manager.service';\n\nimport '@shoelace-style/shoelace/dist/components/button/button.js';\nimport '@shoelace-style/shoelace/dist/components/icon/icon.js';\n\n@Component({\n selector: 'app-theme-button',\n templateUrl: './theme-button.component.html',\n standalone: true,\n changeDetection: ChangeDetectionStrategy.OnPush,\n schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class ThemeButtonComponent {\n private readonly authenticationService = inject(AuthenticationService);\n private readonly themeManagerService = inject(ThemeManagerService);\n\n readonly router = inject(Router);\n readonly Theme = Theme;\n\n isUserLoggedIn = this.authenticationService.isUserLoggedIn();\n themeSelected = this.themeManagerService.getThemeFromLocalStorageValue();\n\n constructor() {\n effect(() => {\n this.isUserLoggedIn = this.authenticationService.isUserLoggedIn();\n });\n }\n\n toggleTheme() {\n this.themeSelected =\n // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n this.themeManagerService.getThemeFromLocalStorageValue() === Theme.DARK ||\n this.themeSelected === null\n ? Theme.LIGHT\n : Theme.DARK;\n this.themeManagerService.setTheme(this.themeSelected);\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-example-app/src/app/core/directives/sl-checkbox-control.directive.ts",
            "messages": [
              {
                "ruleId": "@typescript-eslint/no-empty-function",
                "message": "Definition for rule '@typescript-eslint/no-empty-function' was not found.",
                "line": 23,
                "column": 3,
                "endLine": 23,
                "endColumn": 101,
                "severity": 2,
                "nodeType": null
              },
              {
                "ruleId": "@typescript-eslint/no-unused-vars",
                "message": "Definition for rule '@typescript-eslint/no-unused-vars' was not found.",
                "line": 23,
                "column": 3,
                "endLine": 23,
                "endColumn": 101,
                "severity": 2,
                "nodeType": null
              },
              {
                "ruleId": "@typescript-eslint/no-empty-function",
                "message": "Definition for rule '@typescript-eslint/no-empty-function' was not found.",
                "line": 26,
                "column": 3,
                "endLine": 26,
                "endColumn": 67,
                "severity": 2,
                "nodeType": null
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Directive, ElementRef, inject, model } from '@angular/core';\nimport type { ControlValueAccessor } from '@angular/forms';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Directive({\n selector: '[appSlCheckboxControl]',\n providers: [\n {\n provide: NG_VALUE_ACCESSOR,\n useExisting: AppSlCheckboxControlDirective,\n multi: true,\n },\n ],\n standalone: true,\n host: {\n '[attr.checked]': 'checked()',\n '(sl-change)': 'onSlChange()',\n },\n})\nexport class AppSlCheckboxControlDirective implements ControlValueAccessor {\n private readonly el = inject(ElementRef);\n\n // eslint-disable-next-line @typescript-eslint/no-empty-function,@typescript-eslint/no-unused-vars\n private onChangeFn = (value: boolean) => {};\n\n // eslint-disable-next-line @typescript-eslint/no-empty-function\n private onTouchedFn = () => {};\n\n readonly checked = model(false);\n\n writeValue(value: boolean): void {\n this.checked.set(value);\n }\n\n registerOnChange(function_: () => void): void {\n this.onChangeFn = function_;\n }\n\n registerOnTouched(function_: () => void): void {\n this.onTouchedFn = function_;\n }\n\n onSlChange(): void {\n const { checked } = this.el.nativeElement;\n this.onChangeFn(checked);\n this.onTouchedFn();\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-example-app/src/app/core/directives/sl-select-control.directive.ts",
            "messages": [
              {
                "ruleId": "@typescript-eslint/no-empty-function",
                "message": "Definition for rule '@typescript-eslint/no-empty-function' was not found.",
                "line": 23,
                "column": 3,
                "endLine": 23,
                "endColumn": 101,
                "severity": 2,
                "nodeType": null
              },
              {
                "ruleId": "@typescript-eslint/no-unused-vars",
                "message": "Definition for rule '@typescript-eslint/no-unused-vars' was not found.",
                "line": 23,
                "column": 3,
                "endLine": 23,
                "endColumn": 101,
                "severity": 2,
                "nodeType": null
              },
              {
                "ruleId": "@typescript-eslint/no-empty-function",
                "message": "Definition for rule '@typescript-eslint/no-empty-function' was not found.",
                "line": 26,
                "column": 3,
                "endLine": 26,
                "endColumn": 67,
                "severity": 2,
                "nodeType": null
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Directive, ElementRef, inject, model } from '@angular/core';\nimport type { ControlValueAccessor } from '@angular/forms';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Directive({\n selector: '[appSlSelectControl]',\n providers: [\n {\n provide: NG_VALUE_ACCESSOR,\n useExisting: AppSlSelectControlDirective,\n multi: true,\n },\n ],\n standalone: true,\n host: {\n '[attr.value]': 'value()',\n '(sl-change)': 'onSlChange()',\n },\n})\nexport class AppSlSelectControlDirective implements ControlValueAccessor {\n private readonly el = inject(ElementRef);\n\n // eslint-disable-next-line @typescript-eslint/no-empty-function,@typescript-eslint/no-unused-vars\n private onChangeFn = (value: unknown) => {};\n\n // eslint-disable-next-line @typescript-eslint/no-empty-function\n private onTouchedFn = () => {};\n\n readonly value = model('');\n\n writeValue(value: string): void {\n this.value.set(value);\n }\n\n registerOnChange(function_: () => void): void {\n this.onChangeFn = function_;\n }\n\n registerOnTouched(function_: () => void): void {\n this.onTouchedFn = function_;\n }\n\n onSlChange(): void {\n const { value } = this.el.nativeElement;\n this.onChangeFn(value);\n this.onTouchedFn();\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-example-app/src/app/core/services/alert.service.ts",
            "messages": [
              {
                "ruleId": "@typescript-eslint/consistent-type-imports",
                "message": "Definition for rule '@typescript-eslint/consistent-type-imports' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 71,
                "severity": 2,
                "nodeType": null
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// eslint-disable-next-line @typescript-eslint/consistent-type-imports\nimport { Injectable, Renderer2, RendererFactory2 } from '@angular/core';\n\nenum AlertType {\n SUCCESS = 'success',\n ERROR = 'error',\n}\n\ntype Alert = {\n message: string;\n type: AlertType;\n hasCountdown?: boolean;\n duration?: number;\n};\n\n@Injectable({\n providedIn: 'root',\n})\nexport class AlertService {\n private readonly renderer: Renderer2;\n\n constructor(rendererFactory: RendererFactory2) {\n this.renderer = rendererFactory.createRenderer(null, null);\n }\n\n createSuccessAlert(message: string) {\n this.createAlert({ message, type: AlertType.SUCCESS, duration: 7000, hasCountdown: true });\n }\n\n createErrorAlert(message: string) {\n this.createAlert({ message, type: AlertType.ERROR });\n }\n\n private createAlert(alert: Alert): void {\n const alertElement = this.createAlertElement(alert);\n const container = document.body;\n this.renderer.appendChild(container, alertElement);\n alertElement.toast();\n }\n\n private createAlertElement(alert: Alert): HTMLElement & { toast: () => void } {\n const alertElement = this.renderer.createElement('sl-alert');\n alertElement.classList.add(`alert--${alert.type}`);\n this.renderer.setAttribute(alertElement, 'closable', '');\n this.renderer.setAttribute(alertElement, 'variant', alert.type);\n if (alert.duration) {\n this.renderer.setAttribute(alertElement, 'duration', alert.duration.toString());\n }\n if (alert.hasCountdown) {\n this.renderer.setAttribute(alertElement, 'countdown', 'rtl');\n }\n this.renderer.setProperty(alertElement, 'innerHTML', alert.message);\n return alertElement as HTMLElement & { toast: () => void };\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-example-app/src/app/core/services/cookie-consent.service.ts",
            "messages": [
              {
                "ruleId": "@typescript-eslint/max-params",
                "message": "Definition for rule '@typescript-eslint/max-params' was not found.",
                "line": 5,
                "column": 3,
                "endLine": 5,
                "endColumn": 60,
                "severity": 2,
                "nodeType": null
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { inject, Injectable } from '@angular/core';\nimport { LOCAL_STORAGE } from '~core/providers/local-storage';\n\ndeclare const window: Window &\n // eslint-disable-next-line @typescript-eslint/max-params\n typeof globalThis & { gtag?: (a: string, b: string, o: object) => void };\n\nconst CONSENT_COOKIE_KEY = 'isCookiesConsentAccepted';\nconst CONSENT_COOKIE_VALUE = 'true';\n\nexport enum ConsentState {\n DENIED = 'denied',\n GRANTED = 'granted',\n}\n\n@Injectable({\n providedIn: 'root',\n})\nexport class CookieConsentService {\n private readonly localStorage: Storage | null = inject(LOCAL_STORAGE);\n\n setCookieConsent(state: ConsentState): boolean {\n if (!this.setConsentInLocalStorage()) {\n return false;\n }\n return this.updateGtagConsent(state);\n }\n\n getCookieState(): boolean {\n return this.localStorage?.getItem(CONSENT_COOKIE_KEY) === CONSENT_COOKIE_VALUE;\n }\n\n private setConsentInLocalStorage(): boolean {\n try {\n this.localStorage?.setItem(CONSENT_COOKIE_KEY, CONSENT_COOKIE_VALUE);\n return true;\n } catch {\n return false;\n }\n }\n\n private updateGtagConsent(state: ConsentState): boolean {\n try {\n if (window.gtag) {\n const consentOptions = {\n \n ad_user_data: state,\n ad_personalization: state,\n ad_storage: state,\n analytics_storage: state,\n };\n\n if (state === ConsentState.DENIED) {\n window.gtag('consent', 'default', {\n ...consentOptions,\n wait_for_update: 500,\n \n });\n } else {\n window.gtag('consent', 'update', {\n ...consentOptions,\n });\n }\n }\n return true;\n } catch {\n return false;\n }\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-example-app/src/app/features/pokemon/pages/pokemon-detail/pokemon-detail.component.ts",
            "messages": [
              {
                "ruleId": null,
                "message": "Unused eslint-disable directive (no problems were reported from '@angular-eslint/prefer-signals').",
                "line": 39,
                "column": 3,
                "severity": 1,
                "nodeType": null,
                "fix": {
                  "range": [
                    1701,
                    1759
                  ],
                  "text": " "
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 0,
            "fatalErrorCount": 0,
            "warningCount": 1,
            "fixableErrorCount": 0,
            "fixableWarningCount": 1,
            "source": "import type { OnInit } from '@angular/core';\nimport {\n ChangeDetectionStrategy,\n ChangeDetectorRef,\n Component,\n CUSTOM_ELEMENTS_SCHEMA,\n DestroyRef,\n inject,\n signal,\n} from '@angular/core';\nimport { PokemonService } from '~features/pokemon/services/pokemon.service';\nimport type { Pokemon } from '~features/pokemon/types/pokemon.type';\nimport type { ParamMap } from '@angular/router';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { PokemonBattlefieldComponent } from '~features/pokemon/components/pokemon-battlefield/pokemon-battlefield.component';\nimport { PokedexComponent } from '~features/pokemon/components/pokedex/pokedex.component';\nimport { BattleEvent } from '~features/pokemon/components/pokedex/enums/pokedex-action.enum';\nimport { translations } from '../../../../../locale/translations';\nimport { AlertService } from '~core/services/alert.service';\nimport { ROOT_URLS } from '~core/constants/urls.constants';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\n\n@Component({\n selector: 'app-pokemon-detail',\n templateUrl: './pokemon-detail.component.html',\n styleUrl: './pokemon-detail.component.scss',\n changeDetection: ChangeDetectionStrategy.OnPush,\n schemas: [CUSTOM_ELEMENTS_SCHEMA],\n imports: [PokemonBattlefieldComponent, PokedexComponent],\n})\nexport class PokemonDetailComponent implements OnInit {\n private readonly changeDetectorRef = inject(ChangeDetectorRef);\n readonly router = inject(Router);\n private readonly destroyRef = inject(DestroyRef);\n private readonly activatedRoute = inject(ActivatedRoute);\n private readonly pokemonService = inject(PokemonService);\n private readonly alertService = inject(AlertService);\n\n // eslint-disable-next-line @angular-eslint/prefer-signals\n pokemonBattleEvent = signal(BattleEvent.POKEMON_LOADED);\n\n pokemon!: Pokemon;\n\n ngOnInit() {\n this.activatedRoute.paramMap.pipe(takeUntilDestroyed(this.destroyRef)).subscribe({\n next: (parameterMap) => {\n this.handleRouteChange(parameterMap);\n },\n });\n }\n\n private handleRouteChange(parameterMap: ParamMap) {\n const pokemonId = parameterMap.get('pokemonId');\n if (pokemonId) {\n this.loadPokemonData(pokemonId);\n }\n }\n\n private loadPokemonData(pokemonId: string) {\n this.pokemonService\n .getPokemon(pokemonId)\n .pipe(takeUntilDestroyed(this.destroyRef))\n .subscribe({\n next: (pokemon) => {\n this.pokemon = pokemon;\n this.pokemonBattleEvent.set(BattleEvent.RESET_BATTLE);\n this.changeDetectorRef.markForCheck();\n },\n error: () => {\n this.alertService.createErrorAlert(translations.pokemonNotFoundError);\n void this.router.navigate([ROOT_URLS.error404]);\n },\n });\n }\n}\n",
            "usedDeprecatedRules": []
          }
        ],
        "all": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-example-app/src/app/core/components/theme-button/theme-button.component.ts",
            "messages": [
              {
                "ruleId": "@typescript-eslint/prefer-nullish-coalescing",
                "message": "Definition for rule '@typescript-eslint/prefer-nullish-coalescing' was not found.",
                "line": 40,
                "column": 7,
                "endLine": 40,
                "endColumn": 79,
                "severity": 2,
                "nodeType": null
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n CUSTOM_ELEMENTS_SCHEMA,\n effect,\n inject,\n} from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthenticationService } from '~features/authentication/services/authentication.service';\nimport { Theme, ThemeManagerService } from '~core/services/theme-manager.service';\n\nimport '@shoelace-style/shoelace/dist/components/button/button.js';\nimport '@shoelace-style/shoelace/dist/components/icon/icon.js';\n\n@Component({\n selector: 'app-theme-button',\n templateUrl: './theme-button.component.html',\n standalone: true,\n changeDetection: ChangeDetectionStrategy.OnPush,\n schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class ThemeButtonComponent {\n private readonly authenticationService = inject(AuthenticationService);\n private readonly themeManagerService = inject(ThemeManagerService);\n\n readonly router = inject(Router);\n readonly Theme = Theme;\n\n isUserLoggedIn = this.authenticationService.isUserLoggedIn();\n themeSelected = this.themeManagerService.getThemeFromLocalStorageValue();\n\n constructor() {\n effect(() => {\n this.isUserLoggedIn = this.authenticationService.isUserLoggedIn();\n });\n }\n\n toggleTheme() {\n this.themeSelected =\n // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n this.themeManagerService.getThemeFromLocalStorageValue() === Theme.DARK ||\n this.themeSelected === null\n ? Theme.LIGHT\n : Theme.DARK;\n this.themeManagerService.setTheme(this.themeSelected);\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-example-app/src/app/core/directives/sl-checkbox-control.directive.ts",
            "messages": [
              {
                "ruleId": "@typescript-eslint/no-empty-function",
                "message": "Definition for rule '@typescript-eslint/no-empty-function' was not found.",
                "line": 23,
                "column": 3,
                "endLine": 23,
                "endColumn": 101,
                "severity": 2,
                "nodeType": null
              },
              {
                "ruleId": "@typescript-eslint/no-unused-vars",
                "message": "Definition for rule '@typescript-eslint/no-unused-vars' was not found.",
                "line": 23,
                "column": 3,
                "endLine": 23,
                "endColumn": 101,
                "severity": 2,
                "nodeType": null
              },
              {
                "ruleId": "@typescript-eslint/no-empty-function",
                "message": "Definition for rule '@typescript-eslint/no-empty-function' was not found.",
                "line": 26,
                "column": 3,
                "endLine": 26,
                "endColumn": 67,
                "severity": 2,
                "nodeType": null
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Directive, ElementRef, inject, model } from '@angular/core';\nimport type { ControlValueAccessor } from '@angular/forms';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Directive({\n selector: '[appSlCheckboxControl]',\n providers: [\n {\n provide: NG_VALUE_ACCESSOR,\n useExisting: AppSlCheckboxControlDirective,\n multi: true,\n },\n ],\n standalone: true,\n host: {\n '[attr.checked]': 'checked()',\n '(sl-change)': 'onSlChange()',\n },\n})\nexport class AppSlCheckboxControlDirective implements ControlValueAccessor {\n private readonly el = inject(ElementRef);\n\n // eslint-disable-next-line @typescript-eslint/no-empty-function,@typescript-eslint/no-unused-vars\n private onChangeFn = (value: boolean) => {};\n\n // eslint-disable-next-line @typescript-eslint/no-empty-function\n private onTouchedFn = () => {};\n\n readonly checked = model(false);\n\n writeValue(value: boolean): void {\n this.checked.set(value);\n }\n\n registerOnChange(function_: () => void): void {\n this.onChangeFn = function_;\n }\n\n registerOnTouched(function_: () => void): void {\n this.onTouchedFn = function_;\n }\n\n onSlChange(): void {\n const { checked } = this.el.nativeElement;\n this.onChangeFn(checked);\n this.onTouchedFn();\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-example-app/src/app/core/directives/sl-select-control.directive.ts",
            "messages": [
              {
                "ruleId": "@typescript-eslint/no-empty-function",
                "message": "Definition for rule '@typescript-eslint/no-empty-function' was not found.",
                "line": 23,
                "column": 3,
                "endLine": 23,
                "endColumn": 101,
                "severity": 2,
                "nodeType": null
              },
              {
                "ruleId": "@typescript-eslint/no-unused-vars",
                "message": "Definition for rule '@typescript-eslint/no-unused-vars' was not found.",
                "line": 23,
                "column": 3,
                "endLine": 23,
                "endColumn": 101,
                "severity": 2,
                "nodeType": null
              },
              {
                "ruleId": "@typescript-eslint/no-empty-function",
                "message": "Definition for rule '@typescript-eslint/no-empty-function' was not found.",
                "line": 26,
                "column": 3,
                "endLine": 26,
                "endColumn": 67,
                "severity": 2,
                "nodeType": null
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Directive, ElementRef, inject, model } from '@angular/core';\nimport type { ControlValueAccessor } from '@angular/forms';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Directive({\n selector: '[appSlSelectControl]',\n providers: [\n {\n provide: NG_VALUE_ACCESSOR,\n useExisting: AppSlSelectControlDirective,\n multi: true,\n },\n ],\n standalone: true,\n host: {\n '[attr.value]': 'value()',\n '(sl-change)': 'onSlChange()',\n },\n})\nexport class AppSlSelectControlDirective implements ControlValueAccessor {\n private readonly el = inject(ElementRef);\n\n // eslint-disable-next-line @typescript-eslint/no-empty-function,@typescript-eslint/no-unused-vars\n private onChangeFn = (value: unknown) => {};\n\n // eslint-disable-next-line @typescript-eslint/no-empty-function\n private onTouchedFn = () => {};\n\n readonly value = model('');\n\n writeValue(value: string): void {\n this.value.set(value);\n }\n\n registerOnChange(function_: () => void): void {\n this.onChangeFn = function_;\n }\n\n registerOnTouched(function_: () => void): void {\n this.onTouchedFn = function_;\n }\n\n onSlChange(): void {\n const { value } = this.el.nativeElement;\n this.onChangeFn(value);\n this.onTouchedFn();\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-example-app/src/app/core/services/alert.service.ts",
            "messages": [
              {
                "ruleId": "@typescript-eslint/consistent-type-imports",
                "message": "Definition for rule '@typescript-eslint/consistent-type-imports' was not found.",
                "line": 1,
                "column": 1,
                "endLine": 1,
                "endColumn": 71,
                "severity": 2,
                "nodeType": null
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "// eslint-disable-next-line @typescript-eslint/consistent-type-imports\nimport { Injectable, Renderer2, RendererFactory2 } from '@angular/core';\n\nenum AlertType {\n SUCCESS = 'success',\n ERROR = 'error',\n}\n\ntype Alert = {\n message: string;\n type: AlertType;\n hasCountdown?: boolean;\n duration?: number;\n};\n\n@Injectable({\n providedIn: 'root',\n})\nexport class AlertService {\n private readonly renderer: Renderer2;\n\n constructor(rendererFactory: RendererFactory2) {\n this.renderer = rendererFactory.createRenderer(null, null);\n }\n\n createSuccessAlert(message: string) {\n this.createAlert({ message, type: AlertType.SUCCESS, duration: 7000, hasCountdown: true });\n }\n\n createErrorAlert(message: string) {\n this.createAlert({ message, type: AlertType.ERROR });\n }\n\n private createAlert(alert: Alert): void {\n const alertElement = this.createAlertElement(alert);\n const container = document.body;\n this.renderer.appendChild(container, alertElement);\n alertElement.toast();\n }\n\n private createAlertElement(alert: Alert): HTMLElement & { toast: () => void } {\n const alertElement = this.renderer.createElement('sl-alert');\n alertElement.classList.add(`alert--${alert.type}`);\n this.renderer.setAttribute(alertElement, 'closable', '');\n this.renderer.setAttribute(alertElement, 'variant', alert.type);\n if (alert.duration) {\n this.renderer.setAttribute(alertElement, 'duration', alert.duration.toString());\n }\n if (alert.hasCountdown) {\n this.renderer.setAttribute(alertElement, 'countdown', 'rtl');\n }\n this.renderer.setProperty(alertElement, 'innerHTML', alert.message);\n return alertElement as HTMLElement & { toast: () => void };\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-example-app/src/app/core/services/cookie-consent.service.ts",
            "messages": [
              {
                "ruleId": "@typescript-eslint/max-params",
                "message": "Definition for rule '@typescript-eslint/max-params' was not found.",
                "line": 5,
                "column": 3,
                "endLine": 5,
                "endColumn": 60,
                "severity": 2,
                "nodeType": null
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { inject, Injectable } from '@angular/core';\nimport { LOCAL_STORAGE } from '~core/providers/local-storage';\n\ndeclare const window: Window &\n // eslint-disable-next-line @typescript-eslint/max-params\n typeof globalThis & { gtag?: (a: string, b: string, o: object) => void };\n\nconst CONSENT_COOKIE_KEY = 'isCookiesConsentAccepted';\nconst CONSENT_COOKIE_VALUE = 'true';\n\nexport enum ConsentState {\n DENIED = 'denied',\n GRANTED = 'granted',\n}\n\n@Injectable({\n providedIn: 'root',\n})\nexport class CookieConsentService {\n private readonly localStorage: Storage | null = inject(LOCAL_STORAGE);\n\n setCookieConsent(state: ConsentState): boolean {\n if (!this.setConsentInLocalStorage()) {\n return false;\n }\n return this.updateGtagConsent(state);\n }\n\n getCookieState(): boolean {\n return this.localStorage?.getItem(CONSENT_COOKIE_KEY) === CONSENT_COOKIE_VALUE;\n }\n\n private setConsentInLocalStorage(): boolean {\n try {\n this.localStorage?.setItem(CONSENT_COOKIE_KEY, CONSENT_COOKIE_VALUE);\n return true;\n } catch {\n return false;\n }\n }\n\n private updateGtagConsent(state: ConsentState): boolean {\n try {\n if (window.gtag) {\n const consentOptions = {\n \n ad_user_data: state,\n ad_personalization: state,\n ad_storage: state,\n analytics_storage: state,\n };\n\n if (state === ConsentState.DENIED) {\n window.gtag('consent', 'default', {\n ...consentOptions,\n wait_for_update: 500,\n \n });\n } else {\n window.gtag('consent', 'update', {\n ...consentOptions,\n });\n }\n }\n return true;\n } catch {\n return false;\n }\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/propios/angular-example-app/src/locale/translations.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/runtime-localize",
                "severity": 2,
                "message": "$localize could be called before translations are loaded",
                "line": 2,
                "column": 10,
                "nodeType": null,
                "messageId": "runtimeLocalize",
                "endLine": 2,
                "endColumn": 19
              },
              {
                "ruleId": "@angular-eslint/runtime-localize",
                "severity": 2,
                "message": "$localize could be called before translations are loaded",
                "line": 3,
                "column": 9,
                "nodeType": null,
                "messageId": "runtimeLocalize",
                "endLine": 3,
                "endColumn": 18
              },
              {
                "ruleId": "@angular-eslint/runtime-localize",
                "severity": 2,
                "message": "$localize could be called before translations are loaded",
                "line": 4,
                "column": 10,
                "nodeType": null,
                "messageId": "runtimeLocalize",
                "endLine": 4,
                "endColumn": 19
              },
              {
                "ruleId": "@angular-eslint/runtime-localize",
                "severity": 2,
                "message": "$localize could be called before translations are loaded",
                "line": 5,
                "column": 13,
                "nodeType": null,
                "messageId": "runtimeLocalize",
                "endLine": 5,
                "endColumn": 22
              },
              {
                "ruleId": "@angular-eslint/runtime-localize",
                "severity": 2,
                "message": "$localize could be called before translations are loaded",
                "line": 6,
                "column": 14,
                "nodeType": null,
                "messageId": "runtimeLocalize",
                "endLine": 6,
                "endColumn": 23
              },
              {
                "ruleId": "@angular-eslint/runtime-localize",
                "severity": 2,
                "message": "$localize could be called before translations are loaded",
                "line": 7,
                "column": 14,
                "nodeType": null,
                "messageId": "runtimeLocalize",
                "endLine": 7,
                "endColumn": 23
              },
              {
                "ruleId": "@angular-eslint/runtime-localize",
                "severity": 2,
                "message": "$localize could be called before translations are loaded",
                "line": 8,
                "column": 11,
                "nodeType": null,
                "messageId": "runtimeLocalize",
                "endLine": 8,
                "endColumn": 20
              },
              {
                "ruleId": "@angular-eslint/runtime-localize",
                "severity": 2,
                "message": "$localize could be called before translations are loaded",
                "line": 9,
                "column": 18,
                "nodeType": null,
                "messageId": "runtimeLocalize",
                "endLine": 9,
                "endColumn": 27
              },
              {
                "ruleId": "@angular-eslint/runtime-localize",
                "severity": 2,
                "message": "$localize could be called before translations are loaded",
                "line": 10,
                "column": 18,
                "nodeType": null,
                "messageId": "runtimeLocalize",
                "endLine": 10,
                "endColumn": 27
              },
              {
                "ruleId": "@angular-eslint/runtime-localize",
                "severity": 2,
                "message": "$localize could be called before translations are loaded",
                "line": 11,
                "column": 21,
                "nodeType": null,
                "messageId": "runtimeLocalize",
                "endLine": 11,
                "endColumn": 30
              },
              {
                "ruleId": "@angular-eslint/runtime-localize",
                "severity": 2,
                "message": "$localize could be called before translations are loaded",
                "line": 12,
                "column": 28,
                "nodeType": null,
                "messageId": "runtimeLocalize",
                "endLine": 12,
                "endColumn": 37
              },
              {
                "ruleId": "@angular-eslint/runtime-localize",
                "severity": 2,
                "message": "$localize could be called before translations are loaded",
                "line": 13,
                "column": 20,
                "nodeType": null,
                "messageId": "runtimeLocalize",
                "endLine": 13,
                "endColumn": 29
              },
              {
                "ruleId": "@angular-eslint/runtime-localize",
                "severity": 2,
                "message": "$localize could be called before translations are loaded",
                "line": 14,
                "column": 11,
                "nodeType": null,
                "messageId": "runtimeLocalize",
                "endLine": 14,
                "endColumn": 20
              },
              {
                "ruleId": "@angular-eslint/runtime-localize",
                "severity": 2,
                "message": "$localize could be called before translations are loaded",
                "line": 15,
                "column": 13,
                "nodeType": null,
                "messageId": "runtimeLocalize",
                "endLine": 15,
                "endColumn": 22
              },
              {
                "ruleId": "@angular-eslint/runtime-localize",
                "severity": 2,
                "message": "$localize could be called before translations are loaded",
                "line": 16,
                "column": 16,
                "nodeType": null,
                "messageId": "runtimeLocalize",
                "endLine": 16,
                "endColumn": 25
              },
              {
                "ruleId": "@angular-eslint/runtime-localize",
                "severity": 2,
                "message": "$localize could be called before translations are loaded",
                "line": 17,
                "column": 26,
                "nodeType": null,
                "messageId": "runtimeLocalize",
                "endLine": 17,
                "endColumn": 35
              },
              {
                "ruleId": "@angular-eslint/runtime-localize",
                "severity": 2,
                "message": "$localize could be called before translations are loaded",
                "line": 18,
                "column": 22,
                "nodeType": null,
                "messageId": "runtimeLocalize",
                "endLine": 18,
                "endColumn": 31
              },
              {
                "ruleId": "@angular-eslint/runtime-localize",
                "severity": 2,
                "message": "$localize could be called before translations are loaded",
                "line": 19,
                "column": 26,
                "nodeType": null,
                "messageId": "runtimeLocalize",
                "endLine": 19,
                "endColumn": 35
              },
              {
                "ruleId": "@angular-eslint/runtime-localize",
                "severity": 2,
                "message": "$localize could be called before translations are loaded",
                "line": 20,
                "column": 25,
                "nodeType": null,
                "messageId": "runtimeLocalize",
                "endLine": 20,
                "endColumn": 34
              },
              {
                "ruleId": "@angular-eslint/runtime-localize",
                "severity": 2,
                "message": "$localize could be called before translations are loaded",
                "line": 21,
                "column": 25,
                "nodeType": null,
                "messageId": "runtimeLocalize",
                "endLine": 21,
                "endColumn": 34
              },
              {
                "ruleId": "@angular-eslint/runtime-localize",
                "severity": 2,
                "message": "$localize could be called before translations are loaded",
                "line": 22,
                "column": 19,
                "nodeType": null,
                "messageId": "runtimeLocalize",
                "endLine": 22,
                "endColumn": 28
              }
            ],
            "suppressedMessages": [],
            "errorCount": 21,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "export const translations = {\n title: $localize`Angular Example App`,\n home: $localize`Home`,\n logIn: $localize`Log in`,\n register: $localize`Register`,\n myAccount: $localize`My account`,\n myPokemon: $localize`My pokemon`,\n logOut: $localize`Log out`,\n fieldRequired: $localize`Field required.`,\n emailHelpText: $localize`No real email validation. Field required. Format: example@domain.com`,\n passwordHelpText: $localize`Must contain at least one lowercase letter, one uppercase letter and one number. No special characters.`,\n confirmPasswordHelpText: $localize`Passwords do not match.`,\n pokemonHelpText: $localize`Field required. PokeAPI does not found that pokemon name.`,\n logout: $localize`Log out`,\n findMore: $localize`Find more!`,\n findPokemon: $localize`Find a pokemon`,\n myAccountSuccessAlert: $localize`Account settings saved. You're all set!`,\n genericErrorAlert: $localize`Oops! Something went wrong. Please try again later or leave an issue if it persists.`,\n loginCredentialsError: $localize`Invalid credentials. Not very effective, try again!`,\n genericRegisterError: $localize`Register failed. This attempt wasn’t very effective, try again!`,\n pokemonNotFoundError: $localize`Pokémon not found. Double-check the name and try again!`,\n sessionExpired: $localize`Session expired. Please log in.`,\n};\n",
            "usedDeprecatedRules": []
          }
        ]
      }
    }
  },
  "angular-gridster2": {
    "repo": {
      "HEAD": {
        "commit": "59e2b0de4dc71983f874e208f3466ba6ebb3fac4",
        "author": "Tiberiu Zuld",
        "date": "Thu Dec 5 09:26:29 2024 +0200",
        "message": "chore: fix npm repository url"
      },
      "url": "https://github.com/tiberiuzuld/angular-gridster2"
    },
    "before": {
      "gridster-app": {
        "recommended": [],
        "all": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/app.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 14,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 14,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        47,
                        430
                      ],
                      "text": "\n} from '@angular/core';\nimport { MatListModule } from '@angular/material/list';\nimport { RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router';\n\n@Component({\n selector: 'app-root',\n templateUrl: './app.component.html',\n styleUrl: './app.component.css',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n ViewEncapsulation\n} from '@angular/core';\nimport { MatListModule } from '@angular/material/list';\nimport { RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router';\n\n@Component({\n selector: 'app-root',\n templateUrl: './app.component.html',\n styleUrl: './app.component.css',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [RouterLink, RouterLinkActive, RouterOutlet, MatListModule]\n})\nexport class AppComponent {}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/api/api.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 25,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 25,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        57,
                        593
                      ],
                      "text": "\n} from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport {\n CompactType,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridsterPush,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-api',\n templateUrl: './api.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport {\n CompactType,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridsterPush,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-api',\n templateUrl: './api.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n MatButtonModule,\n MatIconModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class ApiComponent implements OnInit {\n options: GridsterConfig;\n dashboard: GridsterItem[];\n itemToPush: GridsterItemComponent;\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n compactType: CompactType.None,\n pushItems: true,\n draggable: {\n enabled: true\n },\n resizable: {\n enabled: true\n }\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0, initCallback: this.initItem.bind(this) },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 4, x: 5 },\n { cols: 1, rows: 1, y: 2, x: 1 },\n { cols: 2, rows: 2, y: 5, x: 5 },\n { cols: 2, rows: 2, y: 3, x: 2 },\n { cols: 2, rows: 1, y: 2, x: 2 },\n { cols: 1, rows: 1, y: 3, x: 4 },\n { cols: 1, rows: 1, y: 0, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n\n initItem(item: GridsterItem, itemComponent: GridsterItemComponent): void {\n this.itemToPush = itemComponent;\n }\n\n pushItem(): void {\n const push = new GridsterPush(this.itemToPush); // init the service\n this.itemToPush.$item.rows += 4; // move/resize your item\n if (push.pushItems(push.fromNorth)) {\n // push items from a direction\n push.checkPushBack(); // check for items can restore to original position\n push.setPushedItems(); // save the items pushed\n this.itemToPush.setSize();\n this.itemToPush.checkItemChanges(\n this.itemToPush.$item,\n this.itemToPush.item\n );\n } else {\n this.itemToPush.$item.rows -= 4;\n push.restoreItems(); // restore to initial state the pushed items\n }\n push.destroy(); // destroy push instance\n // similar for GridsterPushResize and GridsterSwap\n }\n\n getItemComponent(): void {\n if (this.options.api && this.options.api.getItemComponent) {\n console.log(this.options.api.getItemComponent(this.dashboard[0]));\n }\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/compact/compact.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 26,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 26,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        57,
                        691
                      ],
                      "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n CompactType,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-compact',\n templateUrl: './compact.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n CompactType,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-compact',\n templateUrl: './compact.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatIconModule,\n MatSelectModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class CompactComponent implements OnInit {\n options: GridsterConfig;\n dashboard: Array<GridsterItem>;\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n compactType: CompactType.None,\n maxCols: 10,\n maxRows: 10,\n pushItems: true,\n draggable: {\n enabled: true\n },\n resizable: {\n enabled: true\n }\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 4, x: 5 },\n { cols: 1, rows: 1, y: 2, x: 1 },\n { cols: 2, rows: 2, y: 5, x: 5 },\n { cols: 2, rows: 2, y: 3, x: 2 },\n { cols: 2, rows: 1, y: 2, x: 2 },\n { cols: 1, rows: 1, y: 3, x: 4 },\n { cols: 1, rows: 1, y: 0, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/displayGrid/displayGrid.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 26,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 26,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        57,
                        700
                      ],
                      "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-display-grid',\n templateUrl: './displayGrid.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-display-grid',\n templateUrl: './displayGrid.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatIconModule,\n MatSelectModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class DisplayGridComponent implements OnInit {\n options: GridsterConfig;\n dashboard: Array<GridsterItem>;\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n pushItems: true,\n draggable: {\n enabled: true\n },\n resizable: {\n enabled: true\n }\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 4, x: 5 },\n { cols: 1, rows: 1, y: 2, x: 1 },\n { cols: 2, rows: 2, y: 5, x: 5 },\n { cols: 2, rows: 2, y: 3, x: 2 },\n { cols: 2, rows: 1, y: 2, x: 2 },\n { cols: 1, rows: 1, y: 3, x: 4 },\n { cols: 1, rows: 1, y: 0, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/drag/drag.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 33,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 33,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        57,
                        861
                      ],
                      "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\n\nimport {\n DisplayGrid,\n Draggable,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridsterItemComponentInterface,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\ninterface Safe extends GridsterConfig {\n draggable: Draggable;\n}\n\n@Component({\n selector: 'app-drag',\n templateUrl: './drag.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\n\nimport {\n DisplayGrid,\n Draggable,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridsterItemComponentInterface,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\ninterface Safe extends GridsterConfig {\n draggable: Draggable;\n}\n\n@Component({\n selector: 'app-drag',\n templateUrl: './drag.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatCheckboxModule,\n MatIconModule,\n MatInputModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class DragComponent implements OnInit {\n options: Safe;\n dashboard: Array<GridsterItem>;\n\n static eventStart(\n item: GridsterItem,\n itemComponent: GridsterItemComponentInterface,\n event: MouseEvent\n ): void {\n console.info('eventStart', item, itemComponent, event);\n }\n\n static eventStop(\n item: GridsterItem,\n itemComponent: GridsterItemComponentInterface,\n event: MouseEvent\n ): void {\n console.info('eventStop', item, itemComponent, event);\n }\n\n static overlapEvent(\n source: GridsterItem,\n target: GridsterItem,\n grid: GridsterComponent\n ): void {\n console.log('overlap', source, target, grid);\n }\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n pushItems: true,\n swap: false,\n draggable: {\n delayStart: 0,\n enabled: true,\n ignoreContentClass: 'gridster-item-content',\n ignoreContent: false,\n dragHandleClass: 'drag-handler',\n stop: DragComponent.eventStop,\n start: DragComponent.eventStart,\n dropOverItems: false,\n dropOverItemsCallback: DragComponent.overlapEvent\n },\n resizable: {\n enabled: true\n }\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2, hasContent: true },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 1, rows: 1, y: 2, x: 5 },\n { cols: 1, rows: 1, y: 1, x: 0 },\n { cols: 1, rows: 1, y: 1, x: 0 },\n {\n cols: 2,\n rows: 2,\n y: 3,\n x: 5,\n minItemRows: 2,\n minItemCols: 2,\n label: 'Min rows & cols = 2'\n },\n {\n cols: 2,\n rows: 2,\n y: 2,\n x: 0,\n maxItemRows: 2,\n maxItemCols: 2,\n label: 'Max rows & cols = 2'\n },\n {\n cols: 2,\n rows: 1,\n y: 2,\n x: 2,\n dragEnabled: true,\n resizeEnabled: true,\n label: 'Drag&Resize Enabled'\n },\n {\n cols: 1,\n rows: 1,\n y: 2,\n x: 4,\n dragEnabled: false,\n resizeEnabled: false,\n label: 'Drag&Resize Disabled'\n },\n { cols: 1, rows: 1, y: 2, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/dynamicWidgets/dynamicWidgets.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 26,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 26,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        73,
                        684
                      ],
                      "text": "\n} from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\nimport { ParentDynamicComponent } from './parentDynamic.component';\n\n@Component({\n selector: 'app-dynamic-widgets',\n templateUrl: './dynamicWidgets.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n EventEmitter,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\nimport { ParentDynamicComponent } from './parentDynamic.component';\n\n@Component({\n selector: 'app-dynamic-widgets',\n templateUrl: './dynamicWidgets.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n MatButtonModule,\n MatIconModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent,\n ParentDynamicComponent\n ]\n})\nexport class DynamicWidgetsComponent implements OnInit {\n options: GridsterConfig;\n dashboard: GridsterItem[];\n resizeEvent: EventEmitter<GridsterItem> = new EventEmitter<GridsterItem>();\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n disableWindowResize: false,\n scrollToNewItems: false,\n disableWarnings: false,\n ignoreMarginInRow: false,\n itemResizeCallback: item => {\n // update DB with new size\n // send the update to widgets\n this.resizeEvent.emit(item);\n }\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0, type: 'widgetA' },\n { cols: 2, rows: 2, y: 0, x: 2, type: 'widgetB' },\n { cols: 2, rows: 1, y: 1, x: 0, type: 'widgetC' }\n ];\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/dynamicWidgets/parentDynamic.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 15,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 15,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        56,
                        458
                      ],
                      "text": "\n} from '@angular/core';\nimport { WidgetAComponent } from './widgetA.component';\nimport { WidgetBComponent } from './widgetB.component';\nimport { WidgetCComponent } from './widgetC.component';\n\n@Component({\n selector: 'app-parent-dynamic',\n templateUrl: './parentDynamic.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n Input,\n ViewEncapsulation\n} from '@angular/core';\nimport { WidgetAComponent } from './widgetA.component';\nimport { WidgetBComponent } from './widgetB.component';\nimport { WidgetCComponent } from './widgetC.component';\n\n@Component({\n selector: 'app-parent-dynamic',\n templateUrl: './parentDynamic.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [WidgetAComponent, WidgetBComponent, WidgetCComponent]\n})\nexport class ParentDynamicComponent {\n @Input()\n widget;\n @Input()\n resizeEvent;\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/dynamicWidgets/widgetA.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 17,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 17,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        95,
                        392
                      ],
                      "text": "\n} from '@angular/core';\nimport { GridsterItem } from 'angular-gridster2';\nimport { Subscription } from 'rxjs';\n\n@Component({\n selector: 'app-widget-a',\n template: '{{widget.type}}',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n EventEmitter,\n Input,\n OnDestroy,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { GridsterItem } from 'angular-gridster2';\nimport { Subscription } from 'rxjs';\n\n@Component({\n selector: 'app-widget-a',\n template: '{{widget.type}}',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n standalone: true\n})\nexport class WidgetAComponent implements OnInit, OnDestroy {\n @Input()\n widget;\n @Input()\n resizeEvent: EventEmitter<GridsterItem>;\n\n resizeSub: Subscription;\n\n ngOnInit(): void {\n this.resizeSub = this.resizeEvent.subscribe(widget => {\n if (widget === this.widget) {\n // or check id , type or whatever you have there\n // resize your widget, chart, map , etc.\n console.log(widget);\n }\n });\n }\n\n ngOnDestroy(): void {\n this.resizeSub.unsubscribe();\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/dynamicWidgets/widgetB.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 17,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 17,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        95,
                        392
                      ],
                      "text": "\n} from '@angular/core';\nimport { GridsterItem } from 'angular-gridster2';\nimport { Subscription } from 'rxjs';\n\n@Component({\n selector: 'app-widget-b',\n template: '{{widget.type}}',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n EventEmitter,\n Input,\n OnDestroy,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { GridsterItem } from 'angular-gridster2';\nimport { Subscription } from 'rxjs';\n\n@Component({\n selector: 'app-widget-b',\n template: '{{widget.type}}',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n standalone: true\n})\nexport class WidgetBComponent implements OnInit, OnDestroy {\n @Input()\n widget;\n @Input()\n resizeEvent: EventEmitter<GridsterItem>;\n\n resizeSub: Subscription;\n\n ngOnInit(): void {\n this.resizeSub = this.resizeEvent.subscribe(widget => {\n if (widget === this.widget) {\n // or check id , type or whatever you have there\n // resize your widget, chart, map , etc.\n console.log(widget);\n }\n });\n }\n\n ngOnDestroy(): void {\n this.resizeSub.unsubscribe();\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/dynamicWidgets/widgetC.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 17,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 17,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        95,
                        392
                      ],
                      "text": "\n} from '@angular/core';\nimport { GridsterItem } from 'angular-gridster2';\nimport { Subscription } from 'rxjs';\n\n@Component({\n selector: 'app-widget-c',\n template: '{{widget.type}}',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n EventEmitter,\n Input,\n OnDestroy,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { GridsterItem } from 'angular-gridster2';\nimport { Subscription } from 'rxjs';\n\n@Component({\n selector: 'app-widget-c',\n template: '{{widget.type}}',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n standalone: true\n})\nexport class WidgetCComponent implements OnInit, OnDestroy {\n @Input()\n widget;\n @Input()\n resizeEvent: EventEmitter<GridsterItem>;\n\n resizeSub: Subscription;\n\n ngOnInit(): void {\n this.resizeSub = this.resizeEvent.subscribe(widget => {\n if (widget === this.widget) {\n // or check id , type or whatever you have there\n // resize your widget, chart, map , etc.\n console.log(widget);\n }\n });\n }\n\n ngOnDestroy(): void {\n this.resizeSub.unsubscribe();\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/emptyCell/emptyCell.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 27,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 27,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        57,
                        758
                      ],
                      "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-empty-cell',\n templateUrl: './emptyCell.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-empty-cell',\n templateUrl: './emptyCell.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatCheckboxModule,\n MatIconModule,\n MatInputModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class EmptyCellComponent implements OnInit {\n options: GridsterConfig;\n dashboard: Array<GridsterItem>;\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n enableEmptyCellClick: false,\n enableEmptyCellContextMenu: false,\n enableEmptyCellDrop: false,\n enableEmptyCellDrag: false,\n enableOccupiedCellDrop: false,\n emptyCellClickCallback: this.emptyCellClick.bind(this),\n emptyCellContextMenuCallback: this.emptyCellClick.bind(this),\n emptyCellDropCallback: this.emptyCellClick.bind(this),\n emptyCellDragCallback: this.emptyCellClick.bind(this),\n emptyCellDragMaxCols: 50,\n emptyCellDragMaxRows: 50\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 4, x: 5 },\n { cols: 1, rows: 1, y: 2, x: 1 },\n { cols: 2, rows: 2, y: 5, x: 5 },\n { cols: 2, rows: 2, y: 3, x: 2 },\n { cols: 2, rows: 1, y: 2, x: 2 },\n { cols: 1, rows: 1, y: 3, x: 4 },\n { cols: 1, rows: 1, y: 0, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n emptyCellClick(event: MouseEvent, item: GridsterItem): void {\n console.info('empty cell click', event, item);\n this.dashboard.push(item);\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n\n dragStartHandler(ev: DragEvent): void {\n if (ev.dataTransfer) {\n ev.dataTransfer.setData('text/plain', 'Drag Me Button');\n ev.dataTransfer.dropEffect = 'copy';\n }\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/gridEvents/gridEvents.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 26,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 26,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        57,
                        656
                      ],
                      "text": "\n} from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterComponentInterface,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridsterItemComponentInterface,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-grid-events',\n templateUrl: './gridEvents.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterComponentInterface,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridsterItemComponentInterface,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-grid-events',\n templateUrl: './gridEvents.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n MatButtonModule,\n MatIconModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class GridEventsComponent implements OnInit {\n options: GridsterConfig;\n dashboard: Array<GridsterItem>;\n remove: boolean;\n\n static itemChange(\n item: GridsterItem,\n itemComponent: GridsterItemComponentInterface\n ): void {\n console.info('itemChanged', item, itemComponent);\n }\n\n static itemResize(\n item: GridsterItem,\n itemComponent: GridsterItemComponentInterface\n ): void {\n console.info('itemResized', item, itemComponent);\n }\n\n static itemInit(\n item: GridsterItem,\n itemComponent: GridsterItemComponentInterface\n ): void {\n console.info('itemInitialized', item, itemComponent);\n }\n\n static itemRemoved(\n item: GridsterItem,\n itemComponent: GridsterItemComponentInterface\n ): void {\n console.info('itemRemoved', item, itemComponent);\n }\n\n static itemValidate(item: GridsterItem): boolean {\n return item.cols > 0 && item.rows > 0;\n }\n\n static gridInit(grid: GridsterComponentInterface): void {\n console.info('gridInit', grid);\n }\n\n static gridDestroy(grid: GridsterComponentInterface): void {\n console.info('gridDestroy', grid);\n }\n\n static gridSizeChanged(grid: GridsterComponentInterface): void {\n console.info('gridSizeChanged', grid);\n }\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n initCallback: GridEventsComponent.gridInit,\n destroyCallback: GridEventsComponent.gridDestroy,\n gridSizeChangedCallback: GridEventsComponent.gridSizeChanged,\n itemChangeCallback: GridEventsComponent.itemChange,\n itemResizeCallback: GridEventsComponent.itemResize,\n itemInitCallback: GridEventsComponent.itemInit,\n itemRemovedCallback: GridEventsComponent.itemRemoved,\n itemValidateCallback: GridEventsComponent.itemValidate,\n pushItems: true,\n draggable: {\n enabled: true\n },\n resizable: {\n enabled: true\n }\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 4, x: 5 },\n { cols: 1, rows: 1, y: 2, x: 1 },\n { cols: 2, rows: 2, y: 5, x: 5 },\n { cols: 2, rows: 2, y: 3, x: 2 },\n { cols: 2, rows: 1, y: 2, x: 2 },\n { cols: 1, rows: 1, y: 3, x: 4 },\n { cols: 1, rows: 1, y: 0, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n\n destroy(): void {\n this.remove = !this.remove;\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/gridMargins/gridMargins.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 28,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 28,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        57,
                        822
                      ],
                      "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-grid-margins',\n templateUrl: './gridMargins.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-grid-margins',\n templateUrl: './gridMargins.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatCheckboxModule,\n MatIconModule,\n MatInputModule,\n MatSelectModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class GridMarginsComponent implements OnInit {\n options: GridsterConfig;\n dashboard: Array<GridsterItem>;\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n margin: 10,\n outerMargin: true,\n outerMarginTop: null,\n outerMarginRight: null,\n outerMarginBottom: null,\n outerMarginLeft: null\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 4, x: 5 },\n { cols: 1, rows: 1, y: 2, x: 1 },\n { cols: 2, rows: 2, y: 5, x: 5 },\n { cols: 2, rows: 2, y: 3, x: 2 },\n { cols: 2, rows: 1, y: 2, x: 2 },\n { cols: 1, rows: 1, y: 3, x: 4 },\n { cols: 1, rows: 1, y: 0, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/gridSizes/gridSizes.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 26,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 26,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        57,
                        694
                      ],
                      "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-grid-sizes',\n templateUrl: './gridSizes.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-grid-sizes',\n templateUrl: './gridSizes.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatIconModule,\n MatInputModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class GridSizesComponent implements OnInit {\n options: GridsterConfig;\n dashboard: Array<GridsterItem>;\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n pushItems: true,\n draggable: {\n enabled: true\n },\n resizable: {\n enabled: true\n },\n minCols: 1,\n maxCols: 100,\n minRows: 1,\n maxRows: 100,\n maxItemCols: 100,\n minItemCols: 1,\n maxItemRows: 100,\n minItemRows: 1,\n maxItemArea: 2500,\n minItemArea: 1,\n defaultItemCols: 1,\n defaultItemRows: 1,\n addEmptyRowsCount: 2\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 4, x: 5 },\n { cols: 1, rows: 1, y: 2, x: 1 },\n { cols: 2, rows: 2, y: 5, x: 5 },\n { cols: 2, rows: 2, y: 3, x: 2 },\n { cols: 2, rows: 1, y: 2, x: 2 },\n { cols: 1, rows: 1, y: 3, x: 4 },\n { cols: 1, rows: 1, y: 0, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/gridTypes/gridTypes.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 28,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 28,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        57,
                        818
                      ],
                      "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-grid-types',\n templateUrl: './gridTypes.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-grid-types',\n templateUrl: './gridTypes.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatCheckboxModule,\n MatIconModule,\n MatInputModule,\n MatSelectModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class GridTypesComponent implements OnInit {\n options: GridsterConfig;\n dashboard: Array<GridsterItem>;\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n fixedColWidth: 105,\n fixedRowHeight: 105,\n keepFixedHeightInMobile: false,\n keepFixedWidthInMobile: false,\n mobileBreakpoint: 640,\n useBodyForBreakpoint: false,\n pushItems: true,\n rowHeightRatio: 1,\n draggable: {\n enabled: true\n },\n resizable: {\n enabled: true\n }\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 4, x: 5 },\n { cols: 1, rows: 1, y: 2, x: 1 },\n { cols: 2, rows: 2, y: 5, x: 5 },\n { cols: 2, rows: 2, y: 3, x: 2 },\n { cols: 2, rows: 1, y: 2, x: 2 },\n { cols: 1, rows: 1, y: 3, x: 4 },\n { cols: 1, rows: 1, y: 0, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/home/home.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 37,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 37,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        57,
                        947
                      ],
                      "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n CompactType,\n DisplayGrid,\n Draggable,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType,\n PushDirections,\n Resizable\n} from 'angular-gridster2';\n\ninterface Safe extends GridsterConfig {\n draggable: Draggable;\n resizable: Resizable;\n pushDirections: PushDirections;\n}\n\n@Component({\n selector: 'app-general',\n templateUrl: './home.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n CompactType,\n DisplayGrid,\n Draggable,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType,\n PushDirections,\n Resizable\n} from 'angular-gridster2';\n\ninterface Safe extends GridsterConfig {\n draggable: Draggable;\n resizable: Resizable;\n pushDirections: PushDirections;\n}\n\n@Component({\n selector: 'app-general',\n templateUrl: './home.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatCheckboxModule,\n MatIconModule,\n MatInputModule,\n MatSelectModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class HomeComponent implements OnInit {\n options: Safe;\n dashboard: Array<GridsterItem>;\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n compactType: CompactType.None,\n margin: 10,\n outerMargin: true,\n outerMarginTop: null,\n outerMarginRight: null,\n outerMarginBottom: null,\n outerMarginLeft: null,\n useTransformPositioning: true,\n mobileBreakpoint: 640,\n useBodyForBreakpoint: false,\n minCols: 1,\n maxCols: 100,\n minRows: 1,\n maxRows: 100,\n maxItemCols: 100,\n minItemCols: 1,\n maxItemRows: 100,\n minItemRows: 1,\n maxItemArea: 2500,\n minItemArea: 1,\n defaultItemCols: 1,\n defaultItemRows: 1,\n fixedColWidth: 105,\n fixedRowHeight: 105,\n keepFixedHeightInMobile: false,\n keepFixedWidthInMobile: false,\n scrollSensitivity: 10,\n scrollSpeed: 20,\n enableEmptyCellClick: false,\n enableEmptyCellContextMenu: false,\n enableEmptyCellDrop: false,\n enableEmptyCellDrag: false,\n enableOccupiedCellDrop: false,\n emptyCellDragMaxCols: 50,\n emptyCellDragMaxRows: 50,\n ignoreMarginInRow: false,\n draggable: {\n enabled: true\n },\n resizable: {\n enabled: true\n },\n swap: false,\n pushItems: true,\n disablePushOnDrag: false,\n disablePushOnResize: false,\n pushDirections: { north: true, east: true, south: true, west: true },\n pushResizeItems: false,\n displayGrid: DisplayGrid.Always,\n disableWindowResize: false,\n disableWarnings: false,\n scrollToNewItems: false\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2, hasContent: true },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 1, rows: 1, y: 2, x: 5 },\n { cols: 1, rows: 1, y: 1, x: 0 },\n { cols: 1, rows: 1, y: 1, x: 0 },\n {\n cols: 2,\n rows: 2,\n y: 3,\n x: 5,\n minItemRows: 2,\n minItemCols: 2,\n label: 'Min rows & cols = 2'\n },\n {\n cols: 2,\n rows: 2,\n y: 2,\n x: 0,\n maxItemRows: 2,\n maxItemCols: 2,\n label: 'Max rows & cols = 2'\n },\n {\n cols: 2,\n rows: 1,\n y: 2,\n x: 2,\n dragEnabled: true,\n resizeEnabled: true,\n label: 'Drag&Resize Enabled'\n },\n {\n cols: 1,\n rows: 1,\n y: 2,\n x: 4,\n dragEnabled: false,\n resizeEnabled: false,\n label: 'Drag&Resize Disabled'\n },\n { cols: 1, rows: 1, y: 2, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/items/items.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 30,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 30,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        57,
                        858
                      ],
                      "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n CompactType,\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridsterItemComponentInterface,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-items',\n templateUrl: './items.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n CompactType,\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridsterItemComponentInterface,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-items',\n templateUrl: './items.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatCheckboxModule,\n MatIconModule,\n MatInputModule,\n MatSelectModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class ItemsComponent implements OnInit {\n options: GridsterConfig;\n dashboard: Array<GridsterItem>;\n\n static itemInit(\n item: GridsterItem,\n itemComponent: GridsterItemComponentInterface\n ): void {\n console.info('itemInitialized', item, itemComponent);\n }\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n compactType: CompactType.None,\n pushItems: true,\n draggable: {\n enabled: true\n },\n resizable: {\n enabled: true\n },\n minCols: 1,\n maxCols: 100,\n minRows: 1,\n maxRows: 100,\n maxItemCols: 100,\n minItemCols: 1,\n maxItemRows: 100,\n minItemRows: 1,\n maxItemArea: 2500,\n minItemArea: 1,\n defaultItemCols: 1,\n defaultItemRows: 1\n };\n\n this.dashboard = [\n {\n cols: 2,\n rows: 1,\n y: 0,\n x: 0,\n initCallback: ItemsComponent.itemInit,\n minItemCols: 1,\n maxItemCols: 100,\n maxItemRows: 100,\n minItemRows: 1,\n minItemArea: 1,\n maxItemArea: 2500,\n dragEnabled: true,\n resizeEnabled: true,\n compactEnabled: true,\n resizableHandles: {\n s: true,\n e: true,\n n: true,\n w: true,\n se: true,\n ne: true,\n sw: true,\n nw: true\n }\n },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 2, x: 1 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/misc/misc.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 28,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 28,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        57,
                        807
                      ],
                      "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-misc',\n templateUrl: './misc.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-misc',\n templateUrl: './misc.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatCheckboxModule,\n MatIconModule,\n MatInputModule,\n MatSelectModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class MiscComponent implements OnInit {\n options: GridsterConfig;\n dashboard: Array<GridsterItem>;\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n draggable: { enabled: true },\n resizable: { enabled: true },\n disableWindowResize: true,\n scrollToNewItems: false,\n disableWarnings: false,\n ignoreMarginInRow: false,\n setGridSize: false,\n scale: 1\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 4, x: 5 },\n { cols: 1, rows: 1, y: 2, x: 1 },\n { cols: 2, rows: 2, y: 5, x: 5 },\n { cols: 2, rows: 2, y: 3, x: 2 },\n { cols: 2, rows: 1, y: 2, x: 2 },\n { cols: 1, rows: 1, y: 3, x: 4 },\n { cols: 1, rows: 1, y: 0, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/multiLayer/multi-layer.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 26,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 26,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        57,
                        751
                      ],
                      "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatMenuModule } from '@angular/material/menu';\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-swap',\n templateUrl: './multi-layer.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatMenuModule } from '@angular/material/menu';\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-swap',\n templateUrl: './multi-layer.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatCheckboxModule,\n MatIconModule,\n MatMenuModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class MultiLayerComponent implements OnInit {\n options: GridsterConfig;\n dashboard: Array<GridsterItem>;\n\n // noinspection DuplicatedCode\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n pushItems: false,\n swap: true,\n allowMultiLayer: true,\n defaultLayerIndex: 1,\n baseLayerIndex: 2,\n maxLayerIndex: 2,\n swapWhileDragging: false,\n draggable: {\n enabled: true\n },\n resizable: {\n enabled: true\n }\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0, layerIndex: 2 },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 4, x: 5 },\n { cols: 1, rows: 1, y: 2, x: 1 },\n { cols: 2, rows: 2, y: 5, x: 5 },\n { cols: 2, rows: 2, y: 3, x: 2 },\n { cols: 2, rows: 1, y: 2, x: 2 },\n { cols: 1, rows: 1, y: 3, x: 4 },\n { cols: 1, rows: 1, y: 0, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item: GridsterItem): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 2, rows: 1 });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/push/push.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 35,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 35,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        57,
                        858
                      ],
                      "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport {\n DisplayGrid,\n Draggable,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType,\n PushDirections,\n Resizable\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\ninterface Safe extends GridsterConfig {\n draggable: Draggable;\n resizable: Resizable;\n pushDirections: PushDirections;\n}\n\n@Component({\n selector: 'app-push',\n templateUrl: './push.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport {\n DisplayGrid,\n Draggable,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType,\n PushDirections,\n Resizable\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\ninterface Safe extends GridsterConfig {\n draggable: Draggable;\n resizable: Resizable;\n pushDirections: PushDirections;\n}\n\n@Component({\n selector: 'app-push',\n templateUrl: './push.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatCheckboxModule,\n MatIconModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class PushComponent implements OnInit {\n options: Safe;\n dashboard: Array<GridsterItem>;\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n pushItems: true,\n pushDirections: { north: true, east: true, south: true, west: true },\n pushResizeItems: false,\n swap: false,\n draggable: {\n enabled: true\n },\n resizable: {\n enabled: true\n }\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 4, x: 5 },\n { cols: 1, rows: 1, y: 2, x: 1 },\n { cols: 2, rows: 2, y: 5, x: 5 },\n { cols: 2, rows: 2, y: 3, x: 2 },\n { cols: 2, rows: 1, y: 2, x: 2 },\n { cols: 1, rows: 1, y: 3, x: 4 },\n { cols: 1, rows: 1, y: 0, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/resize/resize.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 46,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 46,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        57,
                        1066
                      ],
                      "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridsterItemComponentInterface,\n GridType,\n Resizable\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\ninterface SafeResizable extends Resizable {\n handles: {\n s: boolean;\n e: boolean;\n n: boolean;\n w: boolean;\n se: boolean;\n ne: boolean;\n sw: boolean;\n nw: boolean;\n };\n}\n\ninterface Safe extends GridsterConfig {\n resizable: SafeResizable;\n}\n\n@Component({\n selector: 'app-resize',\n templateUrl: './resize.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridsterItemComponentInterface,\n GridType,\n Resizable\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\ninterface SafeResizable extends Resizable {\n handles: {\n s: boolean;\n e: boolean;\n n: boolean;\n w: boolean;\n se: boolean;\n ne: boolean;\n sw: boolean;\n nw: boolean;\n };\n}\n\ninterface Safe extends GridsterConfig {\n resizable: SafeResizable;\n}\n\n@Component({\n selector: 'app-resize',\n templateUrl: './resize.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatCheckboxModule,\n MatIconModule,\n MatInputModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class ResizeComponent implements OnInit {\n options: Safe;\n dashboard: Array<GridsterItem>;\n\n static eventStop(\n item: GridsterItem,\n itemComponent: GridsterItemComponentInterface,\n event: MouseEvent\n ): void {\n console.info('eventStop', item, itemComponent, event);\n }\n\n static eventStart(\n item: GridsterItem,\n itemComponent: GridsterItemComponentInterface,\n event: MouseEvent\n ): void {\n console.info('eventStart', item, itemComponent, event);\n }\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n resizable: {\n delayStart: 0,\n enabled: true,\n start: ResizeComponent.eventStart,\n stop: ResizeComponent.eventStop,\n handles: {\n s: true,\n e: true,\n n: true,\n w: true,\n se: true,\n ne: true,\n sw: true,\n nw: true\n }\n }\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 4, x: 5 },\n { cols: 1, rows: 1, y: 2, x: 1 },\n { cols: 2, rows: 2, y: 5, x: 5 },\n { cols: 2, rows: 2, y: 3, x: 2 },\n { cols: 2, rows: 1, y: 2, x: 2 },\n { cols: 1, rows: 1, y: 3, x: 4 },\n { cols: 1, rows: 1, y: 0, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/rtl/rtl.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 37,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 37,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        70,
                        961
                      ],
                      "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport {\n CompactType,\n DirTypes,\n DisplayGrid,\n Draggable,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType,\n Resizable\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\ninterface Safe extends GridsterConfig {\n draggable: Draggable;\n resizable: Resizable;\n}\n\n@Component({\n selector: 'app-rtl',\n templateUrl: './rtl.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnDestroy,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport {\n CompactType,\n DirTypes,\n DisplayGrid,\n Draggable,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType,\n Resizable\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\ninterface Safe extends GridsterConfig {\n draggable: Draggable;\n resizable: Resizable;\n}\n\n@Component({\n selector: 'app-rtl',\n templateUrl: './rtl.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatCheckboxModule,\n MatIconModule,\n MatInputModule,\n MatSelectModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class RtlComponent implements OnInit, OnDestroy {\n options: Safe;\n dashboard: Array<GridsterItem>;\n\n ngOnInit(): void {\n document.body.setAttribute('dir', 'rtl');\n\n this.options = {\n gridType: GridType.Fit,\n compactType: CompactType.None,\n margin: 10,\n outerMargin: true,\n outerMarginTop: null,\n outerMarginRight: null,\n outerMarginBottom: null,\n outerMarginLeft: null,\n useTransformPositioning: true,\n mobileBreakpoint: 640,\n minCols: 1,\n maxCols: 100,\n minRows: 1,\n maxRows: 100,\n maxItemCols: 100,\n minItemCols: 1,\n maxItemRows: 100,\n minItemRows: 1,\n maxItemArea: 2500,\n minItemArea: 1,\n defaultItemCols: 1,\n defaultItemRows: 1,\n fixedColWidth: 105,\n fixedRowHeight: 105,\n keepFixedHeightInMobile: false,\n keepFixedWidthInMobile: false,\n scrollSensitivity: 10,\n scrollSpeed: 20,\n enableEmptyCellClick: false,\n enableEmptyCellContextMenu: false,\n enableEmptyCellDrop: false,\n enableEmptyCellDrag: false,\n enableOccupiedCellDrop: false,\n emptyCellDragMaxCols: 50,\n emptyCellDragMaxRows: 50,\n ignoreMarginInRow: false,\n draggable: {\n enabled: true\n },\n resizable: {\n enabled: true\n },\n swap: false,\n pushItems: true,\n disablePushOnDrag: false,\n disablePushOnResize: false,\n pushDirections: { north: true, east: true, south: true, west: true },\n pushResizeItems: false,\n displayGrid: DisplayGrid.Always,\n disableWindowResize: false,\n disableWarnings: false,\n scrollToNewItems: false,\n dirType: DirTypes.RTL\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2, hasContent: true },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 1, rows: 1, y: 2, x: 5 },\n { cols: 1, rows: 1, y: 1, x: 0 },\n { cols: 1, rows: 1, y: 1, x: 0 },\n {\n cols: 2,\n rows: 2,\n y: 3,\n x: 5,\n minItemRows: 2,\n minItemCols: 2,\n label: 'Min rows & cols = 2'\n },\n {\n cols: 2,\n rows: 2,\n y: 2,\n x: 0,\n maxItemRows: 2,\n maxItemCols: 2,\n label: 'Max rows & cols = 2'\n },\n {\n cols: 2,\n rows: 1,\n y: 2,\n x: 2,\n dragEnabled: true,\n resizeEnabled: true,\n label: 'Drag&Resize Enabled'\n },\n {\n cols: 1,\n rows: 1,\n y: 2,\n x: 4,\n dragEnabled: false,\n resizeEnabled: false,\n label: 'Drag&Resize Disabled'\n },\n { cols: 1, rows: 1, y: 2, x: 6 }\n ];\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2, hasContent: true },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 1, rows: 1, y: 2, x: 5 },\n { cols: 1, rows: 1, y: 1, x: 0 },\n { cols: 1, rows: 1, y: 1, x: 0 },\n {\n cols: 2,\n rows: 2,\n y: 3,\n x: 5,\n minItemRows: 2,\n minItemCols: 2,\n label: 'Min rows & cols = 2'\n },\n {\n cols: 2,\n rows: 2,\n y: 2,\n x: 0,\n maxItemRows: 2,\n maxItemCols: 2,\n label: 'Max rows & cols = 2'\n },\n {\n cols: 2,\n rows: 1,\n y: 2,\n x: 2,\n dragEnabled: true,\n resizeEnabled: true,\n label: 'Drag&Resize Enabled'\n },\n {\n cols: 1,\n rows: 1,\n y: 2,\n x: 4,\n dragEnabled: false,\n resizeEnabled: false,\n label: 'Drag&Resize Disabled'\n },\n { cols: 1, rows: 1, y: 2, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n\n ngOnDestroy(): void {\n document.body.removeAttribute('dir');\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/swap/swap.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 26,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 26,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        57,
                        689
                      ],
                      "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-swap',\n templateUrl: './swap.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-swap',\n templateUrl: './swap.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatCheckboxModule,\n MatIconModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class SwapComponent implements OnInit {\n options: GridsterConfig;\n dashboard: Array<GridsterItem>;\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n pushItems: false,\n swap: true,\n swapWhileDragging: false,\n draggable: {\n enabled: true\n },\n resizable: {\n enabled: true\n }\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 4, x: 5 },\n { cols: 1, rows: 1, y: 2, x: 1 },\n { cols: 2, rows: 2, y: 5, x: 5 },\n { cols: 2, rows: 2, y: 3, x: 2 },\n { cols: 2, rows: 1, y: 2, x: 2 },\n { cols: 1, rows: 1, y: 3, x: 4 },\n { cols: 1, rows: 1, y: 0, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/trackBy/trackBy.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 27,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 27,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        57,
                        698
                      ],
                      "text": "\n} from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport {\n CompactType,\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridsterItemComponentInterface,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\nimport { TrackByItemComponent } from './trackByItem.component';\n\n@Component({\n selector: 'app-trackby',\n templateUrl: './trackBy.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport {\n CompactType,\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridsterItemComponentInterface,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\nimport { TrackByItemComponent } from './trackByItem.component';\n\n@Component({\n selector: 'app-trackby',\n templateUrl: './trackBy.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n MatButtonModule,\n MatIconModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent,\n TrackByItemComponent\n ]\n})\nexport class TrackByComponent implements OnInit {\n options: GridsterConfig;\n dashboard: Array<GridsterItem>;\n dashboardOriginal: Array<GridsterItem>;\n\n static itemInit(\n item: GridsterItem,\n itemComponent: GridsterItemComponentInterface\n ): void {\n console.info('itemInitialized', item, itemComponent);\n }\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n compactType: CompactType.None,\n pushItems: true,\n draggable: {\n enabled: true\n },\n resizable: {\n enabled: true\n },\n minCols: 1,\n maxCols: 100,\n minRows: 1,\n maxRows: 100,\n maxItemCols: 100,\n minItemCols: 1,\n maxItemRows: 100,\n minItemRows: 1,\n maxItemArea: 2500,\n minItemArea: 1,\n defaultItemCols: 1,\n defaultItemRows: 1\n };\n\n this.dashboard = [\n {\n cols: 2,\n rows: 1,\n y: 0,\n x: 0,\n initCallback: TrackByComponent.itemInit,\n minItemCols: 1,\n maxItemCols: 100,\n maxItemRows: 100,\n minItemRows: 1,\n minItemArea: 1,\n maxItemArea: 2500,\n dragEnabled: true,\n resizeEnabled: true,\n compactEnabled: true,\n id: 0\n },\n { cols: 2, rows: 2, y: 0, x: 2, id: 1 },\n { cols: 1, rows: 1, y: 0, x: 4, id: 2 },\n { cols: 3, rows: 2, y: 1, x: 4, id: 3 },\n { cols: 1, rows: 1, y: 2, x: 1, id: 4 }\n ];\n this.dashboardOriginal = this.dashboard.map(x => ({ ...x }));\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n reset(): void {\n this.dashboard = this.dashboardOriginal.map(x => ({ ...x }));\n }\n\n addItem(): void {\n this.dashboard.push({\n x: 0,\n y: 0,\n cols: 1,\n rows: 1,\n id: this.dashboard.length\n });\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/trackBy/trackByItem.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 17,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 17,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        66,
                        365
                      ],
                      "text": "\n} from '@angular/core';\n\n@Component({\n selector: 'app-trackby-item',\n template: `\n <div class=\"button-holder\">\n <div style=\"font-size: 30px\">ID: {{ id }}</div>\n </div>\n `,\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n Input,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\n\n@Component({\n selector: 'app-trackby-item',\n template: `\n <div class=\"button-holder\">\n <div style=\"font-size: 30px\">ID: {{ id }}</div>\n </div>\n `,\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n standalone: true\n})\nexport class TrackByItemComponent implements OnInit {\n @Input() id: string;\n\n ngOnInit(): void {\n console.info(`Init ${this.id}`);\n }\n}\n",
            "usedDeprecatedRules": []
          }
        ]
      },
      "angular-gridster2": {
        "recommended": [],
        "all": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/projects/angular-gridster2/src/lib/gridster.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 34,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 41,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        230,
                        1141
                      ],
                      "text": ", ChangeDetectionStrategy\n} from '@angular/core';\nimport { debounceTime, Subject, switchMap, takeUntil, timer } from 'rxjs';\nimport { GridsterComponentInterface } from './gridster.interface';\nimport { GridsterCompact } from './gridsterCompact.service';\n\nimport { GridsterConfigService } from './gridsterConfig.constant';\nimport type { GridsterConfig } from './gridsterConfig.interface';\nimport { GridType } from './gridsterConfig.interface';\nimport { GridsterConfigS } from './gridsterConfigS.interface';\nimport { GridsterEmptyCell } from './gridsterEmptyCell.service';\nimport {\n GridsterItem,\n GridsterItemComponentInterface\n} from './gridsterItem.interface';\nimport { GridsterPreviewComponent } from './gridsterPreview.component';\nimport { GridsterRenderer } from './gridsterRenderer.service';\nimport { GridsterUtils } from './gridsterUtils.service';\n\n@Component({\n // eslint-disable-next-line @angular-eslint/component-selector\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/consistent-component-styles",
                "severity": 2,
                "message": "Use `styleUrl` instead of `styleUrls` for a single stylesheet",
                "line": 38,
                "column": 3,
                "nodeType": "Property",
                "messageId": "useStyleUrl",
                "endLine": 38,
                "endColumn": 32,
                "fix": {
                  "range": [
                    1199,
                    1228
                  ],
                  "text": "styleUrl: './gridster.css'"
                }
              },
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 39,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 39,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        209,
                        1270
                      ],
                      "text": "\n} from '@angular/core';\nimport { debounceTime, Subject, switchMap, takeUntil, timer } from 'rxjs';\nimport { GridsterComponentInterface } from './gridster.interface';\nimport { GridsterCompact } from './gridsterCompact.service';\n\nimport { GridsterConfigService } from './gridsterConfig.constant';\nimport type { GridsterConfig } from './gridsterConfig.interface';\nimport { GridType } from './gridsterConfig.interface';\nimport { GridsterConfigS } from './gridsterConfigS.interface';\nimport { GridsterEmptyCell } from './gridsterEmptyCell.service';\nimport {\n GridsterItem,\n GridsterItemComponentInterface\n} from './gridsterItem.interface';\nimport { GridsterPreviewComponent } from './gridsterPreview.component';\nimport { GridsterRenderer } from './gridsterRenderer.service';\nimport { GridsterUtils } from './gridsterUtils.service';\n\n@Component({\n // eslint-disable-next-line @angular-eslint/component-selector\n selector: 'gridster',\n templateUrl: './gridster.html',\n styleUrls: ['./gridster.css'],\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/sort-lifecycle-methods",
                "severity": 2,
                "message": "Lifecycle Methods are not declared in order of execution",
                "line": 151,
                "column": 3,
                "nodeType": "Identifier",
                "messageId": "lifecycleMethodsNotSorted",
                "endLine": 151,
                "endColumn": 14
              }
            ],
            "suppressedMessages": [
              {
                "ruleId": "@angular-eslint/component-selector",
                "severity": 2,
                "message": "The selector should be kebab-case (https://angular.dev/style-guide#style-05-02)",
                "line": 36,
                "column": 13,
                "nodeType": "Literal",
                "messageId": "styleFailure",
                "endLine": 36,
                "endColumn": 23,
                "suppressions": [
                  {
                    "kind": "directive",
                    "justification": ""
                  }
                ]
              }
            ],
            "errorCount": 4,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import { NgStyle } from '@angular/common';\nimport {\n ChangeDetectorRef,\n Component,\n ElementRef,\n EventEmitter,\n Inject,\n Input,\n NgZone,\n OnChanges,\n OnDestroy,\n OnInit,\n Renderer2,\n SimpleChanges,\n ViewEncapsulation\n} from '@angular/core';\nimport { debounceTime, Subject, switchMap, takeUntil, timer } from 'rxjs';\nimport { GridsterComponentInterface } from './gridster.interface';\nimport { GridsterCompact } from './gridsterCompact.service';\n\nimport { GridsterConfigService } from './gridsterConfig.constant';\nimport type { GridsterConfig } from './gridsterConfig.interface';\nimport { GridType } from './gridsterConfig.interface';\nimport { GridsterConfigS } from './gridsterConfigS.interface';\nimport { GridsterEmptyCell } from './gridsterEmptyCell.service';\nimport {\n GridsterItem,\n GridsterItemComponentInterface\n} from './gridsterItem.interface';\nimport { GridsterPreviewComponent } from './gridsterPreview.component';\nimport { GridsterRenderer } from './gridsterRenderer.service';\nimport { GridsterUtils } from './gridsterUtils.service';\n\n@Component({\n // eslint-disable-next-line @angular-eslint/component-selector\n selector: 'gridster',\n templateUrl: './gridster.html',\n styleUrls: ['./gridster.css'],\n encapsulation: ViewEncapsulation.None,\n imports: [NgStyle, GridsterPreviewComponent]\n})\nexport class GridsterComponent\n implements OnInit, OnChanges, OnDestroy, GridsterComponentInterface\n{\n @Input() options: GridsterConfig;\n movingItem: GridsterItem | null;\n el: HTMLElement;\n $options: GridsterConfigS;\n mobile: boolean;\n curWidth: number;\n curHeight: number;\n grid: GridsterItemComponentInterface[];\n columns = 0;\n rows = 0;\n curColWidth: number;\n curRowHeight: number;\n gridColumns = [];\n gridRows = [];\n windowResize: (() => void) | null;\n dragInProgress: boolean;\n emptyCell: GridsterEmptyCell;\n compact: GridsterCompact;\n gridRenderer: GridsterRenderer;\n previewStyle$: EventEmitter<GridsterItem | null> =\n new EventEmitter<GridsterItem | null>();\n\n calculateLayout$ = new Subject<void>();\n\n private resize$ = new Subject<void>();\n private destroy$ = new Subject<void>();\n\n constructor(\n @Inject(ElementRef) el: ElementRef,\n @Inject(Renderer2) public renderer: Renderer2,\n @Inject(ChangeDetectorRef) public cdRef: ChangeDetectorRef,\n @Inject(NgZone) public zone: NgZone\n ) {\n this.el = el.nativeElement;\n this.$options = JSON.parse(JSON.stringify(GridsterConfigService));\n this.mobile = false;\n this.curWidth = 0;\n this.curHeight = 0;\n this.grid = [];\n this.curColWidth = 0;\n this.curRowHeight = 0;\n this.dragInProgress = false;\n this.emptyCell = new GridsterEmptyCell(this);\n this.compact = new GridsterCompact(this);\n this.gridRenderer = new GridsterRenderer(this);\n }\n\n // ------ Function for swapWhileDragging option\n\n // identical to checkCollision() except that here we add boundaries.\n static checkCollisionTwoItemsForSwaping(\n item: GridsterItem,\n item2: GridsterItem\n ): boolean {\n // if the cols or rows of the items are 1 , doesnt make any sense to set a boundary. Only if the item is bigger we set a boundary\n const horizontalBoundaryItem1 = item.cols === 1 ? 0 : 1;\n const horizontalBoundaryItem2 = item2.cols === 1 ? 0 : 1;\n const verticalBoundaryItem1 = item.rows === 1 ? 0 : 1;\n const verticalBoundaryItem2 = item2.rows === 1 ? 0 : 1;\n return (\n item.x + horizontalBoundaryItem1 < item2.x + item2.cols &&\n item.x + item.cols > item2.x + horizontalBoundaryItem2 &&\n item.y + verticalBoundaryItem1 < item2.y + item2.rows &&\n item.y + item.rows > item2.y + verticalBoundaryItem2\n );\n }\n\n checkCollisionTwoItems(item: GridsterItem, item2: GridsterItem): boolean {\n const collision =\n item.x < item2.x + item2.cols &&\n item.x + item.cols > item2.x &&\n item.y < item2.y + item2.rows &&\n item.y + item.rows > item2.y;\n if (!collision) {\n return false;\n }\n if (!this.$options.allowMultiLayer) {\n return true;\n }\n const defaultLayerIndex = this.$options.defaultLayerIndex;\n const layerIndex =\n item.layerIndex === undefined ? defaultLayerIndex : item.layerIndex;\n const layerIndex2 =\n item2.layerIndex === undefined ? defaultLayerIndex : item2.layerIndex;\n return layerIndex === layerIndex2;\n }\n\n ngOnInit(): void {\n if (this.options.initCallback) {\n this.options.initCallback(this);\n }\n\n this.calculateLayout$\n .pipe(debounceTime(0), takeUntil(this.destroy$))\n .subscribe(() => this.calculateLayout());\n\n this.resize$\n .pipe(\n // Cancel previously scheduled DOM timer if `calculateLayout()` has been called\n // within this time range.\n switchMap(() => timer(100)),\n takeUntil(this.destroy$)\n )\n .subscribe(() => this.resize());\n }\n\n ngOnChanges(changes: SimpleChanges): void {\n if (changes.options) {\n this.setOptions();\n this.options.api = {\n optionsChanged: this.optionsChanged,\n resize: this.onResize,\n getNextPossiblePosition: this.getNextPossiblePosition,\n getFirstPossiblePosition: this.getFirstPossiblePosition,\n getLastPossiblePosition: this.getLastPossiblePosition,\n getItemComponent: (item: GridsterItem) => this.getItemComponent(item)\n };\n this.columns = this.$options.minCols;\n this.rows = this.$options.minRows + this.$options.addEmptyRowsCount;\n this.setGridSize();\n this.calculateLayout();\n }\n }\n\n private resize(): void {\n let height;\n let width;\n if (this.$options.gridType === 'fit' && !this.mobile) {\n width = this.el.offsetWidth;\n height = this.el.offsetHeight;\n } else {\n width = this.el.clientWidth;\n height = this.el.clientHeight;\n }\n if (\n (width !== this.curWidth || height !== this.curHeight) &&\n this.checkIfToResize()\n ) {\n this.onResize();\n }\n }\n\n setOptions(): void {\n this.$options = GridsterUtils.merge(\n this.$options,\n this.options,\n this.$options\n );\n if (!this.$options.disableWindowResize && !this.windowResize) {\n this.windowResize = this.renderer.listen(\n 'window',\n 'resize',\n this.onResize\n );\n } else if (this.$options.disableWindowResize && this.windowResize) {\n this.windowResize();\n this.windowResize = null;\n }\n this.emptyCell.updateOptions();\n }\n\n optionsChanged = (): void => {\n this.setOptions();\n let widgetsIndex: number = this.grid.length - 1;\n let widget: GridsterItemComponentInterface;\n for (; widgetsIndex >= 0; widgetsIndex--) {\n widget = this.grid[widgetsIndex];\n widget.updateOptions();\n }\n this.calculateLayout();\n };\n\n ngOnDestroy(): void {\n this.destroy$.next();\n this.previewStyle$.complete();\n if (this.windowResize) {\n this.windowResize();\n }\n if (this.options && this.options.destroyCallback) {\n this.options.destroyCallback(this);\n }\n if (this.options && this.options.api) {\n this.options.api.resize = undefined;\n this.options.api.optionsChanged = undefined;\n this.options.api.getNextPossiblePosition = undefined;\n this.options.api = undefined;\n }\n this.emptyCell.destroy();\n this.emptyCell = null!;\n this.compact.destroy();\n this.compact = null!;\n }\n\n onResize = (): void => {\n if (this.el.clientWidth) {\n if (this.options.setGridSize) {\n // reset width/height so the size is recalculated afterwards\n this.renderer.setStyle(this.el, 'width', '');\n this.renderer.setStyle(this.el, 'height', '');\n }\n this.setGridSize();\n this.calculateLayout();\n }\n };\n\n checkIfToResize(): boolean {\n const clientWidth = this.el.clientWidth;\n const offsetWidth = this.el.offsetWidth;\n const scrollWidth = this.el.scrollWidth;\n const clientHeight = this.el.clientHeight;\n const offsetHeight = this.el.offsetHeight;\n const scrollHeight = this.el.scrollHeight;\n const verticalScrollPresent =\n clientWidth < offsetWidth &&\n scrollHeight > offsetHeight &&\n scrollHeight - offsetHeight < offsetWidth - clientWidth;\n const horizontalScrollPresent =\n clientHeight < offsetHeight &&\n scrollWidth > offsetWidth &&\n scrollWidth - offsetWidth < offsetHeight - clientHeight;\n if (verticalScrollPresent) {\n return false;\n }\n return !horizontalScrollPresent;\n }\n\n checkIfMobile(): boolean {\n if (this.$options.useBodyForBreakpoint) {\n return this.$options.mobileBreakpoint > document.body.clientWidth;\n } else {\n return this.$options.mobileBreakpoint > this.curWidth;\n }\n }\n\n setGridSize(): void {\n const el = this.el;\n let width;\n let height;\n if (\n this.$options.setGridSize ||\n (this.$options.gridType === GridType.Fit && !this.mobile)\n ) {\n width = el.offsetWidth;\n height = el.offsetHeight;\n } else {\n width = el.clientWidth;\n height = el.clientHeight;\n }\n this.curWidth = width;\n this.curHeight = height;\n }\n\n setGridDimensions(): void {\n this.setGridSize();\n if (!this.mobile && this.checkIfMobile()) {\n this.mobile = !this.mobile;\n this.renderer.addClass(this.el, 'mobile');\n } else if (this.mobile && !this.checkIfMobile()) {\n this.mobile = !this.mobile;\n this.renderer.removeClass(this.el, 'mobile');\n }\n let rows = this.$options.minRows;\n let columns = this.$options.minCols;\n\n let widgetsIndex = this.grid.length - 1;\n let widget;\n for (; widgetsIndex >= 0; widgetsIndex--) {\n widget = this.grid[widgetsIndex];\n if (!widget.notPlaced) {\n rows = Math.max(rows, widget.$item.y + widget.$item.rows);\n columns = Math.max(columns, widget.$item.x + widget.$item.cols);\n }\n }\n rows += this.$options.addEmptyRowsCount;\n if (this.columns !== columns || this.rows !== rows) {\n this.columns = columns;\n this.rows = rows;\n if (this.options.gridSizeChangedCallback) {\n this.options.gridSizeChangedCallback(this);\n }\n }\n }\n\n private calculateLayout(): void {\n if (this.compact) {\n this.compact.checkCompact();\n }\n\n this.setGridDimensions();\n if (this.$options.outerMargin) {\n let marginWidth = -this.$options.margin;\n if (this.$options.outerMarginLeft !== null) {\n marginWidth += this.$options.outerMarginLeft;\n this.renderer.setStyle(\n this.el,\n 'padding-left',\n this.$options.outerMarginLeft + 'px'\n );\n } else {\n marginWidth += this.$options.margin;\n this.renderer.setStyle(\n this.el,\n 'padding-left',\n this.$options.margin + 'px'\n );\n }\n if (this.$options.outerMarginRight !== null) {\n marginWidth += this.$options.outerMarginRight;\n this.renderer.setStyle(\n this.el,\n 'padding-right',\n this.$options.outerMarginRight + 'px'\n );\n } else {\n marginWidth += this.$options.margin;\n this.renderer.setStyle(\n this.el,\n 'padding-right',\n this.$options.margin + 'px'\n );\n }\n this.curColWidth = (this.curWidth - marginWidth) / this.columns;\n let marginHeight = -this.$options.margin;\n if (this.$options.outerMarginTop !== null) {\n marginHeight += this.$options.outerMarginTop;\n this.renderer.setStyle(\n this.el,\n 'padding-top',\n this.$options.outerMarginTop + 'px'\n );\n } else {\n marginHeight += this.$options.margin;\n this.renderer.setStyle(\n this.el,\n 'padding-top',\n this.$options.margin + 'px'\n );\n }\n if (this.$options.outerMarginBottom !== null) {\n marginHeight += this.$options.outerMarginBottom;\n this.renderer.setStyle(\n this.el,\n 'padding-bottom',\n this.$options.outerMarginBottom + 'px'\n );\n } else {\n marginHeight += this.$options.margin;\n this.renderer.setStyle(\n this.el,\n 'padding-bottom',\n this.$options.margin + 'px'\n );\n }\n this.curRowHeight =\n ((this.curHeight - marginHeight) / this.rows) angular-gridster2.report.json angular.json package.json package-lock.json tsconfig.app.json tsconfig.json tsconfig.lint.json tsconfig.spec.json this.$options.rowHeightRatio;\n } else {\n this.curColWidth = (this.curWidth + this.$options.margin) / this.columns;\n this.curRowHeight =\n ((this.curHeight + this.$options.margin) / this.rows) angular-gridster2.report.json angular.json package.json package-lock.json tsconfig.app.json tsconfig.json tsconfig.lint.json tsconfig.spec.json this.$options.rowHeightRatio;\n this.renderer.setStyle(this.el, 'padding-left', 0 + 'px');\n this.renderer.setStyle(this.el, 'padding-right', 0 + 'px');\n this.renderer.setStyle(this.el, 'padding-top', 0 + 'px');\n this.renderer.setStyle(this.el, 'padding-bottom', 0 + 'px');\n }\n this.gridRenderer.updateGridster();\n\n if (this.$options.setGridSize) {\n this.renderer.addClass(this.el, 'gridSize');\n if (!this.mobile) {\n this.renderer.setStyle(\n this.el,\n 'width',\n this.columns angular-gridster2.report.json angular.json CODE_OF_CONDUCT.md LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json projects README.md src tsconfig.app.json tsconfig.json tsconfig.lint.json tsconfig.spec.json this.curColWidth + this.$options.margin + 'px'\n );\n this.renderer.setStyle(\n this.el,\n 'height',\n this.rows angular-gridster2.report.json angular.json CODE_OF_CONDUCT.md LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json projects README.md src tsconfig.app.json tsconfig.json tsconfig.lint.json tsconfig.spec.json this.curRowHeight + this.$options.margin + 'px'\n );\n }\n } else {\n this.renderer.removeClass(this.el, 'gridSize');\n this.renderer.setStyle(this.el, 'width', '');\n this.renderer.setStyle(this.el, 'height', '');\n }\n this.updateGrid();\n\n let widgetsIndex: number = this.grid.length - 1;\n let widget: GridsterItemComponentInterface;\n for (; widgetsIndex >= 0; widgetsIndex--) {\n widget = this.grid[widgetsIndex];\n widget.setSize();\n widget.drag.toggle();\n widget.resize.toggle();\n }\n\n this.resize$.next();\n }\n\n updateGrid(): void {\n if (this.$options.displayGrid === 'always' && !this.mobile) {\n this.renderer.addClass(this.el, 'display-grid');\n } else if (\n this.$options.displayGrid === 'onDrag&Resize' &&\n this.dragInProgress\n ) {\n this.renderer.addClass(this.el, 'display-grid');\n } else if (\n this.$options.displayGrid === 'none' ||\n !this.dragInProgress ||\n this.mobile\n ) {\n this.renderer.removeClass(this.el, 'display-grid');\n }\n this.setGridDimensions();\n this.gridColumns.length = GridsterComponent.getNewArrayLength(\n this.columns,\n this.curWidth,\n this.curColWidth\n );\n this.gridRows.length = GridsterComponent.getNewArrayLength(\n this.rows,\n this.curHeight,\n this.curRowHeight\n );\n this.cdRef.markForCheck();\n }\n\n addItem(itemComponent: GridsterItemComponentInterface): void {\n if (itemComponent.$item.cols === undefined) {\n itemComponent.$item.cols = this.$options.defaultItemCols;\n itemComponent.item.cols = itemComponent.$item.cols;\n itemComponent.itemChanged();\n }\n if (itemComponent.$item.rows === undefined) {\n itemComponent.$item.rows = this.$options.defaultItemRows;\n itemComponent.item.rows = itemComponent.$item.rows;\n itemComponent.itemChanged();\n }\n if (itemComponent.$item.x === -1 || itemComponent.$item.y === -1) {\n this.autoPositionItem(itemComponent);\n } else if (this.checkCollision(itemComponent.$item)) {\n if (!this.$options.disableWarnings) {\n itemComponent.notPlaced = true;\n console.warn(\n \"Can't be placed in the bounds of the dashboard, trying to auto position!/n\" +\n JSON.stringify(itemComponent.item, ['cols', 'rows', 'x', 'y'])\n );\n }\n if (!this.$options.disableAutoPositionOnConflict) {\n this.autoPositionItem(itemComponent);\n } else {\n itemComponent.notPlaced = true;\n }\n }\n this.grid.push(itemComponent);\n this.calculateLayout$.next();\n }\n\n removeItem(itemComponent: GridsterItemComponentInterface): void {\n this.grid.splice(this.grid.indexOf(itemComponent), 1);\n this.calculateLayout$.next();\n if (this.options.itemRemovedCallback) {\n this.options.itemRemovedCallback(itemComponent.item, itemComponent);\n }\n }\n\n checkCollision(item: GridsterItem): GridsterItemComponentInterface | boolean {\n let collision: GridsterItemComponentInterface | boolean = false;\n if (this.options.itemValidateCallback) {\n collision = !this.options.itemValidateCallback(item);\n }\n if (!collision && this.checkGridCollision(item)) {\n collision = true;\n }\n if (!collision) {\n const c = this.findItemWithItem(item);\n if (c) {\n collision = c;\n }\n }\n return collision;\n }\n\n checkGridCollision(item: GridsterItem): boolean {\n const noNegativePosition = item.y > -1 && item.x > -1;\n const maxGridCols = item.cols + item.x <= this.$options.maxCols;\n const maxGridRows = item.rows + item.y <= this.$options.maxRows;\n const maxItemCols =\n item.maxItemCols === undefined\n ? this.$options.maxItemCols\n : item.maxItemCols;\n const minItemCols =\n item.minItemCols === undefined\n ? this.$options.minItemCols\n : item.minItemCols;\n const maxItemRows =\n item.maxItemRows === undefined\n ? this.$options.maxItemRows\n : item.maxItemRows;\n const minItemRows =\n item.minItemRows === undefined\n ? this.$options.minItemRows\n : item.minItemRows;\n const inColsLimits = item.cols <= maxItemCols && item.cols >= minItemCols;\n const inRowsLimits = item.rows <= maxItemRows && item.rows >= minItemRows;\n const minAreaLimit =\n item.minItemArea === undefined\n ? this.$options.minItemArea\n : item.minItemArea;\n const maxAreaLimit =\n item.maxItemArea === undefined\n ? this.$options.maxItemArea\n : item.maxItemArea;\n const area = item.cols angular-gridster2.report.json angular.json CODE_OF_CONDUCT.md LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json projects README.md src tsconfig.app.json tsconfig.json tsconfig.lint.json tsconfig.spec.json item.rows;\n const inMinArea = minAreaLimit <= area;\n const inMaxArea = maxAreaLimit >= area;\n return !(\n noNegativePosition &&\n maxGridCols &&\n maxGridRows &&\n inColsLimits &&\n inRowsLimits &&\n inMinArea &&\n inMaxArea\n );\n }\n\n findItemWithItem(\n item: GridsterItem\n ): GridsterItemComponentInterface | boolean {\n let widgetsIndex = 0;\n let widget: GridsterItemComponentInterface;\n for (; widgetsIndex < this.grid.length; widgetsIndex++) {\n widget = this.grid[widgetsIndex];\n if (\n widget.$item !== item &&\n this.checkCollisionTwoItems(widget.$item, item)\n ) {\n return widget;\n }\n }\n return false;\n }\n\n findItemsWithItem(item: GridsterItem): Array<GridsterItemComponentInterface> {\n const a: Array<GridsterItemComponentInterface> = [];\n let widgetsIndex = 0;\n let widget: GridsterItemComponentInterface;\n for (; widgetsIndex < this.grid.length; widgetsIndex++) {\n widget = this.grid[widgetsIndex];\n if (\n widget.$item !== item &&\n this.checkCollisionTwoItems(widget.$item, item)\n ) {\n a.push(widget);\n }\n }\n return a;\n }\n\n autoPositionItem(itemComponent: GridsterItemComponentInterface): void {\n if (this.getNextPossiblePosition(itemComponent.$item)) {\n itemComponent.notPlaced = false;\n itemComponent.item.x = itemComponent.$item.x;\n itemComponent.item.y = itemComponent.$item.y;\n itemComponent.itemChanged();\n } else {\n itemComponent.notPlaced = true;\n if (!this.$options.disableWarnings) {\n console.warn(\n \"Can't be placed in the bounds of the dashboard!/n\" +\n JSON.stringify(itemComponent.item, ['cols', 'rows', 'x', 'y'])\n );\n }\n }\n }\n\n getNextPossiblePosition = (\n newItem: GridsterItem,\n startingFrom: { y?: number; x?: number } = {}\n ): boolean => {\n if (newItem.cols === -1) {\n newItem.cols = this.$options.defaultItemCols;\n }\n if (newItem.rows === -1) {\n newItem.rows = this.$options.defaultItemRows;\n }\n this.setGridDimensions();\n let rowsIndex = startingFrom.y || 0;\n let colsIndex;\n for (; rowsIndex < this.rows; rowsIndex++) {\n newItem.y = rowsIndex;\n colsIndex = startingFrom.x || 0;\n for (; colsIndex < this.columns; colsIndex++) {\n newItem.x = colsIndex;\n if (!this.checkCollision(newItem)) {\n return true;\n }\n }\n }\n const canAddToRows = this.$options.maxRows >= this.rows + newItem.rows;\n const canAddToColumns =\n this.$options.maxCols >= this.columns + newItem.cols;\n const addToRows = this.rows <= this.columns && canAddToRows;\n if (!addToRows && canAddToColumns) {\n newItem.x = this.columns;\n newItem.y = 0;\n return true;\n } else if (canAddToRows) {\n newItem.y = this.rows;\n newItem.x = 0;\n return true;\n }\n return false;\n };\n\n getFirstPossiblePosition = (item: GridsterItem): GridsterItem => {\n const tmpItem = Object.assign({}, item);\n this.getNextPossiblePosition(tmpItem);\n return tmpItem;\n };\n\n getLastPossiblePosition = (item: GridsterItem): GridsterItem => {\n let farthestItem: { y: number; x: number } = { y: 0, x: 0 };\n farthestItem = this.grid.reduce(\n (\n prev: { y: number; x: number },\n curr: GridsterItemComponentInterface\n ) => {\n const currCoords = {\n y: curr.$item.y + curr.$item.rows - 1,\n x: curr.$item.x + curr.$item.cols - 1\n };\n if (GridsterUtils.compareItems(prev, currCoords) === 1) {\n return currCoords;\n } else {\n return prev;\n }\n },\n farthestItem\n );\n\n const tmpItem = Object.assign({}, item);\n this.getNextPossiblePosition(tmpItem, farthestItem);\n return tmpItem;\n };\n\n pixelsToPositionX(\n x: number,\n roundingMethod: (x: number) => number,\n noLimit?: boolean\n ): number {\n const position = roundingMethod(x / this.curColWidth);\n if (noLimit) {\n return position;\n } else {\n return Math.max(position, 0);\n }\n }\n\n pixelsToPositionY(\n y: number,\n roundingMethod: (x: number) => number,\n noLimit?: boolean\n ): number {\n const position = roundingMethod(y / this.curRowHeight);\n if (noLimit) {\n return position;\n } else {\n return Math.max(position, 0);\n }\n }\n\n positionXToPixels(x: number): number {\n return x angular-gridster2.report.json angular.json CODE_OF_CONDUCT.md LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json projects README.md src tsconfig.app.json tsconfig.json tsconfig.lint.json tsconfig.spec.json this.curColWidth;\n }\n\n positionYToPixels(y: number): number {\n return y angular-gridster2.report.json angular.json CODE_OF_CONDUCT.md LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json projects README.md src tsconfig.app.json tsconfig.json tsconfig.lint.json tsconfig.spec.json this.curRowHeight;\n }\n\n getItemComponent(\n item: GridsterItem\n ): GridsterItemComponentInterface | undefined {\n return this.grid.find(c => c.item === item);\n }\n\n // ------ Functions for swapWhileDragging option\n\n // identical to checkCollision() except that this function calls findItemWithItemForSwaping() instead of findItemWithItem()\n checkCollisionForSwaping(\n item: GridsterItem\n ): GridsterItemComponentInterface | boolean {\n let collision: GridsterItemComponentInterface | boolean = false;\n if (this.options.itemValidateCallback) {\n collision = !this.options.itemValidateCallback(item);\n }\n if (!collision && this.checkGridCollision(item)) {\n collision = true;\n }\n if (!collision) {\n const c = this.findItemWithItemForSwapping(item);\n if (c) {\n collision = c;\n }\n }\n return collision;\n }\n\n // identical to findItemWithItem() except that this function calls checkCollisionTwoItemsForSwaping() instead of checkCollisionTwoItems()\n findItemWithItemForSwapping(\n item: GridsterItem\n ): GridsterItemComponentInterface | boolean {\n let widgetsIndex: number = this.grid.length - 1;\n let widget: GridsterItemComponentInterface;\n for (; widgetsIndex > -1; widgetsIndex--) {\n widget = this.grid[widgetsIndex];\n if (\n widget.$item !== item &&\n GridsterComponent.checkCollisionTwoItemsForSwaping(widget.$item, item)\n ) {\n return widget;\n }\n }\n return false;\n }\n\n previewStyle(drag = false): void {\n if (this.movingItem) {\n if (this.compact && drag) {\n this.compact.checkCompactItem(this.movingItem);\n }\n this.previewStyle$.next(this.movingItem);\n } else {\n this.previewStyle$.next(null);\n }\n }\n\n // ------ End of functions for swapWhileDragging option\n\n // eslint-disable-next-line @typescript-eslint/member-ordering\n private static getNewArrayLength(\n length: number,\n overallSize: number,\n size: number\n ): number {\n const newLength = Math.max(length, Math.floor(overallSize / size));\n\n if (newLength < 0) {\n return 0;\n }\n\n if (Number.isFinite(newLength)) {\n return Math.floor(newLength);\n }\n\n return 0;\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/projects/angular-gridster2/src/lib/gridsterItem.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 25,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 31,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        191,
                        615
                      ],
                      "text": ", ChangeDetectionStrategy\n} from '@angular/core';\nimport { GridsterComponent } from './gridster.component';\n\nimport { GridsterDraggable } from './gridsterDraggable.service';\nimport type { GridsterItem } from './gridsterItem.interface';\nimport { GridsterItemComponentInterface } from './gridsterItem.interface';\nimport { GridsterResizable } from './gridsterResizable.service';\nimport { GridsterUtils } from './gridsterUtils.service';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/consistent-component-styles",
                "severity": 2,
                "message": "Use `styleUrl` instead of `styleUrls` for a single stylesheet",
                "line": 28,
                "column": 3,
                "nodeType": "Property",
                "messageId": "useStyleUrl",
                "endLine": 28,
                "endColumn": 36,
                "fix": {
                  "range": [
                    682,
                    715
                  ],
                  "text": "styleUrl: './gridsterItem.css'"
                }
              },
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 29,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 29,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        170,
                        757
                      ],
                      "text": "\n} from '@angular/core';\nimport { GridsterComponent } from './gridster.component';\n\nimport { GridsterDraggable } from './gridsterDraggable.service';\nimport type { GridsterItem } from './gridsterItem.interface';\nimport { GridsterItemComponentInterface } from './gridsterItem.interface';\nimport { GridsterResizable } from './gridsterResizable.service';\nimport { GridsterUtils } from './gridsterUtils.service';\n\n@Component({\n selector: 'gridster-item',\n templateUrl: './gridsterItem.html',\n styleUrls: ['./gridsterItem.css'],\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 36,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 36,
                "endColumn": 21,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        934,
                        934
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 40,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 40,
                "endColumn": 23,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        1059,
                        1059
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 44,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 44,
                "endColumn": 23,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        1186,
                        1186
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/sort-lifecycle-methods",
                "severity": 2,
                "message": "Lifecycle Methods are not declared in order of execution",
                "line": 87,
                "column": 3,
                "nodeType": "Identifier",
                "messageId": "lifecycleMethodsNotSorted",
                "endLine": 87,
                "endColumn": 14
              }
            ],
            "suppressedMessages": [],
            "errorCount": 7,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n ElementRef,\n EventEmitter,\n HostBinding,\n Inject,\n Input,\n NgZone,\n OnChanges,\n OnDestroy,\n OnInit,\n Output,\n Renderer2,\n SimpleChanges,\n ViewEncapsulation\n} from '@angular/core';\nimport { GridsterComponent } from './gridster.component';\n\nimport { GridsterDraggable } from './gridsterDraggable.service';\nimport type { GridsterItem } from './gridsterItem.interface';\nimport { GridsterItemComponentInterface } from './gridsterItem.interface';\nimport { GridsterResizable } from './gridsterResizable.service';\nimport { GridsterUtils } from './gridsterUtils.service';\n\n@Component({\n selector: 'gridster-item',\n templateUrl: './gridsterItem.html',\n styleUrls: ['./gridsterItem.css'],\n encapsulation: ViewEncapsulation.None,\n standalone: true\n})\nexport class GridsterItemComponent\n implements OnInit, OnDestroy, OnChanges, GridsterItemComponentInterface\n{\n @Input() item: GridsterItem;\n @Output() itemInit = new EventEmitter<{\n item: GridsterItem;\n itemComponent: GridsterItemComponentInterface;\n }>();\n @Output() itemChange = new EventEmitter<{\n item: GridsterItem;\n itemComponent: GridsterItemComponentInterface;\n }>();\n @Output() itemResize = new EventEmitter<{\n item: GridsterItem;\n itemComponent: GridsterItemComponentInterface;\n }>();\n $item: GridsterItem;\n el: HTMLElement;\n gridster: GridsterComponent;\n top: number;\n left: number;\n width: number;\n height: number;\n drag: GridsterDraggable;\n resize: GridsterResizable;\n notPlaced: boolean;\n init: boolean;\n\n @HostBinding('style.z-index')\n get zIndex(): number {\n return this.getLayerIndex() + this.gridster.$options.baseLayerIndex;\n }\n\n constructor(\n @Inject(ElementRef) el: ElementRef,\n gridster: GridsterComponent,\n @Inject(Renderer2) public renderer: Renderer2,\n @Inject(NgZone) private zone: NgZone\n ) {\n this.el = el.nativeElement;\n this.$item = {\n cols: -1,\n rows: -1,\n x: -1,\n y: -1\n };\n this.gridster = gridster;\n this.drag = new GridsterDraggable(this, gridster, this.zone);\n this.resize = new GridsterResizable(this, gridster, this.zone);\n }\n\n ngOnInit(): void {\n this.gridster.addItem(this);\n }\n\n ngOnChanges(changes: SimpleChanges): void {\n if (changes.item) {\n this.updateOptions();\n\n if (!this.init) {\n this.gridster.calculateLayout$.next();\n }\n }\n if (changes.item && changes.item.previousValue) {\n this.setSize();\n }\n }\n\n updateOptions(): void {\n this.$item = GridsterUtils.merge(this.$item, this.item, {\n cols: undefined,\n rows: undefined,\n x: undefined,\n y: undefined,\n layerIndex: undefined,\n dragEnabled: undefined,\n resizeEnabled: undefined,\n compactEnabled: undefined,\n maxItemRows: undefined,\n minItemRows: undefined,\n maxItemCols: undefined,\n minItemCols: undefined,\n maxItemArea: undefined,\n minItemArea: undefined,\n resizableHandles: {\n s: undefined,\n e: undefined,\n n: undefined,\n w: undefined,\n se: undefined,\n ne: undefined,\n sw: undefined,\n nw: undefined\n }\n });\n }\n\n ngOnDestroy(): void {\n this.gridster.removeItem(this);\n this.drag.destroy();\n this.resize.destroy();\n this.gridster = this.drag = this.resize = null!;\n }\n\n setSize(): void {\n this.renderer.setStyle(this.el, 'display', this.notPlaced ? '' : 'block');\n this.gridster.gridRenderer.updateItem(this.el, this.$item, this.renderer);\n this.updateItemSize();\n }\n\n updateItemSize(): void {\n const top = this.$item.y angular-gridster2.report.json angular.json CODE_OF_CONDUCT.md LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json projects README.md src tsconfig.app.json tsconfig.json tsconfig.lint.json tsconfig.spec.json this.gridster.curRowHeight;\n const left = this.$item.x angular-gridster2.report.json angular.json CODE_OF_CONDUCT.md LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json projects README.md src tsconfig.app.json tsconfig.json tsconfig.lint.json tsconfig.spec.json this.gridster.curColWidth;\n const width =\n this.$item.cols angular-gridster2.report.json angular.json CODE_OF_CONDUCT.md LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json projects README.md src tsconfig.app.json tsconfig.json tsconfig.lint.json tsconfig.spec.json this.gridster.curColWidth -\n this.gridster.$options.margin;\n const height =\n this.$item.rows angular-gridster2.report.json angular.json CODE_OF_CONDUCT.md LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json projects README.md src tsconfig.app.json tsconfig.json tsconfig.lint.json tsconfig.spec.json this.gridster.curRowHeight -\n this.gridster.$options.margin;\n\n this.top = top;\n this.left = left;\n\n if (!this.init && width > 0 && height > 0) {\n this.init = true;\n if (this.item.initCallback) {\n this.item.initCallback(this.item, this);\n }\n if (this.gridster.options.itemInitCallback) {\n this.gridster.options.itemInitCallback(this.item, this);\n }\n this.itemInit.next({ item: this.item, itemComponent: this });\n if (this.gridster.$options.scrollToNewItems) {\n this.el.scrollIntoView(false);\n }\n }\n if (width !== this.width || height !== this.height) {\n this.width = width;\n this.height = height;\n if (this.gridster.options.itemResizeCallback) {\n this.gridster.options.itemResizeCallback(this.item, this);\n }\n this.itemResize.next({ item: this.item, itemComponent: this });\n }\n }\n\n itemChanged(): void {\n if (this.gridster.options.itemChangeCallback) {\n this.gridster.options.itemChangeCallback(this.item, this);\n }\n this.itemChange.next({ item: this.item, itemComponent: this });\n }\n\n checkItemChanges(newValue: GridsterItem, oldValue: GridsterItem): void {\n if (\n newValue.rows === oldValue.rows &&\n newValue.cols === oldValue.cols &&\n newValue.x === oldValue.x &&\n newValue.y === oldValue.y\n ) {\n return;\n }\n if (this.gridster.checkCollision(this.$item)) {\n this.$item.x = oldValue.x || 0;\n this.$item.y = oldValue.y || 0;\n this.$item.cols = oldValue.cols || 1;\n this.$item.rows = oldValue.rows || 1;\n this.setSize();\n } else {\n this.item.cols = this.$item.cols;\n this.item.rows = this.$item.rows;\n this.item.x = this.$item.x;\n this.item.y = this.$item.y;\n this.gridster.calculateLayout$.next();\n this.itemChanged();\n }\n }\n\n canBeDragged(): boolean {\n const gridDragEnabled = this.gridster.$options.draggable.enabled;\n const itemDragEnabled =\n this.$item.dragEnabled === undefined\n ? gridDragEnabled\n : this.$item.dragEnabled;\n return !this.gridster.mobile && gridDragEnabled && itemDragEnabled;\n }\n\n canBeResized(): boolean {\n const gridResizable = this.gridster.$options.resizable.enabled;\n const itemResizable =\n this.$item.resizeEnabled === undefined\n ? gridResizable\n : this.$item.resizeEnabled;\n return !this.gridster.mobile && gridResizable && itemResizable;\n }\n\n getResizableHandles() {\n const gridResizableHandles = this.gridster.$options.resizable.handles;\n const itemResizableHandles = this.$item.resizableHandles;\n // use grid settings if no settings are provided for the item.\n if (itemResizableHandles === undefined) {\n return gridResizableHandles;\n }\n // else merge the settings\n return {\n ...gridResizableHandles,\n ...itemResizableHandles\n };\n }\n\n bringToFront(offset: number): void {\n if (offset && offset <= 0) {\n return;\n }\n const layerIndex = this.getLayerIndex();\n const topIndex = this.gridster.$options.maxLayerIndex;\n if (layerIndex < topIndex) {\n const targetIndex = offset ? layerIndex + offset : topIndex;\n this.item.layerIndex = this.$item.layerIndex =\n targetIndex > topIndex ? topIndex : targetIndex;\n }\n }\n\n sendToBack(offset: number): void {\n if (offset && offset <= 0) {\n return;\n }\n const layerIndex = this.getLayerIndex();\n if (layerIndex > 0) {\n const targetIndex = offset ? layerIndex - offset : 0;\n this.item.layerIndex = this.$item.layerIndex =\n targetIndex < 0 ? 0 : targetIndex;\n }\n }\n\n private getLayerIndex(): number {\n if (this.item.layerIndex !== undefined) {\n return this.item.layerIndex;\n }\n if (this.gridster.$options.defaultLayerIndex !== undefined) {\n return this.gridster.$options.defaultLayerIndex;\n }\n return 0;\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/projects/angular-gridster2/src/lib/gridsterPreview.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 15,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 21,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        116,
                        314
                      ],
                      "text": ", ChangeDetectionStrategy\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { GridsterItem } from './gridsterItem.interface';\nimport { GridsterRenderer } from './gridsterRenderer.service';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/consistent-component-styles",
                "severity": 2,
                "message": "Use `styleUrl` instead of `styleUrls` for a single stylesheet",
                "line": 18,
                "column": 3,
                "nodeType": "Property",
                "messageId": "useStyleUrl",
                "endLine": 18,
                "endColumn": 39,
                "fix": {
                  "range": [
                    362,
                    398
                  ],
                  "text": "styleUrl: './gridsterPreview.css'"
                }
              },
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 19,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 19,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        95,
                        440
                      ],
                      "text": "\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { GridsterItem } from './gridsterItem.interface';\nimport { GridsterRenderer } from './gridsterRenderer.service';\n\n@Component({\n selector: 'gridster-preview',\n template: '',\n styleUrls: ['./gridsterPreview.css'],\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n ElementRef,\n EventEmitter,\n Input,\n OnDestroy,\n OnInit,\n Renderer2,\n ViewEncapsulation\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { GridsterItem } from './gridsterItem.interface';\nimport { GridsterRenderer } from './gridsterRenderer.service';\n\n@Component({\n selector: 'gridster-preview',\n template: '',\n styleUrls: ['./gridsterPreview.css'],\n encapsulation: ViewEncapsulation.None,\n standalone: true\n})\nexport class GridsterPreviewComponent implements OnInit, OnDestroy {\n @Input() previewStyle$: EventEmitter<GridsterItem | null>;\n @Input() gridRenderer: GridsterRenderer;\n private el: HTMLElement;\n private sub: Subscription;\n\n constructor(el: ElementRef, private renderer: Renderer2) {\n this.el = el.nativeElement;\n }\n\n ngOnInit(): void {\n this.sub = this.previewStyle$.subscribe(options =>\n this.previewStyle(options)\n );\n }\n\n ngOnDestroy(): void {\n if(this.sub) {\n this.sub.unsubscribe();\n }\n }\n\n private previewStyle(item: GridsterItem | null): void {\n if (item) {\n this.renderer.setStyle(this.el, 'display', 'block');\n this.gridRenderer.updateItem(this.el, item, this.renderer);\n } else {\n this.renderer.setStyle(this.el, 'display', '');\n }\n }\n}\n",
            "usedDeprecatedRules": []
          }
        ]
      }
    },
    "after": {
      "gridster-app": {
        "recommended": [],
        "all": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/app.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 14,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 14,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        47,
                        430
                      ],
                      "text": "\n} from '@angular/core';\nimport { MatListModule } from '@angular/material/list';\nimport { RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router';\n\n@Component({\n selector: 'app-root',\n templateUrl: './app.component.html',\n styleUrl: './app.component.css',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n ViewEncapsulation\n} from '@angular/core';\nimport { MatListModule } from '@angular/material/list';\nimport { RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router';\n\n@Component({\n selector: 'app-root',\n templateUrl: './app.component.html',\n styleUrl: './app.component.css',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [RouterLink, RouterLinkActive, RouterOutlet, MatListModule]\n})\nexport class AppComponent {}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/api/api.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 25,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 25,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        57,
                        593
                      ],
                      "text": "\n} from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport {\n CompactType,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridsterPush,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-api',\n templateUrl: './api.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport {\n CompactType,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridsterPush,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-api',\n templateUrl: './api.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n MatButtonModule,\n MatIconModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class ApiComponent implements OnInit {\n options: GridsterConfig;\n dashboard: GridsterItem[];\n itemToPush: GridsterItemComponent;\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n compactType: CompactType.None,\n pushItems: true,\n draggable: {\n enabled: true\n },\n resizable: {\n enabled: true\n }\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0, initCallback: this.initItem.bind(this) },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 4, x: 5 },\n { cols: 1, rows: 1, y: 2, x: 1 },\n { cols: 2, rows: 2, y: 5, x: 5 },\n { cols: 2, rows: 2, y: 3, x: 2 },\n { cols: 2, rows: 1, y: 2, x: 2 },\n { cols: 1, rows: 1, y: 3, x: 4 },\n { cols: 1, rows: 1, y: 0, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n\n initItem(item: GridsterItem, itemComponent: GridsterItemComponent): void {\n this.itemToPush = itemComponent;\n }\n\n pushItem(): void {\n const push = new GridsterPush(this.itemToPush); // init the service\n this.itemToPush.$item.rows += 4; // move/resize your item\n if (push.pushItems(push.fromNorth)) {\n // push items from a direction\n push.checkPushBack(); // check for items can restore to original position\n push.setPushedItems(); // save the items pushed\n this.itemToPush.setSize();\n this.itemToPush.checkItemChanges(\n this.itemToPush.$item,\n this.itemToPush.item\n );\n } else {\n this.itemToPush.$item.rows -= 4;\n push.restoreItems(); // restore to initial state the pushed items\n }\n push.destroy(); // destroy push instance\n // similar for GridsterPushResize and GridsterSwap\n }\n\n getItemComponent(): void {\n if (this.options.api && this.options.api.getItemComponent) {\n console.log(this.options.api.getItemComponent(this.dashboard[0]));\n }\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/compact/compact.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 26,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 26,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        57,
                        691
                      ],
                      "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n CompactType,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-compact',\n templateUrl: './compact.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n CompactType,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-compact',\n templateUrl: './compact.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatIconModule,\n MatSelectModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class CompactComponent implements OnInit {\n options: GridsterConfig;\n dashboard: Array<GridsterItem>;\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n compactType: CompactType.None,\n maxCols: 10,\n maxRows: 10,\n pushItems: true,\n draggable: {\n enabled: true\n },\n resizable: {\n enabled: true\n }\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 4, x: 5 },\n { cols: 1, rows: 1, y: 2, x: 1 },\n { cols: 2, rows: 2, y: 5, x: 5 },\n { cols: 2, rows: 2, y: 3, x: 2 },\n { cols: 2, rows: 1, y: 2, x: 2 },\n { cols: 1, rows: 1, y: 3, x: 4 },\n { cols: 1, rows: 1, y: 0, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/displayGrid/displayGrid.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 26,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 26,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        57,
                        700
                      ],
                      "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-display-grid',\n templateUrl: './displayGrid.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-display-grid',\n templateUrl: './displayGrid.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatIconModule,\n MatSelectModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class DisplayGridComponent implements OnInit {\n options: GridsterConfig;\n dashboard: Array<GridsterItem>;\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n pushItems: true,\n draggable: {\n enabled: true\n },\n resizable: {\n enabled: true\n }\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 4, x: 5 },\n { cols: 1, rows: 1, y: 2, x: 1 },\n { cols: 2, rows: 2, y: 5, x: 5 },\n { cols: 2, rows: 2, y: 3, x: 2 },\n { cols: 2, rows: 1, y: 2, x: 2 },\n { cols: 1, rows: 1, y: 3, x: 4 },\n { cols: 1, rows: 1, y: 0, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/drag/drag.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 33,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 33,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        57,
                        861
                      ],
                      "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\n\nimport {\n DisplayGrid,\n Draggable,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridsterItemComponentInterface,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\ninterface Safe extends GridsterConfig {\n draggable: Draggable;\n}\n\n@Component({\n selector: 'app-drag',\n templateUrl: './drag.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\n\nimport {\n DisplayGrid,\n Draggable,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridsterItemComponentInterface,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\ninterface Safe extends GridsterConfig {\n draggable: Draggable;\n}\n\n@Component({\n selector: 'app-drag',\n templateUrl: './drag.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatCheckboxModule,\n MatIconModule,\n MatInputModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class DragComponent implements OnInit {\n options: Safe;\n dashboard: Array<GridsterItem>;\n\n static eventStart(\n item: GridsterItem,\n itemComponent: GridsterItemComponentInterface,\n event: MouseEvent\n ): void {\n console.info('eventStart', item, itemComponent, event);\n }\n\n static eventStop(\n item: GridsterItem,\n itemComponent: GridsterItemComponentInterface,\n event: MouseEvent\n ): void {\n console.info('eventStop', item, itemComponent, event);\n }\n\n static overlapEvent(\n source: GridsterItem,\n target: GridsterItem,\n grid: GridsterComponent\n ): void {\n console.log('overlap', source, target, grid);\n }\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n pushItems: true,\n swap: false,\n draggable: {\n delayStart: 0,\n enabled: true,\n ignoreContentClass: 'gridster-item-content',\n ignoreContent: false,\n dragHandleClass: 'drag-handler',\n stop: DragComponent.eventStop,\n start: DragComponent.eventStart,\n dropOverItems: false,\n dropOverItemsCallback: DragComponent.overlapEvent\n },\n resizable: {\n enabled: true\n }\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2, hasContent: true },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 1, rows: 1, y: 2, x: 5 },\n { cols: 1, rows: 1, y: 1, x: 0 },\n { cols: 1, rows: 1, y: 1, x: 0 },\n {\n cols: 2,\n rows: 2,\n y: 3,\n x: 5,\n minItemRows: 2,\n minItemCols: 2,\n label: 'Min rows & cols = 2'\n },\n {\n cols: 2,\n rows: 2,\n y: 2,\n x: 0,\n maxItemRows: 2,\n maxItemCols: 2,\n label: 'Max rows & cols = 2'\n },\n {\n cols: 2,\n rows: 1,\n y: 2,\n x: 2,\n dragEnabled: true,\n resizeEnabled: true,\n label: 'Drag&Resize Enabled'\n },\n {\n cols: 1,\n rows: 1,\n y: 2,\n x: 4,\n dragEnabled: false,\n resizeEnabled: false,\n label: 'Drag&Resize Disabled'\n },\n { cols: 1, rows: 1, y: 2, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/dynamicWidgets/dynamicWidgets.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 26,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 26,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        73,
                        684
                      ],
                      "text": "\n} from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\nimport { ParentDynamicComponent } from './parentDynamic.component';\n\n@Component({\n selector: 'app-dynamic-widgets',\n templateUrl: './dynamicWidgets.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n EventEmitter,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\nimport { ParentDynamicComponent } from './parentDynamic.component';\n\n@Component({\n selector: 'app-dynamic-widgets',\n templateUrl: './dynamicWidgets.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n MatButtonModule,\n MatIconModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent,\n ParentDynamicComponent\n ]\n})\nexport class DynamicWidgetsComponent implements OnInit {\n options: GridsterConfig;\n dashboard: GridsterItem[];\n resizeEvent: EventEmitter<GridsterItem> = new EventEmitter<GridsterItem>();\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n disableWindowResize: false,\n scrollToNewItems: false,\n disableWarnings: false,\n ignoreMarginInRow: false,\n itemResizeCallback: item => {\n // update DB with new size\n // send the update to widgets\n this.resizeEvent.emit(item);\n }\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0, type: 'widgetA' },\n { cols: 2, rows: 2, y: 0, x: 2, type: 'widgetB' },\n { cols: 2, rows: 1, y: 1, x: 0, type: 'widgetC' }\n ];\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/dynamicWidgets/parentDynamic.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 15,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 15,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        56,
                        458
                      ],
                      "text": "\n} from '@angular/core';\nimport { WidgetAComponent } from './widgetA.component';\nimport { WidgetBComponent } from './widgetB.component';\nimport { WidgetCComponent } from './widgetC.component';\n\n@Component({\n selector: 'app-parent-dynamic',\n templateUrl: './parentDynamic.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n Input,\n ViewEncapsulation\n} from '@angular/core';\nimport { WidgetAComponent } from './widgetA.component';\nimport { WidgetBComponent } from './widgetB.component';\nimport { WidgetCComponent } from './widgetC.component';\n\n@Component({\n selector: 'app-parent-dynamic',\n templateUrl: './parentDynamic.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [WidgetAComponent, WidgetBComponent, WidgetCComponent]\n})\nexport class ParentDynamicComponent {\n @Input()\n widget;\n @Input()\n resizeEvent;\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/dynamicWidgets/widgetA.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 17,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 17,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        95,
                        392
                      ],
                      "text": "\n} from '@angular/core';\nimport { GridsterItem } from 'angular-gridster2';\nimport { Subscription } from 'rxjs';\n\n@Component({\n selector: 'app-widget-a',\n template: '{{widget.type}}',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n EventEmitter,\n Input,\n OnDestroy,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { GridsterItem } from 'angular-gridster2';\nimport { Subscription } from 'rxjs';\n\n@Component({\n selector: 'app-widget-a',\n template: '{{widget.type}}',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n standalone: true\n})\nexport class WidgetAComponent implements OnInit, OnDestroy {\n @Input()\n widget;\n @Input()\n resizeEvent: EventEmitter<GridsterItem>;\n\n resizeSub: Subscription;\n\n ngOnInit(): void {\n this.resizeSub = this.resizeEvent.subscribe(widget => {\n if (widget === this.widget) {\n // or check id , type or whatever you have there\n // resize your widget, chart, map , etc.\n console.log(widget);\n }\n });\n }\n\n ngOnDestroy(): void {\n this.resizeSub.unsubscribe();\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/dynamicWidgets/widgetB.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 17,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 17,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        95,
                        392
                      ],
                      "text": "\n} from '@angular/core';\nimport { GridsterItem } from 'angular-gridster2';\nimport { Subscription } from 'rxjs';\n\n@Component({\n selector: 'app-widget-b',\n template: '{{widget.type}}',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n EventEmitter,\n Input,\n OnDestroy,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { GridsterItem } from 'angular-gridster2';\nimport { Subscription } from 'rxjs';\n\n@Component({\n selector: 'app-widget-b',\n template: '{{widget.type}}',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n standalone: true\n})\nexport class WidgetBComponent implements OnInit, OnDestroy {\n @Input()\n widget;\n @Input()\n resizeEvent: EventEmitter<GridsterItem>;\n\n resizeSub: Subscription;\n\n ngOnInit(): void {\n this.resizeSub = this.resizeEvent.subscribe(widget => {\n if (widget === this.widget) {\n // or check id , type or whatever you have there\n // resize your widget, chart, map , etc.\n console.log(widget);\n }\n });\n }\n\n ngOnDestroy(): void {\n this.resizeSub.unsubscribe();\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/dynamicWidgets/widgetC.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 17,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 17,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        95,
                        392
                      ],
                      "text": "\n} from '@angular/core';\nimport { GridsterItem } from 'angular-gridster2';\nimport { Subscription } from 'rxjs';\n\n@Component({\n selector: 'app-widget-c',\n template: '{{widget.type}}',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n EventEmitter,\n Input,\n OnDestroy,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { GridsterItem } from 'angular-gridster2';\nimport { Subscription } from 'rxjs';\n\n@Component({\n selector: 'app-widget-c',\n template: '{{widget.type}}',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n standalone: true\n})\nexport class WidgetCComponent implements OnInit, OnDestroy {\n @Input()\n widget;\n @Input()\n resizeEvent: EventEmitter<GridsterItem>;\n\n resizeSub: Subscription;\n\n ngOnInit(): void {\n this.resizeSub = this.resizeEvent.subscribe(widget => {\n if (widget === this.widget) {\n // or check id , type or whatever you have there\n // resize your widget, chart, map , etc.\n console.log(widget);\n }\n });\n }\n\n ngOnDestroy(): void {\n this.resizeSub.unsubscribe();\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/emptyCell/emptyCell.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 27,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 27,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        57,
                        758
                      ],
                      "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-empty-cell',\n templateUrl: './emptyCell.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-empty-cell',\n templateUrl: './emptyCell.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatCheckboxModule,\n MatIconModule,\n MatInputModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class EmptyCellComponent implements OnInit {\n options: GridsterConfig;\n dashboard: Array<GridsterItem>;\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n enableEmptyCellClick: false,\n enableEmptyCellContextMenu: false,\n enableEmptyCellDrop: false,\n enableEmptyCellDrag: false,\n enableOccupiedCellDrop: false,\n emptyCellClickCallback: this.emptyCellClick.bind(this),\n emptyCellContextMenuCallback: this.emptyCellClick.bind(this),\n emptyCellDropCallback: this.emptyCellClick.bind(this),\n emptyCellDragCallback: this.emptyCellClick.bind(this),\n emptyCellDragMaxCols: 50,\n emptyCellDragMaxRows: 50\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 4, x: 5 },\n { cols: 1, rows: 1, y: 2, x: 1 },\n { cols: 2, rows: 2, y: 5, x: 5 },\n { cols: 2, rows: 2, y: 3, x: 2 },\n { cols: 2, rows: 1, y: 2, x: 2 },\n { cols: 1, rows: 1, y: 3, x: 4 },\n { cols: 1, rows: 1, y: 0, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n emptyCellClick(event: MouseEvent, item: GridsterItem): void {\n console.info('empty cell click', event, item);\n this.dashboard.push(item);\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n\n dragStartHandler(ev: DragEvent): void {\n if (ev.dataTransfer) {\n ev.dataTransfer.setData('text/plain', 'Drag Me Button');\n ev.dataTransfer.dropEffect = 'copy';\n }\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/gridEvents/gridEvents.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 26,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 26,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        57,
                        656
                      ],
                      "text": "\n} from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterComponentInterface,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridsterItemComponentInterface,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-grid-events',\n templateUrl: './gridEvents.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterComponentInterface,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridsterItemComponentInterface,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-grid-events',\n templateUrl: './gridEvents.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n MatButtonModule,\n MatIconModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class GridEventsComponent implements OnInit {\n options: GridsterConfig;\n dashboard: Array<GridsterItem>;\n remove: boolean;\n\n static itemChange(\n item: GridsterItem,\n itemComponent: GridsterItemComponentInterface\n ): void {\n console.info('itemChanged', item, itemComponent);\n }\n\n static itemResize(\n item: GridsterItem,\n itemComponent: GridsterItemComponentInterface\n ): void {\n console.info('itemResized', item, itemComponent);\n }\n\n static itemInit(\n item: GridsterItem,\n itemComponent: GridsterItemComponentInterface\n ): void {\n console.info('itemInitialized', item, itemComponent);\n }\n\n static itemRemoved(\n item: GridsterItem,\n itemComponent: GridsterItemComponentInterface\n ): void {\n console.info('itemRemoved', item, itemComponent);\n }\n\n static itemValidate(item: GridsterItem): boolean {\n return item.cols > 0 && item.rows > 0;\n }\n\n static gridInit(grid: GridsterComponentInterface): void {\n console.info('gridInit', grid);\n }\n\n static gridDestroy(grid: GridsterComponentInterface): void {\n console.info('gridDestroy', grid);\n }\n\n static gridSizeChanged(grid: GridsterComponentInterface): void {\n console.info('gridSizeChanged', grid);\n }\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n initCallback: GridEventsComponent.gridInit,\n destroyCallback: GridEventsComponent.gridDestroy,\n gridSizeChangedCallback: GridEventsComponent.gridSizeChanged,\n itemChangeCallback: GridEventsComponent.itemChange,\n itemResizeCallback: GridEventsComponent.itemResize,\n itemInitCallback: GridEventsComponent.itemInit,\n itemRemovedCallback: GridEventsComponent.itemRemoved,\n itemValidateCallback: GridEventsComponent.itemValidate,\n pushItems: true,\n draggable: {\n enabled: true\n },\n resizable: {\n enabled: true\n }\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 4, x: 5 },\n { cols: 1, rows: 1, y: 2, x: 1 },\n { cols: 2, rows: 2, y: 5, x: 5 },\n { cols: 2, rows: 2, y: 3, x: 2 },\n { cols: 2, rows: 1, y: 2, x: 2 },\n { cols: 1, rows: 1, y: 3, x: 4 },\n { cols: 1, rows: 1, y: 0, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n\n destroy(): void {\n this.remove = !this.remove;\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/gridMargins/gridMargins.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 28,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 28,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        57,
                        822
                      ],
                      "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-grid-margins',\n templateUrl: './gridMargins.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-grid-margins',\n templateUrl: './gridMargins.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatCheckboxModule,\n MatIconModule,\n MatInputModule,\n MatSelectModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class GridMarginsComponent implements OnInit {\n options: GridsterConfig;\n dashboard: Array<GridsterItem>;\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n margin: 10,\n outerMargin: true,\n outerMarginTop: null,\n outerMarginRight: null,\n outerMarginBottom: null,\n outerMarginLeft: null\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 4, x: 5 },\n { cols: 1, rows: 1, y: 2, x: 1 },\n { cols: 2, rows: 2, y: 5, x: 5 },\n { cols: 2, rows: 2, y: 3, x: 2 },\n { cols: 2, rows: 1, y: 2, x: 2 },\n { cols: 1, rows: 1, y: 3, x: 4 },\n { cols: 1, rows: 1, y: 0, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/gridSizes/gridSizes.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 26,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 26,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        57,
                        694
                      ],
                      "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-grid-sizes',\n templateUrl: './gridSizes.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-grid-sizes',\n templateUrl: './gridSizes.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatIconModule,\n MatInputModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class GridSizesComponent implements OnInit {\n options: GridsterConfig;\n dashboard: Array<GridsterItem>;\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n pushItems: true,\n draggable: {\n enabled: true\n },\n resizable: {\n enabled: true\n },\n minCols: 1,\n maxCols: 100,\n minRows: 1,\n maxRows: 100,\n maxItemCols: 100,\n minItemCols: 1,\n maxItemRows: 100,\n minItemRows: 1,\n maxItemArea: 2500,\n minItemArea: 1,\n defaultItemCols: 1,\n defaultItemRows: 1,\n addEmptyRowsCount: 2\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 4, x: 5 },\n { cols: 1, rows: 1, y: 2, x: 1 },\n { cols: 2, rows: 2, y: 5, x: 5 },\n { cols: 2, rows: 2, y: 3, x: 2 },\n { cols: 2, rows: 1, y: 2, x: 2 },\n { cols: 1, rows: 1, y: 3, x: 4 },\n { cols: 1, rows: 1, y: 0, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/gridTypes/gridTypes.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 28,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 28,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        57,
                        818
                      ],
                      "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-grid-types',\n templateUrl: './gridTypes.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-grid-types',\n templateUrl: './gridTypes.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatCheckboxModule,\n MatIconModule,\n MatInputModule,\n MatSelectModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class GridTypesComponent implements OnInit {\n options: GridsterConfig;\n dashboard: Array<GridsterItem>;\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n fixedColWidth: 105,\n fixedRowHeight: 105,\n keepFixedHeightInMobile: false,\n keepFixedWidthInMobile: false,\n mobileBreakpoint: 640,\n useBodyForBreakpoint: false,\n pushItems: true,\n rowHeightRatio: 1,\n draggable: {\n enabled: true\n },\n resizable: {\n enabled: true\n }\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 4, x: 5 },\n { cols: 1, rows: 1, y: 2, x: 1 },\n { cols: 2, rows: 2, y: 5, x: 5 },\n { cols: 2, rows: 2, y: 3, x: 2 },\n { cols: 2, rows: 1, y: 2, x: 2 },\n { cols: 1, rows: 1, y: 3, x: 4 },\n { cols: 1, rows: 1, y: 0, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/home/home.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 37,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 37,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        57,
                        947
                      ],
                      "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n CompactType,\n DisplayGrid,\n Draggable,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType,\n PushDirections,\n Resizable\n} from 'angular-gridster2';\n\ninterface Safe extends GridsterConfig {\n draggable: Draggable;\n resizable: Resizable;\n pushDirections: PushDirections;\n}\n\n@Component({\n selector: 'app-general',\n templateUrl: './home.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n CompactType,\n DisplayGrid,\n Draggable,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType,\n PushDirections,\n Resizable\n} from 'angular-gridster2';\n\ninterface Safe extends GridsterConfig {\n draggable: Draggable;\n resizable: Resizable;\n pushDirections: PushDirections;\n}\n\n@Component({\n selector: 'app-general',\n templateUrl: './home.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatCheckboxModule,\n MatIconModule,\n MatInputModule,\n MatSelectModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class HomeComponent implements OnInit {\n options: Safe;\n dashboard: Array<GridsterItem>;\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n compactType: CompactType.None,\n margin: 10,\n outerMargin: true,\n outerMarginTop: null,\n outerMarginRight: null,\n outerMarginBottom: null,\n outerMarginLeft: null,\n useTransformPositioning: true,\n mobileBreakpoint: 640,\n useBodyForBreakpoint: false,\n minCols: 1,\n maxCols: 100,\n minRows: 1,\n maxRows: 100,\n maxItemCols: 100,\n minItemCols: 1,\n maxItemRows: 100,\n minItemRows: 1,\n maxItemArea: 2500,\n minItemArea: 1,\n defaultItemCols: 1,\n defaultItemRows: 1,\n fixedColWidth: 105,\n fixedRowHeight: 105,\n keepFixedHeightInMobile: false,\n keepFixedWidthInMobile: false,\n scrollSensitivity: 10,\n scrollSpeed: 20,\n enableEmptyCellClick: false,\n enableEmptyCellContextMenu: false,\n enableEmptyCellDrop: false,\n enableEmptyCellDrag: false,\n enableOccupiedCellDrop: false,\n emptyCellDragMaxCols: 50,\n emptyCellDragMaxRows: 50,\n ignoreMarginInRow: false,\n draggable: {\n enabled: true\n },\n resizable: {\n enabled: true\n },\n swap: false,\n pushItems: true,\n disablePushOnDrag: false,\n disablePushOnResize: false,\n pushDirections: { north: true, east: true, south: true, west: true },\n pushResizeItems: false,\n displayGrid: DisplayGrid.Always,\n disableWindowResize: false,\n disableWarnings: false,\n scrollToNewItems: false\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2, hasContent: true },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 1, rows: 1, y: 2, x: 5 },\n { cols: 1, rows: 1, y: 1, x: 0 },\n { cols: 1, rows: 1, y: 1, x: 0 },\n {\n cols: 2,\n rows: 2,\n y: 3,\n x: 5,\n minItemRows: 2,\n minItemCols: 2,\n label: 'Min rows & cols = 2'\n },\n {\n cols: 2,\n rows: 2,\n y: 2,\n x: 0,\n maxItemRows: 2,\n maxItemCols: 2,\n label: 'Max rows & cols = 2'\n },\n {\n cols: 2,\n rows: 1,\n y: 2,\n x: 2,\n dragEnabled: true,\n resizeEnabled: true,\n label: 'Drag&Resize Enabled'\n },\n {\n cols: 1,\n rows: 1,\n y: 2,\n x: 4,\n dragEnabled: false,\n resizeEnabled: false,\n label: 'Drag&Resize Disabled'\n },\n { cols: 1, rows: 1, y: 2, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/items/items.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 30,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 30,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        57,
                        858
                      ],
                      "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n CompactType,\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridsterItemComponentInterface,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-items',\n templateUrl: './items.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n CompactType,\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridsterItemComponentInterface,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-items',\n templateUrl: './items.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatCheckboxModule,\n MatIconModule,\n MatInputModule,\n MatSelectModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class ItemsComponent implements OnInit {\n options: GridsterConfig;\n dashboard: Array<GridsterItem>;\n\n static itemInit(\n item: GridsterItem,\n itemComponent: GridsterItemComponentInterface\n ): void {\n console.info('itemInitialized', item, itemComponent);\n }\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n compactType: CompactType.None,\n pushItems: true,\n draggable: {\n enabled: true\n },\n resizable: {\n enabled: true\n },\n minCols: 1,\n maxCols: 100,\n minRows: 1,\n maxRows: 100,\n maxItemCols: 100,\n minItemCols: 1,\n maxItemRows: 100,\n minItemRows: 1,\n maxItemArea: 2500,\n minItemArea: 1,\n defaultItemCols: 1,\n defaultItemRows: 1\n };\n\n this.dashboard = [\n {\n cols: 2,\n rows: 1,\n y: 0,\n x: 0,\n initCallback: ItemsComponent.itemInit,\n minItemCols: 1,\n maxItemCols: 100,\n maxItemRows: 100,\n minItemRows: 1,\n minItemArea: 1,\n maxItemArea: 2500,\n dragEnabled: true,\n resizeEnabled: true,\n compactEnabled: true,\n resizableHandles: {\n s: true,\n e: true,\n n: true,\n w: true,\n se: true,\n ne: true,\n sw: true,\n nw: true\n }\n },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 2, x: 1 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/misc/misc.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 28,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 28,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        57,
                        807
                      ],
                      "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-misc',\n templateUrl: './misc.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-misc',\n templateUrl: './misc.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatCheckboxModule,\n MatIconModule,\n MatInputModule,\n MatSelectModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class MiscComponent implements OnInit {\n options: GridsterConfig;\n dashboard: Array<GridsterItem>;\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n draggable: { enabled: true },\n resizable: { enabled: true },\n disableWindowResize: true,\n scrollToNewItems: false,\n disableWarnings: false,\n ignoreMarginInRow: false,\n setGridSize: false,\n scale: 1\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 4, x: 5 },\n { cols: 1, rows: 1, y: 2, x: 1 },\n { cols: 2, rows: 2, y: 5, x: 5 },\n { cols: 2, rows: 2, y: 3, x: 2 },\n { cols: 2, rows: 1, y: 2, x: 2 },\n { cols: 1, rows: 1, y: 3, x: 4 },\n { cols: 1, rows: 1, y: 0, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/multiLayer/multi-layer.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 26,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 26,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        57,
                        751
                      ],
                      "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatMenuModule } from '@angular/material/menu';\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-swap',\n templateUrl: './multi-layer.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatMenuModule } from '@angular/material/menu';\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-swap',\n templateUrl: './multi-layer.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatCheckboxModule,\n MatIconModule,\n MatMenuModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class MultiLayerComponent implements OnInit {\n options: GridsterConfig;\n dashboard: Array<GridsterItem>;\n\n // noinspection DuplicatedCode\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n pushItems: false,\n swap: true,\n allowMultiLayer: true,\n defaultLayerIndex: 1,\n baseLayerIndex: 2,\n maxLayerIndex: 2,\n swapWhileDragging: false,\n draggable: {\n enabled: true\n },\n resizable: {\n enabled: true\n }\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0, layerIndex: 2 },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 4, x: 5 },\n { cols: 1, rows: 1, y: 2, x: 1 },\n { cols: 2, rows: 2, y: 5, x: 5 },\n { cols: 2, rows: 2, y: 3, x: 2 },\n { cols: 2, rows: 1, y: 2, x: 2 },\n { cols: 1, rows: 1, y: 3, x: 4 },\n { cols: 1, rows: 1, y: 0, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item: GridsterItem): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 2, rows: 1 });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/push/push.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 35,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 35,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        57,
                        858
                      ],
                      "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport {\n DisplayGrid,\n Draggable,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType,\n PushDirections,\n Resizable\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\ninterface Safe extends GridsterConfig {\n draggable: Draggable;\n resizable: Resizable;\n pushDirections: PushDirections;\n}\n\n@Component({\n selector: 'app-push',\n templateUrl: './push.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport {\n DisplayGrid,\n Draggable,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType,\n PushDirections,\n Resizable\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\ninterface Safe extends GridsterConfig {\n draggable: Draggable;\n resizable: Resizable;\n pushDirections: PushDirections;\n}\n\n@Component({\n selector: 'app-push',\n templateUrl: './push.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatCheckboxModule,\n MatIconModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class PushComponent implements OnInit {\n options: Safe;\n dashboard: Array<GridsterItem>;\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n pushItems: true,\n pushDirections: { north: true, east: true, south: true, west: true },\n pushResizeItems: false,\n swap: false,\n draggable: {\n enabled: true\n },\n resizable: {\n enabled: true\n }\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 4, x: 5 },\n { cols: 1, rows: 1, y: 2, x: 1 },\n { cols: 2, rows: 2, y: 5, x: 5 },\n { cols: 2, rows: 2, y: 3, x: 2 },\n { cols: 2, rows: 1, y: 2, x: 2 },\n { cols: 1, rows: 1, y: 3, x: 4 },\n { cols: 1, rows: 1, y: 0, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/resize/resize.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 46,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 46,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        57,
                        1066
                      ],
                      "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridsterItemComponentInterface,\n GridType,\n Resizable\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\ninterface SafeResizable extends Resizable {\n handles: {\n s: boolean;\n e: boolean;\n n: boolean;\n w: boolean;\n se: boolean;\n ne: boolean;\n sw: boolean;\n nw: boolean;\n };\n}\n\ninterface Safe extends GridsterConfig {\n resizable: SafeResizable;\n}\n\n@Component({\n selector: 'app-resize',\n templateUrl: './resize.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridsterItemComponentInterface,\n GridType,\n Resizable\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\ninterface SafeResizable extends Resizable {\n handles: {\n s: boolean;\n e: boolean;\n n: boolean;\n w: boolean;\n se: boolean;\n ne: boolean;\n sw: boolean;\n nw: boolean;\n };\n}\n\ninterface Safe extends GridsterConfig {\n resizable: SafeResizable;\n}\n\n@Component({\n selector: 'app-resize',\n templateUrl: './resize.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatCheckboxModule,\n MatIconModule,\n MatInputModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class ResizeComponent implements OnInit {\n options: Safe;\n dashboard: Array<GridsterItem>;\n\n static eventStop(\n item: GridsterItem,\n itemComponent: GridsterItemComponentInterface,\n event: MouseEvent\n ): void {\n console.info('eventStop', item, itemComponent, event);\n }\n\n static eventStart(\n item: GridsterItem,\n itemComponent: GridsterItemComponentInterface,\n event: MouseEvent\n ): void {\n console.info('eventStart', item, itemComponent, event);\n }\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n resizable: {\n delayStart: 0,\n enabled: true,\n start: ResizeComponent.eventStart,\n stop: ResizeComponent.eventStop,\n handles: {\n s: true,\n e: true,\n n: true,\n w: true,\n se: true,\n ne: true,\n sw: true,\n nw: true\n }\n }\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 4, x: 5 },\n { cols: 1, rows: 1, y: 2, x: 1 },\n { cols: 2, rows: 2, y: 5, x: 5 },\n { cols: 2, rows: 2, y: 3, x: 2 },\n { cols: 2, rows: 1, y: 2, x: 2 },\n { cols: 1, rows: 1, y: 3, x: 4 },\n { cols: 1, rows: 1, y: 0, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/rtl/rtl.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 37,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 37,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        70,
                        961
                      ],
                      "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport {\n CompactType,\n DirTypes,\n DisplayGrid,\n Draggable,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType,\n Resizable\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\ninterface Safe extends GridsterConfig {\n draggable: Draggable;\n resizable: Resizable;\n}\n\n@Component({\n selector: 'app-rtl',\n templateUrl: './rtl.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnDestroy,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport {\n CompactType,\n DirTypes,\n DisplayGrid,\n Draggable,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType,\n Resizable\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\ninterface Safe extends GridsterConfig {\n draggable: Draggable;\n resizable: Resizable;\n}\n\n@Component({\n selector: 'app-rtl',\n templateUrl: './rtl.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatCheckboxModule,\n MatIconModule,\n MatInputModule,\n MatSelectModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class RtlComponent implements OnInit, OnDestroy {\n options: Safe;\n dashboard: Array<GridsterItem>;\n\n ngOnInit(): void {\n document.body.setAttribute('dir', 'rtl');\n\n this.options = {\n gridType: GridType.Fit,\n compactType: CompactType.None,\n margin: 10,\n outerMargin: true,\n outerMarginTop: null,\n outerMarginRight: null,\n outerMarginBottom: null,\n outerMarginLeft: null,\n useTransformPositioning: true,\n mobileBreakpoint: 640,\n minCols: 1,\n maxCols: 100,\n minRows: 1,\n maxRows: 100,\n maxItemCols: 100,\n minItemCols: 1,\n maxItemRows: 100,\n minItemRows: 1,\n maxItemArea: 2500,\n minItemArea: 1,\n defaultItemCols: 1,\n defaultItemRows: 1,\n fixedColWidth: 105,\n fixedRowHeight: 105,\n keepFixedHeightInMobile: false,\n keepFixedWidthInMobile: false,\n scrollSensitivity: 10,\n scrollSpeed: 20,\n enableEmptyCellClick: false,\n enableEmptyCellContextMenu: false,\n enableEmptyCellDrop: false,\n enableEmptyCellDrag: false,\n enableOccupiedCellDrop: false,\n emptyCellDragMaxCols: 50,\n emptyCellDragMaxRows: 50,\n ignoreMarginInRow: false,\n draggable: {\n enabled: true\n },\n resizable: {\n enabled: true\n },\n swap: false,\n pushItems: true,\n disablePushOnDrag: false,\n disablePushOnResize: false,\n pushDirections: { north: true, east: true, south: true, west: true },\n pushResizeItems: false,\n displayGrid: DisplayGrid.Always,\n disableWindowResize: false,\n disableWarnings: false,\n scrollToNewItems: false,\n dirType: DirTypes.RTL\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2, hasContent: true },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 1, rows: 1, y: 2, x: 5 },\n { cols: 1, rows: 1, y: 1, x: 0 },\n { cols: 1, rows: 1, y: 1, x: 0 },\n {\n cols: 2,\n rows: 2,\n y: 3,\n x: 5,\n minItemRows: 2,\n minItemCols: 2,\n label: 'Min rows & cols = 2'\n },\n {\n cols: 2,\n rows: 2,\n y: 2,\n x: 0,\n maxItemRows: 2,\n maxItemCols: 2,\n label: 'Max rows & cols = 2'\n },\n {\n cols: 2,\n rows: 1,\n y: 2,\n x: 2,\n dragEnabled: true,\n resizeEnabled: true,\n label: 'Drag&Resize Enabled'\n },\n {\n cols: 1,\n rows: 1,\n y: 2,\n x: 4,\n dragEnabled: false,\n resizeEnabled: false,\n label: 'Drag&Resize Disabled'\n },\n { cols: 1, rows: 1, y: 2, x: 6 }\n ];\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2, hasContent: true },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 1, rows: 1, y: 2, x: 5 },\n { cols: 1, rows: 1, y: 1, x: 0 },\n { cols: 1, rows: 1, y: 1, x: 0 },\n {\n cols: 2,\n rows: 2,\n y: 3,\n x: 5,\n minItemRows: 2,\n minItemCols: 2,\n label: 'Min rows & cols = 2'\n },\n {\n cols: 2,\n rows: 2,\n y: 2,\n x: 0,\n maxItemRows: 2,\n maxItemCols: 2,\n label: 'Max rows & cols = 2'\n },\n {\n cols: 2,\n rows: 1,\n y: 2,\n x: 2,\n dragEnabled: true,\n resizeEnabled: true,\n label: 'Drag&Resize Enabled'\n },\n {\n cols: 1,\n rows: 1,\n y: 2,\n x: 4,\n dragEnabled: false,\n resizeEnabled: false,\n label: 'Drag&Resize Disabled'\n },\n { cols: 1, rows: 1, y: 2, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n\n ngOnDestroy(): void {\n document.body.removeAttribute('dir');\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/swap/swap.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 26,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 26,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        57,
                        689
                      ],
                      "text": "\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-swap',\n templateUrl: './swap.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport {\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n selector: 'app-swap',\n templateUrl: './swap.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n FormsModule,\n MatButtonModule,\n MatCheckboxModule,\n MatIconModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent\n ]\n})\nexport class SwapComponent implements OnInit {\n options: GridsterConfig;\n dashboard: Array<GridsterItem>;\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n pushItems: false,\n swap: true,\n swapWhileDragging: false,\n draggable: {\n enabled: true\n },\n resizable: {\n enabled: true\n }\n };\n\n this.dashboard = [\n { cols: 2, rows: 1, y: 0, x: 0 },\n { cols: 2, rows: 2, y: 0, x: 2 },\n { cols: 1, rows: 1, y: 0, x: 4 },\n { cols: 3, rows: 2, y: 1, x: 4 },\n { cols: 1, rows: 1, y: 4, x: 5 },\n { cols: 1, rows: 1, y: 2, x: 1 },\n { cols: 2, rows: 2, y: 5, x: 5 },\n { cols: 2, rows: 2, y: 3, x: 2 },\n { cols: 2, rows: 1, y: 2, x: 2 },\n { cols: 1, rows: 1, y: 3, x: 4 },\n { cols: 1, rows: 1, y: 0, x: 6 }\n ];\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n\n addItem(): void {\n this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/trackBy/trackBy.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 27,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 27,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        57,
                        698
                      ],
                      "text": "\n} from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport {\n CompactType,\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridsterItemComponentInterface,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\nimport { TrackByItemComponent } from './trackByItem.component';\n\n@Component({\n selector: 'app-trackby',\n templateUrl: './trackBy.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport {\n CompactType,\n DisplayGrid,\n GridsterComponent,\n GridsterConfig,\n GridsterItem,\n GridsterItemComponent,\n GridsterItemComponentInterface,\n GridType\n} from 'angular-gridster2';\nimport { MarkdownModule } from 'ngx-markdown';\nimport { TrackByItemComponent } from './trackByItem.component';\n\n@Component({\n selector: 'app-trackby',\n templateUrl: './trackBy.component.html',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n imports: [\n MatButtonModule,\n MatIconModule,\n MarkdownModule,\n GridsterComponent,\n GridsterItemComponent,\n TrackByItemComponent\n ]\n})\nexport class TrackByComponent implements OnInit {\n options: GridsterConfig;\n dashboard: Array<GridsterItem>;\n dashboardOriginal: Array<GridsterItem>;\n\n static itemInit(\n item: GridsterItem,\n itemComponent: GridsterItemComponentInterface\n ): void {\n console.info('itemInitialized', item, itemComponent);\n }\n\n ngOnInit(): void {\n this.options = {\n gridType: GridType.Fit,\n displayGrid: DisplayGrid.Always,\n compactType: CompactType.None,\n pushItems: true,\n draggable: {\n enabled: true\n },\n resizable: {\n enabled: true\n },\n minCols: 1,\n maxCols: 100,\n minRows: 1,\n maxRows: 100,\n maxItemCols: 100,\n minItemCols: 1,\n maxItemRows: 100,\n minItemRows: 1,\n maxItemArea: 2500,\n minItemArea: 1,\n defaultItemCols: 1,\n defaultItemRows: 1\n };\n\n this.dashboard = [\n {\n cols: 2,\n rows: 1,\n y: 0,\n x: 0,\n initCallback: TrackByComponent.itemInit,\n minItemCols: 1,\n maxItemCols: 100,\n maxItemRows: 100,\n minItemRows: 1,\n minItemArea: 1,\n maxItemArea: 2500,\n dragEnabled: true,\n resizeEnabled: true,\n compactEnabled: true,\n id: 0\n },\n { cols: 2, rows: 2, y: 0, x: 2, id: 1 },\n { cols: 1, rows: 1, y: 0, x: 4, id: 2 },\n { cols: 3, rows: 2, y: 1, x: 4, id: 3 },\n { cols: 1, rows: 1, y: 2, x: 1, id: 4 }\n ];\n this.dashboardOriginal = this.dashboard.map(x => ({ ...x }));\n }\n\n changedOptions(): void {\n if (this.options.api && this.options.api.optionsChanged) {\n this.options.api.optionsChanged();\n }\n }\n\n reset(): void {\n this.dashboard = this.dashboardOriginal.map(x => ({ ...x }));\n }\n\n addItem(): void {\n this.dashboard.push({\n x: 0,\n y: 0,\n cols: 1,\n rows: 1,\n id: this.dashboard.length\n });\n }\n\n removeItem($event: MouseEvent | TouchEvent, item): void {\n $event.preventDefault();\n $event.stopPropagation();\n this.dashboard.splice(this.dashboard.indexOf(item), 1);\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/src/app/sections/trackBy/trackByItem.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 17,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 17,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        66,
                        365
                      ],
                      "text": "\n} from '@angular/core';\n\n@Component({\n selector: 'app-trackby-item',\n template: `\n <div class=\"button-holder\">\n <div style=\"font-size: 30px\">ID: {{ id }}</div>\n </div>\n `,\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n Input,\n OnInit,\n ViewEncapsulation\n} from '@angular/core';\n\n@Component({\n selector: 'app-trackby-item',\n template: `\n <div class=\"button-holder\">\n <div style=\"font-size: 30px\">ID: {{ id }}</div>\n </div>\n `,\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n standalone: true\n})\nexport class TrackByItemComponent implements OnInit {\n @Input() id: string;\n\n ngOnInit(): void {\n console.info(`Init ${this.id}`);\n }\n}\n",
            "usedDeprecatedRules": []
          }
        ]
      },
      "angular-gridster2": {
        "recommended": [],
        "all": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/projects/angular-gridster2/src/lib/gridster.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 34,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 41,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        230,
                        1141
                      ],
                      "text": ", ChangeDetectionStrategy\n} from '@angular/core';\nimport { debounceTime, Subject, switchMap, takeUntil, timer } from 'rxjs';\nimport { GridsterComponentInterface } from './gridster.interface';\nimport { GridsterCompact } from './gridsterCompact.service';\n\nimport { GridsterConfigService } from './gridsterConfig.constant';\nimport type { GridsterConfig } from './gridsterConfig.interface';\nimport { GridType } from './gridsterConfig.interface';\nimport { GridsterConfigS } from './gridsterConfigS.interface';\nimport { GridsterEmptyCell } from './gridsterEmptyCell.service';\nimport {\n GridsterItem,\n GridsterItemComponentInterface\n} from './gridsterItem.interface';\nimport { GridsterPreviewComponent } from './gridsterPreview.component';\nimport { GridsterRenderer } from './gridsterRenderer.service';\nimport { GridsterUtils } from './gridsterUtils.service';\n\n@Component({\n // eslint-disable-next-line @angular-eslint/component-selector\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 39,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 39,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        209,
                        1267
                      ],
                      "text": "\n} from '@angular/core';\nimport { debounceTime, Subject, switchMap, takeUntil, timer } from 'rxjs';\nimport { GridsterComponentInterface } from './gridster.interface';\nimport { GridsterCompact } from './gridsterCompact.service';\n\nimport { GridsterConfigService } from './gridsterConfig.constant';\nimport type { GridsterConfig } from './gridsterConfig.interface';\nimport { GridType } from './gridsterConfig.interface';\nimport { GridsterConfigS } from './gridsterConfigS.interface';\nimport { GridsterEmptyCell } from './gridsterEmptyCell.service';\nimport {\n GridsterItem,\n GridsterItemComponentInterface\n} from './gridsterItem.interface';\nimport { GridsterPreviewComponent } from './gridsterPreview.component';\nimport { GridsterRenderer } from './gridsterRenderer.service';\nimport { GridsterUtils } from './gridsterUtils.service';\n\n@Component({\n // eslint-disable-next-line @angular-eslint/component-selector\n selector: 'gridster',\n templateUrl: './gridster.html',\n styleUrl: './gridster.css',\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/sort-lifecycle-methods",
                "severity": 2,
                "message": "Lifecycle Methods are not declared in order of execution",
                "line": 151,
                "column": 3,
                "nodeType": "Identifier",
                "messageId": "lifecycleMethodsNotSorted",
                "endLine": 151,
                "endColumn": 14
              }
            ],
            "suppressedMessages": [
              {
                "ruleId": "@angular-eslint/component-selector",
                "severity": 2,
                "message": "The selector should be kebab-case (https://angular.dev/style-guide#style-05-02)",
                "line": 36,
                "column": 13,
                "nodeType": "Literal",
                "messageId": "styleFailure",
                "endLine": 36,
                "endColumn": 23,
                "suppressions": [
                  {
                    "kind": "directive",
                    "justification": ""
                  }
                ]
              }
            ],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { NgStyle } from '@angular/common';\nimport {\n ChangeDetectorRef,\n Component,\n ElementRef,\n EventEmitter,\n Inject,\n Input,\n NgZone,\n OnChanges,\n OnDestroy,\n OnInit,\n Renderer2,\n SimpleChanges,\n ViewEncapsulation\n} from '@angular/core';\nimport { debounceTime, Subject, switchMap, takeUntil, timer } from 'rxjs';\nimport { GridsterComponentInterface } from './gridster.interface';\nimport { GridsterCompact } from './gridsterCompact.service';\n\nimport { GridsterConfigService } from './gridsterConfig.constant';\nimport type { GridsterConfig } from './gridsterConfig.interface';\nimport { GridType } from './gridsterConfig.interface';\nimport { GridsterConfigS } from './gridsterConfigS.interface';\nimport { GridsterEmptyCell } from './gridsterEmptyCell.service';\nimport {\n GridsterItem,\n GridsterItemComponentInterface\n} from './gridsterItem.interface';\nimport { GridsterPreviewComponent } from './gridsterPreview.component';\nimport { GridsterRenderer } from './gridsterRenderer.service';\nimport { GridsterUtils } from './gridsterUtils.service';\n\n@Component({\n // eslint-disable-next-line @angular-eslint/component-selector\n selector: 'gridster',\n templateUrl: './gridster.html',\n styleUrl: './gridster.css',\n encapsulation: ViewEncapsulation.None,\n imports: [NgStyle, GridsterPreviewComponent]\n})\nexport class GridsterComponent\n implements OnInit, OnChanges, OnDestroy, GridsterComponentInterface\n{\n @Input() options: GridsterConfig;\n movingItem: GridsterItem | null;\n el: HTMLElement;\n $options: GridsterConfigS;\n mobile: boolean;\n curWidth: number;\n curHeight: number;\n grid: GridsterItemComponentInterface[];\n columns = 0;\n rows = 0;\n curColWidth: number;\n curRowHeight: number;\n gridColumns = [];\n gridRows = [];\n windowResize: (() => void) | null;\n dragInProgress: boolean;\n emptyCell: GridsterEmptyCell;\n compact: GridsterCompact;\n gridRenderer: GridsterRenderer;\n previewStyle$: EventEmitter<GridsterItem | null> =\n new EventEmitter<GridsterItem | null>();\n\n calculateLayout$ = new Subject<void>();\n\n private resize$ = new Subject<void>();\n private destroy$ = new Subject<void>();\n\n constructor(\n @Inject(ElementRef) el: ElementRef,\n @Inject(Renderer2) public renderer: Renderer2,\n @Inject(ChangeDetectorRef) public cdRef: ChangeDetectorRef,\n @Inject(NgZone) public zone: NgZone\n ) {\n this.el = el.nativeElement;\n this.$options = JSON.parse(JSON.stringify(GridsterConfigService));\n this.mobile = false;\n this.curWidth = 0;\n this.curHeight = 0;\n this.grid = [];\n this.curColWidth = 0;\n this.curRowHeight = 0;\n this.dragInProgress = false;\n this.emptyCell = new GridsterEmptyCell(this);\n this.compact = new GridsterCompact(this);\n this.gridRenderer = new GridsterRenderer(this);\n }\n\n // ------ Function for swapWhileDragging option\n\n // identical to checkCollision() except that here we add boundaries.\n static checkCollisionTwoItemsForSwaping(\n item: GridsterItem,\n item2: GridsterItem\n ): boolean {\n // if the cols or rows of the items are 1 , doesnt make any sense to set a boundary. Only if the item is bigger we set a boundary\n const horizontalBoundaryItem1 = item.cols === 1 ? 0 : 1;\n const horizontalBoundaryItem2 = item2.cols === 1 ? 0 : 1;\n const verticalBoundaryItem1 = item.rows === 1 ? 0 : 1;\n const verticalBoundaryItem2 = item2.rows === 1 ? 0 : 1;\n return (\n item.x + horizontalBoundaryItem1 < item2.x + item2.cols &&\n item.x + item.cols > item2.x + horizontalBoundaryItem2 &&\n item.y + verticalBoundaryItem1 < item2.y + item2.rows &&\n item.y + item.rows > item2.y + verticalBoundaryItem2\n );\n }\n\n checkCollisionTwoItems(item: GridsterItem, item2: GridsterItem): boolean {\n const collision =\n item.x < item2.x + item2.cols &&\n item.x + item.cols > item2.x &&\n item.y < item2.y + item2.rows &&\n item.y + item.rows > item2.y;\n if (!collision) {\n return false;\n }\n if (!this.$options.allowMultiLayer) {\n return true;\n }\n const defaultLayerIndex = this.$options.defaultLayerIndex;\n const layerIndex =\n item.layerIndex === undefined ? defaultLayerIndex : item.layerIndex;\n const layerIndex2 =\n item2.layerIndex === undefined ? defaultLayerIndex : item2.layerIndex;\n return layerIndex === layerIndex2;\n }\n\n ngOnInit(): void {\n if (this.options.initCallback) {\n this.options.initCallback(this);\n }\n\n this.calculateLayout$\n .pipe(debounceTime(0), takeUntil(this.destroy$))\n .subscribe(() => this.calculateLayout());\n\n this.resize$\n .pipe(\n // Cancel previously scheduled DOM timer if `calculateLayout()` has been called\n // within this time range.\n switchMap(() => timer(100)),\n takeUntil(this.destroy$)\n )\n .subscribe(() => this.resize());\n }\n\n ngOnChanges(changes: SimpleChanges): void {\n if (changes.options) {\n this.setOptions();\n this.options.api = {\n optionsChanged: this.optionsChanged,\n resize: this.onResize,\n getNextPossiblePosition: this.getNextPossiblePosition,\n getFirstPossiblePosition: this.getFirstPossiblePosition,\n getLastPossiblePosition: this.getLastPossiblePosition,\n getItemComponent: (item: GridsterItem) => this.getItemComponent(item)\n };\n this.columns = this.$options.minCols;\n this.rows = this.$options.minRows + this.$options.addEmptyRowsCount;\n this.setGridSize();\n this.calculateLayout();\n }\n }\n\n private resize(): void {\n let height;\n let width;\n if (this.$options.gridType === 'fit' && !this.mobile) {\n width = this.el.offsetWidth;\n height = this.el.offsetHeight;\n } else {\n width = this.el.clientWidth;\n height = this.el.clientHeight;\n }\n if (\n (width !== this.curWidth || height !== this.curHeight) &&\n this.checkIfToResize()\n ) {\n this.onResize();\n }\n }\n\n setOptions(): void {\n this.$options = GridsterUtils.merge(\n this.$options,\n this.options,\n this.$options\n );\n if (!this.$options.disableWindowResize && !this.windowResize) {\n this.windowResize = this.renderer.listen(\n 'window',\n 'resize',\n this.onResize\n );\n } else if (this.$options.disableWindowResize && this.windowResize) {\n this.windowResize();\n this.windowResize = null;\n }\n this.emptyCell.updateOptions();\n }\n\n optionsChanged = (): void => {\n this.setOptions();\n let widgetsIndex: number = this.grid.length - 1;\n let widget: GridsterItemComponentInterface;\n for (; widgetsIndex >= 0; widgetsIndex--) {\n widget = this.grid[widgetsIndex];\n widget.updateOptions();\n }\n this.calculateLayout();\n };\n\n ngOnDestroy(): void {\n this.destroy$.next();\n this.previewStyle$.complete();\n if (this.windowResize) {\n this.windowResize();\n }\n if (this.options && this.options.destroyCallback) {\n this.options.destroyCallback(this);\n }\n if (this.options && this.options.api) {\n this.options.api.resize = undefined;\n this.options.api.optionsChanged = undefined;\n this.options.api.getNextPossiblePosition = undefined;\n this.options.api = undefined;\n }\n this.emptyCell.destroy();\n this.emptyCell = null!;\n this.compact.destroy();\n this.compact = null!;\n }\n\n onResize = (): void => {\n if (this.el.clientWidth) {\n if (this.options.setGridSize) {\n // reset width/height so the size is recalculated afterwards\n this.renderer.setStyle(this.el, 'width', '');\n this.renderer.setStyle(this.el, 'height', '');\n }\n this.setGridSize();\n this.calculateLayout();\n }\n };\n\n checkIfToResize(): boolean {\n const clientWidth = this.el.clientWidth;\n const offsetWidth = this.el.offsetWidth;\n const scrollWidth = this.el.scrollWidth;\n const clientHeight = this.el.clientHeight;\n const offsetHeight = this.el.offsetHeight;\n const scrollHeight = this.el.scrollHeight;\n const verticalScrollPresent =\n clientWidth < offsetWidth &&\n scrollHeight > offsetHeight &&\n scrollHeight - offsetHeight < offsetWidth - clientWidth;\n const horizontalScrollPresent =\n clientHeight < offsetHeight &&\n scrollWidth > offsetWidth &&\n scrollWidth - offsetWidth < offsetHeight - clientHeight;\n if (verticalScrollPresent) {\n return false;\n }\n return !horizontalScrollPresent;\n }\n\n checkIfMobile(): boolean {\n if (this.$options.useBodyForBreakpoint) {\n return this.$options.mobileBreakpoint > document.body.clientWidth;\n } else {\n return this.$options.mobileBreakpoint > this.curWidth;\n }\n }\n\n setGridSize(): void {\n const el = this.el;\n let width;\n let height;\n if (\n this.$options.setGridSize ||\n (this.$options.gridType === GridType.Fit && !this.mobile)\n ) {\n width = el.offsetWidth;\n height = el.offsetHeight;\n } else {\n width = el.clientWidth;\n height = el.clientHeight;\n }\n this.curWidth = width;\n this.curHeight = height;\n }\n\n setGridDimensions(): void {\n this.setGridSize();\n if (!this.mobile && this.checkIfMobile()) {\n this.mobile = !this.mobile;\n this.renderer.addClass(this.el, 'mobile');\n } else if (this.mobile && !this.checkIfMobile()) {\n this.mobile = !this.mobile;\n this.renderer.removeClass(this.el, 'mobile');\n }\n let rows = this.$options.minRows;\n let columns = this.$options.minCols;\n\n let widgetsIndex = this.grid.length - 1;\n let widget;\n for (; widgetsIndex >= 0; widgetsIndex--) {\n widget = this.grid[widgetsIndex];\n if (!widget.notPlaced) {\n rows = Math.max(rows, widget.$item.y + widget.$item.rows);\n columns = Math.max(columns, widget.$item.x + widget.$item.cols);\n }\n }\n rows += this.$options.addEmptyRowsCount;\n if (this.columns !== columns || this.rows !== rows) {\n this.columns = columns;\n this.rows = rows;\n if (this.options.gridSizeChangedCallback) {\n this.options.gridSizeChangedCallback(this);\n }\n }\n }\n\n private calculateLayout(): void {\n if (this.compact) {\n this.compact.checkCompact();\n }\n\n this.setGridDimensions();\n if (this.$options.outerMargin) {\n let marginWidth = -this.$options.margin;\n if (this.$options.outerMarginLeft !== null) {\n marginWidth += this.$options.outerMarginLeft;\n this.renderer.setStyle(\n this.el,\n 'padding-left',\n this.$options.outerMarginLeft + 'px'\n );\n } else {\n marginWidth += this.$options.margin;\n this.renderer.setStyle(\n this.el,\n 'padding-left',\n this.$options.margin + 'px'\n );\n }\n if (this.$options.outerMarginRight !== null) {\n marginWidth += this.$options.outerMarginRight;\n this.renderer.setStyle(\n this.el,\n 'padding-right',\n this.$options.outerMarginRight + 'px'\n );\n } else {\n marginWidth += this.$options.margin;\n this.renderer.setStyle(\n this.el,\n 'padding-right',\n this.$options.margin + 'px'\n );\n }\n this.curColWidth = (this.curWidth - marginWidth) / this.columns;\n let marginHeight = -this.$options.margin;\n if (this.$options.outerMarginTop !== null) {\n marginHeight += this.$options.outerMarginTop;\n this.renderer.setStyle(\n this.el,\n 'padding-top',\n this.$options.outerMarginTop + 'px'\n );\n } else {\n marginHeight += this.$options.margin;\n this.renderer.setStyle(\n this.el,\n 'padding-top',\n this.$options.margin + 'px'\n );\n }\n if (this.$options.outerMarginBottom !== null) {\n marginHeight += this.$options.outerMarginBottom;\n this.renderer.setStyle(\n this.el,\n 'padding-bottom',\n this.$options.outerMarginBottom + 'px'\n );\n } else {\n marginHeight += this.$options.margin;\n this.renderer.setStyle(\n this.el,\n 'padding-bottom',\n this.$options.margin + 'px'\n );\n }\n this.curRowHeight =\n ((this.curHeight - marginHeight) / this.rows) angular-gridster2.report.json angular.json package.json package-lock.json tsconfig.app.json tsconfig.json tsconfig.lint.json tsconfig.spec.json this.$options.rowHeightRatio;\n } else {\n this.curColWidth = (this.curWidth + this.$options.margin) / this.columns;\n this.curRowHeight =\n ((this.curHeight + this.$options.margin) / this.rows) angular-gridster2.report.json angular.json package.json package-lock.json tsconfig.app.json tsconfig.json tsconfig.lint.json tsconfig.spec.json this.$options.rowHeightRatio;\n this.renderer.setStyle(this.el, 'padding-left', 0 + 'px');\n this.renderer.setStyle(this.el, 'padding-right', 0 + 'px');\n this.renderer.setStyle(this.el, 'padding-top', 0 + 'px');\n this.renderer.setStyle(this.el, 'padding-bottom', 0 + 'px');\n }\n this.gridRenderer.updateGridster();\n\n if (this.$options.setGridSize) {\n this.renderer.addClass(this.el, 'gridSize');\n if (!this.mobile) {\n this.renderer.setStyle(\n this.el,\n 'width',\n this.columns angular-gridster2.report.json angular.json CODE_OF_CONDUCT.md LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json projects README.md src tsconfig.app.json tsconfig.json tsconfig.lint.json tsconfig.spec.json this.curColWidth + this.$options.margin + 'px'\n );\n this.renderer.setStyle(\n this.el,\n 'height',\n this.rows angular-gridster2.report.json angular.json CODE_OF_CONDUCT.md LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json projects README.md src tsconfig.app.json tsconfig.json tsconfig.lint.json tsconfig.spec.json this.curRowHeight + this.$options.margin + 'px'\n );\n }\n } else {\n this.renderer.removeClass(this.el, 'gridSize');\n this.renderer.setStyle(this.el, 'width', '');\n this.renderer.setStyle(this.el, 'height', '');\n }\n this.updateGrid();\n\n let widgetsIndex: number = this.grid.length - 1;\n let widget: GridsterItemComponentInterface;\n for (; widgetsIndex >= 0; widgetsIndex--) {\n widget = this.grid[widgetsIndex];\n widget.setSize();\n widget.drag.toggle();\n widget.resize.toggle();\n }\n\n this.resize$.next();\n }\n\n updateGrid(): void {\n if (this.$options.displayGrid === 'always' && !this.mobile) {\n this.renderer.addClass(this.el, 'display-grid');\n } else if (\n this.$options.displayGrid === 'onDrag&Resize' &&\n this.dragInProgress\n ) {\n this.renderer.addClass(this.el, 'display-grid');\n } else if (\n this.$options.displayGrid === 'none' ||\n !this.dragInProgress ||\n this.mobile\n ) {\n this.renderer.removeClass(this.el, 'display-grid');\n }\n this.setGridDimensions();\n this.gridColumns.length = GridsterComponent.getNewArrayLength(\n this.columns,\n this.curWidth,\n this.curColWidth\n );\n this.gridRows.length = GridsterComponent.getNewArrayLength(\n this.rows,\n this.curHeight,\n this.curRowHeight\n );\n this.cdRef.markForCheck();\n }\n\n addItem(itemComponent: GridsterItemComponentInterface): void {\n if (itemComponent.$item.cols === undefined) {\n itemComponent.$item.cols = this.$options.defaultItemCols;\n itemComponent.item.cols = itemComponent.$item.cols;\n itemComponent.itemChanged();\n }\n if (itemComponent.$item.rows === undefined) {\n itemComponent.$item.rows = this.$options.defaultItemRows;\n itemComponent.item.rows = itemComponent.$item.rows;\n itemComponent.itemChanged();\n }\n if (itemComponent.$item.x === -1 || itemComponent.$item.y === -1) {\n this.autoPositionItem(itemComponent);\n } else if (this.checkCollision(itemComponent.$item)) {\n if (!this.$options.disableWarnings) {\n itemComponent.notPlaced = true;\n console.warn(\n \"Can't be placed in the bounds of the dashboard, trying to auto position!/n\" +\n JSON.stringify(itemComponent.item, ['cols', 'rows', 'x', 'y'])\n );\n }\n if (!this.$options.disableAutoPositionOnConflict) {\n this.autoPositionItem(itemComponent);\n } else {\n itemComponent.notPlaced = true;\n }\n }\n this.grid.push(itemComponent);\n this.calculateLayout$.next();\n }\n\n removeItem(itemComponent: GridsterItemComponentInterface): void {\n this.grid.splice(this.grid.indexOf(itemComponent), 1);\n this.calculateLayout$.next();\n if (this.options.itemRemovedCallback) {\n this.options.itemRemovedCallback(itemComponent.item, itemComponent);\n }\n }\n\n checkCollision(item: GridsterItem): GridsterItemComponentInterface | boolean {\n let collision: GridsterItemComponentInterface | boolean = false;\n if (this.options.itemValidateCallback) {\n collision = !this.options.itemValidateCallback(item);\n }\n if (!collision && this.checkGridCollision(item)) {\n collision = true;\n }\n if (!collision) {\n const c = this.findItemWithItem(item);\n if (c) {\n collision = c;\n }\n }\n return collision;\n }\n\n checkGridCollision(item: GridsterItem): boolean {\n const noNegativePosition = item.y > -1 && item.x > -1;\n const maxGridCols = item.cols + item.x <= this.$options.maxCols;\n const maxGridRows = item.rows + item.y <= this.$options.maxRows;\n const maxItemCols =\n item.maxItemCols === undefined\n ? this.$options.maxItemCols\n : item.maxItemCols;\n const minItemCols =\n item.minItemCols === undefined\n ? this.$options.minItemCols\n : item.minItemCols;\n const maxItemRows =\n item.maxItemRows === undefined\n ? this.$options.maxItemRows\n : item.maxItemRows;\n const minItemRows =\n item.minItemRows === undefined\n ? this.$options.minItemRows\n : item.minItemRows;\n const inColsLimits = item.cols <= maxItemCols && item.cols >= minItemCols;\n const inRowsLimits = item.rows <= maxItemRows && item.rows >= minItemRows;\n const minAreaLimit =\n item.minItemArea === undefined\n ? this.$options.minItemArea\n : item.minItemArea;\n const maxAreaLimit =\n item.maxItemArea === undefined\n ? this.$options.maxItemArea\n : item.maxItemArea;\n const area = item.cols angular-gridster2.report.json angular.json CODE_OF_CONDUCT.md LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json projects README.md src tsconfig.app.json tsconfig.json tsconfig.lint.json tsconfig.spec.json item.rows;\n const inMinArea = minAreaLimit <= area;\n const inMaxArea = maxAreaLimit >= area;\n return !(\n noNegativePosition &&\n maxGridCols &&\n maxGridRows &&\n inColsLimits &&\n inRowsLimits &&\n inMinArea &&\n inMaxArea\n );\n }\n\n findItemWithItem(\n item: GridsterItem\n ): GridsterItemComponentInterface | boolean {\n let widgetsIndex = 0;\n let widget: GridsterItemComponentInterface;\n for (; widgetsIndex < this.grid.length; widgetsIndex++) {\n widget = this.grid[widgetsIndex];\n if (\n widget.$item !== item &&\n this.checkCollisionTwoItems(widget.$item, item)\n ) {\n return widget;\n }\n }\n return false;\n }\n\n findItemsWithItem(item: GridsterItem): Array<GridsterItemComponentInterface> {\n const a: Array<GridsterItemComponentInterface> = [];\n let widgetsIndex = 0;\n let widget: GridsterItemComponentInterface;\n for (; widgetsIndex < this.grid.length; widgetsIndex++) {\n widget = this.grid[widgetsIndex];\n if (\n widget.$item !== item &&\n this.checkCollisionTwoItems(widget.$item, item)\n ) {\n a.push(widget);\n }\n }\n return a;\n }\n\n autoPositionItem(itemComponent: GridsterItemComponentInterface): void {\n if (this.getNextPossiblePosition(itemComponent.$item)) {\n itemComponent.notPlaced = false;\n itemComponent.item.x = itemComponent.$item.x;\n itemComponent.item.y = itemComponent.$item.y;\n itemComponent.itemChanged();\n } else {\n itemComponent.notPlaced = true;\n if (!this.$options.disableWarnings) {\n console.warn(\n \"Can't be placed in the bounds of the dashboard!/n\" +\n JSON.stringify(itemComponent.item, ['cols', 'rows', 'x', 'y'])\n );\n }\n }\n }\n\n getNextPossiblePosition = (\n newItem: GridsterItem,\n startingFrom: { y?: number; x?: number } = {}\n ): boolean => {\n if (newItem.cols === -1) {\n newItem.cols = this.$options.defaultItemCols;\n }\n if (newItem.rows === -1) {\n newItem.rows = this.$options.defaultItemRows;\n }\n this.setGridDimensions();\n let rowsIndex = startingFrom.y || 0;\n let colsIndex;\n for (; rowsIndex < this.rows; rowsIndex++) {\n newItem.y = rowsIndex;\n colsIndex = startingFrom.x || 0;\n for (; colsIndex < this.columns; colsIndex++) {\n newItem.x = colsIndex;\n if (!this.checkCollision(newItem)) {\n return true;\n }\n }\n }\n const canAddToRows = this.$options.maxRows >= this.rows + newItem.rows;\n const canAddToColumns =\n this.$options.maxCols >= this.columns + newItem.cols;\n const addToRows = this.rows <= this.columns && canAddToRows;\n if (!addToRows && canAddToColumns) {\n newItem.x = this.columns;\n newItem.y = 0;\n return true;\n } else if (canAddToRows) {\n newItem.y = this.rows;\n newItem.x = 0;\n return true;\n }\n return false;\n };\n\n getFirstPossiblePosition = (item: GridsterItem): GridsterItem => {\n const tmpItem = Object.assign({}, item);\n this.getNextPossiblePosition(tmpItem);\n return tmpItem;\n };\n\n getLastPossiblePosition = (item: GridsterItem): GridsterItem => {\n let farthestItem: { y: number; x: number } = { y: 0, x: 0 };\n farthestItem = this.grid.reduce(\n (\n prev: { y: number; x: number },\n curr: GridsterItemComponentInterface\n ) => {\n const currCoords = {\n y: curr.$item.y + curr.$item.rows - 1,\n x: curr.$item.x + curr.$item.cols - 1\n };\n if (GridsterUtils.compareItems(prev, currCoords) === 1) {\n return currCoords;\n } else {\n return prev;\n }\n },\n farthestItem\n );\n\n const tmpItem = Object.assign({}, item);\n this.getNextPossiblePosition(tmpItem, farthestItem);\n return tmpItem;\n };\n\n pixelsToPositionX(\n x: number,\n roundingMethod: (x: number) => number,\n noLimit?: boolean\n ): number {\n const position = roundingMethod(x / this.curColWidth);\n if (noLimit) {\n return position;\n } else {\n return Math.max(position, 0);\n }\n }\n\n pixelsToPositionY(\n y: number,\n roundingMethod: (x: number) => number,\n noLimit?: boolean\n ): number {\n const position = roundingMethod(y / this.curRowHeight);\n if (noLimit) {\n return position;\n } else {\n return Math.max(position, 0);\n }\n }\n\n positionXToPixels(x: number): number {\n return x angular-gridster2.report.json angular.json CODE_OF_CONDUCT.md LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json projects README.md src tsconfig.app.json tsconfig.json tsconfig.lint.json tsconfig.spec.json this.curColWidth;\n }\n\n positionYToPixels(y: number): number {\n return y angular-gridster2.report.json angular.json CODE_OF_CONDUCT.md LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json projects README.md src tsconfig.app.json tsconfig.json tsconfig.lint.json tsconfig.spec.json this.curRowHeight;\n }\n\n getItemComponent(\n item: GridsterItem\n ): GridsterItemComponentInterface | undefined {\n return this.grid.find(c => c.item === item);\n }\n\n // ------ Functions for swapWhileDragging option\n\n // identical to checkCollision() except that this function calls findItemWithItemForSwaping() instead of findItemWithItem()\n checkCollisionForSwaping(\n item: GridsterItem\n ): GridsterItemComponentInterface | boolean {\n let collision: GridsterItemComponentInterface | boolean = false;\n if (this.options.itemValidateCallback) {\n collision = !this.options.itemValidateCallback(item);\n }\n if (!collision && this.checkGridCollision(item)) {\n collision = true;\n }\n if (!collision) {\n const c = this.findItemWithItemForSwapping(item);\n if (c) {\n collision = c;\n }\n }\n return collision;\n }\n\n // identical to findItemWithItem() except that this function calls checkCollisionTwoItemsForSwaping() instead of checkCollisionTwoItems()\n findItemWithItemForSwapping(\n item: GridsterItem\n ): GridsterItemComponentInterface | boolean {\n let widgetsIndex: number = this.grid.length - 1;\n let widget: GridsterItemComponentInterface;\n for (; widgetsIndex > -1; widgetsIndex--) {\n widget = this.grid[widgetsIndex];\n if (\n widget.$item !== item &&\n GridsterComponent.checkCollisionTwoItemsForSwaping(widget.$item, item)\n ) {\n return widget;\n }\n }\n return false;\n }\n\n previewStyle(drag = false): void {\n if (this.movingItem) {\n if (this.compact && drag) {\n this.compact.checkCompactItem(this.movingItem);\n }\n this.previewStyle$.next(this.movingItem);\n } else {\n this.previewStyle$.next(null);\n }\n }\n\n // ------ End of functions for swapWhileDragging option\n\n // eslint-disable-next-line @typescript-eslint/member-ordering\n private static getNewArrayLength(\n length: number,\n overallSize: number,\n size: number\n ): number {\n const newLength = Math.max(length, Math.floor(overallSize / size));\n\n if (newLength < 0) {\n return 0;\n }\n\n if (Number.isFinite(newLength)) {\n return Math.floor(newLength);\n }\n\n return 0;\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/projects/angular-gridster2/src/lib/gridsterItem.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 25,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 31,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        191,
                        615
                      ],
                      "text": ", ChangeDetectionStrategy\n} from '@angular/core';\nimport { GridsterComponent } from './gridster.component';\n\nimport { GridsterDraggable } from './gridsterDraggable.service';\nimport type { GridsterItem } from './gridsterItem.interface';\nimport { GridsterItemComponentInterface } from './gridsterItem.interface';\nimport { GridsterResizable } from './gridsterResizable.service';\nimport { GridsterUtils } from './gridsterUtils.service';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 29,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 29,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        170,
                        754
                      ],
                      "text": "\n} from '@angular/core';\nimport { GridsterComponent } from './gridster.component';\n\nimport { GridsterDraggable } from './gridsterDraggable.service';\nimport type { GridsterItem } from './gridsterItem.interface';\nimport { GridsterItemComponentInterface } from './gridsterItem.interface';\nimport { GridsterResizable } from './gridsterResizable.service';\nimport { GridsterUtils } from './gridsterUtils.service';\n\n@Component({\n selector: 'gridster-item',\n templateUrl: './gridsterItem.html',\n styleUrl: './gridsterItem.css',\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 36,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 36,
                "endColumn": 21,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        931,
                        931
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 40,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 40,
                "endColumn": 23,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        1056,
                        1056
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 44,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 44,
                "endColumn": 23,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        1183,
                        1183
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/sort-lifecycle-methods",
                "severity": 2,
                "message": "Lifecycle Methods are not declared in order of execution",
                "line": 87,
                "column": 3,
                "nodeType": "Identifier",
                "messageId": "lifecycleMethodsNotSorted",
                "endLine": 87,
                "endColumn": 14
              }
            ],
            "suppressedMessages": [],
            "errorCount": 6,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n ElementRef,\n EventEmitter,\n HostBinding,\n Inject,\n Input,\n NgZone,\n OnChanges,\n OnDestroy,\n OnInit,\n Output,\n Renderer2,\n SimpleChanges,\n ViewEncapsulation\n} from '@angular/core';\nimport { GridsterComponent } from './gridster.component';\n\nimport { GridsterDraggable } from './gridsterDraggable.service';\nimport type { GridsterItem } from './gridsterItem.interface';\nimport { GridsterItemComponentInterface } from './gridsterItem.interface';\nimport { GridsterResizable } from './gridsterResizable.service';\nimport { GridsterUtils } from './gridsterUtils.service';\n\n@Component({\n selector: 'gridster-item',\n templateUrl: './gridsterItem.html',\n styleUrl: './gridsterItem.css',\n encapsulation: ViewEncapsulation.None,\n standalone: true\n})\nexport class GridsterItemComponent\n implements OnInit, OnDestroy, OnChanges, GridsterItemComponentInterface\n{\n @Input() item: GridsterItem;\n @Output() itemInit = new EventEmitter<{\n item: GridsterItem;\n itemComponent: GridsterItemComponentInterface;\n }>();\n @Output() itemChange = new EventEmitter<{\n item: GridsterItem;\n itemComponent: GridsterItemComponentInterface;\n }>();\n @Output() itemResize = new EventEmitter<{\n item: GridsterItem;\n itemComponent: GridsterItemComponentInterface;\n }>();\n $item: GridsterItem;\n el: HTMLElement;\n gridster: GridsterComponent;\n top: number;\n left: number;\n width: number;\n height: number;\n drag: GridsterDraggable;\n resize: GridsterResizable;\n notPlaced: boolean;\n init: boolean;\n\n @HostBinding('style.z-index')\n get zIndex(): number {\n return this.getLayerIndex() + this.gridster.$options.baseLayerIndex;\n }\n\n constructor(\n @Inject(ElementRef) el: ElementRef,\n gridster: GridsterComponent,\n @Inject(Renderer2) public renderer: Renderer2,\n @Inject(NgZone) private zone: NgZone\n ) {\n this.el = el.nativeElement;\n this.$item = {\n cols: -1,\n rows: -1,\n x: -1,\n y: -1\n };\n this.gridster = gridster;\n this.drag = new GridsterDraggable(this, gridster, this.zone);\n this.resize = new GridsterResizable(this, gridster, this.zone);\n }\n\n ngOnInit(): void {\n this.gridster.addItem(this);\n }\n\n ngOnChanges(changes: SimpleChanges): void {\n if (changes.item) {\n this.updateOptions();\n\n if (!this.init) {\n this.gridster.calculateLayout$.next();\n }\n }\n if (changes.item && changes.item.previousValue) {\n this.setSize();\n }\n }\n\n updateOptions(): void {\n this.$item = GridsterUtils.merge(this.$item, this.item, {\n cols: undefined,\n rows: undefined,\n x: undefined,\n y: undefined,\n layerIndex: undefined,\n dragEnabled: undefined,\n resizeEnabled: undefined,\n compactEnabled: undefined,\n maxItemRows: undefined,\n minItemRows: undefined,\n maxItemCols: undefined,\n minItemCols: undefined,\n maxItemArea: undefined,\n minItemArea: undefined,\n resizableHandles: {\n s: undefined,\n e: undefined,\n n: undefined,\n w: undefined,\n se: undefined,\n ne: undefined,\n sw: undefined,\n nw: undefined\n }\n });\n }\n\n ngOnDestroy(): void {\n this.gridster.removeItem(this);\n this.drag.destroy();\n this.resize.destroy();\n this.gridster = this.drag = this.resize = null!;\n }\n\n setSize(): void {\n this.renderer.setStyle(this.el, 'display', this.notPlaced ? '' : 'block');\n this.gridster.gridRenderer.updateItem(this.el, this.$item, this.renderer);\n this.updateItemSize();\n }\n\n updateItemSize(): void {\n const top = this.$item.y angular-gridster2.report.json angular.json CODE_OF_CONDUCT.md LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json projects README.md src tsconfig.app.json tsconfig.json tsconfig.lint.json tsconfig.spec.json this.gridster.curRowHeight;\n const left = this.$item.x angular-gridster2.report.json angular.json CODE_OF_CONDUCT.md LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json projects README.md src tsconfig.app.json tsconfig.json tsconfig.lint.json tsconfig.spec.json this.gridster.curColWidth;\n const width =\n this.$item.cols angular-gridster2.report.json angular.json CODE_OF_CONDUCT.md LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json projects README.md src tsconfig.app.json tsconfig.json tsconfig.lint.json tsconfig.spec.json this.gridster.curColWidth -\n this.gridster.$options.margin;\n const height =\n this.$item.rows angular-gridster2.report.json angular.json CODE_OF_CONDUCT.md LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json package-lock.json projects README.md src tsconfig.app.json tsconfig.json tsconfig.lint.json tsconfig.spec.json this.gridster.curRowHeight -\n this.gridster.$options.margin;\n\n this.top = top;\n this.left = left;\n\n if (!this.init && width > 0 && height > 0) {\n this.init = true;\n if (this.item.initCallback) {\n this.item.initCallback(this.item, this);\n }\n if (this.gridster.options.itemInitCallback) {\n this.gridster.options.itemInitCallback(this.item, this);\n }\n this.itemInit.next({ item: this.item, itemComponent: this });\n if (this.gridster.$options.scrollToNewItems) {\n this.el.scrollIntoView(false);\n }\n }\n if (width !== this.width || height !== this.height) {\n this.width = width;\n this.height = height;\n if (this.gridster.options.itemResizeCallback) {\n this.gridster.options.itemResizeCallback(this.item, this);\n }\n this.itemResize.next({ item: this.item, itemComponent: this });\n }\n }\n\n itemChanged(): void {\n if (this.gridster.options.itemChangeCallback) {\n this.gridster.options.itemChangeCallback(this.item, this);\n }\n this.itemChange.next({ item: this.item, itemComponent: this });\n }\n\n checkItemChanges(newValue: GridsterItem, oldValue: GridsterItem): void {\n if (\n newValue.rows === oldValue.rows &&\n newValue.cols === oldValue.cols &&\n newValue.x === oldValue.x &&\n newValue.y === oldValue.y\n ) {\n return;\n }\n if (this.gridster.checkCollision(this.$item)) {\n this.$item.x = oldValue.x || 0;\n this.$item.y = oldValue.y || 0;\n this.$item.cols = oldValue.cols || 1;\n this.$item.rows = oldValue.rows || 1;\n this.setSize();\n } else {\n this.item.cols = this.$item.cols;\n this.item.rows = this.$item.rows;\n this.item.x = this.$item.x;\n this.item.y = this.$item.y;\n this.gridster.calculateLayout$.next();\n this.itemChanged();\n }\n }\n\n canBeDragged(): boolean {\n const gridDragEnabled = this.gridster.$options.draggable.enabled;\n const itemDragEnabled =\n this.$item.dragEnabled === undefined\n ? gridDragEnabled\n : this.$item.dragEnabled;\n return !this.gridster.mobile && gridDragEnabled && itemDragEnabled;\n }\n\n canBeResized(): boolean {\n const gridResizable = this.gridster.$options.resizable.enabled;\n const itemResizable =\n this.$item.resizeEnabled === undefined\n ? gridResizable\n : this.$item.resizeEnabled;\n return !this.gridster.mobile && gridResizable && itemResizable;\n }\n\n getResizableHandles() {\n const gridResizableHandles = this.gridster.$options.resizable.handles;\n const itemResizableHandles = this.$item.resizableHandles;\n // use grid settings if no settings are provided for the item.\n if (itemResizableHandles === undefined) {\n return gridResizableHandles;\n }\n // else merge the settings\n return {\n ...gridResizableHandles,\n ...itemResizableHandles\n };\n }\n\n bringToFront(offset: number): void {\n if (offset && offset <= 0) {\n return;\n }\n const layerIndex = this.getLayerIndex();\n const topIndex = this.gridster.$options.maxLayerIndex;\n if (layerIndex < topIndex) {\n const targetIndex = offset ? layerIndex + offset : topIndex;\n this.item.layerIndex = this.$item.layerIndex =\n targetIndex > topIndex ? topIndex : targetIndex;\n }\n }\n\n sendToBack(offset: number): void {\n if (offset && offset <= 0) {\n return;\n }\n const layerIndex = this.getLayerIndex();\n if (layerIndex > 0) {\n const targetIndex = offset ? layerIndex - offset : 0;\n this.item.layerIndex = this.$item.layerIndex =\n targetIndex < 0 ? 0 : targetIndex;\n }\n }\n\n private getLayerIndex(): number {\n if (this.item.layerIndex !== undefined) {\n return this.item.layerIndex;\n }\n if (this.gridster.$options.defaultLayerIndex !== undefined) {\n return this.gridster.$options.defaultLayerIndex;\n }\n return 0;\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-gridster2/projects/angular-gridster2/src/lib/gridsterPreview.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 15,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 21,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        116,
                        314
                      ],
                      "text": ", ChangeDetectionStrategy\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { GridsterItem } from './gridsterItem.interface';\nimport { GridsterRenderer } from './gridsterRenderer.service';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 19,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 19,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        95,
                        437
                      ],
                      "text": "\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { GridsterItem } from './gridsterItem.interface';\nimport { GridsterRenderer } from './gridsterRenderer.service';\n\n@Component({\n selector: 'gridster-preview',\n template: '',\n styleUrl: './gridsterPreview.css',\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n ElementRef,\n EventEmitter,\n Input,\n OnDestroy,\n OnInit,\n Renderer2,\n ViewEncapsulation\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { GridsterItem } from './gridsterItem.interface';\nimport { GridsterRenderer } from './gridsterRenderer.service';\n\n@Component({\n selector: 'gridster-preview',\n template: '',\n styleUrl: './gridsterPreview.css',\n encapsulation: ViewEncapsulation.None,\n standalone: true\n})\nexport class GridsterPreviewComponent implements OnInit, OnDestroy {\n @Input() previewStyle$: EventEmitter<GridsterItem | null>;\n @Input() gridRenderer: GridsterRenderer;\n private el: HTMLElement;\n private sub: Subscription;\n\n constructor(el: ElementRef, private renderer: Renderer2) {\n this.el = el.nativeElement;\n }\n\n ngOnInit(): void {\n this.sub = this.previewStyle$.subscribe(options =>\n this.previewStyle(options)\n );\n }\n\n ngOnDestroy(): void {\n if(this.sub) {\n this.sub.unsubscribe();\n }\n }\n\n private previewStyle(item: GridsterItem | null): void {\n if (item) {\n this.renderer.setStyle(this.el, 'display', 'block');\n this.gridRenderer.updateItem(this.el, item, this.renderer);\n } else {\n this.renderer.setStyle(this.el, 'display', '');\n }\n }\n}\n",
            "usedDeprecatedRules": []
          }
        ]
      }
    }
  },
  "ngx-quill": {
    "repo": {
      "HEAD": {
        "commit": "9623a9d10a290ac95ad881c726370060826bee7b",
        "author": "migudel",
        "date": "Sat Mar 29 20:35:43 2025 +0100",
        "message": "INICIO DE PRUEBAS"
      },
      "url": "https://github.com/KillerCodeMonkey/ngx-quill"
    },
    "before": {
      "ngx-quill": {
        "recommended": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/ngx-quill/projects/ngx-quill/src/lib/quill-editor.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/no-output-on-prefix",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named \"on\", nor prefixed with it (https://angular.dev/style-guide#style-05-16)",
                "line": 125,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "noOutputOnPrefix",
                "endLine": 125,
                "endColumn": 28
              },
              {
                "ruleId": "@angular-eslint/no-output-on-prefix",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named \"on\", nor prefixed with it (https://angular.dev/style-guide#style-05-16)",
                "line": 126,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "noOutputOnPrefix",
                "endLine": 126,
                "endColumn": 28
              },
              {
                "ruleId": "@angular-eslint/no-output-on-prefix",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named \"on\", nor prefixed with it (https://angular.dev/style-guide#style-05-16)",
                "line": 127,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "noOutputOnPrefix",
                "endLine": 127,
                "endColumn": 29
              },
              {
                "ruleId": "@angular-eslint/no-output-on-prefix",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named \"on\", nor prefixed with it (https://angular.dev/style-guide#style-05-16)",
                "line": 128,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "noOutputOnPrefix",
                "endLine": 128,
                "endColumn": 31
              },
              {
                "ruleId": "@angular-eslint/no-output-on-prefix",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named \"on\", nor prefixed with it (https://angular.dev/style-guide#style-05-16)",
                "line": 129,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "noOutputOnPrefix",
                "endLine": 129,
                "endColumn": 20
              },
              {
                "ruleId": "@angular-eslint/no-output-on-prefix",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named \"on\", nor prefixed with it (https://angular.dev/style-guide#style-05-16)",
                "line": 130,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "noOutputOnPrefix",
                "endLine": 130,
                "endColumn": 19
              },
              {
                "ruleId": "@angular-eslint/no-output-on-prefix",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named \"on\", nor prefixed with it (https://angular.dev/style-guide#style-05-16)",
                "line": 131,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "noOutputOnPrefix",
                "endLine": 131,
                "endColumn": 26
              },
              {
                "ruleId": "@angular-eslint/no-output-on-prefix",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named \"on\", nor prefixed with it (https://angular.dev/style-guide#style-05-16)",
                "line": 132,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "noOutputOnPrefix",
                "endLine": 132,
                "endColumn": 25
              },
              {
                "ruleId": "@angular-eslint/component-selector",
                "severity": 2,
                "message": "The selector should start with one of these prefixes: \"lib\" (https://angular.dev/style-guide#style-02-07)",
                "line": 744,
                "column": 13,
                "nodeType": "Literal",
                "messageId": "prefixFailure",
                "endLine": 744,
                "endColumn": 27
              }
            ],
            "suppressedMessages": [],
            "errorCount": 9,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { DOCUMENT, isPlatformServer } from '@angular/common'\nimport { DomSanitizer } from '@angular/platform-browser'\n\nimport type QuillType from 'quill'\nimport type { QuillOptions } from 'quill'\nimport type DeltaType from 'quill-delta'\n\nimport {\n AfterViewInit,\n ChangeDetectorRef,\n Component,\n DestroyRef,\n Directive,\n ElementRef,\n EventEmitter,\n forwardRef,\n inject,\n input,\n NgZone,\n OnChanges,\n OnDestroy,\n OnInit,\n Output,\n PLATFORM_ID,\n Renderer2,\n SecurityContext,\n signal,\n SimpleChanges,\n ViewEncapsulation\n} from '@angular/core'\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop'\nimport { fromEvent, Subscription } from 'rxjs'\nimport { debounceTime, mergeMap } from 'rxjs/operators'\n\nimport { ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR, Validator } from '@angular/forms'\n\nimport { CustomModule, CustomOption, defaultModules, QuillBeforeRender, QuillModules } from 'ngx-quill/config'\n\nimport type History from 'quill/modules/history'\nimport type Toolbar from 'quill/modules/toolbar'\nimport { getFormat, raf$ } from './helpers'\nimport { QuillService } from './quill.service'\n\nexport interface Range {\n index: number\n length: number\n}\n\nexport interface ContentChange {\n content: DeltaType\n delta: DeltaType\n editor: QuillType\n html: string | null\n oldDelta: DeltaType\n source: string\n text: string\n}\n\nexport interface SelectionChange {\n editor: QuillType\n oldRange: Range | null\n range: Range | null\n source: string\n}\n\nexport interface Blur {\n editor: QuillType\n source: string\n}\n\nexport interface Focus {\n editor: QuillType\n source: string\n}\n\nexport type EditorChangeContent = ContentChange & { event: 'text-change' }\nexport type EditorChangeSelection = SelectionChange & { event: 'selection-change' }\n\n@Directive()\nexport abstract class QuillEditorBase implements AfterViewInit, ControlValueAccessor, OnChanges, OnInit, OnDestroy, Validator {\n readonly format = input<'object' | 'html' | 'text' | 'json' | undefined>(\n undefined\n )\n readonly theme = input<string | undefined>(undefined)\n readonly modules = input<QuillModules | undefined>(undefined)\n readonly debug = input<'warn' | 'log' | 'error' | false>(false)\n readonly readOnly = input<boolean | undefined>(false)\n readonly placeholder = input<string | undefined>(undefined)\n readonly maxLength = input<number | undefined>(undefined)\n readonly minLength = input<number | undefined>(undefined)\n readonly required = input(false)\n readonly formats = input<string[] | null | undefined>(undefined)\n readonly customToolbarPosition = input<'top' | 'bottom'>('top')\n readonly sanitize = input<boolean | undefined>(undefined)\n readonly beforeRender = input<QuillBeforeRender>(undefined)\n readonly styles = input<any>(null)\n readonly registry = input<QuillOptions['registry']>(\n undefined\n )\n readonly bounds = input<HTMLElement | string | undefined>(undefined)\n readonly customOptions = input<CustomOption[]>([])\n readonly customModules = input<CustomModule[]>([])\n readonly trackChanges = input<'user' | 'all' | undefined>(undefined)\n readonly classes = input<string | undefined>(undefined)\n readonly trimOnValidation = input(false)\n readonly linkPlaceholder = input<string | undefined>(undefined)\n readonly compareValues = input(false)\n readonly filterNull = input(false)\n readonly debounceTime = input<number | undefined>(undefined)\n /bin /run /sbin https://github.com/KillerCodeMonkey/ngx-quill/issues/1257 - fix null value set\n\n provide default empty value\n by default null\n\n e.g. defaultEmptyValue=\"\" - empty string\n\n <quill-editor\n defaultEmptyValue=\"\"\n formControlName=\"message\"\n ></quill-editor>\n */\n readonly defaultEmptyValue = input<any>(null)\n\n @Output() onEditorCreated = new EventEmitter<QuillType>()\n @Output() onEditorChanged = new EventEmitter<EditorChangeContent | EditorChangeSelection>()\n @Output() onContentChanged = new EventEmitter<ContentChange>()\n @Output() onSelectionChanged = new EventEmitter<SelectionChange>()\n @Output() onFocus = new EventEmitter<Focus>()\n @Output() onBlur = new EventEmitter<Blur>()\n @Output() onNativeFocus = new EventEmitter<Focus>()\n @Output() onNativeBlur = new EventEmitter<Blur>()\n\n quillEditor!: QuillType\n editorElem!: HTMLElement\n content: any\n disabled = false // used to store initial value before ViewInit\n\n readonly toolbarPosition = signal('top')\n\n onModelChange: (modelValue?: any) => void\n onModelTouched: () => void\n onValidatorChanged: () => void\n\n private subscription: Subscription | null = null\n private quillSubscription: Subscription | null = null\n\n private elementRef = inject(ElementRef)\n private document = inject(DOCUMENT)\n\n private cd = inject(ChangeDetectorRef)\n private domSanitizer = inject(DomSanitizer)\n private platformId = inject<string>(PLATFORM_ID)\n private renderer = inject(Renderer2)\n private zone = inject(NgZone)\n private service = inject(QuillService)\n private destroyRef = inject(DestroyRef)\n\n static normalizeClassNames(classes: string): string[] {\n const classList = classes.trim().split(' ')\n return classList.reduce((prev: string[], cur: string) => {\n const trimmed = cur.trim()\n if (trimmed) {\n prev.push(trimmed)\n }\n\n return prev\n }, [])\n }\n\n valueGetter = input((quillEditor: QuillType): string | any => {\n let html: string | null = quillEditor.getSemanticHTML()\n if (this.isEmptyValue(html)) {\n html = this.defaultEmptyValue()\n }\n let modelValue: string | DeltaType | null = html\n const format = getFormat(this.format(), this.service.config.format)\n\n if (format === 'text') {\n modelValue = quillEditor.getText()\n } else if (format === 'object') {\n modelValue = quillEditor.getContents()\n } else if (format === 'json') {\n try {\n modelValue = JSON.stringify(quillEditor.getContents())\n } catch {\n modelValue = quillEditor.getText()\n }\n }\n\n return modelValue\n })\n\n valueSetter = input((quillEditor: QuillType, value: any): any => {\n const format = getFormat(this.format(), this.service.config.format)\n if (format === 'html') {\n const sanitize = [true, false].includes(this.sanitize()) ? this.sanitize() : (this.service.config.sanitize || false)\n if (sanitize) {\n value = this.domSanitizer.sanitize(SecurityContext.HTML, value)\n }\n return quillEditor.clipboard.convert({ html: value })\n } else if (format === 'json') {\n try {\n return JSON.parse(value)\n } catch {\n return [{ insert: value }]\n }\n }\n\n return value\n })\n\n ngOnInit() {\n this.toolbarPosition.set(this.customToolbarPosition())\n }\n\n ngAfterViewInit() {\n if (isPlatformServer(this.platformId)) {\n return\n }\n\n // The `quill-editor` component might be destroyed before the `quill` chunk is loaded and its code is executed\n // this will lead to runtime exceptions, since the code will be executed on DOM nodes that don't exist within the tree.\n\n this.quillSubscription = this.service.getQuill().pipe(\n mergeMap((Quill) => this.service.beforeRender(Quill, this.customModules(), this.beforeRender()))\n ).subscribe(Quill => {\n this.editorElem = this.elementRef.nativeElement.querySelector(\n '[quill-editor-element]'\n )\n\n const toolbarElem = this.elementRef.nativeElement.querySelector(\n '[quill-editor-toolbar]'\n )\n const modules = Object.assign({}, this.modules() || this.service.config.modules)\n\n if (toolbarElem) {\n modules.toolbar = toolbarElem\n } else if (modules.toolbar === undefined) {\n modules.toolbar = defaultModules.toolbar\n }\n\n let placeholder = this.placeholder() !== undefined ? this.placeholder() : this.service.config.placeholder\n if (placeholder === undefined) {\n placeholder = 'Insert text here ...'\n }\n\n const styles = this.styles()\n if (styles) {\n Object.keys(styles).forEach((key: string) => {\n this.renderer.setStyle(this.editorElem, key, styles[key])\n })\n }\n\n if (this.classes()) {\n this.addClasses(this.classes())\n }\n\n this.customOptions().forEach((customOption) => {\n const newCustomOption = Quill.import(customOption.import)\n newCustomOption.whitelist = customOption.whitelist\n Quill.register(newCustomOption, true)\n })\n\n let bounds = this.bounds() && this.bounds() === 'self' ? this.editorElem : this.bounds()\n if (!bounds) {\n bounds = this.service.config.bounds ? this.service.config.bounds : this.document.body\n }\n\n let debug = this.debug()\n if (!debug && debug !== false && this.service.config.debug) {\n debug = this.service.config.debug\n }\n\n let readOnly = this.readOnly()\n if (!readOnly && this.readOnly() !== false) {\n readOnly = this.service.config.readOnly !== undefined ? this.service.config.readOnly : false\n }\n\n let formats = this.formats()\n if (!formats && formats === undefined) {\n formats = this.service.config.formats ? [...this.service.config.formats] : (this.service.config.formats === null ? null : undefined)\n }\n\n this.zone.runOutsideAngular(() => {\n this.quillEditor = new Quill(this.editorElem, {\n bounds,\n debug,\n formats,\n modules,\n placeholder,\n readOnly,\n registry: this.registry(),\n theme: this.theme() || (this.service.config.theme ? this.service.config.theme : 'snow')\n })\n\n if (this.onNativeBlur.observed) {\n // https://github.com/quilljs/quill/issues/2186#issuecomment-533401328\n fromEvent(this.quillEditor.scroll.domNode, 'blur').pipe(takeUntilDestroyed(this.destroyRef)).subscribe(() => this.onNativeBlur.next({\n editor: this.quillEditor,\n source: 'dom'\n }))\n // https://github.com/quilljs/quill/issues/2186#issuecomment-803257538\n const toolbar = this.quillEditor.getModule('toolbar') as Toolbar\n if (toolbar.container) {\n fromEvent(toolbar.container, 'mousedown').pipe(takeUntilDestroyed(this.destroyRef)).subscribe(e => e.preventDefault())\n }\n }\n\n if (this.onNativeFocus.observed) {\n fromEvent(this.quillEditor.scroll.domNode, 'focus').pipe(takeUntilDestroyed(this.destroyRef)).subscribe(() => this.onNativeFocus.next({\n editor: this.quillEditor,\n source: 'dom'\n }))\n }\n\n // Set optional link placeholder, Quill has no native API for it so using workaround\n if (this.linkPlaceholder()) {\n const tooltip = (this.quillEditor as any)?.theme?.tooltip\n const input = tooltip?.root?.querySelector('input[data-link]')\n if (input?.dataset) {\n input.dataset.link = this.linkPlaceholder()\n }\n }\n })\n\n if (this.content) {\n const format = getFormat(this.format(), this.service.config.format)\n\n if (format === 'text') {\n this.quillEditor.setText(this.content, 'silent')\n } else {\n const valueSetter = this.valueSetter()\n const newValue = valueSetter(this.quillEditor, this.content)\n this.quillEditor.setContents(newValue, 'silent')\n }\n\n const history = this.quillEditor.getModule('history') as History\n history.clear()\n }\n\n // initialize disabled status based on this.disabled as default value\n this.setDisabledState()\n\n this.addQuillEventListeners()\n\n // The `requestAnimationFrame` triggers change detection. There's no sense to invoke the `requestAnimationFrame` if anyone is\n // listening to the `onEditorCreated` event inside the template, for instance `<quill-view (onEditorCreated)=\"...\">`.\n if (!this.onEditorCreated.observed && !this.onValidatorChanged) {\n return\n }\n\n // The `requestAnimationFrame` will trigger change detection and `onEditorCreated` will also call `markDirty()`\n // internally, since Angular wraps template event listeners into `listener` instruction. We're using the `requestAnimationFrame`\n // to prevent the frame drop and avoid `ExpressionChangedAfterItHasBeenCheckedError` error.\n raf$().pipe(takeUntilDestroyed(this.destroyRef)).subscribe(() => {\n if (this.onValidatorChanged) {\n this.onValidatorChanged()\n }\n this.onEditorCreated.emit(this.quillEditor)\n })\n })\n }\n\n selectionChangeHandler = (range: Range | null, oldRange: Range | null, source: string) => {\n const trackChanges = this.trackChanges() || this.service.config.trackChanges\n const shouldTriggerOnModelTouched = !range && !!this.onModelTouched && (source === 'user' || trackChanges && trackChanges === 'all')\n\n // only emit changes when there's any listener\n if (!this.onBlur.observed &&\n !this.onFocus.observed &&\n !this.onSelectionChanged.observed &&\n !shouldTriggerOnModelTouched) {\n return\n }\n\n this.zone.run(() => {\n if (range === null) {\n this.onBlur.emit({\n editor: this.quillEditor,\n source\n })\n } else if (oldRange === null) {\n this.onFocus.emit({\n editor: this.quillEditor,\n source\n })\n }\n\n this.onSelectionChanged.emit({\n editor: this.quillEditor,\n oldRange,\n range,\n source\n })\n\n if (shouldTriggerOnModelTouched) {\n this.onModelTouched()\n }\n\n this.cd.markForCheck()\n })\n }\n\n textChangeHandler = (delta: DeltaType, oldDelta: DeltaType, source: string): void => {\n // only emit changes emitted by user interactions\n const text = this.quillEditor.getText()\n const content = this.quillEditor.getContents()\n\n let html: string | null = this.quillEditor.getSemanticHTML()\n if (this.isEmptyValue(html)) {\n html = this.defaultEmptyValue()\n }\n\n const trackChanges = this.trackChanges() || this.service.config.trackChanges\n const shouldTriggerOnModelChange = (source === 'user' || trackChanges && trackChanges === 'all') && !!this.onModelChange\n\n // only emit changes when there's any listener\n if (!this.onContentChanged.observed && !shouldTriggerOnModelChange) {\n return\n }\n\n this.zone.run(() => {\n if (shouldTriggerOnModelChange) {\n const valueGetter = this.valueGetter()\n this.onModelChange(\n valueGetter(this.quillEditor)\n )\n }\n\n this.onContentChanged.emit({\n content,\n delta,\n editor: this.quillEditor,\n html,\n oldDelta,\n source,\n text\n })\n\n this.cd.markForCheck()\n })\n }\n\n editorChangeHandler = (\n event: 'text-change' | 'selection-change',\n current: any | Range | null, old: any | Range | null, source: string\n ): void => {\n // only emit changes when there's any listener\n if (!this.onEditorChanged.observed) {\n return\n }\n\n // only emit changes emitted by user interactions\n if (event === 'text-change') {\n const text = this.quillEditor.getText()\n const content = this.quillEditor.getContents()\n\n let html: string | null = this.quillEditor.getSemanticHTML()\n if (this.isEmptyValue(html)) {\n html = this.defaultEmptyValue()\n }\n\n this.zone.run(() => {\n this.onEditorChanged.emit({\n content,\n delta: current,\n editor: this.quillEditor,\n event,\n html,\n oldDelta: old,\n source,\n text\n })\n\n this.cd.markForCheck()\n })\n } else {\n this.zone.run(() => {\n this.onEditorChanged.emit({\n editor: this.quillEditor,\n event,\n oldRange: old,\n range: current,\n source\n })\n\n this.cd.markForCheck()\n })\n }\n }\n\n ngOnDestroy() {\n this.dispose()\n\n this.quillSubscription?.unsubscribe()\n this.quillSubscription = null\n }\n\n ngOnChanges(changes: SimpleChanges): void {\n if (!this.quillEditor) {\n return\n }\n if (changes.readOnly) {\n this.quillEditor.enable(!changes.readOnly.currentValue)\n }\n if (changes.placeholder) {\n this.quillEditor.root.dataset.placeholder =\n changes.placeholder.currentValue\n }\n if (changes.styles) {\n const currentStyling = changes.styles.currentValue\n const previousStyling = changes.styles.previousValue\n\n if (previousStyling) {\n Object.keys(previousStyling).forEach((key: string) => {\n this.renderer.removeStyle(this.editorElem, key)\n })\n }\n if (currentStyling) {\n Object.keys(currentStyling).forEach((key: string) => {\n this.renderer.setStyle(this.editorElem, key, this.styles()[key])\n })\n }\n }\n if (changes.classes) {\n const currentClasses = changes.classes.currentValue\n const previousClasses = changes.classes.previousValue\n\n if (previousClasses) {\n this.removeClasses(previousClasses)\n }\n\n if (currentClasses) {\n this.addClasses(currentClasses)\n }\n }\n // We'd want to re-apply event listeners if the `debounceTime` binding changes to apply the\n // `debounceTime` operator or vice-versa remove it.\n if (changes.debounceTime) {\n this.addQuillEventListeners()\n }\n }\n\n addClasses(classList: string): void {\n QuillEditorBase.normalizeClassNames(classList).forEach((c: string) => {\n this.renderer.addClass(this.editorElem, c)\n })\n }\n\n removeClasses(classList: string): void {\n QuillEditorBase.normalizeClassNames(classList).forEach((c: string) => {\n this.renderer.removeClass(this.editorElem, c)\n })\n }\n\n writeValue(currentValue: any) {\n\n // optional fix for https://github.com/angular/angular/issues/14988\n if (this.filterNull() && currentValue === null) {\n return\n }\n\n this.content = currentValue\n\n if (!this.quillEditor) {\n return\n }\n\n const format = getFormat(this.format(), this.service.config.format)\n const valueSetter = this.valueSetter()\n const newValue = valueSetter(this.quillEditor, currentValue)\n\n if (this.compareValues()) {\n const currentEditorValue = this.quillEditor.getContents()\n if (JSON.stringify(currentEditorValue) === JSON.stringify(newValue)) {\n return\n }\n }\n\n if (currentValue) {\n if (format === 'text') {\n this.quillEditor.setText(currentValue)\n } else {\n this.quillEditor.setContents(newValue)\n }\n return\n }\n this.quillEditor.setText('')\n\n }\n\n setDisabledState(isDisabled: boolean = this.disabled): void {\n // store initial value to set appropriate disabled status after ViewInit\n this.disabled = isDisabled\n if (this.quillEditor) {\n if (isDisabled) {\n this.quillEditor.disable()\n this.renderer.setAttribute(this.elementRef.nativeElement, 'disabled', 'disabled')\n } else {\n if (!this.readOnly()) {\n this.quillEditor.enable()\n }\n this.renderer.removeAttribute(this.elementRef.nativeElement, 'disabled')\n }\n }\n }\n\n registerOnChange(fn: (modelValue: any) => void): void {\n this.onModelChange = fn\n }\n\n registerOnTouched(fn: () => void): void {\n this.onModelTouched = fn\n }\n\n registerOnValidatorChange(fn: () => void) {\n this.onValidatorChanged = fn\n }\n\n validate() {\n if (!this.quillEditor) {\n return null\n }\n\n const err: {\n minLengthError?: {\n given: number\n minLength: number\n }\n maxLengthError?: {\n given: number\n maxLength: number\n }\n requiredError?: { empty: boolean }\n } = {}\n let valid = true\n\n const text = this.quillEditor.getText()\n // trim text if wanted + handle special case that an empty editor contains a new line\n const textLength = this.trimOnValidation() ? text.trim().length : (text.length === 1 && text.trim().length === 0 ? 0 : text.length - 1)\n const deltaOperations = this.quillEditor.getContents().ops\n const onlyEmptyOperation = !!deltaOperations && deltaOperations.length === 1 && ['\\n', ''].includes(deltaOperations[0].insert?.toString())\n\n if (this.minLength() && textLength && textLength < this.minLength()) {\n err.minLengthError = {\n given: textLength,\n minLength: this.minLength()\n }\n\n valid = false\n }\n\n if (this.maxLength() && textLength > this.maxLength()) {\n err.maxLengthError = {\n given: textLength,\n maxLength: this.maxLength()\n }\n\n valid = false\n }\n\n if (this.required() && !textLength && onlyEmptyOperation) {\n err.requiredError = {\n empty: true\n }\n\n valid = false\n }\n\n return valid ? null : err\n }\n\n private addQuillEventListeners(): void {\n this.dispose()\n\n // We have to enter the `<root>` zone when adding event listeners, so `debounceTime` will spawn the\n // `AsyncAction` there w/o triggering change detections. We still re-enter the Angular's zone through\n // `zone.run` when we emit an event to the parent component.\n this.zone.runOutsideAngular(() => {\n this.subscription = new Subscription()\n\n this.subscription.add(\n // mark model as touched if editor lost focus\n fromEvent(this.quillEditor, 'selection-change').subscribe(\n ([range, oldRange, source]) => {\n this.selectionChangeHandler(range as any, oldRange as any, source)\n }\n )\n )\n\n // The `fromEvent` supports passing JQuery-style event targets, the editor has `on` and `off` methods which\n // will be invoked upon subscription and teardown.\n let textChange$ = fromEvent(this.quillEditor, 'text-change')\n let editorChange$ = fromEvent(this.quillEditor, 'editor-change')\n\n if (typeof this.debounceTime() === 'number') {\n textChange$ = textChange$.pipe(debounceTime(this.debounceTime()))\n editorChange$ = editorChange$.pipe(debounceTime(this.debounceTime()))\n }\n\n this.subscription.add(\n // update model if text changes\n textChange$.subscribe(([delta, oldDelta, source]) => {\n this.textChangeHandler(delta as any, oldDelta as any, source)\n })\n )\n\n this.subscription.add(\n // triggered if selection or text changed\n editorChange$.subscribe(([event, current, old, source]) => {\n this.editorChangeHandler(event as 'text-change' | 'selection-change', current, old, source)\n })\n )\n })\n }\n\n private dispose(): void {\n if (this.subscription !== null) {\n this.subscription.unsubscribe()\n this.subscription = null\n }\n }\n\n private isEmptyValue(html: string | null) {\n return html === '<p></p>' || html === '<div></div>' || html === '<p><br></p>' || html === '<div><br></div>'\n }\n}\n\n@Component({\n encapsulation: ViewEncapsulation.Emulated,\n providers: [\n {\n multi: true,\n provide: NG_VALUE_ACCESSOR,\n useExisting: forwardRef(() => QuillEditorComponent)\n },\n {\n multi: true,\n provide: NG_VALIDATORS,\n useExisting: forwardRef(() => QuillEditorComponent)\n }\n ],\n selector: 'quill-editor',\n template: `\n @if (toolbarPosition() !== 'top') {\n <div quill-editor-element></div>\n }\n\n <ng-content select=\"[above-quill-editor-toolbar]\"></ng-content>\n <ng-content select=\"[quill-editor-toolbar]\"></ng-content>\n <ng-content select=\"[below-quill-editor-toolbar]\"></ng-content>\n\n @if (toolbarPosition() === 'top') {\n <div quill-editor-element></div>\n }\n `,\n styles: [\n `\n :host {\n display: inline-block;\n }\n `\n ]\n})\nexport class QuillEditorComponent extends QuillEditorBase { }\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/ngx-quill/projects/ngx-quill/src/lib/quill-view-html.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/component-selector",
                "severity": 2,
                "message": "The selector should start with one of these prefixes: \"lib\" (https://angular.dev/style-guide#style-02-07)",
                "line": 17,
                "column": 13,
                "nodeType": "Literal",
                "messageId": "prefixFailure",
                "endLine": 17,
                "endColumn": 30
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { DomSanitizer, SafeHtml } from '@angular/platform-browser'\nimport { QuillService } from './quill.service'\n\nimport { NgClass } from '@angular/common'\nimport {\n Component,\n OnChanges,\n SimpleChanges,\n ViewEncapsulation,\n input,\n signal\n} from '@angular/core'\n\n@Component({\n imports: [NgClass],\n encapsulation: ViewEncapsulation.None,\n selector: 'quill-view-html',\n styles: [`\n.ql-container.ngx-quill-view-html {\n border: 0;\n}\n`],\n template: `\n <div class=\"ql-container\" [ngClass]=\"themeClass()\">\n <div class=\"ql-editor\" [innerHTML]=\"innerHTML()\">\n </div>\n </div>\n`\n})\nexport class QuillViewHTMLComponent implements OnChanges {\n readonly content = input('')\n readonly theme = input<string | undefined>(undefined)\n readonly sanitize = input<boolean | undefined>(undefined)\n\n readonly innerHTML = signal<SafeHtml>('')\n readonly themeClass = signal('ql-snow')\n\n constructor(\n private sanitizer: DomSanitizer,\n protected service: QuillService\n ) {}\n\n ngOnChanges(changes: SimpleChanges) {\n if (changes.theme) {\n const theme = changes.theme.currentValue || (this.service.config.theme ? this.service.config.theme : 'snow')\n this.themeClass.set(`ql-${theme} ngx-quill-view-html`)\n } else if (!this.theme()) {\n const theme = this.service.config.theme ? this.service.config.theme : 'snow'\n this.themeClass.set(`ql-${theme} ngx-quill-view-html`)\n }\n if (changes.content) {\n const content = changes.content.currentValue\n const sanitize = [true, false].includes(this.sanitize()) ? this.sanitize() : (this.service.config.sanitize || false)\n const innerHTML = sanitize ? content : this.sanitizer.bypassSecurityTrustHtml(content)\n this.innerHTML.set(innerHTML)\n }\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/ngx-quill/projects/ngx-quill/src/lib/quill-view.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/component-selector",
                "severity": 2,
                "message": "The selector should start with one of these prefixes: \"lib\" (https://angular.dev/style-guide#style-02-07)",
                "line": 35,
                "column": 13,
                "nodeType": "Literal",
                "messageId": "prefixFailure",
                "endLine": 35,
                "endColumn": 25
              },
              {
                "ruleId": "@angular-eslint/no-output-on-prefix",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named \"on\", nor prefixed with it (https://angular.dev/style-guide#style-05-16)",
                "line": 60,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "noOutputOnPrefix",
                "endLine": 60,
                "endColumn": 28
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { isPlatformServer } from '@angular/common'\nimport type QuillType from 'quill'\n\nimport {\n AfterViewInit,\n Component,\n DestroyRef,\n ElementRef,\n EventEmitter,\n Inject,\n NgZone,\n OnChanges,\n OnDestroy,\n Output,\n PLATFORM_ID,\n Renderer2,\n SecurityContext,\n SimpleChanges,\n ViewEncapsulation,\n inject,\n input\n} from '@angular/core'\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop'\nimport { DomSanitizer } from '@angular/platform-browser'\nimport type { Subscription } from 'rxjs'\nimport { mergeMap } from 'rxjs/operators'\n\nimport { CustomModule, CustomOption, QuillBeforeRender, QuillModules } from 'ngx-quill/config'\n\nimport { getFormat, raf$ } from './helpers'\nimport { QuillService } from './quill.service'\n\n@Component({\n encapsulation: ViewEncapsulation.None,\n selector: 'quill-view',\n styles: [`\n.ql-container.ngx-quill-view {\n border: 0;\n}\n`],\n template: `\n <div quill-view-element></div>\n`,\n})\nexport class QuillViewComponent implements AfterViewInit, OnChanges, OnDestroy {\n readonly format = input<'object' | 'html' | 'text' | 'json' | undefined>(\n undefined\n )\n readonly theme = input<string | undefined>(undefined)\n readonly modules = input<QuillModules | undefined>(undefined)\n readonly debug = input<'warn' | 'log' | 'error' | false>(false)\n readonly formats = input<string[] | null | undefined>(undefined)\n readonly sanitize = input<boolean | undefined>(undefined)\n readonly beforeRender = input<QuillBeforeRender>()\n readonly strict = input(true)\n readonly content = input<any>()\n readonly customModules = input<CustomModule[]>([])\n readonly customOptions = input<CustomOption[]>([])\n\n @Output() onEditorCreated = new EventEmitter<any>()\n\n quillEditor!: QuillType\n editorElem!: HTMLElement\n\n private quillSubscription: Subscription | null = null\n\n private destroyRef = inject(DestroyRef)\n\n constructor(\n public elementRef: ElementRef,\n protected renderer: Renderer2,\n protected zone: NgZone,\n protected service: QuillService,\n protected domSanitizer: DomSanitizer,\n @Inject(PLATFORM_ID) protected platformId: any,\n ) { }\n\n valueSetter = (quillEditor: QuillType, value: any): any => {\n const format = getFormat(this.format(), this.service.config.format)\n let content = value\n if (format === 'text') {\n quillEditor.setText(content)\n } else {\n if (format === 'html') {\n const sanitize = [true, false].includes(this.sanitize()) ? this.sanitize() : (this.service.config.sanitize || false)\n if (sanitize) {\n value = this.domSanitizer.sanitize(SecurityContext.HTML, value)\n }\n content = quillEditor.clipboard.convert({ html: value })\n } else if (format === 'json') {\n try {\n content = JSON.parse(value)\n } catch {\n content = [{ insert: value }]\n }\n }\n quillEditor.setContents(content)\n }\n }\n\n ngOnChanges(changes: SimpleChanges) {\n if (!this.quillEditor) {\n return\n }\n if (changes.content) {\n this.valueSetter(this.quillEditor, changes.content.currentValue)\n }\n }\n\n ngAfterViewInit() {\n if (isPlatformServer(this.platformId)) {\n return\n }\n\n this.quillSubscription = this.service.getQuill().pipe(\n mergeMap((Quill) => this.service.beforeRender(Quill, this.customModules(), this.beforeRender()))\n ).subscribe(Quill => {\n const modules = Object.assign({}, this.modules() || this.service.config.modules)\n modules.toolbar = false\n\n this.customOptions().forEach((customOption) => {\n const newCustomOption = Quill.import(customOption.import)\n newCustomOption.whitelist = customOption.whitelist\n Quill.register(newCustomOption, true)\n })\n\n let debug = this.debug()\n if (!debug && debug !== false && this.service.config.debug) {\n debug = this.service.config.debug\n }\n\n let formats = this.formats()\n if (!formats && formats === undefined) {\n formats = this.service.config.formats ? [...this.service.config.formats] : (this.service.config.formats === null ? null : undefined)\n }\n const theme = this.theme() || (this.service.config.theme ? this.service.config.theme : 'snow')\n\n this.editorElem = this.elementRef.nativeElement.querySelector(\n '[quill-view-element]'\n ) as HTMLElement\n\n this.zone.runOutsideAngular(() => {\n this.quillEditor = new Quill(this.editorElem, {\n debug,\n formats,\n modules,\n readOnly: true,\n strict: this.strict(),\n theme\n })\n })\n\n this.renderer.addClass(this.editorElem, 'ngx-quill-view')\n\n if (this.content()) {\n this.valueSetter(this.quillEditor, this.content())\n }\n\n // The `requestAnimationFrame` triggers change detection. There's no sense to invoke the `requestAnimationFrame` if anyone is\n // listening to the `onEditorCreated` event inside the template, for instance `<quill-view (onEditorCreated)=\"...\">`.\n if (!this.onEditorCreated.observed) {\n return\n }\n\n // The `requestAnimationFrame` will trigger change detection and `onEditorCreated` will also call `markDirty()`\n // internally, since Angular wraps template event listeners into `listener` instruction. We're using the `requestAnimationFrame`\n // to prevent the frame drop and avoid `ExpressionChangedAfterItHasBeenCheckedError` error.\n raf$().pipe(takeUntilDestroyed(this.destroyRef)).subscribe(() => {\n this.onEditorCreated.emit(this.quillEditor)\n })\n })\n }\n\n ngOnDestroy(): void {\n this.quillSubscription?.unsubscribe()\n this.quillSubscription = null\n }\n}\n",
            "usedDeprecatedRules": []
          }
        ],
        "all": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/ngx-quill/projects/ngx-quill/src/lib/quill-editor.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/no-output-on-prefix",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named \"on\", nor prefixed with it (https://angular.dev/style-guide#style-05-16)",
                "line": 125,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "noOutputOnPrefix",
                "endLine": 125,
                "endColumn": 28
              },
              {
                "ruleId": "@angular-eslint/no-output-on-prefix",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named \"on\", nor prefixed with it (https://angular.dev/style-guide#style-05-16)",
                "line": 126,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "noOutputOnPrefix",
                "endLine": 126,
                "endColumn": 28
              },
              {
                "ruleId": "@angular-eslint/no-output-on-prefix",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named \"on\", nor prefixed with it (https://angular.dev/style-guide#style-05-16)",
                "line": 127,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "noOutputOnPrefix",
                "endLine": 127,
                "endColumn": 29
              },
              {
                "ruleId": "@angular-eslint/no-output-on-prefix",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named \"on\", nor prefixed with it (https://angular.dev/style-guide#style-05-16)",
                "line": 128,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "noOutputOnPrefix",
                "endLine": 128,
                "endColumn": 31
              },
              {
                "ruleId": "@angular-eslint/no-output-on-prefix",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named \"on\", nor prefixed with it (https://angular.dev/style-guide#style-05-16)",
                "line": 129,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "noOutputOnPrefix",
                "endLine": 129,
                "endColumn": 20
              },
              {
                "ruleId": "@angular-eslint/no-output-on-prefix",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named \"on\", nor prefixed with it (https://angular.dev/style-guide#style-05-16)",
                "line": 130,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "noOutputOnPrefix",
                "endLine": 130,
                "endColumn": 19
              },
              {
                "ruleId": "@angular-eslint/no-output-on-prefix",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named \"on\", nor prefixed with it (https://angular.dev/style-guide#style-05-16)",
                "line": 131,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "noOutputOnPrefix",
                "endLine": 131,
                "endColumn": 26
              },
              {
                "ruleId": "@angular-eslint/no-output-on-prefix",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named \"on\", nor prefixed with it (https://angular.dev/style-guide#style-05-16)",
                "line": 132,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "noOutputOnPrefix",
                "endLine": 132,
                "endColumn": 25
              },
              {
                "ruleId": "@angular-eslint/component-selector",
                "severity": 2,
                "message": "The selector should start with one of these prefixes: \"lib\" (https://angular.dev/style-guide#style-02-07)",
                "line": 744,
                "column": 13,
                "nodeType": "Literal",
                "messageId": "prefixFailure",
                "endLine": 744,
                "endColumn": 27
              }
            ],
            "suppressedMessages": [],
            "errorCount": 9,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { DOCUMENT, isPlatformServer } from '@angular/common'\nimport { DomSanitizer } from '@angular/platform-browser'\n\nimport type QuillType from 'quill'\nimport type { QuillOptions } from 'quill'\nimport type DeltaType from 'quill-delta'\n\nimport {\n AfterViewInit,\n ChangeDetectorRef,\n Component,\n DestroyRef,\n Directive,\n ElementRef,\n EventEmitter,\n forwardRef,\n inject,\n input,\n NgZone,\n OnChanges,\n OnDestroy,\n OnInit,\n Output,\n PLATFORM_ID,\n Renderer2,\n SecurityContext,\n signal,\n SimpleChanges,\n ViewEncapsulation\n} from '@angular/core'\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop'\nimport { fromEvent, Subscription } from 'rxjs'\nimport { debounceTime, mergeMap } from 'rxjs/operators'\n\nimport { ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR, Validator } from '@angular/forms'\n\nimport { CustomModule, CustomOption, defaultModules, QuillBeforeRender, QuillModules } from 'ngx-quill/config'\n\nimport type History from 'quill/modules/history'\nimport type Toolbar from 'quill/modules/toolbar'\nimport { getFormat, raf$ } from './helpers'\nimport { QuillService } from './quill.service'\n\nexport interface Range {\n index: number\n length: number\n}\n\nexport interface ContentChange {\n content: DeltaType\n delta: DeltaType\n editor: QuillType\n html: string | null\n oldDelta: DeltaType\n source: string\n text: string\n}\n\nexport interface SelectionChange {\n editor: QuillType\n oldRange: Range | null\n range: Range | null\n source: string\n}\n\nexport interface Blur {\n editor: QuillType\n source: string\n}\n\nexport interface Focus {\n editor: QuillType\n source: string\n}\n\nexport type EditorChangeContent = ContentChange & { event: 'text-change' }\nexport type EditorChangeSelection = SelectionChange & { event: 'selection-change' }\n\n@Directive()\nexport abstract class QuillEditorBase implements AfterViewInit, ControlValueAccessor, OnChanges, OnInit, OnDestroy, Validator {\n readonly format = input<'object' | 'html' | 'text' | 'json' | undefined>(\n undefined\n )\n readonly theme = input<string | undefined>(undefined)\n readonly modules = input<QuillModules | undefined>(undefined)\n readonly debug = input<'warn' | 'log' | 'error' | false>(false)\n readonly readOnly = input<boolean | undefined>(false)\n readonly placeholder = input<string | undefined>(undefined)\n readonly maxLength = input<number | undefined>(undefined)\n readonly minLength = input<number | undefined>(undefined)\n readonly required = input(false)\n readonly formats = input<string[] | null | undefined>(undefined)\n readonly customToolbarPosition = input<'top' | 'bottom'>('top')\n readonly sanitize = input<boolean | undefined>(undefined)\n readonly beforeRender = input<QuillBeforeRender>(undefined)\n readonly styles = input<any>(null)\n readonly registry = input<QuillOptions['registry']>(\n undefined\n )\n readonly bounds = input<HTMLElement | string | undefined>(undefined)\n readonly customOptions = input<CustomOption[]>([])\n readonly customModules = input<CustomModule[]>([])\n readonly trackChanges = input<'user' | 'all' | undefined>(undefined)\n readonly classes = input<string | undefined>(undefined)\n readonly trimOnValidation = input(false)\n readonly linkPlaceholder = input<string | undefined>(undefined)\n readonly compareValues = input(false)\n readonly filterNull = input(false)\n readonly debounceTime = input<number | undefined>(undefined)\n /bin /run /sbin https://github.com/KillerCodeMonkey/ngx-quill/issues/1257 - fix null value set\n\n provide default empty value\n by default null\n\n e.g. defaultEmptyValue=\"\" - empty string\n\n <quill-editor\n defaultEmptyValue=\"\"\n formControlName=\"message\"\n ></quill-editor>\n */\n readonly defaultEmptyValue = input<any>(null)\n\n @Output() onEditorCreated = new EventEmitter<QuillType>()\n @Output() onEditorChanged = new EventEmitter<EditorChangeContent | EditorChangeSelection>()\n @Output() onContentChanged = new EventEmitter<ContentChange>()\n @Output() onSelectionChanged = new EventEmitter<SelectionChange>()\n @Output() onFocus = new EventEmitter<Focus>()\n @Output() onBlur = new EventEmitter<Blur>()\n @Output() onNativeFocus = new EventEmitter<Focus>()\n @Output() onNativeBlur = new EventEmitter<Blur>()\n\n quillEditor!: QuillType\n editorElem!: HTMLElement\n content: any\n disabled = false // used to store initial value before ViewInit\n\n readonly toolbarPosition = signal('top')\n\n onModelChange: (modelValue?: any) => void\n onModelTouched: () => void\n onValidatorChanged: () => void\n\n private subscription: Subscription | null = null\n private quillSubscription: Subscription | null = null\n\n private elementRef = inject(ElementRef)\n private document = inject(DOCUMENT)\n\n private cd = inject(ChangeDetectorRef)\n private domSanitizer = inject(DomSanitizer)\n private platformId = inject<string>(PLATFORM_ID)\n private renderer = inject(Renderer2)\n private zone = inject(NgZone)\n private service = inject(QuillService)\n private destroyRef = inject(DestroyRef)\n\n static normalizeClassNames(classes: string): string[] {\n const classList = classes.trim().split(' ')\n return classList.reduce((prev: string[], cur: string) => {\n const trimmed = cur.trim()\n if (trimmed) {\n prev.push(trimmed)\n }\n\n return prev\n }, [])\n }\n\n valueGetter = input((quillEditor: QuillType): string | any => {\n let html: string | null = quillEditor.getSemanticHTML()\n if (this.isEmptyValue(html)) {\n html = this.defaultEmptyValue()\n }\n let modelValue: string | DeltaType | null = html\n const format = getFormat(this.format(), this.service.config.format)\n\n if (format === 'text') {\n modelValue = quillEditor.getText()\n } else if (format === 'object') {\n modelValue = quillEditor.getContents()\n } else if (format === 'json') {\n try {\n modelValue = JSON.stringify(quillEditor.getContents())\n } catch {\n modelValue = quillEditor.getText()\n }\n }\n\n return modelValue\n })\n\n valueSetter = input((quillEditor: QuillType, value: any): any => {\n const format = getFormat(this.format(), this.service.config.format)\n if (format === 'html') {\n const sanitize = [true, false].includes(this.sanitize()) ? this.sanitize() : (this.service.config.sanitize || false)\n if (sanitize) {\n value = this.domSanitizer.sanitize(SecurityContext.HTML, value)\n }\n return quillEditor.clipboard.convert({ html: value })\n } else if (format === 'json') {\n try {\n return JSON.parse(value)\n } catch {\n return [{ insert: value }]\n }\n }\n\n return value\n })\n\n ngOnInit() {\n this.toolbarPosition.set(this.customToolbarPosition())\n }\n\n ngAfterViewInit() {\n if (isPlatformServer(this.platformId)) {\n return\n }\n\n // The `quill-editor` component might be destroyed before the `quill` chunk is loaded and its code is executed\n // this will lead to runtime exceptions, since the code will be executed on DOM nodes that don't exist within the tree.\n\n this.quillSubscription = this.service.getQuill().pipe(\n mergeMap((Quill) => this.service.beforeRender(Quill, this.customModules(), this.beforeRender()))\n ).subscribe(Quill => {\n this.editorElem = this.elementRef.nativeElement.querySelector(\n '[quill-editor-element]'\n )\n\n const toolbarElem = this.elementRef.nativeElement.querySelector(\n '[quill-editor-toolbar]'\n )\n const modules = Object.assign({}, this.modules() || this.service.config.modules)\n\n if (toolbarElem) {\n modules.toolbar = toolbarElem\n } else if (modules.toolbar === undefined) {\n modules.toolbar = defaultModules.toolbar\n }\n\n let placeholder = this.placeholder() !== undefined ? this.placeholder() : this.service.config.placeholder\n if (placeholder === undefined) {\n placeholder = 'Insert text here ...'\n }\n\n const styles = this.styles()\n if (styles) {\n Object.keys(styles).forEach((key: string) => {\n this.renderer.setStyle(this.editorElem, key, styles[key])\n })\n }\n\n if (this.classes()) {\n this.addClasses(this.classes())\n }\n\n this.customOptions().forEach((customOption) => {\n const newCustomOption = Quill.import(customOption.import)\n newCustomOption.whitelist = customOption.whitelist\n Quill.register(newCustomOption, true)\n })\n\n let bounds = this.bounds() && this.bounds() === 'self' ? this.editorElem : this.bounds()\n if (!bounds) {\n bounds = this.service.config.bounds ? this.service.config.bounds : this.document.body\n }\n\n let debug = this.debug()\n if (!debug && debug !== false && this.service.config.debug) {\n debug = this.service.config.debug\n }\n\n let readOnly = this.readOnly()\n if (!readOnly && this.readOnly() !== false) {\n readOnly = this.service.config.readOnly !== undefined ? this.service.config.readOnly : false\n }\n\n let formats = this.formats()\n if (!formats && formats === undefined) {\n formats = this.service.config.formats ? [...this.service.config.formats] : (this.service.config.formats === null ? null : undefined)\n }\n\n this.zone.runOutsideAngular(() => {\n this.quillEditor = new Quill(this.editorElem, {\n bounds,\n debug,\n formats,\n modules,\n placeholder,\n readOnly,\n registry: this.registry(),\n theme: this.theme() || (this.service.config.theme ? this.service.config.theme : 'snow')\n })\n\n if (this.onNativeBlur.observed) {\n // https://github.com/quilljs/quill/issues/2186#issuecomment-533401328\n fromEvent(this.quillEditor.scroll.domNode, 'blur').pipe(takeUntilDestroyed(this.destroyRef)).subscribe(() => this.onNativeBlur.next({\n editor: this.quillEditor,\n source: 'dom'\n }))\n // https://github.com/quilljs/quill/issues/2186#issuecomment-803257538\n const toolbar = this.quillEditor.getModule('toolbar') as Toolbar\n if (toolbar.container) {\n fromEvent(toolbar.container, 'mousedown').pipe(takeUntilDestroyed(this.destroyRef)).subscribe(e => e.preventDefault())\n }\n }\n\n if (this.onNativeFocus.observed) {\n fromEvent(this.quillEditor.scroll.domNode, 'focus').pipe(takeUntilDestroyed(this.destroyRef)).subscribe(() => this.onNativeFocus.next({\n editor: this.quillEditor,\n source: 'dom'\n }))\n }\n\n // Set optional link placeholder, Quill has no native API for it so using workaround\n if (this.linkPlaceholder()) {\n const tooltip = (this.quillEditor as any)?.theme?.tooltip\n const input = tooltip?.root?.querySelector('input[data-link]')\n if (input?.dataset) {\n input.dataset.link = this.linkPlaceholder()\n }\n }\n })\n\n if (this.content) {\n const format = getFormat(this.format(), this.service.config.format)\n\n if (format === 'text') {\n this.quillEditor.setText(this.content, 'silent')\n } else {\n const valueSetter = this.valueSetter()\n const newValue = valueSetter(this.quillEditor, this.content)\n this.quillEditor.setContents(newValue, 'silent')\n }\n\n const history = this.quillEditor.getModule('history') as History\n history.clear()\n }\n\n // initialize disabled status based on this.disabled as default value\n this.setDisabledState()\n\n this.addQuillEventListeners()\n\n // The `requestAnimationFrame` triggers change detection. There's no sense to invoke the `requestAnimationFrame` if anyone is\n // listening to the `onEditorCreated` event inside the template, for instance `<quill-view (onEditorCreated)=\"...\">`.\n if (!this.onEditorCreated.observed && !this.onValidatorChanged) {\n return\n }\n\n // The `requestAnimationFrame` will trigger change detection and `onEditorCreated` will also call `markDirty()`\n // internally, since Angular wraps template event listeners into `listener` instruction. We're using the `requestAnimationFrame`\n // to prevent the frame drop and avoid `ExpressionChangedAfterItHasBeenCheckedError` error.\n raf$().pipe(takeUntilDestroyed(this.destroyRef)).subscribe(() => {\n if (this.onValidatorChanged) {\n this.onValidatorChanged()\n }\n this.onEditorCreated.emit(this.quillEditor)\n })\n })\n }\n\n selectionChangeHandler = (range: Range | null, oldRange: Range | null, source: string) => {\n const trackChanges = this.trackChanges() || this.service.config.trackChanges\n const shouldTriggerOnModelTouched = !range && !!this.onModelTouched && (source === 'user' || trackChanges && trackChanges === 'all')\n\n // only emit changes when there's any listener\n if (!this.onBlur.observed &&\n !this.onFocus.observed &&\n !this.onSelectionChanged.observed &&\n !shouldTriggerOnModelTouched) {\n return\n }\n\n this.zone.run(() => {\n if (range === null) {\n this.onBlur.emit({\n editor: this.quillEditor,\n source\n })\n } else if (oldRange === null) {\n this.onFocus.emit({\n editor: this.quillEditor,\n source\n })\n }\n\n this.onSelectionChanged.emit({\n editor: this.quillEditor,\n oldRange,\n range,\n source\n })\n\n if (shouldTriggerOnModelTouched) {\n this.onModelTouched()\n }\n\n this.cd.markForCheck()\n })\n }\n\n textChangeHandler = (delta: DeltaType, oldDelta: DeltaType, source: string): void => {\n // only emit changes emitted by user interactions\n const text = this.quillEditor.getText()\n const content = this.quillEditor.getContents()\n\n let html: string | null = this.quillEditor.getSemanticHTML()\n if (this.isEmptyValue(html)) {\n html = this.defaultEmptyValue()\n }\n\n const trackChanges = this.trackChanges() || this.service.config.trackChanges\n const shouldTriggerOnModelChange = (source === 'user' || trackChanges && trackChanges === 'all') && !!this.onModelChange\n\n // only emit changes when there's any listener\n if (!this.onContentChanged.observed && !shouldTriggerOnModelChange) {\n return\n }\n\n this.zone.run(() => {\n if (shouldTriggerOnModelChange) {\n const valueGetter = this.valueGetter()\n this.onModelChange(\n valueGetter(this.quillEditor)\n )\n }\n\n this.onContentChanged.emit({\n content,\n delta,\n editor: this.quillEditor,\n html,\n oldDelta,\n source,\n text\n })\n\n this.cd.markForCheck()\n })\n }\n\n editorChangeHandler = (\n event: 'text-change' | 'selection-change',\n current: any | Range | null, old: any | Range | null, source: string\n ): void => {\n // only emit changes when there's any listener\n if (!this.onEditorChanged.observed) {\n return\n }\n\n // only emit changes emitted by user interactions\n if (event === 'text-change') {\n const text = this.quillEditor.getText()\n const content = this.quillEditor.getContents()\n\n let html: string | null = this.quillEditor.getSemanticHTML()\n if (this.isEmptyValue(html)) {\n html = this.defaultEmptyValue()\n }\n\n this.zone.run(() => {\n this.onEditorChanged.emit({\n content,\n delta: current,\n editor: this.quillEditor,\n event,\n html,\n oldDelta: old,\n source,\n text\n })\n\n this.cd.markForCheck()\n })\n } else {\n this.zone.run(() => {\n this.onEditorChanged.emit({\n editor: this.quillEditor,\n event,\n oldRange: old,\n range: current,\n source\n })\n\n this.cd.markForCheck()\n })\n }\n }\n\n ngOnDestroy() {\n this.dispose()\n\n this.quillSubscription?.unsubscribe()\n this.quillSubscription = null\n }\n\n ngOnChanges(changes: SimpleChanges): void {\n if (!this.quillEditor) {\n return\n }\n if (changes.readOnly) {\n this.quillEditor.enable(!changes.readOnly.currentValue)\n }\n if (changes.placeholder) {\n this.quillEditor.root.dataset.placeholder =\n changes.placeholder.currentValue\n }\n if (changes.styles) {\n const currentStyling = changes.styles.currentValue\n const previousStyling = changes.styles.previousValue\n\n if (previousStyling) {\n Object.keys(previousStyling).forEach((key: string) => {\n this.renderer.removeStyle(this.editorElem, key)\n })\n }\n if (currentStyling) {\n Object.keys(currentStyling).forEach((key: string) => {\n this.renderer.setStyle(this.editorElem, key, this.styles()[key])\n })\n }\n }\n if (changes.classes) {\n const currentClasses = changes.classes.currentValue\n const previousClasses = changes.classes.previousValue\n\n if (previousClasses) {\n this.removeClasses(previousClasses)\n }\n\n if (currentClasses) {\n this.addClasses(currentClasses)\n }\n }\n // We'd want to re-apply event listeners if the `debounceTime` binding changes to apply the\n // `debounceTime` operator or vice-versa remove it.\n if (changes.debounceTime) {\n this.addQuillEventListeners()\n }\n }\n\n addClasses(classList: string): void {\n QuillEditorBase.normalizeClassNames(classList).forEach((c: string) => {\n this.renderer.addClass(this.editorElem, c)\n })\n }\n\n removeClasses(classList: string): void {\n QuillEditorBase.normalizeClassNames(classList).forEach((c: string) => {\n this.renderer.removeClass(this.editorElem, c)\n })\n }\n\n writeValue(currentValue: any) {\n\n // optional fix for https://github.com/angular/angular/issues/14988\n if (this.filterNull() && currentValue === null) {\n return\n }\n\n this.content = currentValue\n\n if (!this.quillEditor) {\n return\n }\n\n const format = getFormat(this.format(), this.service.config.format)\n const valueSetter = this.valueSetter()\n const newValue = valueSetter(this.quillEditor, currentValue)\n\n if (this.compareValues()) {\n const currentEditorValue = this.quillEditor.getContents()\n if (JSON.stringify(currentEditorValue) === JSON.stringify(newValue)) {\n return\n }\n }\n\n if (currentValue) {\n if (format === 'text') {\n this.quillEditor.setText(currentValue)\n } else {\n this.quillEditor.setContents(newValue)\n }\n return\n }\n this.quillEditor.setText('')\n\n }\n\n setDisabledState(isDisabled: boolean = this.disabled): void {\n // store initial value to set appropriate disabled status after ViewInit\n this.disabled = isDisabled\n if (this.quillEditor) {\n if (isDisabled) {\n this.quillEditor.disable()\n this.renderer.setAttribute(this.elementRef.nativeElement, 'disabled', 'disabled')\n } else {\n if (!this.readOnly()) {\n this.quillEditor.enable()\n }\n this.renderer.removeAttribute(this.elementRef.nativeElement, 'disabled')\n }\n }\n }\n\n registerOnChange(fn: (modelValue: any) => void): void {\n this.onModelChange = fn\n }\n\n registerOnTouched(fn: () => void): void {\n this.onModelTouched = fn\n }\n\n registerOnValidatorChange(fn: () => void) {\n this.onValidatorChanged = fn\n }\n\n validate() {\n if (!this.quillEditor) {\n return null\n }\n\n const err: {\n minLengthError?: {\n given: number\n minLength: number\n }\n maxLengthError?: {\n given: number\n maxLength: number\n }\n requiredError?: { empty: boolean }\n } = {}\n let valid = true\n\n const text = this.quillEditor.getText()\n // trim text if wanted + handle special case that an empty editor contains a new line\n const textLength = this.trimOnValidation() ? text.trim().length : (text.length === 1 && text.trim().length === 0 ? 0 : text.length - 1)\n const deltaOperations = this.quillEditor.getContents().ops\n const onlyEmptyOperation = !!deltaOperations && deltaOperations.length === 1 && ['\\n', ''].includes(deltaOperations[0].insert?.toString())\n\n if (this.minLength() && textLength && textLength < this.minLength()) {\n err.minLengthError = {\n given: textLength,\n minLength: this.minLength()\n }\n\n valid = false\n }\n\n if (this.maxLength() && textLength > this.maxLength()) {\n err.maxLengthError = {\n given: textLength,\n maxLength: this.maxLength()\n }\n\n valid = false\n }\n\n if (this.required() && !textLength && onlyEmptyOperation) {\n err.requiredError = {\n empty: true\n }\n\n valid = false\n }\n\n return valid ? null : err\n }\n\n private addQuillEventListeners(): void {\n this.dispose()\n\n // We have to enter the `<root>` zone when adding event listeners, so `debounceTime` will spawn the\n // `AsyncAction` there w/o triggering change detections. We still re-enter the Angular's zone through\n // `zone.run` when we emit an event to the parent component.\n this.zone.runOutsideAngular(() => {\n this.subscription = new Subscription()\n\n this.subscription.add(\n // mark model as touched if editor lost focus\n fromEvent(this.quillEditor, 'selection-change').subscribe(\n ([range, oldRange, source]) => {\n this.selectionChangeHandler(range as any, oldRange as any, source)\n }\n )\n )\n\n // The `fromEvent` supports passing JQuery-style event targets, the editor has `on` and `off` methods which\n // will be invoked upon subscription and teardown.\n let textChange$ = fromEvent(this.quillEditor, 'text-change')\n let editorChange$ = fromEvent(this.quillEditor, 'editor-change')\n\n if (typeof this.debounceTime() === 'number') {\n textChange$ = textChange$.pipe(debounceTime(this.debounceTime()))\n editorChange$ = editorChange$.pipe(debounceTime(this.debounceTime()))\n }\n\n this.subscription.add(\n // update model if text changes\n textChange$.subscribe(([delta, oldDelta, source]) => {\n this.textChangeHandler(delta as any, oldDelta as any, source)\n })\n )\n\n this.subscription.add(\n // triggered if selection or text changed\n editorChange$.subscribe(([event, current, old, source]) => {\n this.editorChangeHandler(event as 'text-change' | 'selection-change', current, old, source)\n })\n )\n })\n }\n\n private dispose(): void {\n if (this.subscription !== null) {\n this.subscription.unsubscribe()\n this.subscription = null\n }\n }\n\n private isEmptyValue(html: string | null) {\n return html === '<p></p>' || html === '<div></div>' || html === '<p><br></p>' || html === '<div><br></div>'\n }\n}\n\n@Component({\n encapsulation: ViewEncapsulation.Emulated,\n providers: [\n {\n multi: true,\n provide: NG_VALUE_ACCESSOR,\n useExisting: forwardRef(() => QuillEditorComponent)\n },\n {\n multi: true,\n provide: NG_VALIDATORS,\n useExisting: forwardRef(() => QuillEditorComponent)\n }\n ],\n selector: 'quill-editor',\n template: `\n @if (toolbarPosition() !== 'top') {\n <div quill-editor-element></div>\n }\n\n <ng-content select=\"[above-quill-editor-toolbar]\"></ng-content>\n <ng-content select=\"[quill-editor-toolbar]\"></ng-content>\n <ng-content select=\"[below-quill-editor-toolbar]\"></ng-content>\n\n @if (toolbarPosition() === 'top') {\n <div quill-editor-element></div>\n }\n `,\n styles: [\n `\n :host {\n display: inline-block;\n }\n `\n ]\n})\nexport class QuillEditorComponent extends QuillEditorBase { }\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/ngx-quill/projects/ngx-quill/src/lib/quill-view-html.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/component-selector",
                "severity": 2,
                "message": "The selector should start with one of these prefixes: \"lib\" (https://angular.dev/style-guide#style-02-07)",
                "line": 17,
                "column": 13,
                "nodeType": "Literal",
                "messageId": "prefixFailure",
                "endLine": 17,
                "endColumn": 30
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { DomSanitizer, SafeHtml } from '@angular/platform-browser'\nimport { QuillService } from './quill.service'\n\nimport { NgClass } from '@angular/common'\nimport {\n Component,\n OnChanges,\n SimpleChanges,\n ViewEncapsulation,\n input,\n signal\n} from '@angular/core'\n\n@Component({\n imports: [NgClass],\n encapsulation: ViewEncapsulation.None,\n selector: 'quill-view-html',\n styles: [`\n.ql-container.ngx-quill-view-html {\n border: 0;\n}\n`],\n template: `\n <div class=\"ql-container\" [ngClass]=\"themeClass()\">\n <div class=\"ql-editor\" [innerHTML]=\"innerHTML()\">\n </div>\n </div>\n`\n})\nexport class QuillViewHTMLComponent implements OnChanges {\n readonly content = input('')\n readonly theme = input<string | undefined>(undefined)\n readonly sanitize = input<boolean | undefined>(undefined)\n\n readonly innerHTML = signal<SafeHtml>('')\n readonly themeClass = signal('ql-snow')\n\n constructor(\n private sanitizer: DomSanitizer,\n protected service: QuillService\n ) {}\n\n ngOnChanges(changes: SimpleChanges) {\n if (changes.theme) {\n const theme = changes.theme.currentValue || (this.service.config.theme ? this.service.config.theme : 'snow')\n this.themeClass.set(`ql-${theme} ngx-quill-view-html`)\n } else if (!this.theme()) {\n const theme = this.service.config.theme ? this.service.config.theme : 'snow'\n this.themeClass.set(`ql-${theme} ngx-quill-view-html`)\n }\n if (changes.content) {\n const content = changes.content.currentValue\n const sanitize = [true, false].includes(this.sanitize()) ? this.sanitize() : (this.service.config.sanitize || false)\n const innerHTML = sanitize ? content : this.sanitizer.bypassSecurityTrustHtml(content)\n this.innerHTML.set(innerHTML)\n }\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/ngx-quill/projects/ngx-quill/src/lib/quill-view.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/component-selector",
                "severity": 2,
                "message": "The selector should start with one of these prefixes: \"lib\" (https://angular.dev/style-guide#style-02-07)",
                "line": 35,
                "column": 13,
                "nodeType": "Literal",
                "messageId": "prefixFailure",
                "endLine": 35,
                "endColumn": 25
              },
              {
                "ruleId": "@angular-eslint/no-output-on-prefix",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named \"on\", nor prefixed with it (https://angular.dev/style-guide#style-05-16)",
                "line": 60,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "noOutputOnPrefix",
                "endLine": 60,
                "endColumn": 28
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { isPlatformServer } from '@angular/common'\nimport type QuillType from 'quill'\n\nimport {\n AfterViewInit,\n Component,\n DestroyRef,\n ElementRef,\n EventEmitter,\n Inject,\n NgZone,\n OnChanges,\n OnDestroy,\n Output,\n PLATFORM_ID,\n Renderer2,\n SecurityContext,\n SimpleChanges,\n ViewEncapsulation,\n inject,\n input\n} from '@angular/core'\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop'\nimport { DomSanitizer } from '@angular/platform-browser'\nimport type { Subscription } from 'rxjs'\nimport { mergeMap } from 'rxjs/operators'\n\nimport { CustomModule, CustomOption, QuillBeforeRender, QuillModules } from 'ngx-quill/config'\n\nimport { getFormat, raf$ } from './helpers'\nimport { QuillService } from './quill.service'\n\n@Component({\n encapsulation: ViewEncapsulation.None,\n selector: 'quill-view',\n styles: [`\n.ql-container.ngx-quill-view {\n border: 0;\n}\n`],\n template: `\n <div quill-view-element></div>\n`,\n})\nexport class QuillViewComponent implements AfterViewInit, OnChanges, OnDestroy {\n readonly format = input<'object' | 'html' | 'text' | 'json' | undefined>(\n undefined\n )\n readonly theme = input<string | undefined>(undefined)\n readonly modules = input<QuillModules | undefined>(undefined)\n readonly debug = input<'warn' | 'log' | 'error' | false>(false)\n readonly formats = input<string[] | null | undefined>(undefined)\n readonly sanitize = input<boolean | undefined>(undefined)\n readonly beforeRender = input<QuillBeforeRender>()\n readonly strict = input(true)\n readonly content = input<any>()\n readonly customModules = input<CustomModule[]>([])\n readonly customOptions = input<CustomOption[]>([])\n\n @Output() onEditorCreated = new EventEmitter<any>()\n\n quillEditor!: QuillType\n editorElem!: HTMLElement\n\n private quillSubscription: Subscription | null = null\n\n private destroyRef = inject(DestroyRef)\n\n constructor(\n public elementRef: ElementRef,\n protected renderer: Renderer2,\n protected zone: NgZone,\n protected service: QuillService,\n protected domSanitizer: DomSanitizer,\n @Inject(PLATFORM_ID) protected platformId: any,\n ) { }\n\n valueSetter = (quillEditor: QuillType, value: any): any => {\n const format = getFormat(this.format(), this.service.config.format)\n let content = value\n if (format === 'text') {\n quillEditor.setText(content)\n } else {\n if (format === 'html') {\n const sanitize = [true, false].includes(this.sanitize()) ? this.sanitize() : (this.service.config.sanitize || false)\n if (sanitize) {\n value = this.domSanitizer.sanitize(SecurityContext.HTML, value)\n }\n content = quillEditor.clipboard.convert({ html: value })\n } else if (format === 'json') {\n try {\n content = JSON.parse(value)\n } catch {\n content = [{ insert: value }]\n }\n }\n quillEditor.setContents(content)\n }\n }\n\n ngOnChanges(changes: SimpleChanges) {\n if (!this.quillEditor) {\n return\n }\n if (changes.content) {\n this.valueSetter(this.quillEditor, changes.content.currentValue)\n }\n }\n\n ngAfterViewInit() {\n if (isPlatformServer(this.platformId)) {\n return\n }\n\n this.quillSubscription = this.service.getQuill().pipe(\n mergeMap((Quill) => this.service.beforeRender(Quill, this.customModules(), this.beforeRender()))\n ).subscribe(Quill => {\n const modules = Object.assign({}, this.modules() || this.service.config.modules)\n modules.toolbar = false\n\n this.customOptions().forEach((customOption) => {\n const newCustomOption = Quill.import(customOption.import)\n newCustomOption.whitelist = customOption.whitelist\n Quill.register(newCustomOption, true)\n })\n\n let debug = this.debug()\n if (!debug && debug !== false && this.service.config.debug) {\n debug = this.service.config.debug\n }\n\n let formats = this.formats()\n if (!formats && formats === undefined) {\n formats = this.service.config.formats ? [...this.service.config.formats] : (this.service.config.formats === null ? null : undefined)\n }\n const theme = this.theme() || (this.service.config.theme ? this.service.config.theme : 'snow')\n\n this.editorElem = this.elementRef.nativeElement.querySelector(\n '[quill-view-element]'\n ) as HTMLElement\n\n this.zone.runOutsideAngular(() => {\n this.quillEditor = new Quill(this.editorElem, {\n debug,\n formats,\n modules,\n readOnly: true,\n strict: this.strict(),\n theme\n })\n })\n\n this.renderer.addClass(this.editorElem, 'ngx-quill-view')\n\n if (this.content()) {\n this.valueSetter(this.quillEditor, this.content())\n }\n\n // The `requestAnimationFrame` triggers change detection. There's no sense to invoke the `requestAnimationFrame` if anyone is\n // listening to the `onEditorCreated` event inside the template, for instance `<quill-view (onEditorCreated)=\"...\">`.\n if (!this.onEditorCreated.observed) {\n return\n }\n\n // The `requestAnimationFrame` will trigger change detection and `onEditorCreated` will also call `markDirty()`\n // internally, since Angular wraps template event listeners into `listener` instruction. We're using the `requestAnimationFrame`\n // to prevent the frame drop and avoid `ExpressionChangedAfterItHasBeenCheckedError` error.\n raf$().pipe(takeUntilDestroyed(this.destroyRef)).subscribe(() => {\n this.onEditorCreated.emit(this.quillEditor)\n })\n })\n }\n\n ngOnDestroy(): void {\n this.quillSubscription?.unsubscribe()\n this.quillSubscription = null\n }\n}\n",
            "usedDeprecatedRules": []
          }
        ]
      }
    },
    "after": {
      "ngx-quill": {
        "recommended": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/ngx-quill/projects/ngx-quill/src/lib/quill-editor.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/no-output-on-prefix",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named \"on\", nor prefixed with it (https://angular.dev/style-guide#style-05-16)",
                "line": 125,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "noOutputOnPrefix",
                "endLine": 125,
                "endColumn": 28
              },
              {
                "ruleId": "@angular-eslint/no-output-on-prefix",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named \"on\", nor prefixed with it (https://angular.dev/style-guide#style-05-16)",
                "line": 126,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "noOutputOnPrefix",
                "endLine": 126,
                "endColumn": 28
              },
              {
                "ruleId": "@angular-eslint/no-output-on-prefix",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named \"on\", nor prefixed with it (https://angular.dev/style-guide#style-05-16)",
                "line": 127,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "noOutputOnPrefix",
                "endLine": 127,
                "endColumn": 29
              },
              {
                "ruleId": "@angular-eslint/no-output-on-prefix",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named \"on\", nor prefixed with it (https://angular.dev/style-guide#style-05-16)",
                "line": 128,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "noOutputOnPrefix",
                "endLine": 128,
                "endColumn": 31
              },
              {
                "ruleId": "@angular-eslint/no-output-on-prefix",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named \"on\", nor prefixed with it (https://angular.dev/style-guide#style-05-16)",
                "line": 129,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "noOutputOnPrefix",
                "endLine": 129,
                "endColumn": 20
              },
              {
                "ruleId": "@angular-eslint/no-output-on-prefix",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named \"on\", nor prefixed with it (https://angular.dev/style-guide#style-05-16)",
                "line": 130,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "noOutputOnPrefix",
                "endLine": 130,
                "endColumn": 19
              },
              {
                "ruleId": "@angular-eslint/no-output-on-prefix",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named \"on\", nor prefixed with it (https://angular.dev/style-guide#style-05-16)",
                "line": 131,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "noOutputOnPrefix",
                "endLine": 131,
                "endColumn": 26
              },
              {
                "ruleId": "@angular-eslint/no-output-on-prefix",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named \"on\", nor prefixed with it (https://angular.dev/style-guide#style-05-16)",
                "line": 132,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "noOutputOnPrefix",
                "endLine": 132,
                "endColumn": 25
              },
              {
                "ruleId": "@angular-eslint/component-selector",
                "severity": 2,
                "message": "The selector should start with one of these prefixes: \"lib\" (https://angular.dev/style-guide#style-02-07)",
                "line": 744,
                "column": 13,
                "nodeType": "Literal",
                "messageId": "prefixFailure",
                "endLine": 744,
                "endColumn": 27
              }
            ],
            "suppressedMessages": [],
            "errorCount": 9,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { DOCUMENT, isPlatformServer } from '@angular/common'\nimport { DomSanitizer } from '@angular/platform-browser'\n\nimport type QuillType from 'quill'\nimport type { QuillOptions } from 'quill'\nimport type DeltaType from 'quill-delta'\n\nimport {\n AfterViewInit,\n ChangeDetectorRef,\n Component,\n DestroyRef,\n Directive,\n ElementRef,\n EventEmitter,\n forwardRef,\n inject,\n input,\n NgZone,\n OnChanges,\n OnDestroy,\n OnInit,\n Output,\n PLATFORM_ID,\n Renderer2,\n SecurityContext,\n signal,\n SimpleChanges,\n ViewEncapsulation\n} from '@angular/core'\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop'\nimport { fromEvent, Subscription } from 'rxjs'\nimport { debounceTime, mergeMap } from 'rxjs/operators'\n\nimport { ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR, Validator } from '@angular/forms'\n\nimport { CustomModule, CustomOption, defaultModules, QuillBeforeRender, QuillModules } from 'ngx-quill/config'\n\nimport type History from 'quill/modules/history'\nimport type Toolbar from 'quill/modules/toolbar'\nimport { getFormat, raf$ } from './helpers'\nimport { QuillService } from './quill.service'\n\nexport interface Range {\n index: number\n length: number\n}\n\nexport interface ContentChange {\n content: DeltaType\n delta: DeltaType\n editor: QuillType\n html: string | null\n oldDelta: DeltaType\n source: string\n text: string\n}\n\nexport interface SelectionChange {\n editor: QuillType\n oldRange: Range | null\n range: Range | null\n source: string\n}\n\nexport interface Blur {\n editor: QuillType\n source: string\n}\n\nexport interface Focus {\n editor: QuillType\n source: string\n}\n\nexport type EditorChangeContent = ContentChange & { event: 'text-change' }\nexport type EditorChangeSelection = SelectionChange & { event: 'selection-change' }\n\n@Directive()\nexport abstract class QuillEditorBase implements AfterViewInit, ControlValueAccessor, OnChanges, OnInit, OnDestroy, Validator {\n readonly format = input<'object' | 'html' | 'text' | 'json' | undefined>(\n undefined\n )\n readonly theme = input<string | undefined>(undefined)\n readonly modules = input<QuillModules | undefined>(undefined)\n readonly debug = input<'warn' | 'log' | 'error' | false>(false)\n readonly readOnly = input<boolean | undefined>(false)\n readonly placeholder = input<string | undefined>(undefined)\n readonly maxLength = input<number | undefined>(undefined)\n readonly minLength = input<number | undefined>(undefined)\n readonly required = input(false)\n readonly formats = input<string[] | null | undefined>(undefined)\n readonly customToolbarPosition = input<'top' | 'bottom'>('top')\n readonly sanitize = input<boolean | undefined>(undefined)\n readonly beforeRender = input<QuillBeforeRender>(undefined)\n readonly styles = input<any>(null)\n readonly registry = input<QuillOptions['registry']>(\n undefined\n )\n readonly bounds = input<HTMLElement | string | undefined>(undefined)\n readonly customOptions = input<CustomOption[]>([])\n readonly customModules = input<CustomModule[]>([])\n readonly trackChanges = input<'user' | 'all' | undefined>(undefined)\n readonly classes = input<string | undefined>(undefined)\n readonly trimOnValidation = input(false)\n readonly linkPlaceholder = input<string | undefined>(undefined)\n readonly compareValues = input(false)\n readonly filterNull = input(false)\n readonly debounceTime = input<number | undefined>(undefined)\n /bin /run /sbin https://github.com/KillerCodeMonkey/ngx-quill/issues/1257 - fix null value set\n\n provide default empty value\n by default null\n\n e.g. defaultEmptyValue=\"\" - empty string\n\n <quill-editor\n defaultEmptyValue=\"\"\n formControlName=\"message\"\n ></quill-editor>\n */\n readonly defaultEmptyValue = input<any>(null)\n\n @Output() onEditorCreated = new EventEmitter<QuillType>()\n @Output() onEditorChanged = new EventEmitter<EditorChangeContent | EditorChangeSelection>()\n @Output() onContentChanged = new EventEmitter<ContentChange>()\n @Output() onSelectionChanged = new EventEmitter<SelectionChange>()\n @Output() onFocus = new EventEmitter<Focus>()\n @Output() onBlur = new EventEmitter<Blur>()\n @Output() onNativeFocus = new EventEmitter<Focus>()\n @Output() onNativeBlur = new EventEmitter<Blur>()\n\n quillEditor!: QuillType\n editorElem!: HTMLElement\n content: any\n disabled = false // used to store initial value before ViewInit\n\n readonly toolbarPosition = signal('top')\n\n onModelChange: (modelValue?: any) => void\n onModelTouched: () => void\n onValidatorChanged: () => void\n\n private subscription: Subscription | null = null\n private quillSubscription: Subscription | null = null\n\n private elementRef = inject(ElementRef)\n private document = inject(DOCUMENT)\n\n private cd = inject(ChangeDetectorRef)\n private domSanitizer = inject(DomSanitizer)\n private platformId = inject<string>(PLATFORM_ID)\n private renderer = inject(Renderer2)\n private zone = inject(NgZone)\n private service = inject(QuillService)\n private destroyRef = inject(DestroyRef)\n\n static normalizeClassNames(classes: string): string[] {\n const classList = classes.trim().split(' ')\n return classList.reduce((prev: string[], cur: string) => {\n const trimmed = cur.trim()\n if (trimmed) {\n prev.push(trimmed)\n }\n\n return prev\n }, [])\n }\n\n valueGetter = input((quillEditor: QuillType): string | any => {\n let html: string | null = quillEditor.getSemanticHTML()\n if (this.isEmptyValue(html)) {\n html = this.defaultEmptyValue()\n }\n let modelValue: string | DeltaType | null = html\n const format = getFormat(this.format(), this.service.config.format)\n\n if (format === 'text') {\n modelValue = quillEditor.getText()\n } else if (format === 'object') {\n modelValue = quillEditor.getContents()\n } else if (format === 'json') {\n try {\n modelValue = JSON.stringify(quillEditor.getContents())\n } catch {\n modelValue = quillEditor.getText()\n }\n }\n\n return modelValue\n })\n\n valueSetter = input((quillEditor: QuillType, value: any): any => {\n const format = getFormat(this.format(), this.service.config.format)\n if (format === 'html') {\n const sanitize = [true, false].includes(this.sanitize()) ? this.sanitize() : (this.service.config.sanitize || false)\n if (sanitize) {\n value = this.domSanitizer.sanitize(SecurityContext.HTML, value)\n }\n return quillEditor.clipboard.convert({ html: value })\n } else if (format === 'json') {\n try {\n return JSON.parse(value)\n } catch {\n return [{ insert: value }]\n }\n }\n\n return value\n })\n\n ngOnInit() {\n this.toolbarPosition.set(this.customToolbarPosition())\n }\n\n ngAfterViewInit() {\n if (isPlatformServer(this.platformId)) {\n return\n }\n\n // The `quill-editor` component might be destroyed before the `quill` chunk is loaded and its code is executed\n // this will lead to runtime exceptions, since the code will be executed on DOM nodes that don't exist within the tree.\n\n this.quillSubscription = this.service.getQuill().pipe(\n mergeMap((Quill) => this.service.beforeRender(Quill, this.customModules(), this.beforeRender()))\n ).subscribe(Quill => {\n this.editorElem = this.elementRef.nativeElement.querySelector(\n '[quill-editor-element]'\n )\n\n const toolbarElem = this.elementRef.nativeElement.querySelector(\n '[quill-editor-toolbar]'\n )\n const modules = Object.assign({}, this.modules() || this.service.config.modules)\n\n if (toolbarElem) {\n modules.toolbar = toolbarElem\n } else if (modules.toolbar === undefined) {\n modules.toolbar = defaultModules.toolbar\n }\n\n let placeholder = this.placeholder() !== undefined ? this.placeholder() : this.service.config.placeholder\n if (placeholder === undefined) {\n placeholder = 'Insert text here ...'\n }\n\n const styles = this.styles()\n if (styles) {\n Object.keys(styles).forEach((key: string) => {\n this.renderer.setStyle(this.editorElem, key, styles[key])\n })\n }\n\n if (this.classes()) {\n this.addClasses(this.classes())\n }\n\n this.customOptions().forEach((customOption) => {\n const newCustomOption = Quill.import(customOption.import)\n newCustomOption.whitelist = customOption.whitelist\n Quill.register(newCustomOption, true)\n })\n\n let bounds = this.bounds() && this.bounds() === 'self' ? this.editorElem : this.bounds()\n if (!bounds) {\n bounds = this.service.config.bounds ? this.service.config.bounds : this.document.body\n }\n\n let debug = this.debug()\n if (!debug && debug !== false && this.service.config.debug) {\n debug = this.service.config.debug\n }\n\n let readOnly = this.readOnly()\n if (!readOnly && this.readOnly() !== false) {\n readOnly = this.service.config.readOnly !== undefined ? this.service.config.readOnly : false\n }\n\n let formats = this.formats()\n if (!formats && formats === undefined) {\n formats = this.service.config.formats ? [...this.service.config.formats] : (this.service.config.formats === null ? null : undefined)\n }\n\n this.zone.runOutsideAngular(() => {\n this.quillEditor = new Quill(this.editorElem, {\n bounds,\n debug,\n formats,\n modules,\n placeholder,\n readOnly,\n registry: this.registry(),\n theme: this.theme() || (this.service.config.theme ? this.service.config.theme : 'snow')\n })\n\n if (this.onNativeBlur.observed) {\n // https://github.com/quilljs/quill/issues/2186#issuecomment-533401328\n fromEvent(this.quillEditor.scroll.domNode, 'blur').pipe(takeUntilDestroyed(this.destroyRef)).subscribe(() => this.onNativeBlur.next({\n editor: this.quillEditor,\n source: 'dom'\n }))\n // https://github.com/quilljs/quill/issues/2186#issuecomment-803257538\n const toolbar = this.quillEditor.getModule('toolbar') as Toolbar\n if (toolbar.container) {\n fromEvent(toolbar.container, 'mousedown').pipe(takeUntilDestroyed(this.destroyRef)).subscribe(e => e.preventDefault())\n }\n }\n\n if (this.onNativeFocus.observed) {\n fromEvent(this.quillEditor.scroll.domNode, 'focus').pipe(takeUntilDestroyed(this.destroyRef)).subscribe(() => this.onNativeFocus.next({\n editor: this.quillEditor,\n source: 'dom'\n }))\n }\n\n // Set optional link placeholder, Quill has no native API for it so using workaround\n if (this.linkPlaceholder()) {\n const tooltip = (this.quillEditor as any)?.theme?.tooltip\n const input = tooltip?.root?.querySelector('input[data-link]')\n if (input?.dataset) {\n input.dataset.link = this.linkPlaceholder()\n }\n }\n })\n\n if (this.content) {\n const format = getFormat(this.format(), this.service.config.format)\n\n if (format === 'text') {\n this.quillEditor.setText(this.content, 'silent')\n } else {\n const valueSetter = this.valueSetter()\n const newValue = valueSetter(this.quillEditor, this.content)\n this.quillEditor.setContents(newValue, 'silent')\n }\n\n const history = this.quillEditor.getModule('history') as History\n history.clear()\n }\n\n // initialize disabled status based on this.disabled as default value\n this.setDisabledState()\n\n this.addQuillEventListeners()\n\n // The `requestAnimationFrame` triggers change detection. There's no sense to invoke the `requestAnimationFrame` if anyone is\n // listening to the `onEditorCreated` event inside the template, for instance `<quill-view (onEditorCreated)=\"...\">`.\n if (!this.onEditorCreated.observed && !this.onValidatorChanged) {\n return\n }\n\n // The `requestAnimationFrame` will trigger change detection and `onEditorCreated` will also call `markDirty()`\n // internally, since Angular wraps template event listeners into `listener` instruction. We're using the `requestAnimationFrame`\n // to prevent the frame drop and avoid `ExpressionChangedAfterItHasBeenCheckedError` error.\n raf$().pipe(takeUntilDestroyed(this.destroyRef)).subscribe(() => {\n if (this.onValidatorChanged) {\n this.onValidatorChanged()\n }\n this.onEditorCreated.emit(this.quillEditor)\n })\n })\n }\n\n selectionChangeHandler = (range: Range | null, oldRange: Range | null, source: string) => {\n const trackChanges = this.trackChanges() || this.service.config.trackChanges\n const shouldTriggerOnModelTouched = !range && !!this.onModelTouched && (source === 'user' || trackChanges && trackChanges === 'all')\n\n // only emit changes when there's any listener\n if (!this.onBlur.observed &&\n !this.onFocus.observed &&\n !this.onSelectionChanged.observed &&\n !shouldTriggerOnModelTouched) {\n return\n }\n\n this.zone.run(() => {\n if (range === null) {\n this.onBlur.emit({\n editor: this.quillEditor,\n source\n })\n } else if (oldRange === null) {\n this.onFocus.emit({\n editor: this.quillEditor,\n source\n })\n }\n\n this.onSelectionChanged.emit({\n editor: this.quillEditor,\n oldRange,\n range,\n source\n })\n\n if (shouldTriggerOnModelTouched) {\n this.onModelTouched()\n }\n\n this.cd.markForCheck()\n })\n }\n\n textChangeHandler = (delta: DeltaType, oldDelta: DeltaType, source: string): void => {\n // only emit changes emitted by user interactions\n const text = this.quillEditor.getText()\n const content = this.quillEditor.getContents()\n\n let html: string | null = this.quillEditor.getSemanticHTML()\n if (this.isEmptyValue(html)) {\n html = this.defaultEmptyValue()\n }\n\n const trackChanges = this.trackChanges() || this.service.config.trackChanges\n const shouldTriggerOnModelChange = (source === 'user' || trackChanges && trackChanges === 'all') && !!this.onModelChange\n\n // only emit changes when there's any listener\n if (!this.onContentChanged.observed && !shouldTriggerOnModelChange) {\n return\n }\n\n this.zone.run(() => {\n if (shouldTriggerOnModelChange) {\n const valueGetter = this.valueGetter()\n this.onModelChange(\n valueGetter(this.quillEditor)\n )\n }\n\n this.onContentChanged.emit({\n content,\n delta,\n editor: this.quillEditor,\n html,\n oldDelta,\n source,\n text\n })\n\n this.cd.markForCheck()\n })\n }\n\n editorChangeHandler = (\n event: 'text-change' | 'selection-change',\n current: any | Range | null, old: any | Range | null, source: string\n ): void => {\n // only emit changes when there's any listener\n if (!this.onEditorChanged.observed) {\n return\n }\n\n // only emit changes emitted by user interactions\n if (event === 'text-change') {\n const text = this.quillEditor.getText()\n const content = this.quillEditor.getContents()\n\n let html: string | null = this.quillEditor.getSemanticHTML()\n if (this.isEmptyValue(html)) {\n html = this.defaultEmptyValue()\n }\n\n this.zone.run(() => {\n this.onEditorChanged.emit({\n content,\n delta: current,\n editor: this.quillEditor,\n event,\n html,\n oldDelta: old,\n source,\n text\n })\n\n this.cd.markForCheck()\n })\n } else {\n this.zone.run(() => {\n this.onEditorChanged.emit({\n editor: this.quillEditor,\n event,\n oldRange: old,\n range: current,\n source\n })\n\n this.cd.markForCheck()\n })\n }\n }\n\n ngOnDestroy() {\n this.dispose()\n\n this.quillSubscription?.unsubscribe()\n this.quillSubscription = null\n }\n\n ngOnChanges(changes: SimpleChanges): void {\n if (!this.quillEditor) {\n return\n }\n if (changes.readOnly) {\n this.quillEditor.enable(!changes.readOnly.currentValue)\n }\n if (changes.placeholder) {\n this.quillEditor.root.dataset.placeholder =\n changes.placeholder.currentValue\n }\n if (changes.styles) {\n const currentStyling = changes.styles.currentValue\n const previousStyling = changes.styles.previousValue\n\n if (previousStyling) {\n Object.keys(previousStyling).forEach((key: string) => {\n this.renderer.removeStyle(this.editorElem, key)\n })\n }\n if (currentStyling) {\n Object.keys(currentStyling).forEach((key: string) => {\n this.renderer.setStyle(this.editorElem, key, this.styles()[key])\n })\n }\n }\n if (changes.classes) {\n const currentClasses = changes.classes.currentValue\n const previousClasses = changes.classes.previousValue\n\n if (previousClasses) {\n this.removeClasses(previousClasses)\n }\n\n if (currentClasses) {\n this.addClasses(currentClasses)\n }\n }\n // We'd want to re-apply event listeners if the `debounceTime` binding changes to apply the\n // `debounceTime` operator or vice-versa remove it.\n if (changes.debounceTime) {\n this.addQuillEventListeners()\n }\n }\n\n addClasses(classList: string): void {\n QuillEditorBase.normalizeClassNames(classList).forEach((c: string) => {\n this.renderer.addClass(this.editorElem, c)\n })\n }\n\n removeClasses(classList: string): void {\n QuillEditorBase.normalizeClassNames(classList).forEach((c: string) => {\n this.renderer.removeClass(this.editorElem, c)\n })\n }\n\n writeValue(currentValue: any) {\n\n // optional fix for https://github.com/angular/angular/issues/14988\n if (this.filterNull() && currentValue === null) {\n return\n }\n\n this.content = currentValue\n\n if (!this.quillEditor) {\n return\n }\n\n const format = getFormat(this.format(), this.service.config.format)\n const valueSetter = this.valueSetter()\n const newValue = valueSetter(this.quillEditor, currentValue)\n\n if (this.compareValues()) {\n const currentEditorValue = this.quillEditor.getContents()\n if (JSON.stringify(currentEditorValue) === JSON.stringify(newValue)) {\n return\n }\n }\n\n if (currentValue) {\n if (format === 'text') {\n this.quillEditor.setText(currentValue)\n } else {\n this.quillEditor.setContents(newValue)\n }\n return\n }\n this.quillEditor.setText('')\n\n }\n\n setDisabledState(isDisabled: boolean = this.disabled): void {\n // store initial value to set appropriate disabled status after ViewInit\n this.disabled = isDisabled\n if (this.quillEditor) {\n if (isDisabled) {\n this.quillEditor.disable()\n this.renderer.setAttribute(this.elementRef.nativeElement, 'disabled', 'disabled')\n } else {\n if (!this.readOnly()) {\n this.quillEditor.enable()\n }\n this.renderer.removeAttribute(this.elementRef.nativeElement, 'disabled')\n }\n }\n }\n\n registerOnChange(fn: (modelValue: any) => void): void {\n this.onModelChange = fn\n }\n\n registerOnTouched(fn: () => void): void {\n this.onModelTouched = fn\n }\n\n registerOnValidatorChange(fn: () => void) {\n this.onValidatorChanged = fn\n }\n\n validate() {\n if (!this.quillEditor) {\n return null\n }\n\n const err: {\n minLengthError?: {\n given: number\n minLength: number\n }\n maxLengthError?: {\n given: number\n maxLength: number\n }\n requiredError?: { empty: boolean }\n } = {}\n let valid = true\n\n const text = this.quillEditor.getText()\n // trim text if wanted + handle special case that an empty editor contains a new line\n const textLength = this.trimOnValidation() ? text.trim().length : (text.length === 1 && text.trim().length === 0 ? 0 : text.length - 1)\n const deltaOperations = this.quillEditor.getContents().ops\n const onlyEmptyOperation = !!deltaOperations && deltaOperations.length === 1 && ['\\n', ''].includes(deltaOperations[0].insert?.toString())\n\n if (this.minLength() && textLength && textLength < this.minLength()) {\n err.minLengthError = {\n given: textLength,\n minLength: this.minLength()\n }\n\n valid = false\n }\n\n if (this.maxLength() && textLength > this.maxLength()) {\n err.maxLengthError = {\n given: textLength,\n maxLength: this.maxLength()\n }\n\n valid = false\n }\n\n if (this.required() && !textLength && onlyEmptyOperation) {\n err.requiredError = {\n empty: true\n }\n\n valid = false\n }\n\n return valid ? null : err\n }\n\n private addQuillEventListeners(): void {\n this.dispose()\n\n // We have to enter the `<root>` zone when adding event listeners, so `debounceTime` will spawn the\n // `AsyncAction` there w/o triggering change detections. We still re-enter the Angular's zone through\n // `zone.run` when we emit an event to the parent component.\n this.zone.runOutsideAngular(() => {\n this.subscription = new Subscription()\n\n this.subscription.add(\n // mark model as touched if editor lost focus\n fromEvent(this.quillEditor, 'selection-change').subscribe(\n ([range, oldRange, source]) => {\n this.selectionChangeHandler(range as any, oldRange as any, source)\n }\n )\n )\n\n // The `fromEvent` supports passing JQuery-style event targets, the editor has `on` and `off` methods which\n // will be invoked upon subscription and teardown.\n let textChange$ = fromEvent(this.quillEditor, 'text-change')\n let editorChange$ = fromEvent(this.quillEditor, 'editor-change')\n\n if (typeof this.debounceTime() === 'number') {\n textChange$ = textChange$.pipe(debounceTime(this.debounceTime()))\n editorChange$ = editorChange$.pipe(debounceTime(this.debounceTime()))\n }\n\n this.subscription.add(\n // update model if text changes\n textChange$.subscribe(([delta, oldDelta, source]) => {\n this.textChangeHandler(delta as any, oldDelta as any, source)\n })\n )\n\n this.subscription.add(\n // triggered if selection or text changed\n editorChange$.subscribe(([event, current, old, source]) => {\n this.editorChangeHandler(event as 'text-change' | 'selection-change', current, old, source)\n })\n )\n })\n }\n\n private dispose(): void {\n if (this.subscription !== null) {\n this.subscription.unsubscribe()\n this.subscription = null\n }\n }\n\n private isEmptyValue(html: string | null) {\n return html === '<p></p>' || html === '<div></div>' || html === '<p><br></p>' || html === '<div><br></div>'\n }\n}\n\n@Component({\n encapsulation: ViewEncapsulation.Emulated,\n providers: [\n {\n multi: true,\n provide: NG_VALUE_ACCESSOR,\n useExisting: forwardRef(() => QuillEditorComponent)\n },\n {\n multi: true,\n provide: NG_VALIDATORS,\n useExisting: forwardRef(() => QuillEditorComponent)\n }\n ],\n selector: 'quill-editor',\n template: `\n @if (toolbarPosition() !== 'top') {\n <div quill-editor-element></div>\n }\n\n <ng-content select=\"[above-quill-editor-toolbar]\"></ng-content>\n <ng-content select=\"[quill-editor-toolbar]\"></ng-content>\n <ng-content select=\"[below-quill-editor-toolbar]\"></ng-content>\n\n @if (toolbarPosition() === 'top') {\n <div quill-editor-element></div>\n }\n `,\n styles: [\n `\n :host {\n display: inline-block;\n }\n `\n ]\n})\nexport class QuillEditorComponent extends QuillEditorBase { }\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/ngx-quill/projects/ngx-quill/src/lib/quill-view-html.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/component-selector",
                "severity": 2,
                "message": "The selector should start with one of these prefixes: \"lib\" (https://angular.dev/style-guide#style-02-07)",
                "line": 17,
                "column": 13,
                "nodeType": "Literal",
                "messageId": "prefixFailure",
                "endLine": 17,
                "endColumn": 30
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { DomSanitizer, SafeHtml } from '@angular/platform-browser'\nimport { QuillService } from './quill.service'\n\nimport { NgClass } from '@angular/common'\nimport {\n Component,\n OnChanges,\n SimpleChanges,\n ViewEncapsulation,\n input,\n signal\n} from '@angular/core'\n\n@Component({\n imports: [NgClass],\n encapsulation: ViewEncapsulation.None,\n selector: 'quill-view-html',\n styles: [`\n.ql-container.ngx-quill-view-html {\n border: 0;\n}\n`],\n template: `\n <div class=\"ql-container\" [ngClass]=\"themeClass()\">\n <div class=\"ql-editor\" [innerHTML]=\"innerHTML()\">\n </div>\n </div>\n`\n})\nexport class QuillViewHTMLComponent implements OnChanges {\n readonly content = input('')\n readonly theme = input<string | undefined>(undefined)\n readonly sanitize = input<boolean | undefined>(undefined)\n\n readonly innerHTML = signal<SafeHtml>('')\n readonly themeClass = signal('ql-snow')\n\n constructor(\n private sanitizer: DomSanitizer,\n protected service: QuillService\n ) {}\n\n ngOnChanges(changes: SimpleChanges) {\n if (changes.theme) {\n const theme = changes.theme.currentValue || (this.service.config.theme ? this.service.config.theme : 'snow')\n this.themeClass.set(`ql-${theme} ngx-quill-view-html`)\n } else if (!this.theme()) {\n const theme = this.service.config.theme ? this.service.config.theme : 'snow'\n this.themeClass.set(`ql-${theme} ngx-quill-view-html`)\n }\n if (changes.content) {\n const content = changes.content.currentValue\n const sanitize = [true, false].includes(this.sanitize()) ? this.sanitize() : (this.service.config.sanitize || false)\n const innerHTML = sanitize ? content : this.sanitizer.bypassSecurityTrustHtml(content)\n this.innerHTML.set(innerHTML)\n }\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/ngx-quill/projects/ngx-quill/src/lib/quill-view.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/component-selector",
                "severity": 2,
                "message": "The selector should start with one of these prefixes: \"lib\" (https://angular.dev/style-guide#style-02-07)",
                "line": 35,
                "column": 13,
                "nodeType": "Literal",
                "messageId": "prefixFailure",
                "endLine": 35,
                "endColumn": 25
              },
              {
                "ruleId": "@angular-eslint/no-output-on-prefix",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named \"on\", nor prefixed with it (https://angular.dev/style-guide#style-05-16)",
                "line": 60,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "noOutputOnPrefix",
                "endLine": 60,
                "endColumn": 28
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { isPlatformServer } from '@angular/common'\nimport type QuillType from 'quill'\n\nimport {\n AfterViewInit,\n Component,\n DestroyRef,\n ElementRef,\n EventEmitter,\n Inject,\n NgZone,\n OnChanges,\n OnDestroy,\n Output,\n PLATFORM_ID,\n Renderer2,\n SecurityContext,\n SimpleChanges,\n ViewEncapsulation,\n inject,\n input\n} from '@angular/core'\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop'\nimport { DomSanitizer } from '@angular/platform-browser'\nimport type { Subscription } from 'rxjs'\nimport { mergeMap } from 'rxjs/operators'\n\nimport { CustomModule, CustomOption, QuillBeforeRender, QuillModules } from 'ngx-quill/config'\n\nimport { getFormat, raf$ } from './helpers'\nimport { QuillService } from './quill.service'\n\n@Component({\n encapsulation: ViewEncapsulation.None,\n selector: 'quill-view',\n styles: [`\n.ql-container.ngx-quill-view {\n border: 0;\n}\n`],\n template: `\n <div quill-view-element></div>\n`,\n})\nexport class QuillViewComponent implements AfterViewInit, OnChanges, OnDestroy {\n readonly format = input<'object' | 'html' | 'text' | 'json' | undefined>(\n undefined\n )\n readonly theme = input<string | undefined>(undefined)\n readonly modules = input<QuillModules | undefined>(undefined)\n readonly debug = input<'warn' | 'log' | 'error' | false>(false)\n readonly formats = input<string[] | null | undefined>(undefined)\n readonly sanitize = input<boolean | undefined>(undefined)\n readonly beforeRender = input<QuillBeforeRender>()\n readonly strict = input(true)\n readonly content = input<any>()\n readonly customModules = input<CustomModule[]>([])\n readonly customOptions = input<CustomOption[]>([])\n\n @Output() onEditorCreated = new EventEmitter<any>()\n\n quillEditor!: QuillType\n editorElem!: HTMLElement\n\n private quillSubscription: Subscription | null = null\n\n private destroyRef = inject(DestroyRef)\n\n constructor(\n public elementRef: ElementRef,\n protected renderer: Renderer2,\n protected zone: NgZone,\n protected service: QuillService,\n protected domSanitizer: DomSanitizer,\n @Inject(PLATFORM_ID) protected platformId: any,\n ) { }\n\n valueSetter = (quillEditor: QuillType, value: any): any => {\n const format = getFormat(this.format(), this.service.config.format)\n let content = value\n if (format === 'text') {\n quillEditor.setText(content)\n } else {\n if (format === 'html') {\n const sanitize = [true, false].includes(this.sanitize()) ? this.sanitize() : (this.service.config.sanitize || false)\n if (sanitize) {\n value = this.domSanitizer.sanitize(SecurityContext.HTML, value)\n }\n content = quillEditor.clipboard.convert({ html: value })\n } else if (format === 'json') {\n try {\n content = JSON.parse(value)\n } catch {\n content = [{ insert: value }]\n }\n }\n quillEditor.setContents(content)\n }\n }\n\n ngOnChanges(changes: SimpleChanges) {\n if (!this.quillEditor) {\n return\n }\n if (changes.content) {\n this.valueSetter(this.quillEditor, changes.content.currentValue)\n }\n }\n\n ngAfterViewInit() {\n if (isPlatformServer(this.platformId)) {\n return\n }\n\n this.quillSubscription = this.service.getQuill().pipe(\n mergeMap((Quill) => this.service.beforeRender(Quill, this.customModules(), this.beforeRender()))\n ).subscribe(Quill => {\n const modules = Object.assign({}, this.modules() || this.service.config.modules)\n modules.toolbar = false\n\n this.customOptions().forEach((customOption) => {\n const newCustomOption = Quill.import(customOption.import)\n newCustomOption.whitelist = customOption.whitelist\n Quill.register(newCustomOption, true)\n })\n\n let debug = this.debug()\n if (!debug && debug !== false && this.service.config.debug) {\n debug = this.service.config.debug\n }\n\n let formats = this.formats()\n if (!formats && formats === undefined) {\n formats = this.service.config.formats ? [...this.service.config.formats] : (this.service.config.formats === null ? null : undefined)\n }\n const theme = this.theme() || (this.service.config.theme ? this.service.config.theme : 'snow')\n\n this.editorElem = this.elementRef.nativeElement.querySelector(\n '[quill-view-element]'\n ) as HTMLElement\n\n this.zone.runOutsideAngular(() => {\n this.quillEditor = new Quill(this.editorElem, {\n debug,\n formats,\n modules,\n readOnly: true,\n strict: this.strict(),\n theme\n })\n })\n\n this.renderer.addClass(this.editorElem, 'ngx-quill-view')\n\n if (this.content()) {\n this.valueSetter(this.quillEditor, this.content())\n }\n\n // The `requestAnimationFrame` triggers change detection. There's no sense to invoke the `requestAnimationFrame` if anyone is\n // listening to the `onEditorCreated` event inside the template, for instance `<quill-view (onEditorCreated)=\"...\">`.\n if (!this.onEditorCreated.observed) {\n return\n }\n\n // The `requestAnimationFrame` will trigger change detection and `onEditorCreated` will also call `markDirty()`\n // internally, since Angular wraps template event listeners into `listener` instruction. We're using the `requestAnimationFrame`\n // to prevent the frame drop and avoid `ExpressionChangedAfterItHasBeenCheckedError` error.\n raf$().pipe(takeUntilDestroyed(this.destroyRef)).subscribe(() => {\n this.onEditorCreated.emit(this.quillEditor)\n })\n })\n }\n\n ngOnDestroy(): void {\n this.quillSubscription?.unsubscribe()\n this.quillSubscription = null\n }\n}\n",
            "usedDeprecatedRules": []
          }
        ],
        "all": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/ngx-quill/projects/ngx-quill/src/lib/quill-editor.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/no-output-on-prefix",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named \"on\", nor prefixed with it (https://angular.dev/style-guide#style-05-16)",
                "line": 125,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "noOutputOnPrefix",
                "endLine": 125,
                "endColumn": 28
              },
              {
                "ruleId": "@angular-eslint/no-output-on-prefix",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named \"on\", nor prefixed with it (https://angular.dev/style-guide#style-05-16)",
                "line": 126,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "noOutputOnPrefix",
                "endLine": 126,
                "endColumn": 28
              },
              {
                "ruleId": "@angular-eslint/no-output-on-prefix",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named \"on\", nor prefixed with it (https://angular.dev/style-guide#style-05-16)",
                "line": 127,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "noOutputOnPrefix",
                "endLine": 127,
                "endColumn": 29
              },
              {
                "ruleId": "@angular-eslint/no-output-on-prefix",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named \"on\", nor prefixed with it (https://angular.dev/style-guide#style-05-16)",
                "line": 128,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "noOutputOnPrefix",
                "endLine": 128,
                "endColumn": 31
              },
              {
                "ruleId": "@angular-eslint/no-output-on-prefix",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named \"on\", nor prefixed with it (https://angular.dev/style-guide#style-05-16)",
                "line": 129,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "noOutputOnPrefix",
                "endLine": 129,
                "endColumn": 20
              },
              {
                "ruleId": "@angular-eslint/no-output-on-prefix",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named \"on\", nor prefixed with it (https://angular.dev/style-guide#style-05-16)",
                "line": 130,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "noOutputOnPrefix",
                "endLine": 130,
                "endColumn": 19
              },
              {
                "ruleId": "@angular-eslint/no-output-on-prefix",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named \"on\", nor prefixed with it (https://angular.dev/style-guide#style-05-16)",
                "line": 131,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "noOutputOnPrefix",
                "endLine": 131,
                "endColumn": 26
              },
              {
                "ruleId": "@angular-eslint/no-output-on-prefix",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named \"on\", nor prefixed with it (https://angular.dev/style-guide#style-05-16)",
                "line": 132,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "noOutputOnPrefix",
                "endLine": 132,
                "endColumn": 25
              },
              {
                "ruleId": "@angular-eslint/component-selector",
                "severity": 2,
                "message": "The selector should start with one of these prefixes: \"lib\" (https://angular.dev/style-guide#style-02-07)",
                "line": 744,
                "column": 13,
                "nodeType": "Literal",
                "messageId": "prefixFailure",
                "endLine": 744,
                "endColumn": 27
              }
            ],
            "suppressedMessages": [],
            "errorCount": 9,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { DOCUMENT, isPlatformServer } from '@angular/common'\nimport { DomSanitizer } from '@angular/platform-browser'\n\nimport type QuillType from 'quill'\nimport type { QuillOptions } from 'quill'\nimport type DeltaType from 'quill-delta'\n\nimport {\n AfterViewInit,\n ChangeDetectorRef,\n Component,\n DestroyRef,\n Directive,\n ElementRef,\n EventEmitter,\n forwardRef,\n inject,\n input,\n NgZone,\n OnChanges,\n OnDestroy,\n OnInit,\n Output,\n PLATFORM_ID,\n Renderer2,\n SecurityContext,\n signal,\n SimpleChanges,\n ViewEncapsulation\n} from '@angular/core'\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop'\nimport { fromEvent, Subscription } from 'rxjs'\nimport { debounceTime, mergeMap } from 'rxjs/operators'\n\nimport { ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR, Validator } from '@angular/forms'\n\nimport { CustomModule, CustomOption, defaultModules, QuillBeforeRender, QuillModules } from 'ngx-quill/config'\n\nimport type History from 'quill/modules/history'\nimport type Toolbar from 'quill/modules/toolbar'\nimport { getFormat, raf$ } from './helpers'\nimport { QuillService } from './quill.service'\n\nexport interface Range {\n index: number\n length: number\n}\n\nexport interface ContentChange {\n content: DeltaType\n delta: DeltaType\n editor: QuillType\n html: string | null\n oldDelta: DeltaType\n source: string\n text: string\n}\n\nexport interface SelectionChange {\n editor: QuillType\n oldRange: Range | null\n range: Range | null\n source: string\n}\n\nexport interface Blur {\n editor: QuillType\n source: string\n}\n\nexport interface Focus {\n editor: QuillType\n source: string\n}\n\nexport type EditorChangeContent = ContentChange & { event: 'text-change' }\nexport type EditorChangeSelection = SelectionChange & { event: 'selection-change' }\n\n@Directive()\nexport abstract class QuillEditorBase implements AfterViewInit, ControlValueAccessor, OnChanges, OnInit, OnDestroy, Validator {\n readonly format = input<'object' | 'html' | 'text' | 'json' | undefined>(\n undefined\n )\n readonly theme = input<string | undefined>(undefined)\n readonly modules = input<QuillModules | undefined>(undefined)\n readonly debug = input<'warn' | 'log' | 'error' | false>(false)\n readonly readOnly = input<boolean | undefined>(false)\n readonly placeholder = input<string | undefined>(undefined)\n readonly maxLength = input<number | undefined>(undefined)\n readonly minLength = input<number | undefined>(undefined)\n readonly required = input(false)\n readonly formats = input<string[] | null | undefined>(undefined)\n readonly customToolbarPosition = input<'top' | 'bottom'>('top')\n readonly sanitize = input<boolean | undefined>(undefined)\n readonly beforeRender = input<QuillBeforeRender>(undefined)\n readonly styles = input<any>(null)\n readonly registry = input<QuillOptions['registry']>(\n undefined\n )\n readonly bounds = input<HTMLElement | string | undefined>(undefined)\n readonly customOptions = input<CustomOption[]>([])\n readonly customModules = input<CustomModule[]>([])\n readonly trackChanges = input<'user' | 'all' | undefined>(undefined)\n readonly classes = input<string | undefined>(undefined)\n readonly trimOnValidation = input(false)\n readonly linkPlaceholder = input<string | undefined>(undefined)\n readonly compareValues = input(false)\n readonly filterNull = input(false)\n readonly debounceTime = input<number | undefined>(undefined)\n /bin /run /sbin https://github.com/KillerCodeMonkey/ngx-quill/issues/1257 - fix null value set\n\n provide default empty value\n by default null\n\n e.g. defaultEmptyValue=\"\" - empty string\n\n <quill-editor\n defaultEmptyValue=\"\"\n formControlName=\"message\"\n ></quill-editor>\n */\n readonly defaultEmptyValue = input<any>(null)\n\n @Output() onEditorCreated = new EventEmitter<QuillType>()\n @Output() onEditorChanged = new EventEmitter<EditorChangeContent | EditorChangeSelection>()\n @Output() onContentChanged = new EventEmitter<ContentChange>()\n @Output() onSelectionChanged = new EventEmitter<SelectionChange>()\n @Output() onFocus = new EventEmitter<Focus>()\n @Output() onBlur = new EventEmitter<Blur>()\n @Output() onNativeFocus = new EventEmitter<Focus>()\n @Output() onNativeBlur = new EventEmitter<Blur>()\n\n quillEditor!: QuillType\n editorElem!: HTMLElement\n content: any\n disabled = false // used to store initial value before ViewInit\n\n readonly toolbarPosition = signal('top')\n\n onModelChange: (modelValue?: any) => void\n onModelTouched: () => void\n onValidatorChanged: () => void\n\n private subscription: Subscription | null = null\n private quillSubscription: Subscription | null = null\n\n private elementRef = inject(ElementRef)\n private document = inject(DOCUMENT)\n\n private cd = inject(ChangeDetectorRef)\n private domSanitizer = inject(DomSanitizer)\n private platformId = inject<string>(PLATFORM_ID)\n private renderer = inject(Renderer2)\n private zone = inject(NgZone)\n private service = inject(QuillService)\n private destroyRef = inject(DestroyRef)\n\n static normalizeClassNames(classes: string): string[] {\n const classList = classes.trim().split(' ')\n return classList.reduce((prev: string[], cur: string) => {\n const trimmed = cur.trim()\n if (trimmed) {\n prev.push(trimmed)\n }\n\n return prev\n }, [])\n }\n\n valueGetter = input((quillEditor: QuillType): string | any => {\n let html: string | null = quillEditor.getSemanticHTML()\n if (this.isEmptyValue(html)) {\n html = this.defaultEmptyValue()\n }\n let modelValue: string | DeltaType | null = html\n const format = getFormat(this.format(), this.service.config.format)\n\n if (format === 'text') {\n modelValue = quillEditor.getText()\n } else if (format === 'object') {\n modelValue = quillEditor.getContents()\n } else if (format === 'json') {\n try {\n modelValue = JSON.stringify(quillEditor.getContents())\n } catch {\n modelValue = quillEditor.getText()\n }\n }\n\n return modelValue\n })\n\n valueSetter = input((quillEditor: QuillType, value: any): any => {\n const format = getFormat(this.format(), this.service.config.format)\n if (format === 'html') {\n const sanitize = [true, false].includes(this.sanitize()) ? this.sanitize() : (this.service.config.sanitize || false)\n if (sanitize) {\n value = this.domSanitizer.sanitize(SecurityContext.HTML, value)\n }\n return quillEditor.clipboard.convert({ html: value })\n } else if (format === 'json') {\n try {\n return JSON.parse(value)\n } catch {\n return [{ insert: value }]\n }\n }\n\n return value\n })\n\n ngOnInit() {\n this.toolbarPosition.set(this.customToolbarPosition())\n }\n\n ngAfterViewInit() {\n if (isPlatformServer(this.platformId)) {\n return\n }\n\n // The `quill-editor` component might be destroyed before the `quill` chunk is loaded and its code is executed\n // this will lead to runtime exceptions, since the code will be executed on DOM nodes that don't exist within the tree.\n\n this.quillSubscription = this.service.getQuill().pipe(\n mergeMap((Quill) => this.service.beforeRender(Quill, this.customModules(), this.beforeRender()))\n ).subscribe(Quill => {\n this.editorElem = this.elementRef.nativeElement.querySelector(\n '[quill-editor-element]'\n )\n\n const toolbarElem = this.elementRef.nativeElement.querySelector(\n '[quill-editor-toolbar]'\n )\n const modules = Object.assign({}, this.modules() || this.service.config.modules)\n\n if (toolbarElem) {\n modules.toolbar = toolbarElem\n } else if (modules.toolbar === undefined) {\n modules.toolbar = defaultModules.toolbar\n }\n\n let placeholder = this.placeholder() !== undefined ? this.placeholder() : this.service.config.placeholder\n if (placeholder === undefined) {\n placeholder = 'Insert text here ...'\n }\n\n const styles = this.styles()\n if (styles) {\n Object.keys(styles).forEach((key: string) => {\n this.renderer.setStyle(this.editorElem, key, styles[key])\n })\n }\n\n if (this.classes()) {\n this.addClasses(this.classes())\n }\n\n this.customOptions().forEach((customOption) => {\n const newCustomOption = Quill.import(customOption.import)\n newCustomOption.whitelist = customOption.whitelist\n Quill.register(newCustomOption, true)\n })\n\n let bounds = this.bounds() && this.bounds() === 'self' ? this.editorElem : this.bounds()\n if (!bounds) {\n bounds = this.service.config.bounds ? this.service.config.bounds : this.document.body\n }\n\n let debug = this.debug()\n if (!debug && debug !== false && this.service.config.debug) {\n debug = this.service.config.debug\n }\n\n let readOnly = this.readOnly()\n if (!readOnly && this.readOnly() !== false) {\n readOnly = this.service.config.readOnly !== undefined ? this.service.config.readOnly : false\n }\n\n let formats = this.formats()\n if (!formats && formats === undefined) {\n formats = this.service.config.formats ? [...this.service.config.formats] : (this.service.config.formats === null ? null : undefined)\n }\n\n this.zone.runOutsideAngular(() => {\n this.quillEditor = new Quill(this.editorElem, {\n bounds,\n debug,\n formats,\n modules,\n placeholder,\n readOnly,\n registry: this.registry(),\n theme: this.theme() || (this.service.config.theme ? this.service.config.theme : 'snow')\n })\n\n if (this.onNativeBlur.observed) {\n // https://github.com/quilljs/quill/issues/2186#issuecomment-533401328\n fromEvent(this.quillEditor.scroll.domNode, 'blur').pipe(takeUntilDestroyed(this.destroyRef)).subscribe(() => this.onNativeBlur.next({\n editor: this.quillEditor,\n source: 'dom'\n }))\n // https://github.com/quilljs/quill/issues/2186#issuecomment-803257538\n const toolbar = this.quillEditor.getModule('toolbar') as Toolbar\n if (toolbar.container) {\n fromEvent(toolbar.container, 'mousedown').pipe(takeUntilDestroyed(this.destroyRef)).subscribe(e => e.preventDefault())\n }\n }\n\n if (this.onNativeFocus.observed) {\n fromEvent(this.quillEditor.scroll.domNode, 'focus').pipe(takeUntilDestroyed(this.destroyRef)).subscribe(() => this.onNativeFocus.next({\n editor: this.quillEditor,\n source: 'dom'\n }))\n }\n\n // Set optional link placeholder, Quill has no native API for it so using workaround\n if (this.linkPlaceholder()) {\n const tooltip = (this.quillEditor as any)?.theme?.tooltip\n const input = tooltip?.root?.querySelector('input[data-link]')\n if (input?.dataset) {\n input.dataset.link = this.linkPlaceholder()\n }\n }\n })\n\n if (this.content) {\n const format = getFormat(this.format(), this.service.config.format)\n\n if (format === 'text') {\n this.quillEditor.setText(this.content, 'silent')\n } else {\n const valueSetter = this.valueSetter()\n const newValue = valueSetter(this.quillEditor, this.content)\n this.quillEditor.setContents(newValue, 'silent')\n }\n\n const history = this.quillEditor.getModule('history') as History\n history.clear()\n }\n\n // initialize disabled status based on this.disabled as default value\n this.setDisabledState()\n\n this.addQuillEventListeners()\n\n // The `requestAnimationFrame` triggers change detection. There's no sense to invoke the `requestAnimationFrame` if anyone is\n // listening to the `onEditorCreated` event inside the template, for instance `<quill-view (onEditorCreated)=\"...\">`.\n if (!this.onEditorCreated.observed && !this.onValidatorChanged) {\n return\n }\n\n // The `requestAnimationFrame` will trigger change detection and `onEditorCreated` will also call `markDirty()`\n // internally, since Angular wraps template event listeners into `listener` instruction. We're using the `requestAnimationFrame`\n // to prevent the frame drop and avoid `ExpressionChangedAfterItHasBeenCheckedError` error.\n raf$().pipe(takeUntilDestroyed(this.destroyRef)).subscribe(() => {\n if (this.onValidatorChanged) {\n this.onValidatorChanged()\n }\n this.onEditorCreated.emit(this.quillEditor)\n })\n })\n }\n\n selectionChangeHandler = (range: Range | null, oldRange: Range | null, source: string) => {\n const trackChanges = this.trackChanges() || this.service.config.trackChanges\n const shouldTriggerOnModelTouched = !range && !!this.onModelTouched && (source === 'user' || trackChanges && trackChanges === 'all')\n\n // only emit changes when there's any listener\n if (!this.onBlur.observed &&\n !this.onFocus.observed &&\n !this.onSelectionChanged.observed &&\n !shouldTriggerOnModelTouched) {\n return\n }\n\n this.zone.run(() => {\n if (range === null) {\n this.onBlur.emit({\n editor: this.quillEditor,\n source\n })\n } else if (oldRange === null) {\n this.onFocus.emit({\n editor: this.quillEditor,\n source\n })\n }\n\n this.onSelectionChanged.emit({\n editor: this.quillEditor,\n oldRange,\n range,\n source\n })\n\n if (shouldTriggerOnModelTouched) {\n this.onModelTouched()\n }\n\n this.cd.markForCheck()\n })\n }\n\n textChangeHandler = (delta: DeltaType, oldDelta: DeltaType, source: string): void => {\n // only emit changes emitted by user interactions\n const text = this.quillEditor.getText()\n const content = this.quillEditor.getContents()\n\n let html: string | null = this.quillEditor.getSemanticHTML()\n if (this.isEmptyValue(html)) {\n html = this.defaultEmptyValue()\n }\n\n const trackChanges = this.trackChanges() || this.service.config.trackChanges\n const shouldTriggerOnModelChange = (source === 'user' || trackChanges && trackChanges === 'all') && !!this.onModelChange\n\n // only emit changes when there's any listener\n if (!this.onContentChanged.observed && !shouldTriggerOnModelChange) {\n return\n }\n\n this.zone.run(() => {\n if (shouldTriggerOnModelChange) {\n const valueGetter = this.valueGetter()\n this.onModelChange(\n valueGetter(this.quillEditor)\n )\n }\n\n this.onContentChanged.emit({\n content,\n delta,\n editor: this.quillEditor,\n html,\n oldDelta,\n source,\n text\n })\n\n this.cd.markForCheck()\n })\n }\n\n editorChangeHandler = (\n event: 'text-change' | 'selection-change',\n current: any | Range | null, old: any | Range | null, source: string\n ): void => {\n // only emit changes when there's any listener\n if (!this.onEditorChanged.observed) {\n return\n }\n\n // only emit changes emitted by user interactions\n if (event === 'text-change') {\n const text = this.quillEditor.getText()\n const content = this.quillEditor.getContents()\n\n let html: string | null = this.quillEditor.getSemanticHTML()\n if (this.isEmptyValue(html)) {\n html = this.defaultEmptyValue()\n }\n\n this.zone.run(() => {\n this.onEditorChanged.emit({\n content,\n delta: current,\n editor: this.quillEditor,\n event,\n html,\n oldDelta: old,\n source,\n text\n })\n\n this.cd.markForCheck()\n })\n } else {\n this.zone.run(() => {\n this.onEditorChanged.emit({\n editor: this.quillEditor,\n event,\n oldRange: old,\n range: current,\n source\n })\n\n this.cd.markForCheck()\n })\n }\n }\n\n ngOnDestroy() {\n this.dispose()\n\n this.quillSubscription?.unsubscribe()\n this.quillSubscription = null\n }\n\n ngOnChanges(changes: SimpleChanges): void {\n if (!this.quillEditor) {\n return\n }\n if (changes.readOnly) {\n this.quillEditor.enable(!changes.readOnly.currentValue)\n }\n if (changes.placeholder) {\n this.quillEditor.root.dataset.placeholder =\n changes.placeholder.currentValue\n }\n if (changes.styles) {\n const currentStyling = changes.styles.currentValue\n const previousStyling = changes.styles.previousValue\n\n if (previousStyling) {\n Object.keys(previousStyling).forEach((key: string) => {\n this.renderer.removeStyle(this.editorElem, key)\n })\n }\n if (currentStyling) {\n Object.keys(currentStyling).forEach((key: string) => {\n this.renderer.setStyle(this.editorElem, key, this.styles()[key])\n })\n }\n }\n if (changes.classes) {\n const currentClasses = changes.classes.currentValue\n const previousClasses = changes.classes.previousValue\n\n if (previousClasses) {\n this.removeClasses(previousClasses)\n }\n\n if (currentClasses) {\n this.addClasses(currentClasses)\n }\n }\n // We'd want to re-apply event listeners if the `debounceTime` binding changes to apply the\n // `debounceTime` operator or vice-versa remove it.\n if (changes.debounceTime) {\n this.addQuillEventListeners()\n }\n }\n\n addClasses(classList: string): void {\n QuillEditorBase.normalizeClassNames(classList).forEach((c: string) => {\n this.renderer.addClass(this.editorElem, c)\n })\n }\n\n removeClasses(classList: string): void {\n QuillEditorBase.normalizeClassNames(classList).forEach((c: string) => {\n this.renderer.removeClass(this.editorElem, c)\n })\n }\n\n writeValue(currentValue: any) {\n\n // optional fix for https://github.com/angular/angular/issues/14988\n if (this.filterNull() && currentValue === null) {\n return\n }\n\n this.content = currentValue\n\n if (!this.quillEditor) {\n return\n }\n\n const format = getFormat(this.format(), this.service.config.format)\n const valueSetter = this.valueSetter()\n const newValue = valueSetter(this.quillEditor, currentValue)\n\n if (this.compareValues()) {\n const currentEditorValue = this.quillEditor.getContents()\n if (JSON.stringify(currentEditorValue) === JSON.stringify(newValue)) {\n return\n }\n }\n\n if (currentValue) {\n if (format === 'text') {\n this.quillEditor.setText(currentValue)\n } else {\n this.quillEditor.setContents(newValue)\n }\n return\n }\n this.quillEditor.setText('')\n\n }\n\n setDisabledState(isDisabled: boolean = this.disabled): void {\n // store initial value to set appropriate disabled status after ViewInit\n this.disabled = isDisabled\n if (this.quillEditor) {\n if (isDisabled) {\n this.quillEditor.disable()\n this.renderer.setAttribute(this.elementRef.nativeElement, 'disabled', 'disabled')\n } else {\n if (!this.readOnly()) {\n this.quillEditor.enable()\n }\n this.renderer.removeAttribute(this.elementRef.nativeElement, 'disabled')\n }\n }\n }\n\n registerOnChange(fn: (modelValue: any) => void): void {\n this.onModelChange = fn\n }\n\n registerOnTouched(fn: () => void): void {\n this.onModelTouched = fn\n }\n\n registerOnValidatorChange(fn: () => void) {\n this.onValidatorChanged = fn\n }\n\n validate() {\n if (!this.quillEditor) {\n return null\n }\n\n const err: {\n minLengthError?: {\n given: number\n minLength: number\n }\n maxLengthError?: {\n given: number\n maxLength: number\n }\n requiredError?: { empty: boolean }\n } = {}\n let valid = true\n\n const text = this.quillEditor.getText()\n // trim text if wanted + handle special case that an empty editor contains a new line\n const textLength = this.trimOnValidation() ? text.trim().length : (text.length === 1 && text.trim().length === 0 ? 0 : text.length - 1)\n const deltaOperations = this.quillEditor.getContents().ops\n const onlyEmptyOperation = !!deltaOperations && deltaOperations.length === 1 && ['\\n', ''].includes(deltaOperations[0].insert?.toString())\n\n if (this.minLength() && textLength && textLength < this.minLength()) {\n err.minLengthError = {\n given: textLength,\n minLength: this.minLength()\n }\n\n valid = false\n }\n\n if (this.maxLength() && textLength > this.maxLength()) {\n err.maxLengthError = {\n given: textLength,\n maxLength: this.maxLength()\n }\n\n valid = false\n }\n\n if (this.required() && !textLength && onlyEmptyOperation) {\n err.requiredError = {\n empty: true\n }\n\n valid = false\n }\n\n return valid ? null : err\n }\n\n private addQuillEventListeners(): void {\n this.dispose()\n\n // We have to enter the `<root>` zone when adding event listeners, so `debounceTime` will spawn the\n // `AsyncAction` there w/o triggering change detections. We still re-enter the Angular's zone through\n // `zone.run` when we emit an event to the parent component.\n this.zone.runOutsideAngular(() => {\n this.subscription = new Subscription()\n\n this.subscription.add(\n // mark model as touched if editor lost focus\n fromEvent(this.quillEditor, 'selection-change').subscribe(\n ([range, oldRange, source]) => {\n this.selectionChangeHandler(range as any, oldRange as any, source)\n }\n )\n )\n\n // The `fromEvent` supports passing JQuery-style event targets, the editor has `on` and `off` methods which\n // will be invoked upon subscription and teardown.\n let textChange$ = fromEvent(this.quillEditor, 'text-change')\n let editorChange$ = fromEvent(this.quillEditor, 'editor-change')\n\n if (typeof this.debounceTime() === 'number') {\n textChange$ = textChange$.pipe(debounceTime(this.debounceTime()))\n editorChange$ = editorChange$.pipe(debounceTime(this.debounceTime()))\n }\n\n this.subscription.add(\n // update model if text changes\n textChange$.subscribe(([delta, oldDelta, source]) => {\n this.textChangeHandler(delta as any, oldDelta as any, source)\n })\n )\n\n this.subscription.add(\n // triggered if selection or text changed\n editorChange$.subscribe(([event, current, old, source]) => {\n this.editorChangeHandler(event as 'text-change' | 'selection-change', current, old, source)\n })\n )\n })\n }\n\n private dispose(): void {\n if (this.subscription !== null) {\n this.subscription.unsubscribe()\n this.subscription = null\n }\n }\n\n private isEmptyValue(html: string | null) {\n return html === '<p></p>' || html === '<div></div>' || html === '<p><br></p>' || html === '<div><br></div>'\n }\n}\n\n@Component({\n encapsulation: ViewEncapsulation.Emulated,\n providers: [\n {\n multi: true,\n provide: NG_VALUE_ACCESSOR,\n useExisting: forwardRef(() => QuillEditorComponent)\n },\n {\n multi: true,\n provide: NG_VALIDATORS,\n useExisting: forwardRef(() => QuillEditorComponent)\n }\n ],\n selector: 'quill-editor',\n template: `\n @if (toolbarPosition() !== 'top') {\n <div quill-editor-element></div>\n }\n\n <ng-content select=\"[above-quill-editor-toolbar]\"></ng-content>\n <ng-content select=\"[quill-editor-toolbar]\"></ng-content>\n <ng-content select=\"[below-quill-editor-toolbar]\"></ng-content>\n\n @if (toolbarPosition() === 'top') {\n <div quill-editor-element></div>\n }\n `,\n styles: [\n `\n :host {\n display: inline-block;\n }\n `\n ]\n})\nexport class QuillEditorComponent extends QuillEditorBase { }\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/ngx-quill/projects/ngx-quill/src/lib/quill-view-html.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/component-selector",
                "severity": 2,
                "message": "The selector should start with one of these prefixes: \"lib\" (https://angular.dev/style-guide#style-02-07)",
                "line": 17,
                "column": 13,
                "nodeType": "Literal",
                "messageId": "prefixFailure",
                "endLine": 17,
                "endColumn": 30
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { DomSanitizer, SafeHtml } from '@angular/platform-browser'\nimport { QuillService } from './quill.service'\n\nimport { NgClass } from '@angular/common'\nimport {\n Component,\n OnChanges,\n SimpleChanges,\n ViewEncapsulation,\n input,\n signal\n} from '@angular/core'\n\n@Component({\n imports: [NgClass],\n encapsulation: ViewEncapsulation.None,\n selector: 'quill-view-html',\n styles: [`\n.ql-container.ngx-quill-view-html {\n border: 0;\n}\n`],\n template: `\n <div class=\"ql-container\" [ngClass]=\"themeClass()\">\n <div class=\"ql-editor\" [innerHTML]=\"innerHTML()\">\n </div>\n </div>\n`\n})\nexport class QuillViewHTMLComponent implements OnChanges {\n readonly content = input('')\n readonly theme = input<string | undefined>(undefined)\n readonly sanitize = input<boolean | undefined>(undefined)\n\n readonly innerHTML = signal<SafeHtml>('')\n readonly themeClass = signal('ql-snow')\n\n constructor(\n private sanitizer: DomSanitizer,\n protected service: QuillService\n ) {}\n\n ngOnChanges(changes: SimpleChanges) {\n if (changes.theme) {\n const theme = changes.theme.currentValue || (this.service.config.theme ? this.service.config.theme : 'snow')\n this.themeClass.set(`ql-${theme} ngx-quill-view-html`)\n } else if (!this.theme()) {\n const theme = this.service.config.theme ? this.service.config.theme : 'snow'\n this.themeClass.set(`ql-${theme} ngx-quill-view-html`)\n }\n if (changes.content) {\n const content = changes.content.currentValue\n const sanitize = [true, false].includes(this.sanitize()) ? this.sanitize() : (this.service.config.sanitize || false)\n const innerHTML = sanitize ? content : this.sanitizer.bypassSecurityTrustHtml(content)\n this.innerHTML.set(innerHTML)\n }\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/ngx-quill/projects/ngx-quill/src/lib/quill-view.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/component-selector",
                "severity": 2,
                "message": "The selector should start with one of these prefixes: \"lib\" (https://angular.dev/style-guide#style-02-07)",
                "line": 35,
                "column": 13,
                "nodeType": "Literal",
                "messageId": "prefixFailure",
                "endLine": 35,
                "endColumn": 25
              },
              {
                "ruleId": "@angular-eslint/no-output-on-prefix",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named \"on\", nor prefixed with it (https://angular.dev/style-guide#style-05-16)",
                "line": 60,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "noOutputOnPrefix",
                "endLine": 60,
                "endColumn": 28
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { isPlatformServer } from '@angular/common'\nimport type QuillType from 'quill'\n\nimport {\n AfterViewInit,\n Component,\n DestroyRef,\n ElementRef,\n EventEmitter,\n Inject,\n NgZone,\n OnChanges,\n OnDestroy,\n Output,\n PLATFORM_ID,\n Renderer2,\n SecurityContext,\n SimpleChanges,\n ViewEncapsulation,\n inject,\n input\n} from '@angular/core'\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop'\nimport { DomSanitizer } from '@angular/platform-browser'\nimport type { Subscription } from 'rxjs'\nimport { mergeMap } from 'rxjs/operators'\n\nimport { CustomModule, CustomOption, QuillBeforeRender, QuillModules } from 'ngx-quill/config'\n\nimport { getFormat, raf$ } from './helpers'\nimport { QuillService } from './quill.service'\n\n@Component({\n encapsulation: ViewEncapsulation.None,\n selector: 'quill-view',\n styles: [`\n.ql-container.ngx-quill-view {\n border: 0;\n}\n`],\n template: `\n <div quill-view-element></div>\n`,\n})\nexport class QuillViewComponent implements AfterViewInit, OnChanges, OnDestroy {\n readonly format = input<'object' | 'html' | 'text' | 'json' | undefined>(\n undefined\n )\n readonly theme = input<string | undefined>(undefined)\n readonly modules = input<QuillModules | undefined>(undefined)\n readonly debug = input<'warn' | 'log' | 'error' | false>(false)\n readonly formats = input<string[] | null | undefined>(undefined)\n readonly sanitize = input<boolean | undefined>(undefined)\n readonly beforeRender = input<QuillBeforeRender>()\n readonly strict = input(true)\n readonly content = input<any>()\n readonly customModules = input<CustomModule[]>([])\n readonly customOptions = input<CustomOption[]>([])\n\n @Output() onEditorCreated = new EventEmitter<any>()\n\n quillEditor!: QuillType\n editorElem!: HTMLElement\n\n private quillSubscription: Subscription | null = null\n\n private destroyRef = inject(DestroyRef)\n\n constructor(\n public elementRef: ElementRef,\n protected renderer: Renderer2,\n protected zone: NgZone,\n protected service: QuillService,\n protected domSanitizer: DomSanitizer,\n @Inject(PLATFORM_ID) protected platformId: any,\n ) { }\n\n valueSetter = (quillEditor: QuillType, value: any): any => {\n const format = getFormat(this.format(), this.service.config.format)\n let content = value\n if (format === 'text') {\n quillEditor.setText(content)\n } else {\n if (format === 'html') {\n const sanitize = [true, false].includes(this.sanitize()) ? this.sanitize() : (this.service.config.sanitize || false)\n if (sanitize) {\n value = this.domSanitizer.sanitize(SecurityContext.HTML, value)\n }\n content = quillEditor.clipboard.convert({ html: value })\n } else if (format === 'json') {\n try {\n content = JSON.parse(value)\n } catch {\n content = [{ insert: value }]\n }\n }\n quillEditor.setContents(content)\n }\n }\n\n ngOnChanges(changes: SimpleChanges) {\n if (!this.quillEditor) {\n return\n }\n if (changes.content) {\n this.valueSetter(this.quillEditor, changes.content.currentValue)\n }\n }\n\n ngAfterViewInit() {\n if (isPlatformServer(this.platformId)) {\n return\n }\n\n this.quillSubscription = this.service.getQuill().pipe(\n mergeMap((Quill) => this.service.beforeRender(Quill, this.customModules(), this.beforeRender()))\n ).subscribe(Quill => {\n const modules = Object.assign({}, this.modules() || this.service.config.modules)\n modules.toolbar = false\n\n this.customOptions().forEach((customOption) => {\n const newCustomOption = Quill.import(customOption.import)\n newCustomOption.whitelist = customOption.whitelist\n Quill.register(newCustomOption, true)\n })\n\n let debug = this.debug()\n if (!debug && debug !== false && this.service.config.debug) {\n debug = this.service.config.debug\n }\n\n let formats = this.formats()\n if (!formats && formats === undefined) {\n formats = this.service.config.formats ? [...this.service.config.formats] : (this.service.config.formats === null ? null : undefined)\n }\n const theme = this.theme() || (this.service.config.theme ? this.service.config.theme : 'snow')\n\n this.editorElem = this.elementRef.nativeElement.querySelector(\n '[quill-view-element]'\n ) as HTMLElement\n\n this.zone.runOutsideAngular(() => {\n this.quillEditor = new Quill(this.editorElem, {\n debug,\n formats,\n modules,\n readOnly: true,\n strict: this.strict(),\n theme\n })\n })\n\n this.renderer.addClass(this.editorElem, 'ngx-quill-view')\n\n if (this.content()) {\n this.valueSetter(this.quillEditor, this.content())\n }\n\n // The `requestAnimationFrame` triggers change detection. There's no sense to invoke the `requestAnimationFrame` if anyone is\n // listening to the `onEditorCreated` event inside the template, for instance `<quill-view (onEditorCreated)=\"...\">`.\n if (!this.onEditorCreated.observed) {\n return\n }\n\n // The `requestAnimationFrame` will trigger change detection and `onEditorCreated` will also call `markDirty()`\n // internally, since Angular wraps template event listeners into `listener` instruction. We're using the `requestAnimationFrame`\n // to prevent the frame drop and avoid `ExpressionChangedAfterItHasBeenCheckedError` error.\n raf$().pipe(takeUntilDestroyed(this.destroyRef)).subscribe(() => {\n this.onEditorCreated.emit(this.quillEditor)\n })\n })\n }\n\n ngOnDestroy(): void {\n this.quillSubscription?.unsubscribe()\n this.quillSubscription = null\n }\n}\n",
            "usedDeprecatedRules": []
          }
        ]
      }
    }
  },
  "ngx-toastr": {
    "repo": {
      "HEAD": {
        "commit": "e688d8039158bc83a9fe4ac08589f2ab8c550466",
        "author": "Chris Barr",
        "date": "Tue Aug 27 17:04:26 2024 -0400",
        "message": "docs: fix demo to show progress for pink toast (#1023)"
      },
      "url": "https://github.com/scttcper/ngx-toastr"
    },
    "before": {
      "ngx-toastr": {
        "recommended": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/ngx-toastr/src/app/bootstrap.toast.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/component-class-suffix",
                "severity": 2,
                "message": "Component class names should end with one of these suffixes: \"Component\" (https://angular.io/styleguide#style-02-03)",
                "line": 36,
                "column": 14,
                "nodeType": "Identifier",
                "messageId": "componentClassSuffix",
                "endLine": 36,
                "endColumn": 28
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\n\nimport { Toast, ToastrService, ToastPackage } from '../lib/public_api';\n\n@Component({\n selector: '[bootstrap-toast-component]',\n template: `\n <div class=\"toast\" role=\"alert\" [style.display]=\"state().value === 'inactive' ? 'none' : ''\">\n <div class=\"toast-header\">\n <strong class=\"me-auto\">{{ title || 'default header' }}</strong>\n <button\n type=\"button\"\n class=\"btn-close\"\n aria-label=\"Close\"\n *ngIf=\"options.closeButton\"\n (click)=\"remove()\"\n ></button>\n </div>\n <div class=\"toast-body\">\n <div\n role=\"alert\"\n [attr.aria-label]=\"message\"\n >\n {{ message || 'default message' }}\n </div>\n <div class=\"mt-2 pt-2 border-top\">\n <button type=\"button\" class=\"btn btn-secondary btn-sm\" (click)=\"handleClick($event)\">\n {{ undoString }}\n </button>\n </div>\n </div>\n </div>\n `,\n preserveWhitespaces: false,\n})\nexport class BootstrapToast extends Toast {\n // used for demo purposes\n undoString = 'undo';\n\n // Demo click handler\n handleClick(event: Event) {\n event.stopPropagation();\n this.undoString = 'undid';\n this.toastPackage.triggerAction();\n return false;\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/ngx-toastr/src/app/notyf.toast.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/component-class-suffix",
                "severity": 2,
                "message": "Component class names should end with one of these suffixes: \"Component\" (https://angular.io/styleguide#style-02-03)",
                "line": 86,
                "column": 14,
                "nodeType": "Identifier",
                "messageId": "componentClassSuffix",
                "endLine": 86,
                "endColumn": 24
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n animate,\n keyframes,\n state,\n style,\n transition,\n trigger,\n} from '@angular/animations';\nimport { Component } from '@angular/core';\nimport { Toast, ToastrService, ToastPackage } from '../lib/public_api';\n\n@Component({\n selector: 'notyf-toast-component',\n styles: [],\n template: `\n <div class=\"notyf__toast notyf__toast--success notyf__toast\">\n <div class=\"notyf__wrapper\">\n <div class=\"notyf__icon\">\n <i class=\"notyf__icon--success\" style=\"color: rgb(61, 199, 99);\"></i>\n </div>\n <div class=\"notyf__message\">{{ title }} {{ message }}</div>\n </div>\n <div\n class=\"notyf__ripple\"\n style=\"background-color: rgb(61, 199, 99);\"\n ></div>\n </div>\n `,\n animations: [\n trigger('flyInOut', [\n state('inactive', style({ opacity: 0 })),\n transition(\n 'inactive => active',\n animate(\n '300ms ease-out',\n keyframes([\n style({\n opacity: 0,\n bottom: '-15px',\n 'max-height': 0,\n 'max-width': 0,\n 'margin-top': 0,\n }),\n style({\n opacity: 0.8,\n bottom: '-3px',\n }),\n style({\n opacity: 1,\n bottom: '0',\n 'max-height': '200px',\n 'margin-top': '12px',\n 'max-width': '400px',\n }),\n ]),\n ),\n ),\n state(\n 'active',\n style({\n bottom: '0',\n 'max-height': '200px',\n 'margin-top': '12px',\n 'max-width': '400px',\n }),\n ),\n transition(\n 'active => removed',\n animate(\n '300ms ease-out',\n keyframes([\n style({\n opacity: 1,\n transform: 'translateY(0)'\n }),\n style({\n opacity: 0,\n transform: 'translateY(25%)'\n }),\n ]),\n ),\n ),\n ]),\n ],\n})\nexport class NotyfToast extends Toast {}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/ngx-toastr/src/app/pink.toast.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/component-class-suffix",
                "severity": 2,
                "message": "Component class names should end with one of these suffixes: \"Component\" (https://angular.io/styleguide#style-02-03)",
                "line": 96,
                "column": 14,
                "nodeType": "Identifier",
                "messageId": "componentClassSuffix",
                "endLine": 96,
                "endColumn": 23
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n animate,\n keyframes,\n state,\n style,\n transition,\n trigger\n} from '@angular/animations';\nimport { Component } from '@angular/core';\n\nimport { Toast, ToastrService, ToastPackage } from '../lib/public_api';\n\n@Component({\n selector: '[pink-toast-component]',\n styles: [`\n :host {\n background-color: #FF69B4;\n position: relative;\n overflow: hidden;\n margin: 0 0 6px;\n padding: 10px 10px 10px 10px;\n width: 300px;\n border-radius: 3px 3px 3px 3px;\n color: #FFFFFF;\n pointer-events: all;\n cursor: pointer;\n }\n .btn-pink {\n -webkit-backface-visibility: hidden;\n -webkit-transform: translateZ(0);\n }\n `],\n template: `\n <div class=\"row\" [style.display]=\"state().value === 'inactive' ? 'none' : ''\">\n <div class=\"col-9\">\n <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n {{ title }}\n </div>\n <div *ngIf=\"message && options.enableHtml\" role=\"alert\"\n [class]=\"options.messageClass\" [innerHTML]=\"message\">\n </div>\n <div *ngIf=\"message && !options.enableHtml\" role=\"alert\"\n [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n {{ message }}\n </div>\n </div>\n <div class=\"col-3 text-right\">\n <a *ngIf=\"!options.closeButton\" class=\"btn btn-pink btn-sm\" (click)=\"action($event)\">\n {{ undoString }}\n </a>\n <a *ngIf=\"options.closeButton\" (click)=\"remove()\" class=\"btn btn-pink btn-sm\">\n close\n </a>\n </div>\n </div>\n <div *ngIf=\"options.progressBar\">\n <div class=\"toast-progress\" [style.width]=\"width() + '%'\"></div>\n </div>\n `,\n animations: [\n trigger('flyInOut', [\n state('inactive', style({\n opacity: 0,\n })),\n transition('inactive => active', animate('400ms ease-out', keyframes([\n style({\n transform: 'translate3d(100%, 0, 0) skewX(-30deg)',\n opacity: 0,\n }),\n style({\n transform: 'skewX(20deg)',\n opacity: 1,\n }),\n style({\n transform: 'skewX(-5deg)',\n opacity: 1,\n }),\n style({\n transform: 'none',\n opacity: 1,\n }),\n ]))),\n transition('active => removed', animate('400ms ease-out', keyframes([\n style({\n opacity: 1,\n }),\n style({\n transform: 'translate3d(100%, 0, 0) skewX(30deg)',\n opacity: 0,\n }),\n ]))),\n ]),\n ],\n preserveWhitespaces: false,\n})\nexport class PinkToast extends Toast {\n // used for demo purposes\n undoString = 'undo';\n\n action(event: Event) {\n event.stopPropagation();\n this.undoString = 'undid';\n this.toastPackage.triggerAction();\n return false;\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/ngx-toastr/src/lib/toastr/toast-noanimation.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/component-class-suffix",
                "severity": 2,
                "message": "Component class names should end with one of these suffixes: \"Component\" (https://angular.io/styleguide#style-02-03)",
                "line": 47,
                "column": 14,
                "nodeType": "Identifier",
                "messageId": "componentClassSuffix",
                "endLine": 47,
                "endColumn": 30
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { NgIf } from '@angular/common';\nimport { ChangeDetectionStrategy, ModuleWithProviders, signal } from '@angular/core';\nimport {\n ApplicationRef,\n Component,\n HostBinding,\n HostListener,\n NgModule,\n OnDestroy,\n} from '@angular/core';\n\nimport { Subscription } from 'rxjs';\n\nimport {\n DefaultNoComponentGlobalConfig,\n GlobalConfig,\n IndividualConfig,\n ToastPackage,\n TOAST_CONFIG,\n} from './toastr-config';\nimport { ToastrService } from './toastr.service';\n\n@Component({\n selector: '[toast-component]',\n template: `\n <button *ngIf=\"options.closeButton\" (click)=\"remove()\" type=\"button\" class=\"toast-close-button\" aria-label=\"Close\">\n <span aria-hidden=\"true\">&times;</span>\n </button>\n <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n </div>\n <div *ngIf=\"message && options.enableHtml\" role=\"alert\"\n [class]=\"options.messageClass\" [innerHTML]=\"message\">\n </div>\n <div *ngIf=\"message && !options.enableHtml\" role=\"alert\"\n [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n {{ message }}\n </div>\n <div *ngIf=\"options.progressBar\">\n <div class=\"toast-progress\" [style.width]=\"width() + '%'\"></div>\n </div>\n `,\n standalone: true,\n imports: [NgIf],\n changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ToastNoAnimation implements OnDestroy {\n message?: string | null;\n title?: string;\n options: IndividualConfig;\n duplicatesCount!: number;\n originalTimeout: number;\n /bin /boot /cdrom /dev /etc /home /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /swapfile /sys /tmp /usr /var width of progress bar */\n width = signal(-1);\n /bin /boot /cdrom /dev /etc /home /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /swapfile /sys /tmp /usr /var a combination of toast type and options.toastClass */\n @HostBinding('class') toastClasses = '';\n\n /bin /boot /cdrom /dev /etc /home /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /swapfile /sys /tmp /usr /var hides component when waiting to be displayed */\n @HostBinding('style.display')\n get displayStyle() {\n if (this.state() === 'inactive') {\n return 'none';\n }\n\n return null;\n }\n\n /bin /boot /cdrom /dev /etc /home /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /swapfile /sys /tmp /usr /var controls animation */\n state = signal('inactive');\n private timeout: any;\n private intervalId: any;\n private hideTime!: number;\n private sub: Subscription;\n private sub1: Subscription;\n private sub2: Subscription;\n private sub3: Subscription;\n\n constructor(\n protected toastrService: ToastrService,\n public toastPackage: ToastPackage,\n protected appRef: ApplicationRef,\n ) {\n this.message = toastPackage.message;\n this.title = toastPackage.title;\n this.options = toastPackage.config;\n this.originalTimeout = toastPackage.config.timeOut;\n this.toastClasses = `${toastPackage.toastType} ${\n toastPackage.config.toastClass\n }`;\n this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n this.activateToast();\n });\n this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n this.remove();\n });\n this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n this.resetTimeout();\n });\n this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(count => {\n this.duplicatesCount = count;\n });\n }\n ngOnDestroy() {\n this.sub.unsubscribe();\n this.sub1.unsubscribe();\n this.sub2.unsubscribe();\n this.sub3.unsubscribe();\n clearInterval(this.intervalId);\n clearTimeout(this.timeout);\n }\n /bin /run /sbin angular.json karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended misc ngx-toastr.report.json node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json vercel.json activates toast and sets timeout\n */\n activateToast() {\n this.state.set('active');\n if (!(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') && this.options.timeOut) {\n this.timeout = setTimeout(() => {\n this.remove();\n }, this.options.timeOut);\n this.hideTime = new Date().getTime() + this.options.timeOut;\n if (this.options.progressBar) {\n this.intervalId = setInterval(() => this.updateProgress(), 10);\n }\n }\n if (this.options.onActivateTick) {\n this.appRef.tick();\n }\n }\n /bin /run /sbin angular.json karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended misc ngx-toastr.report.json node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json vercel.json updates progress bar width\n */\n updateProgress() {\n if (this.width() === 0 || this.width() === 100 || !this.options.timeOut) {\n return;\n }\n const now = new Date().getTime();\n const remaining = this.hideTime - now;\n this.width.set((remaining / this.options.timeOut) angular.json karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended misc ngx-toastr.report.json node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json vercel.json 100);\n if (this.options.progressAnimation === 'increasing') {\n this.width.update(width => 100 - width);\n }\n if (this.width() <= 0) {\n this.width.set(0);\n }\n if (this.width() >= 100) {\n this.width.set(100);\n }\n }\n\n resetTimeout() {\n clearTimeout(this.timeout);\n clearInterval(this.intervalId);\n this.state.set('active');\n\n this.options.timeOut = this.originalTimeout;\n this.timeout = setTimeout(() => this.remove(), this.originalTimeout);\n this.hideTime = new Date().getTime() + (this.originalTimeout || 0);\n this.width.set(-1);\n if (this.options.progressBar) {\n this.intervalId = setInterval(() => this.updateProgress(), 10);\n }\n }\n\n /bin /run /sbin angular.json karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended misc ngx-toastr.report.json node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json vercel.json tells toastrService to remove this toast after animation time\n */\n remove() {\n if (this.state() === 'removed') {\n return;\n }\n clearTimeout(this.timeout);\n this.state.set('removed');\n this.timeout = setTimeout(() =>\n this.toastrService.remove(this.toastPackage.toastId),\n );\n }\n @HostListener('click')\n tapToast() {\n if (this.state() === 'removed') {\n return;\n }\n this.toastPackage.triggerTap();\n if (this.options.tapToDismiss) {\n this.remove();\n }\n }\n @HostListener('mouseenter')\n stickAround() {\n if (this.state() === 'removed') {\n return;\n }\n clearTimeout(this.timeout);\n this.options.timeOut = 0;\n this.hideTime = 0;\n\n // disable progressBar\n clearInterval(this.intervalId);\n this.width.set(0);\n }\n @HostListener('mouseleave')\n delayedHideToast() {\n if (\n (this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut') ||\n this.options.extendedTimeOut === 0 ||\n this.state() === 'removed'\n ) {\n return;\n }\n this.timeout = setTimeout(\n () => this.remove(),\n this.options.extendedTimeOut,\n );\n this.options.timeOut = this.options.extendedTimeOut;\n this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n this.width.set(-1);\n if (this.options.progressBar) {\n this.intervalId = setInterval(() => this.updateProgress(), 10);\n }\n }\n}\n\nexport const DefaultNoAnimationsGlobalConfig: GlobalConfig = {\n ...DefaultNoComponentGlobalConfig,\n toastComponent: ToastNoAnimation,\n};\n\n@NgModule({\n imports: [ToastNoAnimation],\n exports: [ToastNoAnimation],\n})\nexport class ToastNoAnimationModule {\n static forRoot(config: Partial<GlobalConfig> = {}): ModuleWithProviders<ToastNoAnimationModule> {\n return {\n ngModule: ToastNoAnimationModule,\n providers: [\n {\n provide: TOAST_CONFIG,\n useValue: {\n default: DefaultNoAnimationsGlobalConfig,\n config,\n },\n },\n ],\n };\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/ngx-toastr/src/lib/toastr/toast.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/component-class-suffix",
                "severity": 2,
                "message": "Component class names should end with one of these suffixes: \"Component\" (https://angular.io/styleguide#style-02-03)",
                "line": 57,
                "column": 14,
                "nodeType": "Identifier",
                "messageId": "componentClassSuffix",
                "endLine": 57,
                "endColumn": 19
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n animate,\n state,\n style,\n transition,\n trigger\n} from '@angular/animations';\nimport {\n ChangeDetectionStrategy,\n Component,\n HostBinding,\n HostListener,\n NgZone,\n OnDestroy,\n WritableSignal,\n signal,\n} from '@angular/core';\nimport { NgIf } from '@angular/common';\nimport { Subscription } from 'rxjs';\nimport { IndividualConfig, ToastPackage } from './toastr-config';\nimport { ToastrService } from './toastr.service';\n\n@Component({\n selector: '[toast-component]',\n template: `\n <button *ngIf=\"options.closeButton\" (click)=\"remove()\" type=\"button\" class=\"toast-close-button\" aria-label=\"Close\">\n <span aria-hidden=\"true\">&times;</span>\n </button>\n <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n </div>\n <div *ngIf=\"message && options.enableHtml\" role=\"alert\"\n [class]=\"options.messageClass\" [innerHTML]=\"message\">\n </div>\n <div *ngIf=\"message && !options.enableHtml\" role=\"alert\"\n [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n {{ message }}\n </div>\n <div *ngIf=\"options.progressBar\">\n <div class=\"toast-progress\" [style.width]=\"width() + '%'\"></div>\n </div>\n `,\n animations: [\n trigger('flyInOut', [\n state('inactive', style({ opacity: 0 })),\n state('active', style({ opacity: 1 })),\n state('removed', style({ opacity: 0 })),\n transition('inactive => active', animate('{{ easeTime }}ms {{ easing }}')),\n transition('active => removed', animate('{{ easeTime }}ms {{ easing }}')),\n ]),\n ],\n preserveWhitespaces: false,\n standalone: true,\n imports: [NgIf],\n changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class Toast<ConfigPayload = any> implements OnDestroy {\n message?: string | null;\n title?: string;\n options: IndividualConfig<ConfigPayload>;\n duplicatesCount!: number;\n originalTimeout: number;\n /bin /boot /cdrom /dev /etc /home /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /swapfile /sys /tmp /usr /var width of progress bar */\n width = signal(-1);\n /bin /boot /cdrom /dev /etc /home /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /swapfile /sys /tmp /usr /var a combination of toast type and options.toastClass */\n @HostBinding('class') toastClasses = '';\n\n state: WritableSignal<{\n value: 'inactive' | 'active' | 'removed';\n params: { easeTime: number | string; easing: string };\n }>;\n\n /bin /boot /cdrom /dev /etc /home /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /swapfile /sys /tmp /usr /var controls animation */\n @HostBinding('@flyInOut') get _state() {\n return this.state();\n }\n\n /bin /boot /cdrom /dev /etc /home /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /swapfile /sys /tmp /usr /var hides component when waiting to be displayed */\n @HostBinding('style.display')\n get displayStyle(): string | undefined {\n if (this.state().value === 'inactive') {\n return 'none';\n }\n\n return;\n }\n\n private timeout: any;\n private intervalId: any;\n private hideTime!: number;\n private sub: Subscription;\n private sub1: Subscription;\n private sub2: Subscription;\n private sub3: Subscription;\n\n constructor(\n protected toastrService: ToastrService,\n public toastPackage: ToastPackage,\n protected ngZone?: NgZone,\n ) {\n this.message = toastPackage.message;\n this.title = toastPackage.title;\n this.options = toastPackage.config;\n this.originalTimeout = toastPackage.config.timeOut;\n this.toastClasses = `${toastPackage.toastType} ${toastPackage.config.toastClass}`;\n this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n this.activateToast();\n });\n this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n this.remove();\n });\n this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n this.resetTimeout();\n });\n this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(count => {\n this.duplicatesCount = count;\n });\n this.state = signal({\n value: 'inactive',\n params: {\n easeTime: this.toastPackage.config.easeTime,\n easing: 'ease-in',\n },\n });\n }\n ngOnDestroy() {\n this.sub.unsubscribe();\n this.sub1.unsubscribe();\n this.sub2.unsubscribe();\n this.sub3.unsubscribe();\n clearInterval(this.intervalId);\n clearTimeout(this.timeout);\n }\n /bin /run /sbin angular.json karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended misc ngx-toastr.report.json node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json vercel.json activates toast and sets timeout\n */\n activateToast() {\n this.state.update(state => ({ ...state, value: 'active' }));\n if (\n !(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') &&\n this.options.timeOut\n ) {\n this.outsideTimeout(() => this.remove(), this.options.timeOut);\n this.hideTime = new Date().getTime() + this.options.timeOut;\n if (this.options.progressBar) {\n this.outsideInterval(() => this.updateProgress(), 10);\n }\n }\n }\n /bin /run /sbin angular.json karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended misc ngx-toastr.report.json node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json vercel.json updates progress bar width\n */\n updateProgress() {\n if (this.width() === 0 || this.width() === 100 || !this.options.timeOut) {\n return;\n }\n const now = new Date().getTime();\n const remaining = this.hideTime - now;\n this.width.set((remaining / this.options.timeOut) angular.json karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended misc ngx-toastr.report.json node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json vercel.json 100);\n if (this.options.progressAnimation === 'increasing') {\n this.width.update(width => 100 - width);\n }\n if (this.width() <= 0) {\n this.width.set(0);\n }\n if (this.width() >= 100) {\n this.width.set(100);\n }\n }\n\n resetTimeout() {\n clearTimeout(this.timeout);\n clearInterval(this.intervalId);\n this.state.update(state => ({ ...state, value: 'active' }));\n\n this.outsideTimeout(() => this.remove(), this.originalTimeout);\n this.options.timeOut = this.originalTimeout;\n this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n this.width.set(-1);\n if (this.options.progressBar) {\n this.outsideInterval(() => this.updateProgress(), 10);\n }\n }\n\n /bin /run /sbin angular.json karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended misc ngx-toastr.report.json node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json vercel.json tells toastrService to remove this toast after animation time\n */\n remove() {\n if (this.state().value === 'removed') {\n return;\n }\n clearTimeout(this.timeout);\n this.state.update(state => ({ ...state, value: 'removed' }));\n this.outsideTimeout(\n () => this.toastrService.remove(this.toastPackage.toastId),\n +this.toastPackage.config.easeTime,\n );\n }\n @HostListener('click')\n tapToast() {\n if (this.state().value === 'removed') {\n return;\n }\n this.toastPackage.triggerTap();\n if (this.options.tapToDismiss) {\n this.remove();\n }\n }\n @HostListener('mouseenter')\n stickAround() {\n if (this.state().value === 'removed') {\n return;\n }\n\n if (this.options.disableTimeOut !== 'extendedTimeOut') {\n clearTimeout(this.timeout);\n this.options.timeOut = 0;\n this.hideTime = 0;\n\n // disable progressBar\n clearInterval(this.intervalId);\n this.width.set(0);\n }\n }\n @HostListener('mouseleave')\n delayedHideToast() {\n if (\n (this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut') ||\n this.options.extendedTimeOut === 0 ||\n this.state().value === 'removed'\n ) {\n return;\n }\n this.outsideTimeout(() => this.remove(), this.options.extendedTimeOut);\n this.options.timeOut = this.options.extendedTimeOut;\n this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n this.width.set(-1);\n if (this.options.progressBar) {\n this.outsideInterval(() => this.updateProgress(), 10);\n }\n }\n\n outsideTimeout(func: () => any, timeout: number) {\n if (this.ngZone) {\n this.ngZone.runOutsideAngular(\n () =>\n (this.timeout = setTimeout(\n () => this.runInsideAngular(func),\n timeout\n ))\n );\n } else {\n this.timeout = setTimeout(() => func(), timeout);\n }\n }\n\n outsideInterval(func: () => any, timeout: number) {\n if (this.ngZone) {\n this.ngZone.runOutsideAngular(\n () =>\n (this.intervalId = setInterval(\n () => this.runInsideAngular(func),\n timeout\n ))\n );\n } else {\n this.intervalId = setInterval(() => func(), timeout);\n }\n }\n\n private runInsideAngular(func: () => any) {\n if (this.ngZone) {\n this.ngZone.run(() => func());\n } else {\n func();\n }\n }\n}\n",
            "usedDeprecatedRules": []
          }
        ],
        "all": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/ngx-toastr/src/app/app.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 3,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 10,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        59
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\n\n@Component({\n selector: 'app-root',\n template: `\n <app-header></app-header>\n <app-home></app-home>\n <app-footer></app-footer>\n`,\n})\nexport class AppComponent {}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/ngx-toastr/src/app/app.module.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/sort-ngmodule-metadata-arrays",
                "severity": 2,
                "message": "`NgModule` metadata arrays should be sorted in ASC alphabetical order",
                "line": 23,
                "column": 5,
                "nodeType": "Identifier",
                "messageId": "sortNgmoduleMetadataArrays",
                "endLine": 23,
                "endColumn": 19,
                "fix": {
                  "range": [
                    896,
                    925
                  ],
                  "text": "BootstrapToast,\n PinkToast"
                }
              },
              {
                "ruleId": "@angular-eslint/sort-ngmodule-metadata-arrays",
                "severity": 2,
                "message": "`NgModule` metadata arrays should be sorted in ASC alphabetical order",
                "line": 32,
                "column": 5,
                "nodeType": "Identifier",
                "messageId": "sortNgmoduleMetadataArrays",
                "endLine": 32,
                "endColumn": 28,
                "fix": {
                  "range": [
                    1045,
                    1085
                  ],
                  "text": "BrowserAnimationsModule,\n FormsModule"
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 2,
            "fixableWarningCount": 0,
            "source": "import { NgModule, provideExperimentalZonelessChangeDetection } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { GhButtonModule } from '@ctrl/ngx-github-buttons';\n\nimport { ToastNoAnimationModule, ToastContainerDirective } from '../lib/public_api';\n\nimport { AppComponent } from './app.component';\nimport { FooterComponent } from './footer/footer.component';\nimport { HeaderComponent } from './header/header.component';\nimport { HomeComponent } from './home/home.component';\nimport { NotyfToast } from './notyf.toast';\nimport { PinkToast } from './pink.toast';\nimport { BootstrapToast } from './bootstrap.toast';\nimport { provideToastr } from '../lib/toastr/toast.provider';\n\n@NgModule({\n declarations: [\n AppComponent,\n PinkToast,\n BootstrapToast,\n NotyfToast,\n FooterComponent,\n HeaderComponent,\n HomeComponent,\n ],\n imports: [\n BrowserModule,\n FormsModule,\n BrowserAnimationsModule,\n ToastNoAnimationModule,\n ToastContainerDirective,\n GhButtonModule,\n ],\n providers: [provideToastr(), provideExperimentalZonelessChangeDetection()],\n bootstrap: [AppComponent],\n})\nexport class AppModule {}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/ngx-toastr/src/app/bootstrap.toast.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 5,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 35,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        132
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\n\nimport { Toast, ToastrService, ToastPackage } from '../lib/public_api';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (25). Maximum allowed is 3 (https://angular.io/guide/styleguide#style-05-04)",
                "line": 7,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 33,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/component-class-suffix",
                "severity": 2,
                "message": "Component class names should end with one of these suffixes: \"Component\" (https://angular.io/styleguide#style-02-03)",
                "line": 36,
                "column": 14,
                "nodeType": "Identifier",
                "messageId": "componentClassSuffix",
                "endLine": 36,
                "endColumn": 28
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\n\nimport { Toast, ToastrService, ToastPackage } from '../lib/public_api';\n\n@Component({\n selector: '[bootstrap-toast-component]',\n template: `\n <div class=\"toast\" role=\"alert\" [style.display]=\"state().value === 'inactive' ? 'none' : ''\">\n <div class=\"toast-header\">\n <strong class=\"me-auto\">{{ title || 'default header' }}</strong>\n <button\n type=\"button\"\n class=\"btn-close\"\n aria-label=\"Close\"\n *ngIf=\"options.closeButton\"\n (click)=\"remove()\"\n ></button>\n </div>\n <div class=\"toast-body\">\n <div\n role=\"alert\"\n [attr.aria-label]=\"message\"\n >\n {{ message || 'default message' }}\n </div>\n <div class=\"mt-2 pt-2 border-top\">\n <button type=\"button\" class=\"btn btn-secondary btn-sm\" (click)=\"handleClick($event)\">\n {{ undoString }}\n </button>\n </div>\n </div>\n </div>\n `,\n preserveWhitespaces: false,\n})\nexport class BootstrapToast extends Toast {\n // used for demo purposes\n undoString = 'undo';\n\n // Demo click handler\n handleClick(event: Event) {\n event.stopPropagation();\n this.undoString = 'undid';\n this.toastPackage.triggerAction();\n return false;\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/ngx-toastr/src/app/footer/footer.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 3,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 25,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        27,
                        68
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (7). Maximum allowed is 3 (https://angular.io/guide/styleguide#style-05-04)",
                "line": 5,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 13,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`styles` has too many lines (7). Maximum allowed is 3 (https://angular.io/guide/styleguide#style-05-04)",
                "line": 14,
                "column": 11,
                "nodeType": "ArrayExpression",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 24,
                "endColumn": 4
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, VERSION } from '@angular/core';\n\n@Component({\n selector: 'app-footer',\n template: `\n <footer class=\"footer mb-4 mt-5\">\n Angular {{ version }}\n <br>\n <a href=\"https://github.com/scttcper/ngx-toastr/blob/master/LICENSE\">MIT license</a>\n -\n <a href=\"https://github.com/scttcper/ngx-toastr\">Source</a>\n </footer>\n `,\n styles: [\n `\n .footer {\n line-height: 2;\n text-align: center;\n font-size: 11px;\n font-family: var(--font-family-monospace);\n color: #999;\n }\n `,\n ],\n})\nexport class FooterComponent {\n version = VERSION.full;\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/ngx-toastr/src/app/header/header.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 3,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 12,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        59
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (5). Maximum allowed is 3 (https://angular.io/guide/styleguide#style-05-04)",
                "line": 5,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 11,
                "endColumn": 4
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\n\n@Component({\n selector: 'app-header',\n template: `\n <header class=\"header mt-5 text-center\">\n <h1>Angular Toastr</h1>\n <p style=\"color: #777\" class=\"mb-1\">Easy Toasts for Angular</p>\n <gh-button user=\"scttcper\" repo=\"ngx-toastr\" [count]=\"true\"></gh-button>\n </header>\n `,\n})\nexport class HeaderComponent {}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/ngx-toastr/src/app/home/home.component.spec.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/sort-ngmodule-metadata-arrays",
                "severity": 2,
                "message": "`NgModule` metadata arrays should be sorted in ASC alphabetical order",
                "line": 129,
                "column": 29,
                "nodeType": "Identifier",
                "messageId": "sortNgmoduleMetadataArrays",
                "endLine": 129,
                "endColumn": 39,
                "fix": {
                  "range": [
                    4790,
                    4811
                  ],
                  "text": "NotyfToast, PinkToast"
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { TestBed, waitForAsync } from '@angular/core/testing';\nimport { FormsModule } from '@angular/forms';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { Toast } from '../../lib/public_api';\nimport { ActiveToast, ToastrModule } from '../../lib/public_api';\nimport { NotyfToast } from '../notyf.toast';\nimport { PinkToast } from '../pink.toast';\nimport { HomeComponent } from './home.component';\n\ndescribe('AppComponent', () => {\n beforeEach(() => {\n TestBed.configureTestingModule({\n imports: [\n ToastrModule.forRoot({\n timeOut: 800,\n progressBar: true,\n onActivateTick: true,\n enableHtml: true,\n }),\n FormsModule,\n BrowserAnimationsModule,\n AppTestModule,\n ],\n declarations: [HomeComponent],\n }).compileComponents();\n });\n\n it('should create the app', waitForAsync(() => {\n const fixture = TestBed.createComponent(HomeComponent);\n const app = fixture.debugElement.componentInstance;\n expect(app).toBeTruthy();\n }));\n it('should trigger onShown', done => {\n const fixture = TestBed.createComponent(HomeComponent);\n const app = fixture.debugElement.componentInstance;\n const opened: ActiveToast<Toast> = app.openToast();\n expect(opened).toBeDefined();\n opened.onShown.toPromise().then(() => {\n done();\n });\n });\n it('should trigger onHidden', done => {\n const fixture = TestBed.createComponent(HomeComponent);\n const app = fixture.debugElement.componentInstance;\n const opened: ActiveToast<Toast> = app.openToast();\n expect(opened.portal).toBeDefined();\n opened.onHidden.toPromise().then(() => {\n done();\n });\n });\n it('should trigger onTap', done => {\n const fixture = TestBed.createComponent(HomeComponent);\n const app = fixture.debugElement.componentInstance;\n const opened: ActiveToast<Toast> = app.openToast();\n expect(opened.portal).toBeDefined();\n opened.onTap.toPromise().then(() => {\n done();\n });\n opened.portal.instance.tapToast();\n });\n it('should extend life on mouseover and exit', done => {\n const fixture = TestBed.createComponent(HomeComponent);\n const app = fixture.debugElement.componentInstance;\n const opened: ActiveToast<Toast> = app.openToast();\n opened.portal.instance.stickAround();\n opened.portal.instance.delayedHideToast();\n expect(opened.portal.instance.options.timeOut).toBe(1000);\n done();\n });\n it('should keep on mouse exit with extended timeout 0', done => {\n const fixture = TestBed.createComponent(HomeComponent);\n const app = fixture.debugElement.componentInstance;\n app.options.extendedTimeOut = 0;\n const opened: ActiveToast<Toast> = app.openToast();\n opened.portal.instance.stickAround();\n opened.portal.instance.delayedHideToast();\n expect(opened.portal.instance.options.timeOut).toBe(0);\n done();\n });\n it('should trigger onShown for openPinkToast', done => {\n const fixture = TestBed.createComponent(HomeComponent);\n const app = fixture.debugElement.componentInstance;\n const opened: ActiveToast<PinkToast> = app.openPinkToast();\n expect(opened.portal).toBeDefined();\n opened.onShown.toPromise().then(() => {\n done();\n });\n });\n it('should trigger onHidden for openPinkToast', done => {\n const fixture = TestBed.createComponent(HomeComponent);\n const app = fixture.debugElement.componentInstance;\n const opened: ActiveToast<PinkToast> = app.openPinkToast();\n expect(opened.portal).toBeDefined();\n opened.onHidden.toPromise().then(() => {\n done();\n });\n });\n it('should trigger onShown for openNotyf', done => {\n const fixture = TestBed.createComponent(HomeComponent);\n const app = fixture.debugElement.componentInstance;\n const opened: ActiveToast<NotyfToast> = app.openNotyf();\n expect(opened.portal).toBeDefined();\n opened.onShown.toPromise().then(() => {\n done();\n });\n });\n it('should trigger onHidden for openNotyf', done => {\n const fixture = TestBed.createComponent(HomeComponent);\n const app = fixture.debugElement.componentInstance;\n const opened: ActiveToast<NotyfToast> = app.openNotyf();\n expect(opened.portal).toBeDefined();\n opened.onHidden.toPromise().then(() => {\n done();\n });\n });\n it('should have defined componentInstance', waitForAsync(() => {\n const fixture = TestBed.createComponent(HomeComponent);\n const app = fixture.debugElement.componentInstance;\n const opened: ActiveToast<Toast> = app.openToast();\n expect(opened.toastRef.componentInstance).toBeDefined();\n }));\n});\n\n@NgModule({\n imports: [CommonModule, ToastrModule],\n declarations: [PinkToast, NotyfToast],\n})\nclass AppTestModule {}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/ngx-toastr/src/app/notyf.toast.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 12,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 85,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        124,
                        237
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { Toast, ToastrService, ToastPackage } from '../lib/public_api';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (12). Maximum allowed is 3 (https://angular.io/guide/styleguide#style-05-04)",
                "line": 15,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 28,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`animations` has too many lines (53). Maximum allowed is 15 (https://angular.io/guide/styleguide#style-05-04)",
                "line": 29,
                "column": 15,
                "nodeType": "ArrayExpression",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 84,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/component-class-suffix",
                "severity": 2,
                "message": "Component class names should end with one of these suffixes: \"Component\" (https://angular.io/styleguide#style-02-03)",
                "line": 86,
                "column": 14,
                "nodeType": "Identifier",
                "messageId": "componentClassSuffix",
                "endLine": 86,
                "endColumn": 24
              }
            ],
            "suppressedMessages": [],
            "errorCount": 4,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n animate,\n keyframes,\n state,\n style,\n transition,\n trigger,\n} from '@angular/animations';\nimport { Component } from '@angular/core';\nimport { Toast, ToastrService, ToastPackage } from '../lib/public_api';\n\n@Component({\n selector: 'notyf-toast-component',\n styles: [],\n template: `\n <div class=\"notyf__toast notyf__toast--success notyf__toast\">\n <div class=\"notyf__wrapper\">\n <div class=\"notyf__icon\">\n <i class=\"notyf__icon--success\" style=\"color: rgb(61, 199, 99);\"></i>\n </div>\n <div class=\"notyf__message\">{{ title }} {{ message }}</div>\n </div>\n <div\n class=\"notyf__ripple\"\n style=\"background-color: rgb(61, 199, 99);\"\n ></div>\n </div>\n `,\n animations: [\n trigger('flyInOut', [\n state('inactive', style({ opacity: 0 })),\n transition(\n 'inactive => active',\n animate(\n '300ms ease-out',\n keyframes([\n style({\n opacity: 0,\n bottom: '-15px',\n 'max-height': 0,\n 'max-width': 0,\n 'margin-top': 0,\n }),\n style({\n opacity: 0.8,\n bottom: '-3px',\n }),\n style({\n opacity: 1,\n bottom: '0',\n 'max-height': '200px',\n 'margin-top': '12px',\n 'max-width': '400px',\n }),\n ]),\n ),\n ),\n state(\n 'active',\n style({\n bottom: '0',\n 'max-height': '200px',\n 'margin-top': '12px',\n 'max-width': '400px',\n }),\n ),\n transition(\n 'active => removed',\n animate(\n '300ms ease-out',\n keyframes([\n style({\n opacity: 1,\n transform: 'translateY(0)'\n }),\n style({\n opacity: 0,\n transform: 'translateY(25%)'\n }),\n ]),\n ),\n ),\n ]),\n ],\n})\nexport class NotyfToast extends Toast {}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/ngx-toastr/src/app/pink.toast.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 13,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 95,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        123,
                        237
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\n\nimport { Toast, ToastrService, ToastPackage } from '../lib/public_api';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`styles` has too many lines (16). Maximum allowed is 3 (https://angular.io/guide/styleguide#style-05-04)",
                "line": 15,
                "column": 11,
                "nodeType": "ArrayExpression",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 32,
                "endColumn": 5
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (25). Maximum allowed is 3 (https://angular.io/guide/styleguide#style-05-04)",
                "line": 33,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 59,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`animations` has too many lines (31). Maximum allowed is 15 (https://angular.io/guide/styleguide#style-05-04)",
                "line": 60,
                "column": 15,
                "nodeType": "ArrayExpression",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 93,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/component-class-suffix",
                "severity": 2,
                "message": "Component class names should end with one of these suffixes: \"Component\" (https://angular.io/styleguide#style-02-03)",
                "line": 96,
                "column": 14,
                "nodeType": "Identifier",
                "messageId": "componentClassSuffix",
                "endLine": 96,
                "endColumn": 23
              }
            ],
            "suppressedMessages": [],
            "errorCount": 5,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n animate,\n keyframes,\n state,\n style,\n transition,\n trigger\n} from '@angular/animations';\nimport { Component } from '@angular/core';\n\nimport { Toast, ToastrService, ToastPackage } from '../lib/public_api';\n\n@Component({\n selector: '[pink-toast-component]',\n styles: [`\n :host {\n background-color: #FF69B4;\n position: relative;\n overflow: hidden;\n margin: 0 0 6px;\n padding: 10px 10px 10px 10px;\n width: 300px;\n border-radius: 3px 3px 3px 3px;\n color: #FFFFFF;\n pointer-events: all;\n cursor: pointer;\n }\n .btn-pink {\n -webkit-backface-visibility: hidden;\n -webkit-transform: translateZ(0);\n }\n `],\n template: `\n <div class=\"row\" [style.display]=\"state().value === 'inactive' ? 'none' : ''\">\n <div class=\"col-9\">\n <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n {{ title }}\n </div>\n <div *ngIf=\"message && options.enableHtml\" role=\"alert\"\n [class]=\"options.messageClass\" [innerHTML]=\"message\">\n </div>\n <div *ngIf=\"message && !options.enableHtml\" role=\"alert\"\n [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n {{ message }}\n </div>\n </div>\n <div class=\"col-3 text-right\">\n <a *ngIf=\"!options.closeButton\" class=\"btn btn-pink btn-sm\" (click)=\"action($event)\">\n {{ undoString }}\n </a>\n <a *ngIf=\"options.closeButton\" (click)=\"remove()\" class=\"btn btn-pink btn-sm\">\n close\n </a>\n </div>\n </div>\n <div *ngIf=\"options.progressBar\">\n <div class=\"toast-progress\" [style.width]=\"width() + '%'\"></div>\n </div>\n `,\n animations: [\n trigger('flyInOut', [\n state('inactive', style({\n opacity: 0,\n })),\n transition('inactive => active', animate('400ms ease-out', keyframes([\n style({\n transform: 'translate3d(100%, 0, 0) skewX(-30deg)',\n opacity: 0,\n }),\n style({\n transform: 'skewX(20deg)',\n opacity: 1,\n }),\n style({\n transform: 'skewX(-5deg)',\n opacity: 1,\n }),\n style({\n transform: 'none',\n opacity: 1,\n }),\n ]))),\n transition('active => removed', animate('400ms ease-out', keyframes([\n style({\n opacity: 1,\n }),\n style({\n transform: 'translate3d(100%, 0, 0) skewX(30deg)',\n opacity: 0,\n }),\n ]))),\n ]),\n ],\n preserveWhitespaces: false,\n})\nexport class PinkToast extends Toast {\n // used for demo purposes\n undoString = 'undo';\n\n action(event: Event) {\n event.stopPropagation();\n this.undoString = 'undid';\n this.toastPackage.triggerAction();\n return false;\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/ngx-toastr/src/lib/toastr/toast-noanimation.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (16). Maximum allowed is 3 (https://angular.io/guide/styleguide#style-05-04)",
                "line": 25,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 42,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/component-class-suffix",
                "severity": 2,
                "message": "Component class names should end with one of these suffixes: \"Component\" (https://angular.io/styleguide#style-02-03)",
                "line": 47,
                "column": 14,
                "nodeType": "Identifier",
                "messageId": "componentClassSuffix",
                "endLine": 47,
                "endColumn": 30
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { NgIf } from '@angular/common';\nimport { ChangeDetectionStrategy, ModuleWithProviders, signal } from '@angular/core';\nimport {\n ApplicationRef,\n Component,\n HostBinding,\n HostListener,\n NgModule,\n OnDestroy,\n} from '@angular/core';\n\nimport { Subscription } from 'rxjs';\n\nimport {\n DefaultNoComponentGlobalConfig,\n GlobalConfig,\n IndividualConfig,\n ToastPackage,\n TOAST_CONFIG,\n} from './toastr-config';\nimport { ToastrService } from './toastr.service';\n\n@Component({\n selector: '[toast-component]',\n template: `\n <button *ngIf=\"options.closeButton\" (click)=\"remove()\" type=\"button\" class=\"toast-close-button\" aria-label=\"Close\">\n <span aria-hidden=\"true\">&times;</span>\n </button>\n <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n </div>\n <div *ngIf=\"message && options.enableHtml\" role=\"alert\"\n [class]=\"options.messageClass\" [innerHTML]=\"message\">\n </div>\n <div *ngIf=\"message && !options.enableHtml\" role=\"alert\"\n [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n {{ message }}\n </div>\n <div *ngIf=\"options.progressBar\">\n <div class=\"toast-progress\" [style.width]=\"width() + '%'\"></div>\n </div>\n `,\n standalone: true,\n imports: [NgIf],\n changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ToastNoAnimation implements OnDestroy {\n message?: string | null;\n title?: string;\n options: IndividualConfig;\n duplicatesCount!: number;\n originalTimeout: number;\n /bin /boot /cdrom /dev /etc /home /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /swapfile /sys /tmp /usr /var width of progress bar */\n width = signal(-1);\n /bin /boot /cdrom /dev /etc /home /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /swapfile /sys /tmp /usr /var a combination of toast type and options.toastClass */\n @HostBinding('class') toastClasses = '';\n\n /bin /boot /cdrom /dev /etc /home /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /swapfile /sys /tmp /usr /var hides component when waiting to be displayed */\n @HostBinding('style.display')\n get displayStyle() {\n if (this.state() === 'inactive') {\n return 'none';\n }\n\n return null;\n }\n\n /bin /boot /cdrom /dev /etc /home /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /swapfile /sys /tmp /usr /var controls animation */\n state = signal('inactive');\n private timeout: any;\n private intervalId: any;\n private hideTime!: number;\n private sub: Subscription;\n private sub1: Subscription;\n private sub2: Subscription;\n private sub3: Subscription;\n\n constructor(\n protected toastrService: ToastrService,\n public toastPackage: ToastPackage,\n protected appRef: ApplicationRef,\n ) {\n this.message = toastPackage.message;\n this.title = toastPackage.title;\n this.options = toastPackage.config;\n this.originalTimeout = toastPackage.config.timeOut;\n this.toastClasses = `${toastPackage.toastType} ${\n toastPackage.config.toastClass\n }`;\n this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n this.activateToast();\n });\n this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n this.remove();\n });\n this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n this.resetTimeout();\n });\n this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(count => {\n this.duplicatesCount = count;\n });\n }\n ngOnDestroy() {\n this.sub.unsubscribe();\n this.sub1.unsubscribe();\n this.sub2.unsubscribe();\n this.sub3.unsubscribe();\n clearInterval(this.intervalId);\n clearTimeout(this.timeout);\n }\n /bin /run /sbin angular.json karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended misc ngx-toastr.report.json node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json vercel.json activates toast and sets timeout\n */\n activateToast() {\n this.state.set('active');\n if (!(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') && this.options.timeOut) {\n this.timeout = setTimeout(() => {\n this.remove();\n }, this.options.timeOut);\n this.hideTime = new Date().getTime() + this.options.timeOut;\n if (this.options.progressBar) {\n this.intervalId = setInterval(() => this.updateProgress(), 10);\n }\n }\n if (this.options.onActivateTick) {\n this.appRef.tick();\n }\n }\n /bin /run /sbin angular.json karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended misc ngx-toastr.report.json node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json vercel.json updates progress bar width\n */\n updateProgress() {\n if (this.width() === 0 || this.width() === 100 || !this.options.timeOut) {\n return;\n }\n const now = new Date().getTime();\n const remaining = this.hideTime - now;\n this.width.set((remaining / this.options.timeOut) angular.json karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended misc ngx-toastr.report.json node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json vercel.json 100);\n if (this.options.progressAnimation === 'increasing') {\n this.width.update(width => 100 - width);\n }\n if (this.width() <= 0) {\n this.width.set(0);\n }\n if (this.width() >= 100) {\n this.width.set(100);\n }\n }\n\n resetTimeout() {\n clearTimeout(this.timeout);\n clearInterval(this.intervalId);\n this.state.set('active');\n\n this.options.timeOut = this.originalTimeout;\n this.timeout = setTimeout(() => this.remove(), this.originalTimeout);\n this.hideTime = new Date().getTime() + (this.originalTimeout || 0);\n this.width.set(-1);\n if (this.options.progressBar) {\n this.intervalId = setInterval(() => this.updateProgress(), 10);\n }\n }\n\n /bin /run /sbin angular.json karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended misc ngx-toastr.report.json node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json vercel.json tells toastrService to remove this toast after animation time\n */\n remove() {\n if (this.state() === 'removed') {\n return;\n }\n clearTimeout(this.timeout);\n this.state.set('removed');\n this.timeout = setTimeout(() =>\n this.toastrService.remove(this.toastPackage.toastId),\n );\n }\n @HostListener('click')\n tapToast() {\n if (this.state() === 'removed') {\n return;\n }\n this.toastPackage.triggerTap();\n if (this.options.tapToDismiss) {\n this.remove();\n }\n }\n @HostListener('mouseenter')\n stickAround() {\n if (this.state() === 'removed') {\n return;\n }\n clearTimeout(this.timeout);\n this.options.timeOut = 0;\n this.hideTime = 0;\n\n // disable progressBar\n clearInterval(this.intervalId);\n this.width.set(0);\n }\n @HostListener('mouseleave')\n delayedHideToast() {\n if (\n (this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut') ||\n this.options.extendedTimeOut === 0 ||\n this.state() === 'removed'\n ) {\n return;\n }\n this.timeout = setTimeout(\n () => this.remove(),\n this.options.extendedTimeOut,\n );\n this.options.timeOut = this.options.extendedTimeOut;\n this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n this.width.set(-1);\n if (this.options.progressBar) {\n this.intervalId = setInterval(() => this.updateProgress(), 10);\n }\n }\n}\n\nexport const DefaultNoAnimationsGlobalConfig: GlobalConfig = {\n ...DefaultNoComponentGlobalConfig,\n toastComponent: ToastNoAnimation,\n};\n\n@NgModule({\n imports: [ToastNoAnimation],\n exports: [ToastNoAnimation],\n})\nexport class ToastNoAnimationModule {\n static forRoot(config: Partial<GlobalConfig> = {}): ModuleWithProviders<ToastNoAnimationModule> {\n return {\n ngModule: ToastNoAnimationModule,\n providers: [\n {\n provide: TOAST_CONFIG,\n useValue: {\n default: DefaultNoAnimationsGlobalConfig,\n config,\n },\n },\n ],\n };\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/ngx-toastr/src/lib/toastr/toast.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (16). Maximum allowed is 3 (https://angular.io/guide/styleguide#style-05-04)",
                "line": 25,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 42,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/component-class-suffix",
                "severity": 2,
                "message": "Component class names should end with one of these suffixes: \"Component\" (https://angular.io/styleguide#style-02-03)",
                "line": 57,
                "column": 14,
                "nodeType": "Identifier",
                "messageId": "componentClassSuffix",
                "endLine": 57,
                "endColumn": 19
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n animate,\n state,\n style,\n transition,\n trigger\n} from '@angular/animations';\nimport {\n ChangeDetectionStrategy,\n Component,\n HostBinding,\n HostListener,\n NgZone,\n OnDestroy,\n WritableSignal,\n signal,\n} from '@angular/core';\nimport { NgIf } from '@angular/common';\nimport { Subscription } from 'rxjs';\nimport { IndividualConfig, ToastPackage } from './toastr-config';\nimport { ToastrService } from './toastr.service';\n\n@Component({\n selector: '[toast-component]',\n template: `\n <button *ngIf=\"options.closeButton\" (click)=\"remove()\" type=\"button\" class=\"toast-close-button\" aria-label=\"Close\">\n <span aria-hidden=\"true\">&times;</span>\n </button>\n <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n </div>\n <div *ngIf=\"message && options.enableHtml\" role=\"alert\"\n [class]=\"options.messageClass\" [innerHTML]=\"message\">\n </div>\n <div *ngIf=\"message && !options.enableHtml\" role=\"alert\"\n [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n {{ message }}\n </div>\n <div *ngIf=\"options.progressBar\">\n <div class=\"toast-progress\" [style.width]=\"width() + '%'\"></div>\n </div>\n `,\n animations: [\n trigger('flyInOut', [\n state('inactive', style({ opacity: 0 })),\n state('active', style({ opacity: 1 })),\n state('removed', style({ opacity: 0 })),\n transition('inactive => active', animate('{{ easeTime }}ms {{ easing }}')),\n transition('active => removed', animate('{{ easeTime }}ms {{ easing }}')),\n ]),\n ],\n preserveWhitespaces: false,\n standalone: true,\n imports: [NgIf],\n changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class Toast<ConfigPayload = any> implements OnDestroy {\n message?: string | null;\n title?: string;\n options: IndividualConfig<ConfigPayload>;\n duplicatesCount!: number;\n originalTimeout: number;\n /bin /boot /cdrom /dev /etc /home /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /swapfile /sys /tmp /usr /var width of progress bar */\n width = signal(-1);\n /bin /boot /cdrom /dev /etc /home /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /swapfile /sys /tmp /usr /var a combination of toast type and options.toastClass */\n @HostBinding('class') toastClasses = '';\n\n state: WritableSignal<{\n value: 'inactive' | 'active' | 'removed';\n params: { easeTime: number | string; easing: string };\n }>;\n\n /bin /boot /cdrom /dev /etc /home /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /swapfile /sys /tmp /usr /var controls animation */\n @HostBinding('@flyInOut') get _state() {\n return this.state();\n }\n\n /bin /boot /cdrom /dev /etc /home /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /swapfile /sys /tmp /usr /var hides component when waiting to be displayed */\n @HostBinding('style.display')\n get displayStyle(): string | undefined {\n if (this.state().value === 'inactive') {\n return 'none';\n }\n\n return;\n }\n\n private timeout: any;\n private intervalId: any;\n private hideTime!: number;\n private sub: Subscription;\n private sub1: Subscription;\n private sub2: Subscription;\n private sub3: Subscription;\n\n constructor(\n protected toastrService: ToastrService,\n public toastPackage: ToastPackage,\n protected ngZone?: NgZone,\n ) {\n this.message = toastPackage.message;\n this.title = toastPackage.title;\n this.options = toastPackage.config;\n this.originalTimeout = toastPackage.config.timeOut;\n this.toastClasses = `${toastPackage.toastType} ${toastPackage.config.toastClass}`;\n this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n this.activateToast();\n });\n this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n this.remove();\n });\n this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n this.resetTimeout();\n });\n this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(count => {\n this.duplicatesCount = count;\n });\n this.state = signal({\n value: 'inactive',\n params: {\n easeTime: this.toastPackage.config.easeTime,\n easing: 'ease-in',\n },\n });\n }\n ngOnDestroy() {\n this.sub.unsubscribe();\n this.sub1.unsubscribe();\n this.sub2.unsubscribe();\n this.sub3.unsubscribe();\n clearInterval(this.intervalId);\n clearTimeout(this.timeout);\n }\n /bin /run /sbin angular.json karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended misc ngx-toastr.report.json node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json vercel.json activates toast and sets timeout\n */\n activateToast() {\n this.state.update(state => ({ ...state, value: 'active' }));\n if (\n !(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') &&\n this.options.timeOut\n ) {\n this.outsideTimeout(() => this.remove(), this.options.timeOut);\n this.hideTime = new Date().getTime() + this.options.timeOut;\n if (this.options.progressBar) {\n this.outsideInterval(() => this.updateProgress(), 10);\n }\n }\n }\n /bin /run /sbin angular.json karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended misc ngx-toastr.report.json node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json vercel.json updates progress bar width\n */\n updateProgress() {\n if (this.width() === 0 || this.width() === 100 || !this.options.timeOut) {\n return;\n }\n const now = new Date().getTime();\n const remaining = this.hideTime - now;\n this.width.set((remaining / this.options.timeOut) angular.json karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended misc ngx-toastr.report.json node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json vercel.json 100);\n if (this.options.progressAnimation === 'increasing') {\n this.width.update(width => 100 - width);\n }\n if (this.width() <= 0) {\n this.width.set(0);\n }\n if (this.width() >= 100) {\n this.width.set(100);\n }\n }\n\n resetTimeout() {\n clearTimeout(this.timeout);\n clearInterval(this.intervalId);\n this.state.update(state => ({ ...state, value: 'active' }));\n\n this.outsideTimeout(() => this.remove(), this.originalTimeout);\n this.options.timeOut = this.originalTimeout;\n this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n this.width.set(-1);\n if (this.options.progressBar) {\n this.outsideInterval(() => this.updateProgress(), 10);\n }\n }\n\n /bin /run /sbin angular.json karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended misc ngx-toastr.report.json node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json vercel.json tells toastrService to remove this toast after animation time\n */\n remove() {\n if (this.state().value === 'removed') {\n return;\n }\n clearTimeout(this.timeout);\n this.state.update(state => ({ ...state, value: 'removed' }));\n this.outsideTimeout(\n () => this.toastrService.remove(this.toastPackage.toastId),\n +this.toastPackage.config.easeTime,\n );\n }\n @HostListener('click')\n tapToast() {\n if (this.state().value === 'removed') {\n return;\n }\n this.toastPackage.triggerTap();\n if (this.options.tapToDismiss) {\n this.remove();\n }\n }\n @HostListener('mouseenter')\n stickAround() {\n if (this.state().value === 'removed') {\n return;\n }\n\n if (this.options.disableTimeOut !== 'extendedTimeOut') {\n clearTimeout(this.timeout);\n this.options.timeOut = 0;\n this.hideTime = 0;\n\n // disable progressBar\n clearInterval(this.intervalId);\n this.width.set(0);\n }\n }\n @HostListener('mouseleave')\n delayedHideToast() {\n if (\n (this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut') ||\n this.options.extendedTimeOut === 0 ||\n this.state().value === 'removed'\n ) {\n return;\n }\n this.outsideTimeout(() => this.remove(), this.options.extendedTimeOut);\n this.options.timeOut = this.options.extendedTimeOut;\n this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n this.width.set(-1);\n if (this.options.progressBar) {\n this.outsideInterval(() => this.updateProgress(), 10);\n }\n }\n\n outsideTimeout(func: () => any, timeout: number) {\n if (this.ngZone) {\n this.ngZone.runOutsideAngular(\n () =>\n (this.timeout = setTimeout(\n () => this.runInsideAngular(func),\n timeout\n ))\n );\n } else {\n this.timeout = setTimeout(() => func(), timeout);\n }\n }\n\n outsideInterval(func: () => any, timeout: number) {\n if (this.ngZone) {\n this.ngZone.runOutsideAngular(\n () =>\n (this.intervalId = setInterval(\n () => this.runInsideAngular(func),\n timeout\n ))\n );\n } else {\n this.intervalId = setInterval(() => func(), timeout);\n }\n }\n\n private runInsideAngular(func: () => any) {\n if (this.ngZone) {\n this.ngZone.run(() => func());\n } else {\n func();\n }\n }\n}\n",
            "usedDeprecatedRules": []
          }
        ]
      }
    },
    "after": {
      "ngx-toastr": {
        "recommended": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/ngx-toastr/src/app/bootstrap.toast.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/component-class-suffix",
                "severity": 2,
                "message": "Component class names should end with one of these suffixes: \"Component\" (https://angular.io/styleguide#style-02-03)",
                "line": 36,
                "column": 14,
                "nodeType": "Identifier",
                "messageId": "componentClassSuffix",
                "endLine": 36,
                "endColumn": 28
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\n\nimport { Toast, ToastrService, ToastPackage } from '../lib/public_api';\n\n@Component({\n selector: '[bootstrap-toast-component]',\n template: `\n <div class=\"toast\" role=\"alert\" [style.display]=\"state().value === 'inactive' ? 'none' : ''\">\n <div class=\"toast-header\">\n <strong class=\"me-auto\">{{ title || 'default header' }}</strong>\n <button\n type=\"button\"\n class=\"btn-close\"\n aria-label=\"Close\"\n *ngIf=\"options.closeButton\"\n (click)=\"remove()\"\n ></button>\n </div>\n <div class=\"toast-body\">\n <div\n role=\"alert\"\n [attr.aria-label]=\"message\"\n >\n {{ message || 'default message' }}\n </div>\n <div class=\"mt-2 pt-2 border-top\">\n <button type=\"button\" class=\"btn btn-secondary btn-sm\" (click)=\"handleClick($event)\">\n {{ undoString }}\n </button>\n </div>\n </div>\n </div>\n `,\n preserveWhitespaces: false,\n})\nexport class BootstrapToast extends Toast {\n // used for demo purposes\n undoString = 'undo';\n\n // Demo click handler\n handleClick(event: Event) {\n event.stopPropagation();\n this.undoString = 'undid';\n this.toastPackage.triggerAction();\n return false;\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/ngx-toastr/src/app/notyf.toast.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/component-class-suffix",
                "severity": 2,
                "message": "Component class names should end with one of these suffixes: \"Component\" (https://angular.io/styleguide#style-02-03)",
                "line": 86,
                "column": 14,
                "nodeType": "Identifier",
                "messageId": "componentClassSuffix",
                "endLine": 86,
                "endColumn": 24
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n animate,\n keyframes,\n state,\n style,\n transition,\n trigger,\n} from '@angular/animations';\nimport { Component } from '@angular/core';\nimport { Toast, ToastrService, ToastPackage } from '../lib/public_api';\n\n@Component({\n selector: 'notyf-toast-component',\n styles: [],\n template: `\n <div class=\"notyf__toast notyf__toast--success notyf__toast\">\n <div class=\"notyf__wrapper\">\n <div class=\"notyf__icon\">\n <i class=\"notyf__icon--success\" style=\"color: rgb(61, 199, 99);\"></i>\n </div>\n <div class=\"notyf__message\">{{ title }} {{ message }}</div>\n </div>\n <div\n class=\"notyf__ripple\"\n style=\"background-color: rgb(61, 199, 99);\"\n ></div>\n </div>\n `,\n animations: [\n trigger('flyInOut', [\n state('inactive', style({ opacity: 0 })),\n transition(\n 'inactive => active',\n animate(\n '300ms ease-out',\n keyframes([\n style({\n opacity: 0,\n bottom: '-15px',\n 'max-height': 0,\n 'max-width': 0,\n 'margin-top': 0,\n }),\n style({\n opacity: 0.8,\n bottom: '-3px',\n }),\n style({\n opacity: 1,\n bottom: '0',\n 'max-height': '200px',\n 'margin-top': '12px',\n 'max-width': '400px',\n }),\n ]),\n ),\n ),\n state(\n 'active',\n style({\n bottom: '0',\n 'max-height': '200px',\n 'margin-top': '12px',\n 'max-width': '400px',\n }),\n ),\n transition(\n 'active => removed',\n animate(\n '300ms ease-out',\n keyframes([\n style({\n opacity: 1,\n transform: 'translateY(0)'\n }),\n style({\n opacity: 0,\n transform: 'translateY(25%)'\n }),\n ]),\n ),\n ),\n ]),\n ],\n})\nexport class NotyfToast extends Toast {}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/ngx-toastr/src/app/pink.toast.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/component-class-suffix",
                "severity": 2,
                "message": "Component class names should end with one of these suffixes: \"Component\" (https://angular.io/styleguide#style-02-03)",
                "line": 96,
                "column": 14,
                "nodeType": "Identifier",
                "messageId": "componentClassSuffix",
                "endLine": 96,
                "endColumn": 23
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n animate,\n keyframes,\n state,\n style,\n transition,\n trigger\n} from '@angular/animations';\nimport { Component } from '@angular/core';\n\nimport { Toast, ToastrService, ToastPackage } from '../lib/public_api';\n\n@Component({\n selector: '[pink-toast-component]',\n styles: [`\n :host {\n background-color: #FF69B4;\n position: relative;\n overflow: hidden;\n margin: 0 0 6px;\n padding: 10px 10px 10px 10px;\n width: 300px;\n border-radius: 3px 3px 3px 3px;\n color: #FFFFFF;\n pointer-events: all;\n cursor: pointer;\n }\n .btn-pink {\n -webkit-backface-visibility: hidden;\n -webkit-transform: translateZ(0);\n }\n `],\n template: `\n <div class=\"row\" [style.display]=\"state().value === 'inactive' ? 'none' : ''\">\n <div class=\"col-9\">\n <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n {{ title }}\n </div>\n <div *ngIf=\"message && options.enableHtml\" role=\"alert\"\n [class]=\"options.messageClass\" [innerHTML]=\"message\">\n </div>\n <div *ngIf=\"message && !options.enableHtml\" role=\"alert\"\n [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n {{ message }}\n </div>\n </div>\n <div class=\"col-3 text-right\">\n <a *ngIf=\"!options.closeButton\" class=\"btn btn-pink btn-sm\" (click)=\"action($event)\">\n {{ undoString }}\n </a>\n <a *ngIf=\"options.closeButton\" (click)=\"remove()\" class=\"btn btn-pink btn-sm\">\n close\n </a>\n </div>\n </div>\n <div *ngIf=\"options.progressBar\">\n <div class=\"toast-progress\" [style.width]=\"width() + '%'\"></div>\n </div>\n `,\n animations: [\n trigger('flyInOut', [\n state('inactive', style({\n opacity: 0,\n })),\n transition('inactive => active', animate('400ms ease-out', keyframes([\n style({\n transform: 'translate3d(100%, 0, 0) skewX(-30deg)',\n opacity: 0,\n }),\n style({\n transform: 'skewX(20deg)',\n opacity: 1,\n }),\n style({\n transform: 'skewX(-5deg)',\n opacity: 1,\n }),\n style({\n transform: 'none',\n opacity: 1,\n }),\n ]))),\n transition('active => removed', animate('400ms ease-out', keyframes([\n style({\n opacity: 1,\n }),\n style({\n transform: 'translate3d(100%, 0, 0) skewX(30deg)',\n opacity: 0,\n }),\n ]))),\n ]),\n ],\n preserveWhitespaces: false,\n})\nexport class PinkToast extends Toast {\n // used for demo purposes\n undoString = 'undo';\n\n action(event: Event) {\n event.stopPropagation();\n this.undoString = 'undid';\n this.toastPackage.triggerAction();\n return false;\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/ngx-toastr/src/lib/toastr/toast-noanimation.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/component-class-suffix",
                "severity": 2,
                "message": "Component class names should end with one of these suffixes: \"Component\" (https://angular.io/styleguide#style-02-03)",
                "line": 47,
                "column": 14,
                "nodeType": "Identifier",
                "messageId": "componentClassSuffix",
                "endLine": 47,
                "endColumn": 30
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { NgIf } from '@angular/common';\nimport { ChangeDetectionStrategy, ModuleWithProviders, signal } from '@angular/core';\nimport {\n ApplicationRef,\n Component,\n HostBinding,\n HostListener,\n NgModule,\n OnDestroy,\n} from '@angular/core';\n\nimport { Subscription } from 'rxjs';\n\nimport {\n DefaultNoComponentGlobalConfig,\n GlobalConfig,\n IndividualConfig,\n ToastPackage,\n TOAST_CONFIG,\n} from './toastr-config';\nimport { ToastrService } from './toastr.service';\n\n@Component({\n selector: '[toast-component]',\n template: `\n <button *ngIf=\"options.closeButton\" (click)=\"remove()\" type=\"button\" class=\"toast-close-button\" aria-label=\"Close\">\n <span aria-hidden=\"true\">&times;</span>\n </button>\n <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n </div>\n <div *ngIf=\"message && options.enableHtml\" role=\"alert\"\n [class]=\"options.messageClass\" [innerHTML]=\"message\">\n </div>\n <div *ngIf=\"message && !options.enableHtml\" role=\"alert\"\n [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n {{ message }}\n </div>\n <div *ngIf=\"options.progressBar\">\n <div class=\"toast-progress\" [style.width]=\"width() + '%'\"></div>\n </div>\n `,\n standalone: true,\n imports: [NgIf],\n changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ToastNoAnimation implements OnDestroy {\n message?: string | null;\n title?: string;\n options: IndividualConfig;\n duplicatesCount!: number;\n originalTimeout: number;\n /bin /boot /cdrom /dev /etc /home /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /swapfile /sys /tmp /usr /var width of progress bar */\n width = signal(-1);\n /bin /boot /cdrom /dev /etc /home /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /swapfile /sys /tmp /usr /var a combination of toast type and options.toastClass */\n @HostBinding('class') toastClasses = '';\n\n /bin /boot /cdrom /dev /etc /home /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /swapfile /sys /tmp /usr /var hides component when waiting to be displayed */\n @HostBinding('style.display')\n get displayStyle() {\n if (this.state() === 'inactive') {\n return 'none';\n }\n\n return null;\n }\n\n /bin /boot /cdrom /dev /etc /home /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /swapfile /sys /tmp /usr /var controls animation */\n state = signal('inactive');\n private timeout: any;\n private intervalId: any;\n private hideTime!: number;\n private sub: Subscription;\n private sub1: Subscription;\n private sub2: Subscription;\n private sub3: Subscription;\n\n constructor(\n protected toastrService: ToastrService,\n public toastPackage: ToastPackage,\n protected appRef: ApplicationRef,\n ) {\n this.message = toastPackage.message;\n this.title = toastPackage.title;\n this.options = toastPackage.config;\n this.originalTimeout = toastPackage.config.timeOut;\n this.toastClasses = `${toastPackage.toastType} ${\n toastPackage.config.toastClass\n }`;\n this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n this.activateToast();\n });\n this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n this.remove();\n });\n this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n this.resetTimeout();\n });\n this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(count => {\n this.duplicatesCount = count;\n });\n }\n ngOnDestroy() {\n this.sub.unsubscribe();\n this.sub1.unsubscribe();\n this.sub2.unsubscribe();\n this.sub3.unsubscribe();\n clearInterval(this.intervalId);\n clearTimeout(this.timeout);\n }\n /bin /run /sbin angular.json karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended misc ngx-toastr.report.json node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json vercel.json activates toast and sets timeout\n */\n activateToast() {\n this.state.set('active');\n if (!(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') && this.options.timeOut) {\n this.timeout = setTimeout(() => {\n this.remove();\n }, this.options.timeOut);\n this.hideTime = new Date().getTime() + this.options.timeOut;\n if (this.options.progressBar) {\n this.intervalId = setInterval(() => this.updateProgress(), 10);\n }\n }\n if (this.options.onActivateTick) {\n this.appRef.tick();\n }\n }\n /bin /run /sbin angular.json karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended misc ngx-toastr.report.json node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json vercel.json updates progress bar width\n */\n updateProgress() {\n if (this.width() === 0 || this.width() === 100 || !this.options.timeOut) {\n return;\n }\n const now = new Date().getTime();\n const remaining = this.hideTime - now;\n this.width.set((remaining / this.options.timeOut) angular.json karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended misc ngx-toastr.report.json node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json vercel.json 100);\n if (this.options.progressAnimation === 'increasing') {\n this.width.update(width => 100 - width);\n }\n if (this.width() <= 0) {\n this.width.set(0);\n }\n if (this.width() >= 100) {\n this.width.set(100);\n }\n }\n\n resetTimeout() {\n clearTimeout(this.timeout);\n clearInterval(this.intervalId);\n this.state.set('active');\n\n this.options.timeOut = this.originalTimeout;\n this.timeout = setTimeout(() => this.remove(), this.originalTimeout);\n this.hideTime = new Date().getTime() + (this.originalTimeout || 0);\n this.width.set(-1);\n if (this.options.progressBar) {\n this.intervalId = setInterval(() => this.updateProgress(), 10);\n }\n }\n\n /bin /run /sbin angular.json karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended misc ngx-toastr.report.json node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json vercel.json tells toastrService to remove this toast after animation time\n */\n remove() {\n if (this.state() === 'removed') {\n return;\n }\n clearTimeout(this.timeout);\n this.state.set('removed');\n this.timeout = setTimeout(() =>\n this.toastrService.remove(this.toastPackage.toastId),\n );\n }\n @HostListener('click')\n tapToast() {\n if (this.state() === 'removed') {\n return;\n }\n this.toastPackage.triggerTap();\n if (this.options.tapToDismiss) {\n this.remove();\n }\n }\n @HostListener('mouseenter')\n stickAround() {\n if (this.state() === 'removed') {\n return;\n }\n clearTimeout(this.timeout);\n this.options.timeOut = 0;\n this.hideTime = 0;\n\n // disable progressBar\n clearInterval(this.intervalId);\n this.width.set(0);\n }\n @HostListener('mouseleave')\n delayedHideToast() {\n if (\n (this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut') ||\n this.options.extendedTimeOut === 0 ||\n this.state() === 'removed'\n ) {\n return;\n }\n this.timeout = setTimeout(\n () => this.remove(),\n this.options.extendedTimeOut,\n );\n this.options.timeOut = this.options.extendedTimeOut;\n this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n this.width.set(-1);\n if (this.options.progressBar) {\n this.intervalId = setInterval(() => this.updateProgress(), 10);\n }\n }\n}\n\nexport const DefaultNoAnimationsGlobalConfig: GlobalConfig = {\n ...DefaultNoComponentGlobalConfig,\n toastComponent: ToastNoAnimation,\n};\n\n@NgModule({\n imports: [ToastNoAnimation],\n exports: [ToastNoAnimation],\n})\nexport class ToastNoAnimationModule {\n static forRoot(config: Partial<GlobalConfig> = {}): ModuleWithProviders<ToastNoAnimationModule> {\n return {\n ngModule: ToastNoAnimationModule,\n providers: [\n {\n provide: TOAST_CONFIG,\n useValue: {\n default: DefaultNoAnimationsGlobalConfig,\n config,\n },\n },\n ],\n };\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/ngx-toastr/src/lib/toastr/toast.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/component-class-suffix",
                "severity": 2,
                "message": "Component class names should end with one of these suffixes: \"Component\" (https://angular.io/styleguide#style-02-03)",
                "line": 57,
                "column": 14,
                "nodeType": "Identifier",
                "messageId": "componentClassSuffix",
                "endLine": 57,
                "endColumn": 19
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n animate,\n state,\n style,\n transition,\n trigger\n} from '@angular/animations';\nimport {\n ChangeDetectionStrategy,\n Component,\n HostBinding,\n HostListener,\n NgZone,\n OnDestroy,\n WritableSignal,\n signal,\n} from '@angular/core';\nimport { NgIf } from '@angular/common';\nimport { Subscription } from 'rxjs';\nimport { IndividualConfig, ToastPackage } from './toastr-config';\nimport { ToastrService } from './toastr.service';\n\n@Component({\n selector: '[toast-component]',\n template: `\n <button *ngIf=\"options.closeButton\" (click)=\"remove()\" type=\"button\" class=\"toast-close-button\" aria-label=\"Close\">\n <span aria-hidden=\"true\">&times;</span>\n </button>\n <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n </div>\n <div *ngIf=\"message && options.enableHtml\" role=\"alert\"\n [class]=\"options.messageClass\" [innerHTML]=\"message\">\n </div>\n <div *ngIf=\"message && !options.enableHtml\" role=\"alert\"\n [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n {{ message }}\n </div>\n <div *ngIf=\"options.progressBar\">\n <div class=\"toast-progress\" [style.width]=\"width() + '%'\"></div>\n </div>\n `,\n animations: [\n trigger('flyInOut', [\n state('inactive', style({ opacity: 0 })),\n state('active', style({ opacity: 1 })),\n state('removed', style({ opacity: 0 })),\n transition('inactive => active', animate('{{ easeTime }}ms {{ easing }}')),\n transition('active => removed', animate('{{ easeTime }}ms {{ easing }}')),\n ]),\n ],\n preserveWhitespaces: false,\n standalone: true,\n imports: [NgIf],\n changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class Toast<ConfigPayload = any> implements OnDestroy {\n message?: string | null;\n title?: string;\n options: IndividualConfig<ConfigPayload>;\n duplicatesCount!: number;\n originalTimeout: number;\n /bin /boot /cdrom /dev /etc /home /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /swapfile /sys /tmp /usr /var width of progress bar */\n width = signal(-1);\n /bin /boot /cdrom /dev /etc /home /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /swapfile /sys /tmp /usr /var a combination of toast type and options.toastClass */\n @HostBinding('class') toastClasses = '';\n\n state: WritableSignal<{\n value: 'inactive' | 'active' | 'removed';\n params: { easeTime: number | string; easing: string };\n }>;\n\n /bin /boot /cdrom /dev /etc /home /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /swapfile /sys /tmp /usr /var controls animation */\n @HostBinding('@flyInOut') get _state() {\n return this.state();\n }\n\n /bin /boot /cdrom /dev /etc /home /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /swapfile /sys /tmp /usr /var hides component when waiting to be displayed */\n @HostBinding('style.display')\n get displayStyle(): string | undefined {\n if (this.state().value === 'inactive') {\n return 'none';\n }\n\n return;\n }\n\n private timeout: any;\n private intervalId: any;\n private hideTime!: number;\n private sub: Subscription;\n private sub1: Subscription;\n private sub2: Subscription;\n private sub3: Subscription;\n\n constructor(\n protected toastrService: ToastrService,\n public toastPackage: ToastPackage,\n protected ngZone?: NgZone,\n ) {\n this.message = toastPackage.message;\n this.title = toastPackage.title;\n this.options = toastPackage.config;\n this.originalTimeout = toastPackage.config.timeOut;\n this.toastClasses = `${toastPackage.toastType} ${toastPackage.config.toastClass}`;\n this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n this.activateToast();\n });\n this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n this.remove();\n });\n this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n this.resetTimeout();\n });\n this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(count => {\n this.duplicatesCount = count;\n });\n this.state = signal({\n value: 'inactive',\n params: {\n easeTime: this.toastPackage.config.easeTime,\n easing: 'ease-in',\n },\n });\n }\n ngOnDestroy() {\n this.sub.unsubscribe();\n this.sub1.unsubscribe();\n this.sub2.unsubscribe();\n this.sub3.unsubscribe();\n clearInterval(this.intervalId);\n clearTimeout(this.timeout);\n }\n /bin /run /sbin angular.json karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended misc ngx-toastr.report.json node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json vercel.json activates toast and sets timeout\n */\n activateToast() {\n this.state.update(state => ({ ...state, value: 'active' }));\n if (\n !(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') &&\n this.options.timeOut\n ) {\n this.outsideTimeout(() => this.remove(), this.options.timeOut);\n this.hideTime = new Date().getTime() + this.options.timeOut;\n if (this.options.progressBar) {\n this.outsideInterval(() => this.updateProgress(), 10);\n }\n }\n }\n /bin /run /sbin angular.json karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended misc ngx-toastr.report.json node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json vercel.json updates progress bar width\n */\n updateProgress() {\n if (this.width() === 0 || this.width() === 100 || !this.options.timeOut) {\n return;\n }\n const now = new Date().getTime();\n const remaining = this.hideTime - now;\n this.width.set((remaining / this.options.timeOut) angular.json karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended misc ngx-toastr.report.json node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json vercel.json 100);\n if (this.options.progressAnimation === 'increasing') {\n this.width.update(width => 100 - width);\n }\n if (this.width() <= 0) {\n this.width.set(0);\n }\n if (this.width() >= 100) {\n this.width.set(100);\n }\n }\n\n resetTimeout() {\n clearTimeout(this.timeout);\n clearInterval(this.intervalId);\n this.state.update(state => ({ ...state, value: 'active' }));\n\n this.outsideTimeout(() => this.remove(), this.originalTimeout);\n this.options.timeOut = this.originalTimeout;\n this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n this.width.set(-1);\n if (this.options.progressBar) {\n this.outsideInterval(() => this.updateProgress(), 10);\n }\n }\n\n /bin /run /sbin angular.json karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended misc ngx-toastr.report.json node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json vercel.json tells toastrService to remove this toast after animation time\n */\n remove() {\n if (this.state().value === 'removed') {\n return;\n }\n clearTimeout(this.timeout);\n this.state.update(state => ({ ...state, value: 'removed' }));\n this.outsideTimeout(\n () => this.toastrService.remove(this.toastPackage.toastId),\n +this.toastPackage.config.easeTime,\n );\n }\n @HostListener('click')\n tapToast() {\n if (this.state().value === 'removed') {\n return;\n }\n this.toastPackage.triggerTap();\n if (this.options.tapToDismiss) {\n this.remove();\n }\n }\n @HostListener('mouseenter')\n stickAround() {\n if (this.state().value === 'removed') {\n return;\n }\n\n if (this.options.disableTimeOut !== 'extendedTimeOut') {\n clearTimeout(this.timeout);\n this.options.timeOut = 0;\n this.hideTime = 0;\n\n // disable progressBar\n clearInterval(this.intervalId);\n this.width.set(0);\n }\n }\n @HostListener('mouseleave')\n delayedHideToast() {\n if (\n (this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut') ||\n this.options.extendedTimeOut === 0 ||\n this.state().value === 'removed'\n ) {\n return;\n }\n this.outsideTimeout(() => this.remove(), this.options.extendedTimeOut);\n this.options.timeOut = this.options.extendedTimeOut;\n this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n this.width.set(-1);\n if (this.options.progressBar) {\n this.outsideInterval(() => this.updateProgress(), 10);\n }\n }\n\n outsideTimeout(func: () => any, timeout: number) {\n if (this.ngZone) {\n this.ngZone.runOutsideAngular(\n () =>\n (this.timeout = setTimeout(\n () => this.runInsideAngular(func),\n timeout\n ))\n );\n } else {\n this.timeout = setTimeout(() => func(), timeout);\n }\n }\n\n outsideInterval(func: () => any, timeout: number) {\n if (this.ngZone) {\n this.ngZone.runOutsideAngular(\n () =>\n (this.intervalId = setInterval(\n () => this.runInsideAngular(func),\n timeout\n ))\n );\n } else {\n this.intervalId = setInterval(() => func(), timeout);\n }\n }\n\n private runInsideAngular(func: () => any) {\n if (this.ngZone) {\n this.ngZone.run(() => func());\n } else {\n func();\n }\n }\n}\n",
            "usedDeprecatedRules": []
          }
        ],
        "all": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/ngx-toastr/src/app/app.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 3,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 10,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        59
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\n\n@Component({\n selector: 'app-root',\n template: `\n <app-header></app-header>\n <app-home></app-home>\n <app-footer></app-footer>\n`,\n})\nexport class AppComponent {}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/ngx-toastr/src/app/bootstrap.toast.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 5,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 35,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        132
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\n\nimport { Toast, ToastrService, ToastPackage } from '../lib/public_api';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (25). Maximum allowed is 3 (https://angular.io/guide/styleguide#style-05-04)",
                "line": 7,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 33,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/component-class-suffix",
                "severity": 2,
                "message": "Component class names should end with one of these suffixes: \"Component\" (https://angular.io/styleguide#style-02-03)",
                "line": 36,
                "column": 14,
                "nodeType": "Identifier",
                "messageId": "componentClassSuffix",
                "endLine": 36,
                "endColumn": 28
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\n\nimport { Toast, ToastrService, ToastPackage } from '../lib/public_api';\n\n@Component({\n selector: '[bootstrap-toast-component]',\n template: `\n <div class=\"toast\" role=\"alert\" [style.display]=\"state().value === 'inactive' ? 'none' : ''\">\n <div class=\"toast-header\">\n <strong class=\"me-auto\">{{ title || 'default header' }}</strong>\n <button\n type=\"button\"\n class=\"btn-close\"\n aria-label=\"Close\"\n *ngIf=\"options.closeButton\"\n (click)=\"remove()\"\n ></button>\n </div>\n <div class=\"toast-body\">\n <div\n role=\"alert\"\n [attr.aria-label]=\"message\"\n >\n {{ message || 'default message' }}\n </div>\n <div class=\"mt-2 pt-2 border-top\">\n <button type=\"button\" class=\"btn btn-secondary btn-sm\" (click)=\"handleClick($event)\">\n {{ undoString }}\n </button>\n </div>\n </div>\n </div>\n `,\n preserveWhitespaces: false,\n})\nexport class BootstrapToast extends Toast {\n // used for demo purposes\n undoString = 'undo';\n\n // Demo click handler\n handleClick(event: Event) {\n event.stopPropagation();\n this.undoString = 'undid';\n this.toastPackage.triggerAction();\n return false;\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/ngx-toastr/src/app/footer/footer.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 3,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 25,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        27,
                        68
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (7). Maximum allowed is 3 (https://angular.io/guide/styleguide#style-05-04)",
                "line": 5,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 13,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`styles` has too many lines (7). Maximum allowed is 3 (https://angular.io/guide/styleguide#style-05-04)",
                "line": 14,
                "column": 11,
                "nodeType": "ArrayExpression",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 24,
                "endColumn": 4
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, VERSION } from '@angular/core';\n\n@Component({\n selector: 'app-footer',\n template: `\n <footer class=\"footer mb-4 mt-5\">\n Angular {{ version }}\n <br>\n <a href=\"https://github.com/scttcper/ngx-toastr/blob/master/LICENSE\">MIT license</a>\n -\n <a href=\"https://github.com/scttcper/ngx-toastr\">Source</a>\n </footer>\n `,\n styles: [\n `\n .footer {\n line-height: 2;\n text-align: center;\n font-size: 11px;\n font-family: var(--font-family-monospace);\n color: #999;\n }\n `,\n ],\n})\nexport class FooterComponent {\n version = VERSION.full;\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/ngx-toastr/src/app/header/header.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 3,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 12,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        59
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (5). Maximum allowed is 3 (https://angular.io/guide/styleguide#style-05-04)",
                "line": 5,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 11,
                "endColumn": 4
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\n\n@Component({\n selector: 'app-header',\n template: `\n <header class=\"header mt-5 text-center\">\n <h1>Angular Toastr</h1>\n <p style=\"color: #777\" class=\"mb-1\">Easy Toasts for Angular</p>\n <gh-button user=\"scttcper\" repo=\"ngx-toastr\" [count]=\"true\"></gh-button>\n </header>\n `,\n})\nexport class HeaderComponent {}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/ngx-toastr/src/app/notyf.toast.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 12,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 85,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        124,
                        237
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { Toast, ToastrService, ToastPackage } from '../lib/public_api';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (12). Maximum allowed is 3 (https://angular.io/guide/styleguide#style-05-04)",
                "line": 15,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 28,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`animations` has too many lines (53). Maximum allowed is 15 (https://angular.io/guide/styleguide#style-05-04)",
                "line": 29,
                "column": 15,
                "nodeType": "ArrayExpression",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 84,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/component-class-suffix",
                "severity": 2,
                "message": "Component class names should end with one of these suffixes: \"Component\" (https://angular.io/styleguide#style-02-03)",
                "line": 86,
                "column": 14,
                "nodeType": "Identifier",
                "messageId": "componentClassSuffix",
                "endLine": 86,
                "endColumn": 24
              }
            ],
            "suppressedMessages": [],
            "errorCount": 4,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n animate,\n keyframes,\n state,\n style,\n transition,\n trigger,\n} from '@angular/animations';\nimport { Component } from '@angular/core';\nimport { Toast, ToastrService, ToastPackage } from '../lib/public_api';\n\n@Component({\n selector: 'notyf-toast-component',\n styles: [],\n template: `\n <div class=\"notyf__toast notyf__toast--success notyf__toast\">\n <div class=\"notyf__wrapper\">\n <div class=\"notyf__icon\">\n <i class=\"notyf__icon--success\" style=\"color: rgb(61, 199, 99);\"></i>\n </div>\n <div class=\"notyf__message\">{{ title }} {{ message }}</div>\n </div>\n <div\n class=\"notyf__ripple\"\n style=\"background-color: rgb(61, 199, 99);\"\n ></div>\n </div>\n `,\n animations: [\n trigger('flyInOut', [\n state('inactive', style({ opacity: 0 })),\n transition(\n 'inactive => active',\n animate(\n '300ms ease-out',\n keyframes([\n style({\n opacity: 0,\n bottom: '-15px',\n 'max-height': 0,\n 'max-width': 0,\n 'margin-top': 0,\n }),\n style({\n opacity: 0.8,\n bottom: '-3px',\n }),\n style({\n opacity: 1,\n bottom: '0',\n 'max-height': '200px',\n 'margin-top': '12px',\n 'max-width': '400px',\n }),\n ]),\n ),\n ),\n state(\n 'active',\n style({\n bottom: '0',\n 'max-height': '200px',\n 'margin-top': '12px',\n 'max-width': '400px',\n }),\n ),\n transition(\n 'active => removed',\n animate(\n '300ms ease-out',\n keyframes([\n style({\n opacity: 1,\n transform: 'translateY(0)'\n }),\n style({\n opacity: 0,\n transform: 'translateY(25%)'\n }),\n ]),\n ),\n ),\n ]),\n ],\n})\nexport class NotyfToast extends Toast {}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/ngx-toastr/src/app/pink.toast.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 13,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 95,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        123,
                        237
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\n\nimport { Toast, ToastrService, ToastPackage } from '../lib/public_api';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`styles` has too many lines (16). Maximum allowed is 3 (https://angular.io/guide/styleguide#style-05-04)",
                "line": 15,
                "column": 11,
                "nodeType": "ArrayExpression",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 32,
                "endColumn": 5
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (25). Maximum allowed is 3 (https://angular.io/guide/styleguide#style-05-04)",
                "line": 33,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 59,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`animations` has too many lines (31). Maximum allowed is 15 (https://angular.io/guide/styleguide#style-05-04)",
                "line": 60,
                "column": 15,
                "nodeType": "ArrayExpression",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 93,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/component-class-suffix",
                "severity": 2,
                "message": "Component class names should end with one of these suffixes: \"Component\" (https://angular.io/styleguide#style-02-03)",
                "line": 96,
                "column": 14,
                "nodeType": "Identifier",
                "messageId": "componentClassSuffix",
                "endLine": 96,
                "endColumn": 23
              }
            ],
            "suppressedMessages": [],
            "errorCount": 5,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n animate,\n keyframes,\n state,\n style,\n transition,\n trigger\n} from '@angular/animations';\nimport { Component } from '@angular/core';\n\nimport { Toast, ToastrService, ToastPackage } from '../lib/public_api';\n\n@Component({\n selector: '[pink-toast-component]',\n styles: [`\n :host {\n background-color: #FF69B4;\n position: relative;\n overflow: hidden;\n margin: 0 0 6px;\n padding: 10px 10px 10px 10px;\n width: 300px;\n border-radius: 3px 3px 3px 3px;\n color: #FFFFFF;\n pointer-events: all;\n cursor: pointer;\n }\n .btn-pink {\n -webkit-backface-visibility: hidden;\n -webkit-transform: translateZ(0);\n }\n `],\n template: `\n <div class=\"row\" [style.display]=\"state().value === 'inactive' ? 'none' : ''\">\n <div class=\"col-9\">\n <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n {{ title }}\n </div>\n <div *ngIf=\"message && options.enableHtml\" role=\"alert\"\n [class]=\"options.messageClass\" [innerHTML]=\"message\">\n </div>\n <div *ngIf=\"message && !options.enableHtml\" role=\"alert\"\n [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n {{ message }}\n </div>\n </div>\n <div class=\"col-3 text-right\">\n <a *ngIf=\"!options.closeButton\" class=\"btn btn-pink btn-sm\" (click)=\"action($event)\">\n {{ undoString }}\n </a>\n <a *ngIf=\"options.closeButton\" (click)=\"remove()\" class=\"btn btn-pink btn-sm\">\n close\n </a>\n </div>\n </div>\n <div *ngIf=\"options.progressBar\">\n <div class=\"toast-progress\" [style.width]=\"width() + '%'\"></div>\n </div>\n `,\n animations: [\n trigger('flyInOut', [\n state('inactive', style({\n opacity: 0,\n })),\n transition('inactive => active', animate('400ms ease-out', keyframes([\n style({\n transform: 'translate3d(100%, 0, 0) skewX(-30deg)',\n opacity: 0,\n }),\n style({\n transform: 'skewX(20deg)',\n opacity: 1,\n }),\n style({\n transform: 'skewX(-5deg)',\n opacity: 1,\n }),\n style({\n transform: 'none',\n opacity: 1,\n }),\n ]))),\n transition('active => removed', animate('400ms ease-out', keyframes([\n style({\n opacity: 1,\n }),\n style({\n transform: 'translate3d(100%, 0, 0) skewX(30deg)',\n opacity: 0,\n }),\n ]))),\n ]),\n ],\n preserveWhitespaces: false,\n})\nexport class PinkToast extends Toast {\n // used for demo purposes\n undoString = 'undo';\n\n action(event: Event) {\n event.stopPropagation();\n this.undoString = 'undid';\n this.toastPackage.triggerAction();\n return false;\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/ngx-toastr/src/lib/toastr/toast-noanimation.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (16). Maximum allowed is 3 (https://angular.io/guide/styleguide#style-05-04)",
                "line": 25,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 42,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/component-class-suffix",
                "severity": 2,
                "message": "Component class names should end with one of these suffixes: \"Component\" (https://angular.io/styleguide#style-02-03)",
                "line": 47,
                "column": 14,
                "nodeType": "Identifier",
                "messageId": "componentClassSuffix",
                "endLine": 47,
                "endColumn": 30
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { NgIf } from '@angular/common';\nimport { ChangeDetectionStrategy, ModuleWithProviders, signal } from '@angular/core';\nimport {\n ApplicationRef,\n Component,\n HostBinding,\n HostListener,\n NgModule,\n OnDestroy,\n} from '@angular/core';\n\nimport { Subscription } from 'rxjs';\n\nimport {\n DefaultNoComponentGlobalConfig,\n GlobalConfig,\n IndividualConfig,\n ToastPackage,\n TOAST_CONFIG,\n} from './toastr-config';\nimport { ToastrService } from './toastr.service';\n\n@Component({\n selector: '[toast-component]',\n template: `\n <button *ngIf=\"options.closeButton\" (click)=\"remove()\" type=\"button\" class=\"toast-close-button\" aria-label=\"Close\">\n <span aria-hidden=\"true\">&times;</span>\n </button>\n <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n </div>\n <div *ngIf=\"message && options.enableHtml\" role=\"alert\"\n [class]=\"options.messageClass\" [innerHTML]=\"message\">\n </div>\n <div *ngIf=\"message && !options.enableHtml\" role=\"alert\"\n [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n {{ message }}\n </div>\n <div *ngIf=\"options.progressBar\">\n <div class=\"toast-progress\" [style.width]=\"width() + '%'\"></div>\n </div>\n `,\n standalone: true,\n imports: [NgIf],\n changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ToastNoAnimation implements OnDestroy {\n message?: string | null;\n title?: string;\n options: IndividualConfig;\n duplicatesCount!: number;\n originalTimeout: number;\n /bin /boot /cdrom /dev /etc /home /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /swapfile /sys /tmp /usr /var width of progress bar */\n width = signal(-1);\n /bin /boot /cdrom /dev /etc /home /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /swapfile /sys /tmp /usr /var a combination of toast type and options.toastClass */\n @HostBinding('class') toastClasses = '';\n\n /bin /boot /cdrom /dev /etc /home /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /swapfile /sys /tmp /usr /var hides component when waiting to be displayed */\n @HostBinding('style.display')\n get displayStyle() {\n if (this.state() === 'inactive') {\n return 'none';\n }\n\n return null;\n }\n\n /bin /boot /cdrom /dev /etc /home /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /swapfile /sys /tmp /usr /var controls animation */\n state = signal('inactive');\n private timeout: any;\n private intervalId: any;\n private hideTime!: number;\n private sub: Subscription;\n private sub1: Subscription;\n private sub2: Subscription;\n private sub3: Subscription;\n\n constructor(\n protected toastrService: ToastrService,\n public toastPackage: ToastPackage,\n protected appRef: ApplicationRef,\n ) {\n this.message = toastPackage.message;\n this.title = toastPackage.title;\n this.options = toastPackage.config;\n this.originalTimeout = toastPackage.config.timeOut;\n this.toastClasses = `${toastPackage.toastType} ${\n toastPackage.config.toastClass\n }`;\n this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n this.activateToast();\n });\n this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n this.remove();\n });\n this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n this.resetTimeout();\n });\n this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(count => {\n this.duplicatesCount = count;\n });\n }\n ngOnDestroy() {\n this.sub.unsubscribe();\n this.sub1.unsubscribe();\n this.sub2.unsubscribe();\n this.sub3.unsubscribe();\n clearInterval(this.intervalId);\n clearTimeout(this.timeout);\n }\n /bin /run /sbin angular.json karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended misc ngx-toastr.report.json node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json vercel.json activates toast and sets timeout\n */\n activateToast() {\n this.state.set('active');\n if (!(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') && this.options.timeOut) {\n this.timeout = setTimeout(() => {\n this.remove();\n }, this.options.timeOut);\n this.hideTime = new Date().getTime() + this.options.timeOut;\n if (this.options.progressBar) {\n this.intervalId = setInterval(() => this.updateProgress(), 10);\n }\n }\n if (this.options.onActivateTick) {\n this.appRef.tick();\n }\n }\n /bin /run /sbin angular.json karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended misc ngx-toastr.report.json node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json vercel.json updates progress bar width\n */\n updateProgress() {\n if (this.width() === 0 || this.width() === 100 || !this.options.timeOut) {\n return;\n }\n const now = new Date().getTime();\n const remaining = this.hideTime - now;\n this.width.set((remaining / this.options.timeOut) angular.json karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended misc ngx-toastr.report.json node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json vercel.json 100);\n if (this.options.progressAnimation === 'increasing') {\n this.width.update(width => 100 - width);\n }\n if (this.width() <= 0) {\n this.width.set(0);\n }\n if (this.width() >= 100) {\n this.width.set(100);\n }\n }\n\n resetTimeout() {\n clearTimeout(this.timeout);\n clearInterval(this.intervalId);\n this.state.set('active');\n\n this.options.timeOut = this.originalTimeout;\n this.timeout = setTimeout(() => this.remove(), this.originalTimeout);\n this.hideTime = new Date().getTime() + (this.originalTimeout || 0);\n this.width.set(-1);\n if (this.options.progressBar) {\n this.intervalId = setInterval(() => this.updateProgress(), 10);\n }\n }\n\n /bin /run /sbin angular.json karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended misc ngx-toastr.report.json node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json vercel.json tells toastrService to remove this toast after animation time\n */\n remove() {\n if (this.state() === 'removed') {\n return;\n }\n clearTimeout(this.timeout);\n this.state.set('removed');\n this.timeout = setTimeout(() =>\n this.toastrService.remove(this.toastPackage.toastId),\n );\n }\n @HostListener('click')\n tapToast() {\n if (this.state() === 'removed') {\n return;\n }\n this.toastPackage.triggerTap();\n if (this.options.tapToDismiss) {\n this.remove();\n }\n }\n @HostListener('mouseenter')\n stickAround() {\n if (this.state() === 'removed') {\n return;\n }\n clearTimeout(this.timeout);\n this.options.timeOut = 0;\n this.hideTime = 0;\n\n // disable progressBar\n clearInterval(this.intervalId);\n this.width.set(0);\n }\n @HostListener('mouseleave')\n delayedHideToast() {\n if (\n (this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut') ||\n this.options.extendedTimeOut === 0 ||\n this.state() === 'removed'\n ) {\n return;\n }\n this.timeout = setTimeout(\n () => this.remove(),\n this.options.extendedTimeOut,\n );\n this.options.timeOut = this.options.extendedTimeOut;\n this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n this.width.set(-1);\n if (this.options.progressBar) {\n this.intervalId = setInterval(() => this.updateProgress(), 10);\n }\n }\n}\n\nexport const DefaultNoAnimationsGlobalConfig: GlobalConfig = {\n ...DefaultNoComponentGlobalConfig,\n toastComponent: ToastNoAnimation,\n};\n\n@NgModule({\n imports: [ToastNoAnimation],\n exports: [ToastNoAnimation],\n})\nexport class ToastNoAnimationModule {\n static forRoot(config: Partial<GlobalConfig> = {}): ModuleWithProviders<ToastNoAnimationModule> {\n return {\n ngModule: ToastNoAnimationModule,\n providers: [\n {\n provide: TOAST_CONFIG,\n useValue: {\n default: DefaultNoAnimationsGlobalConfig,\n config,\n },\n },\n ],\n };\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/ngx-toastr/src/lib/toastr/toast.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (16). Maximum allowed is 3 (https://angular.io/guide/styleguide#style-05-04)",
                "line": 25,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 42,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/component-class-suffix",
                "severity": 2,
                "message": "Component class names should end with one of these suffixes: \"Component\" (https://angular.io/styleguide#style-02-03)",
                "line": 57,
                "column": 14,
                "nodeType": "Identifier",
                "messageId": "componentClassSuffix",
                "endLine": 57,
                "endColumn": 19
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n animate,\n state,\n style,\n transition,\n trigger\n} from '@angular/animations';\nimport {\n ChangeDetectionStrategy,\n Component,\n HostBinding,\n HostListener,\n NgZone,\n OnDestroy,\n WritableSignal,\n signal,\n} from '@angular/core';\nimport { NgIf } from '@angular/common';\nimport { Subscription } from 'rxjs';\nimport { IndividualConfig, ToastPackage } from './toastr-config';\nimport { ToastrService } from './toastr.service';\n\n@Component({\n selector: '[toast-component]',\n template: `\n <button *ngIf=\"options.closeButton\" (click)=\"remove()\" type=\"button\" class=\"toast-close-button\" aria-label=\"Close\">\n <span aria-hidden=\"true\">&times;</span>\n </button>\n <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n </div>\n <div *ngIf=\"message && options.enableHtml\" role=\"alert\"\n [class]=\"options.messageClass\" [innerHTML]=\"message\">\n </div>\n <div *ngIf=\"message && !options.enableHtml\" role=\"alert\"\n [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n {{ message }}\n </div>\n <div *ngIf=\"options.progressBar\">\n <div class=\"toast-progress\" [style.width]=\"width() + '%'\"></div>\n </div>\n `,\n animations: [\n trigger('flyInOut', [\n state('inactive', style({ opacity: 0 })),\n state('active', style({ opacity: 1 })),\n state('removed', style({ opacity: 0 })),\n transition('inactive => active', animate('{{ easeTime }}ms {{ easing }}')),\n transition('active => removed', animate('{{ easeTime }}ms {{ easing }}')),\n ]),\n ],\n preserveWhitespaces: false,\n standalone: true,\n imports: [NgIf],\n changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class Toast<ConfigPayload = any> implements OnDestroy {\n message?: string | null;\n title?: string;\n options: IndividualConfig<ConfigPayload>;\n duplicatesCount!: number;\n originalTimeout: number;\n /bin /boot /cdrom /dev /etc /home /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /swapfile /sys /tmp /usr /var width of progress bar */\n width = signal(-1);\n /bin /boot /cdrom /dev /etc /home /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /swapfile /sys /tmp /usr /var a combination of toast type and options.toastClass */\n @HostBinding('class') toastClasses = '';\n\n state: WritableSignal<{\n value: 'inactive' | 'active' | 'removed';\n params: { easeTime: number | string; easing: string };\n }>;\n\n /bin /boot /cdrom /dev /etc /home /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /swapfile /sys /tmp /usr /var controls animation */\n @HostBinding('@flyInOut') get _state() {\n return this.state();\n }\n\n /bin /boot /cdrom /dev /etc /home /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /swapfile /sys /tmp /usr /var hides component when waiting to be displayed */\n @HostBinding('style.display')\n get displayStyle(): string | undefined {\n if (this.state().value === 'inactive') {\n return 'none';\n }\n\n return;\n }\n\n private timeout: any;\n private intervalId: any;\n private hideTime!: number;\n private sub: Subscription;\n private sub1: Subscription;\n private sub2: Subscription;\n private sub3: Subscription;\n\n constructor(\n protected toastrService: ToastrService,\n public toastPackage: ToastPackage,\n protected ngZone?: NgZone,\n ) {\n this.message = toastPackage.message;\n this.title = toastPackage.title;\n this.options = toastPackage.config;\n this.originalTimeout = toastPackage.config.timeOut;\n this.toastClasses = `${toastPackage.toastType} ${toastPackage.config.toastClass}`;\n this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n this.activateToast();\n });\n this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n this.remove();\n });\n this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n this.resetTimeout();\n });\n this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(count => {\n this.duplicatesCount = count;\n });\n this.state = signal({\n value: 'inactive',\n params: {\n easeTime: this.toastPackage.config.easeTime,\n easing: 'ease-in',\n },\n });\n }\n ngOnDestroy() {\n this.sub.unsubscribe();\n this.sub1.unsubscribe();\n this.sub2.unsubscribe();\n this.sub3.unsubscribe();\n clearInterval(this.intervalId);\n clearTimeout(this.timeout);\n }\n /bin /run /sbin angular.json karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended misc ngx-toastr.report.json node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json vercel.json activates toast and sets timeout\n */\n activateToast() {\n this.state.update(state => ({ ...state, value: 'active' }));\n if (\n !(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') &&\n this.options.timeOut\n ) {\n this.outsideTimeout(() => this.remove(), this.options.timeOut);\n this.hideTime = new Date().getTime() + this.options.timeOut;\n if (this.options.progressBar) {\n this.outsideInterval(() => this.updateProgress(), 10);\n }\n }\n }\n /bin /run /sbin angular.json karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended misc ngx-toastr.report.json node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json vercel.json updates progress bar width\n */\n updateProgress() {\n if (this.width() === 0 || this.width() === 100 || !this.options.timeOut) {\n return;\n }\n const now = new Date().getTime();\n const remaining = this.hideTime - now;\n this.width.set((remaining / this.options.timeOut) angular.json karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended misc ngx-toastr.report.json node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json vercel.json 100);\n if (this.options.progressAnimation === 'increasing') {\n this.width.update(width => 100 - width);\n }\n if (this.width() <= 0) {\n this.width.set(0);\n }\n if (this.width() >= 100) {\n this.width.set(100);\n }\n }\n\n resetTimeout() {\n clearTimeout(this.timeout);\n clearInterval(this.intervalId);\n this.state.update(state => ({ ...state, value: 'active' }));\n\n this.outsideTimeout(() => this.remove(), this.originalTimeout);\n this.options.timeOut = this.originalTimeout;\n this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n this.width.set(-1);\n if (this.options.progressBar) {\n this.outsideInterval(() => this.updateProgress(), 10);\n }\n }\n\n /bin /run /sbin angular.json karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended misc ngx-toastr.report.json node_modules package.json package-lock.json README.md src tsconfig.app.json tsconfig.json tsconfig.spec.json vercel.json tells toastrService to remove this toast after animation time\n */\n remove() {\n if (this.state().value === 'removed') {\n return;\n }\n clearTimeout(this.timeout);\n this.state.update(state => ({ ...state, value: 'removed' }));\n this.outsideTimeout(\n () => this.toastrService.remove(this.toastPackage.toastId),\n +this.toastPackage.config.easeTime,\n );\n }\n @HostListener('click')\n tapToast() {\n if (this.state().value === 'removed') {\n return;\n }\n this.toastPackage.triggerTap();\n if (this.options.tapToDismiss) {\n this.remove();\n }\n }\n @HostListener('mouseenter')\n stickAround() {\n if (this.state().value === 'removed') {\n return;\n }\n\n if (this.options.disableTimeOut !== 'extendedTimeOut') {\n clearTimeout(this.timeout);\n this.options.timeOut = 0;\n this.hideTime = 0;\n\n // disable progressBar\n clearInterval(this.intervalId);\n this.width.set(0);\n }\n }\n @HostListener('mouseleave')\n delayedHideToast() {\n if (\n (this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut') ||\n this.options.extendedTimeOut === 0 ||\n this.state().value === 'removed'\n ) {\n return;\n }\n this.outsideTimeout(() => this.remove(), this.options.extendedTimeOut);\n this.options.timeOut = this.options.extendedTimeOut;\n this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n this.width.set(-1);\n if (this.options.progressBar) {\n this.outsideInterval(() => this.updateProgress(), 10);\n }\n }\n\n outsideTimeout(func: () => any, timeout: number) {\n if (this.ngZone) {\n this.ngZone.runOutsideAngular(\n () =>\n (this.timeout = setTimeout(\n () => this.runInsideAngular(func),\n timeout\n ))\n );\n } else {\n this.timeout = setTimeout(() => func(), timeout);\n }\n }\n\n outsideInterval(func: () => any, timeout: number) {\n if (this.ngZone) {\n this.ngZone.runOutsideAngular(\n () =>\n (this.intervalId = setInterval(\n () => this.runInsideAngular(func),\n timeout\n ))\n );\n } else {\n this.intervalId = setInterval(() => func(), timeout);\n }\n }\n\n private runInsideAngular(func: () => any) {\n if (this.ngZone) {\n this.ngZone.run(() => func());\n } else {\n func();\n }\n }\n}\n",
            "usedDeprecatedRules": []
          }
        ]
      }
    }
  },
  "angular-fontawesome": {
    "repo": {
      "HEAD": {
        "commit": "88ea9db3780a4a86d34f69920105166d914497ea",
        "author": "Yaroslav Admin",
        "date": "Thu Nov 21 00:00:00 2024 +0100",
        "message": "Release 1.0.0"
      },
      "url": "https://github.com/FortAwesome/angular-fontawesome"
    },
    "before": {
      "angular-fontawesome": {
        "recommended": [],
        "all": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-fontawesome/src/lib/icon/duotone-icon.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 6,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 9,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        25,
                        273
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { IconDefinition as CoreIconDefinition, IconParams } from '@fortawesome/fontawesome-svg-core';\nimport { IconDefinition, IconProp } from '../types';\nimport { FaIconComponent } from './icon.component';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 18,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 18,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 26,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 26,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 34,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 34,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 42,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 42,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 50,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 50,
                "endColumn": 11
              }
            ],
            "suppressedMessages": [],
            "errorCount": 6,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, Input } from '@angular/core';\nimport { IconDefinition as CoreIconDefinition, IconParams } from '@fortawesome/fontawesome-svg-core';\nimport { IconDefinition, IconProp } from '../types';\nimport { FaIconComponent } from './icon.component';\n\n@Component({\n selector: 'fa-duotone-icon',\n template: ``,\n})\nexport class FaDuotoneIconComponent extends FaIconComponent {\n /bin /run /sbin angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock Swap the default opacity of each duotone icon’s layers. This will make an\n angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock icon’s primary layer have the default opacity of 40% rather than its\n angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock secondary layer.\n angular-fontawesome.report.json angular.json ng-package.json package.json tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock @default false\n */\n @Input() swapOpacity?: 'true' | 'false' | boolean;\n\n /bin /run /sbin angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock Customize the opacity of the primary icon layer.\n angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock Valid values are in range [0, 1.0].\n angular-fontawesome.report.json angular.json ng-package.json package.json tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock @default 1.0\n */\n @Input() primaryOpacity?: string | number;\n\n /bin /run /sbin angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock Customize the opacity of the secondary icon layer.\n angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock Valid values are in range [0, 1.0].\n angular-fontawesome.report.json angular.json ng-package.json package.json tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock @default 0.4\n */\n @Input() secondaryOpacity?: string | number;\n\n /bin /run /sbin angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock Customize the color of the primary icon layer.\n angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock Accepts any valid CSS color value.\n angular-fontawesome.report.json angular.json ng-package.json package.json tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock @default CSS inherited color\n */\n @Input() primaryColor?: string;\n\n /bin /run /sbin angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock Customize the color of the secondary icon layer.\n angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock Accepts any valid CSS color value.\n angular-fontawesome.report.json angular.json ng-package.json package.json tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock @default CSS inherited color\n */\n @Input() secondaryColor?: string;\n\n protected findIconDefinition(i: IconProp | IconDefinition): CoreIconDefinition | null {\n const definition = super.findIconDefinition(i);\n\n if (definition != null && !Array.isArray(definition.icon[4])) {\n throw new Error(\n 'The specified icon does not appear to be a Duotone icon. ' +\n 'Check that you specified the correct style: ' +\n `<fa-duotone-icon [icon]=\"['fad', '${definition.iconName}']\"></fa-duotone-icon> ` +\n `or use: <fa-icon icon=\"${definition.iconName}\"></fa-icon> instead.`,\n );\n }\n\n return definition;\n }\n\n protected buildParams(): IconParams {\n const params = super.buildParams();\n\n if (this.swapOpacity === true || this.swapOpacity === 'true') {\n if (Array.isArray(params.classes)) {\n params.classes.push('fa-swap-opacity');\n } else if (typeof params.classes === 'string') {\n params.classes = [params.classes, 'fa-swap-opacity'];\n } else {\n params.classes = ['fa-swap-opacity'];\n }\n }\n\n if (params.styles == null) {\n params.styles = {};\n }\n if (this.primaryOpacity != null) {\n params.styles['--fa-primary-opacity'] = this.primaryOpacity.toString();\n }\n if (this.secondaryOpacity != null) {\n params.styles['--fa-secondary-opacity'] = this.secondaryOpacity.toString();\n }\n if (this.primaryColor != null) {\n params.styles['--fa-primary-color'] = this.primaryColor;\n }\n if (this.secondaryColor != null) {\n params.styles['--fa-secondary-color'] = this.secondaryColor;\n }\n\n return params;\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-fontawesome/src/lib/icon/icon.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 29,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 36,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        126,
                        1184
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport {\n FaSymbol,\n FlipProp,\n icon,\n IconDefinition as CoreIconDefinition,\n IconParams,\n parse,\n PullProp,\n RotateProp,\n SizeProp,\n Styles,\n Transform,\n} from '@fortawesome/fontawesome-svg-core';\nimport { FaConfig } from '../config';\nimport { FaIconLibrary } from '../icon-library';\nimport { faWarnIfIconDefinitionMissing } from '../shared/errors/warn-if-icon-html-missing';\nimport { faWarnIfIconSpecMissing } from '../shared/errors/warn-if-icon-spec-missing';\nimport { AnimationProp, FaProps } from '../shared/models/props.model';\nimport { faClassList, isKnownRotateValue } from '../shared/utils/classlist.util';\nimport { ensureCss } from '../shared/utils/css';\nimport { faNormalizeIconSpec } from '../shared/utils/normalize-icon-spec.util';\nimport { FaStackItemSizeDirective } from '../stack/stack-item-size.directive';\nimport { FaStackComponent } from '../stack/stack.component';\nimport { IconDefinition, IconProp } from '../types';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 38,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 38,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 46,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 46,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 54,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 54,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 56,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 56,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 57,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 57,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 58,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 58,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 59,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 59,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 60,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 60,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 61,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 61,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 62,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 62,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 63,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 63,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 64,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 64,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 65,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 65,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 72,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 72,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/no-lifecycle-call",
                "severity": 2,
                "message": "Avoid explicit calls to lifecycle methods",
                "line": 118,
                "column": 5,
                "nodeType": "CallExpression",
                "messageId": "noLifecycleCall",
                "endLine": 118,
                "endColumn": 25
              }
            ],
            "suppressedMessages": [],
            "errorCount": 16,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { DOCUMENT } from '@angular/common';\nimport { Component, HostBinding, inject, Input, OnChanges, Optional, SimpleChanges } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport {\n FaSymbol,\n FlipProp,\n icon,\n IconDefinition as CoreIconDefinition,\n IconParams,\n parse,\n PullProp,\n RotateProp,\n SizeProp,\n Styles,\n Transform,\n} from '@fortawesome/fontawesome-svg-core';\nimport { FaConfig } from '../config';\nimport { FaIconLibrary } from '../icon-library';\nimport { faWarnIfIconDefinitionMissing } from '../shared/errors/warn-if-icon-html-missing';\nimport { faWarnIfIconSpecMissing } from '../shared/errors/warn-if-icon-spec-missing';\nimport { AnimationProp, FaProps } from '../shared/models/props.model';\nimport { faClassList, isKnownRotateValue } from '../shared/utils/classlist.util';\nimport { ensureCss } from '../shared/utils/css';\nimport { faNormalizeIconSpec } from '../shared/utils/normalize-icon-spec.util';\nimport { FaStackItemSizeDirective } from '../stack/stack-item-size.directive';\nimport { FaStackComponent } from '../stack/stack.component';\nimport { IconDefinition, IconProp } from '../types';\n\n@Component({\n selector: 'fa-icon',\n template: ``,\n host: {\n class: 'ng-fa-icon',\n '[attr.title]': 'title',\n },\n})\nexport class FaIconComponent implements OnChanges {\n @Input() icon: IconProp;\n\n /bin /run /sbin angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock Specify a title for the icon.\n angular-fontawesome.report.json angular.json ng-package.json package.json tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock This text will be displayed in a tooltip on hover and presented to the\n angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock screen readers.\n */\n @Input() title?: string;\n\n /bin /run /sbin angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock Icon animation.\n angular-fontawesome.report.json angular.json ng-package.json package.json tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock Most of the animations are only available when using Font Awesome 6. With\n angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock Font Awesome 5, only 'spin' and 'spin-pulse' are supported.\n */\n @Input() animation?: AnimationProp;\n\n @Input() mask?: IconProp;\n @Input() flip?: FlipProp;\n @Input() size?: SizeProp;\n @Input() pull?: PullProp;\n @Input() border?: boolean;\n @Input() inverse?: boolean;\n @Input() symbol?: FaSymbol;\n @Input() rotate?: RotateProp | string;\n @Input() fixedWidth?: boolean;\n @Input() transform?: string | Transform;\n\n /bin /run /sbin angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock Specify the `role` attribute for the rendered <svg> element.\n angular-fontawesome.report.json angular.json ng-package.json package.json tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock @default 'img'\n */\n @Input() a11yRole: string;\n\n @HostBinding('innerHTML') renderedIconHTML: SafeHtml;\n\n private document = inject(DOCUMENT);\n\n constructor(\n private sanitizer: DomSanitizer,\n private config: FaConfig,\n private iconLibrary: FaIconLibrary,\n @Optional() private stackItem: FaStackItemSizeDirective,\n @Optional() stack: FaStackComponent,\n ) {\n if (stack != null && stackItem == null) {\n console.error(\n 'FontAwesome: fa-icon and fa-duotone-icon elements must specify stackItemSize attribute when wrapped into ' +\n 'fa-stack. Example: <fa-icon stackItemSize=\"2x\"></fa-icon>.',\n );\n }\n }\n\n ngOnChanges(changes: SimpleChanges): void {\n if (this.icon == null && this.config.fallbackIcon == null) {\n faWarnIfIconSpecMissing();\n return;\n }\n\n if (changes) {\n const iconDefinition = this.findIconDefinition(this.icon ?? this.config.fallbackIcon);\n if (iconDefinition != null) {\n const params = this.buildParams();\n ensureCss(this.document, this.config);\n const renderedIcon = icon(iconDefinition, params);\n this.renderedIconHTML = this.sanitizer.bypassSecurityTrustHtml(renderedIcon.html.join('\\n'));\n }\n }\n }\n\n /bin /run /sbin angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock Programmatically trigger rendering of the icon.\n angular-fontawesome.report.json angular.json ng-package.json package.json tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock This method is useful, when creating {@link FaIconComponent} dynamically or\n angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock changing its inputs programmatically as in these cases icon won't be\n angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock re-rendered automatically.\n */\n render() {\n this.ngOnChanges({});\n }\n\n protected findIconDefinition(i: IconProp | IconDefinition): CoreIconDefinition | null {\n const lookup = faNormalizeIconSpec(i, this.config.defaultPrefix);\n if ('icon' in lookup) {\n return lookup as CoreIconDefinition;\n }\n\n const definition = this.iconLibrary.getIconDefinition(lookup.prefix, lookup.iconName);\n if (definition != null) {\n return definition as CoreIconDefinition;\n }\n\n faWarnIfIconDefinitionMissing(lookup);\n return null;\n }\n\n protected buildParams(): IconParams {\n const classOpts: FaProps = {\n flip: this.flip,\n animation: this.animation,\n border: this.border,\n inverse: this.inverse,\n size: this.size || null,\n pull: this.pull || null,\n rotate: this.rotate || null,\n fixedWidth: typeof this.fixedWidth === 'boolean' ? this.fixedWidth : this.config.fixedWidth,\n stackItemSize: this.stackItem != null ? this.stackItem.stackItemSize : null,\n };\n\n const parsedTransform = typeof this.transform === 'string' ? parse.transform(this.transform) : this.transform;\n\n const styles: Styles = {};\n if (classOpts.rotate != null && !isKnownRotateValue(classOpts.rotate)) {\n styles['--fa-rotate-angle'] = `${classOpts.rotate}`;\n }\n\n return {\n title: this.title,\n transform: parsedTransform,\n classes: faClassList(classOpts),\n mask: this.mask != null ? this.findIconDefinition(this.mask) : null,\n symbol: this.symbol,\n attributes: {\n role: this.a11yRole,\n },\n styles,\n };\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-fontawesome/src/lib/layers/layers-counter.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 10,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 16,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        126,
                        538
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { counter, CounterParams } from '@fortawesome/fontawesome-svg-core';\nimport { FaConfig } from '../config';\nimport { faWarnIfParentNotExist } from '../shared/errors/warn-if-parent-not-exist';\nimport { ensureCss } from '../shared/utils/css';\nimport { FaLayersComponent } from './layers.component';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 18,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 18,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 19,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 19,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 20,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 20,
                "endColumn": 11
              }
            ],
            "suppressedMessages": [],
            "errorCount": 4,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { DOCUMENT } from '@angular/common';\nimport { Component, HostBinding, inject, Input, OnChanges, Optional, SimpleChanges } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { counter, CounterParams } from '@fortawesome/fontawesome-svg-core';\nimport { FaConfig } from '../config';\nimport { faWarnIfParentNotExist } from '../shared/errors/warn-if-parent-not-exist';\nimport { ensureCss } from '../shared/utils/css';\nimport { FaLayersComponent } from './layers.component';\n\n@Component({\n selector: 'fa-layers-counter',\n template: '',\n host: {\n class: 'ng-fa-layers-counter',\n },\n})\nexport class FaLayersCounterComponent implements OnChanges {\n @Input() content: string;\n @Input() title?: string;\n @Input() position?: 'bottom-right' | 'bottom-left' | 'top-right' | 'top-left';\n\n @HostBinding('innerHTML') renderedHTML: SafeHtml;\n\n private document = inject(DOCUMENT);\n private config = inject(FaConfig);\n\n constructor(\n @Optional() private parent: FaLayersComponent,\n private sanitizer: DomSanitizer,\n ) {\n faWarnIfParentNotExist(this.parent, 'FaLayersComponent', this.constructor.name);\n }\n\n ngOnChanges(changes: SimpleChanges) {\n if (changes) {\n const params = this.buildParams();\n this.updateContent(params);\n }\n }\n\n protected buildParams(): CounterParams {\n return {\n title: this.title,\n classes: this.position != null ? [`fa-layers-${this.position}`] : undefined,\n };\n }\n\n private updateContent(params: CounterParams) {\n ensureCss(this.document, this.config);\n this.renderedHTML = this.sanitizer.bypassSecurityTrustHtml(counter(this.content || '', params).html.join(''));\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-fontawesome/src/lib/layers/layers-text.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 22,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 28,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        126,
                        757
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport {\n FlipProp,\n parse,\n PullProp,\n RotateProp,\n SizeProp,\n Styles,\n text,\n TextParams,\n Transform,\n} from '@fortawesome/fontawesome-svg-core';\nimport { FaConfig } from '../config';\nimport { faWarnIfParentNotExist } from '../shared/errors/warn-if-parent-not-exist';\nimport { FaProps } from '../shared/models/props.model';\nimport { faClassList, isKnownRotateValue } from '../shared/utils/classlist.util';\nimport { ensureCss } from '../shared/utils/css';\nimport { FaLayersComponent } from './layers.component';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 30,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 30,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 31,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 31,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 32,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 32,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 33,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 33,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 34,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 34,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 35,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 35,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 36,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 36,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 37,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 37,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 38,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 38,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 39,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 39,
                "endColumn": 11
              }
            ],
            "suppressedMessages": [],
            "errorCount": 11,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { DOCUMENT } from '@angular/common';\nimport { Component, HostBinding, inject, Input, OnChanges, Optional, SimpleChanges } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport {\n FlipProp,\n parse,\n PullProp,\n RotateProp,\n SizeProp,\n Styles,\n text,\n TextParams,\n Transform,\n} from '@fortawesome/fontawesome-svg-core';\nimport { FaConfig } from '../config';\nimport { faWarnIfParentNotExist } from '../shared/errors/warn-if-parent-not-exist';\nimport { FaProps } from '../shared/models/props.model';\nimport { faClassList, isKnownRotateValue } from '../shared/utils/classlist.util';\nimport { ensureCss } from '../shared/utils/css';\nimport { FaLayersComponent } from './layers.component';\n\n@Component({\n selector: 'fa-layers-text',\n template: '',\n host: {\n class: 'ng-fa-layers-text',\n },\n})\nexport class FaLayersTextComponent implements OnChanges {\n @Input() content: string;\n @Input() title?: string;\n @Input() flip?: FlipProp;\n @Input() size?: SizeProp;\n @Input() pull?: PullProp;\n @Input() border?: boolean;\n @Input() inverse?: boolean;\n @Input() rotate?: RotateProp | string;\n @Input() fixedWidth?: boolean;\n @Input() transform?: string | Transform;\n\n @HostBinding('innerHTML') renderedHTML: SafeHtml;\n\n private document = inject(DOCUMENT);\n private config = inject(FaConfig);\n\n constructor(\n @Optional() private parent: FaLayersComponent,\n private sanitizer: DomSanitizer,\n ) {\n faWarnIfParentNotExist(this.parent, 'FaLayersComponent', this.constructor.name);\n }\n\n ngOnChanges(changes: SimpleChanges) {\n if (changes) {\n const params = this.buildParams();\n this.updateContent(params);\n }\n }\n\n /bin /run /sbin angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock Updating params by component props.\n */\n protected buildParams(): TextParams {\n const classOpts: FaProps = {\n flip: this.flip,\n border: this.border,\n inverse: this.inverse,\n size: this.size || null,\n pull: this.pull || null,\n rotate: this.rotate || null,\n fixedWidth: this.fixedWidth,\n };\n\n const parsedTransform = typeof this.transform === 'string' ? parse.transform(this.transform) : this.transform;\n\n const styles: Styles = {};\n if (classOpts.rotate != null && !isKnownRotateValue(classOpts.rotate)) {\n styles['--fa-rotate-angle'] = `${classOpts.rotate}`;\n }\n\n return {\n transform: parsedTransform,\n classes: faClassList(classOpts),\n title: this.title,\n styles,\n };\n }\n\n private updateContent(params: TextParams) {\n ensureCss(this.document, this.config);\n this.renderedHTML = this.sanitizer.bypassSecurityTrustHtml(text(this.content || '', params).html.join('\\n'));\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-fontawesome/src/lib/layers/layers.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 20,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 23,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        165,
                        387
                      ],
                      "text": ", ChangeDetectionStrategy,\n} from '@angular/core';\nimport { SizeProp } from '@fortawesome/fontawesome-svg-core';\nimport { FaConfig } from '../config';\nimport { ensureCss } from '../shared/utils/css';\n\n/**\n angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock Fontawesome layers.\n */\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 25,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 25,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 27,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 27,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/sort-lifecycle-methods",
                "severity": 2,
                "message": "Lifecycle Methods are not declared in order of execution",
                "line": 43,
                "column": 3,
                "nodeType": "Identifier",
                "messageId": "lifecycleMethodsNotSorted",
                "endLine": 43,
                "endColumn": 14
              }
            ],
            "suppressedMessages": [],
            "errorCount": 4,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { DOCUMENT } from '@angular/common';\nimport {\n Component,\n ElementRef,\n HostBinding,\n inject,\n Input,\n OnChanges,\n OnInit,\n Renderer2,\n SimpleChanges,\n} from '@angular/core';\nimport { SizeProp } from '@fortawesome/fontawesome-svg-core';\nimport { FaConfig } from '../config';\nimport { ensureCss } from '../shared/utils/css';\n\n/**\n angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock Fontawesome layers.\n */\n@Component({\n selector: 'fa-layers',\n template: `<ng-content></ng-content>`,\n})\nexport class FaLayersComponent implements OnInit, OnChanges {\n @Input() size?: SizeProp;\n\n @Input() @HostBinding('class.fa-fw') fixedWidth?: boolean;\n\n private document = inject(DOCUMENT);\n\n constructor(\n private renderer: Renderer2,\n private elementRef: ElementRef,\n private config: FaConfig,\n ) {}\n\n ngOnInit() {\n this.renderer.addClass(this.elementRef.nativeElement, 'fa-layers');\n ensureCss(this.document, this.config);\n this.fixedWidth = typeof this.fixedWidth === 'boolean' ? this.fixedWidth : this.config.fixedWidth;\n }\n\n ngOnChanges(changes: SimpleChanges) {\n if ('size' in changes) {\n if (changes.size.currentValue != null) {\n this.renderer.addClass(this.elementRef.nativeElement, `fa-${changes.size.currentValue}`);\n }\n if (changes.size.previousValue != null) {\n this.renderer.removeClass(this.elementRef.nativeElement, `fa-${changes.size.previousValue}`);\n }\n }\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-fontawesome/src/lib/stack/stack-item-size.directive.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 14,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 14,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 19,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 19,
                "endColumn": 11
              }
            ],
            "suppressedMessages": [
              {
                "ruleId": "@angular-eslint/directive-selector",
                "severity": 2,
                "message": "The selector should start with one of these prefixes: \"fa\" (https://angular.dev/style-guide#style-02-08)",
                "line": 7,
                "column": 13,
                "nodeType": "Literal",
                "messageId": "prefixFailure",
                "endLine": 7,
                "endColumn": 68,
                "suppressions": [
                  {
                    "kind": "directive",
                    "justification": ""
                  }
                ]
              }
            ],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Directive, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { SizeProp } from '@fortawesome/fontawesome-svg-core';\nimport { FaStackComponent } from './stack.component';\n\n@Directive({\n // eslint-disable-next-line @angular-eslint/directive-selector\n selector: 'fa-icon[stackItemSize],fa-duotone-icon[stackItemSize]',\n})\nexport class FaStackItemSizeDirective implements OnChanges {\n /bin /run /sbin angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock Specify whether icon inside {@link FaStackComponent} should be rendered in\n angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock regular size (1x) or as a larger icon (2x).\n */\n @Input() stackItemSize: '1x' | '2x' = '1x';\n\n /bin /run /sbin angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock @internal\n */\n @Input() size?: SizeProp;\n\n ngOnChanges(changes: SimpleChanges) {\n if ('size' in changes) {\n throw new Error(\n 'fa-icon is not allowed to customize size when used inside fa-stack. ' +\n 'Set size on the enclosing fa-stack instead: <fa-stack size=\"4x\">...</fa-stack>.',\n );\n }\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-fontawesome/src/lib/stack/stack.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 4,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 7,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        82,
                        185
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { SizeProp } from '@fortawesome/fontawesome-svg-core';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 15,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 15,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/sort-lifecycle-methods",
                "severity": 2,
                "message": "Lifecycle Methods are not declared in order of execution",
                "line": 26,
                "column": 3,
                "nodeType": "Identifier",
                "messageId": "lifecycleMethodsNotSorted",
                "endLine": 26,
                "endColumn": 14
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ElementRef, Input, OnChanges, OnInit, Renderer2, SimpleChanges } from '@angular/core';\nimport { SizeProp } from '@fortawesome/fontawesome-svg-core';\n\n@Component({\n selector: 'fa-stack',\n template: `<ng-content></ng-content>`,\n})\nexport class FaStackComponent implements OnInit, OnChanges {\n /bin /run /sbin angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock Size of the stacked icon.\n angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock Note that stacked icon is by default 2 times bigger, than non-stacked icon.\n angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock You'll need to set size using custom CSS to align stacked icon with a\n angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock simple one. E.g. `fa-stack { font-size: 0.5em; }`.\n */\n @Input() size?: SizeProp;\n\n constructor(\n private renderer: Renderer2,\n private elementRef: ElementRef,\n ) {}\n\n ngOnInit() {\n this.renderer.addClass(this.elementRef.nativeElement, 'fa-stack');\n }\n\n ngOnChanges(changes: SimpleChanges) {\n if ('size' in changes) {\n if (changes.size.currentValue != null) {\n this.renderer.addClass(this.elementRef.nativeElement, `fa-${changes.size.currentValue}`);\n }\n if (changes.size.previousValue != null) {\n this.renderer.removeClass(this.elementRef.nativeElement, `fa-${changes.size.previousValue}`);\n }\n }\n }\n}\n",
            "usedDeprecatedRules": []
          }
        ]
      },
      "demo": {
        "recommended": [],
        "all": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-fontawesome/projects/demo/src/app/alternate-prefix.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 5,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 10,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        240
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { FaConfig, FaIconComponent, FaIconLibrary } from '@fortawesome/angular-fontawesome';\nimport { faBellSlash, faHandPaper, faUser } from '@fortawesome/free-regular-svg-icons';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\nimport { FaConfig, FaIconComponent, FaIconLibrary } from '@fortawesome/angular-fontawesome';\nimport { faBellSlash, faHandPaper, faUser } from '@fortawesome/free-regular-svg-icons';\n\n@Component({\n selector: 'app-alternate-prefix',\n imports: [FaIconComponent],\n templateUrl: './alternate-prefix.component.html',\n providers: [FaConfig],\n})\nexport class AlternatePrefixComponent {\n constructor(faConfig: FaConfig, library: FaIconLibrary) {\n // Setting the defaultPrefix to far\n faConfig.defaultPrefix = 'far';\n // Adding dynamic icons to library for use\n library.addIcons(faUser, faHandPaper, faBellSlash);\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-fontawesome/projects/demo/src/app/app.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 24,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 29,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        65,
                        625
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { FaConfig, FaIconLibrary, FontAwesomeModule, IconDefinition } from '@fortawesome/angular-fontawesome';\nimport { faFlag, faUser as regularUser } from '@fortawesome/free-regular-svg-icons';\nimport {\n faAdjust,\n faBatteryQuarter,\n faBell,\n faCircle,\n faCoffee,\n faCog,\n faEllipsisH,\n faFighterJet,\n faFlag as solidFlag,\n faHeart,\n faMagic,\n faSpinner,\n faSquare,\n faTimes,\n faUser,\n} from '@fortawesome/free-solid-svg-icons';\nimport { AlternatePrefixComponent } from './alternate-prefix.component';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/consistent-component-styles",
                "severity": 2,
                "message": "Use `styleUrl` instead of `styleUrls` for a single stylesheet",
                "line": 28,
                "column": 3,
                "nodeType": "Property",
                "messageId": "useStyleUrl",
                "endLine": 28,
                "endColumn": 38,
                "fix": {
                  "range": [
                    759,
                    794
                  ],
                  "text": "styleUrl: './app.component.scss'"
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import { DecimalPipe } from '@angular/common';\nimport { Component } from '@angular/core';\nimport { FaConfig, FaIconLibrary, FontAwesomeModule, IconDefinition } from '@fortawesome/angular-fontawesome';\nimport { faFlag, faUser as regularUser } from '@fortawesome/free-regular-svg-icons';\nimport {\n faAdjust,\n faBatteryQuarter,\n faBell,\n faCircle,\n faCoffee,\n faCog,\n faEllipsisH,\n faFighterJet,\n faFlag as solidFlag,\n faHeart,\n faMagic,\n faSpinner,\n faSquare,\n faTimes,\n faUser,\n} from '@fortawesome/free-solid-svg-icons';\nimport { AlternatePrefixComponent } from './alternate-prefix.component';\n\n@Component({\n selector: 'app-root',\n imports: [DecimalPipe, FontAwesomeModule, AlternatePrefixComponent],\n templateUrl: './app.component.html',\n styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n faBell = faBell;\n faCog = faCog;\n faFlag = faFlag;\n solidFlag = solidFlag;\n faTimes = faTimes;\n faMagic = faMagic;\n faAdjust = faAdjust;\n faCircle = faCircle;\n faCoffee = faCoffee;\n faSquare = faSquare;\n regularUser = regularUser;\n faEllipsisH = faEllipsisH;\n faFighterJet = faFighterJet;\n faBatteryQuarter = faBatteryQuarter;\n faHeart = faHeart;\n faSpinner = faSpinner;\n faDummy: IconDefinition = {\n prefix: 'fad',\n iconName: 'dummy',\n icon: [512, 512, [], '', ['M50 50 H412 V250 H50 Z', 'M50 262 H412 V462 H50 Z']],\n };\n\n notificationsCounter = 1000;\n isAnimated = true;\n magicLevel = 0;\n\n selectedPosition: 'bottom-right' | 'bottom-left' | 'top-right' | 'top-left';\n\n constructor(library: FaIconLibrary, faConfig: FaConfig) {\n // Notice that we're adding two different icon objects to the library.\n // Each of them within their respective icon npm packages are exported as faUser,\n // but we've renamed the second one in order to disambiguate the two objects within\n // this JavaScript module. Internally, these objects are different, even though they have the same iconName.\n // They have different prefixes: faUser has a prefix of fas, since it came from free-solid-svg-icons;\n // regularUser has a prefix of far, since it came from free-regular-svg-icons.\n // And of course, they also have different SVG content, resulting in different appearances.\n // So they really are totally different icons. However, they share the same iconName: user.\n // So in the template, the only way to reference the non-default (fas) icon is to either\n // use the array syntax that specifies [prefix, iconName], like this:\n //\n // <fa-icon [icon]=\"['far','user']\"></fa-icon>\n //\n // Or we could make the regularUser object available to the template and simply\n // reference it as an object, like this:\n //\n // <fa-icon [icon]=\"regularUser\"></fa-icon>\n //\n // You don't specify the prefix in that case, because the icon object knows its own prefix.\n library.addIcons(faUser, regularUser);\n faConfig.fallbackIcon = faMagic;\n }\n\n onChange(event: any) {\n this.selectedPosition = event.target.value;\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-fontawesome/projects/demo/src/app/testing/explicit-reference.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 5,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 9,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        187
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\n\n@Component({\n selector: 'app-explicit-reference',\n imports: [FaIconComponent],\n template: '<fa-icon [icon]=\"faUser\"></fa-icon>',\n})\nexport class ExplicitReferenceComponent {\n faUser = faUser;\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-fontawesome/projects/demo/src/app/testing/icon-library.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 4,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 8,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        127
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\n\n@Component({\n selector: 'app-regular-icon-library',\n imports: [FaIconComponent],\n template: '<fa-icon icon=\"user\"></fa-icon>',\n})\nexport class IconLibraryComponent {}\n",
            "usedDeprecatedRules": []
          }
        ]
      }
    },
    "after": {
      "angular-fontawesome": {
        "recommended": [],
        "all": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-fontawesome/src/lib/icon/duotone-icon.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 6,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 9,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        25,
                        273
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { IconDefinition as CoreIconDefinition, IconParams } from '@fortawesome/fontawesome-svg-core';\nimport { IconDefinition, IconProp } from '../types';\nimport { FaIconComponent } from './icon.component';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 18,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 18,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 26,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 26,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 34,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 34,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 42,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 42,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 50,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 50,
                "endColumn": 11
              }
            ],
            "suppressedMessages": [],
            "errorCount": 6,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, Input } from '@angular/core';\nimport { IconDefinition as CoreIconDefinition, IconParams } from '@fortawesome/fontawesome-svg-core';\nimport { IconDefinition, IconProp } from '../types';\nimport { FaIconComponent } from './icon.component';\n\n@Component({\n selector: 'fa-duotone-icon',\n template: ``,\n})\nexport class FaDuotoneIconComponent extends FaIconComponent {\n /bin /run /sbin angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock Swap the default opacity of each duotone icon’s layers. This will make an\n angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock icon’s primary layer have the default opacity of 40% rather than its\n angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock secondary layer.\n angular-fontawesome.report.json angular.json ng-package.json package.json tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock @default false\n */\n @Input() swapOpacity?: 'true' | 'false' | boolean;\n\n /bin /run /sbin angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock Customize the opacity of the primary icon layer.\n angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock Valid values are in range [0, 1.0].\n angular-fontawesome.report.json angular.json ng-package.json package.json tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock @default 1.0\n */\n @Input() primaryOpacity?: string | number;\n\n /bin /run /sbin angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock Customize the opacity of the secondary icon layer.\n angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock Valid values are in range [0, 1.0].\n angular-fontawesome.report.json angular.json ng-package.json package.json tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock @default 0.4\n */\n @Input() secondaryOpacity?: string | number;\n\n /bin /run /sbin angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock Customize the color of the primary icon layer.\n angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock Accepts any valid CSS color value.\n angular-fontawesome.report.json angular.json ng-package.json package.json tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock @default CSS inherited color\n */\n @Input() primaryColor?: string;\n\n /bin /run /sbin angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock Customize the color of the secondary icon layer.\n angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock Accepts any valid CSS color value.\n angular-fontawesome.report.json angular.json ng-package.json package.json tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock @default CSS inherited color\n */\n @Input() secondaryColor?: string;\n\n protected findIconDefinition(i: IconProp | IconDefinition): CoreIconDefinition | null {\n const definition = super.findIconDefinition(i);\n\n if (definition != null && !Array.isArray(definition.icon[4])) {\n throw new Error(\n 'The specified icon does not appear to be a Duotone icon. ' +\n 'Check that you specified the correct style: ' +\n `<fa-duotone-icon [icon]=\"['fad', '${definition.iconName}']\"></fa-duotone-icon> ` +\n `or use: <fa-icon icon=\"${definition.iconName}\"></fa-icon> instead.`,\n );\n }\n\n return definition;\n }\n\n protected buildParams(): IconParams {\n const params = super.buildParams();\n\n if (this.swapOpacity === true || this.swapOpacity === 'true') {\n if (Array.isArray(params.classes)) {\n params.classes.push('fa-swap-opacity');\n } else if (typeof params.classes === 'string') {\n params.classes = [params.classes, 'fa-swap-opacity'];\n } else {\n params.classes = ['fa-swap-opacity'];\n }\n }\n\n if (params.styles == null) {\n params.styles = {};\n }\n if (this.primaryOpacity != null) {\n params.styles['--fa-primary-opacity'] = this.primaryOpacity.toString();\n }\n if (this.secondaryOpacity != null) {\n params.styles['--fa-secondary-opacity'] = this.secondaryOpacity.toString();\n }\n if (this.primaryColor != null) {\n params.styles['--fa-primary-color'] = this.primaryColor;\n }\n if (this.secondaryColor != null) {\n params.styles['--fa-secondary-color'] = this.secondaryColor;\n }\n\n return params;\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-fontawesome/src/lib/icon/icon.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 29,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 36,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        126,
                        1184
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport {\n FaSymbol,\n FlipProp,\n icon,\n IconDefinition as CoreIconDefinition,\n IconParams,\n parse,\n PullProp,\n RotateProp,\n SizeProp,\n Styles,\n Transform,\n} from '@fortawesome/fontawesome-svg-core';\nimport { FaConfig } from '../config';\nimport { FaIconLibrary } from '../icon-library';\nimport { faWarnIfIconDefinitionMissing } from '../shared/errors/warn-if-icon-html-missing';\nimport { faWarnIfIconSpecMissing } from '../shared/errors/warn-if-icon-spec-missing';\nimport { AnimationProp, FaProps } from '../shared/models/props.model';\nimport { faClassList, isKnownRotateValue } from '../shared/utils/classlist.util';\nimport { ensureCss } from '../shared/utils/css';\nimport { faNormalizeIconSpec } from '../shared/utils/normalize-icon-spec.util';\nimport { FaStackItemSizeDirective } from '../stack/stack-item-size.directive';\nimport { FaStackComponent } from '../stack/stack.component';\nimport { IconDefinition, IconProp } from '../types';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 38,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 38,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 46,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 46,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 54,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 54,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 56,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 56,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 57,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 57,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 58,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 58,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 59,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 59,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 60,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 60,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 61,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 61,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 62,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 62,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 63,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 63,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 64,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 64,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 65,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 65,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 72,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 72,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/no-lifecycle-call",
                "severity": 2,
                "message": "Avoid explicit calls to lifecycle methods",
                "line": 118,
                "column": 5,
                "nodeType": "CallExpression",
                "messageId": "noLifecycleCall",
                "endLine": 118,
                "endColumn": 25
              }
            ],
            "suppressedMessages": [],
            "errorCount": 16,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { DOCUMENT } from '@angular/common';\nimport { Component, HostBinding, inject, Input, OnChanges, Optional, SimpleChanges } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport {\n FaSymbol,\n FlipProp,\n icon,\n IconDefinition as CoreIconDefinition,\n IconParams,\n parse,\n PullProp,\n RotateProp,\n SizeProp,\n Styles,\n Transform,\n} from '@fortawesome/fontawesome-svg-core';\nimport { FaConfig } from '../config';\nimport { FaIconLibrary } from '../icon-library';\nimport { faWarnIfIconDefinitionMissing } from '../shared/errors/warn-if-icon-html-missing';\nimport { faWarnIfIconSpecMissing } from '../shared/errors/warn-if-icon-spec-missing';\nimport { AnimationProp, FaProps } from '../shared/models/props.model';\nimport { faClassList, isKnownRotateValue } from '../shared/utils/classlist.util';\nimport { ensureCss } from '../shared/utils/css';\nimport { faNormalizeIconSpec } from '../shared/utils/normalize-icon-spec.util';\nimport { FaStackItemSizeDirective } from '../stack/stack-item-size.directive';\nimport { FaStackComponent } from '../stack/stack.component';\nimport { IconDefinition, IconProp } from '../types';\n\n@Component({\n selector: 'fa-icon',\n template: ``,\n host: {\n class: 'ng-fa-icon',\n '[attr.title]': 'title',\n },\n})\nexport class FaIconComponent implements OnChanges {\n @Input() icon: IconProp;\n\n /bin /run /sbin angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock Specify a title for the icon.\n angular-fontawesome.report.json angular.json ng-package.json package.json tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock This text will be displayed in a tooltip on hover and presented to the\n angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock screen readers.\n */\n @Input() title?: string;\n\n /bin /run /sbin angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock Icon animation.\n angular-fontawesome.report.json angular.json ng-package.json package.json tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock Most of the animations are only available when using Font Awesome 6. With\n angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock Font Awesome 5, only 'spin' and 'spin-pulse' are supported.\n */\n @Input() animation?: AnimationProp;\n\n @Input() mask?: IconProp;\n @Input() flip?: FlipProp;\n @Input() size?: SizeProp;\n @Input() pull?: PullProp;\n @Input() border?: boolean;\n @Input() inverse?: boolean;\n @Input() symbol?: FaSymbol;\n @Input() rotate?: RotateProp | string;\n @Input() fixedWidth?: boolean;\n @Input() transform?: string | Transform;\n\n /bin /run /sbin angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock Specify the `role` attribute for the rendered <svg> element.\n angular-fontawesome.report.json angular.json ng-package.json package.json tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock @default 'img'\n */\n @Input() a11yRole: string;\n\n @HostBinding('innerHTML') renderedIconHTML: SafeHtml;\n\n private document = inject(DOCUMENT);\n\n constructor(\n private sanitizer: DomSanitizer,\n private config: FaConfig,\n private iconLibrary: FaIconLibrary,\n @Optional() private stackItem: FaStackItemSizeDirective,\n @Optional() stack: FaStackComponent,\n ) {\n if (stack != null && stackItem == null) {\n console.error(\n 'FontAwesome: fa-icon and fa-duotone-icon elements must specify stackItemSize attribute when wrapped into ' +\n 'fa-stack. Example: <fa-icon stackItemSize=\"2x\"></fa-icon>.',\n );\n }\n }\n\n ngOnChanges(changes: SimpleChanges): void {\n if (this.icon == null && this.config.fallbackIcon == null) {\n faWarnIfIconSpecMissing();\n return;\n }\n\n if (changes) {\n const iconDefinition = this.findIconDefinition(this.icon ?? this.config.fallbackIcon);\n if (iconDefinition != null) {\n const params = this.buildParams();\n ensureCss(this.document, this.config);\n const renderedIcon = icon(iconDefinition, params);\n this.renderedIconHTML = this.sanitizer.bypassSecurityTrustHtml(renderedIcon.html.join('\\n'));\n }\n }\n }\n\n /bin /run /sbin angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock Programmatically trigger rendering of the icon.\n angular-fontawesome.report.json angular.json ng-package.json package.json tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock This method is useful, when creating {@link FaIconComponent} dynamically or\n angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock changing its inputs programmatically as in these cases icon won't be\n angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock re-rendered automatically.\n */\n render() {\n this.ngOnChanges({});\n }\n\n protected findIconDefinition(i: IconProp | IconDefinition): CoreIconDefinition | null {\n const lookup = faNormalizeIconSpec(i, this.config.defaultPrefix);\n if ('icon' in lookup) {\n return lookup as CoreIconDefinition;\n }\n\n const definition = this.iconLibrary.getIconDefinition(lookup.prefix, lookup.iconName);\n if (definition != null) {\n return definition as CoreIconDefinition;\n }\n\n faWarnIfIconDefinitionMissing(lookup);\n return null;\n }\n\n protected buildParams(): IconParams {\n const classOpts: FaProps = {\n flip: this.flip,\n animation: this.animation,\n border: this.border,\n inverse: this.inverse,\n size: this.size || null,\n pull: this.pull || null,\n rotate: this.rotate || null,\n fixedWidth: typeof this.fixedWidth === 'boolean' ? this.fixedWidth : this.config.fixedWidth,\n stackItemSize: this.stackItem != null ? this.stackItem.stackItemSize : null,\n };\n\n const parsedTransform = typeof this.transform === 'string' ? parse.transform(this.transform) : this.transform;\n\n const styles: Styles = {};\n if (classOpts.rotate != null && !isKnownRotateValue(classOpts.rotate)) {\n styles['--fa-rotate-angle'] = `${classOpts.rotate}`;\n }\n\n return {\n title: this.title,\n transform: parsedTransform,\n classes: faClassList(classOpts),\n mask: this.mask != null ? this.findIconDefinition(this.mask) : null,\n symbol: this.symbol,\n attributes: {\n role: this.a11yRole,\n },\n styles,\n };\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-fontawesome/src/lib/layers/layers-counter.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 10,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 16,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        126,
                        538
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { counter, CounterParams } from '@fortawesome/fontawesome-svg-core';\nimport { FaConfig } from '../config';\nimport { faWarnIfParentNotExist } from '../shared/errors/warn-if-parent-not-exist';\nimport { ensureCss } from '../shared/utils/css';\nimport { FaLayersComponent } from './layers.component';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 18,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 18,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 19,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 19,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 20,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 20,
                "endColumn": 11
              }
            ],
            "suppressedMessages": [],
            "errorCount": 4,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { DOCUMENT } from '@angular/common';\nimport { Component, HostBinding, inject, Input, OnChanges, Optional, SimpleChanges } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { counter, CounterParams } from '@fortawesome/fontawesome-svg-core';\nimport { FaConfig } from '../config';\nimport { faWarnIfParentNotExist } from '../shared/errors/warn-if-parent-not-exist';\nimport { ensureCss } from '../shared/utils/css';\nimport { FaLayersComponent } from './layers.component';\n\n@Component({\n selector: 'fa-layers-counter',\n template: '',\n host: {\n class: 'ng-fa-layers-counter',\n },\n})\nexport class FaLayersCounterComponent implements OnChanges {\n @Input() content: string;\n @Input() title?: string;\n @Input() position?: 'bottom-right' | 'bottom-left' | 'top-right' | 'top-left';\n\n @HostBinding('innerHTML') renderedHTML: SafeHtml;\n\n private document = inject(DOCUMENT);\n private config = inject(FaConfig);\n\n constructor(\n @Optional() private parent: FaLayersComponent,\n private sanitizer: DomSanitizer,\n ) {\n faWarnIfParentNotExist(this.parent, 'FaLayersComponent', this.constructor.name);\n }\n\n ngOnChanges(changes: SimpleChanges) {\n if (changes) {\n const params = this.buildParams();\n this.updateContent(params);\n }\n }\n\n protected buildParams(): CounterParams {\n return {\n title: this.title,\n classes: this.position != null ? [`fa-layers-${this.position}`] : undefined,\n };\n }\n\n private updateContent(params: CounterParams) {\n ensureCss(this.document, this.config);\n this.renderedHTML = this.sanitizer.bypassSecurityTrustHtml(counter(this.content || '', params).html.join(''));\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-fontawesome/src/lib/layers/layers-text.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 22,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 28,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        126,
                        757
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport {\n FlipProp,\n parse,\n PullProp,\n RotateProp,\n SizeProp,\n Styles,\n text,\n TextParams,\n Transform,\n} from '@fortawesome/fontawesome-svg-core';\nimport { FaConfig } from '../config';\nimport { faWarnIfParentNotExist } from '../shared/errors/warn-if-parent-not-exist';\nimport { FaProps } from '../shared/models/props.model';\nimport { faClassList, isKnownRotateValue } from '../shared/utils/classlist.util';\nimport { ensureCss } from '../shared/utils/css';\nimport { FaLayersComponent } from './layers.component';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 30,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 30,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 31,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 31,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 32,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 32,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 33,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 33,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 34,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 34,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 35,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 35,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 36,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 36,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 37,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 37,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 38,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 38,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 39,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 39,
                "endColumn": 11
              }
            ],
            "suppressedMessages": [],
            "errorCount": 11,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { DOCUMENT } from '@angular/common';\nimport { Component, HostBinding, inject, Input, OnChanges, Optional, SimpleChanges } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport {\n FlipProp,\n parse,\n PullProp,\n RotateProp,\n SizeProp,\n Styles,\n text,\n TextParams,\n Transform,\n} from '@fortawesome/fontawesome-svg-core';\nimport { FaConfig } from '../config';\nimport { faWarnIfParentNotExist } from '../shared/errors/warn-if-parent-not-exist';\nimport { FaProps } from '../shared/models/props.model';\nimport { faClassList, isKnownRotateValue } from '../shared/utils/classlist.util';\nimport { ensureCss } from '../shared/utils/css';\nimport { FaLayersComponent } from './layers.component';\n\n@Component({\n selector: 'fa-layers-text',\n template: '',\n host: {\n class: 'ng-fa-layers-text',\n },\n})\nexport class FaLayersTextComponent implements OnChanges {\n @Input() content: string;\n @Input() title?: string;\n @Input() flip?: FlipProp;\n @Input() size?: SizeProp;\n @Input() pull?: PullProp;\n @Input() border?: boolean;\n @Input() inverse?: boolean;\n @Input() rotate?: RotateProp | string;\n @Input() fixedWidth?: boolean;\n @Input() transform?: string | Transform;\n\n @HostBinding('innerHTML') renderedHTML: SafeHtml;\n\n private document = inject(DOCUMENT);\n private config = inject(FaConfig);\n\n constructor(\n @Optional() private parent: FaLayersComponent,\n private sanitizer: DomSanitizer,\n ) {\n faWarnIfParentNotExist(this.parent, 'FaLayersComponent', this.constructor.name);\n }\n\n ngOnChanges(changes: SimpleChanges) {\n if (changes) {\n const params = this.buildParams();\n this.updateContent(params);\n }\n }\n\n /bin /run /sbin angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock Updating params by component props.\n */\n protected buildParams(): TextParams {\n const classOpts: FaProps = {\n flip: this.flip,\n border: this.border,\n inverse: this.inverse,\n size: this.size || null,\n pull: this.pull || null,\n rotate: this.rotate || null,\n fixedWidth: this.fixedWidth,\n };\n\n const parsedTransform = typeof this.transform === 'string' ? parse.transform(this.transform) : this.transform;\n\n const styles: Styles = {};\n if (classOpts.rotate != null && !isKnownRotateValue(classOpts.rotate)) {\n styles['--fa-rotate-angle'] = `${classOpts.rotate}`;\n }\n\n return {\n transform: parsedTransform,\n classes: faClassList(classOpts),\n title: this.title,\n styles,\n };\n }\n\n private updateContent(params: TextParams) {\n ensureCss(this.document, this.config);\n this.renderedHTML = this.sanitizer.bypassSecurityTrustHtml(text(this.content || '', params).html.join('\\n'));\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-fontawesome/src/lib/layers/layers.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 20,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 23,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        165,
                        387
                      ],
                      "text": ", ChangeDetectionStrategy,\n} from '@angular/core';\nimport { SizeProp } from '@fortawesome/fontawesome-svg-core';\nimport { FaConfig } from '../config';\nimport { ensureCss } from '../shared/utils/css';\n\n/**\n angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock Fontawesome layers.\n */\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 25,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 25,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 27,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 27,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/sort-lifecycle-methods",
                "severity": 2,
                "message": "Lifecycle Methods are not declared in order of execution",
                "line": 43,
                "column": 3,
                "nodeType": "Identifier",
                "messageId": "lifecycleMethodsNotSorted",
                "endLine": 43,
                "endColumn": 14
              }
            ],
            "suppressedMessages": [],
            "errorCount": 4,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { DOCUMENT } from '@angular/common';\nimport {\n Component,\n ElementRef,\n HostBinding,\n inject,\n Input,\n OnChanges,\n OnInit,\n Renderer2,\n SimpleChanges,\n} from '@angular/core';\nimport { SizeProp } from '@fortawesome/fontawesome-svg-core';\nimport { FaConfig } from '../config';\nimport { ensureCss } from '../shared/utils/css';\n\n/**\n angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock Fontawesome layers.\n */\n@Component({\n selector: 'fa-layers',\n template: `<ng-content></ng-content>`,\n})\nexport class FaLayersComponent implements OnInit, OnChanges {\n @Input() size?: SizeProp;\n\n @Input() @HostBinding('class.fa-fw') fixedWidth?: boolean;\n\n private document = inject(DOCUMENT);\n\n constructor(\n private renderer: Renderer2,\n private elementRef: ElementRef,\n private config: FaConfig,\n ) {}\n\n ngOnInit() {\n this.renderer.addClass(this.elementRef.nativeElement, 'fa-layers');\n ensureCss(this.document, this.config);\n this.fixedWidth = typeof this.fixedWidth === 'boolean' ? this.fixedWidth : this.config.fixedWidth;\n }\n\n ngOnChanges(changes: SimpleChanges) {\n if ('size' in changes) {\n if (changes.size.currentValue != null) {\n this.renderer.addClass(this.elementRef.nativeElement, `fa-${changes.size.currentValue}`);\n }\n if (changes.size.previousValue != null) {\n this.renderer.removeClass(this.elementRef.nativeElement, `fa-${changes.size.previousValue}`);\n }\n }\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-fontawesome/src/lib/stack/stack-item-size.directive.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 14,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 14,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 19,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 19,
                "endColumn": 11
              }
            ],
            "suppressedMessages": [
              {
                "ruleId": "@angular-eslint/directive-selector",
                "severity": 2,
                "message": "The selector should start with one of these prefixes: \"fa\" (https://angular.dev/style-guide#style-02-08)",
                "line": 7,
                "column": 13,
                "nodeType": "Literal",
                "messageId": "prefixFailure",
                "endLine": 7,
                "endColumn": 68,
                "suppressions": [
                  {
                    "kind": "directive",
                    "justification": ""
                  }
                ]
              }
            ],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Directive, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { SizeProp } from '@fortawesome/fontawesome-svg-core';\nimport { FaStackComponent } from './stack.component';\n\n@Directive({\n // eslint-disable-next-line @angular-eslint/directive-selector\n selector: 'fa-icon[stackItemSize],fa-duotone-icon[stackItemSize]',\n})\nexport class FaStackItemSizeDirective implements OnChanges {\n /bin /run /sbin angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock Specify whether icon inside {@link FaStackComponent} should be rendered in\n angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock regular size (1x) or as a larger icon (2x).\n */\n @Input() stackItemSize: '1x' | '2x' = '1x';\n\n /bin /run /sbin angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock @internal\n */\n @Input() size?: SizeProp;\n\n ngOnChanges(changes: SimpleChanges) {\n if ('size' in changes) {\n throw new Error(\n 'fa-icon is not allowed to customize size when used inside fa-stack. ' +\n 'Set size on the enclosing fa-stack instead: <fa-stack size=\"4x\">...</fa-stack>.',\n );\n }\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-fontawesome/src/lib/stack/stack.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 4,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 7,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        82,
                        185
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { SizeProp } from '@fortawesome/fontawesome-svg-core';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 15,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 15,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/sort-lifecycle-methods",
                "severity": 2,
                "message": "Lifecycle Methods are not declared in order of execution",
                "line": 26,
                "column": 3,
                "nodeType": "Identifier",
                "messageId": "lifecycleMethodsNotSorted",
                "endLine": 26,
                "endColumn": 14
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ElementRef, Input, OnChanges, OnInit, Renderer2, SimpleChanges } from '@angular/core';\nimport { SizeProp } from '@fortawesome/fontawesome-svg-core';\n\n@Component({\n selector: 'fa-stack',\n template: `<ng-content></ng-content>`,\n})\nexport class FaStackComponent implements OnInit, OnChanges {\n /bin /run /sbin angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock Size of the stacked icon.\n angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock Note that stacked icon is by default 2 times bigger, than non-stacked icon.\n angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock You'll need to set size using custom CSS to align stacked icon with a\n angular-fontawesome.report.json angular.json CHANGELOG.md CODE_OF_CONDUCT.md CONTRIBUTING.md DEVELOPER.md docs karma.conf.js LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended ng-package.json node_modules package.json projects README.md src tasks testing tsconfig.json tsconfig.lib.json tsconfig.lib.prod.json tsconfig.spec.json UPGRADING.md yarn.lock simple one. E.g. `fa-stack { font-size: 0.5em; }`.\n */\n @Input() size?: SizeProp;\n\n constructor(\n private renderer: Renderer2,\n private elementRef: ElementRef,\n ) {}\n\n ngOnInit() {\n this.renderer.addClass(this.elementRef.nativeElement, 'fa-stack');\n }\n\n ngOnChanges(changes: SimpleChanges) {\n if ('size' in changes) {\n if (changes.size.currentValue != null) {\n this.renderer.addClass(this.elementRef.nativeElement, `fa-${changes.size.currentValue}`);\n }\n if (changes.size.previousValue != null) {\n this.renderer.removeClass(this.elementRef.nativeElement, `fa-${changes.size.previousValue}`);\n }\n }\n }\n}\n",
            "usedDeprecatedRules": []
          }
        ]
      },
      "demo": {
        "recommended": [],
        "all": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-fontawesome/projects/demo/src/app/alternate-prefix.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 5,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 10,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        240
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { FaConfig, FaIconComponent, FaIconLibrary } from '@fortawesome/angular-fontawesome';\nimport { faBellSlash, faHandPaper, faUser } from '@fortawesome/free-regular-svg-icons';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\nimport { FaConfig, FaIconComponent, FaIconLibrary } from '@fortawesome/angular-fontawesome';\nimport { faBellSlash, faHandPaper, faUser } from '@fortawesome/free-regular-svg-icons';\n\n@Component({\n selector: 'app-alternate-prefix',\n imports: [FaIconComponent],\n templateUrl: './alternate-prefix.component.html',\n providers: [FaConfig],\n})\nexport class AlternatePrefixComponent {\n constructor(faConfig: FaConfig, library: FaIconLibrary) {\n // Setting the defaultPrefix to far\n faConfig.defaultPrefix = 'far';\n // Adding dynamic icons to library for use\n library.addIcons(faUser, faHandPaper, faBellSlash);\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-fontawesome/projects/demo/src/app/app.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 24,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 29,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        65,
                        625
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { FaConfig, FaIconLibrary, FontAwesomeModule, IconDefinition } from '@fortawesome/angular-fontawesome';\nimport { faFlag, faUser as regularUser } from '@fortawesome/free-regular-svg-icons';\nimport {\n faAdjust,\n faBatteryQuarter,\n faBell,\n faCircle,\n faCoffee,\n faCog,\n faEllipsisH,\n faFighterJet,\n faFlag as solidFlag,\n faHeart,\n faMagic,\n faSpinner,\n faSquare,\n faTimes,\n faUser,\n} from '@fortawesome/free-solid-svg-icons';\nimport { AlternatePrefixComponent } from './alternate-prefix.component';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { DecimalPipe } from '@angular/common';\nimport { Component } from '@angular/core';\nimport { FaConfig, FaIconLibrary, FontAwesomeModule, IconDefinition } from '@fortawesome/angular-fontawesome';\nimport { faFlag, faUser as regularUser } from '@fortawesome/free-regular-svg-icons';\nimport {\n faAdjust,\n faBatteryQuarter,\n faBell,\n faCircle,\n faCoffee,\n faCog,\n faEllipsisH,\n faFighterJet,\n faFlag as solidFlag,\n faHeart,\n faMagic,\n faSpinner,\n faSquare,\n faTimes,\n faUser,\n} from '@fortawesome/free-solid-svg-icons';\nimport { AlternatePrefixComponent } from './alternate-prefix.component';\n\n@Component({\n selector: 'app-root',\n imports: [DecimalPipe, FontAwesomeModule, AlternatePrefixComponent],\n templateUrl: './app.component.html',\n styleUrl: './app.component.scss',\n})\nexport class AppComponent {\n faBell = faBell;\n faCog = faCog;\n faFlag = faFlag;\n solidFlag = solidFlag;\n faTimes = faTimes;\n faMagic = faMagic;\n faAdjust = faAdjust;\n faCircle = faCircle;\n faCoffee = faCoffee;\n faSquare = faSquare;\n regularUser = regularUser;\n faEllipsisH = faEllipsisH;\n faFighterJet = faFighterJet;\n faBatteryQuarter = faBatteryQuarter;\n faHeart = faHeart;\n faSpinner = faSpinner;\n faDummy: IconDefinition = {\n prefix: 'fad',\n iconName: 'dummy',\n icon: [512, 512, [], '', ['M50 50 H412 V250 H50 Z', 'M50 262 H412 V462 H50 Z']],\n };\n\n notificationsCounter = 1000;\n isAnimated = true;\n magicLevel = 0;\n\n selectedPosition: 'bottom-right' | 'bottom-left' | 'top-right' | 'top-left';\n\n constructor(library: FaIconLibrary, faConfig: FaConfig) {\n // Notice that we're adding two different icon objects to the library.\n // Each of them within their respective icon npm packages are exported as faUser,\n // but we've renamed the second one in order to disambiguate the two objects within\n // this JavaScript module. Internally, these objects are different, even though they have the same iconName.\n // They have different prefixes: faUser has a prefix of fas, since it came from free-solid-svg-icons;\n // regularUser has a prefix of far, since it came from free-regular-svg-icons.\n // And of course, they also have different SVG content, resulting in different appearances.\n // So they really are totally different icons. However, they share the same iconName: user.\n // So in the template, the only way to reference the non-default (fas) icon is to either\n // use the array syntax that specifies [prefix, iconName], like this:\n //\n // <fa-icon [icon]=\"['far','user']\"></fa-icon>\n //\n // Or we could make the regularUser object available to the template and simply\n // reference it as an object, like this:\n //\n // <fa-icon [icon]=\"regularUser\"></fa-icon>\n //\n // You don't specify the prefix in that case, because the icon object knows its own prefix.\n library.addIcons(faUser, regularUser);\n faConfig.fallbackIcon = faMagic;\n }\n\n onChange(event: any) {\n this.selectedPosition = event.target.value;\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-fontawesome/projects/demo/src/app/testing/explicit-reference.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 5,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 9,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        187
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\n\n@Component({\n selector: 'app-explicit-reference',\n imports: [FaIconComponent],\n template: '<fa-icon [icon]=\"faUser\"></fa-icon>',\n})\nexport class ExplicitReferenceComponent {\n faUser = faUser;\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-fontawesome/projects/demo/src/app/testing/icon-library.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 4,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 8,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        127
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\nimport { FaIconComponent } from '@fortawesome/angular-fontawesome';\n\n@Component({\n selector: 'app-regular-icon-library',\n imports: [FaIconComponent],\n template: '<fa-icon icon=\"user\"></fa-icon>',\n})\nexport class IconLibraryComponent {}\n",
            "usedDeprecatedRules": []
          }
        ]
      }
    }
  },
  "angular-calendar": {
    "repo": {
      "HEAD": {
        "commit": "987fa74220e84d85265b01e53e248932ad1a3da6",
        "author": "Matt Lewis",
        "date": "Wed Aug 21 18:37:18 2024 +0100",
        "message": "chore: update angular.json config"
      },
      "url": "https://github.com/mattlewis92/angular-calendar"
    },
    "before": {
      "demos": {
        "recommended": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/environments/environment.prod.ts",
            "messages": [
              {
                "ruleId": null,
                "fatal": true,
                "severity": 2,
                "message": "Parsing error: ESLint was configured to run on `<tsconfigRootDir>/projects/demos/environments/environment.prod.ts` using `parserOptions.project`: <tsconfigRootDir>/projects/demos/tsconfig.app.json\nHowever, that TSConfig does not include this file. Either:\n- Change ESLint's list of included files to not include this file\n- Change that TSConfig to include this file\n- Create a new TSConfig that includes this file and include it in your parserOptions.project\nSee the typescript-eslint docs for more info: https://typescript-eslint.io/linting/troubleshooting#i-get-errors-telling-me-eslint-was-configured-to-run--however-that-tsconfig-does-not--none-of-those-tsconfigs-include-this-file",
                "nodeType": null
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 1,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "export const environment = {\n production: true,\n};\n",
            "usedDeprecatedRules": []
          }
        ],
        "all": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/carbon-ad/carbon-ad.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 8,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 13,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        72,
                        114
                      ],
                      "text": ", ChangeDetectionStrategy,\n} from '@angular/core';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/consistent-component-styles",
                "severity": 2,
                "message": "Use `styleUrl` instead of `styleUrls` for a single stylesheet",
                "line": 11,
                "column": 3,
                "nodeType": "Property",
                "messageId": "useStyleUrl",
                "endLine": 11,
                "endColumn": 44,
                "fix": {
                  "range": [
                    188,
                    229
                  ],
                  "text": "styleUrl: './carbon-ad.component.scss'"
                }
              },
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 12,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 12,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        51,
                        271
                      ],
                      "text": ",\n} from '@angular/core';\n\n@Component({\n selector: 'mwl-carbon-ad',\n templateUrl: './carbon-ad.component.html',\n styleUrls: ['./carbon-ad.component.scss'],\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import {\n AfterViewInit,\n Component,\n ElementRef,\n ViewEncapsulation,\n} from '@angular/core';\n\n@Component({\n selector: 'mwl-carbon-ad',\n templateUrl: './carbon-ad.component.html',\n styleUrls: ['./carbon-ad.component.scss'],\n encapsulation: ViewEncapsulation.None,\n})\nexport class CarbonAdComponent implements AfterViewInit {\n constructor(private elementRef: ElementRef<HTMLElement>) {}\n\n ngAfterViewInit(): void {\n const script = document.createElement('script');\n script.src =\n '//cdn.carbonads.com/carbon.js?serve=CESIVK3U&placement=mattlewis92githubio';\n script.id = '_carbonads_js';\n this.elementRef.nativeElement.append(script);\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-app.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 84,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 88,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        37,
                        3124
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { Router, NavigationStart, NavigationEnd } from '@angular/router';\nimport { map, take, filter } from 'rxjs/operators';\nimport StackBlitzSDK from '@stackblitz/sdk';\nimport { Angulartics2GoogleGlobalSiteTag } from 'angulartics2';\nimport { sources as demoUtilsSources } from './demo-modules/demo-utils/sources';\nimport { Subject } from 'rxjs';\nimport { NgbNav } from '@ng-bootstrap/ng-bootstrap/nav/nav';\n\ninterface Source {\n filename: string;\n contents: {\n raw: string;\n highlighted: string;\n };\n language: string;\n}\n\ninterface Demo {\n label: string;\n path: string;\n sources?: Source[];\n darkTheme: boolean;\n tags: string[];\n}\n\nfunction getSources(folder: string): Promise<Source[]> {\n return import('./demo-modules/' + folder + '/sources.ts').then(\n ({ sources }) => {\n return sources.map(({ filename, contents }) => {\n const [, extension]: RegExpMatchArray = filename.match(/^.+\\.(.+)$/);\n const languages: { [extension: string]: string } = {\n ts: 'typescript',\n html: 'html',\n css: 'css',\n };\n return {\n filename,\n contents: {\n raw: contents.raw.default\n .replace(\n \",\\n RouterModule.forChild([{ path: '', component: DemoComponent }])\",\n ''\n )\n .replace(\"\\nimport { RouterModule } from '@angular/router';\", ''),\n highlighted: contents.highlighted.default // TODO - move this into a regexp replace for both\n .replace(\n ',\\n RouterModule.forChild([{ path: <span class=\"hljs-string\">\\'\\'</span>, component: DemoComponent }])',\n ''\n )\n .replace(\n '\\n<span class=\"hljs-keyword\">import</span> { RouterModule } from <span class=\"hljs-string\">\\'@angular/router\\'</span>;',\n ''\n ),\n },\n language: languages[extension],\n };\n });\n }\n );\n}\n\nconst dependencyVersions: any = {\n angular: require('@angular/core/package.json').version,\n angularRouter: require('@angular/router/package.json').version,\n angularCalendar: require('../../../package.json').version,\n calendarUtils: require('calendar-utils/package.json').version,\n angularResizableElement: require('angular-resizable-element/package.json')\n .version,\n angularDraggableDroppable: require('angular-draggable-droppable/package.json')\n .version,\n dateFns: require('date-fns/package.json').version,\n rxjs: require('rxjs/package.json').version,\n bootstrap: require('bootstrap/package.json').version,\n zoneJs: require('zone.js/package.json').version,\n ngBootstrap: require('@ng-bootstrap/ng-bootstrap/package.json').version,\n rrule: require('rrule/package.json').version,\n fontAwesome: require('@fortawesome/fontawesome-free/package.json').version,\n positioning: require('positioning/package.json').version,\n flatpickr: require('flatpickr/package.json').version,\n angularxFlatpickr: require('angularx-flatpickr/package.json').version,\n};\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/consistent-component-styles",
                "severity": 2,
                "message": "Use `styleUrl` instead of `styleUrls` for a single stylesheet",
                "line": 86,
                "column": 3,
                "nodeType": "Property",
                "messageId": "useStyleUrl",
                "endLine": 86,
                "endColumn": 32,
                "fix": {
                  "range": [
                    3152,
                    3181
                  ],
                  "text": "styleUrl: './demo-app.css'"
                }
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use the `viewChild` function instead of the `ViewChild` decorator",
                "line": 90,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferQuerySignals",
                "endLine": 90,
                "endColumn": 20
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import { Component, OnInit, ViewChild } from '@angular/core';\nimport { Router, NavigationStart, NavigationEnd } from '@angular/router';\nimport { map, take, filter } from 'rxjs/operators';\nimport StackBlitzSDK from '@stackblitz/sdk';\nimport { Angulartics2GoogleGlobalSiteTag } from 'angulartics2';\nimport { sources as demoUtilsSources } from './demo-modules/demo-utils/sources';\nimport { Subject } from 'rxjs';\nimport { NgbNav } from '@ng-bootstrap/ng-bootstrap/nav/nav';\n\ninterface Source {\n filename: string;\n contents: {\n raw: string;\n highlighted: string;\n };\n language: string;\n}\n\ninterface Demo {\n label: string;\n path: string;\n sources?: Source[];\n darkTheme: boolean;\n tags: string[];\n}\n\nfunction getSources(folder: string): Promise<Source[]> {\n return import('./demo-modules/' + folder + '/sources.ts').then(\n ({ sources }) => {\n return sources.map(({ filename, contents }) => {\n const [, extension]: RegExpMatchArray = filename.match(/^.+\\.(.+)$/);\n const languages: { [extension: string]: string } = {\n ts: 'typescript',\n html: 'html',\n css: 'css',\n };\n return {\n filename,\n contents: {\n raw: contents.raw.default\n .replace(\n \",\\n RouterModule.forChild([{ path: '', component: DemoComponent }])\",\n ''\n )\n .replace(\"\\nimport { RouterModule } from '@angular/router';\", ''),\n highlighted: contents.highlighted.default // TODO - move this into a regexp replace for both\n .replace(\n ',\\n RouterModule.forChild([{ path: <span class=\"hljs-string\">\\'\\'</span>, component: DemoComponent }])',\n ''\n )\n .replace(\n '\\n<span class=\"hljs-keyword\">import</span> { RouterModule } from <span class=\"hljs-string\">\\'@angular/router\\'</span>;',\n ''\n ),\n },\n language: languages[extension],\n };\n });\n }\n );\n}\n\nconst dependencyVersions: any = {\n angular: require('@angular/core/package.json').version,\n angularRouter: require('@angular/router/package.json').version,\n angularCalendar: require('../../../package.json').version,\n calendarUtils: require('calendar-utils/package.json').version,\n angularResizableElement: require('angular-resizable-element/package.json')\n .version,\n angularDraggableDroppable: require('angular-draggable-droppable/package.json')\n .version,\n dateFns: require('date-fns/package.json').version,\n rxjs: require('rxjs/package.json').version,\n bootstrap: require('bootstrap/package.json').version,\n zoneJs: require('zone.js/package.json').version,\n ngBootstrap: require('@ng-bootstrap/ng-bootstrap/package.json').version,\n rrule: require('rrule/package.json').version,\n fontAwesome: require('@fortawesome/fontawesome-free/package.json').version,\n positioning: require('positioning/package.json').version,\n flatpickr: require('flatpickr/package.json').version,\n angularxFlatpickr: require('angularx-flatpickr/package.json').version,\n};\n\n@Component({\n selector: 'mwl-demo-app',\n styleUrls: ['./demo-app.css'],\n templateUrl: './demo-app.html',\n})\nexport class DemoAppComponent implements OnInit {\n @ViewChild('nav') nav: NgbNav;\n demos: Demo[] = [];\n filteredDemos: Demo[] = [];\n activeDemo: Demo;\n isMenuVisible = false;\n firstDemoLoaded = false;\n searchText = '';\n copied$ = new Subject<boolean>();\n\n constructor(\n private router: Router,\n analytics: Angulartics2GoogleGlobalSiteTag\n ) {\n analytics.startTracking();\n }\n\n ngOnInit() {\n const defaultRoute = this.router.config.find(\n (route) => route.path === '**'\n );\n\n this.demos = this.router.config\n .filter((route) => route.path !== '**')\n .map((route) => ({\n path: route.path,\n label: route.data.label,\n darkTheme: route.data.darkTheme,\n tags: route.data.tags || [],\n }));\n this.updateFilteredDemos();\n\n this.router.events\n .pipe(filter((event) => event instanceof NavigationEnd))\n .pipe(take(1))\n .subscribe(() => {\n this.firstDemoLoaded = true;\n });\n\n this.router.events\n .pipe(filter((event) => event instanceof NavigationStart))\n .pipe(\n map((event: NavigationStart) => {\n if (event.url === '/') {\n return { url: `/${defaultRoute.redirectTo}` };\n }\n return event;\n })\n )\n .subscribe((event: NavigationStart) => {\n this.activeDemo = this.demos.find(\n (demo) => `/${demo.path}` === event.url\n );\n getSources(this.activeDemo.path).then((sources) => {\n this.activeDemo.sources = sources;\n });\n });\n\n const script = document.createElement('script');\n script.async = true;\n script.setAttribute('data-uid', '7c1627e655');\n script.src = 'https://angular-calendar.ck.page/7c1627e655/index.js';\n document.getElementsByTagName('head')[0].appendChild(script);\n }\n\n updateFilteredDemos() {\n this.filteredDemos = this.demos.filter(\n (demo) =>\n !this.searchText ||\n [demo.label.toLowerCase(), ...demo.tags].some((tag) =>\n tag.includes(this.searchText.toLowerCase())\n )\n );\n }\n\n editInStackblitz(demo: Demo): void {\n const files: {\n [path: string]: string;\n } = {\n 'index.html': `\n<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@${dependencyVersions.bootstrap}/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n<link href=\"https://unpkg.com/@fortawesome/fontawesome-free@${dependencyVersions.fontAwesome}/css/all.css\" rel=\"stylesheet\">\n<link href=\"https://unpkg.com/angular-calendar@${dependencyVersions.angularCalendar}/css/angular-calendar.css\" rel=\"stylesheet\">\n<link href=\"https://unpkg.com/flatpickr@${dependencyVersions.flatpickr}/dist/flatpickr.css\" rel=\"stylesheet\">\n<mwl-demo-component>Loading...</mwl-demo-component>\n`.trim(),\n 'main.ts': `\nimport 'zone.js';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { NgModule } from '@angular/core';\nimport { DemoModule } from './demo/module';\nimport { DemoComponent } from './demo/component';\n\n@NgModule({\n imports: [\n BrowserModule,\n BrowserAnimationsModule,\n DemoModule\n ],\n bootstrap: [DemoComponent]\n})\nexport class BootstrapModule {}\n\nplatformBrowserDynamic().bootstrapModule(BootstrapModule).then(ref => {\n // Ensure Angular destroys itself on hot reloads.\n if (window['ngRef']) {\n window['ngRef'].destroy();\n }\n window['ngRef'] = ref;\n\n // Otherwise, log the boot error\n}).catch(err => console.error(err));\n`.trim(),\n };\n\n demoUtilsSources.forEach((source) => {\n files[`demo-utils/${source.filename}`] = source.contents.raw.default;\n });\n\n demo.sources.forEach((source) => {\n files[`demo/${source.filename}`] = source.contents.raw;\n });\n\n StackBlitzSDK.openProject(\n {\n title: 'Angular Calendar Demo',\n description: demo.label,\n template: 'angular-cli',\n tags: ['angular-calendar'],\n files,\n dependencies: {\n '@angular/core': dependencyVersions.angular,\n '@angular/common': dependencyVersions.angular,\n '@angular/compiler': dependencyVersions.angular,\n '@angular/platform-browser': dependencyVersions.angular,\n '@angular/platform-browser-dynamic': dependencyVersions.angular,\n '@angular/router': dependencyVersions.angular,\n '@angular/forms': dependencyVersions.angular,\n '@angular/animations': dependencyVersions.angular,\n rxjs: dependencyVersions.rxjs,\n 'zone.js': dependencyVersions.zoneJs,\n 'angular-draggable-droppable': `^${dependencyVersions.angularDraggableDroppable}`,\n 'angular-resizable-element': `^${dependencyVersions.angularResizableElement}`,\n 'date-fns': dependencyVersions.dateFns,\n 'angular-calendar': dependencyVersions.angularCalendar,\n '@ng-bootstrap/ng-bootstrap': '5.0.0', // pinned due to issue with stackblitz generation\n rrule: dependencyVersions.rrule,\n 'calendar-utils': dependencyVersions.calendarUtils,\n flatpickr: dependencyVersions.flatpickr,\n 'angularx-flatpickr': dependencyVersions.angularxFlatpickr,\n },\n },\n {\n openFile: 'demo/component.ts',\n }\n );\n }\n\n copied() {\n this.copied$.next(true);\n setTimeout(() => {\n this.copied$.next(false);\n }, 1000);\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/additional-event-properties/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 8,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 8,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Month;\n\n viewDate: Date = new Date();\n\n events: CalendarEvent<{ id: number }>[] = [\n {\n title: 'Event 1',\n color: colors.yellow,\n start: new Date(),\n meta: {\n id: 1,\n },\n },\n {\n title: 'Event 2',\n color: colors.blue,\n start: new Date(),\n meta: {\n id: 2,\n },\n },\n ];\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/all-day-events/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 8,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 8,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent } from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n})\nexport class DemoComponent {\n viewDate: Date = new Date();\n\n events: CalendarEvent[] = [\n {\n title: 'An all day event',\n color: colors.yellow,\n start: new Date(),\n allDay: true,\n },\n {\n title: 'A non all day event',\n color: colors.blue,\n start: new Date(),\n },\n ];\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/async-events/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 39,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 39,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\nimport {\n isSameMonth,\n isSameDay,\n startOfMonth,\n endOfMonth,\n startOfWeek,\n endOfWeek,\n startOfDay,\n endOfDay,\n format,\n} from 'date-fns';\nimport { Observable } from 'rxjs';\nimport { colors } from '../demo-utils/colors';\n\ninterface Film {\n id: number;\n title: string;\n release_date: string;\n}\n\nfunction getTimezoneOffsetString(date: Date): string {\n const timezoneOffset = date.getTimezoneOffset();\n const hoursOffset = String(\n Math.floor(Math.abs(timezoneOffset / 60))\n ).padStart(2, '0');\n const minutesOffset = String(Math.abs(timezoneOffset % 60)).padEnd(2, '0');\n const direction = timezoneOffset > 0 ? '-' : '+';\n\n return `T00:00:00${direction}${hoursOffset}:${minutesOffset}`;\n}\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n})\nexport class DemoComponent implements OnInit {\n view: CalendarView = CalendarView.Month;\n\n viewDate: Date = new Date();\n\n events$: Observable<CalendarEvent<{ film: Film }>[]>;\n\n activeDayIsOpen: boolean = false;\n\n constructor(private http: HttpClient) {}\n\n ngOnInit(): void {\n this.fetchEvents();\n }\n\n fetchEvents(): void {\n const getStart: any = {\n month: startOfMonth,\n week: startOfWeek,\n day: startOfDay,\n }[this.view];\n\n const getEnd: any = {\n month: endOfMonth,\n week: endOfWeek,\n day: endOfDay,\n }[this.view];\n\n const params = new HttpParams()\n .set(\n 'primary_release_date.gte',\n format(getStart(this.viewDate), 'yyyy-MM-dd')\n )\n .set(\n 'primary_release_date.lte',\n format(getEnd(this.viewDate), 'yyyy-MM-dd')\n )\n .set('api_key', '0ec33936a68018857d727958dca1424f');\n\n this.events$ = this.http\n .get('https://api.themoviedb.org/3/discover/movie', { params })\n .pipe(\n map(({ results }: { results: Film[] }) => {\n return results.map((film: Film) => {\n return {\n title: film.title,\n start: new Date(\n film.release_date + getTimezoneOffsetString(this.viewDate)\n ),\n color: colors.yellow,\n allDay: true,\n meta: {\n film,\n },\n };\n });\n })\n );\n }\n\n dayClicked({\n date,\n events,\n }: {\n date: Date;\n events: CalendarEvent<{ film: Film }>[];\n }): void {\n if (isSameMonth(date, this.viewDate)) {\n if (\n (isSameDay(this.viewDate, date) && this.activeDayIsOpen === true) ||\n events.length === 0\n ) {\n this.activeDayIsOpen = false;\n } else {\n this.activeDayIsOpen = true;\n this.viewDate = date;\n }\n }\n }\n\n eventClicked(event: CalendarEvent<{ film: Film }>): void {\n window.open(\n `https://www.themoviedb.org/movie/${event.meta.film.id}`,\n '_blank'\n );\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/before-view-render/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 17,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 17,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        47,
                        413
                      ],
                      "text": ",\n} from '@angular/core';\nimport {\n CalendarEvent,\n CalendarMonthViewBeforeRenderEvent,\n CalendarWeekViewBeforeRenderEvent,\n CalendarDayViewBeforeRenderEvent,\n CalendarView,\n} from 'angular-calendar';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 18,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 18,
                "endColumn": 31
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`styles` has too many lines (5). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 19,
                "column": 11,
                "nodeType": "ArrayExpression",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 27,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/consistent-component-styles",
                "severity": 2,
                "message": "Use a `string` instead of a `string[]` for the `styles` property",
                "line": 19,
                "column": 11,
                "nodeType": "ArrayExpression",
                "messageId": "useStylesString",
                "endLine": 27,
                "endColumn": 4,
                "fix": {
                  "range": [
                    456,
                    639
                  ],
                  "text": "`\n .cal-month-view .bg-pink,\n .cal-week-view .cal-day-columns .bg-pink,\n .cal-day-view .bg-pink {\n background-color: hotpink !important;\n }\n `"
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 4,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n ChangeDetectionStrategy,\n ViewEncapsulation,\n} from '@angular/core';\nimport {\n CalendarEvent,\n CalendarMonthViewBeforeRenderEvent,\n CalendarWeekViewBeforeRenderEvent,\n CalendarDayViewBeforeRenderEvent,\n CalendarView,\n} from 'angular-calendar';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n templateUrl: 'template.html',\n styles: [\n `\n .cal-month-view .bg-pink,\n .cal-week-view .cal-day-columns .bg-pink,\n .cal-day-view .bg-pink {\n background-color: hotpink !important;\n }\n `,\n ],\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Month;\n\n viewDate: Date = new Date();\n\n events: CalendarEvent[] = [];\n\n beforeMonthViewRender(renderEvent: CalendarMonthViewBeforeRenderEvent): void {\n renderEvent.body.forEach((day) => {\n const dayOfMonth = day.date.getDate();\n if (dayOfMonth > 5 && dayOfMonth < 10 && day.inMonth) {\n day.cssClass = 'bg-pink';\n }\n });\n }\n\n beforeWeekViewRender(renderEvent: CalendarWeekViewBeforeRenderEvent) {\n renderEvent.hourColumns.forEach((hourColumn) => {\n hourColumn.hours.forEach((hour) => {\n hour.segments.forEach((segment) => {\n if (\n segment.date.getHours() >= 2 &&\n segment.date.getHours() <= 5 &&\n segment.date.getDay() === 2\n ) {\n segment.cssClass = 'bg-pink';\n }\n });\n });\n });\n }\n\n beforeDayViewRender(renderEvent: CalendarDayViewBeforeRenderEvent) {\n renderEvent.hourColumns.forEach((hourColumn) => {\n hourColumn.hours.forEach((hour) => {\n hour.segments.forEach((segment) => {\n if (segment.date.getHours() >= 2 && segment.date.getHours() <= 5) {\n segment.cssClass = 'bg-pink';\n }\n });\n });\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/clickable-days/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 7,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 7,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Month;\n\n viewDate: Date = new Date();\n\n events: CalendarEvent[] = [];\n\n clickedDate: Date;\n\n clickedColumn: number;\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/clickable-events/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 8,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 8,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Month;\n\n viewDate: Date = new Date();\n\n events: CalendarEvent[] = [\n {\n title: 'Click me',\n color: colors.yellow,\n start: new Date(),\n },\n {\n title: 'Or click me',\n color: colors.blue,\n start: new Date(),\n },\n ];\n\n eventClicked({ event }: { event: CalendarEvent }): void {\n console.log('Event clicked', event);\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/context-menu/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 13,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 13,
                "endColumn": 31
              },
              {
                "ruleId": "@angular-eslint/consistent-component-styles",
                "severity": 2,
                "message": "Use `styleUrl` instead of `styleUrls` for a single stylesheet",
                "line": 14,
                "column": 3,
                "nodeType": "Property",
                "messageId": "useStyleUrl",
                "endLine": 14,
                "endColumn": 31,
                "fix": {
                  "range": [
                    370,
                    398
                  ],
                  "text": "styleUrl: './styles.scss'"
                }
              },
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 15,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 15,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        47,
                        440
                      ],
                      "text": ",\n} from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\nimport { Subject } from 'rxjs';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n styleUrls: ['./styles.scss'],\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n ViewEncapsulation,\n} from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\nimport { Subject } from 'rxjs';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n styleUrls: ['./styles.scss'],\n encapsulation: ViewEncapsulation.None,\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Month;\n\n viewDate = new Date();\n\n events: CalendarEvent[] = [];\n\n refresh = new Subject<void>();\n\n addEvent(date: Date): void {\n this.events.push({\n start: date,\n title: 'New event',\n color: colors.red,\n });\n this.refresh.next();\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/custom-event-class/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 12,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 12,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        47,
                        344
                      ],
                      "text": ",\n} from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 13,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 13,
                "endColumn": 31
              },
              {
                "ruleId": "@angular-eslint/consistent-component-styles",
                "severity": 2,
                "message": "Use a `string` instead of a `string[]` for the `styles` property",
                "line": 15,
                "column": 11,
                "nodeType": "ArrayExpression",
                "messageId": "useStylesString",
                "endLine": 21,
                "endColumn": 4,
                "fix": {
                  "range": [
                    496,
                    587
                  ],
                  "text": "`\n .my-custom-class span {\n color: #ff3d7f !important;\n }\n `"
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n ChangeDetectionStrategy,\n ViewEncapsulation,\n} from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None, // hack to get the styles to apply locally\n templateUrl: 'template.html',\n // you should really include this CSS in your global stylesheet\n styles: [\n `\n .my-custom-class span {\n color: #ff3d7f !important;\n }\n `,\n ],\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Month;\n\n viewDate: Date = new Date();\n\n events: CalendarEvent[] = [\n {\n title: 'Has custom class',\n color: colors.yellow,\n start: new Date(),\n cssClass: 'my-custom-class',\n },\n ];\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/custom-hour-duration/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 13,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 13,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { setMinutes, setHours } from 'date-fns';\nimport { Subject } from 'rxjs';\nimport {\n CalendarEvent,\n CalendarEventTimesChangedEvent,\n CalendarView,\n} from 'angular-calendar';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Week;\n\n viewDate = new Date();\n\n events: CalendarEvent[] = [\n {\n start: setHours(setMinutes(new Date(), 20), 15),\n end: setHours(setMinutes(new Date(), 40), 17),\n title: 'An event',\n resizable: {\n afterEnd: true,\n },\n draggable: true,\n },\n ];\n\n refresh = new Subject<void>();\n\n eventTimesChanged({\n event,\n newStart,\n newEnd,\n }: CalendarEventTimesChangedEvent): void {\n event.start = newStart;\n event.end = newEnd;\n this.refresh.next();\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/custom-templates/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 7,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 7,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Month;\n\n viewDate: Date = new Date();\n\n events: CalendarEvent[] = [];\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/customise-current-time-marker/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/consistent-component-styles",
                "severity": 2,
                "message": "Use `styleUrl` instead of `styleUrls` for a single stylesheet",
                "line": 8,
                "column": 3,
                "nodeType": "Property",
                "messageId": "useStyleUrl",
                "endLine": 8,
                "endColumn": 31,
                "fix": {
                  "range": [
                    240,
                    268
                  ],
                  "text": "styleUrl: './styles.scss'"
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { getHours } from 'date-fns';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './template.html',\n styleUrls: ['./styles.scss'],\n})\nexport class DemoComponent {\n viewDate = new Date();\n\n showMarker = true;\n\n // just for the purposes of the demo so it all fits in one screen\n dayStartHour = Math.max(0, getHours(new Date()) - 2);\n\n dayEndHour = Math.min(23, getHours(new Date()) + 2);\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/customise-date-formats/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 12,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 12,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport {\n CalendarEvent,\n CalendarDateFormatter,\n CalendarView,\n} from 'angular-calendar';\nimport { CustomDateFormatter } from './custom-date-formatter.provider';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n providers: [\n {\n provide: CalendarDateFormatter,\n useClass: CustomDateFormatter,\n },\n ],\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Month;\n\n viewDate: Date = new Date();\n\n events: CalendarEvent[] = [];\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/customise-date-formats/custom-date-formatter.provider.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 5,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 5,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        182,
                        182
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        182,
                        182
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        182,
                        182
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { CalendarDateFormatter, DateFormatterParams } from 'angular-calendar';\nimport { formatDate } from '@angular/common';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class CustomDateFormatter extends CalendarDateFormatter {\n // you can override any of the methods defined in the parent class\n\n public monthViewColumnHeader({ date, locale }: DateFormatterParams): string {\n return formatDate(date, 'EEE', locale);\n }\n\n public monthViewTitle({ date, locale }: DateFormatterParams): string {\n return formatDate(date, 'MMM y', locale);\n }\n\n public weekViewColumnHeader({ date, locale }: DateFormatterParams): string {\n return formatDate(date, 'EEE', locale);\n }\n\n public dayViewHour({ date, locale }: DateFormatterParams): string {\n return formatDate(date, 'HH:mm', locale);\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/dark-theme/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 17,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 17,
                "endColumn": 31
              },
              {
                "ruleId": "@angular-eslint/consistent-component-styles",
                "severity": 2,
                "message": "Use `styleUrl` instead of `styleUrls` for a single stylesheet",
                "line": 18,
                "column": 3,
                "nodeType": "Property",
                "messageId": "useStyleUrl",
                "endLine": 18,
                "endColumn": 29,
                "fix": {
                  "range": [
                    416,
                    442
                  ],
                  "text": "styleUrl: 'styles.scss'"
                }
              },
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 18,
                "column": 15,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 18,
                "endColumn": 28
              },
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 19,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 19,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        80,
                        484
                      ],
                      "text": ",\n} from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\n\nimport { colors } from '../demo-utils/colors';\nimport { DOCUMENT } from '@angular/common';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n styleUrls: ['styles.scss'],\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 4,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n Inject,\n OnDestroy,\n OnInit,\n ViewEncapsulation,\n} from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\n\nimport { colors } from '../demo-utils/colors';\nimport { DOCUMENT } from '@angular/common';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n styleUrls: ['styles.scss'],\n encapsulation: ViewEncapsulation.None,\n})\nexport class DemoComponent implements OnInit, OnDestroy {\n view: CalendarView = CalendarView.Month;\n\n viewDate = new Date();\n\n events: CalendarEvent[] = [\n {\n title: 'An event',\n start: new Date(),\n color: colors.red,\n },\n ];\n\n private readonly darkThemeClass = 'dark-theme';\n\n constructor(@Inject(DOCUMENT) private document) {}\n\n ngOnInit(): void {\n this.document.body.classList.add(this.darkThemeClass);\n }\n\n ngOnDestroy(): void {\n this.document.body.classList.remove(this.darkThemeClass);\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/day-view-hour-split/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 7,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 7,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Day;\n\n viewDate: Date = new Date();\n\n events: CalendarEvent[] = [];\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/day-view-scheduler/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 26,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 26,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport {\n CalendarEvent,\n CalendarEventTimesChangedEvent,\n} from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\nimport { addHours, startOfDay } from 'date-fns';\nimport { User } from './day-view-scheduler.component';\n\nconst users: User[] = [\n {\n id: 0,\n name: 'John smith',\n color: colors.yellow,\n },\n {\n id: 1,\n name: 'Jane Doe',\n color: colors.blue,\n },\n];\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n})\nexport class DemoComponent {\n viewDate = new Date();\n\n users = users;\n\n events: CalendarEvent[] = [\n {\n title: 'An event',\n color: users[0].color,\n start: addHours(startOfDay(new Date()), 5),\n meta: {\n user: users[0],\n },\n resizable: {\n beforeStart: true,\n afterEnd: true,\n },\n draggable: true,\n },\n {\n title: 'Another event',\n color: users[1].color,\n start: addHours(startOfDay(new Date()), 2),\n meta: {\n user: users[1],\n },\n resizable: {\n beforeStart: true,\n afterEnd: true,\n },\n draggable: true,\n },\n {\n title: 'A 3rd event',\n color: users[0].color,\n start: addHours(startOfDay(new Date()), 7),\n meta: {\n user: users[0],\n },\n resizable: {\n beforeStart: true,\n afterEnd: true,\n },\n draggable: true,\n },\n {\n title: 'An all day event',\n color: users[0].color,\n start: new Date(),\n meta: {\n user: users[0],\n },\n draggable: true,\n allDay: true,\n },\n {\n title: 'Another all day event',\n color: users[1].color,\n start: new Date(),\n meta: {\n user: users[1],\n },\n draggable: true,\n allDay: true,\n },\n {\n title: 'A 3rd all day event',\n color: users[0].color,\n start: new Date(),\n meta: {\n user: users[0],\n },\n draggable: true,\n allDay: true,\n },\n ];\n\n eventTimesChanged({\n event,\n newStart,\n newEnd,\n }: CalendarEventTimesChangedEvent): void {\n event.start = newStart;\n event.end = newEnd;\n this.events = [...this.events];\n }\n\n userChanged({ event, newUser }) {\n event.color = newUser.color;\n event.meta.user = newUser;\n this.events = [...this.events];\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/day-view-scheduler/day-view-scheduler.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 45,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 45,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        780,
                        780
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        780,
                        780
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        780,
                        780
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 81,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 85,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        157,
                        1758
                      ],
                      "text": ", ChangeDetectionStrategy,\n} from '@angular/core';\nimport {\n CalendarUtils,\n CalendarWeekViewComponent,\n DateAdapter,\n getWeekViewPeriod,\n} from 'angular-calendar';\nimport {\n WeekView,\n GetWeekViewArgs,\n WeekViewTimeEvent,\n EventColor,\n CalendarEvent,\n WeekViewAllDayEventRow,\n WeekViewAllDayEvent,\n} from 'calendar-utils';\nimport { DragEndEvent, DragMoveEvent } from 'angular-draggable-droppable';\n\nexport interface User {\n id: number;\n name: string;\n color: EventColor;\n}\n\ninterface DayViewScheduler extends WeekView {\n users: User[];\n}\n\ninterface GetWeekViewArgsWithUsers extends GetWeekViewArgs {\n users: User[];\n}\n\n@Injectable()\nexport class DayViewSchedulerCalendarUtils extends CalendarUtils {\n getWeekView(args: GetWeekViewArgsWithUsers): DayViewScheduler {\n const { period } = super.getWeekView(args);\n const view: DayViewScheduler = {\n period,\n allDayEventRows: [],\n hourColumns: [],\n users: [...args.users],\n };\n\n view.users.forEach((user, columnIndex) => {\n const events = args.events.filter(\n (event) => event.meta.user.id === user.id\n );\n const columnView = super.getWeekView({\n ...args,\n events,\n });\n view.hourColumns.push(columnView.hourColumns[0]);\n columnView.allDayEventRows.forEach(({ row }, rowIndex) => {\n view.allDayEventRows[rowIndex] = view.allDayEventRows[rowIndex] || {\n row: [],\n };\n view.allDayEventRows[rowIndex].row.push({\n ...row[0],\n offset: columnIndex,\n span: 1,\n });\n });\n });\n\n return view;\n }\n}\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 83,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 83,
                "endColumn": 51
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 90,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 90,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 92,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 92,
                "endColumn": 24,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        2039,
                        2039
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 5,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectorRef,\n Component,\n ElementRef,\n EventEmitter,\n Inject,\n Injectable,\n Input,\n LOCALE_ID,\n OnChanges,\n Output,\n SimpleChanges,\n} from '@angular/core';\nimport {\n CalendarUtils,\n CalendarWeekViewComponent,\n DateAdapter,\n getWeekViewPeriod,\n} from 'angular-calendar';\nimport {\n WeekView,\n GetWeekViewArgs,\n WeekViewTimeEvent,\n EventColor,\n CalendarEvent,\n WeekViewAllDayEventRow,\n WeekViewAllDayEvent,\n} from 'calendar-utils';\nimport { DragEndEvent, DragMoveEvent } from 'angular-draggable-droppable';\n\nexport interface User {\n id: number;\n name: string;\n color: EventColor;\n}\n\ninterface DayViewScheduler extends WeekView {\n users: User[];\n}\n\ninterface GetWeekViewArgsWithUsers extends GetWeekViewArgs {\n users: User[];\n}\n\n@Injectable()\nexport class DayViewSchedulerCalendarUtils extends CalendarUtils {\n getWeekView(args: GetWeekViewArgsWithUsers): DayViewScheduler {\n const { period } = super.getWeekView(args);\n const view: DayViewScheduler = {\n period,\n allDayEventRows: [],\n hourColumns: [],\n users: [...args.users],\n };\n\n view.users.forEach((user, columnIndex) => {\n const events = args.events.filter(\n (event) => event.meta.user.id === user.id\n );\n const columnView = super.getWeekView({\n ...args,\n events,\n });\n view.hourColumns.push(columnView.hourColumns[0]);\n columnView.allDayEventRows.forEach(({ row }, rowIndex) => {\n view.allDayEventRows[rowIndex] = view.allDayEventRows[rowIndex] || {\n row: [],\n };\n view.allDayEventRows[rowIndex].row.push({\n ...row[0],\n offset: columnIndex,\n span: 1,\n });\n });\n });\n\n return view;\n }\n}\n\n@Component({\n selector: 'mwl-day-view-scheduler',\n templateUrl: 'day-view-scheduler.component.html',\n providers: [DayViewSchedulerCalendarUtils],\n})\nexport class DayViewSchedulerComponent\n extends CalendarWeekViewComponent\n implements OnChanges\n{\n @Input() users: User[] = [];\n\n @Output() userChanged = new EventEmitter();\n\n view: DayViewScheduler;\n\n daysInWeek = 1;\n\n constructor(\n protected cdr: ChangeDetectorRef,\n protected utils: DayViewSchedulerCalendarUtils,\n @Inject(LOCALE_ID) locale: string,\n protected dateAdapter: DateAdapter,\n protected element: ElementRef<HTMLElement>\n ) {\n super(cdr, utils, locale, dateAdapter, element);\n }\n\n trackByUserId = (index: number, row: User) => row.id;\n\n ngOnChanges(changes: SimpleChanges): void {\n super.ngOnChanges(changes);\n\n if (changes.users) {\n this.refreshBody();\n this.emitBeforeViewRender();\n }\n }\n\n getDayColumnWidth(eventRowContainer: HTMLElement): number {\n return Math.floor(eventRowContainer.offsetWidth / this.users.length);\n }\n\n dragMove(dayEvent: WeekViewTimeEvent, dragEvent: DragMoveEvent) {\n if (this.snapDraggedEvents) {\n const newUser = this.getDraggedUserColumn(dayEvent, dragEvent.x);\n const newEventTimes = this.getDragMovedEventTimes(\n dayEvent,\n { ...dragEvent, x: 0 },\n this.dayColumnWidth,\n true\n );\n const originalEvent = dayEvent.event;\n const adjustedEvent = {\n ...originalEvent,\n ...newEventTimes,\n meta: { ...originalEvent.meta, user: newUser },\n };\n const tempEvents = this.events.map((event) => {\n if (event === originalEvent) {\n return adjustedEvent;\n }\n return event;\n });\n this.restoreOriginalEvents(\n tempEvents,\n new Map([[adjustedEvent, originalEvent]])\n );\n }\n this.dragAlreadyMoved = true;\n }\n\n dragEnded(\n weekEvent: WeekViewAllDayEvent | WeekViewTimeEvent,\n dragEndEvent: DragEndEvent,\n dayWidth: number,\n useY = false\n ) {\n super.dragEnded(\n weekEvent,\n {\n ...dragEndEvent,\n x: 0,\n },\n dayWidth,\n useY\n );\n const newUser = this.getDraggedUserColumn(weekEvent, dragEndEvent.x);\n if (newUser && newUser !== weekEvent.event.meta.user) {\n this.userChanged.emit({ event: weekEvent.event, newUser });\n }\n }\n\n protected getWeekView(events: CalendarEvent[]) {\n return this.utils.getWeekView({\n events,\n users: this.users,\n viewDate: this.viewDate,\n weekStartsOn: this.weekStartsOn,\n excluded: this.excludeDays,\n precision: this.precision,\n absolutePositionedEvents: true,\n hourSegments: this.hourSegments,\n dayStart: {\n hour: this.dayStartHour,\n minute: this.dayStartMinute,\n },\n dayEnd: {\n hour: this.dayEndHour,\n minute: this.dayEndMinute,\n },\n segmentHeight: this.hourSegmentHeight,\n weekendDays: this.weekendDays,\n ...getWeekViewPeriod(\n this.dateAdapter,\n this.viewDate,\n this.weekStartsOn,\n this.excludeDays,\n this.daysInWeek\n ),\n });\n }\n\n private getDraggedUserColumn(\n dayEvent: WeekViewTimeEvent | WeekViewAllDayEvent,\n xPixels: number\n ) {\n const columnsMoved = Math.round(xPixels / this.dayColumnWidth);\n const currentColumnIndex = this.view.users.findIndex(\n (user) => user === dayEvent.event.meta.user\n );\n const newIndex = currentColumnIndex + columnsMoved;\n return this.view.users[newIndex];\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/day-view-start-end/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 7,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 7,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Day;\n\n viewDate: Date = new Date();\n\n events: CalendarEvent[] = [];\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/dayjs/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 14,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 14,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent, CalendarView, DAYS_OF_WEEK } from 'angular-calendar';\nimport dayjs from 'dayjs';\nimport en from 'dayjs/locale/en';\n\ndayjs.locale({\n ...en,\n weekStart: DAYS_OF_WEEK.MONDAY,\n});\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Month;\n\n viewDate: Date = new Date();\n\n events: CalendarEvent[] = [];\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/demo-utils/calendar-header.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 4,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 69,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        47,
                        137
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarView } from 'angular-calendar';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (61). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 6,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 68,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 71,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 71,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 73,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 73,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 75,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 75,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 77,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 77,
                "endColumn": 23,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        2075,
                        2075
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 79,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 79,
                "endColumn": 27,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        2135,
                        2135
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 7,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CalendarView } from 'angular-calendar';\n\n@Component({\n selector: 'mwl-demo-utils-calendar-header',\n template: `\n <div class=\"row text-center\">\n <div class=\"col-md-4\">\n <div class=\"btn-group\">\n <div\n class=\"btn btn-primary\"\n mwlCalendarPreviousView\n [view]=\"view\"\n [(viewDate)]=\"viewDate\"\n (viewDateChange)=\"viewDateChange.next(viewDate)\"\n >\n Previous\n </div>\n <div\n class=\"btn btn-outline-secondary\"\n mwlCalendarToday\n [(viewDate)]=\"viewDate\"\n (viewDateChange)=\"viewDateChange.next(viewDate)\"\n >\n Today\n </div>\n <div\n class=\"btn btn-primary\"\n mwlCalendarNextView\n [view]=\"view\"\n [(viewDate)]=\"viewDate\"\n (viewDateChange)=\"viewDateChange.next(viewDate)\"\n >\n Next\n </div>\n </div>\n </div>\n <div class=\"col-md-4\">\n <h3>{{ viewDate | calendarDate: view + 'ViewTitle':locale }}</h3>\n </div>\n <div class=\"col-md-4\">\n <div class=\"btn-group\">\n <div\n class=\"btn btn-primary\"\n (click)=\"viewChange.emit(CalendarView.Month)\"\n [class.active]=\"view === CalendarView.Month\"\n >\n Month\n </div>\n <div\n class=\"btn btn-primary\"\n (click)=\"viewChange.emit(CalendarView.Week)\"\n [class.active]=\"view === CalendarView.Week\"\n >\n Week\n </div>\n <div\n class=\"btn btn-primary\"\n (click)=\"viewChange.emit(CalendarView.Day)\"\n [class.active]=\"view === CalendarView.Day\"\n >\n Day\n </div>\n </div>\n </div>\n </div>\n <br />\n `,\n})\nexport class CalendarHeaderComponent {\n @Input() view: CalendarView;\n\n @Input() viewDate: Date;\n\n @Input() locale: string = 'en';\n\n @Output() viewChange = new EventEmitter<CalendarView>();\n\n @Output() viewDateChange = new EventEmitter<Date>();\n\n CalendarView = CalendarView;\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/disable-slide-animation/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 9,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 9,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent } from 'angular-calendar';\nimport { isSameDay, isSameMonth } from 'date-fns';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n})\nexport class DemoComponent {\n viewDate: Date = new Date();\n\n events: CalendarEvent[] = [\n {\n start: new Date(),\n title: 'An event',\n color: colors.red,\n },\n ];\n\n activeDayIsOpen: boolean;\n\n dayClicked({ date, events }: { date: Date; events: CalendarEvent[] }): void {\n if (isSameMonth(date, this.viewDate)) {\n if (\n (isSameDay(this.viewDate, date) && this.activeDayIsOpen === true) ||\n events.length === 0\n ) {\n this.activeDayIsOpen = false;\n } else {\n this.activeDayIsOpen = true;\n this.viewDate = date;\n }\n }\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/disable-tooltips/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 13,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 13,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport {\n CalendarEvent,\n CalendarEventTitleFormatter,\n CalendarView,\n} from 'angular-calendar';\nimport { CustomEventTitleFormatter } from './custom-event-title-formatter.provider';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n providers: [\n {\n provide: CalendarEventTitleFormatter,\n useClass: CustomEventTitleFormatter,\n },\n ],\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Month;\n\n viewDate: Date = new Date();\n\n events: CalendarEvent[] = [\n {\n title: 'An event',\n start: new Date(),\n color: colors.red,\n },\n ];\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/disable-tooltips/custom-event-title-formatter.provider.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 4,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 4,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        136,
                        136
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        136,
                        136
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        136,
                        136
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { CalendarEventTitleFormatter, CalendarEvent } from 'angular-calendar';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class CustomEventTitleFormatter extends CalendarEventTitleFormatter {\n // you can override any of the methods defined in the parent class\n\n monthTooltip(event: CalendarEvent): string {\n return;\n }\n\n weekTooltip(event: CalendarEvent): string {\n return;\n }\n\n dayTooltip(event: CalendarEvent): string {\n return;\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/drag-to-create-events/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 22,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 22,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        654,
                        654
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        654,
                        654
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        654,
                        654
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 40,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 40,
                "endColumn": 31
              },
              {
                "ruleId": "@angular-eslint/consistent-component-styles",
                "severity": 2,
                "message": "Use a `string` instead of a `string[]` for the `styles` property",
                "line": 47,
                "column": 11,
                "nodeType": "ArrayExpression",
                "messageId": "useStylesString",
                "endLine": 53,
                "endColumn": 4,
                "fix": {
                  "range": [
                    1277,
                    1356
                  ],
                  "text": "`\n .disable-hover {\n pointer-events: none;\n }\n `"
                }
              },
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 54,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 54,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        82,
                        1398
                      ],
                      "text": ",\n} from '@angular/core';\nimport { CalendarEvent, CalendarEventTitleFormatter } from 'angular-calendar';\nimport { WeekViewHourSegment } from 'calendar-utils';\nimport { fromEvent } from 'rxjs';\nimport { finalize, takeUntil } from 'rxjs/operators';\nimport { addDays, addMinutes, endOfWeek } from 'date-fns';\n\nfunction floorToNearest(amount: number, precision: number) {\n return Math.floor(amount / precision) angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json precision;\n}\n\nfunction ceilToNearest(amount: number, precision: number) {\n return Math.ceil(amount / precision) angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json precision;\n}\n\n@Injectable()\nexport class CustomEventTitleFormatter extends CalendarEventTitleFormatter {\n weekTooltip(event: CalendarEvent, title: string) {\n if (!event.meta.tmpEvent) {\n return super.weekTooltip(event, title);\n }\n }\n\n dayTooltip(event: CalendarEvent, title: string) {\n if (!event.meta.tmpEvent) {\n return super.dayTooltip(event, title);\n }\n }\n}\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n providers: [\n {\n provide: CalendarEventTitleFormatter,\n useClass: CustomEventTitleFormatter,\n },\n ],\n styles: [\n `\n .disable-hover {\n pointer-events: none;\n }\n `,\n ],\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 4,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n ChangeDetectorRef,\n Component,\n Injectable,\n ViewEncapsulation,\n} from '@angular/core';\nimport { CalendarEvent, CalendarEventTitleFormatter } from 'angular-calendar';\nimport { WeekViewHourSegment } from 'calendar-utils';\nimport { fromEvent } from 'rxjs';\nimport { finalize, takeUntil } from 'rxjs/operators';\nimport { addDays, addMinutes, endOfWeek } from 'date-fns';\n\nfunction floorToNearest(amount: number, precision: number) {\n return Math.floor(amount / precision) angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json precision;\n}\n\nfunction ceilToNearest(amount: number, precision: number) {\n return Math.ceil(amount / precision) angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json precision;\n}\n\n@Injectable()\nexport class CustomEventTitleFormatter extends CalendarEventTitleFormatter {\n weekTooltip(event: CalendarEvent, title: string) {\n if (!event.meta.tmpEvent) {\n return super.weekTooltip(event, title);\n }\n }\n\n dayTooltip(event: CalendarEvent, title: string) {\n if (!event.meta.tmpEvent) {\n return super.dayTooltip(event, title);\n }\n }\n}\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n providers: [\n {\n provide: CalendarEventTitleFormatter,\n useClass: CustomEventTitleFormatter,\n },\n ],\n styles: [\n `\n .disable-hover {\n pointer-events: none;\n }\n `,\n ],\n encapsulation: ViewEncapsulation.None,\n})\nexport class DemoComponent {\n viewDate = new Date();\n\n events: CalendarEvent[] = [];\n\n dragToCreateActive = false;\n\n weekStartsOn: 0 = 0;\n\n constructor(private cdr: ChangeDetectorRef) {}\n\n startDragToCreate(\n segment: WeekViewHourSegment,\n mouseDownEvent: MouseEvent,\n segmentElement: HTMLElement\n ) {\n const dragToSelectEvent: CalendarEvent = {\n id: this.events.length,\n title: 'New event',\n start: segment.date,\n meta: {\n tmpEvent: true,\n },\n };\n this.events = [...this.events, dragToSelectEvent];\n const segmentPosition = segmentElement.getBoundingClientRect();\n this.dragToCreateActive = true;\n const endOfView = endOfWeek(this.viewDate, {\n weekStartsOn: this.weekStartsOn,\n });\n\n fromEvent(document, 'mousemove')\n .pipe(\n finalize(() => {\n delete dragToSelectEvent.meta.tmpEvent;\n this.dragToCreateActive = false;\n this.refresh();\n }),\n takeUntil(fromEvent(document, 'mouseup'))\n )\n .subscribe((mouseMoveEvent: MouseEvent) => {\n const minutesDiff = ceilToNearest(\n mouseMoveEvent.clientY - segmentPosition.top,\n 30\n );\n\n const daysDiff =\n floorToNearest(\n mouseMoveEvent.clientX - segmentPosition.left,\n segmentPosition.width\n ) / segmentPosition.width;\n\n const newEnd = addDays(addMinutes(segment.date, minutesDiff), daysDiff);\n if (newEnd > segment.date && newEnd < endOfView) {\n dragToSelectEvent.end = newEnd;\n }\n this.refresh();\n });\n }\n\n private refresh() {\n this.events = [...this.events];\n this.cdr.detectChanges();\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/draggable-events/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 13,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 13,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport {\n CalendarEvent,\n CalendarEventTimesChangedEvent,\n CalendarView,\n} from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Month;\n\n viewDate = new Date();\n\n events: CalendarEvent[] = [\n {\n title: 'Draggable event',\n color: colors.yellow,\n start: new Date(),\n draggable: true,\n },\n {\n title: 'A non draggable event',\n color: colors.blue,\n start: new Date(),\n },\n ];\n\n refresh = new Subject<void>();\n\n eventTimesChanged({\n event,\n newStart,\n newEnd,\n }: CalendarEventTimesChangedEvent): void {\n event.start = newStart;\n event.end = newEnd;\n this.refresh.next();\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/draggable-external-events/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 13,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 13,
                "endColumn": 31
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`styles` has too many lines (8). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 14,
                "column": 11,
                "nodeType": "ArrayExpression",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 25,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/consistent-component-styles",
                "severity": 2,
                "message": "Use a `string` instead of a `string[]` for the `styles` property",
                "line": 14,
                "column": 11,
                "nodeType": "ArrayExpression",
                "messageId": "useStylesString",
                "endLine": 25,
                "endColumn": 4,
                "fix": {
                  "range": [
                    391,
                    575
                  ],
                  "text": "`\n .drag-active {\n position: relative;\n z-index: 1;\n pointer-events: none;\n }\n .drag-over {\n background-color: #eee;\n }\n `"
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport {\n CalendarEvent,\n CalendarEventTimesChangedEvent,\n CalendarView,\n} from 'angular-calendar';\nimport { Subject } from 'rxjs';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n styles: [\n `\n .drag-active {\n position: relative;\n z-index: 1;\n pointer-events: none;\n }\n .drag-over {\n background-color: #eee;\n }\n `,\n ],\n})\nexport class DemoComponent {\n CalendarView = CalendarView;\n\n view = CalendarView.Month;\n\n viewDate = new Date();\n\n externalEvents: CalendarEvent[] = [\n {\n title: 'Event 1',\n color: colors.yellow,\n start: new Date(),\n draggable: true,\n },\n {\n title: 'Event 2',\n color: colors.blue,\n start: new Date(),\n draggable: true,\n },\n ];\n\n events: CalendarEvent[] = [];\n\n activeDayIsOpen = false;\n\n refresh = new Subject<void>();\n\n eventDropped({\n event,\n newStart,\n newEnd,\n allDay,\n }: CalendarEventTimesChangedEvent): void {\n const externalIndex = this.externalEvents.indexOf(event);\n if (typeof allDay !== 'undefined') {\n event.allDay = allDay;\n }\n if (externalIndex > -1) {\n this.externalEvents.splice(externalIndex, 1);\n this.events.push(event);\n }\n event.start = newStart;\n if (newEnd) {\n event.end = newEnd;\n }\n if (this.view === 'month') {\n this.viewDate = newStart;\n this.activeDayIsOpen = true;\n }\n this.events = [...this.events];\n }\n\n externalDrop(event: CalendarEvent) {\n if (this.externalEvents.indexOf(event) === -1) {\n this.events = this.events.filter((iEvent) => iEvent !== event);\n this.externalEvents.push(event);\n }\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/editable-deletable-events/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 8,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 8,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Month;\n\n viewDate: Date = new Date();\n\n events: CalendarEvent[] = [\n {\n title: 'Editable event',\n color: colors.yellow,\n start: new Date(),\n actions: [\n {\n label: '<i class=\"fas fa-fw fa-pencil-alt\"></i>',\n onClick: ({ event }: { event: CalendarEvent }): void => {\n console.log('Edit event', event);\n },\n },\n ],\n },\n {\n title: 'Deletable event',\n color: colors.blue,\n start: new Date(),\n actions: [\n {\n label: '<i class=\"fas fa-fw fa-trash-alt\"></i>',\n onClick: ({ event }: { event: CalendarEvent }): void => {\n this.events = this.events.filter((iEvent) => iEvent !== event);\n console.log('Event deleted', event);\n },\n },\n ],\n },\n {\n title: 'Non editable and deletable event',\n color: colors.red,\n start: new Date(),\n },\n ];\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/exclude-days/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 12,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 12,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        47,
                        358
                      ],
                      "text": ",\n} from '@angular/core';\nimport { CalendarEvent, CalendarView, DAYS_OF_WEEK } from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 13,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 13,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n ChangeDetectionStrategy,\n ViewEncapsulation,\n} from '@angular/core';\nimport { CalendarEvent, CalendarView, DAYS_OF_WEEK } from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n templateUrl: 'template.html',\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Month;\n\n viewDate: Date = new Date('2016-01-05');\n\n events: CalendarEvent[] = [\n {\n start: new Date('2016-01-08'),\n end: new Date('2016-01-10'),\n title: 'One day excluded event',\n color: colors.red,\n allDay: true,\n },\n {\n start: new Date('2016-01-01'),\n end: new Date('2016-01-09'),\n title: 'Multiple weeks event',\n allDay: true,\n },\n ];\n\n // exclude weekends\n excludeDays: number[] = [0, 6];\n\n weekStartsOn = DAYS_OF_WEEK.SUNDAY;\n\n CalendarView = CalendarView;\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/extra-month-view-weeks/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 6,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 6,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        293,
                        293
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        293,
                        293
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        293,
                        293
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 18,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 18,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy, Injectable } from '@angular/core';\nimport { CalendarEvent, CalendarUtils } from 'angular-calendar';\nimport { subWeeks, startOfMonth, endOfMonth, addWeeks } from 'date-fns';\nimport { GetMonthViewArgs, MonthView } from 'calendar-utils';\n\n@Injectable()\nexport class MyCalendarUtils extends CalendarUtils {\n getMonthView(args: GetMonthViewArgs): MonthView {\n args.viewStart = subWeeks(startOfMonth(args.viewDate), 1);\n args.viewEnd = addWeeks(endOfMonth(args.viewDate), 1);\n return super.getMonthView(args);\n }\n}\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n providers: [\n {\n provide: CalendarUtils,\n useClass: MyCalendarUtils,\n },\n ],\n})\nexport class DemoComponent {\n viewDate: Date = new Date();\n\n events: CalendarEvent[] = [];\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/group-similar-events/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`styles` has too many lines (7). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 18,
                "column": 11,
                "nodeType": "ArrayExpression",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 28,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/consistent-component-styles",
                "severity": 2,
                "message": "Use a `string` instead of a `string[]` for the `styles` property",
                "line": 18,
                "column": 11,
                "nodeType": "ArrayExpression",
                "messageId": "useStylesString",
                "endLine": 28,
                "endColumn": 4,
                "fix": {
                  "range": [
                    458,
                    604
                  ],
                  "text": "`\n .cell-totals {\n margin: 5px;\n text-align: center;\n }\n .badge {\n margin-right: 5px;\n }\n `"
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport {\n CalendarEvent,\n CalendarMonthViewDay,\n CalendarView,\n} from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\nimport { isSameMinute, startOfDay } from 'date-fns';\n\ninterface EventGroupMeta {\n type: string;\n}\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './template.html',\n styles: [\n `\n .cell-totals {\n margin: 5px;\n text-align: center;\n }\n .badge {\n margin-right: 5px;\n }\n `,\n ],\n})\nexport class DemoComponent implements OnInit {\n view: CalendarView = CalendarView.Month;\n\n viewDate: Date = new Date();\n\n events: CalendarEvent[] = [\n {\n title: 'Event 1',\n color: colors.yellow,\n start: startOfDay(new Date()),\n meta: {\n type: 'warning',\n },\n },\n {\n title: 'Event 2',\n color: colors.yellow,\n start: startOfDay(new Date()),\n meta: {\n type: 'warning',\n },\n },\n {\n title: 'Event 3',\n color: colors.blue,\n start: startOfDay(new Date()),\n meta: {\n type: 'info',\n },\n },\n {\n title: 'Event 4',\n color: colors.red,\n start: startOfDay(new Date()),\n meta: {\n type: 'danger',\n },\n },\n {\n title: 'Event 5',\n color: colors.red,\n start: startOfDay(new Date()),\n meta: {\n type: 'danger',\n },\n },\n ];\n\n groupedSimilarEvents: CalendarEvent[] = [];\n\n ngOnInit() {\n // group any events together that have the same type and dates\n // use for when you have a lot of events on the week or day view at the same time\n this.groupedSimilarEvents = [];\n const processedEvents = new Set();\n this.events.forEach((event) => {\n if (processedEvents.has(event)) {\n return;\n }\n const similarEvents = this.events.filter((otherEvent) => {\n return (\n otherEvent !== event &&\n !processedEvents.has(otherEvent) &&\n isSameMinute(otherEvent.start, event.start) &&\n (isSameMinute(otherEvent.end, event.end) ||\n (!otherEvent.end && !event.end)) &&\n otherEvent.color.primary === event.color.primary &&\n otherEvent.color.secondary === event.color.secondary\n );\n });\n processedEvents.add(event);\n similarEvents.forEach((otherEvent) => {\n processedEvents.add(otherEvent);\n });\n if (similarEvents.length > 0) {\n this.groupedSimilarEvents.push({\n title: `${similarEvents.length + 1} events`,\n color: event.color,\n start: event.start,\n end: event.end,\n meta: {\n groupedEvents: [event, ...similarEvents],\n },\n });\n } else {\n this.groupedSimilarEvents.push(event);\n }\n });\n }\n\n beforeMonthViewRender({\n body,\n }: {\n body: CalendarMonthViewDay<EventGroupMeta>[];\n }): void {\n // month view has a different UX from the week and day view so we only really need to group by the type\n body.forEach((cell) => {\n const groups = {};\n cell.events.forEach((event: CalendarEvent<EventGroupMeta>) => {\n groups[event.meta.type] = groups[event.meta.type] || [];\n groups[event.meta.type].push(event);\n });\n cell['eventGroups'] = Object.entries(groups);\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/i18n/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 13,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 13,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport {\n CalendarDateFormatter,\n CalendarEvent,\n CalendarView,\n DAYS_OF_WEEK,\n} from 'angular-calendar';\nimport { CustomDateFormatter } from './custom-date-formatter.provider';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n providers: [\n {\n provide: CalendarDateFormatter,\n useClass: CustomDateFormatter,\n },\n ],\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Month;\n\n viewDate = new Date();\n\n events: CalendarEvent[] = [];\n\n locale: string = 'fr';\n\n weekStartsOn: number = DAYS_OF_WEEK.MONDAY;\n\n weekendDays: number[] = [DAYS_OF_WEEK.FRIDAY, DAYS_OF_WEEK.SATURDAY];\n\n CalendarView = CalendarView;\n\n setView(view: CalendarView) {\n this.view = view;\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/i18n/custom-date-formatter.provider.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 5,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 5,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        182,
                        182
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        182,
                        182
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        182,
                        182
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { CalendarDateFormatter, DateFormatterParams } from 'angular-calendar';\nimport { formatDate } from '@angular/common';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class CustomDateFormatter extends CalendarDateFormatter {\n // you can override any of the methods defined in the parent class\n\n public dayViewHour({ date, locale }: DateFormatterParams): string {\n return formatDate(date, 'HH:mm', locale);\n }\n\n public weekViewHour({ date, locale }: DateFormatterParams): string {\n return this.dayViewHour({ date, locale });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/kitchen-sink/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`styles` has too many lines (8). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 45,
                "column": 11,
                "nodeType": "ArrayExpression",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 56,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/consistent-component-styles",
                "severity": 2,
                "message": "Use a `string` instead of a `string[]` for the `styles` property",
                "line": 45,
                "column": 11,
                "nodeType": "ArrayExpression",
                "messageId": "useStylesString",
                "endLine": 56,
                "endColumn": 4,
                "fix": {
                  "range": [
                    843,
                    985
                  ],
                  "text": "`\n h3 {\n margin: 0 0 10px;\n }\n\n pre {\n background-color: #f5f5f5;\n padding: 15px;\n }\n `"
                }
              },
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 57,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 57,
                "endColumn": 31
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use the `viewChild` function instead of the `ViewChild` decorator",
                "line": 60,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferQuerySignals",
                "endLine": 60,
                "endColumn": 47
              }
            ],
            "suppressedMessages": [],
            "errorCount": 4,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n ChangeDetectionStrategy,\n ViewChild,\n TemplateRef,\n} from '@angular/core';\nimport {\n startOfDay,\n endOfDay,\n subDays,\n addDays,\n endOfMonth,\n isSameDay,\n isSameMonth,\n addHours,\n} from 'date-fns';\nimport { Subject } from 'rxjs';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport {\n CalendarEvent,\n CalendarEventAction,\n CalendarEventTimesChangedEvent,\n CalendarView,\n} from 'angular-calendar';\nimport { EventColor } from 'calendar-utils';\n\nconst colors: Record<string, EventColor> = {\n red: {\n primary: '#ad2121',\n secondary: '#FAE3E3',\n },\n blue: {\n primary: '#1e90ff',\n secondary: '#D1E8FF',\n },\n yellow: {\n primary: '#e3bc08',\n secondary: '#FDF1BA',\n },\n};\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n styles: [\n `\n h3 {\n margin: 0 0 10px;\n }\n\n pre {\n background-color: #f5f5f5;\n padding: 15px;\n }\n `,\n ],\n templateUrl: 'template.html',\n})\nexport class DemoComponent {\n @ViewChild('modalContent', { static: true }) modalContent: TemplateRef<any>;\n\n view: CalendarView = CalendarView.Month;\n\n CalendarView = CalendarView;\n\n viewDate: Date = new Date();\n\n modalData: {\n action: string;\n event: CalendarEvent;\n };\n\n actions: CalendarEventAction[] = [\n {\n label: '<i class=\"fas fa-fw fa-pencil-alt\"></i>',\n a11yLabel: 'Edit',\n onClick: ({ event }: { event: CalendarEvent }): void => {\n this.handleEvent('Edited', event);\n },\n },\n {\n label: '<i class=\"fas fa-fw fa-trash-alt\"></i>',\n a11yLabel: 'Delete',\n onClick: ({ event }: { event: CalendarEvent }): void => {\n this.events = this.events.filter((iEvent) => iEvent !== event);\n this.handleEvent('Deleted', event);\n },\n },\n ];\n\n refresh = new Subject<void>();\n\n events: CalendarEvent[] = [\n {\n start: subDays(startOfDay(new Date()), 1),\n end: addDays(new Date(), 1),\n title: 'A 3 day event',\n color: { ...colors.red },\n actions: this.actions,\n allDay: true,\n resizable: {\n beforeStart: true,\n afterEnd: true,\n },\n draggable: true,\n },\n {\n start: startOfDay(new Date()),\n title: 'An event with no end date',\n color: { ...colors.yellow },\n actions: this.actions,\n },\n {\n start: subDays(endOfMonth(new Date()), 3),\n end: addDays(endOfMonth(new Date()), 3),\n title: 'A long event that spans 2 months',\n color: { ...colors.blue },\n allDay: true,\n },\n {\n start: addHours(startOfDay(new Date()), 2),\n end: addHours(new Date(), 2),\n title: 'A draggable and resizable event',\n color: { ...colors.yellow },\n actions: this.actions,\n resizable: {\n beforeStart: true,\n afterEnd: true,\n },\n draggable: true,\n },\n ];\n\n activeDayIsOpen: boolean = true;\n\n constructor(private modal: NgbModal) {}\n\n dayClicked({ date, events }: { date: Date; events: CalendarEvent[] }): void {\n if (isSameMonth(date, this.viewDate)) {\n if (\n (isSameDay(this.viewDate, date) && this.activeDayIsOpen === true) ||\n events.length === 0\n ) {\n this.activeDayIsOpen = false;\n } else {\n this.activeDayIsOpen = true;\n }\n this.viewDate = date;\n }\n }\n\n eventTimesChanged({\n event,\n newStart,\n newEnd,\n }: CalendarEventTimesChangedEvent): void {\n this.events = this.events.map((iEvent) => {\n if (iEvent === event) {\n return {\n ...event,\n start: newStart,\n end: newEnd,\n };\n }\n return iEvent;\n });\n this.handleEvent('Dropped or resized', event);\n }\n\n handleEvent(action: string, event: CalendarEvent): void {\n this.modalData = { event, action };\n this.modal.open(this.modalContent, { size: 'lg' });\n }\n\n addEvent(): void {\n this.events = [\n ...this.events,\n {\n title: 'New event',\n start: startOfDay(new Date()),\n end: endOfDay(new Date()),\n color: colors.red,\n draggable: true,\n resizable: {\n beforeStart: true,\n afterEnd: true,\n },\n },\n ];\n }\n\n deleteEvent(eventToDelete: CalendarEvent) {\n this.events = this.events.filter((event) => event !== eventToDelete);\n }\n\n setView(view: CalendarView) {\n this.view = view;\n }\n\n closeOpenMonthViewDay() {\n this.activeDayIsOpen = false;\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/min-max-date/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 63,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 63,
                "endColumn": 31
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`styles` has too many lines (8). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 64,
                "column": 11,
                "nodeType": "ArrayExpression",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 75,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/consistent-component-styles",
                "severity": 2,
                "message": "Use a `string` instead of a `string[]` for the `styles` property",
                "line": 64,
                "column": 11,
                "nodeType": "ArrayExpression",
                "messageId": "useStylesString",
                "endLine": 75,
                "endColumn": 4,
                "fix": {
                  "range": [
                    1251,
                    1430
                  ],
                  "text": "`\n .cal-disabled {\n background-color: #eee;\n pointer-events: none;\n }\n\n .cal-disabled .cal-day-number {\n opacity: 0.1;\n }\n `"
                }
              },
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 77,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 77,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        47,
                        1584
                      ],
                      "text": ",\n} from '@angular/core';\nimport {\n CalendarEvent,\n CalendarMonthViewDay,\n CalendarView,\n} from 'angular-calendar';\nimport {\n subMonths,\n addMonths,\n addDays,\n addWeeks,\n subDays,\n subWeeks,\n startOfMonth,\n endOfMonth,\n startOfWeek,\n endOfWeek,\n startOfDay,\n endOfDay,\n} from 'date-fns';\n\ntype CalendarPeriod = 'day' | 'week' | 'month';\n\nfunction addPeriod(period: CalendarPeriod, date: Date, amount: number): Date {\n return {\n day: addDays,\n week: addWeeks,\n month: addMonths,\n }[period](date, amount);\n}\n\nfunction subPeriod(period: CalendarPeriod, date: Date, amount: number): Date {\n return {\n day: subDays,\n week: subWeeks,\n month: subMonths,\n }[period](date, amount);\n}\n\nfunction startOfPeriod(period: CalendarPeriod, date: Date): Date {\n return {\n day: startOfDay,\n week: startOfWeek,\n month: startOfMonth,\n }[period](date);\n}\n\nfunction endOfPeriod(period: CalendarPeriod, date: Date): Date {\n return {\n day: endOfDay,\n week: endOfWeek,\n month: endOfMonth,\n }[period](date);\n}\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n styles: [\n `\n .cal-disabled {\n background-color: #eee;\n pointer-events: none;\n }\n\n .cal-disabled .cal-day-number {\n opacity: 0.1;\n }\n `,\n ],\n // this is a hack to get styles to apply to the inner component. Your app should just use a global stylesheet\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 4,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n ChangeDetectionStrategy,\n ViewEncapsulation,\n} from '@angular/core';\nimport {\n CalendarEvent,\n CalendarMonthViewDay,\n CalendarView,\n} from 'angular-calendar';\nimport {\n subMonths,\n addMonths,\n addDays,\n addWeeks,\n subDays,\n subWeeks,\n startOfMonth,\n endOfMonth,\n startOfWeek,\n endOfWeek,\n startOfDay,\n endOfDay,\n} from 'date-fns';\n\ntype CalendarPeriod = 'day' | 'week' | 'month';\n\nfunction addPeriod(period: CalendarPeriod, date: Date, amount: number): Date {\n return {\n day: addDays,\n week: addWeeks,\n month: addMonths,\n }[period](date, amount);\n}\n\nfunction subPeriod(period: CalendarPeriod, date: Date, amount: number): Date {\n return {\n day: subDays,\n week: subWeeks,\n month: subMonths,\n }[period](date, amount);\n}\n\nfunction startOfPeriod(period: CalendarPeriod, date: Date): Date {\n return {\n day: startOfDay,\n week: startOfWeek,\n month: startOfMonth,\n }[period](date);\n}\n\nfunction endOfPeriod(period: CalendarPeriod, date: Date): Date {\n return {\n day: endOfDay,\n week: endOfWeek,\n month: endOfMonth,\n }[period](date);\n}\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n styles: [\n `\n .cal-disabled {\n background-color: #eee;\n pointer-events: none;\n }\n\n .cal-disabled .cal-day-number {\n opacity: 0.1;\n }\n `,\n ],\n // this is a hack to get styles to apply to the inner component. Your app should just use a global stylesheet\n encapsulation: ViewEncapsulation.None,\n})\nexport class DemoComponent {\n view: CalendarView | CalendarPeriod = CalendarView.Month;\n\n viewDate: Date = new Date();\n\n events: CalendarEvent[] = [];\n\n minDate: Date = subMonths(new Date(), 1);\n\n maxDate: Date = addMonths(new Date(), 1);\n\n prevBtnDisabled: boolean = false;\n\n nextBtnDisabled: boolean = false;\n\n constructor() {\n this.dateOrViewChanged();\n }\n\n increment(): void {\n this.changeDate(addPeriod(this.view, this.viewDate, 1));\n }\n\n decrement(): void {\n this.changeDate(subPeriod(this.view, this.viewDate, 1));\n }\n\n today(): void {\n this.changeDate(new Date());\n }\n\n dateIsValid(date: Date): boolean {\n return date >= this.minDate && date <= this.maxDate;\n }\n\n changeDate(date: Date): void {\n this.viewDate = date;\n this.dateOrViewChanged();\n }\n\n changeView(view: CalendarPeriod): void {\n this.view = view;\n this.dateOrViewChanged();\n }\n\n dateOrViewChanged(): void {\n this.prevBtnDisabled = !this.dateIsValid(\n endOfPeriod(this.view, subPeriod(this.view, this.viewDate, 1))\n );\n this.nextBtnDisabled = !this.dateIsValid(\n startOfPeriod(this.view, addPeriod(this.view, this.viewDate, 1))\n );\n if (this.viewDate < this.minDate) {\n this.changeDate(this.minDate);\n } else if (this.viewDate > this.maxDate) {\n this.changeDate(this.maxDate);\n }\n }\n\n beforeMonthViewRender({ body }: { body: CalendarMonthViewDay[] }): void {\n body.forEach((day) => {\n if (!this.dateIsValid(day.date)) {\n day.cssClass = 'cal-disabled';\n }\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/moment/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 16,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 16,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent, CalendarView, DAYS_OF_WEEK } from 'angular-calendar';\nimport moment from 'moment';\n\n// weekStartsOn option is ignored when using moment, as it needs to be configured globally for the moment locale\nmoment.updateLocale('en', {\n week: {\n dow: DAYS_OF_WEEK.MONDAY,\n doy: 0,\n },\n});\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Month;\n\n viewDate: Date = new Date();\n\n events: CalendarEvent[] = [];\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/month-view-badge-total/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 8,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 8,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent, CalendarMonthViewDay } from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n})\nexport class DemoComponent {\n viewDate: Date = new Date();\n\n events: CalendarEvent<{ incrementsBadgeTotal: boolean }>[] = [\n {\n title: 'Increments badge total on the day cell',\n color: colors.yellow,\n start: new Date(),\n meta: {\n incrementsBadgeTotal: true,\n },\n },\n {\n title: 'Does not increment the badge total on the day cell',\n color: colors.blue,\n start: new Date(),\n meta: {\n incrementsBadgeTotal: false,\n },\n },\n ];\n\n beforeMonthViewRender({ body }: { body: CalendarMonthViewDay[] }): void {\n body.forEach((day) => {\n day.badgeTotal = day.events.filter(\n (event) => event.meta.incrementsBadgeTotal\n ).length;\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/navigating-between-views/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 7,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 7,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Month;\n\n viewDate: Date = new Date();\n\n events: CalendarEvent[] = [];\n\n changeDay(date: Date) {\n this.viewDate = date;\n this.view = CalendarView.Day;\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/no-events-label/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 19,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 19,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n ChangeDetectionStrategy,\n ChangeDetectorRef,\n} from '@angular/core';\nimport {\n CalendarEvent,\n CalendarViewPeriod,\n CalendarMonthViewBeforeRenderEvent,\n CalendarWeekViewBeforeRenderEvent,\n CalendarDayViewBeforeRenderEvent,\n CalendarView,\n} from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Month;\n\n viewDate: Date = new Date();\n\n events: CalendarEvent[] = [\n {\n title: 'Event 1',\n color: colors.yellow,\n start: new Date(),\n },\n ];\n\n period: CalendarViewPeriod;\n\n constructor(private cdr: ChangeDetectorRef) {}\n\n beforeViewRender(\n event:\n | CalendarMonthViewBeforeRenderEvent\n | CalendarWeekViewBeforeRenderEvent\n | CalendarDayViewBeforeRenderEvent\n ) {\n this.period = event.period;\n this.cdr.detectChanges();\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/optional-event-end-dates/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 9,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 9,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\nimport { setHours, setMinutes } from 'date-fns';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Day;\n\n viewDate: Date = new Date();\n\n events: CalendarEvent[] = [\n {\n title: 'No event end date',\n start: setHours(setMinutes(new Date(), 0), 3),\n color: colors.blue,\n },\n {\n title: 'No event end date',\n start: setHours(setMinutes(new Date(), 0), 5),\n color: colors.yellow,\n },\n ];\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/public-holidays/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 29,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 29,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n ChangeDetectionStrategy,\n OnInit,\n ChangeDetectorRef,\n} from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\nimport { HttpClient } from '@angular/common/http';\nimport { startOfYear, subYears } from 'date-fns';\n\n// get your own key from https://holidayapi.com/\nconst HOLIDAY_API_KEY = '8eb2582d-3a4c-4fc5-94c8-3e21487d4e23';\n\n// change this to your own country\nconst COUNTRY_CODE = 'US';\n\ninterface Holiday {\n date: string;\n name: string;\n}\n\ntype CalendarEventWithMeta = CalendarEvent<\n { type: 'holiday'; holiday: Holiday } | { type: 'normal' }\n>;\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n})\nexport class DemoComponent implements OnInit {\n view: CalendarView = CalendarView.Month;\n\n viewDate = startOfYear(subYears(new Date(), 1));\n\n events: CalendarEventWithMeta[] = [];\n\n constructor(private http: HttpClient, private cdr: ChangeDetectorRef) {}\n\n ngOnInit(): void {\n this.fetchHolidays();\n }\n\n private fetchHolidays() {\n this.http\n .get<{ holidays: Holiday[] }>('https://holidayapi.com/v1/holidays', {\n params: {\n country: COUNTRY_CODE,\n year: String(new Date().getFullYear() - 1),\n key: HOLIDAY_API_KEY,\n },\n })\n .subscribe(({ holidays }) => {\n this.events = holidays.map((holiday) => {\n return {\n start: new Date(holiday.date),\n title: holiday.name,\n allDay: true,\n meta: {\n type: 'holiday',\n holiday,\n },\n };\n });\n this.cdr.markForCheck();\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/recurring-events/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 38,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 38,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n ChangeDetectionStrategy,\n ChangeDetectorRef,\n} from '@angular/core';\n// As an alternative to rrule there is also rSchedule\n// See https://github.com/mattlewis92/angular-calendar/issues/711#issuecomment-418537158 for more info\nimport { RRule } from 'rrule';\nimport moment from 'moment-timezone';\nimport {\n CalendarDayViewBeforeRenderEvent,\n CalendarEvent,\n CalendarMonthViewBeforeRenderEvent,\n CalendarView,\n CalendarWeekViewBeforeRenderEvent,\n} from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\nimport { ViewPeriod } from 'calendar-utils';\n\ninterface RecurringEvent {\n title: string;\n color: any;\n rrule?: {\n freq: any;\n bymonth?: number;\n bymonthday?: number;\n byweekday?: any;\n };\n}\n\n// we set the timezone to UTC to avoid issues with DST changes\n// see https://github.com/mattlewis92/angular-calendar/issues/717 for more info\nmoment.tz.setDefault('Utc');\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Month;\n\n viewDate = moment().toDate();\n\n recurringEvents: RecurringEvent[] = [\n {\n title: 'Recurs on the 5th of each month',\n color: colors.yellow,\n rrule: {\n freq: RRule.MONTHLY,\n bymonthday: 5,\n },\n },\n {\n title: 'Recurs yearly on the 10th of the current month',\n color: colors.blue,\n rrule: {\n freq: RRule.YEARLY,\n bymonth: moment().month() + 1,\n bymonthday: 10,\n },\n },\n {\n title: 'Recurs weekly on mondays',\n color: colors.red,\n rrule: {\n freq: RRule.WEEKLY,\n byweekday: [RRule.MO],\n },\n },\n ];\n\n calendarEvents: CalendarEvent[] = [];\n\n viewPeriod: ViewPeriod;\n\n constructor(private cdr: ChangeDetectorRef) {}\n\n updateCalendarEvents(\n viewRender:\n | CalendarMonthViewBeforeRenderEvent\n | CalendarWeekViewBeforeRenderEvent\n | CalendarDayViewBeforeRenderEvent\n ): void {\n if (\n !this.viewPeriod ||\n !moment(this.viewPeriod.start).isSame(viewRender.period.start) ||\n !moment(this.viewPeriod.end).isSame(viewRender.period.end)\n ) {\n this.viewPeriod = viewRender.period;\n this.calendarEvents = [];\n\n this.recurringEvents.forEach((event) => {\n const rule: RRule = new RRule({\n ...event.rrule,\n dtstart: moment(viewRender.period.start).startOf('day').toDate(),\n until: moment(viewRender.period.end).endOf('day').toDate(),\n });\n const { title, color } = event;\n\n rule.all().forEach((date) => {\n this.calendarEvents.push({\n title,\n color,\n start: moment(date).toDate(),\n });\n });\n });\n this.cdr.detectChanges();\n }\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/refreshing-the-view/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 19,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 19,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        47,
                        444
                      ],
                      "text": ",\n} from '@angular/core';\nimport {\n CalendarEvent,\n CalendarMonthViewDay,\n CalendarView,\n} from 'angular-calendar';\nimport { Subject } from 'rxjs';\n\nconst RED_CELL: 'red-cell' = 'red-cell';\nconst BLUE_CELL: 'blue-cell' = 'blue-cell';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 20,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 20,
                "endColumn": 31
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`styles` has too many lines (6). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 21,
                "column": 11,
                "nodeType": "ArrayExpression",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 30,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/consistent-component-styles",
                "severity": 2,
                "message": "Use a `string` instead of a `string[]` for the `styles` property",
                "line": 21,
                "column": 11,
                "nodeType": "ArrayExpression",
                "messageId": "useStylesString",
                "endLine": 30,
                "endColumn": 4,
                "fix": {
                  "range": [
                    487,
                    643
                  ],
                  "text": "`\n .red-cell {\n background-color: red !important;\n }\n .blue-cell {\n background-color: blue !important;\n }\n `"
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 4,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n ChangeDetectionStrategy,\n ViewEncapsulation,\n} from '@angular/core';\nimport {\n CalendarEvent,\n CalendarMonthViewDay,\n CalendarView,\n} from 'angular-calendar';\nimport { Subject } from 'rxjs';\n\nconst RED_CELL: 'red-cell' = 'red-cell';\nconst BLUE_CELL: 'blue-cell' = 'blue-cell';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n templateUrl: 'template.html',\n styles: [\n `\n .red-cell {\n background-color: red !important;\n }\n .blue-cell {\n background-color: blue !important;\n }\n `,\n ],\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Month;\n\n viewDate = new Date();\n\n events: CalendarEvent[] = [];\n\n refresh = new Subject<void>();\n\n cssClass: string = RED_CELL;\n\n refreshView(): void {\n this.cssClass = this.cssClass === RED_CELL ? BLUE_CELL : RED_CELL;\n this.refresh.next();\n }\n\n beforeMonthViewRender({ body }: { body: CalendarMonthViewDay[] }): void {\n body.forEach((day) => {\n if (day.date.getDate() % 2 === 1) {\n day.cssClass = this.cssClass;\n }\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/resizable-events/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 14,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 14,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { addDays } from 'date-fns';\nimport {\n CalendarEvent,\n CalendarEventTimesChangedEvent,\n CalendarView,\n} from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Week;\n\n viewDate = new Date();\n\n events: CalendarEvent[] = [\n {\n title: 'Resizable event',\n color: colors.yellow,\n start: new Date(),\n end: addDays(new Date(), 1), // an end date is always required for resizable events to work\n resizable: {\n beforeStart: true, // this allows you to configure the sides the event is resizable from\n afterEnd: true,\n },\n },\n {\n title: 'A non resizable event',\n color: colors.blue,\n start: new Date(),\n end: addDays(new Date(), 1),\n },\n ];\n\n refresh = new Subject<void>();\n\n eventTimesChanged({\n event,\n newStart,\n newEnd,\n }: CalendarEventTimesChangedEvent): void {\n event.start = newStart;\n event.end = newEnd;\n this.refresh.next();\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/rtl/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 14,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 14,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport {\n CalendarEvent,\n CalendarEventTimesChangedEvent,\n CalendarView,\n} from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\nimport { addDays, addHours, endOfMonth, startOfDay, subDays } from 'date-fns';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Month;\n\n viewDate = new Date();\n\n events: CalendarEvent[] = [\n {\n start: subDays(startOfDay(new Date()), 1),\n end: addDays(new Date(), 1),\n title: 'A 3 day event',\n color: colors.red,\n allDay: true,\n resizable: {\n beforeStart: true,\n afterEnd: true,\n },\n draggable: true,\n },\n {\n start: startOfDay(new Date()),\n title: 'An event with no end date',\n color: colors.yellow,\n },\n {\n start: subDays(endOfMonth(new Date()), 3),\n end: addDays(endOfMonth(new Date()), 3),\n title: 'A long event that spans 2 months',\n color: colors.blue,\n allDay: true,\n },\n {\n start: addHours(startOfDay(new Date()), 2),\n end: addHours(new Date(), 2),\n title: 'A draggable and resizable event',\n color: colors.yellow,\n resizable: {\n beforeStart: true,\n afterEnd: true,\n },\n draggable: true,\n },\n ];\n\n refresh = new Subject<void>();\n\n eventTimesChanged({\n event,\n newStart,\n newEnd,\n }: CalendarEventTimesChangedEvent): void {\n event.start = newStart;\n event.end = newEnd;\n this.refresh.next();\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/scroll-to-current-time/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`styles` has too many lines (4). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 16,
                "column": 11,
                "nodeType": "ArrayExpression",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 23,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/consistent-component-styles",
                "severity": 2,
                "message": "Use a `string` instead of a `string[]` for the `styles` property",
                "line": 16,
                "column": 11,
                "nodeType": "ArrayExpression",
                "messageId": "useStylesString",
                "endLine": 23,
                "endColumn": 4,
                "fix": {
                  "range": [
                    418,
                    533
                  ],
                  "text": "`\n .scroll-container {\n height: calc(100vh - 320px);\n overflow-y: auto;\n }\n `"
                }
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use the `viewChild` function instead of the `ViewChild` decorator",
                "line": 26,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferQuerySignals",
                "endLine": 26,
                "endColumn": 32
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import {\n AfterViewInit,\n ChangeDetectionStrategy,\n ChangeDetectorRef,\n Component,\n ElementRef,\n ViewChild,\n} from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\nimport { differenceInMinutes, startOfDay, startOfHour } from 'date-fns';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './template.html',\n styles: [\n `\n .scroll-container {\n height: calc(100vh - 320px);\n overflow-y: auto;\n }\n `,\n ],\n})\nexport class DemoComponent implements AfterViewInit {\n @ViewChild('scrollContainer') scrollContainer: ElementRef<HTMLElement>;\n\n view: CalendarView = CalendarView.Week;\n\n viewDate = new Date();\n\n events: CalendarEvent[] = [];\n\n constructor(private cdr: ChangeDetectorRef) {}\n\n ngAfterViewInit() {\n this.scrollToCurrentView();\n }\n\n viewChanged() {\n this.cdr.detectChanges();\n this.scrollToCurrentView();\n }\n\n private scrollToCurrentView() {\n if (this.view === CalendarView.Week || CalendarView.Day) {\n // each hour is 60px high, so to get the pixels to scroll it's just the amount of minutes since midnight\n const minutesSinceStartOfDay = differenceInMinutes(\n startOfHour(new Date()),\n startOfDay(new Date())\n );\n const headerHeight = this.view === CalendarView.Week ? 60 : 0;\n this.scrollContainer.nativeElement.scrollTop =\n minutesSinceStartOfDay + headerHeight;\n }\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/selectable-period/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 17,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 17,
                "endColumn": 31
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`styles` has too many lines (4). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 19,
                "column": 11,
                "nodeType": "ArrayExpression",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 26,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/consistent-component-styles",
                "severity": 2,
                "message": "Use a `string` instead of a `string[]` for the `styles` property",
                "line": 19,
                "column": 11,
                "nodeType": "ArrayExpression",
                "messageId": "useStylesString",
                "endLine": 26,
                "endColumn": 4,
                "fix": {
                  "range": [
                    508,
                    638
                  ],
                  "text": "`\n .cal-day-selected,\n .cal-day-selected:hover {\n background-color: deeppink !important;\n }\n `"
                }
              },
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 27,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 27,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        47,
                        680
                      ],
                      "text": ",\n} from '@angular/core';\nimport {\n CalendarEvent,\n CalendarMonthViewDay,\n CalendarView,\n CalendarWeekViewBeforeRenderEvent,\n} from 'angular-calendar';\nimport { WeekViewHour, WeekViewHourColumn } from 'calendar-utils';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n // don't do this in your app, its only so the styles get applied globally\n styles: [\n `\n .cal-day-selected,\n .cal-day-selected:hover {\n background-color: deeppink !important;\n }\n `,\n ],\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 4,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n ChangeDetectionStrategy,\n ViewEncapsulation,\n} from '@angular/core';\nimport {\n CalendarEvent,\n CalendarMonthViewDay,\n CalendarView,\n CalendarWeekViewBeforeRenderEvent,\n} from 'angular-calendar';\nimport { WeekViewHour, WeekViewHourColumn } from 'calendar-utils';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n // don't do this in your app, its only so the styles get applied globally\n styles: [\n `\n .cal-day-selected,\n .cal-day-selected:hover {\n background-color: deeppink !important;\n }\n `,\n ],\n encapsulation: ViewEncapsulation.None,\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Month;\n\n viewDate: Date = new Date();\n\n selectedMonthViewDay: CalendarMonthViewDay;\n\n selectedDayViewDate: Date;\n\n hourColumns: WeekViewHourColumn[];\n\n events: CalendarEvent[] = [];\n\n selectedDays: any = [];\n\n dayClicked(day: CalendarMonthViewDay): void {\n this.selectedMonthViewDay = day;\n const selectedDateTime = this.selectedMonthViewDay.date.getTime();\n const dateIndex = this.selectedDays.findIndex(\n (selectedDay) => selectedDay.date.getTime() === selectedDateTime\n );\n if (dateIndex > -1) {\n delete this.selectedMonthViewDay.cssClass;\n this.selectedDays.splice(dateIndex, 1);\n } else {\n this.selectedDays.push(this.selectedMonthViewDay);\n day.cssClass = 'cal-day-selected';\n this.selectedMonthViewDay = day;\n }\n }\n\n beforeMonthViewRender({ body }: { body: CalendarMonthViewDay[] }): void {\n body.forEach((day) => {\n if (\n this.selectedDays.some(\n (selectedDay) => selectedDay.date.getTime() === day.date.getTime()\n )\n ) {\n day.cssClass = 'cal-day-selected';\n }\n });\n }\n\n hourSegmentClicked(date: Date) {\n this.selectedDayViewDate = date;\n this.addSelectedDayViewClass();\n }\n\n beforeWeekOrDayViewRender(event: CalendarWeekViewBeforeRenderEvent) {\n this.hourColumns = event.hourColumns;\n this.addSelectedDayViewClass();\n }\n\n private addSelectedDayViewClass() {\n this.hourColumns.forEach((column) => {\n column.hours.forEach((hourSegment) => {\n hourSegment.segments.forEach((segment) => {\n delete segment.cssClass;\n if (\n this.selectedDayViewDate &&\n segment.date.getTime() === this.selectedDayViewDate.getTime()\n ) {\n segment.cssClass = 'cal-day-selected';\n }\n });\n });\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/show-dates-on-titles/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 13,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 13,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport {\n CalendarEvent,\n CalendarEventTitleFormatter,\n CalendarView,\n} from 'angular-calendar';\nimport { CustomEventTitleFormatter } from './custom-event-title-formatter.provider';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n providers: [\n {\n provide: CalendarEventTitleFormatter,\n useClass: CustomEventTitleFormatter,\n },\n ],\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Month;\n\n viewDate: Date = new Date();\n\n events: CalendarEvent[] = [\n {\n title: 'An event',\n start: new Date(),\n color: colors.red,\n },\n ];\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/show-dates-on-titles/custom-event-title-formatter.provider.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 5,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 5,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        201,
                        201
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        201,
                        201
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        201,
                        201
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { LOCALE_ID, Inject, Injectable } from '@angular/core';\nimport { CalendarEventTitleFormatter, CalendarEvent } from 'angular-calendar';\nimport { formatDate } from '@angular/common';\n\n@Injectable()\nexport class CustomEventTitleFormatter extends CalendarEventTitleFormatter {\n constructor(@Inject(LOCALE_ID) private locale: string) {\n super();\n }\n\n // you can override any of the methods defined in the parent class\n\n month(event: CalendarEvent): string {\n return `<b>${formatDate(event.start, 'h:m a', this.locale)}</b> ${\n event.title\n }`;\n }\n\n week(event: CalendarEvent): string {\n return `<b>${formatDate(event.start, 'h:m a', this.locale)}</b> ${\n event.title\n }`;\n }\n\n day(event: CalendarEvent): string {\n return `<b>${formatDate(event.start, 'h:m a', this.locale)}</b> ${\n event.title\n }`;\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/validate-drag-and-resize/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 26,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 26,
                "endColumn": 31
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`styles` has too many lines (4). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 27,
                "column": 11,
                "nodeType": "ArrayExpression",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 34,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/consistent-component-styles",
                "severity": 2,
                "message": "Use a `string` instead of a `string[]` for the `styles` property",
                "line": 27,
                "column": 11,
                "nodeType": "ArrayExpression",
                "messageId": "useStylesString",
                "endLine": 34,
                "endColumn": 4,
                "fix": {
                  "range": [
                    530,
                    660
                  ],
                  "text": "`\n .invalid-position .cal-event {\n background-color: #ad2121 !important;\n color: #fff;\n }\n `"
                }
              },
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 35,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 35,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        47,
                        702
                      ],
                      "text": ",\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport {\n CalendarEvent,\n CalendarEventTimesChangedEvent,\n CalendarView,\n} from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\nimport {\n addDays,\n addHours,\n isSameDay,\n setDay,\n startOfDay,\n subDays,\n subSeconds,\n} from 'date-fns';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n styles: [\n `\n .invalid-position .cal-event {\n background-color: #ad2121 !important;\n color: #fff;\n }\n `,\n ],\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 4,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n ViewEncapsulation,\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport {\n CalendarEvent,\n CalendarEventTimesChangedEvent,\n CalendarView,\n} from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\nimport {\n addDays,\n addHours,\n isSameDay,\n setDay,\n startOfDay,\n subDays,\n subSeconds,\n} from 'date-fns';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n styles: [\n `\n .invalid-position .cal-event {\n background-color: #ad2121 !important;\n color: #fff;\n }\n `,\n ],\n encapsulation: ViewEncapsulation.None,\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Week;\n\n viewDate: Date = new Date();\n\n events: CalendarEvent[] = [\n {\n start: subDays(startOfDay(new Date()), 1),\n end: addDays(new Date(), 1),\n title: 'A 3 day event',\n color: colors.blue,\n allDay: true,\n resizable: {\n beforeStart: true,\n afterEnd: true,\n },\n draggable: true,\n },\n {\n start: addHours(startOfDay(setDay(new Date(), 3)), 2),\n end: subSeconds(addHours(startOfDay(setDay(new Date(), 3)), 3), 1),\n title: 'An short event',\n color: colors.yellow,\n resizable: {\n beforeStart: true,\n afterEnd: true,\n },\n draggable: true,\n },\n {\n start: addHours(startOfDay(setDay(new Date(), 3)), 5),\n end: subSeconds(addHours(startOfDay(setDay(new Date(), 3)), 10), 1),\n title: 'A draggable and resizable event',\n color: colors.yellow,\n resizable: {\n beforeStart: true,\n afterEnd: true,\n },\n draggable: true,\n },\n ];\n\n refresh = new Subject<void>();\n\n validateEventTimesChanged = (\n { event, newStart, newEnd, allDay }: CalendarEventTimesChangedEvent,\n addCssClass = true\n ) => {\n if (event.allDay) {\n return true;\n }\n\n delete event.cssClass;\n // don't allow dragging or resizing events to different days\n const sameDay = isSameDay(newStart, newEnd);\n\n if (!sameDay) {\n return false;\n }\n\n // don't allow dragging events to the same times as other events\n const overlappingEvent = this.events.find((otherEvent) => {\n return (\n otherEvent !== event &&\n !otherEvent.allDay &&\n ((otherEvent.start < newStart && newStart < otherEvent.end) ||\n (otherEvent.start < newEnd && newStart < otherEvent.end))\n );\n });\n\n if (overlappingEvent) {\n if (addCssClass) {\n event.cssClass = 'invalid-position';\n } else {\n return false;\n }\n }\n\n return true;\n };\n\n eventTimesChanged(\n eventTimesChangedEvent: CalendarEventTimesChangedEvent\n ): void {\n delete eventTimesChangedEvent.event.cssClass;\n if (this.validateEventTimesChanged(eventTimesChangedEvent, false)) {\n const { event, newStart, newEnd } = eventTimesChangedEvent;\n event.start = newStart;\n event.end = newEnd;\n this.refresh.next();\n }\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/week-view-event-margin/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 14,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 14,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        47,
                        436
                      ],
                      "text": ",\n} from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\nimport { addDays, addHours, startOfDay } from 'date-fns';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './template.html',\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`styles` has too many lines (7). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 15,
                "column": 11,
                "nodeType": "ArrayExpression",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 25,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/consistent-component-styles",
                "severity": 2,
                "message": "Use a `string` instead of a `string[]` for the `styles` property",
                "line": 15,
                "column": 11,
                "nodeType": "ArrayExpression",
                "messageId": "useStylesString",
                "endLine": 25,
                "endColumn": 4,
                "fix": {
                  "range": [
                    447,
                    633
                  ],
                  "text": "`\n .cal-week-view .cal-time-events .cal-day-column {\n margin-right: 10px;\n }\n\n .cal-week-view .cal-hour {\n width: calc(100% + 10px);\n }\n `"
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n ViewEncapsulation,\n} from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\nimport { addDays, addHours, startOfDay } from 'date-fns';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './template.html',\n encapsulation: ViewEncapsulation.None,\n styles: [\n `\n .cal-week-view .cal-time-events .cal-day-column {\n margin-right: 10px;\n }\n\n .cal-week-view .cal-hour {\n width: calc(100% + 10px);\n }\n `,\n ],\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Week;\n\n viewDate: Date = new Date();\n\n events: CalendarEvent[] = [\n {\n start: startOfDay(new Date()),\n title: 'An event',\n color: colors.yellow,\n },\n {\n start: addHours(startOfDay(new Date()), 2),\n end: new Date(),\n title: 'Another event',\n color: colors.blue,\n },\n {\n start: addDays(addHours(startOfDay(new Date()), 2), 2),\n end: addDays(new Date(), 2),\n title: 'And another',\n color: colors.red,\n },\n ];\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/week-view-minute-precision/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 9,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 9,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent } from 'angular-calendar';\nimport { addDays, addHours, startOfDay } from 'date-fns';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n})\nexport class DemoComponent {\n viewDate: Date = new Date();\n\n events: CalendarEvent[] = [\n {\n start: addHours(startOfDay(new Date()), 5),\n end: addHours(startOfDay(new Date()), 17),\n title: 'Event 1',\n color: colors.red,\n allDay: true,\n },\n {\n start: addHours(startOfDay(addDays(new Date(), 1)), 2),\n end: addHours(startOfDay(addDays(new Date(), 1)), 18),\n title: 'Event 2',\n color: colors.blue,\n allDay: true,\n },\n {\n start: addHours(startOfDay(new Date()), 8),\n title: 'Event 3',\n color: colors.blue,\n allDay: true,\n },\n ];\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/environments/environment.prod.ts",
            "messages": [
              {
                "ruleId": null,
                "fatal": true,
                "severity": 2,
                "message": "Parsing error: ESLint was configured to run on `<tsconfigRootDir>/projects/demos/environments/environment.prod.ts` using `parserOptions.project`: <tsconfigRootDir>/projects/demos/tsconfig.app.json\nHowever, that TSConfig does not include this file. Either:\n- Change ESLint's list of included files to not include this file\n- Change that TSConfig to include this file\n- Create a new TSConfig that includes this file and include it in your parserOptions.project\nSee the typescript-eslint docs for more info: https://typescript-eslint.io/linting/troubleshooting#i-get-errors-telling-me-eslint-was-configured-to-run--however-that-tsconfig-does-not--none-of-those-tsconfigs-include-this-file",
                "nodeType": null
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 1,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "export const environment = {\n production: true,\n};\n",
            "usedDeprecatedRules": []
          }
        ]
      },
      "angular-calendar": {
        "recommended": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/schematics/ng-add/version-names.ts",
            "messages": [
              {
                "ruleId": "@typescript-eslint/no-var-requires",
                "message": "Definition for rule '@typescript-eslint/no-var-requires' was not found.",
                "line": 1,
                "column": 48,
                "endLine": 1,
                "endColumn": 106,
                "severity": 2,
                "nodeType": null
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "const packageJson = require('./package.json'); // eslint-disable-line @typescript-eslint/no-var-requires\n\nexport const angularCalendarVersion = `^${packageJson.version}`;\nexport const momentVersion = packageJson.devDependencies.moment;\nexport const dateFnsVersion = packageJson.devDependencies['date-fns'];\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/month/calendar-month-view/calendar-month-cell/calendar-month-cell.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/no-host-metadata-property",
                "message": "Definition for rule '@angular-eslint/no-host-metadata-property' was not found.",
                "line": 92,
                "column": 3,
                "endLine": 92,
                "endColumn": 72,
                "severity": 2,
                "nodeType": null
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n Input,\n Output,\n EventEmitter,\n TemplateRef,\n} from '@angular/core';\nimport { MonthViewDay, CalendarEvent } from 'calendar-utils';\nimport { isWithinThreshold, trackByEventId } from '../../../common/util/util';\nimport { PlacementArray } from 'positioning';\n\n@Component({\n selector: 'mwl-calendar-month-cell',\n template: `\n <ng-template\n #defaultTemplate\n let-day=\"day\"\n let-openDay=\"openDay\"\n let-locale=\"locale\"\n let-tooltipPlacement=\"tooltipPlacement\"\n let-highlightDay=\"highlightDay\"\n let-unhighlightDay=\"unhighlightDay\"\n let-eventClicked=\"eventClicked\"\n let-tooltipTemplate=\"tooltipTemplate\"\n let-tooltipAppendToBody=\"tooltipAppendToBody\"\n let-tooltipDelay=\"tooltipDelay\"\n let-trackByEventId=\"trackByEventId\"\n let-validateDrag=\"validateDrag\"\n >\n <div\n class=\"cal-cell-top\"\n [attr.aria-label]=\"\n { day: day, locale: locale } | calendarA11y : 'monthCell'\n \"\n >\n <span aria-hidden=\"true\">\n <span class=\"cal-day-badge\" *ngIf=\"day.badgeTotal > 0\">{{\n day.badgeTotal\n }}</span>\n <span class=\"cal-day-number\">{{\n day.date | calendarDate : 'monthViewDayNumber' : locale\n }}</span>\n </span>\n </div>\n <div class=\"cal-events\" *ngIf=\"day.events.length > 0\">\n <div\n class=\"cal-event\"\n *ngFor=\"let event of day.events; trackBy: trackByEventId\"\n [ngStyle]=\"{ backgroundColor: event.color?.primary }\"\n [ngClass]=\"event?.cssClass\"\n (mouseenter)=\"highlightDay.emit({ event: event })\"\n (mouseleave)=\"unhighlightDay.emit({ event: event })\"\n [mwlCalendarTooltip]=\"\n event.title | calendarEventTitle : 'monthTooltip' : event\n \"\n [tooltipPlacement]=\"tooltipPlacement\"\n [tooltipEvent]=\"event\"\n [tooltipTemplate]=\"tooltipTemplate\"\n [tooltipAppendToBody]=\"tooltipAppendToBody\"\n [tooltipDelay]=\"tooltipDelay\"\n mwlDraggable\n [class.cal-draggable]=\"event.draggable\"\n dragActiveClass=\"cal-drag-active\"\n [dropData]=\"{ event: event, draggedFrom: day }\"\n [dragAxis]=\"{ x: event.draggable, y: event.draggable }\"\n [validateDrag]=\"validateDrag\"\n [touchStartLongPress]=\"{ delay: 300, delta: 30 }\"\n (mwlClick)=\"eventClicked.emit({ event: event, sourceEvent: $event })\"\n [attr.aria-hidden]=\"{} | calendarA11y : 'hideMonthCellEvents'\"\n ></div>\n </div>\n </ng-template>\n <ng-template\n [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n [ngTemplateOutletContext]=\"{\n day: day,\n openDay: openDay,\n locale: locale,\n tooltipPlacement: tooltipPlacement,\n highlightDay: highlightDay,\n unhighlightDay: unhighlightDay,\n eventClicked: eventClicked,\n tooltipTemplate: tooltipTemplate,\n tooltipAppendToBody: tooltipAppendToBody,\n tooltipDelay: tooltipDelay,\n trackByEventId: trackByEventId,\n validateDrag: validateDrag\n }\"\n >\n </ng-template>\n `,\n // eslint-disable-next-line @angular-eslint/no-host-metadata-property\n host: {\n class: 'cal-cell cal-day-cell',\n '[class.cal-past]': 'day.isPast',\n '[class.cal-today]': 'day.isToday',\n '[class.cal-future]': 'day.isFuture',\n '[class.cal-weekend]': 'day.isWeekend',\n '[class.cal-in-month]': 'day.inMonth',\n '[class.cal-out-month]': '!day.inMonth',\n '[class.cal-has-events]': 'day.events.length > 0',\n '[class.cal-open]': 'day === openDay',\n '[class.cal-event-highlight]': '!!day.backgroundColor',\n },\n})\nexport class CalendarMonthCellComponent {\n @Input() day: MonthViewDay;\n\n @Input() openDay: MonthViewDay;\n\n @Input() locale: string;\n\n @Input() tooltipPlacement: PlacementArray;\n\n @Input() tooltipAppendToBody: boolean;\n\n @Input() customTemplate: TemplateRef<any>;\n\n @Input() tooltipTemplate: TemplateRef<any>;\n\n @Input() tooltipDelay: number | null;\n\n @Output() highlightDay: EventEmitter<any> = new EventEmitter();\n\n @Output() unhighlightDay: EventEmitter<any> = new EventEmitter();\n\n @Output() eventClicked = new EventEmitter<{\n event: CalendarEvent;\n sourceEvent: MouseEvent;\n }>();\n\n trackByEventId = trackByEventId;\n\n validateDrag = isWithinThreshold;\n}\n",
            "usedDeprecatedRules": []
          }
        ],
        "all": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/schematics/ng-add/version-names.ts",
            "messages": [
              {
                "ruleId": "@typescript-eslint/no-var-requires",
                "message": "Definition for rule '@typescript-eslint/no-var-requires' was not found.",
                "line": 1,
                "column": 48,
                "endLine": 1,
                "endColumn": 106,
                "severity": 2,
                "nodeType": null
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "const packageJson = require('./package.json'); // eslint-disable-line @typescript-eslint/no-var-requires\n\nexport const angularCalendarVersion = `^${packageJson.version}`;\nexport const momentVersion = packageJson.devDependencies.moment;\nexport const dateFnsVersion = packageJson.devDependencies['date-fns'];\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/common/calendar-a11y/calendar-a11y.pipe.spec.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-selector",
                "severity": 2,
                "message": "The selector of the component is mandatory",
                "line": 7,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useComponentSelector",
                "endLine": 9,
                "endColumn": 3
              },
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 7,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 9,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        307
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { expect } from 'chai';\nimport { A11yParams, CalendarModule, DateAdapter } from 'angular-calendar';\nimport { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { expect } from 'chai';\nimport { A11yParams, CalendarModule, DateAdapter } from 'angular-calendar';\nimport { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\n\n@Component({\n template: '{{ a11yParams | calendarA11y:method }}',\n})\nclass TestComponent {\n a11yParams: A11yParams;\n method: string;\n}\n\ndescribe('calendarA11y pipe', () => {\n beforeEach(() => {\n TestBed.configureTestingModule({\n imports: [\n CalendarModule.forRoot({\n provide: DateAdapter,\n useFactory: adapterFactory,\n }),\n ],\n declarations: [TestComponent],\n });\n });\n\n it('should throw when an invalid method is passed', () => {\n const fixture: ComponentFixture<TestComponent> =\n TestBed.createComponent(TestComponent);\n fixture.componentInstance.a11yParams = {};\n fixture.componentInstance.method = 'invalid';\n expect(() => fixture.detectChanges()).to.throw(\n /^invalid is not a valid a11y method. Can only be one of/\n );\n });\n});\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/common/calendar-a11y/calendar-a11y.provider.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 45,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 45,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        1349,
                        1349
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        1349,
                        1349
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        1349,
                        1349
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Injectable } from '@angular/core';\nimport { formatDate, I18nPluralPipe } from '@angular/common';\nimport { A11yParams } from './calendar-a11y.interface';\n\n/**\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json This class is responsible for adding accessibility to the calendar.\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json You may override any of its methods via angulars DI to suit your requirements.\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json For example:\n angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```typescript\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json import { A11yParams, CalendarA11y } from 'angular-calendar';\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json import { formatDate, I18nPluralPipe } from '@angular/common';\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json import { Injectable } from '@angular/core';\n angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json // adding your own a11y params\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json export interface CustomA11yParams extends A11yParams {\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json isDrSuess?: boolean;\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json }\n angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @Injectable()\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json export class CustomCalendarA11y extends CalendarA11y {\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json constructor(protected i18nPlural: I18nPluralPipe) {\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json super(i18nPlural);\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json }\n angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json // overriding a function\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json public openDayEventsLandmark({ date, locale, isDrSuess }: CustomA11yParams): string {\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json if (isDrSuess) {\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json return `\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ${formatDate(date, 'EEEE MMMM d', locale)}\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Today you are you! That is truer than true! There is no one alive\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json who is you-er than you!\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json `;\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json }\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json }\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json }\n angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json // in your component that uses the calendar\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json providers: [{\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json provide: CalendarA11y,\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json useClass: CustomCalendarA11y\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json }]\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```\n */\n@Injectable()\nexport class CalendarA11y {\n constructor(protected i18nPlural: I18nPluralPipe) {}\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Aria label for the badges/date of a cell\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @example: `Saturday October 19 1 event click to expand`\n */\n public monthCell({ day, locale }: A11yParams): string {\n if (day.badgeTotal > 0) {\n return `\n ${formatDate(day.date, 'EEEE MMMM d', locale)},\n ${this.i18nPlural.transform(day.badgeTotal, {\n '=0': 'No events',\n '=1': 'One event',\n other: '# events',\n })},\n click to expand\n `;\n } else {\n return `${formatDate(day.date, 'EEEE MMMM d', locale)}`;\n }\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Aria label for the open day events start landmark\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @example: `Saturday October 19 expanded view`\n */\n public openDayEventsLandmark({ date, locale }: A11yParams): string {\n return `\n Beginning of expanded view for ${formatDate(date, 'EEEE MMMM dd', locale)}\n `;\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Aria label for alert that a day in the month view was expanded\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @example: `Saturday October 19 expanded`\n */\n public openDayEventsAlert({ date, locale }: A11yParams): string {\n return `${formatDate(date, 'EEEE MMMM dd', locale)} expanded`;\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Descriptive aria label for an event\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @example: `Saturday October 19th, Scott's Pizza Party, from 11:00am to 5:00pm`\n */\n public eventDescription({ event, locale }: A11yParams): string {\n if (event.allDay === true) {\n return this.allDayEventDescription({ event, locale });\n }\n\n const aria = `\n ${formatDate(event.start, 'EEEE MMMM dd', locale)},\n ${event.title}, from ${formatDate(event.start, 'hh:mm a', locale)}\n `;\n if (event.end) {\n return aria + ` to ${formatDate(event.end, 'hh:mm a', locale)}`;\n }\n return aria;\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Descriptive aria label for an all day event\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @example:\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json `Scott's Party, event spans multiple days: start time October 19 5:00pm, no stop time`\n */\n public allDayEventDescription({ event, locale }: A11yParams): string {\n const aria = `\n ${event.title}, event spans multiple days:\n start time ${formatDate(event.start, 'MMMM dd hh:mm a', locale)}\n `;\n if (event.end) {\n return (\n aria + `, stop time ${formatDate(event.end, 'MMMM d hh:mm a', locale)}`\n );\n }\n return aria + `, no stop time`;\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Aria label for the calendar event actions icons\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @returns 'Edit' for fa-pencil icons, and 'Delete' for fa-times icons\n */\n public actionButtonLabel({ action }: A11yParams): string {\n return action.a11yLabel;\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @returns {number} Tab index to be given to month cells\n */\n public monthCellTabIndex(): number {\n return 0;\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @returns true if the events inside the month cell should be aria-hidden\n */\n public hideMonthCellEvents(): boolean {\n return true;\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @returns true if event titles should be aria-hidden (global)\n */\n public hideEventTitle(): boolean {\n return true;\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @returns true if hour segments in the week view should be aria-hidden\n */\n public hideWeekHourSegment(): boolean {\n return true;\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @returns true if hour segments in the day view should be aria-hidden\n */\n public hideDayHourSegment(): boolean {\n return true;\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/common/calendar-angular-date-formatter/calendar-angular-date-formatter.provider.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 13,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 13,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        486,
                        486
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        486,
                        486
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        486,
                        486
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n CalendarDateFormatterInterface,\n DateFormatterParams,\n} from '../calendar-date-formatter/calendar-date-formatter.interface';\nimport { formatDate } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { DateAdapter } from '../../../date-adapters/date-adapter';\nimport { getWeekViewPeriod } from '../util/util';\n\n/**\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json This will use the angular date pipe to do all date formatting. It is the default date formatter used by the calendar.\n */\n@Injectable()\nexport class CalendarAngularDateFormatter\n implements CalendarDateFormatterInterface\n{\n constructor(protected dateAdapter: DateAdapter) {}\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The month view header week day labels\n */\n public monthViewColumnHeader({ date, locale }: DateFormatterParams): string {\n return formatDate(date, 'EEEE', locale);\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The month view cell day number\n */\n public monthViewDayNumber({ date, locale }: DateFormatterParams): string {\n return formatDate(date, 'd', locale);\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The month view title\n */\n public monthViewTitle({ date, locale }: DateFormatterParams): string {\n return formatDate(date, 'LLLL y', locale);\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The week view header week day labels\n */\n public weekViewColumnHeader({ date, locale }: DateFormatterParams): string {\n return formatDate(date, 'EEEE', locale);\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The week view sub header day and month labels\n */\n public weekViewColumnSubHeader({\n date,\n locale,\n }: DateFormatterParams): string {\n return formatDate(date, 'MMM d', locale);\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The week view title\n */\n public weekViewTitle({\n date,\n locale,\n weekStartsOn,\n excludeDays,\n daysInWeek,\n }: DateFormatterParams): string {\n const { viewStart, viewEnd } = getWeekViewPeriod(\n this.dateAdapter,\n date,\n weekStartsOn,\n excludeDays,\n daysInWeek\n );\n const format = (dateToFormat: Date, showYear: boolean) =>\n formatDate(dateToFormat, 'MMM d' + (showYear ? ', yyyy' : ''), locale);\n return `${format(\n viewStart,\n viewStart.getUTCFullYear() !== viewEnd.getUTCFullYear()\n )} - ${format(viewEnd, true)}`;\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The time formatting down the left hand side of the week view\n */\n public weekViewHour({ date, locale }: DateFormatterParams): string {\n return formatDate(date, 'h a', locale);\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The time formatting down the left hand side of the day view\n */\n public dayViewHour({ date, locale }: DateFormatterParams): string {\n return formatDate(date, 'h a', locale);\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The day view title\n */\n public dayViewTitle({ date, locale }: DateFormatterParams): string {\n return formatDate(date, 'EEEE, MMMM d, y', locale);\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/common/calendar-date-formatter/calendar-date-formatter.provider.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 30,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 30,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        1375,
                        1375
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        1375,
                        1375
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        1375,
                        1375
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { CalendarAngularDateFormatter } from '../calendar-angular-date-formatter/calendar-angular-date-formatter.provider';\nimport { Injectable } from '@angular/core';\n\n/**\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json This class is responsible for all formatting of dates. There are 3 implementations available, the `CalendarAngularDateFormatter` (default) which uses the angular date pipe to format dates, the `CalendarNativeDateFormatter` which will use the <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Intl\" target=\"_blank\">Intl</a> API to format dates, or there is the `CalendarMomentDateFormatter` which uses <a href=\"http://momentjs.com/\" target=\"_blank\">moment</a>.\n angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json If you wish, you may override any of the defaults via angulars DI. For example:\n angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```typescript\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json import { CalendarDateFormatter, DateFormatterParams } from 'angular-calendar';\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json import { formatDate } from '@angular/common';\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json import { Injectable } from '@angular/core';\n angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @Injectable()\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json class CustomDateFormatter extends CalendarDateFormatter {\n angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json public monthViewColumnHeader({date, locale}: DateFormatterParams): string {\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json return formatDate(date, 'EEE', locale); // use short week days\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json }\n angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json }\n angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json // in your component that uses the calendar\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json providers: [{\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json provide: CalendarDateFormatter,\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json useClass: CustomDateFormatter\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json }]\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```\n */\n@Injectable()\nexport class CalendarDateFormatter extends CalendarAngularDateFormatter {}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/common/calendar-date/calendar-date.pipe.spec.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-selector",
                "severity": 2,
                "message": "The selector of the component is mandatory",
                "line": 15,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useComponentSelector",
                "endLine": 18,
                "endColumn": 3
              },
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 15,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 18,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        29,
                        476
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { inject, ComponentFixture, TestBed } from '@angular/core/testing';\nimport { expect } from 'chai';\nimport { spy } from 'sinon';\nimport moment from 'moment';\nimport {\n CalendarModule,\n CalendarMomentDateFormatter,\n CalendarDateFormatter,\n MOMENT,\n} from 'angular-calendar';\nimport { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\nimport { DateAdapter } from 'angular-calendar';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, LOCALE_ID } from '@angular/core';\nimport { inject, ComponentFixture, TestBed } from '@angular/core/testing';\nimport { expect } from 'chai';\nimport { spy } from 'sinon';\nimport moment from 'moment';\nimport {\n CalendarModule,\n CalendarMomentDateFormatter,\n CalendarDateFormatter,\n MOMENT,\n} from 'angular-calendar';\nimport { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\nimport { DateAdapter } from 'angular-calendar';\n\n@Component({\n template:\n '{{ date | calendarDate:method:locale:weekStartsOn:excludeDays:daysInWeek }}',\n})\nclass TestComponent {\n date: Date;\n view: string;\n format: string;\n locale: string;\n method: string;\n daysInWeek: number;\n excludeDays: number[];\n weekStartsOn: number;\n}\n\ndescribe('calendarDate pipe', () => {\n beforeEach(() => {\n TestBed.configureTestingModule({\n imports: [\n CalendarModule.forRoot(\n {\n provide: DateAdapter,\n useFactory: adapterFactory,\n },\n {\n dateFormatter: {\n provide: CalendarDateFormatter,\n useClass: CalendarMomentDateFormatter,\n },\n }\n ),\n ],\n declarations: [TestComponent],\n providers: [{ provide: MOMENT, useValue: moment }],\n });\n });\n\n let dateFormatter: CalendarDateFormatter;\n let defaultLocale: string;\n beforeEach(inject(\n [CalendarDateFormatter, LOCALE_ID],\n (_dateFormatter_, locale) => {\n dateFormatter = _dateFormatter_;\n defaultLocale = locale;\n }\n ));\n\n it('should use the date formatter to format the date', () => {\n const fixture: ComponentFixture<TestComponent> =\n TestBed.createComponent(TestComponent);\n spy(dateFormatter, 'monthViewColumnHeader');\n fixture.componentInstance.date = new Date('2016-01-01');\n fixture.componentInstance.method = 'monthViewColumnHeader';\n fixture.detectChanges();\n expect(fixture.nativeElement.innerHTML).to.equal('Friday');\n expect(dateFormatter.monthViewColumnHeader).to.have.been.calledWith({\n date: fixture.componentInstance.date,\n locale: defaultLocale,\n daysInWeek: undefined,\n excludeDays: [],\n weekStartsOn: 0,\n });\n });\n\n it('should allow the locale to be customised', () => {\n const fixture: ComponentFixture<TestComponent> =\n TestBed.createComponent(TestComponent);\n fixture.componentInstance.locale = 'de';\n spy(dateFormatter, 'monthViewColumnHeader');\n fixture.componentInstance.date = new Date('2016-01-01');\n fixture.componentInstance.method = 'monthViewColumnHeader';\n fixture.detectChanges();\n expect(fixture.nativeElement.innerHTML).to.equal('Freitag');\n expect(dateFormatter.monthViewColumnHeader).to.have.been.calledWith({\n date: fixture.componentInstance.date,\n locale: 'de',\n daysInWeek: undefined,\n excludeDays: [],\n weekStartsOn: 0,\n });\n });\n\n it('should throw when an invalid method is passed', () => {\n const fixture: ComponentFixture<TestComponent> =\n TestBed.createComponent(TestComponent);\n fixture.componentInstance.date = new Date('2016-01-01');\n fixture.componentInstance.method = 'invalid';\n expect(() => fixture.detectChanges()).to.throw(\n /^invalid is not a valid date formatter. Can only be one of/\n );\n });\n});\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/common/calendar-event-actions/calendar-event-actions.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 4,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 41,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        38,
                        140
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent, EventAction } from 'calendar-utils';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (33). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 6,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 40,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 43,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 43,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 45,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 45,
                "endColumn": 11
              }
            ],
            "suppressedMessages": [],
            "errorCount": 4,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, Input, TemplateRef } from '@angular/core';\nimport { CalendarEvent, EventAction } from 'calendar-utils';\n\n@Component({\n selector: 'mwl-calendar-event-actions',\n template: `\n <ng-template\n #defaultTemplate\n let-event=\"event\"\n let-trackByActionId=\"trackByActionId\"\n >\n <span *ngIf=\"event.actions\" class=\"cal-event-actions\">\n <a\n class=\"cal-event-action\"\n href=\"javascript:;\"\n *ngFor=\"let action of event.actions; trackBy: trackByActionId\"\n (mwlClick)=\"action.onClick({ event: event, sourceEvent: $event })\"\n (mwlKeydownEnter)=\"\n action.onClick({ event: event, sourceEvent: $event })\n \"\n [ngClass]=\"action.cssClass\"\n [innerHtml]=\"action.label\"\n tabindex=\"0\"\n role=\"button\"\n [attr.aria-label]=\"\n { action: action } | calendarA11y : 'actionButtonLabel'\n \"\n >\n </a>\n </span>\n </ng-template>\n <ng-template\n [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n [ngTemplateOutletContext]=\"{\n event: event,\n trackByActionId: trackByActionId\n }\"\n >\n </ng-template>\n `,\n})\nexport class CalendarEventActionsComponent {\n @Input() event: CalendarEvent;\n\n @Input() customTemplate: TemplateRef<any>;\n\n trackByActionId = (index: number, action: EventAction) =>\n action.id ? action.id : action;\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/common/calendar-event-title/calendar-event-title.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 4,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 24,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        38,
                        127
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent } from 'calendar-utils';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (16). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 6,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 23,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 26,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 26,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 28,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 28,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 30,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 30,
                "endColumn": 11
              }
            ],
            "suppressedMessages": [],
            "errorCount": 5,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, Input, TemplateRef } from '@angular/core';\nimport { CalendarEvent } from 'calendar-utils';\n\n@Component({\n selector: 'mwl-calendar-event-title',\n template: `\n <ng-template #defaultTemplate let-event=\"event\" let-view=\"view\">\n <span\n class=\"cal-event-title\"\n [innerHTML]=\"event.title | calendarEventTitle : view : event\"\n [attr.aria-hidden]=\"{} | calendarA11y : 'hideEventTitle'\"\n >\n </span>\n </ng-template>\n <ng-template\n [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n [ngTemplateOutletContext]=\"{\n event: event,\n view: view\n }\"\n >\n </ng-template>\n `,\n})\nexport class CalendarEventTitleComponent {\n @Input() event: CalendarEvent;\n\n @Input() customTemplate: TemplateRef<any>;\n\n @Input() view: string;\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/common/calendar-moment-date-formatter/calendar-moment-date-formatter.provider.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 27,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 27,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        871,
                        871
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        871,
                        871
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        871,
                        871
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { InjectionToken, Inject, Injectable } from '@angular/core';\nimport {\n CalendarDateFormatterInterface,\n DateFormatterParams,\n} from '../calendar-date-formatter/calendar-date-formatter.interface';\nimport { getWeekViewPeriod } from '../util/util';\nimport { DateAdapter } from '../../../date-adapters/date-adapter';\n\nexport const MOMENT: InjectionToken<string> = new InjectionToken('Moment');\n\n/**\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json This will use <a href=\"http://momentjs.com/\" target=\"_blank\">moment</a> to do all date formatting. To use this class:\n angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```typescript\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json import { CalendarDateFormatter, CalendarMomentDateFormatter, MOMENT } from 'angular-calendar';\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json import moment from 'moment';\n angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json // in your component\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json provide: [{\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json provide: MOMENT, useValue: moment\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json }, {\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json provide: CalendarDateFormatter, useClass: CalendarMomentDateFormatter\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json }]\n angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```\n */\n@Injectable()\nexport class CalendarMomentDateFormatter\n implements CalendarDateFormatterInterface\n{\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n constructor(\n @Inject(MOMENT) protected moment: any,\n protected dateAdapter: DateAdapter\n ) {}\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The month view header week day labels\n */\n public monthViewColumnHeader({ date, locale }: DateFormatterParams): string {\n return this.moment(date).locale(locale).format('dddd');\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The month view cell day number\n */\n public monthViewDayNumber({ date, locale }: DateFormatterParams): string {\n return this.moment(date).locale(locale).format('D');\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The month view title\n */\n public monthViewTitle({ date, locale }: DateFormatterParams): string {\n return this.moment(date).locale(locale).format('MMMM YYYY');\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The week view header week day labels\n */\n public weekViewColumnHeader({ date, locale }: DateFormatterParams): string {\n return this.moment(date).locale(locale).format('dddd');\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The week view sub header day and month labels\n */\n public weekViewColumnSubHeader({\n date,\n locale,\n }: DateFormatterParams): string {\n return this.moment(date).locale(locale).format('MMM D');\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The week view title\n */\n public weekViewTitle({\n date,\n locale,\n weekStartsOn,\n excludeDays,\n daysInWeek,\n }: DateFormatterParams): string {\n const { viewStart, viewEnd } = getWeekViewPeriod(\n this.dateAdapter,\n date,\n weekStartsOn,\n excludeDays,\n daysInWeek\n );\n const format = (dateToFormat: Date, showYear: boolean) =>\n this.moment(dateToFormat)\n .locale(locale)\n .format('MMM D' + (showYear ? ', YYYY' : ''));\n return `${format(\n viewStart,\n viewStart.getUTCFullYear() !== viewEnd.getUTCFullYear()\n )} - ${format(viewEnd, true)}`;\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The time formatting down the left hand side of the week view\n */\n public weekViewHour({ date, locale }: DateFormatterParams): string {\n return this.moment(date).locale(locale).format('ha');\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The time formatting down the left hand side of the day view\n */\n public dayViewHour({ date, locale }: DateFormatterParams): string {\n return this.moment(date).locale(locale).format('ha');\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The day view title\n */\n public dayViewTitle({ date, locale }: DateFormatterParams): string {\n return this.moment(date).locale(locale).format('dddd, LL'); // dddd = Thursday\n } // LL = locale-dependent Month Day, Year\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/common/calendar-native-date-formatter/calendar-native-date-formatter.provider.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 14,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 14,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        602,
                        602
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        602,
                        602
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        602,
                        602
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n CalendarDateFormatterInterface,\n DateFormatterParams,\n} from '../calendar-date-formatter/calendar-date-formatter.interface';\nimport { Injectable } from '@angular/core';\nimport { DateAdapter } from '../../../date-adapters/date-adapter';\nimport { getWeekViewPeriod } from '../util/util';\n\n/**\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json This will use <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Intl\" target=\"_blank\">Intl</a> API to do all date formatting.\n angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json You will need to include a <a href=\"https://github.com/andyearnshaw/Intl.js/\">polyfill</a> for older browsers.\n */\n@Injectable()\nexport class CalendarNativeDateFormatter\n implements CalendarDateFormatterInterface\n{\n constructor(protected dateAdapter: DateAdapter) {}\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The month view header week day labels\n */\n public monthViewColumnHeader({ date, locale }: DateFormatterParams): string {\n return new Intl.DateTimeFormat(locale, { weekday: 'long' }).format(date);\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The month view cell day number\n */\n public monthViewDayNumber({ date, locale }: DateFormatterParams): string {\n return new Intl.DateTimeFormat(locale, { day: 'numeric' }).format(date);\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The month view title\n */\n public monthViewTitle({ date, locale }: DateFormatterParams): string {\n return new Intl.DateTimeFormat(locale, {\n year: 'numeric',\n month: 'long',\n }).format(date);\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The week view header week day labels\n */\n public weekViewColumnHeader({ date, locale }: DateFormatterParams): string {\n return new Intl.DateTimeFormat(locale, { weekday: 'long' }).format(date);\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The week view sub header day and month labels\n */\n public weekViewColumnSubHeader({\n date,\n locale,\n }: DateFormatterParams): string {\n return new Intl.DateTimeFormat(locale, {\n day: 'numeric',\n month: 'short',\n }).format(date);\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The week view title\n */\n public weekViewTitle({\n date,\n locale,\n weekStartsOn,\n excludeDays,\n daysInWeek,\n }: DateFormatterParams): string {\n const { viewStart, viewEnd } = getWeekViewPeriod(\n this.dateAdapter,\n date,\n weekStartsOn,\n excludeDays,\n daysInWeek\n );\n\n const format = (dateToFormat: Date, showYear: boolean) =>\n new Intl.DateTimeFormat(locale, {\n day: 'numeric',\n month: 'short',\n year: showYear ? 'numeric' : undefined,\n }).format(dateToFormat);\n\n return `${format(\n viewStart,\n viewStart.getUTCFullYear() !== viewEnd.getUTCFullYear()\n )} - ${format(viewEnd, true)}`;\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The time formatting down the left hand side of the week view\n */\n public weekViewHour({ date, locale }: DateFormatterParams): string {\n return new Intl.DateTimeFormat(locale, { hour: 'numeric' }).format(date);\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The time formatting down the left hand side of the day view\n */\n public dayViewHour({ date, locale }: DateFormatterParams): string {\n return new Intl.DateTimeFormat(locale, { hour: 'numeric' }).format(date);\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The day view title\n */\n public dayViewTitle({ date, locale }: DateFormatterParams): string {\n return new Intl.DateTimeFormat(locale, {\n day: 'numeric',\n month: 'long',\n year: 'numeric',\n weekday: 'long',\n }).format(date);\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/common/calendar-next-view/calendar-next-view.directive.spec.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-selector",
                "severity": 2,
                "message": "The selector of the component is mandatory",
                "line": 7,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useComponentSelector",
                "endLine": 19,
                "endColumn": 3
              },
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 7,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 19,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        277
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { expect } from 'chai';\nimport { CalendarModule, DateAdapter } from 'angular-calendar';\nimport { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (9). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 8,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 18,
                "endColumn": 4
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { expect } from 'chai';\nimport { CalendarModule, DateAdapter } from 'angular-calendar';\nimport { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\n\n@Component({\n template: `\n <button\n mwlCalendarNextView\n [view]=\"view\"\n [(viewDate)]=\"viewDate\"\n [excludeDays]=\"excludeDays\"\n [daysInWeek]=\"daysInWeek\"\n >\n Next\n </button>\n `,\n})\nclass TestComponent {\n view: string;\n viewDate: Date;\n excludeDays: number[] = [];\n daysInWeek: number;\n}\n\ndescribe('mwlCalendarNextView directive', () => {\n beforeEach(() => {\n TestBed.configureTestingModule({\n imports: [\n CalendarModule.forRoot({\n provide: DateAdapter,\n useFactory: adapterFactory,\n }),\n ],\n declarations: [TestComponent],\n });\n });\n\n it('should increase the view date by 1 month', () => {\n const fixture = TestBed.createComponent<TestComponent>(TestComponent);\n fixture.componentInstance.view = 'month';\n fixture.componentInstance.viewDate = new Date('2017-01-28');\n fixture.detectChanges();\n fixture.nativeElement.querySelector('button').click();\n fixture.detectChanges();\n expect(fixture.componentInstance.viewDate).to.deep.equal(\n new Date('2017-02-28')\n );\n fixture.destroy();\n });\n\n it('should increase the view date by 1 week', () => {\n const fixture = TestBed.createComponent<TestComponent>(TestComponent);\n fixture.componentInstance.view = 'week';\n fixture.componentInstance.viewDate = new Date('2017-01-28');\n fixture.detectChanges();\n fixture.nativeElement.querySelector('button').click();\n fixture.detectChanges();\n expect(fixture.componentInstance.viewDate).to.deep.equal(\n new Date('2017-02-04')\n );\n fixture.destroy();\n });\n\n it('should increase the view date by 1 day', () => {\n const fixture = TestBed.createComponent<TestComponent>(TestComponent);\n fixture.componentInstance.view = 'day';\n fixture.componentInstance.viewDate = new Date('2017-01-28');\n fixture.detectChanges();\n fixture.nativeElement.querySelector('button').click();\n fixture.detectChanges();\n expect(fixture.componentInstance.viewDate).to.deep.equal(\n new Date('2017-01-29')\n );\n fixture.destroy();\n });\n\n it('should increase the view date by 1 day, skipping weekends', () => {\n const fixture = TestBed.createComponent<TestComponent>(TestComponent);\n fixture.componentInstance.view = 'day';\n fixture.componentInstance.viewDate = new Date('2018-06-15');\n fixture.componentInstance.excludeDays = [0, 6];\n fixture.detectChanges();\n fixture.nativeElement.querySelector('button').click();\n fixture.detectChanges();\n expect(fixture.componentInstance.viewDate).to.deep.equal(\n new Date('2018-06-18')\n );\n fixture.destroy();\n });\n\n it('should increase the view date by 4 days, skipping weekends', () => {\n const fixture = TestBed.createComponent<TestComponent>(TestComponent);\n fixture.componentInstance.view = 'week';\n fixture.componentInstance.viewDate = new Date('2018-07-27');\n fixture.componentInstance.excludeDays = [0, 6];\n fixture.componentInstance.daysInWeek = 4;\n fixture.detectChanges();\n fixture.nativeElement.querySelector('button').click();\n fixture.detectChanges();\n expect(fixture.componentInstance.viewDate).to.deep.equal(\n new Date('2018-08-02')\n );\n fixture.destroy();\n });\n});\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/common/calendar-next-view/calendar-next-view.directive.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 31,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 31,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 36,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 36,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 41,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 41,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 46,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 46,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 51,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 51,
                "endColumn": 27,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        1032,
                        1032
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 5,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Directive,\n EventEmitter,\n HostListener,\n Input,\n Output,\n} from '@angular/core';\nimport { DateAdapter } from '../../../date-adapters/date-adapter';\nimport { CalendarView } from '../calendar-view/calendar-view.enum';\nimport { addDaysWithExclusions } from '../util/util';\n\n/**\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Change the view date to the next view. For example:\n angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```typescript\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json <button\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json mwlCalendarNextView\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json [(viewDate)]=\"viewDate\"\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json [view]=\"view\">\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Next\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json </button>\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```\n */\n@Directive({\n selector: '[mwlCalendarNextView]',\n})\nexport class CalendarNextViewDirective {\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The current view\n */\n @Input() view: CalendarView | 'month' | 'week' | 'day';\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The current view date\n */\n @Input() viewDate: Date;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Days to skip when going forward by 1 day\n */\n @Input() excludeDays: number[] = [];\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The number of days in a week. If set will add this amount of days instead of 1 week\n */\n @Input() daysInWeek: number;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Called when the view date is changed\n */\n @Output() viewDateChange: EventEmitter<Date> = new EventEmitter();\n\n constructor(private dateAdapter: DateAdapter) {}\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n @HostListener('click')\n onClick(): void {\n const addFn: any = {\n day: this.dateAdapter.addDays,\n week: this.dateAdapter.addWeeks,\n month: this.dateAdapter.addMonths,\n }[this.view];\n\n if (this.view === CalendarView.Day) {\n this.viewDateChange.emit(\n addDaysWithExclusions(\n this.dateAdapter,\n this.viewDate,\n 1,\n this.excludeDays\n )\n );\n } else if (this.view === CalendarView.Week && this.daysInWeek) {\n this.viewDateChange.emit(\n addDaysWithExclusions(\n this.dateAdapter,\n this.viewDate,\n this.daysInWeek,\n this.excludeDays\n )\n );\n } else {\n this.viewDateChange.emit(addFn(this.viewDate, 1));\n }\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/common/calendar-previous-view/calendar-previous-view.directive.spec.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-selector",
                "severity": 2,
                "message": "The selector of the component is mandatory",
                "line": 7,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useComponentSelector",
                "endLine": 19,
                "endColumn": 3
              },
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 7,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 19,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        277
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { expect } from 'chai';\nimport { CalendarModule, DateAdapter } from 'angular-calendar';\nimport { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (9). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 8,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 18,
                "endColumn": 4
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { expect } from 'chai';\nimport { CalendarModule, DateAdapter } from 'angular-calendar';\nimport { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\n\n@Component({\n template: `\n <button\n mwlCalendarPreviousView\n [view]=\"view\"\n [(viewDate)]=\"viewDate\"\n [excludeDays]=\"excludeDays\"\n [daysInWeek]=\"daysInWeek\"\n >\n Previous\n </button>\n `,\n})\nclass TestComponent {\n public view: string;\n public viewDate: Date;\n excludeDays: number[] = [];\n daysInWeek: number;\n}\n\ndescribe('calendarPreviousView directive', () => {\n beforeEach(() => {\n TestBed.configureTestingModule({\n imports: [\n CalendarModule.forRoot({\n provide: DateAdapter,\n useFactory: adapterFactory,\n }),\n ],\n declarations: [TestComponent],\n });\n });\n\n it('should decrease the view date by 1 month', () => {\n const fixture = TestBed.createComponent<TestComponent>(TestComponent);\n fixture.componentInstance.view = 'month';\n fixture.componentInstance.viewDate = new Date('2017-02-28');\n fixture.detectChanges();\n fixture.nativeElement.querySelector('button').click();\n fixture.detectChanges();\n expect(fixture.componentInstance.viewDate).to.deep.equal(\n new Date('2017-01-28')\n );\n fixture.destroy();\n });\n\n it('should decrease the view date by 1 week', () => {\n const fixture = TestBed.createComponent<TestComponent>(TestComponent);\n fixture.componentInstance.view = 'week';\n fixture.componentInstance.viewDate = new Date('2017-01-28');\n fixture.detectChanges();\n fixture.nativeElement.querySelector('button').click();\n fixture.detectChanges();\n expect(fixture.componentInstance.viewDate).to.deep.equal(\n new Date('2017-01-21')\n );\n fixture.destroy();\n });\n\n it('should decrease the view date by 1 day', () => {\n const fixture = TestBed.createComponent<TestComponent>(TestComponent);\n fixture.componentInstance.view = 'day';\n fixture.componentInstance.viewDate = new Date('2017-01-28');\n fixture.detectChanges();\n fixture.nativeElement.querySelector('button').click();\n fixture.detectChanges();\n expect(fixture.componentInstance.viewDate).to.deep.equal(\n new Date('2017-01-27')\n );\n fixture.destroy();\n });\n\n it('should decrease the view date by 1 day, skipping weekends', () => {\n const fixture = TestBed.createComponent<TestComponent>(TestComponent);\n fixture.componentInstance.view = 'day';\n fixture.componentInstance.viewDate = new Date('2018-06-18');\n fixture.componentInstance.excludeDays = [0, 6];\n fixture.detectChanges();\n fixture.nativeElement.querySelector('button').click();\n fixture.detectChanges();\n expect(fixture.componentInstance.viewDate).to.deep.equal(\n new Date('2018-06-15')\n );\n fixture.destroy();\n });\n\n it('should decrease the view date by 4 days, skipping weekends', () => {\n const fixture = TestBed.createComponent<TestComponent>(TestComponent);\n fixture.componentInstance.view = 'week';\n fixture.componentInstance.viewDate = new Date('2018-08-02');\n fixture.componentInstance.excludeDays = [0, 6];\n fixture.componentInstance.daysInWeek = 4;\n fixture.detectChanges();\n fixture.nativeElement.querySelector('button').click();\n fixture.detectChanges();\n expect(fixture.componentInstance.viewDate).to.deep.equal(\n new Date('2018-07-27')\n );\n fixture.destroy();\n });\n});\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/common/calendar-previous-view/calendar-previous-view.directive.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 31,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 31,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 36,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 36,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 41,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 41,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 46,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 46,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 51,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 51,
                "endColumn": 27,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        1054,
                        1054
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 5,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Directive,\n HostListener,\n Input,\n Output,\n EventEmitter,\n} from '@angular/core';\nimport { DateAdapter } from '../../../date-adapters/date-adapter';\nimport { CalendarView } from '../calendar-view/calendar-view.enum';\nimport { addDaysWithExclusions } from '../util/util';\n\n/**\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Change the view date to the previous view. For example:\n angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```typescript\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json <button\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json mwlCalendarPreviousView\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json [(viewDate)]=\"viewDate\"\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json [view]=\"view\">\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Previous\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json </button>\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```\n */\n@Directive({\n selector: '[mwlCalendarPreviousView]',\n})\nexport class CalendarPreviousViewDirective {\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The current view\n */\n @Input() view: CalendarView | 'month' | 'week' | 'day';\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The current view date\n */\n @Input() viewDate: Date;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Days to skip when going back by 1 day\n */\n @Input() excludeDays: number[] = [];\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The number of days in a week. If set will subtract this amount of days instead of 1 week\n */\n @Input() daysInWeek: number;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Called when the view date is changed\n */\n @Output() viewDateChange: EventEmitter<Date> = new EventEmitter();\n\n constructor(private dateAdapter: DateAdapter) {}\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n @HostListener('click')\n onClick(): void {\n const subFn: any = {\n day: this.dateAdapter.subDays,\n week: this.dateAdapter.subWeeks,\n month: this.dateAdapter.subMonths,\n }[this.view];\n\n if (this.view === CalendarView.Day) {\n this.viewDateChange.emit(\n addDaysWithExclusions(\n this.dateAdapter,\n this.viewDate,\n -1,\n this.excludeDays\n )\n );\n } else if (this.view === CalendarView.Week && this.daysInWeek) {\n this.viewDateChange.emit(\n addDaysWithExclusions(\n this.dateAdapter,\n this.viewDate,\n -this.daysInWeek,\n this.excludeDays\n )\n );\n } else {\n this.viewDateChange.emit(subFn(this.viewDate, 1));\n }\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/common/calendar-today/calendar-today.directive.spec.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-selector",
                "severity": 2,
                "message": "The selector of the component is mandatory",
                "line": 8,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useComponentSelector",
                "endLine": 10,
                "endColumn": 3
              },
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 8,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 10,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        334
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { expect } from 'chai';\nimport { startOfDay } from 'date-fns';\nimport { CalendarModule, DateAdapter } from 'angular-calendar';\nimport { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { expect } from 'chai';\nimport { startOfDay } from 'date-fns';\nimport { CalendarModule, DateAdapter } from 'angular-calendar';\nimport { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\n\n@Component({\n template: '<button mwlCalendarToday [(viewDate)]=\"viewDate\">Next</button>',\n})\nclass TestComponent {\n public viewDate: Date;\n}\n\ndescribe('mwlCalendarNextView directive', () => {\n beforeEach(() => {\n TestBed.configureTestingModule({\n imports: [\n CalendarModule.forRoot({\n provide: DateAdapter,\n useFactory: adapterFactory,\n }),\n ],\n declarations: [TestComponent],\n });\n });\n\n it('should set the view date to the start of today', () => {\n const fixture: ComponentFixture<TestComponent> =\n TestBed.createComponent(TestComponent);\n fixture.componentInstance.viewDate = new Date('2017-01-28');\n fixture.detectChanges();\n fixture.nativeElement.querySelector('button').click();\n fixture.detectChanges();\n expect(fixture.componentInstance.viewDate).to.deep.equal(\n startOfDay(new Date())\n );\n fixture.destroy();\n });\n});\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/common/calendar-today/calendar-today.directive.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 28,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 28,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 33,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 33,
                "endColumn": 27,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        562,
                        562
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Directive,\n HostListener,\n Input,\n Output,\n EventEmitter,\n} from '@angular/core';\nimport { DateAdapter } from '../../../date-adapters/date-adapter';\n\n/**\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Change the view date to the current day. For example:\n angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```typescript\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json <button\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json mwlCalendarToday\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json [(viewDate)]=\"viewDate\">\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Today\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json </button>\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```\n */\n@Directive({\n selector: '[mwlCalendarToday]',\n})\nexport class CalendarTodayDirective {\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The current view date\n */\n @Input() viewDate: Date;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Called when the view date is changed\n */\n @Output() viewDateChange: EventEmitter<Date> = new EventEmitter();\n\n constructor(private dateAdapter: DateAdapter) {}\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n @HostListener('click')\n onClick(): void {\n this.viewDateChange.emit(this.dateAdapter.startOfDay(new Date()));\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/common/calendar-tooltip/calendar-tooltip.directive.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 25,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 49,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        249,
                        546
                      ],
                      "text": ", ChangeDetectionStrategy,\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { PlacementArray, positionElements } from 'positioning';\nimport { CalendarEvent } from 'calendar-utils';\nimport { Observable, of, Subject, timer } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (20). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 27,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 48,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 51,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 51,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 53,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 53,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 55,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 55,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 57,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 57,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 64,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 64,
                "endColumn": 31
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 66,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 66,
                "endColumn": 29
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 68,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 68,
                "endColumn": 28
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 70,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 70,
                "endColumn": 25
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 72,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 72,
                "endColumn": 32
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 74,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 74,
                "endColumn": 25
              }
            ],
            "suppressedMessages": [
              {
                "ruleId": "@angular-eslint/no-input-rename",
                "severity": 2,
                "message": "Input bindings should not be aliased (https://angular.dev/style-guide#style-05-13)",
                "line": 66,
                "column": 10,
                "nodeType": "Literal",
                "messageId": "noInputRename",
                "endLine": 66,
                "endColumn": 28,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveAliasName",
                    "fix": {
                      "range": [
                        1613,
                        1631
                      ],
                      "text": ""
                    },
                    "desc": "Remove alias name"
                  },
                  {
                    "messageId": "suggestReplaceOriginalNameWithAliasName",
                    "fix": {
                      "range": [
                        1613,
                        1642
                      ],
                      "text": ") tooltipPlacement"
                    },
                    "desc": "Remove alias name and use it as the original name"
                  }
                ],
                "suppressions": [
                  {
                    "kind": "directive",
                    "justification": ""
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/no-input-rename",
                "severity": 2,
                "message": "Input bindings should not be aliased (https://angular.dev/style-guide#style-05-13)",
                "line": 68,
                "column": 10,
                "nodeType": "Literal",
                "messageId": "noInputRename",
                "endLine": 68,
                "endColumn": 27,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveAliasName",
                    "fix": {
                      "range": [
                        1735,
                        1752
                      ],
                      "text": ""
                    },
                    "desc": "Remove alias name"
                  },
                  {
                    "messageId": "suggestReplaceOriginalNameWithAliasName",
                    "fix": {
                      "range": [
                        1735,
                        1768
                      ],
                      "text": ") tooltipTemplate"
                    },
                    "desc": "Remove alias name and use it as the original name"
                  }
                ],
                "suppressions": [
                  {
                    "kind": "directive",
                    "justification": ""
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/no-input-rename",
                "severity": 2,
                "message": "Input bindings should not be aliased (https://angular.dev/style-guide#style-05-13)",
                "line": 70,
                "column": 10,
                "nodeType": "Literal",
                "messageId": "noInputRename",
                "endLine": 70,
                "endColumn": 24,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveAliasName",
                    "fix": {
                      "range": [
                        1854,
                        1868
                      ],
                      "text": ""
                    },
                    "desc": "Remove alias name"
                  },
                  {
                    "messageId": "suggestReplaceOriginalNameWithAliasName",
                    "fix": {
                      "range": [
                        1854,
                        1875
                      ],
                      "text": ") tooltipEvent"
                    },
                    "desc": "Remove alias name and use it as the original name"
                  }
                ],
                "suppressions": [
                  {
                    "kind": "directive",
                    "justification": ""
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/no-input-rename",
                "severity": 2,
                "message": "Input bindings should not be aliased (https://angular.dev/style-guide#style-05-13)",
                "line": 72,
                "column": 10,
                "nodeType": "Literal",
                "messageId": "noInputRename",
                "endLine": 72,
                "endColumn": 31,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveAliasName",
                    "fix": {
                      "range": [
                        1958,
                        1979
                      ],
                      "text": ""
                    },
                    "desc": "Remove alias name"
                  },
                  {
                    "messageId": "suggestReplaceOriginalNameWithAliasName",
                    "fix": {
                      "range": [
                        1958,
                        1993
                      ],
                      "text": ") tooltipAppendToBody"
                    },
                    "desc": "Remove alias name and use it as the original name"
                  }
                ],
                "suppressions": [
                  {
                    "kind": "directive",
                    "justification": ""
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/no-input-rename",
                "severity": 2,
                "message": "Input bindings should not be aliased (https://angular.dev/style-guide#style-05-13)",
                "line": 74,
                "column": 10,
                "nodeType": "Literal",
                "messageId": "noInputRename",
                "endLine": 74,
                "endColumn": 24,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveAliasName",
                    "fix": {
                      "range": [
                        2070,
                        2084
                      ],
                      "text": ""
                    },
                    "desc": "Remove alias name"
                  },
                  {
                    "messageId": "suggestReplaceOriginalNameWithAliasName",
                    "fix": {
                      "range": [
                        2070,
                        2091
                      ],
                      "text": ") tooltipDelay"
                    },
                    "desc": "Remove alias name and use it as the original name"
                  }
                ],
                "suppressions": [
                  {
                    "kind": "directive",
                    "justification": ""
                  }
                ]
              }
            ],
            "errorCount": 12,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Directive,\n Component,\n HostListener,\n OnDestroy,\n Input,\n ComponentRef,\n Injector,\n ComponentFactoryResolver,\n ViewContainerRef,\n ElementRef,\n ComponentFactory,\n Inject,\n Renderer2,\n TemplateRef,\n OnChanges,\n SimpleChanges,\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { PlacementArray, positionElements } from 'positioning';\nimport { CalendarEvent } from 'calendar-utils';\nimport { Observable, of, Subject, timer } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n selector: 'mwl-calendar-tooltip-window',\n template: `\n <ng-template\n #defaultTemplate\n let-contents=\"contents\"\n let-placement=\"placement\"\n let-event=\"event\"\n >\n <div class=\"cal-tooltip\" [ngClass]=\"'cal-tooltip-' + placement\">\n <div class=\"cal-tooltip-arrow\"></div>\n <div class=\"cal-tooltip-inner\" [innerHtml]=\"contents\"></div>\n </div>\n </ng-template>\n <ng-template\n [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n [ngTemplateOutletContext]=\"{\n contents: contents,\n placement: placement,\n event: event\n }\"\n >\n </ng-template>\n `,\n})\nexport class CalendarTooltipWindowComponent {\n @Input() contents: string;\n\n @Input() placement: string;\n\n @Input() event: CalendarEvent;\n\n @Input() customTemplate: TemplateRef<any>;\n}\n\n@Directive({\n selector: '[mwlCalendarTooltip]',\n})\nexport class CalendarTooltipDirective implements OnDestroy, OnChanges {\n @Input('mwlCalendarTooltip') contents: string; // eslint-disable-line @angular-eslint/no-input-rename\n\n @Input('tooltipPlacement') placement: PlacementArray = 'auto'; // eslint-disable-line @angular-eslint/no-input-rename\n\n @Input('tooltipTemplate') customTemplate: TemplateRef<any>; // eslint-disable-line @angular-eslint/no-input-rename\n\n @Input('tooltipEvent') event: CalendarEvent; // eslint-disable-line @angular-eslint/no-input-rename\n\n @Input('tooltipAppendToBody') appendToBody: boolean; // eslint-disable-line @angular-eslint/no-input-rename\n\n @Input('tooltipDelay') delay: number | null = null; // eslint-disable-line @angular-eslint/no-input-rename\n\n private tooltipFactory: ComponentFactory<CalendarTooltipWindowComponent>;\n private tooltipRef: ComponentRef<CalendarTooltipWindowComponent>;\n private cancelTooltipDelay$ = new Subject<void>();\n\n constructor(\n private elementRef: ElementRef,\n private injector: Injector,\n private renderer: Renderer2,\n componentFactoryResolver: ComponentFactoryResolver,\n private viewContainerRef: ViewContainerRef,\n @Inject(DOCUMENT) private document // eslint-disable-line\n ) {\n this.tooltipFactory = componentFactoryResolver.resolveComponentFactory(\n CalendarTooltipWindowComponent\n );\n }\n\n ngOnChanges(changes: SimpleChanges): void {\n if (\n this.tooltipRef &&\n (changes.contents || changes.customTemplate || changes.event)\n ) {\n this.tooltipRef.instance.contents = this.contents;\n this.tooltipRef.instance.customTemplate = this.customTemplate;\n this.tooltipRef.instance.event = this.event;\n this.tooltipRef.changeDetectorRef.markForCheck();\n\n if (!this.contents) {\n this.hide();\n }\n }\n }\n\n ngOnDestroy(): void {\n this.hide();\n }\n\n @HostListener('mouseenter')\n onMouseOver(): void {\n const delay$: Observable<any> =\n this.delay === null ? of('now') : timer(this.delay);\n delay$.pipe(takeUntil(this.cancelTooltipDelay$)).subscribe(() => {\n this.show();\n });\n }\n\n @HostListener('mouseleave')\n onMouseOut(): void {\n this.hide();\n }\n\n private show(): void {\n if (!this.tooltipRef && this.contents) {\n this.tooltipRef = this.viewContainerRef.createComponent(\n this.tooltipFactory,\n 0,\n this.injector,\n []\n );\n this.tooltipRef.instance.contents = this.contents;\n this.tooltipRef.instance.customTemplate = this.customTemplate;\n this.tooltipRef.instance.event = this.event;\n if (this.appendToBody) {\n this.document.body.appendChild(this.tooltipRef.location.nativeElement);\n }\n requestAnimationFrame(() => {\n this.positionTooltip();\n });\n }\n }\n\n private hide(): void {\n if (this.tooltipRef) {\n this.viewContainerRef.remove(\n this.viewContainerRef.indexOf(this.tooltipRef.hostView)\n );\n this.tooltipRef = null;\n }\n this.cancelTooltipDelay$.next();\n }\n\n private positionTooltip(previousPositions: string[] = []): void {\n if (this.tooltipRef) {\n this.tooltipRef.changeDetectorRef.detectChanges();\n this.tooltipRef.instance.placement = positionElements(\n this.elementRef.nativeElement,\n this.tooltipRef.location.nativeElement.children[0],\n this.placement,\n this.appendToBody\n );\n // keep re-positioning the tooltip until the arrow position doesn't make a difference\n if (\n previousPositions.indexOf(this.tooltipRef.instance.placement) === -1\n ) {\n this.positionTooltip([\n ...previousPositions,\n this.tooltipRef.instance.placement,\n ]);\n }\n }\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/common/calendar-utils/calendar-utils.provider.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 15,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 15,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        310,
                        310
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        310,
                        310
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        310,
                        310
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Injectable } from '@angular/core';\nimport {\n GetMonthViewArgs,\n MonthView,\n GetWeekViewHeaderArgs,\n WeekDay,\n GetWeekViewArgs,\n WeekView,\n getMonthView,\n getWeekViewHeader,\n getWeekView,\n} from 'calendar-utils';\nimport { DateAdapter } from '../../../date-adapters/date-adapter';\n\n@Injectable()\nexport class CalendarUtils {\n constructor(protected dateAdapter: DateAdapter) {}\n\n getMonthView(args: GetMonthViewArgs): MonthView {\n return getMonthView(this.dateAdapter, args);\n }\n\n getWeekViewHeader(args: GetWeekViewHeaderArgs): WeekDay[] {\n return getWeekViewHeader(this.dateAdapter, args);\n }\n\n getWeekView(args: GetWeekViewArgs): WeekView {\n return getWeekView(this.dateAdapter, args);\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/common/click/click.directive.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 21,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 21,
                "endColumn": 11
              }
            ],
            "suppressedMessages": [
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 23,
                "column": 23,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 23,
                "endColumn": 28,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        450,
                        450
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ],
                "suppressions": [
                  {
                    "kind": "directive",
                    "justification": ""
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/no-output-native",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named as standard DOM events",
                "line": 23,
                "column": 23,
                "nodeType": "Identifier",
                "messageId": "noOutputNative",
                "endLine": 23,
                "endColumn": 28,
                "suppressions": [
                  {
                    "kind": "directive",
                    "justification": ""
                  }
                ]
              }
            ],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Directive,\n Renderer2,\n ElementRef,\n OnInit,\n OnDestroy,\n Output,\n EventEmitter,\n Inject,\n Input,\n NgZone,\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { Observable, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Directive({\n selector: '[mwlClick]',\n})\nexport class ClickDirective implements OnInit, OnDestroy {\n @Input() clickListenerDisabled = false;\n\n @Output('mwlClick') click = new EventEmitter<MouseEvent>(); // eslint-disable-line\n\n private destroy$ = new Subject<void>();\n\n constructor(\n private renderer: Renderer2,\n private elm: ElementRef<HTMLElement>,\n @Inject(DOCUMENT) private document\n ) {}\n\n ngOnInit(): void {\n if (!this.clickListenerDisabled) {\n this.listen()\n .pipe(takeUntil(this.destroy$))\n .subscribe((event) => {\n event.stopPropagation();\n this.click.emit(event);\n });\n }\n }\n\n ngOnDestroy(): void {\n this.destroy$.next();\n }\n\n private listen() {\n return new Observable<MouseEvent>((observer) => {\n return this.renderer.listen(this.elm.nativeElement, 'click', (event) => {\n observer.next(event);\n });\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/day/calendar-day-view/calendar-day-view.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 28,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 66,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        70,
                        799
                      ],
                      "text": ", ChangeDetectionStrategy,\n} from '@angular/core';\nimport { CalendarEvent } from 'calendar-utils';\nimport { Subject } from 'rxjs';\nimport { CalendarEventTimesChangedEvent } from '../../common/calendar-event-times-changed-event/calendar-event-times-changed-event.interface';\nimport { PlacementArray } from 'positioning';\nimport { CalendarWeekViewBeforeRenderEvent } from '../../week/calendar-week.module';\nimport { ResizeCursors } from 'angular-resizable-element';\n\nexport type CalendarDayViewBeforeRenderEvent =\n CalendarWeekViewBeforeRenderEvent;\n\n/**\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Shows all events on a given day. Example usage:\n angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```typescript\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json <mwl-calendar-day-view\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json [viewDate]=\"viewDate\"\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json [events]=\"events\">\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json </mwl-calendar-day-view>\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```\n */\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (34). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 30,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 65,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 71,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 71,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 77,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 77,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 82,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 82,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 87,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 87,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 92,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 92,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 97,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 97,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 102,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 102,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 107,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 107,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 112,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 112,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 117,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 117,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 122,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 122,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 127,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 127,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 132,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 132,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 137,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 137,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 142,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 142,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 147,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 147,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 153,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 153,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 158,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 158,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 163,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 163,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 168,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 168,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 173,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 173,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 178,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 178,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 183,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 183,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 188,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 188,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 194,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 194,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 201,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 201,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 208,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 208,
                "endColumn": 25,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        5638,
                        5638
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 216,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 216,
                "endColumn": 31,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        5820,
                        5820
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 224,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 224,
                "endColumn": 30,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        5998,
                        5998
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 231,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 231,
                "endColumn": 29,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        6306,
                        6306
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 32,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n Input,\n Output,\n EventEmitter,\n TemplateRef,\n} from '@angular/core';\nimport { CalendarEvent } from 'calendar-utils';\nimport { Subject } from 'rxjs';\nimport { CalendarEventTimesChangedEvent } from '../../common/calendar-event-times-changed-event/calendar-event-times-changed-event.interface';\nimport { PlacementArray } from 'positioning';\nimport { CalendarWeekViewBeforeRenderEvent } from '../../week/calendar-week.module';\nimport { ResizeCursors } from 'angular-resizable-element';\n\nexport type CalendarDayViewBeforeRenderEvent =\n CalendarWeekViewBeforeRenderEvent;\n\n/**\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Shows all events on a given day. Example usage:\n angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```typescript\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json <mwl-calendar-day-view\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json [viewDate]=\"viewDate\"\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json [events]=\"events\">\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json </mwl-calendar-day-view>\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```\n */\n@Component({\n selector: 'mwl-calendar-day-view',\n template: `\n <mwl-calendar-week-view\n class=\"cal-day-view\"\n [daysInWeek]=\"1\"\n [viewDate]=\"viewDate\"\n [events]=\"events\"\n [hourSegments]=\"hourSegments\"\n [hourDuration]=\"hourDuration\"\n [hourSegmentHeight]=\"hourSegmentHeight\"\n [minimumEventHeight]=\"minimumEventHeight\"\n [dayStartHour]=\"dayStartHour\"\n [dayStartMinute]=\"dayStartMinute\"\n [dayEndHour]=\"dayEndHour\"\n [dayEndMinute]=\"dayEndMinute\"\n [refresh]=\"refresh\"\n [locale]=\"locale\"\n [eventSnapSize]=\"eventSnapSize\"\n [tooltipPlacement]=\"tooltipPlacement\"\n [tooltipTemplate]=\"tooltipTemplate\"\n [tooltipAppendToBody]=\"tooltipAppendToBody\"\n [tooltipDelay]=\"tooltipDelay\"\n [resizeCursors]=\"resizeCursors\"\n [hourSegmentTemplate]=\"hourSegmentTemplate\"\n [eventTemplate]=\"eventTemplate\"\n [eventTitleTemplate]=\"eventTitleTemplate\"\n [eventActionsTemplate]=\"eventActionsTemplate\"\n [snapDraggedEvents]=\"snapDraggedEvents\"\n [allDayEventsLabelTemplate]=\"allDayEventsLabelTemplate\"\n [currentTimeMarkerTemplate]=\"currentTimeMarkerTemplate\"\n [validateEventTimesChanged]=\"validateEventTimesChanged\"\n (eventClicked)=\"eventClicked.emit($event)\"\n (hourSegmentClicked)=\"hourSegmentClicked.emit($event)\"\n (eventTimesChanged)=\"eventTimesChanged.emit($event)\"\n (beforeViewRender)=\"beforeViewRender.emit($event)\"\n ></mwl-calendar-week-view>\n `,\n})\nexport class CalendarDayViewComponent {\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The current view date\n */\n @Input() viewDate: Date;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json An array of events to display on view\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The schema is available here: https://github.com/mattlewis92/calendar-utils/blob/c51689985f59a271940e30bc4e2c4e1fee3fcb5c/src/calendarUtils.ts#L49-L63\n */\n @Input() events: CalendarEvent[] = [];\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The number of segments in an hour. Must divide equally into 60.\n */\n @Input() hourSegments: number = 2;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The height in pixels of each hour segment\n */\n @Input() hourSegmentHeight: number = 30;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The duration of each segment group in minutes\n */\n @Input() hourDuration: number;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The minimum height in pixels of each event\n */\n @Input() minimumEventHeight: number = 30;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The day start hours in 24 hour time. Must be 0-23\n */\n @Input() dayStartHour: number = 0;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The day start minutes. Must be 0-59\n */\n @Input() dayStartMinute: number = 0;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The day end hours in 24 hour time. Must be 0-23\n */\n @Input() dayEndHour: number = 23;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The day end minutes. Must be 0-59\n */\n @Input() dayEndMinute: number = 59;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json An observable that when emitted on will re-render the current view\n */\n @Input() refresh: Subject<any>;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The locale used to format dates\n */\n @Input() locale: string;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The grid size to snap resizing and dragging of events to\n */\n @Input() eventSnapSize: number;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The placement of the event tooltip\n */\n @Input() tooltipPlacement: PlacementArray = 'auto';\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json A custom template to use for the event tooltips\n */\n @Input() tooltipTemplate: TemplateRef<any>;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Whether to append tooltips to the body or next to the trigger element\n */\n @Input() tooltipAppendToBody: boolean = true;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The delay in milliseconds before the tooltip should be displayed. If not provided the tooltip\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json will be displayed immediately.\n */\n @Input() tooltipDelay: number | null = null;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json A custom template to use to replace the hour segment\n */\n @Input() hourSegmentTemplate: TemplateRef<any>;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json A custom template to use for day view events\n */\n @Input() eventTemplate: TemplateRef<any>;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json A custom template to use for event titles\n */\n @Input() eventTitleTemplate: TemplateRef<any>;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json A custom template to use for event actions\n */\n @Input() eventActionsTemplate: TemplateRef<any>;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Whether to snap events to a grid when dragging\n */\n @Input() snapDraggedEvents: boolean = true;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json A custom template to use for the all day events label text\n */\n @Input() allDayEventsLabelTemplate: TemplateRef<any>;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json A custom template to use for the current time marker\n */\n @Input() currentTimeMarkerTemplate: TemplateRef<any>;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Allow you to customise where events can be dragged and resized to.\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Return true to allow dragging and resizing to the new location, or false to prevent it\n */\n @Input() validateEventTimesChanged: (\n event: CalendarEventTimesChangedEvent\n ) => boolean;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Customise the document cursor when dragging to resize an event\n */\n @Input() resizeCursors: Partial<\n Pick<ResizeCursors, 'leftOrRight' | 'topOrBottom'>\n >;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Called when an event title is clicked\n */\n @Output() eventClicked = new EventEmitter<{\n event: CalendarEvent;\n sourceEvent: MouseEvent | KeyboardEvent;\n }>();\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Called when an hour segment is clicked\n */\n @Output() hourSegmentClicked = new EventEmitter<{\n date: Date;\n sourceEvent: MouseEvent;\n }>();\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Called when an event is resized or dragged and dropped\n */\n @Output() eventTimesChanged =\n new EventEmitter<CalendarEventTimesChangedEvent>();\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json An output that will be called before the view is rendered for the current day.\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json If you add the `cssClass` property to an hour grid segment it will add that class to the hour segment in the template\n */\n @Output() beforeViewRender =\n new EventEmitter<CalendarDayViewBeforeRenderEvent>();\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/month/calendar-month-view/calendar-month-cell/calendar-month-cell.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 12,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 105,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        70,
                        299
                      ],
                      "text": ", ChangeDetectionStrategy,\n} from '@angular/core';\nimport { MonthViewDay, CalendarEvent } from 'calendar-utils';\nimport { isWithinThreshold, trackByEventId } from '../../../common/util/util';\nimport { PlacementArray } from 'positioning';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (76). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 14,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 91,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/no-host-metadata-property",
                "message": "Definition for rule '@angular-eslint/no-host-metadata-property' was not found.",
                "line": 92,
                "column": 3,
                "endLine": 92,
                "endColumn": 72,
                "severity": 2,
                "nodeType": null
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 107,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 107,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 109,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 109,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 111,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 111,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 113,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 113,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 115,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 115,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 117,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 117,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 119,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 119,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 121,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 121,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 123,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 123,
                "endColumn": 25,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        4069,
                        4069
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 125,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 125,
                "endColumn": 27,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        4136,
                        4136
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 127,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 127,
                "endColumn": 25,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        4205,
                        4205
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 14,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n Input,\n Output,\n EventEmitter,\n TemplateRef,\n} from '@angular/core';\nimport { MonthViewDay, CalendarEvent } from 'calendar-utils';\nimport { isWithinThreshold, trackByEventId } from '../../../common/util/util';\nimport { PlacementArray } from 'positioning';\n\n@Component({\n selector: 'mwl-calendar-month-cell',\n template: `\n <ng-template\n #defaultTemplate\n let-day=\"day\"\n let-openDay=\"openDay\"\n let-locale=\"locale\"\n let-tooltipPlacement=\"tooltipPlacement\"\n let-highlightDay=\"highlightDay\"\n let-unhighlightDay=\"unhighlightDay\"\n let-eventClicked=\"eventClicked\"\n let-tooltipTemplate=\"tooltipTemplate\"\n let-tooltipAppendToBody=\"tooltipAppendToBody\"\n let-tooltipDelay=\"tooltipDelay\"\n let-trackByEventId=\"trackByEventId\"\n let-validateDrag=\"validateDrag\"\n >\n <div\n class=\"cal-cell-top\"\n [attr.aria-label]=\"\n { day: day, locale: locale } | calendarA11y : 'monthCell'\n \"\n >\n <span aria-hidden=\"true\">\n <span class=\"cal-day-badge\" *ngIf=\"day.badgeTotal > 0\">{{\n day.badgeTotal\n }}</span>\n <span class=\"cal-day-number\">{{\n day.date | calendarDate : 'monthViewDayNumber' : locale\n }}</span>\n </span>\n </div>\n <div class=\"cal-events\" *ngIf=\"day.events.length > 0\">\n <div\n class=\"cal-event\"\n *ngFor=\"let event of day.events; trackBy: trackByEventId\"\n [ngStyle]=\"{ backgroundColor: event.color?.primary }\"\n [ngClass]=\"event?.cssClass\"\n (mouseenter)=\"highlightDay.emit({ event: event })\"\n (mouseleave)=\"unhighlightDay.emit({ event: event })\"\n [mwlCalendarTooltip]=\"\n event.title | calendarEventTitle : 'monthTooltip' : event\n \"\n [tooltipPlacement]=\"tooltipPlacement\"\n [tooltipEvent]=\"event\"\n [tooltipTemplate]=\"tooltipTemplate\"\n [tooltipAppendToBody]=\"tooltipAppendToBody\"\n [tooltipDelay]=\"tooltipDelay\"\n mwlDraggable\n [class.cal-draggable]=\"event.draggable\"\n dragActiveClass=\"cal-drag-active\"\n [dropData]=\"{ event: event, draggedFrom: day }\"\n [dragAxis]=\"{ x: event.draggable, y: event.draggable }\"\n [validateDrag]=\"validateDrag\"\n [touchStartLongPress]=\"{ delay: 300, delta: 30 }\"\n (mwlClick)=\"eventClicked.emit({ event: event, sourceEvent: $event })\"\n [attr.aria-hidden]=\"{} | calendarA11y : 'hideMonthCellEvents'\"\n ></div>\n </div>\n </ng-template>\n <ng-template\n [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n [ngTemplateOutletContext]=\"{\n day: day,\n openDay: openDay,\n locale: locale,\n tooltipPlacement: tooltipPlacement,\n highlightDay: highlightDay,\n unhighlightDay: unhighlightDay,\n eventClicked: eventClicked,\n tooltipTemplate: tooltipTemplate,\n tooltipAppendToBody: tooltipAppendToBody,\n tooltipDelay: tooltipDelay,\n trackByEventId: trackByEventId,\n validateDrag: validateDrag\n }\"\n >\n </ng-template>\n `,\n // eslint-disable-next-line @angular-eslint/no-host-metadata-property\n host: {\n class: 'cal-cell cal-day-cell',\n '[class.cal-past]': 'day.isPast',\n '[class.cal-today]': 'day.isToday',\n '[class.cal-future]': 'day.isFuture',\n '[class.cal-weekend]': 'day.isWeekend',\n '[class.cal-in-month]': 'day.inMonth',\n '[class.cal-out-month]': '!day.inMonth',\n '[class.cal-has-events]': 'day.events.length > 0',\n '[class.cal-open]': 'day === openDay',\n '[class.cal-event-highlight]': '!!day.backgroundColor',\n },\n})\nexport class CalendarMonthCellComponent {\n @Input() day: MonthViewDay;\n\n @Input() openDay: MonthViewDay;\n\n @Input() locale: string;\n\n @Input() tooltipPlacement: PlacementArray;\n\n @Input() tooltipAppendToBody: boolean;\n\n @Input() customTemplate: TemplateRef<any>;\n\n @Input() tooltipTemplate: TemplateRef<any>;\n\n @Input() tooltipDelay: number | null;\n\n @Output() highlightDay: EventEmitter<any> = new EventEmitter();\n\n @Output() unhighlightDay: EventEmitter<any> = new EventEmitter();\n\n @Output() eventClicked = new EventEmitter<{\n event: CalendarEvent;\n sourceEvent: MouseEvent;\n }>();\n\n trackByEventId = trackByEventId;\n\n validateDrag = isWithinThreshold;\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/month/calendar-month-view/calendar-month-view-header/calendar-month-view-header.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 11,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 52,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        70,
                        224
                      ],
                      "text": ", ChangeDetectionStrategy,\n} from '@angular/core';\nimport { WeekDay } from 'calendar-utils';\nimport { trackByWeekDayHeaderDate } from '../../../common/util/util';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (37). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 13,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 51,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 54,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 54,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 56,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 56,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 58,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 58,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 60,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 60,
                "endColumn": 32,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        1573,
                        1573
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 6,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n Input,\n TemplateRef,\n EventEmitter,\n Output,\n} from '@angular/core';\nimport { WeekDay } from 'calendar-utils';\nimport { trackByWeekDayHeaderDate } from '../../../common/util/util';\n\n@Component({\n selector: 'mwl-calendar-month-view-header',\n template: `\n <ng-template\n #defaultTemplate\n let-days=\"days\"\n let-locale=\"locale\"\n let-trackByWeekDayHeaderDate=\"trackByWeekDayHeaderDate\"\n >\n <div class=\"cal-cell-row cal-header\" role=\"row\">\n <div\n class=\"cal-cell\"\n *ngFor=\"let day of days; trackBy: trackByWeekDayHeaderDate\"\n [class.cal-past]=\"day.isPast\"\n [class.cal-today]=\"day.isToday\"\n [class.cal-future]=\"day.isFuture\"\n [class.cal-weekend]=\"day.isWeekend\"\n (click)=\"\n columnHeaderClicked.emit({\n isoDayNumber: day.day,\n sourceEvent: $event\n })\n \"\n [ngClass]=\"day.cssClass\"\n tabindex=\"0\"\n role=\"columnheader\"\n >\n {{ day.date | calendarDate : 'monthViewColumnHeader' : locale }}\n </div>\n </div>\n </ng-template>\n <ng-template\n [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n [ngTemplateOutletContext]=\"{\n days: days,\n locale: locale,\n trackByWeekDayHeaderDate: trackByWeekDayHeaderDate\n }\"\n >\n </ng-template>\n `,\n})\nexport class CalendarMonthViewHeaderComponent {\n @Input() days: WeekDay[];\n\n @Input() locale: string;\n\n @Input() customTemplate: TemplateRef<any>;\n\n @Output() columnHeaderClicked = new EventEmitter<{\n isoDayNumber: number;\n sourceEvent: MouseEvent;\n }>();\n\n trackByWeekDayHeaderDate = trackByWeekDayHeaderDate;\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/month/calendar-month-view/calendar-month-view.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 54,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 142,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        150,
                        1297
                      ],
                      "text": ", ChangeDetectionStrategy,\n} from '@angular/core';\nimport {\n CalendarEvent,\n WeekDay,\n MonthView,\n MonthViewDay,\n ViewPeriod,\n} from 'calendar-utils';\nimport { Subject, Subscription } from 'rxjs';\nimport {\n CalendarEventTimesChangedEvent,\n CalendarEventTimesChangedEventType,\n} from '../../common/calendar-event-times-changed-event/calendar-event-times-changed-event.interface';\nimport { CalendarUtils } from '../../common/calendar-utils/calendar-utils.provider';\nimport { validateEvents } from '../../common/util/util';\nimport { DateAdapter } from '../../../date-adapters/date-adapter';\nimport { PlacementArray } from 'positioning';\n\nexport interface CalendarMonthViewBeforeRenderEvent {\n header: WeekDay[];\n body: MonthViewDay[];\n period: ViewPeriod;\n}\n\nexport interface CalendarMonthViewEventTimesChangedEvent<\n EventMetaType = any,\n DayMetaType = any\n> extends CalendarEventTimesChangedEvent<EventMetaType> {\n day: MonthViewDay<DayMetaType>;\n}\n\n/**\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Shows all events on a given month. Example usage:\n angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```typescript\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json <mwl-calendar-month-view\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json [viewDate]=\"viewDate\"\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json [events]=\"events\">\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json </mwl-calendar-month-view>\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```\n */\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (84). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 56,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 141,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 149,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 149,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 155,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 155,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 160,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 160,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 165,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 165,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 170,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 170,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 175,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 175,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 180,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 180,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 185,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 185,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 190,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 190,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 195,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 195,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 201,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 201,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 215,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 215,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 220,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 220,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 225,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 225,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 230,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 230,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 235,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 235,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 240,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 240,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 245,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 245,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 251,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 251,
                "endColumn": 29,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        7324,
                        7324
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 257,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 257,
                "endColumn": 23,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        7469,
                        7469
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 265,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 265,
                "endColumn": 25,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        7646,
                        7646
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 273,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 273,
                "endColumn": 32,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        7855,
                        7855
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 282,
                "column": 3,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 282,
                "endColumn": 20,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        8051,
                        8051
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/sort-lifecycle-methods",
                "severity": 2,
                "message": "Lifecycle Methods are not declared in order of execution",
                "line": 351,
                "column": 3,
                "nodeType": "Identifier",
                "messageId": "lifecycleMethodsNotSorted",
                "endLine": 351,
                "endColumn": 14
              }
            ],
            "suppressedMessages": [],
            "errorCount": 26,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n OnChanges,\n Input,\n Output,\n EventEmitter,\n ChangeDetectorRef,\n OnInit,\n OnDestroy,\n LOCALE_ID,\n Inject,\n TemplateRef,\n} from '@angular/core';\nimport {\n CalendarEvent,\n WeekDay,\n MonthView,\n MonthViewDay,\n ViewPeriod,\n} from 'calendar-utils';\nimport { Subject, Subscription } from 'rxjs';\nimport {\n CalendarEventTimesChangedEvent,\n CalendarEventTimesChangedEventType,\n} from '../../common/calendar-event-times-changed-event/calendar-event-times-changed-event.interface';\nimport { CalendarUtils } from '../../common/calendar-utils/calendar-utils.provider';\nimport { validateEvents } from '../../common/util/util';\nimport { DateAdapter } from '../../../date-adapters/date-adapter';\nimport { PlacementArray } from 'positioning';\n\nexport interface CalendarMonthViewBeforeRenderEvent {\n header: WeekDay[];\n body: MonthViewDay[];\n period: ViewPeriod;\n}\n\nexport interface CalendarMonthViewEventTimesChangedEvent<\n EventMetaType = any,\n DayMetaType = any\n> extends CalendarEventTimesChangedEvent<EventMetaType> {\n day: MonthViewDay<DayMetaType>;\n}\n\n/**\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Shows all events on a given month. Example usage:\n angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```typescript\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json <mwl-calendar-month-view\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json [viewDate]=\"viewDate\"\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json [events]=\"events\">\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json </mwl-calendar-month-view>\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```\n */\n@Component({\n selector: 'mwl-calendar-month-view',\n template: `\n <div class=\"cal-month-view\" role=\"grid\">\n <mwl-calendar-month-view-header\n [days]=\"columnHeaders\"\n [locale]=\"locale\"\n (columnHeaderClicked)=\"columnHeaderClicked.emit($event)\"\n [customTemplate]=\"headerTemplate\"\n >\n </mwl-calendar-month-view-header>\n <div class=\"cal-days\">\n <div\n *ngFor=\"let rowIndex of view.rowOffsets; trackBy: trackByRowOffset\"\n >\n <div role=\"row\" class=\"cal-cell-row\">\n <mwl-calendar-month-cell\n role=\"gridcell\"\n *ngFor=\"\n let day of view.days\n | slice : rowIndex : rowIndex + view.totalDaysVisibleInWeek;\n trackBy: trackByDate\n \"\n [ngClass]=\"day?.cssClass\"\n [day]=\"day\"\n [openDay]=\"openDay\"\n [locale]=\"locale\"\n [tooltipPlacement]=\"tooltipPlacement\"\n [tooltipAppendToBody]=\"tooltipAppendToBody\"\n [tooltipTemplate]=\"tooltipTemplate\"\n [tooltipDelay]=\"tooltipDelay\"\n [customTemplate]=\"cellTemplate\"\n [ngStyle]=\"{ backgroundColor: day.backgroundColor }\"\n (mwlClick)=\"dayClicked.emit({ day: day, sourceEvent: $event })\"\n [clickListenerDisabled]=\"dayClicked.observers.length === 0\"\n (mwlKeydownEnter)=\"\n dayClicked.emit({ day: day, sourceEvent: $event })\n \"\n (highlightDay)=\"toggleDayHighlight($event.event, true)\"\n (unhighlightDay)=\"toggleDayHighlight($event.event, false)\"\n mwlDroppable\n dragOverClass=\"cal-drag-over\"\n (drop)=\"\n eventDropped(\n day,\n $event.dropData.event,\n $event.dropData.draggedFrom\n )\n \"\n (eventClicked)=\"\n eventClicked.emit({\n event: $event.event,\n sourceEvent: $event.sourceEvent\n })\n \"\n [attr.tabindex]=\"{} | calendarA11y : 'monthCellTabIndex'\"\n >\n </mwl-calendar-month-cell>\n </div>\n <mwl-calendar-open-day-events\n [locale]=\"locale\"\n [isOpen]=\"openRowIndex === rowIndex\"\n [events]=\"openDay?.events\"\n [date]=\"openDay?.date\"\n [customTemplate]=\"openDayEventsTemplate\"\n [eventTitleTemplate]=\"eventTitleTemplate\"\n [eventActionsTemplate]=\"eventActionsTemplate\"\n (eventClicked)=\"\n eventClicked.emit({\n event: $event.event,\n sourceEvent: $event.sourceEvent\n })\n \"\n mwlDroppable\n dragOverClass=\"cal-drag-over\"\n (drop)=\"\n eventDropped(\n openDay,\n $event.dropData.event,\n $event.dropData.draggedFrom\n )\n \"\n >\n </mwl-calendar-open-day-events>\n </div>\n </div>\n </div>\n `,\n})\nexport class CalendarMonthViewComponent\n implements OnChanges, OnInit, OnDestroy\n{\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The current view date\n */\n @Input() viewDate: Date;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json An array of events to display on view.\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The schema is available here: https://github.com/mattlewis92/calendar-utils/blob/c51689985f59a271940e30bc4e2c4e1fee3fcb5c/src/calendarUtils.ts#L49-L63\n */\n @Input() events: CalendarEvent[] = [];\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json An array of day indexes (0 = sunday, 1 = monday etc) that will be hidden on the view\n */\n @Input() excludeDays: number[] = [];\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Whether the events list for the day of the `viewDate` option is visible or not\n */\n @Input() activeDayIsOpen: boolean = false;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json If set will be used to determine the day that should be open. If not set, the `viewDate` is used\n */\n @Input() activeDay: Date;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json An observable that when emitted on will re-render the current view\n */\n @Input() refresh: Subject<any>;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The locale used to format dates\n */\n @Input() locale: string;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The placement of the event tooltip\n */\n @Input() tooltipPlacement: PlacementArray = 'auto';\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json A custom template to use for the event tooltips\n */\n @Input() tooltipTemplate: TemplateRef<any>;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Whether to append tooltips to the body or next to the trigger element\n */\n @Input() tooltipAppendToBody: boolean = true;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The delay in milliseconds before the tooltip should be displayed. If not provided the tooltip\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json will be displayed immediately.\n */\n @Input() tooltipDelay: number | null = null;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The start number of the week.\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json If using the moment date adapter this option won't do anything and you'll need to set it globally like so:\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json moment.updateLocale('en', {\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json week: {\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json dow: 1, // set start of week to monday instead\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json doy: 0,\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json },\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json });\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```\n */\n @Input() weekStartsOn: number;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json A custom template to use to replace the header\n */\n @Input() headerTemplate: TemplateRef<any>;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json A custom template to use to replace the day cell\n */\n @Input() cellTemplate: TemplateRef<any>;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json A custom template to use for the slide down box of events for the active day\n */\n @Input() openDayEventsTemplate: TemplateRef<any>;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json A custom template to use for event titles\n */\n @Input() eventTitleTemplate: TemplateRef<any>;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json A custom template to use for event actions\n */\n @Input() eventActionsTemplate: TemplateRef<any>;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json An array of day indexes (0 = sunday, 1 = monday etc) that indicate which days are weekends\n */\n @Input() weekendDays: number[];\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json An output that will be called before the view is rendered for the current month.\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json If you add the `cssClass` property to a day in the body it will add that class to the cell element in the template\n */\n @Output() beforeViewRender =\n new EventEmitter<CalendarMonthViewBeforeRenderEvent>();\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Called when the day cell is clicked\n */\n @Output() dayClicked = new EventEmitter<{\n day: MonthViewDay;\n sourceEvent: MouseEvent | KeyboardEvent;\n }>();\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Called when the event title is clicked\n */\n @Output() eventClicked = new EventEmitter<{\n event: CalendarEvent;\n sourceEvent: MouseEvent | KeyboardEvent;\n }>();\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Called when a header week day is clicked. Returns ISO day number.\n */\n @Output() columnHeaderClicked = new EventEmitter<{\n isoDayNumber: number;\n sourceEvent: MouseEvent | KeyboardEvent;\n }>();\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Called when an event is dragged and dropped\n */\n @Output()\n eventTimesChanged =\n new EventEmitter<CalendarMonthViewEventTimesChangedEvent>();\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n columnHeaders: WeekDay[];\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n view: MonthView;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n openRowIndex: number;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n openDay: MonthViewDay;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n refreshSubscription: Subscription;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n constructor(\n protected cdr: ChangeDetectorRef,\n protected utils: CalendarUtils,\n @Inject(LOCALE_ID) locale: string,\n protected dateAdapter: DateAdapter\n ) {\n this.locale = locale;\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n trackByRowOffset = (index: number, offset: number) =>\n this.view.days\n .slice(offset, this.view.totalDaysVisibleInWeek)\n .map((day) => day.date.toISOString())\n .join('-');\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n trackByDate = (index: number, day: MonthViewDay) => day.date.toISOString();\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n ngOnInit(): void {\n if (this.refresh) {\n this.refreshSubscription = this.refresh.subscribe(() => {\n this.refreshAll();\n this.cdr.markForCheck();\n });\n }\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n ngOnChanges(changes: any): void {\n const refreshHeader =\n changes.viewDate || changes.excludeDays || changes.weekendDays;\n const refreshBody =\n changes.viewDate ||\n changes.events ||\n changes.excludeDays ||\n changes.weekendDays;\n\n if (refreshHeader) {\n this.refreshHeader();\n }\n\n if (changes.events) {\n validateEvents(this.events);\n }\n\n if (refreshBody) {\n this.refreshBody();\n }\n\n if (refreshHeader || refreshBody) {\n this.emitBeforeViewRender();\n }\n\n if (\n changes.activeDayIsOpen ||\n changes.viewDate ||\n changes.events ||\n changes.excludeDays ||\n changes.activeDay\n ) {\n this.checkActiveDayIsOpen();\n }\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n ngOnDestroy(): void {\n if (this.refreshSubscription) {\n this.refreshSubscription.unsubscribe();\n }\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n toggleDayHighlight(event: CalendarEvent, isHighlighted: boolean): void {\n this.view.days.forEach((day) => {\n if (isHighlighted && day.events.indexOf(event) > -1) {\n day.backgroundColor =\n (event.color && event.color.secondary) || '#D1E8FF';\n } else {\n delete day.backgroundColor;\n }\n });\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n eventDropped(\n droppedOn: MonthViewDay,\n event: CalendarEvent,\n draggedFrom?: MonthViewDay\n ): void {\n if (droppedOn !== draggedFrom) {\n const year: number = this.dateAdapter.getYear(droppedOn.date);\n const month: number = this.dateAdapter.getMonth(droppedOn.date);\n const date: number = this.dateAdapter.getDate(droppedOn.date);\n const newStart: Date = this.dateAdapter.setDate(\n this.dateAdapter.setMonth(\n this.dateAdapter.setYear(event.start, year),\n month\n ),\n date\n );\n let newEnd: Date;\n if (event.end) {\n const secondsDiff: number = this.dateAdapter.differenceInSeconds(\n newStart,\n event.start\n );\n newEnd = this.dateAdapter.addSeconds(event.end, secondsDiff);\n }\n this.eventTimesChanged.emit({\n event,\n newStart,\n newEnd,\n day: droppedOn,\n type: CalendarEventTimesChangedEventType.Drop,\n });\n }\n }\n\n protected refreshHeader(): void {\n this.columnHeaders = this.utils.getWeekViewHeader({\n viewDate: this.viewDate,\n weekStartsOn: this.weekStartsOn,\n excluded: this.excludeDays,\n weekendDays: this.weekendDays,\n });\n }\n\n protected refreshBody(): void {\n this.view = this.utils.getMonthView({\n events: this.events,\n viewDate: this.viewDate,\n weekStartsOn: this.weekStartsOn,\n excluded: this.excludeDays,\n weekendDays: this.weekendDays,\n });\n }\n\n protected checkActiveDayIsOpen(): void {\n if (this.activeDayIsOpen === true) {\n const activeDay = this.activeDay || this.viewDate;\n this.openDay = this.view.days.find((day) =>\n this.dateAdapter.isSameDay(day.date, activeDay)\n );\n const index: number = this.view.days.indexOf(this.openDay);\n this.openRowIndex =\n Math.floor(index / this.view.totalDaysVisibleInWeek) angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json this.view.totalDaysVisibleInWeek;\n } else {\n this.openRowIndex = null;\n this.openDay = null;\n }\n }\n\n protected refreshAll(): void {\n this.refreshHeader();\n this.refreshBody();\n this.emitBeforeViewRender();\n this.checkActiveDayIsOpen();\n }\n\n protected emitBeforeViewRender(): void {\n if (this.columnHeaders && this.view) {\n this.beforeViewRender.emit({\n header: this.columnHeaders,\n body: this.view.days,\n period: this.view.period,\n });\n }\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/month/calendar-month-view/calendar-open-day-events/calendar-open-day-events.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 42,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 130,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        70,
                        834
                      ],
                      "text": ", ChangeDetectionStrategy,\n} from '@angular/core';\nimport {\n trigger,\n style,\n state,\n transition,\n animate,\n AnimationTriggerMetadata,\n} from '@angular/animations';\nimport { CalendarEvent } from 'calendar-utils';\nimport { isWithinThreshold, trackByEventId } from '../../../common/util/util';\n\nexport const collapseAnimation: AnimationTriggerMetadata = trigger('collapse', [\n state(\n 'void',\n style({\n height: 0,\n overflow: 'hidden',\n 'padding-top': 0,\n 'padding-bottom': 0,\n })\n ),\n state(\n '*',\n style({\n height: '*',\n overflow: 'hidden',\n 'padding-top': '*',\n 'padding-bottom': '*',\n })\n ),\n transition('* => void', animate('150ms ease-out')),\n transition('void => *', animate('150ms ease-in')),\n]);\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (83). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 44,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 128,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 132,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 132,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 134,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 134,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 136,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 136,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 138,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 138,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 140,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 140,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 142,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 142,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 144,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 144,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 146,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 146,
                "endColumn": 25,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        3760,
                        3760
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 10,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n Input,\n Output,\n EventEmitter,\n TemplateRef,\n} from '@angular/core';\nimport {\n trigger,\n style,\n state,\n transition,\n animate,\n AnimationTriggerMetadata,\n} from '@angular/animations';\nimport { CalendarEvent } from 'calendar-utils';\nimport { isWithinThreshold, trackByEventId } from '../../../common/util/util';\n\nexport const collapseAnimation: AnimationTriggerMetadata = trigger('collapse', [\n state(\n 'void',\n style({\n height: 0,\n overflow: 'hidden',\n 'padding-top': 0,\n 'padding-bottom': 0,\n })\n ),\n state(\n '*',\n style({\n height: '*',\n overflow: 'hidden',\n 'padding-top': '*',\n 'padding-bottom': '*',\n })\n ),\n transition('* => void', animate('150ms ease-out')),\n transition('void => *', animate('150ms ease-in')),\n]);\n\n@Component({\n selector: 'mwl-calendar-open-day-events',\n template: `\n <ng-template\n #defaultTemplate\n let-events=\"events\"\n let-eventClicked=\"eventClicked\"\n let-isOpen=\"isOpen\"\n let-trackByEventId=\"trackByEventId\"\n let-validateDrag=\"validateDrag\"\n >\n <div\n class=\"cal-open-day-events\"\n [@collapse]\n *ngIf=\"isOpen\"\n role=\"application\"\n >\n <span\n tabindex=\"-1\"\n role=\"alert\"\n [attr.aria-label]=\"\n { date: date, locale: locale } | calendarA11y : 'openDayEventsAlert'\n \"\n ></span>\n <span\n tabindex=\"0\"\n role=\"landmark\"\n [attr.aria-label]=\"\n { date: date, locale: locale }\n | calendarA11y : 'openDayEventsLandmark'\n \"\n ></span>\n <div\n *ngFor=\"let event of events; trackBy: trackByEventId\"\n [ngClass]=\"event?.cssClass\"\n mwlDraggable\n [class.cal-draggable]=\"event.draggable\"\n dragActiveClass=\"cal-drag-active\"\n [dropData]=\"{ event: event }\"\n [dragAxis]=\"{ x: event.draggable, y: event.draggable }\"\n [validateDrag]=\"validateDrag\"\n [touchStartLongPress]=\"{ delay: 300, delta: 30 }\"\n >\n <span\n class=\"cal-event\"\n [ngStyle]=\"{ backgroundColor: event.color?.primary }\"\n >\n </span>\n &ngsp;\n <mwl-calendar-event-title\n [event]=\"event\"\n [customTemplate]=\"eventTitleTemplate\"\n view=\"month\"\n (mwlClick)=\"\n eventClicked.emit({ event: event, sourceEvent: $event })\n \"\n (mwlKeydownEnter)=\"\n eventClicked.emit({ event: event, sourceEvent: $event })\n \"\n tabindex=\"0\"\n [attr.aria-label]=\"\n { event: event, locale: locale }\n | calendarA11y : 'eventDescription'\n \"\n >\n </mwl-calendar-event-title>\n &ngsp;\n <mwl-calendar-event-actions\n [event]=\"event\"\n [customTemplate]=\"eventActionsTemplate\"\n >\n </mwl-calendar-event-actions>\n </div>\n </div>\n </ng-template>\n <ng-template\n [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n [ngTemplateOutletContext]=\"{\n events: events,\n eventClicked: eventClicked,\n isOpen: isOpen,\n trackByEventId: trackByEventId,\n validateDrag: validateDrag\n }\"\n >\n </ng-template>\n `,\n animations: [collapseAnimation],\n})\nexport class CalendarOpenDayEventsComponent {\n @Input() locale: string;\n\n @Input() isOpen: boolean = false;\n\n @Input() events: CalendarEvent[];\n\n @Input() customTemplate: TemplateRef<any>;\n\n @Input() eventTitleTemplate: TemplateRef<any>;\n\n @Input() eventActionsTemplate: TemplateRef<any>;\n\n @Input() date: Date;\n\n @Output() eventClicked = new EventEmitter<{\n event: CalendarEvent;\n sourceEvent: MouseEvent | KeyboardEvent;\n }>();\n\n trackByEventId = trackByEventId;\n\n validateDrag = isWithinThreshold;\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/week/calendar-week-view/calendar-week-view-current-time-marker/calendar-week-view-current-time-marker.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 13,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 46,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        84,
                        331
                      ],
                      "text": ", ChangeDetectionStrategy,\n} from '@angular/core';\nimport { BehaviorSubject, interval, Observable } from 'rxjs';\nimport { switchMapTo, startWith, map, switchMap } from 'rxjs/operators';\nimport { DateAdapter } from '../../../../date-adapters/date-adapter';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (29). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 15,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 45,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 48,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 48,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 50,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 50,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 52,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 52,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 54,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 54,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 56,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 56,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 58,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 58,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 60,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 60,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 62,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 62,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 64,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 64,
                "endColumn": 11
              }
            ],
            "suppressedMessages": [],
            "errorCount": 11,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n Input,\n NgZone,\n OnChanges,\n SimpleChanges,\n TemplateRef,\n} from '@angular/core';\nimport { BehaviorSubject, interval, Observable } from 'rxjs';\nimport { switchMapTo, startWith, map, switchMap } from 'rxjs/operators';\nimport { DateAdapter } from '../../../../date-adapters/date-adapter';\n\n@Component({\n selector: 'mwl-calendar-week-view-current-time-marker',\n template: `\n <ng-template\n #defaultTemplate\n let-columnDate=\"columnDate\"\n let-dayStartHour=\"dayStartHour\"\n let-dayStartMinute=\"dayStartMinute\"\n let-dayEndHour=\"dayEndHour\"\n let-dayEndMinute=\"dayEndMinute\"\n let-isVisible=\"isVisible\"\n let-topPx=\"topPx\"\n >\n <div\n class=\"cal-current-time-marker\"\n *ngIf=\"isVisible\"\n [style.top.px]=\"topPx\"\n ></div>\n </ng-template>\n <ng-template\n [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n [ngTemplateOutletContext]=\"{\n columnDate: columnDate,\n dayStartHour: dayStartHour,\n dayStartMinute: dayStartMinute,\n dayEndHour: dayEndHour,\n dayEndMinute: dayEndMinute,\n isVisible: (marker$ | async)?.isVisible,\n topPx: (marker$ | async)?.top\n }\"\n >\n </ng-template>\n `,\n})\nexport class CalendarWeekViewCurrentTimeMarkerComponent implements OnChanges {\n @Input() columnDate: Date;\n\n @Input() dayStartHour: number;\n\n @Input() dayStartMinute: number;\n\n @Input() dayEndHour: number;\n\n @Input() dayEndMinute: number;\n\n @Input() hourSegments: number;\n\n @Input() hourDuration: number;\n\n @Input() hourSegmentHeight: number;\n\n @Input() customTemplate: TemplateRef<any>;\n\n columnDate$ = new BehaviorSubject<Date>(undefined);\n\n marker$: Observable<{\n isVisible: boolean;\n top: number;\n }> = this.zone.onStable.pipe(\n switchMap(() => interval(60 angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json 1000)),\n startWith(0),\n switchMapTo(this.columnDate$),\n map((columnDate) => {\n const startOfDay = this.dateAdapter.setMinutes(\n this.dateAdapter.setHours(columnDate, this.dayStartHour),\n this.dayStartMinute\n );\n const endOfDay = this.dateAdapter.setMinutes(\n this.dateAdapter.setHours(columnDate, this.dayEndHour),\n this.dayEndMinute\n );\n const hourHeightModifier =\n (this.hourSegments angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json this.hourSegmentHeight) /\n (this.hourDuration || 60);\n const now = new Date();\n return {\n isVisible:\n this.dateAdapter.isSameDay(columnDate, now) &&\n now >= startOfDay &&\n now <= endOfDay,\n top:\n this.dateAdapter.differenceInMinutes(now, startOfDay) angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json hourHeightModifier,\n };\n })\n );\n\n constructor(private dateAdapter: DateAdapter, private zone: NgZone) {}\n\n ngOnChanges(changes: SimpleChanges) {\n if (changes.columnDate) {\n this.columnDate$.next(changes.columnDate.currentValue);\n }\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/week/calendar-week-view/calendar-week-view-event/calendar-week-view-event.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 15,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 89,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        70,
                        258
                      ],
                      "text": ", ChangeDetectionStrategy,\n} from '@angular/core';\nimport {\n WeekViewAllDayEvent,\n WeekViewTimeEvent,\n WeekViewHourColumn,\n} from 'calendar-utils';\nimport { PlacementArray } from 'positioning';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (70). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 17,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 88,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 91,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 91,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 93,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 93,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 95,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 95,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 97,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 97,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 99,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 99,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 101,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 101,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 103,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 103,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 105,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 105,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 107,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 107,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 109,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 109,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 111,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 111,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 113,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 113,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 115,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 115,
                "endColumn": 25,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        3387,
                        3387
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 15,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n Input,\n Output,\n EventEmitter,\n TemplateRef,\n} from '@angular/core';\nimport {\n WeekViewAllDayEvent,\n WeekViewTimeEvent,\n WeekViewHourColumn,\n} from 'calendar-utils';\nimport { PlacementArray } from 'positioning';\n\n@Component({\n selector: 'mwl-calendar-week-view-event',\n template: `\n <ng-template\n #defaultTemplate\n let-weekEvent=\"weekEvent\"\n let-tooltipPlacement=\"tooltipPlacement\"\n let-eventClicked=\"eventClicked\"\n let-tooltipTemplate=\"tooltipTemplate\"\n let-tooltipAppendToBody=\"tooltipAppendToBody\"\n let-tooltipDisabled=\"tooltipDisabled\"\n let-tooltipDelay=\"tooltipDelay\"\n let-column=\"column\"\n let-daysInWeek=\"daysInWeek\"\n >\n <div\n class=\"cal-event\"\n [ngStyle]=\"{\n color: weekEvent.event.color?.secondaryText,\n backgroundColor: weekEvent.event.color?.secondary,\n borderColor: weekEvent.event.color?.primary\n }\"\n [mwlCalendarTooltip]=\"\n !tooltipDisabled\n ? (weekEvent.event.title\n | calendarEventTitle\n : (daysInWeek === 1 ? 'dayTooltip' : 'weekTooltip')\n : weekEvent.tempEvent || weekEvent.event)\n : ''\n \"\n [tooltipPlacement]=\"tooltipPlacement\"\n [tooltipEvent]=\"weekEvent.tempEvent || weekEvent.event\"\n [tooltipTemplate]=\"tooltipTemplate\"\n [tooltipAppendToBody]=\"tooltipAppendToBody\"\n [tooltipDelay]=\"tooltipDelay\"\n (mwlClick)=\"eventClicked.emit({ sourceEvent: $event })\"\n (mwlKeydownEnter)=\"eventClicked.emit({ sourceEvent: $event })\"\n tabindex=\"0\"\n role=\"application\"\n [attr.aria-label]=\"\n { event: weekEvent.tempEvent || weekEvent.event, locale: locale }\n | calendarA11y : 'eventDescription'\n \"\n >\n <mwl-calendar-event-actions\n [event]=\"weekEvent.tempEvent || weekEvent.event\"\n [customTemplate]=\"eventActionsTemplate\"\n >\n </mwl-calendar-event-actions>\n &ngsp;\n <mwl-calendar-event-title\n [event]=\"weekEvent.tempEvent || weekEvent.event\"\n [customTemplate]=\"eventTitleTemplate\"\n [view]=\"daysInWeek === 1 ? 'day' : 'week'\"\n >\n </mwl-calendar-event-title>\n </div>\n </ng-template>\n <ng-template\n [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n [ngTemplateOutletContext]=\"{\n weekEvent: weekEvent,\n tooltipPlacement: tooltipPlacement,\n eventClicked: eventClicked,\n tooltipTemplate: tooltipTemplate,\n tooltipAppendToBody: tooltipAppendToBody,\n tooltipDisabled: tooltipDisabled,\n tooltipDelay: tooltipDelay,\n column: column,\n daysInWeek: daysInWeek\n }\"\n >\n </ng-template>\n `,\n})\nexport class CalendarWeekViewEventComponent {\n @Input() locale: string;\n\n @Input() weekEvent: WeekViewAllDayEvent | WeekViewTimeEvent;\n\n @Input() tooltipPlacement: PlacementArray;\n\n @Input() tooltipAppendToBody: boolean;\n\n @Input() tooltipDisabled: boolean;\n\n @Input() tooltipDelay: number | null;\n\n @Input() customTemplate: TemplateRef<any>;\n\n @Input() eventTitleTemplate: TemplateRef<any>;\n\n @Input() eventActionsTemplate: TemplateRef<any>;\n\n @Input() tooltipTemplate: TemplateRef<any>;\n\n @Input() column: WeekViewHourColumn;\n\n @Input() daysInWeek: number;\n\n @Output() eventClicked = new EventEmitter<{\n sourceEvent: MouseEvent | KeyboardEvent;\n }>();\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/week/calendar-week-view/calendar-week-view-header/calendar-week-view-header.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 11,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 66,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        70,
                        239
                      ],
                      "text": ", ChangeDetectionStrategy,\n} from '@angular/core';\nimport { CalendarEvent, WeekDay } from 'calendar-utils';\nimport { trackByWeekDayHeaderDate } from '../../../common/util/util';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (51). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 13,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 65,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 68,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 68,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 70,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 70,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 72,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 72,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 74,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 74,
                "endColumn": 29,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        2141,
                        2141
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 79,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 79,
                "endColumn": 25,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        2247,
                        2247
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 84,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 84,
                "endColumn": 22,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        2348,
                        2348
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 8,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n Input,\n Output,\n EventEmitter,\n TemplateRef,\n} from '@angular/core';\nimport { CalendarEvent, WeekDay } from 'calendar-utils';\nimport { trackByWeekDayHeaderDate } from '../../../common/util/util';\n\n@Component({\n selector: 'mwl-calendar-week-view-header',\n template: `\n <ng-template\n #defaultTemplate\n let-days=\"days\"\n let-locale=\"locale\"\n let-dayHeaderClicked=\"dayHeaderClicked\"\n let-eventDropped=\"eventDropped\"\n let-trackByWeekDayHeaderDate=\"trackByWeekDayHeaderDate\"\n let-dragEnter=\"dragEnter\"\n >\n <div class=\"cal-day-headers\" role=\"row\">\n <div\n class=\"cal-header\"\n *ngFor=\"let day of days; trackBy: trackByWeekDayHeaderDate\"\n [class.cal-past]=\"day.isPast\"\n [class.cal-today]=\"day.isToday\"\n [class.cal-future]=\"day.isFuture\"\n [class.cal-weekend]=\"day.isWeekend\"\n [ngClass]=\"day.cssClass\"\n (mwlClick)=\"dayHeaderClicked.emit({ day: day, sourceEvent: $event })\"\n mwlDroppable\n dragOverClass=\"cal-drag-over\"\n (drop)=\"\n eventDropped.emit({\n event: $event.dropData.event,\n newStart: day.date\n })\n \"\n (dragEnter)=\"dragEnter.emit({ date: day.date })\"\n tabindex=\"0\"\n role=\"columnheader\"\n >\n <b>{{ day.date | calendarDate : 'weekViewColumnHeader' : locale }}</b\n ><br />\n <span>{{\n day.date | calendarDate : 'weekViewColumnSubHeader' : locale\n }}</span>\n </div>\n </div>\n </ng-template>\n <ng-template\n [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n [ngTemplateOutletContext]=\"{\n days: days,\n locale: locale,\n dayHeaderClicked: dayHeaderClicked,\n eventDropped: eventDropped,\n dragEnter: dragEnter,\n trackByWeekDayHeaderDate: trackByWeekDayHeaderDate\n }\"\n >\n </ng-template>\n `,\n})\nexport class CalendarWeekViewHeaderComponent {\n @Input() days: WeekDay[];\n\n @Input() locale: string;\n\n @Input() customTemplate: TemplateRef<any>;\n\n @Output() dayHeaderClicked = new EventEmitter<{\n day: WeekDay;\n sourceEvent: MouseEvent;\n }>();\n\n @Output() eventDropped = new EventEmitter<{\n event: CalendarEvent;\n newStart: Date;\n }>();\n\n @Output() dragEnter = new EventEmitter<{ date: Date }>();\n\n trackByWeekDayHeaderDate = trackByWeekDayHeaderDate;\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/week/calendar-week-view/calendar-week-view-hour-segment/calendar-week-view-hour-segment.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 4,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 51,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        38,
                        133
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { WeekViewHourSegment } from 'calendar-utils';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (43). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 6,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 50,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 53,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 53,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 55,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 55,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 57,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 57,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 59,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 59,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 61,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 61,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 63,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 63,
                "endColumn": 11
              }
            ],
            "suppressedMessages": [],
            "errorCount": 8,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, Input, TemplateRef } from '@angular/core';\nimport { WeekViewHourSegment } from 'calendar-utils';\n\n@Component({\n selector: 'mwl-calendar-week-view-hour-segment',\n template: `\n <ng-template\n #defaultTemplate\n let-segment=\"segment\"\n let-locale=\"locale\"\n let-segmentHeight=\"segmentHeight\"\n let-isTimeLabel=\"isTimeLabel\"\n let-daysInWeek=\"daysInWeek\"\n >\n <div\n [attr.aria-hidden]=\"\n {}\n | calendarA11y\n : (daysInWeek === 1\n ? 'hideDayHourSegment'\n : 'hideWeekHourSegment')\n \"\n class=\"cal-hour-segment\"\n [style.height.px]=\"segmentHeight\"\n [class.cal-hour-start]=\"segment.isStart\"\n [class.cal-after-hour-start]=\"!segment.isStart\"\n [ngClass]=\"segment.cssClass\"\n >\n <div class=\"cal-time\" *ngIf=\"isTimeLabel\">\n {{\n segment.displayDate\n | calendarDate\n : (daysInWeek === 1 ? 'dayViewHour' : 'weekViewHour')\n : locale\n }}\n </div>\n </div>\n </ng-template>\n <ng-template\n [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n [ngTemplateOutletContext]=\"{\n segment: segment,\n locale: locale,\n segmentHeight: segmentHeight,\n isTimeLabel: isTimeLabel,\n daysInWeek: daysInWeek\n }\"\n >\n </ng-template>\n `,\n})\nexport class CalendarWeekViewHourSegmentComponent {\n @Input() segment: WeekViewHourSegment;\n\n @Input() segmentHeight: number;\n\n @Input() locale: string;\n\n @Input() isTimeLabel: boolean;\n\n @Input() daysInWeek: number;\n\n @Input() customTemplate: TemplateRef<any>;\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/week/calendar-week-view/calendar-week-view.component.spec.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-selector",
                "severity": 2,
                "message": "The selector of the component is mandatory",
                "line": 34,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useComponentSelector",
                "endLine": 43,
                "endColumn": 3
              },
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 34,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 43,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        801,
                        988
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { By } from '@angular/platform-browser';\nimport angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json as fakeTimers from '@sinonjs/fake-timers';\nimport { formatDate } from '@angular/common';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (6). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 35,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 42,
                "endColumn": 4
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n inject,\n ComponentFixture,\n TestBed,\n fakeAsync,\n flush,\n} from '@angular/core/testing';\nimport moment from 'moment';\nimport { expect } from 'chai';\nimport {\n CalendarEventTitleFormatter,\n CalendarEvent,\n CalendarMomentDateFormatter,\n CalendarDateFormatter,\n CalendarModule,\n MOMENT,\n CalendarEventTimesChangedEvent,\n DAYS_OF_WEEK,\n CalendarWeekViewComponent,\n DateAdapter,\n CalendarWeekViewBeforeRenderEvent,\n} from 'angular-calendar';\nimport { DragAndDropModule } from 'angular-draggable-droppable';\nimport { Subject } from 'rxjs';\nimport angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json as sinon from 'sinon';\nimport { triggerDomEvent, ExternalEventComponent } from '../../../test/util';\nimport { take } from 'rxjs/operators';\nimport { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\nimport { Component } from '@angular/core';\nimport { By } from '@angular/platform-browser';\nimport angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json as fakeTimers from '@sinonjs/fake-timers';\nimport { formatDate } from '@angular/common';\n\n@Component({\n template: `\n <mwl-calendar-week-view\n [viewDate]=\"viewDate\"\n [events]=\"events\"\n (eventTimesChanged)=\"eventTimesChanged($event)\"\n ></mwl-calendar-week-view>\n <mwl-external-event></mwl-external-event>\n `,\n})\nclass TestComponent {\n viewDate: Date;\n events: CalendarEvent[];\n eventTimesChanged = sinon.spy();\n}\n\ndescribe('calendarWeekView component', () => {\n beforeEach(() => {\n TestBed.configureTestingModule({\n imports: [\n CalendarModule.forRoot(\n {\n provide: DateAdapter,\n useFactory: adapterFactory,\n },\n {\n dateFormatter: {\n provide: CalendarDateFormatter,\n useClass: CalendarMomentDateFormatter,\n },\n }\n ),\n DragAndDropModule,\n ],\n declarations: [ExternalEventComponent, TestComponent],\n providers: [{ provide: MOMENT, useValue: moment }],\n });\n });\n\n let eventTitle: CalendarEventTitleFormatter;\n beforeEach(inject([CalendarEventTitleFormatter], (_eventTitle_) => {\n eventTitle = _eventTitle_;\n }));\n\n it('should generate the week view', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2016-06-29');\n fixture.componentInstance.ngOnChanges({ viewDate: {} });\n expect(fixture.componentInstance.days.length).to.equal(7);\n expect(fixture.componentInstance.days[0].date).to.deep.equal(\n moment('2016-06-26').toDate()\n );\n });\n\n it('should generate the week view without excluded days', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2016-06-29');\n fixture.componentInstance.excludeDays = [0, 6];\n fixture.componentInstance.ngOnChanges({ viewDate: {} });\n expect(fixture.componentInstance.days.length).to.equal(5);\n fixture.destroy();\n });\n\n it('should update the week view when excluded days changed', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2016-06-29');\n fixture.componentInstance.excludeDays = [0, 6];\n fixture.componentInstance.ngOnChanges({ excludeDays: {} });\n expect(fixture.componentInstance.days.length).to.equal(5);\n expect(fixture.nativeElement.querySelector('.cal-weekend')).to.equal(null);\n\n fixture.componentInstance.excludeDays = [1];\n fixture.componentInstance.ngOnChanges({ excludeDays: [] });\n fixture.detectChanges();\n expect(fixture.componentInstance.days.length).to.equal(6);\n expect(fixture.nativeElement.querySelector('.cal-weekend')).not.to.equal(\n null\n );\n\n fixture.destroy();\n });\n\n it('should support excluding non consecutive days', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2016-06-29');\n fixture.componentInstance.excludeDays = [4, 6];\n fixture.componentInstance.ngOnChanges({ viewDate: {} });\n expect(fixture.componentInstance.days.length).to.equal(5);\n fixture.destroy();\n });\n\n it('should support excluding all but 1 day', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2016-06-29');\n fixture.componentInstance.excludeDays = [0, 1, 2, 3, 4, 5];\n fixture.componentInstance.ngOnChanges({ viewDate: {} });\n expect(fixture.componentInstance.days.length).to.equal(1);\n fixture.destroy();\n });\n\n it('should generate the week view with default colors for events', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.ngOnInit();\n fixture.componentInstance.viewDate = new Date('2016-06-01');\n fixture.componentInstance.events = [\n {\n start: new Date('2016-05-30'),\n end: new Date('2016-06-02'),\n title: 'foo',\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n\n const computedStyles: CSSStyleDeclaration = window.getComputedStyle(\n fixture.nativeElement.querySelector('.cal-event')\n );\n expect(computedStyles.getPropertyValue('background-color')).to.equal(\n 'rgb(209, 232, 255)'\n );\n expect(computedStyles.getPropertyValue('border-color')).to.equal(\n 'rgb(30, 144, 255)'\n );\n expect(computedStyles.getPropertyValue('color')).to.equal(\n 'rgb(30, 144, 255)'\n );\n fixture.destroy();\n });\n\n it('should emit on the dayHeaderClicked output', (done) => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2016-06-29');\n fixture.componentInstance.ngOnChanges({ viewDate: {} });\n fixture.detectChanges();\n fixture.componentInstance.dayHeaderClicked.subscribe((val) => {\n expect(val).to.deep.equal({\n day: fixture.componentInstance.days[0],\n sourceEvent: window['event'],\n });\n done();\n });\n fixture.nativeElement.querySelector('.cal-header').click();\n });\n\n it('should add a custom CSS class to events', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2016-06-01');\n fixture.componentInstance.events = [\n {\n start: new Date('2016-05-30'),\n end: new Date('2016-06-02'),\n cssClass: 'foo',\n title: 'foo',\n color: {\n primary: 'blue',\n secondary: '',\n },\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n expect(\n fixture.nativeElement\n .querySelector('.cal-event-container')\n .classList.contains('foo')\n ).to.equal(true);\n fixture.destroy();\n });\n\n it('should call the event clicked callback', (done) => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2016-06-01');\n fixture.componentInstance.events = [\n {\n start: new Date('2016-05-30'),\n end: new Date('2016-06-02'),\n title: '<span>foo</span>',\n color: {\n primary: 'blue',\n secondary: '',\n },\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n const title: HTMLElement =\n fixture.nativeElement.querySelector('.cal-event-title');\n expect(title.innerHTML).to.equal('<span>foo</span>');\n fixture.componentInstance.eventClicked.subscribe((val) => {\n expect(val).to.deep.equal({\n event: fixture.componentInstance.events[0],\n sourceEvent: window['event'],\n });\n done();\n });\n title.click();\n });\n\n it('should refresh the view when the refresh observable is emitted on', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.refresh = new Subject();\n fixture.componentInstance.ngOnInit();\n fixture.componentInstance.viewDate = new Date('2016-06-01');\n fixture.componentInstance.ngOnChanges({ viewDate: {} });\n const event: CalendarEvent = {\n start: new Date('2016-06-01'),\n end: new Date('2016-06-02'),\n title: 'foo',\n allDay: true,\n };\n fixture.componentInstance.events.push(event);\n fixture.componentInstance.refresh.next(true);\n expect(\n fixture.componentInstance.view.allDayEventRows[0].row[0].event\n ).to.deep.equal(event);\n fixture.destroy();\n });\n\n it('should allow the event title to be customised', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n eventTitle.week = (event: CalendarEvent) => {\n return `foo ${event.title}`;\n };\n fixture.componentInstance.viewDate = new Date('2016-06-01');\n fixture.componentInstance.events = [\n {\n start: new Date('2016-05-30'),\n end: new Date('2016-06-02'),\n title: 'bar',\n color: {\n primary: 'blue',\n secondary: '',\n },\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n const title: HTMLElement =\n fixture.nativeElement.querySelector('.cal-event-title');\n expect(title.innerHTML).to.equal('foo bar');\n });\n\n it('should allow the locale to be changed', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.locale = 'de';\n fixture.componentInstance.viewDate = new Date();\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n expect(\n fixture.nativeElement.querySelector('.cal-header b').innerHTML.trim()\n ).to.equal('Sonntag');\n });\n\n it('should show a tooltip on mouseover of the event', fakeAsync(() => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n eventTitle.weekTooltip = (e: CalendarEvent) => {\n return `title: ${e.title}`;\n };\n fixture.componentInstance.viewDate = new Date('2016-06-01');\n fixture.componentInstance.events = [\n {\n start: new Date('2016-05-30'),\n end: new Date('2016-06-02'),\n title: 'foo <b>bar</b>',\n color: {\n primary: 'blue',\n secondary: '',\n },\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n const event: HTMLElement =\n fixture.nativeElement.querySelector('.cal-event');\n triggerDomEvent('mouseenter', event);\n fixture.detectChanges();\n flush();\n const tooltip: HTMLElement = document.body.querySelector(\n '.cal-tooltip'\n ) as HTMLElement;\n expect(tooltip.querySelector('.cal-tooltip-inner').innerHTML).to.equal(\n 'title: foo <b>bar</b>'\n );\n expect(tooltip.classList.contains('cal-tooltip-top')).to.equal(true);\n expect(!!tooltip.style.top).to.equal(true);\n expect(!!tooltip.style.left).to.equal(true);\n triggerDomEvent('mouseleave', event);\n fixture.detectChanges();\n expect(!!document.body.querySelector('.cal-tooltip')).to.equal(false);\n fixture.destroy();\n }));\n\n it('should disable the tooltip', fakeAsync(() => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n eventTitle.weekTooltip = () => '';\n fixture.componentInstance.viewDate = new Date('2016-06-01');\n fixture.componentInstance.events = [\n {\n start: new Date('2016-05-30'),\n end: new Date('2016-06-02'),\n title: 'foo <b>bar</b>',\n color: {\n primary: 'blue',\n secondary: '',\n },\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n const event: HTMLElement =\n fixture.nativeElement.querySelector('.cal-event');\n triggerDomEvent('mouseenter', event);\n fixture.detectChanges();\n flush();\n expect(!!document.body.querySelector('.cal-tooltip')).to.equal(false);\n fixture.destroy();\n }));\n\n it('should hide the tooltip when dragging', fakeAsync(() => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n eventTitle.weekTooltip = (e: CalendarEvent) => {\n return `title: ${e.title}`;\n };\n fixture.componentInstance.viewDate = new Date('2016-06-01');\n fixture.componentInstance.events = [\n {\n start: new Date('2016-05-30'),\n end: new Date('2016-06-02'),\n title: 'foo <b>bar</b>',\n color: {\n primary: 'blue',\n secondary: '',\n },\n draggable: true,\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n const event: HTMLElement =\n fixture.nativeElement.querySelector('.cal-event');\n triggerDomEvent('mouseenter', event);\n fixture.detectChanges();\n flush();\n expect(document.body.querySelector('.cal-tooltip')).to.be.ok;\n const eventPosition = event.getBoundingClientRect();\n triggerDomEvent('mousedown', event, {\n clientX: eventPosition.left,\n clientY: eventPosition.top,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', event, {\n clientX: eventPosition.left,\n clientY: eventPosition.top + 100,\n });\n fixture.detectChanges();\n expect(document.body.querySelector('.cal-tooltip')).not.to.be.ok;\n fixture.destroy();\n }));\n\n it('should allow the start of the week to be changed', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2016-06-27');\n fixture.componentInstance.weekStartsOn = 1;\n fixture.componentInstance.ngOnChanges({ viewDate: {} });\n fixture.detectChanges();\n expect(\n fixture.nativeElement.querySelector('.cal-day-headers b').innerText\n ).to.deep.equal('Monday');\n fixture.destroy();\n });\n\n it('should resize the all day event by dragging from the left edge', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2016-06-27');\n fixture.componentInstance.events = [\n {\n title: 'foo',\n color: { primary: '', secondary: '' },\n start: moment('2016-06-27').add(4, 'hours').toDate(),\n end: moment('2016-06-27').add(6, 'hours').toDate(),\n resizable: {\n beforeStart: true,\n },\n allDay: true,\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event: HTMLElement = fixture.nativeElement.querySelector(\n '.cal-event-container'\n );\n const dayWidth: number = event.parentElement.offsetWidth / 7;\n const rect: ClientRect = event.getBoundingClientRect();\n let resizeEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n resizeEvent = e;\n });\n const resizeHandle = event.querySelector('.cal-resize-handle-before-start');\n triggerDomEvent('mousedown', resizeHandle, {\n clientX: rect.left,\n clientY: rect.top,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', resizeHandle, {\n clientX: rect.left - dayWidth,\n clientY: rect.top,\n });\n fixture.detectChanges();\n expect(Math.round(event.getBoundingClientRect().left)).to.equal(\n Math.round(rect.left - dayWidth)\n );\n expect(Math.round(event.getBoundingClientRect().width)).to.equal(\n Math.round(rect.width + dayWidth)\n );\n triggerDomEvent('mouseup', resizeHandle, {\n clientX: rect.left - dayWidth,\n clientY: rect.top,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(resizeEvent).to.deep.equal({\n type: 'resize',\n event: fixture.componentInstance.events[0],\n newStart: moment('2016-06-27')\n .add(4, 'hours')\n .subtract(1, 'day')\n .toDate(),\n newEnd: moment('2016-06-27').add(6, 'hours').toDate(),\n });\n });\n\n it('should resize the all day event by dragging from the right edge', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2016-06-27');\n fixture.componentInstance.events = [\n {\n title: 'foo',\n color: { primary: '', secondary: '' },\n start: moment('2016-06-27').add(4, 'hours').toDate(),\n end: moment('2016-06-27').add(6, 'hours').toDate(),\n resizable: {\n afterEnd: true,\n },\n allDay: true,\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event: HTMLElement = fixture.nativeElement.querySelector(\n '.cal-event-container'\n );\n const dayWidth: number = event.parentElement.offsetWidth / 7;\n const rect: ClientRect = event.getBoundingClientRect();\n let resizeEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n resizeEvent = e;\n });\n const handle = fixture.nativeElement.querySelector(\n '.cal-resize-handle-after-end'\n );\n triggerDomEvent('mousedown', handle, {\n clientX: rect.right,\n clientY: rect.top,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', handle, {\n clientX: rect.right + dayWidth,\n clientY: rect.top,\n });\n fixture.detectChanges();\n expect(Math.round(event.getBoundingClientRect().left)).to.equal(\n Math.round(rect.left)\n );\n expect(Math.round(event.getBoundingClientRect().width)).to.equal(\n Math.round(rect.width + dayWidth)\n );\n triggerDomEvent('mouseup', handle, {\n clientX: rect.right + dayWidth,\n clientY: rect.top,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(resizeEvent).to.deep.equal({\n type: 'resize',\n event: fixture.componentInstance.events[0],\n newStart: moment('2016-06-27').add(4, 'hours').toDate(),\n newEnd: moment('2016-06-27').add(6, 'hours').add(1, 'day').toDate(),\n });\n });\n\n it('should validate resizing all day events from the right end', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2016-06-27');\n fixture.componentInstance.events = [\n {\n title: 'foo',\n start: moment('2016-06-27').add(4, 'hours').toDate(),\n end: moment('2016-06-27').add(6, 'hours').toDate(),\n resizable: {\n afterEnd: true,\n },\n allDay: true,\n },\n ];\n const validateEventTimesChanged = sinon\n .stub()\n .onFirstCall()\n .returns(true)\n .onSecondCall()\n .returns(false);\n fixture.componentInstance.validateEventTimesChanged =\n validateEventTimesChanged;\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event: HTMLElement = fixture.nativeElement.querySelector(\n '.cal-event-container'\n );\n const dayWidth: number = event.parentElement.offsetWidth / 7;\n const rect: ClientRect = event.getBoundingClientRect();\n let resizeEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n resizeEvent = e;\n });\n const handle = fixture.nativeElement.querySelector(\n '.cal-resize-handle-after-end'\n );\n triggerDomEvent('mousedown', handle, {\n clientX: rect.right,\n clientY: rect.top,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', handle, {\n clientX: rect.right + dayWidth,\n clientY: rect.top,\n });\n fixture.detectChanges();\n expect(Math.round(event.getBoundingClientRect().left)).to.equal(\n Math.round(rect.left)\n );\n expect(Math.round(event.getBoundingClientRect().width)).to.equal(\n Math.round(rect.width + dayWidth)\n );\n triggerDomEvent('mousemove', handle, {\n clientX: rect.right + dayWidth angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json 2,\n clientY: rect.top,\n });\n fixture.detectChanges();\n expect(Math.round(event.getBoundingClientRect().left)).to.equal(\n Math.round(rect.left)\n );\n expect(Math.round(event.getBoundingClientRect().width)).to.equal(\n Math.round(rect.width + dayWidth)\n );\n triggerDomEvent('mouseup', handle, {\n clientX: rect.right + dayWidth angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json 2,\n clientY: rect.top,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(resizeEvent).to.deep.equal({\n type: 'resize',\n event: fixture.componentInstance.events[0],\n newStart: moment('2016-06-27').add(4, 'hours').toDate(),\n newEnd: moment('2016-06-27').add(6, 'hours').add(1, 'day').toDate(),\n });\n expect(validateEventTimesChanged).to.have.been.calledTwice;\n expect(validateEventTimesChanged.getCall(0).args[0]).to.deep.equal({\n type: 'resize',\n event: fixture.componentInstance.events[0],\n newStart: moment('2016-06-27').add(4, 'hours').toDate(),\n newEnd: moment('2016-06-27').add(6, 'hours').add(1, 'day').toDate(),\n });\n expect(validateEventTimesChanged.getCall(1).args[0]).to.deep.equal({\n type: 'resize',\n event: fixture.componentInstance.events[0],\n newStart: moment('2016-06-27').add(4, 'hours').toDate(),\n newEnd: moment('2016-06-27').add(6, 'hours').add(2, 'day').toDate(),\n });\n });\n\n it('should validate resizing all day events from the left end', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2020-05-20');\n fixture.componentInstance.events = [\n {\n title: 'foo',\n start: moment(fixture.componentInstance.viewDate)\n .add(4, 'hours')\n .toDate(),\n end: moment(fixture.componentInstance.viewDate)\n .add(6, 'hours')\n .toDate(),\n resizable: {\n beforeStart: true,\n },\n allDay: true,\n },\n ];\n const validateEventTimesChanged = sinon\n .stub()\n .onFirstCall()\n .returns(true)\n .onSecondCall()\n .returns(false);\n fixture.componentInstance.validateEventTimesChanged =\n validateEventTimesChanged;\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event: HTMLElement = fixture.nativeElement.querySelector(\n '.cal-event-container'\n );\n const dayWidth: number = event.parentElement.offsetWidth / 7;\n const rect: ClientRect = event.getBoundingClientRect();\n let resizeEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n resizeEvent = e;\n });\n const handle = fixture.nativeElement.querySelector(\n '.cal-resize-handle-before-start'\n );\n triggerDomEvent('mousedown', handle, {\n clientX: rect.left,\n clientY: rect.top,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', handle, {\n clientX: rect.left - dayWidth,\n clientY: rect.top,\n });\n fixture.detectChanges();\n expect(Math.round(event.getBoundingClientRect().left)).to.equal(\n Math.round(rect.left - dayWidth)\n );\n expect(Math.round(event.getBoundingClientRect().width)).to.equal(\n Math.round(rect.width + dayWidth)\n );\n triggerDomEvent('mousemove', handle, {\n clientX: rect.left - dayWidth angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json 2,\n clientY: rect.top,\n });\n fixture.detectChanges();\n expect(Math.round(event.getBoundingClientRect().left)).to.equal(\n Math.round(rect.left - dayWidth)\n );\n expect(Math.round(event.getBoundingClientRect().width)).to.equal(\n Math.round(rect.width + dayWidth)\n );\n triggerDomEvent('mouseup', handle, {\n clientX: rect.left - dayWidth angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json 2,\n clientY: rect.top,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(resizeEvent).to.deep.equal({\n type: 'resize',\n event: fixture.componentInstance.events[0],\n newStart: moment(fixture.componentInstance.events[0].start)\n .subtract(1, 'day')\n .toDate(),\n newEnd: moment(fixture.componentInstance.events[0].end).toDate(),\n });\n expect(validateEventTimesChanged).to.have.been.calledTwice;\n expect(validateEventTimesChanged.getCall(0).args[0]).to.deep.equal({\n type: 'resize',\n event: fixture.componentInstance.events[0],\n newStart: moment(fixture.componentInstance.events[0].start)\n .subtract(1, 'day')\n .toDate(),\n newEnd: moment(fixture.componentInstance.events[0].end).toDate(),\n });\n expect(validateEventTimesChanged.getCall(1).args[0]).to.deep.equal({\n type: 'resize',\n event: fixture.componentInstance.events[0],\n newStart: moment(fixture.componentInstance.events[0].start)\n .subtract(2, 'day')\n .toDate(),\n newEnd: moment(fixture.componentInstance.events[0].end).toDate(),\n });\n });\n\n it('should resize all day events with no end date', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2016-06-27');\n fixture.componentInstance.events = [\n {\n title: 'foo',\n color: { primary: '', secondary: '' },\n start: moment('2016-06-27').add(4, 'hours').toDate(),\n resizable: {\n afterEnd: true,\n },\n allDay: true,\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event: HTMLElement = fixture.nativeElement.querySelector(\n '.cal-event-container'\n );\n const dayWidth: number = event.parentElement.offsetWidth / 7;\n const rect: ClientRect = event.getBoundingClientRect();\n let resizeEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n resizeEvent = e;\n });\n const handle = fixture.nativeElement.querySelector(\n '.cal-resize-handle-after-end'\n );\n triggerDomEvent('mousedown', handle, {\n clientX: rect.right,\n clientY: rect.top,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', handle, {\n clientX: rect.right + dayWidth,\n clientY: rect.top,\n });\n fixture.detectChanges();\n expect(Math.round(event.getBoundingClientRect().left)).to.equal(\n Math.round(rect.left)\n );\n expect(Math.round(event.getBoundingClientRect().width)).to.equal(\n Math.round(rect.width + dayWidth)\n );\n triggerDomEvent('mouseup', handle, {\n clientX: rect.right + dayWidth,\n clientY: rect.top,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(resizeEvent).to.deep.equal({\n type: 'resize',\n event: fixture.componentInstance.events[0],\n newStart: moment('2016-06-27').add(4, 'hours').toDate(),\n newEnd: moment('2016-06-27').add(4, 'hours').add(1, 'day').toDate(),\n });\n });\n\n it('should allow the all day event to be dragged and dropped', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2016-12-08');\n fixture.componentInstance.events = [\n {\n title: 'foo',\n color: { primary: '', secondary: '' },\n start: moment('2016-12-08').add(4, 'hours').toDate(),\n end: moment('2016-12-08').add(6, 'hours').toDate(),\n draggable: true,\n allDay: true,\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n // remove the header as it was causing the test to fail\n const header: HTMLElement =\n fixture.nativeElement.querySelector('.cal-day-headers');\n header.parentNode.removeChild(header);\n const event: HTMLElement = fixture.nativeElement.querySelector(\n '.cal-event-container'\n );\n const dayWidth: number = event.parentElement.offsetWidth / 7;\n const eventPosition: ClientRect = event.getBoundingClientRect();\n const eventDropped = sinon.spy();\n fixture.componentInstance.eventTimesChanged\n .pipe(take(1))\n .subscribe(eventDropped);\n triggerDomEvent('mousedown', event, {\n clientX: eventPosition.left,\n clientY: eventPosition.top,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', event, {\n clientX: eventPosition.left,\n clientY: eventPosition.top,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', document.body, {\n clientX: eventPosition.left - 100,\n clientY: eventPosition.top,\n });\n fixture.detectChanges();\n const ghostElement = event.nextSibling as HTMLElement;\n expect(Math.round(ghostElement.getBoundingClientRect().left)).to.equal(\n Math.round(eventPosition.left - dayWidth) + 1\n );\n triggerDomEvent('mouseup', document.body, {\n clientX: eventPosition.left - dayWidth,\n clientY: eventPosition.top,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(eventDropped.getCall(0).args[0]).to.deep.equal({\n type: 'drag',\n event: fixture.componentInstance.events[0],\n newStart: moment('2016-12-07').add(4, 'hours').toDate(),\n newEnd: moment('2016-12-07').add(6, 'hours').toDate(),\n allDay: true,\n });\n expect(eventDropped).to.have.been.calledOnce;\n });\n\n it('should allow the all day event to be dragged and dropped and control where it can be dragged', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2016-12-08');\n fixture.componentInstance.events = [\n {\n title: 'foo',\n start: moment('2016-12-08').add(4, 'hours').toDate(),\n end: moment('2016-12-08').add(6, 'hours').toDate(),\n draggable: true,\n allDay: true,\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n // remove the header as it was causing the test to fail\n const header: HTMLElement =\n fixture.nativeElement.querySelector('.cal-day-headers');\n header.parentNode.removeChild(header);\n const event: HTMLElement = fixture.nativeElement.querySelector(\n '.cal-event-container'\n );\n const dayWidth: number = event.parentElement.offsetWidth / 7;\n const eventPosition: ClientRect = event.getBoundingClientRect();\n const eventDropped = sinon.spy();\n const validateEventTimesChanged = sinon\n .stub()\n .onFirstCall()\n .returns(true)\n .onSecondCall()\n .returns(false);\n fixture.componentInstance.validateEventTimesChanged =\n validateEventTimesChanged;\n fixture.componentInstance.eventTimesChanged\n .pipe(take(1))\n .subscribe(eventDropped);\n triggerDomEvent('mousedown', event, {\n clientX: eventPosition.left,\n clientY: eventPosition.top,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', document.body, {\n clientX: eventPosition.left,\n clientY: eventPosition.top,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', document.body, {\n clientX: eventPosition.left - dayWidth,\n clientY: eventPosition.top,\n });\n fixture.detectChanges();\n const ghostElement = event.nextSibling as HTMLElement;\n expect(Math.round(ghostElement.getBoundingClientRect().left)).to.equal(\n Math.round(eventPosition.left - dayWidth) + 1\n );\n triggerDomEvent('mousemove', document.body, {\n clientX: eventPosition.left - dayWidth angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json 2,\n clientY: eventPosition.top,\n });\n fixture.detectChanges();\n expect(Math.round(ghostElement.getBoundingClientRect().left)).to.equal(\n Math.round(eventPosition.left - dayWidth) + 1\n );\n triggerDomEvent('mouseup', document.body, {\n clientX: eventPosition.left - dayWidth angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json 2,\n clientY: eventPosition.top,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(eventDropped.getCall(0).args[0]).to.deep.equal({\n type: 'drag',\n event: fixture.componentInstance.events[0],\n newStart: moment('2016-12-07').add(4, 'hours').toDate(),\n newEnd: moment('2016-12-07').add(6, 'hours').toDate(),\n allDay: true,\n });\n expect(eventDropped).to.have.been.calledOnce;\n expect(validateEventTimesChanged).to.have.been.calledTwice;\n expect(validateEventTimesChanged.getCall(0).args[0]).to.deep.equal({\n type: 'drag',\n event: fixture.componentInstance.events[0],\n newStart: moment('2016-12-07').add(4, 'hours').toDate(),\n newEnd: moment('2016-12-07').add(6, 'hours').toDate(),\n });\n expect(validateEventTimesChanged.getCall(1).args[0]).to.deep.equal({\n type: 'drag',\n event: fixture.componentInstance.events[0],\n newStart: moment('2016-12-06').add(4, 'hours').toDate(),\n newEnd: moment('2016-12-06').add(6, 'hours').toDate(),\n });\n });\n\n it('should allow all day events to be dragged outside of the calendar', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2016-12-08');\n fixture.componentInstance.events = [\n {\n title: 'foo',\n start: moment('2016-12-08').add(4, 'hours').toDate(),\n end: moment('2016-12-08').add(6, 'hours').toDate(),\n draggable: true,\n allDay: true,\n },\n ];\n fixture.componentInstance.snapDraggedEvents = false;\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n // remove the header as it was causing the test to fail\n const header: HTMLElement =\n fixture.nativeElement.querySelector('.cal-day-headers');\n header.parentNode.removeChild(header);\n const event: HTMLElement = fixture.nativeElement.querySelector(\n '.cal-event-container'\n );\n const eventPosition: ClientRect = event.getBoundingClientRect();\n const calendarPosition: ClientRect =\n fixture.nativeElement.getBoundingClientRect();\n const eventDropped = sinon.spy();\n fixture.componentInstance.eventTimesChanged\n .pipe(take(1))\n .subscribe(eventDropped);\n triggerDomEvent('mousedown', event, {\n clientX: eventPosition.left,\n clientY: eventPosition.top,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', document.body, {\n clientX: eventPosition.left - 50,\n clientY: eventPosition.top,\n });\n fixture.detectChanges();\n const ghostElement = event.nextSibling as HTMLElement;\n expect(Math.round(ghostElement.getBoundingClientRect().left)).to.equal(\n Math.round(eventPosition.left - 50)\n );\n triggerDomEvent('mousemove', document.body, {\n clientX: calendarPosition.left - 50,\n clientY: eventPosition.top,\n });\n fixture.detectChanges();\n triggerDomEvent('mouseup', document.body, {\n clientX: calendarPosition.left - 50,\n clientY: eventPosition.top,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(eventDropped).not.to.have.been.called;\n });\n\n it('should round all day event drag sizes to the event snap size when dragging and dropping non snapped events', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2016-12-08');\n fixture.componentInstance.events = [\n {\n title: 'foo',\n color: { primary: '', secondary: '' },\n start: moment('2016-12-08').add(4, 'hours').toDate(),\n end: moment('2016-12-08').add(6, 'hours').toDate(),\n draggable: true,\n allDay: true,\n },\n ];\n fixture.componentInstance.snapDraggedEvents = false;\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n // remove the header as it was causing the test to fail\n const header: HTMLElement =\n fixture.nativeElement.querySelector('.cal-day-headers');\n header.parentNode.removeChild(header);\n const event: HTMLElement = fixture.nativeElement.querySelector(\n '.cal-event-container'\n );\n const eventPosition: ClientRect = event.getBoundingClientRect();\n const eventDropped = sinon.spy();\n fixture.componentInstance.eventTimesChanged\n .pipe(take(1))\n .subscribe(eventDropped);\n triggerDomEvent('mousedown', event, {\n clientX: eventPosition.left,\n clientY: eventPosition.top,\n button: 0,\n });\n fixture.detectChanges();\n const dragLeft = event.parentElement.offsetWidth / 7;\n triggerDomEvent('mousemove', document.body, {\n clientX: eventPosition.left - dragLeft,\n clientY: eventPosition.top,\n });\n fixture.detectChanges();\n triggerDomEvent('mouseup', document.body, {\n clientX: eventPosition.left - dragLeft,\n clientY: eventPosition.top,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(eventDropped.getCall(0).args[0]).to.deep.equal({\n type: 'drag',\n event: fixture.componentInstance.events[0],\n newStart: moment('2016-12-07').add(4, 'hours').toDate(),\n newEnd: moment('2016-12-07').add(6, 'hours').toDate(),\n allDay: true,\n });\n expect(eventDropped).to.have.been.calledOnce;\n });\n\n it('should not allow all day events to be resized smaller than 1 day', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2016-06-27');\n fixture.componentInstance.events = [\n {\n title: 'foo',\n start: moment('2016-06-27').add(4, 'hours').toDate(),\n end: moment('2016-06-27').add(6, 'hours').toDate(),\n resizable: {\n beforeStart: true,\n },\n allDay: true,\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event: HTMLElement = fixture.nativeElement.querySelector(\n '.cal-event-container'\n );\n const dayWidth: number = event.parentElement.offsetWidth / 7;\n const rect: ClientRect = event.getBoundingClientRect();\n const handle = fixture.nativeElement.querySelector(\n '.cal-resize-handle-before-start'\n );\n triggerDomEvent('mousedown', handle, {\n clientX: rect.left,\n clientY: rect.top,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', handle, {\n clientX: rect.left + dayWidth,\n clientY: rect.top,\n });\n fixture.detectChanges();\n expect(Math.round(event.getBoundingClientRect().left)).to.equal(\n Math.round(rect.left)\n );\n expect(Math.round(event.getBoundingClientRect().width)).to.equal(\n Math.round(rect.width)\n );\n triggerDomEvent('mouseup', handle, {\n clientX: rect.left - dayWidth,\n clientY: rect.top,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n });\n\n it('should not allow all day events to be resized outside of the current view', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2016-06-27');\n fixture.componentInstance.events = [\n {\n title: 'foo',\n start: moment('2016-06-27').add(4, 'hours').toDate(),\n end: moment('2016-06-27').add(6, 'hours').toDate(),\n resizable: {\n beforeStart: true,\n },\n allDay: true,\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event: HTMLElement = fixture.nativeElement.querySelector(\n '.cal-event-container'\n );\n const dayWidth: number = event.parentElement.offsetWidth / 7;\n const rect: ClientRect = event.getBoundingClientRect();\n const handle = fixture.nativeElement.querySelector(\n '.cal-resize-handle-before-start'\n );\n triggerDomEvent('mousedown', handle, {\n clientX: rect.left,\n clientY: rect.top,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', handle, {\n clientX: rect.left - dayWidth,\n clientY: rect.top,\n });\n fixture.detectChanges();\n expect(Math.round(event.getBoundingClientRect().left)).to.equal(\n Math.round(rect.left - dayWidth)\n );\n expect(Math.round(event.getBoundingClientRect().width)).to.equal(\n Math.round(rect.width + dayWidth)\n );\n triggerDomEvent('mousemove', handle, {\n clientX: rect.left - dayWidth angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json 2,\n clientY: rect.top,\n });\n fixture.detectChanges();\n expect(Math.round(event.getBoundingClientRect().left)).to.equal(\n Math.round(rect.left - dayWidth)\n );\n expect(Math.round(event.getBoundingClientRect().width)).to.equal(\n Math.round(rect.width + dayWidth)\n );\n triggerDomEvent('mouseup', handle, {\n clientX: rect.left - dayWidth angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json 2,\n clientY: rect.top,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n });\n\n it('should allow external events to be dropped on the week view headers', () => {\n const fixture = TestBed.createComponent(TestComponent);\n fixture.componentInstance.viewDate = new Date('2016-06-27');\n fixture.componentInstance.events = [];\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const externalEventFixture = fixture.debugElement.query(\n By.directive(ExternalEventComponent)\n );\n\n const event: HTMLElement =\n externalEventFixture.nativeElement.querySelector('.external-event');\n const eventPosition: ClientRect = event.getBoundingClientRect();\n\n const headers: any[] = Array.from(\n fixture.nativeElement.querySelectorAll('.cal-header')\n );\n const header: HTMLElement = headers[2];\n const headerPosition: ClientRect = header.getBoundingClientRect();\n\n const eventDropped = fixture.componentInstance.eventTimesChanged;\n triggerDomEvent('mousedown', event, {\n clientY: eventPosition.top,\n clientX: eventPosition.left,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', document.body, {\n clientY: headerPosition.top,\n clientX: headerPosition.left,\n });\n fixture.detectChanges();\n triggerDomEvent('mouseup', document.body, {\n clientY: headerPosition.top,\n clientX: headerPosition.left,\n button: 0,\n });\n fixture.detectChanges();\n expect(eventDropped).to.have.been.calledWith({\n type: 'drop',\n event: externalEventFixture.componentInstance.event,\n newStart: moment('2016-06-27').startOf('week').add(2, 'days').toDate(),\n allDay: true,\n });\n expect(eventDropped).to.have.been.calledOnce;\n });\n\n it('should allow the weekend days to be customised', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2017-06-25');\n fixture.componentInstance.weekendDays = [\n DAYS_OF_WEEK.FRIDAY,\n DAYS_OF_WEEK.SATURDAY,\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, weekendDays: {} });\n fixture.detectChanges();\n const headerCells: HTMLElement[] =\n fixture.nativeElement.querySelectorAll('.cal-header');\n expect(headerCells[0].classList.contains('cal-weekend')).to.equal(false);\n expect(headerCells[5].classList.contains('cal-weekend')).to.equal(true);\n expect(headerCells[6].classList.contains('cal-weekend')).to.equal(true);\n fixture.destroy();\n });\n\n it('should add a custom CSS class to headers via the beforeViewRender output', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2016-06-27');\n fixture.componentInstance.beforeViewRender\n .pipe(take(1))\n .subscribe(({ header }) => {\n header[0].cssClass = 'foo';\n });\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n expect(\n fixture.nativeElement\n .querySelector('.cal-header')\n .classList.contains('foo')\n ).to.equal(true);\n fixture.destroy();\n });\n\n it('should log on invalid events', () => {\n const stub = sinon.stub(console, 'warn');\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.events = [\n { start: 1234, title: '', color: { primary: '', secondary: '' } },\n ] as any;\n fixture.componentInstance.viewDate = new Date('2017-01-01');\n fixture.componentInstance.ngOnChanges({ events: {}, viewDate: {} });\n fixture.detectChanges();\n stub.restore();\n expect(stub).to.have.been.calledOnce; // eslint-disable-line\n });\n\n it('should only call the beforeViewRender output once when refreshing the view', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.refresh = new Subject();\n fixture.componentInstance.ngOnInit();\n fixture.componentInstance.viewDate = new Date('2016-06-27');\n const beforeViewRenderCalled = sinon.spy();\n // use subscription to test that it was only called a max of one times\n const subscription = fixture.componentInstance.beforeViewRender.subscribe(\n beforeViewRenderCalled\n );\n fixture.componentInstance.refresh.next(true);\n expect(beforeViewRenderCalled).to.have.been.calledOnce;\n subscription.unsubscribe();\n fixture.destroy();\n });\n\n it('should only call the beforeViewRender output once when changing the view date', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.ngOnInit();\n fixture.componentInstance.viewDate = new Date('2016-06-27');\n fixture.componentInstance.ngOnChanges({ viewDate: {} });\n const beforeViewRenderCalled = sinon.spy();\n // use subscription to test that it was only called a max of one times\n const subscription = fixture.componentInstance.beforeViewRender.subscribe(\n beforeViewRenderCalled\n );\n fixture.componentInstance.viewDate = new Date('2016-06-28');\n fixture.componentInstance.ngOnChanges({ viewDate: {} });\n expect(beforeViewRenderCalled).to.have.been.calledOnce;\n subscription.unsubscribe();\n fixture.destroy();\n });\n\n it('should expose the view period on the beforeViewRender output', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n const beforeViewRenderCalled = sinon.spy();\n fixture.componentInstance.beforeViewRender\n .pipe(take(1))\n .subscribe(beforeViewRenderCalled);\n fixture.componentInstance.ngOnInit();\n fixture.componentInstance.viewDate = new Date('2016-06-27');\n fixture.componentInstance.ngOnChanges({ viewDate: {} });\n const data = beforeViewRenderCalled.getCall(0).args[0];\n expect(data.period.start).to.be.an.instanceOf(Date);\n expect(data.period.end).to.be.an.instanceOf(Date);\n expect(Array.isArray(data.period.events)).to.equal(true);\n expect(Array.isArray(data.allDayEventRows)).to.be.true;\n expect(Array.isArray(data.hourColumns)).to.be.true;\n });\n\n it('should add event actions to each event', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2016-06-27');\n const eventClicked = sinon.spy();\n fixture.componentInstance.eventClicked.subscribe(eventClicked);\n fixture.componentInstance.events = [\n {\n start: new Date('2016-06-26'),\n end: new Date('2016-06-28'),\n title: 'foo',\n actions: [\n {\n label: '<i class=\"fa fa-fw fa-times\"></i>',\n onClick: sinon.spy(),\n cssClass: 'foo',\n },\n ],\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n const action: HTMLElement = fixture.nativeElement.querySelector(\n '.cal-event .cal-event-action'\n );\n expect(action.innerHTML).to.equal('<i class=\"fa fa-fw fa-times\"></i>');\n expect(action.classList.contains('foo')).to.equal(true);\n action.querySelector('i').click();\n const actionSpy = fixture.componentInstance.events[0].actions[0]\n .onClick as sinon.SinonSpy;\n expect(actionSpy.getCall(0).args[0].event).to.equal(\n fixture.componentInstance.events[0]\n );\n expect(actionSpy.getCall(0).args[0].sourceEvent instanceof MouseEvent).to.be\n .true;\n expect(eventClicked).not.to.have.been.called;\n });\n\n it('should make a 4 day week', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2018-07-29');\n fixture.componentInstance.daysInWeek = 4;\n fixture.componentInstance.events = [\n {\n start: new Date('2018-07-29'),\n title: 'foo',\n allDay: true,\n },\n ];\n fixture.componentInstance.ngOnChanges({\n daysInWeek: {},\n events: {},\n viewDate: {},\n });\n fixture.detectChanges();\n expect(\n fixture.nativeElement.querySelectorAll('.cal-header').length\n ).to.equal(4);\n expect(\n fixture.nativeElement.querySelectorAll(\n '.cal-all-day-events .cal-day-column'\n ).length\n ).to.equal(4);\n expect(\n fixture.nativeElement.querySelectorAll('.cal-time-events .cal-day-column')\n .length\n ).to.equal(4);\n });\n\n it('should resize a time event from the end to another day on the right', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2018-07-29');\n fixture.componentInstance.events = [\n {\n start: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(3, 'hours')\n .toDate(),\n end: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(18, 'hours')\n .toDate(),\n title: 'foo',\n resizable: {\n afterEnd: true,\n },\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event: HTMLElement = fixture.nativeElement.querySelector(\n '.cal-event-container'\n );\n const dayWidth: number = event.parentElement.offsetWidth;\n const rect: ClientRect = event.getBoundingClientRect();\n const resizeHandle = event.querySelector('.cal-resize-handle-after-end');\n let resizeEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n resizeEvent = e;\n });\n triggerDomEvent('mousedown', resizeHandle, {\n clientX: rect.right,\n clientY: rect.bottom,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', document.body, {\n clientX: rect.right + dayWidth,\n clientY: rect.bottom + 90,\n });\n fixture.detectChanges();\n expect(event.getBoundingClientRect().top).to.equal(rect.top);\n expect(event.getBoundingClientRect().height).to.equal(1259);\n const events = fixture.nativeElement.querySelectorAll(\n '.cal-event-container'\n );\n expect(events[0]).to.equal(event);\n expect(events[1].getBoundingClientRect().top).to.equal(rect.top - 180);\n expect(events[1].getBoundingClientRect().height).to.equal(1170);\n triggerDomEvent('mouseup', document.body, {\n clientX: rect.right + dayWidth,\n clientY: rect.bottom + 90,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(resizeEvent).to.deep.equal({\n type: 'resize',\n event: fixture.componentInstance.events[0],\n newStart: fixture.componentInstance.events[0].start,\n newEnd: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(1, 'day')\n .add(19, 'hours')\n .add(30, 'minutes')\n .toDate(),\n });\n });\n\n it('should control resizing time events', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2018-07-29');\n fixture.componentInstance.events = [\n {\n start: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(3, 'hours')\n .toDate(),\n end: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(18, 'hours')\n .toDate(),\n title: 'foo',\n resizable: {\n afterEnd: true,\n },\n },\n ];\n const validateEventTimesChanged = sinon\n .stub()\n .onFirstCall()\n .returns(true)\n .onSecondCall()\n .returns(false);\n fixture.componentInstance.validateEventTimesChanged =\n validateEventTimesChanged;\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event: HTMLElement = fixture.nativeElement.querySelector(\n '.cal-event-container'\n );\n const dayWidth: number = event.parentElement.offsetWidth;\n const rect: ClientRect = event.getBoundingClientRect();\n const resizeHandle = event.querySelector('.cal-resize-handle-after-end');\n let resizeEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n resizeEvent = e;\n });\n triggerDomEvent('mousedown', resizeHandle, {\n clientX: rect.right,\n clientY: rect.bottom,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', document.body, {\n clientX: rect.right,\n clientY: rect.bottom + 90,\n });\n fixture.detectChanges();\n expect(event.getBoundingClientRect().top).to.equal(rect.top);\n expect(event.getBoundingClientRect().height).to.equal(rect.height + 90);\n triggerDomEvent('mousemove', document.body, {\n clientX: rect.right,\n clientY: rect.bottom + 180,\n });\n fixture.detectChanges();\n expect(event.getBoundingClientRect().top).to.equal(rect.top);\n expect(event.getBoundingClientRect().height).to.equal(rect.height + 90);\n triggerDomEvent('mouseup', document.body, {\n clientX: rect.right + dayWidth,\n clientY: rect.bottom + 180,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(resizeEvent).to.deep.equal({\n type: 'resize',\n event: fixture.componentInstance.events[0],\n newStart: fixture.componentInstance.events[0].start,\n newEnd: moment(fixture.componentInstance.events[0].end)\n .add(90, 'minutes')\n .toDate(),\n });\n expect(validateEventTimesChanged).to.have.been.calledTwice;\n expect(validateEventTimesChanged.getCall(0).args[0]).to.deep.equal({\n type: 'resize',\n event: fixture.componentInstance.events[0],\n newStart: fixture.componentInstance.events[0].start,\n newEnd: moment(fixture.componentInstance.events[0].end)\n .add(90, 'minutes')\n .toDate(),\n });\n expect(validateEventTimesChanged.getCall(1).args[0]).to.deep.equal({\n type: 'resize',\n event: fixture.componentInstance.events[0],\n newStart: fixture.componentInstance.events[0].start,\n newEnd: moment(fixture.componentInstance.events[0].end)\n .add(180, 'minutes')\n .toDate(),\n });\n });\n\n it('should resize a time event from the end to another day on the left when using rtl', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.nativeElement.setAttribute('dir', 'rtl');\n fixture.componentInstance.viewDate = new Date('2018-07-29');\n fixture.componentInstance.events = [\n {\n start: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(3, 'hours')\n .toDate(),\n end: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(18, 'hours')\n .toDate(),\n title: 'foo',\n resizable: {\n afterEnd: true,\n },\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event: HTMLElement = fixture.nativeElement.querySelector(\n '.cal-event-container'\n );\n const dayWidth: number = event.parentElement.offsetWidth;\n const rect: ClientRect = event.getBoundingClientRect();\n const resizeHandle = event.querySelector('.cal-resize-handle-after-end');\n let resizeEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n resizeEvent = e;\n });\n triggerDomEvent('mousedown', resizeHandle, {\n clientX: rect.right,\n clientY: rect.bottom,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', document.body, {\n clientX: rect.right - dayWidth,\n clientY: rect.bottom,\n });\n fixture.detectChanges();\n triggerDomEvent('mouseup', document.body, {\n clientX: rect.right + dayWidth,\n clientY: rect.bottom + 90,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(resizeEvent).to.deep.equal({\n type: 'resize',\n event: fixture.componentInstance.events[0],\n newStart: fixture.componentInstance.events[0].start,\n newEnd: moment(fixture.componentInstance.events[0].end)\n .add(1, 'day')\n .toDate(),\n });\n });\n\n it('should resize a time event from the end to another day on the left', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2018-07-29');\n fixture.componentInstance.events = [\n {\n start: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(3, 'hours')\n .toDate(),\n end: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(1, 'day')\n .add(19, 'hours')\n .add(30, 'minutes')\n .toDate(),\n title: 'foo',\n resizable: {\n afterEnd: true,\n },\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event: HTMLElement = fixture.nativeElement.querySelectorAll(\n '.cal-event-container'\n )[1];\n const dayWidth: number = event.parentElement.offsetWidth;\n const rect: ClientRect = event.getBoundingClientRect();\n const resizeHandle = event.querySelector('.cal-resize-handle-after-end');\n let resizeEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n resizeEvent = e;\n });\n triggerDomEvent('mousedown', resizeHandle, {\n clientX: rect.right,\n clientY: rect.bottom,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', document.body, {\n clientX: rect.right - dayWidth,\n clientY: rect.bottom - 90,\n });\n fixture.detectChanges();\n expect(event.getBoundingClientRect().width).to.equal(0);\n expect(event.getBoundingClientRect().height).to.equal(0);\n const events = fixture.nativeElement.querySelectorAll(\n '.cal-event-container'\n );\n expect(events[1]).to.equal(event);\n expect(events[0].getBoundingClientRect().top).to.equal(rect.top + 180);\n expect(events[0].getBoundingClientRect().height).to.equal(900);\n triggerDomEvent('mouseup', document.body, {\n clientX: rect.right - dayWidth,\n clientY: rect.bottom - 90,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(resizeEvent).to.deep.equal({\n type: 'resize',\n event: fixture.componentInstance.events[0],\n newStart: fixture.componentInstance.events[0].start,\n newEnd: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(18, 'hours')\n .toDate(),\n });\n });\n\n it('should resize a time event from the end to another day on the right when using rtl', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.nativeElement.setAttribute('dir', 'rtl');\n fixture.componentInstance.viewDate = new Date('2018-07-29');\n fixture.componentInstance.events = [\n {\n start: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(3, 'hours')\n .toDate(),\n end: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(1, 'day')\n .add(19, 'hours')\n .add(30, 'minutes')\n .toDate(),\n title: 'foo',\n resizable: {\n afterEnd: true,\n },\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event: HTMLElement = fixture.nativeElement.querySelectorAll(\n '.cal-event-container'\n )[1];\n const dayWidth: number = event.parentElement.offsetWidth;\n const rect: ClientRect = event.getBoundingClientRect();\n const resizeHandle = event.querySelector('.cal-resize-handle-after-end');\n let resizeEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n resizeEvent = e;\n });\n triggerDomEvent('mousedown', resizeHandle, {\n clientX: rect.right,\n clientY: rect.bottom,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', document.body, {\n clientX: rect.right + dayWidth,\n clientY: rect.bottom,\n });\n fixture.detectChanges();\n triggerDomEvent('mouseup', document.body, {\n clientX: rect.right + dayWidth,\n clientY: rect.bottom,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(resizeEvent).to.deep.equal({\n type: 'resize',\n event: fixture.componentInstance.events[0],\n newStart: fixture.componentInstance.events[0].start,\n newEnd: moment(fixture.componentInstance.events[0].end)\n .subtract(1, 'day')\n .toDate(),\n });\n });\n\n it('should resize a time event from the end and not allow it to end before it starts', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2018-07-29');\n fixture.componentInstance.events = [\n {\n start: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(3, 'hours')\n .toDate(),\n end: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(1, 'day')\n .add(19, 'hours')\n .add(30, 'minutes')\n .toDate(),\n title: 'foo',\n resizable: {\n afterEnd: true,\n },\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event: HTMLElement = fixture.nativeElement.querySelectorAll(\n '.cal-event-container'\n )[1];\n const dayWidth: number = event.parentElement.offsetWidth;\n const rect: ClientRect = event.getBoundingClientRect();\n const resizeHandle = event.querySelector('.cal-resize-handle-after-end');\n let resizeEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n resizeEvent = e;\n });\n triggerDomEvent('mousedown', resizeHandle, {\n clientX: rect.right,\n clientY: rect.bottom,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', document.body, {\n clientX: rect.right - dayWidth angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json 2,\n clientY: rect.bottom - 1000,\n });\n fixture.detectChanges();\n expect(event.getBoundingClientRect().width).to.equal(0);\n expect(event.getBoundingClientRect().height).to.equal(0);\n const events = fixture.nativeElement.querySelectorAll(\n '.cal-event-container'\n );\n expect(events[1]).to.equal(event);\n expect(events[0].getBoundingClientRect().top).to.equal(rect.top + 180);\n expect(events[0].getBoundingClientRect().height).to.equal(30);\n triggerDomEvent('mouseup', document.body, {\n clientX: rect.right - dayWidth angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json 2,\n clientY: rect.bottom - 1000,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(resizeEvent).to.deep.equal({\n type: 'resize',\n event: fixture.componentInstance.events[0],\n newStart: fixture.componentInstance.events[0].start,\n newEnd: moment(fixture.componentInstance.events[0].start)\n .add(30, 'minutes')\n .toDate(),\n });\n });\n\n it('should resize a time event from the start to another day on the left', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2018-07-30');\n fixture.componentInstance.events = [\n {\n start: moment(new Date('2018-07-30'))\n .startOf('day')\n .add(3, 'hours')\n .toDate(),\n end: moment(new Date('2018-07-30'))\n .startOf('day')\n .add(18, 'hours')\n .toDate(),\n title: 'foo',\n resizable: {\n beforeStart: true,\n },\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event: HTMLElement = fixture.nativeElement.querySelector(\n '.cal-event-container'\n );\n const dayWidth: number = event.parentElement.offsetWidth;\n const rect: ClientRect = event.getBoundingClientRect();\n const resizeHandle = event.querySelector('.cal-resize-handle-before-start');\n let resizeEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n resizeEvent = e;\n });\n triggerDomEvent('mousedown', resizeHandle, {\n clientX: rect.left,\n clientY: rect.top,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', document.body, {\n clientX: rect.left - dayWidth,\n clientY: rect.top - 90,\n });\n fixture.detectChanges();\n expect(event.getBoundingClientRect().top).to.equal(rect.top - 180);\n expect(event.getBoundingClientRect().height).to.equal(rect.height + 180);\n const events = fixture.nativeElement.querySelectorAll(\n '.cal-event-container'\n );\n expect(events[1]).to.equal(event);\n expect(events[0].getBoundingClientRect().top).to.equal(rect.top - 90);\n expect(events[0].getBoundingClientRect().height).to.equal(1349);\n triggerDomEvent('mouseup', document.body, {\n clientX: rect.left - dayWidth,\n clientY: rect.top - 90,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(resizeEvent).to.deep.equal({\n type: 'resize',\n event: fixture.componentInstance.events[0],\n newStart: moment(fixture.componentInstance.events[0].start)\n .subtract(1, 'days')\n .subtract(90, 'minutes')\n .toDate(),\n newEnd: fixture.componentInstance.events[0].end,\n });\n });\n\n it('should resize a time event from the start to another day on the right', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2018-07-30');\n fixture.componentInstance.events = [\n {\n start: moment(new Date('2018-07-30'))\n .startOf('day')\n .add(3, 'hours')\n .subtract(1, 'days')\n .subtract(90, 'minutes')\n .toDate(),\n end: moment(new Date('2018-07-30'))\n .startOf('day')\n .add(18, 'hours')\n .toDate(),\n title: 'foo',\n resizable: {\n beforeStart: true,\n },\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event: HTMLElement = fixture.nativeElement.querySelector(\n '.cal-event-container'\n );\n const dayWidth: number = event.parentElement.offsetWidth;\n const rect: ClientRect = event.getBoundingClientRect();\n const resizeHandle = event.querySelector('.cal-resize-handle-before-start');\n let resizeEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n resizeEvent = e;\n });\n triggerDomEvent('mousedown', resizeHandle, {\n clientX: rect.left,\n clientY: rect.top,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', document.body, {\n clientX: rect.left + dayWidth,\n clientY: rect.top + 90,\n });\n fixture.detectChanges();\n expect(event.getBoundingClientRect().width).to.equal(0);\n expect(event.getBoundingClientRect().height).to.equal(0);\n const events = fixture.nativeElement.querySelectorAll(\n '.cal-event-container'\n );\n expect(events[0]).to.equal(event);\n expect(events[1].getBoundingClientRect().top).to.equal(rect.top + 90);\n expect(events[1].getBoundingClientRect().height).to.equal(900);\n triggerDomEvent('mouseup', document.body, {\n clientX: rect.left + dayWidth,\n clientY: rect.top + 90,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(resizeEvent).to.deep.equal({\n type: 'resize',\n event: fixture.componentInstance.events[0],\n newStart: moment(new Date('2018-07-30'))\n .startOf('day')\n .add(3, 'hours')\n .toDate(),\n newEnd: fixture.componentInstance.events[0].end,\n });\n });\n\n it('should resize a time event and not allow it to start after it ends', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2018-07-30');\n fixture.componentInstance.events = [\n {\n start: moment(new Date('2018-07-30'))\n .startOf('day')\n .add(3, 'hours')\n .subtract(1, 'days')\n .subtract(90, 'minutes')\n .toDate(),\n end: moment(new Date('2018-07-30'))\n .startOf('day')\n .add(18, 'hours')\n .toDate(),\n title: 'foo',\n resizable: {\n beforeStart: true,\n },\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event: HTMLElement = fixture.nativeElement.querySelector(\n '.cal-event-container'\n );\n const dayWidth: number = event.parentElement.offsetWidth;\n const rect: ClientRect = event.getBoundingClientRect();\n const resizeHandle = event.querySelector('.cal-resize-handle-before-start');\n let resizeEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n resizeEvent = e;\n });\n triggerDomEvent('mousedown', resizeHandle, {\n clientX: rect.left,\n clientY: rect.top,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', document.body, {\n clientX: rect.left + dayWidth angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json 2,\n clientY: rect.top + 90,\n });\n fixture.detectChanges();\n expect(event.getBoundingClientRect().width).to.equal(0);\n expect(event.getBoundingClientRect().height).to.equal(0);\n const events = fixture.nativeElement.querySelectorAll(\n '.cal-event-container'\n );\n expect(events[0]).to.equal(event);\n // locally the top comes out as 1107 but on the CI it's 1106\n expect(events[1].getBoundingClientRect().top).to.closeTo(1106, 1);\n expect(events[1].getBoundingClientRect().height).to.equal(30);\n triggerDomEvent('mouseup', document.body, {\n clientX: rect.left + dayWidth angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json 2,\n clientY: rect.top + 90,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(resizeEvent).to.deep.equal({\n type: 'resize',\n event: fixture.componentInstance.events[0],\n newStart: moment(fixture.componentInstance.events[0].end)\n .subtract(30, 'minutes')\n .toDate(),\n newEnd: fixture.componentInstance.events[0].end,\n });\n });\n\n it('should drag time events to different days and columns while snapping to a grid', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2018-07-29');\n fixture.componentInstance.events = [\n {\n start: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(3, 'hours')\n .toDate(),\n end: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(1, 'day')\n .add(18, 'hours')\n .toDate(),\n title: 'foo',\n draggable: true,\n },\n {\n start: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(3, 'days')\n .toDate(),\n title: 'bar',\n draggable: true,\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const events = fixture.nativeElement.querySelectorAll(\n '.cal-event-container'\n );\n const dayWidth: number = events[0].parentElement.offsetWidth;\n const rect1: ClientRect = events[0].getBoundingClientRect();\n const rect2: ClientRect = events[1].getBoundingClientRect();\n let dragEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n dragEvent = e;\n });\n triggerDomEvent('mousedown', events[1], {\n clientX: rect2.right,\n clientY: rect2.bottom,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', events[1], {\n clientX: rect2.right + dayWidth - 5,\n clientY: rect2.bottom + 95,\n });\n fixture.detectChanges();\n expect(events[0].getBoundingClientRect().height).to.equal(0);\n expect(events[0].getBoundingClientRect().width).to.equal(0);\n const updatedEvents = fixture.nativeElement.querySelectorAll(\n '.cal-event-container'\n );\n expect(updatedEvents[0]).to.equal(events[0]);\n expect(updatedEvents[1].getBoundingClientRect().top).to.equal(\n rect1.top + 90\n );\n expect(updatedEvents[1].getBoundingClientRect().height).to.equal(\n rect1.height - 90\n );\n expect(updatedEvents[2].getBoundingClientRect().top).to.equal(rect2.top);\n expect(updatedEvents[2].getBoundingClientRect().height).to.equal(\n rect2.height + 90\n );\n triggerDomEvent('mouseup', events[1], {\n clientX: rect2.right + dayWidth - 5,\n clientY: rect2.bottom + 95,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(dragEvent).to.deep.equal({\n type: 'drag',\n allDay: false,\n event: fixture.componentInstance.events[0],\n newStart: moment(fixture.componentInstance.events[0].start)\n .add(1, 'day')\n .add(1, 'hour')\n .add(30, 'minutes')\n .toDate(),\n newEnd: moment(fixture.componentInstance.events[0].end)\n .add(1, 'day')\n .add(1, 'hour')\n .add(30, 'minutes')\n .toDate(),\n });\n });\n\n it('should control dragging time events', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2018-07-29');\n fixture.componentInstance.events = [\n {\n start: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(3, 'hours')\n .toDate(),\n end: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(1, 'day')\n .add(18, 'hours')\n .toDate(),\n title: 'foo',\n draggable: true,\n },\n ];\n const validateEventTimesChanged = sinon\n .stub()\n .onFirstCall()\n .returns(true)\n .onSecondCall()\n .returns(false);\n fixture.componentInstance.validateEventTimesChanged =\n validateEventTimesChanged;\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event = fixture.nativeElement.querySelector('.cal-event-container');\n const rect: ClientRect = event.getBoundingClientRect();\n let dragEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n dragEvent = e;\n });\n triggerDomEvent('mousedown', event, {\n clientX: rect.right,\n clientY: rect.bottom,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', event, {\n clientX: rect.right,\n clientY: rect.bottom,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', event, {\n clientX: rect.right,\n clientY: rect.bottom + 95,\n });\n fixture.detectChanges();\n expect(event.getBoundingClientRect().top).to.equal(rect.top + 90);\n triggerDomEvent('mousemove', event, {\n clientX: rect.right,\n clientY: rect.bottom + 180,\n });\n fixture.detectChanges();\n expect(event.getBoundingClientRect().top).to.equal(rect.top + 90);\n triggerDomEvent('mouseup', event, {\n clientX: rect.right,\n clientY: rect.bottom + 180,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(dragEvent).to.deep.equal({\n type: 'drag',\n allDay: false,\n event: fixture.componentInstance.events[0],\n newStart: moment(fixture.componentInstance.events[0].start)\n .add(90, 'minutes')\n .toDate(),\n newEnd: moment(fixture.componentInstance.events[0].end)\n .add(90, 'minutes')\n .toDate(),\n });\n expect(validateEventTimesChanged).to.have.been.calledTwice;\n expect(validateEventTimesChanged.getCall(0).args[0]).to.deep.equal({\n type: 'drag',\n event: fixture.componentInstance.events[0],\n newStart: moment(fixture.componentInstance.events[0].start)\n .add(90, 'minutes')\n .toDate(),\n newEnd: moment(fixture.componentInstance.events[0].end)\n .add(90, 'minutes')\n .toDate(),\n });\n expect(validateEventTimesChanged.getCall(1).args[0]).to.deep.equal({\n type: 'drag',\n event: fixture.componentInstance.events[0],\n newStart: moment(fixture.componentInstance.events[0].start)\n .add(180, 'minutes')\n .toDate(),\n newEnd: moment(fixture.componentInstance.events[0].end)\n .add(180, 'minutes')\n .toDate(),\n });\n });\n\n it('should drag time events back to their original position while snapping to a grid', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2018-07-29');\n const originalEvent = {\n start: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(3, 'hours')\n .toDate(),\n end: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(5, 'hours')\n .toDate(),\n title: 'foo',\n draggable: true,\n };\n fixture.componentInstance.events = [originalEvent];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event = fixture.nativeElement.querySelector('.cal-event-container');\n const rect: ClientRect = event.getBoundingClientRect();\n let dragEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n dragEvent = e;\n });\n triggerDomEvent('mousedown', event, {\n clientX: rect.right,\n clientY: rect.bottom,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', event, {\n clientX: rect.right,\n clientY: rect.bottom + 95,\n });\n fixture.detectChanges();\n const updatedEvent1 = fixture.nativeElement.querySelector(\n '.cal-event-container'\n );\n expect(updatedEvent1.getBoundingClientRect().top).to.equal(rect.top + 90);\n triggerDomEvent('mousemove', event, {\n clientX: rect.right,\n clientY: rect.bottom,\n });\n fixture.detectChanges();\n const updatedEvent2 = fixture.nativeElement.querySelector(\n '.cal-event-container'\n );\n expect(updatedEvent2.getBoundingClientRect().top).to.equal(rect.top);\n triggerDomEvent('mouseup', event, {\n clientX: rect.right,\n clientY: rect.bottom,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(dragEvent.newStart).to.deep.equal(originalEvent.start);\n expect(dragEvent.newEnd).to.deep.equal(originalEvent.end);\n });\n\n it('should drag time events without end dates', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2018-07-29');\n fixture.componentInstance.events = [\n {\n start: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(3, 'hours')\n .toDate(),\n title: 'foo',\n draggable: true,\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event = fixture.nativeElement.querySelector('.cal-event-container');\n const dayWidth: number = event.parentElement.offsetWidth;\n const rect: ClientRect = event.getBoundingClientRect();\n let dragEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n dragEvent = e;\n });\n triggerDomEvent('mousedown', event, {\n clientX: rect.right,\n clientY: rect.bottom,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', event, {\n clientX: rect.right + dayWidth - 5,\n clientY: rect.bottom + 95,\n });\n fixture.detectChanges();\n expect(event.getBoundingClientRect().height).to.equal(0);\n expect(event.getBoundingClientRect().width).to.equal(0);\n const updatedEvents = fixture.nativeElement.querySelectorAll(\n '.cal-event-container'\n );\n expect(updatedEvents[0]).to.equal(event);\n expect(updatedEvents[1].getBoundingClientRect().top).to.equal(\n rect.top + 90\n );\n expect(updatedEvents[1].getBoundingClientRect().height).to.equal(\n rect.height\n );\n triggerDomEvent('mouseup', event, {\n clientX: rect.right + dayWidth - 5,\n clientY: rect.bottom + 95,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(dragEvent).to.deep.equal({\n type: 'drag',\n allDay: false,\n event: fixture.componentInstance.events[0],\n newStart: moment(fixture.componentInstance.events[0].start)\n .add(1, 'day')\n .add(1, 'hour')\n .add(30, 'minutes')\n .toDate(),\n newEnd: undefined,\n });\n });\n\n it('should drag time events to different days and columns while not snapping to a grid', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2018-07-29');\n fixture.componentInstance.events = [\n {\n start: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(3, 'hours')\n .toDate(),\n end: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(1, 'day')\n .add(18, 'hours')\n .toDate(),\n title: 'foo',\n draggable: true,\n },\n ];\n fixture.componentInstance.snapDraggedEvents = false;\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const events = fixture.nativeElement.querySelectorAll(\n '.cal-event-container'\n );\n const dayWidth: number = events[0].parentElement.offsetWidth;\n const rect: ClientRect = events[0].getBoundingClientRect();\n let dragEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n dragEvent = e;\n });\n triggerDomEvent('mousedown', events[0], {\n clientX: rect.left,\n clientY: rect.top,\n button: 0,\n });\n fixture.detectChanges();\n const timeEvents = fixture.nativeElement.querySelector('.cal-time-events');\n triggerDomEvent('mousemove', timeEvents, {\n clientX: rect.left + dayWidth - 5,\n clientY: rect.top + 95,\n });\n fixture.detectChanges();\n triggerDomEvent('mouseup', timeEvents, {\n clientX: rect.left + dayWidth - 5,\n clientY: rect.top + 95,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(dragEvent).to.deep.equal({\n type: 'drag',\n allDay: false,\n event: fixture.componentInstance.events[0],\n newStart: moment(fixture.componentInstance.events[0].start)\n .add(1, 'day')\n .add(1, 'hour')\n .add(30, 'minutes')\n .toDate(),\n newEnd: moment(fixture.componentInstance.events[0].end)\n .add(1, 'day')\n .add(1, 'hour')\n .add(30, 'minutes')\n .toDate(),\n });\n });\n\n it('should drag time events back to their original position while not snapping to a grid', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2018-07-29');\n const originalEvent = {\n start: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(3, 'hours')\n .toDate(),\n end: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(5, 'hours')\n .toDate(),\n title: 'foo',\n draggable: true,\n };\n fixture.componentInstance.events = [originalEvent];\n fixture.componentInstance.snapDraggedEvents = false;\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event = fixture.nativeElement.querySelector('.cal-event-container');\n const rect: ClientRect = event.getBoundingClientRect();\n let dragEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n dragEvent = e;\n });\n triggerDomEvent('mousedown', event, {\n clientX: rect.left,\n clientY: rect.top,\n button: 0,\n });\n const timeEvents = fixture.nativeElement.querySelector('.cal-time-events');\n fixture.detectChanges();\n triggerDomEvent('mousemove', timeEvents, {\n clientX: rect.left,\n clientY: rect.top + 95,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', timeEvents, {\n clientX: rect.left,\n clientY: rect.top,\n });\n fixture.detectChanges();\n triggerDomEvent('mouseup', timeEvents, {\n clientX: rect.left,\n clientY: rect.top,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(dragEvent.newStart).to.deep.equal(originalEvent.start);\n expect(dragEvent.newEnd).to.deep.equal(originalEvent.end);\n });\n\n it('should drag an all day event onto the time grid', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2018-07-29');\n fixture.componentInstance.events = [\n {\n start: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(1, 'days')\n .add(3, 'hours')\n .toDate(),\n end: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(2, 'days')\n .add(18, 'hours')\n .toDate(),\n title: 'foo',\n draggable: true,\n allDay: true,\n },\n ];\n fixture.componentInstance.snapDraggedEvents = false;\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event = fixture.nativeElement.querySelector('.cal-event-container');\n const rect: ClientRect = event.getBoundingClientRect();\n let dragEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n dragEvent = e;\n });\n triggerDomEvent('mousedown', event, {\n clientX: rect.left,\n clientY: rect.top,\n button: 0,\n });\n fixture.detectChanges();\n const hourSegment = fixture.nativeElement.querySelectorAll(\n '.cal-day-columns mwl-calendar-week-view-hour-segment'\n )[3];\n const hourSegmentPosition = hourSegment.getBoundingClientRect();\n triggerDomEvent('mousemove', hourSegment, {\n clientX: hourSegmentPosition.left + 1,\n clientY: hourSegmentPosition.top + 1,\n });\n fixture.detectChanges();\n triggerDomEvent('mouseup', hourSegment, {\n clientX: hourSegmentPosition.left + 1,\n clientY: hourSegmentPosition.top + 1,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(dragEvent).to.deep.equal({\n type: 'drop',\n allDay: false,\n event: fixture.componentInstance.events[0],\n newStart: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(90, 'minutes')\n .toDate(),\n });\n });\n\n it('should drag a time event onto the all day grid', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2018-07-29');\n fixture.componentInstance.events = [\n {\n start: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(1, 'days')\n .add(3, 'hours')\n .toDate(),\n end: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(2, 'days')\n .add(18, 'hours')\n .toDate(),\n title: 'foo',\n draggable: true,\n allDay: false,\n },\n {\n start: moment(new Date('2018-07-29')).startOf('day').toDate(),\n allDay: true,\n title: 'bar',\n },\n ];\n fixture.componentInstance.snapDraggedEvents = false;\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event = fixture.nativeElement.querySelector(\n '.cal-time-events .cal-event-container'\n );\n const rect: ClientRect = event.getBoundingClientRect();\n let dragEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n dragEvent = e;\n });\n triggerDomEvent('mousedown', event, {\n clientX: rect.left,\n clientY: rect.top,\n button: 0,\n });\n fixture.detectChanges();\n const dayColumn = fixture.nativeElement.querySelectorAll(\n '.cal-all-day-events .cal-day-column'\n )[2];\n const dayColumnPosition = dayColumn.getBoundingClientRect();\n triggerDomEvent('mousemove', dayColumn, {\n clientX: dayColumnPosition.left + 1,\n clientY: dayColumnPosition.top + 1,\n });\n fixture.detectChanges();\n triggerDomEvent('mouseup', dayColumn, {\n clientX: dayColumnPosition.left + 1,\n clientY: dayColumnPosition.top + 1,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(dragEvent).to.deep.equal({\n type: 'drop',\n allDay: true,\n event: fixture.componentInstance.events[0],\n newStart: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(2, 'days')\n .toDate(),\n });\n });\n\n it('should handle time event objects changing when resizing', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2018-07-29');\n fixture.componentInstance.events = [\n {\n id: '1',\n start: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(3, 'hours')\n .toDate(),\n end: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(18, 'hours')\n .toDate(),\n title: 'foo',\n resizable: {\n afterEnd: true,\n },\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event: HTMLElement = fixture.nativeElement.querySelector(\n '.cal-event-container'\n );\n const dayWidth: number = event.parentElement.offsetWidth;\n const rect: ClientRect = event.getBoundingClientRect();\n const resizeHandle = event.querySelector('.cal-resize-handle-after-end');\n let resizeEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n resizeEvent = e;\n });\n triggerDomEvent('mousedown', resizeHandle, {\n clientX: rect.right,\n clientY: rect.bottom,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', document.body, {\n clientX: rect.right + dayWidth,\n clientY: rect.bottom + 90,\n });\n fixture.detectChanges();\n fixture.componentInstance.events = [\n {\n ...fixture.componentInstance.events[0],\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n triggerDomEvent('mouseup', document.body, {\n clientX: rect.right + dayWidth,\n clientY: rect.bottom + 90,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n });\n\n it('should drag time events to different days and columns while snapping to a grid and excluding weekends', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2019-03-01');\n fixture.componentInstance.excludeDays = [0, 6];\n fixture.componentInstance.daysInWeek = 4;\n fixture.componentInstance.events = [\n {\n start: moment(new Date('2019-03-01'))\n .startOf('day')\n .add(3, 'hours')\n .toDate(),\n end: moment(new Date('2019-03-01'))\n .startOf('day')\n .add(18, 'hours')\n .toDate(),\n title: 'foo',\n draggable: true,\n },\n ];\n fixture.componentInstance.ngOnChanges({\n viewDate: {},\n events: {},\n excludeDays: {},\n daysInWeek: {},\n });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const events = fixture.nativeElement.querySelectorAll(\n '.cal-event-container'\n );\n const dayWidth: number = events[0].parentElement.offsetWidth;\n const rect1: ClientRect = events[0].getBoundingClientRect();\n let dragEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n dragEvent = e;\n });\n triggerDomEvent('mousedown', events[0], {\n clientX: rect1.right,\n clientY: rect1.bottom,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', events[0], {\n clientX: rect1.right + dayWidth - 5,\n clientY: rect1.bottom + 95,\n });\n fixture.detectChanges();\n triggerDomEvent('mouseup', events[0], {\n clientX: rect1.right + dayWidth - 5,\n clientY: rect1.bottom + 95,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(dragEvent).to.deep.equal({\n type: 'drag',\n allDay: false,\n event: fixture.componentInstance.events[0],\n newStart: moment(fixture.componentInstance.events[0].start)\n .add(3, 'days')\n .add(1, 'hour')\n .add(30, 'minutes')\n .toDate(),\n newEnd: moment(fixture.componentInstance.events[0].end)\n .add(3, 'days')\n .add(1, 'hour')\n .add(30, 'minutes')\n .toDate(),\n });\n });\n\n it('should drag time events to different days and columns when rtl is enabled', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.nativeElement.setAttribute('dir', 'rtl');\n fixture.componentInstance.viewDate = new Date('2019-03-01');\n fixture.componentInstance.events = [\n {\n start: moment(new Date('2019-03-01'))\n .startOf('day')\n .add(3, 'hours')\n .toDate(),\n end: moment(new Date('2019-03-01'))\n .startOf('day')\n .add(18, 'hours')\n .toDate(),\n title: 'foo',\n draggable: true,\n },\n ];\n fixture.componentInstance.ngOnChanges({\n viewDate: {},\n events: {},\n excludeDays: {},\n daysInWeek: {},\n });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const events = fixture.nativeElement.querySelectorAll(\n '.cal-event-container'\n );\n const dayWidth: number = events[0].parentElement.offsetWidth;\n const rect1: ClientRect = events[0].getBoundingClientRect();\n let dragEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n dragEvent = e;\n });\n triggerDomEvent('mousedown', events[0], {\n clientX: rect1.right,\n clientY: rect1.bottom,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', events[0], {\n clientX: rect1.right + dayWidth,\n clientY: rect1.bottom,\n });\n fixture.detectChanges();\n triggerDomEvent('mouseup', events[0], {\n clientX: rect1.right + dayWidth,\n clientY: rect1.bottom,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(dragEvent).to.deep.equal({\n type: 'drag',\n allDay: false,\n event: fixture.componentInstance.events[0],\n newStart: moment(fixture.componentInstance.events[0].start)\n .subtract(1, 'days')\n .toDate(),\n newEnd: moment(fixture.componentInstance.events[0].end)\n .subtract(1, 'days')\n .toDate(),\n });\n });\n\n it('should drag time events to different days and columns while snapping to a grid and excluding weekends with custom hour duration', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2019-03-01');\n fixture.componentInstance.excludeDays = [0, 6];\n fixture.componentInstance.daysInWeek = 4;\n fixture.componentInstance.events = [\n {\n start: moment(new Date('2019-03-01'))\n .startOf('day')\n .add(4, 'hours')\n .toDate(),\n end: moment(new Date('2019-03-01'))\n .startOf('day')\n .add(18, 'hours')\n .toDate(),\n title: 'foo',\n draggable: true,\n },\n ];\n fixture.componentInstance.hourDuration = 40;\n fixture.componentInstance.ngOnChanges({\n viewDate: {},\n events: {},\n excludeDays: {},\n daysInWeek: {},\n hourColumns: {},\n });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const events = fixture.nativeElement.querySelectorAll(\n '.cal-event-container'\n );\n const dayWidth: number = events[0].parentElement.offsetWidth;\n const rect1: ClientRect = events[0].getBoundingClientRect();\n let dragEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n dragEvent = e;\n });\n triggerDomEvent('mousedown', events[0], {\n clientX: rect1.right,\n clientY: rect1.bottom,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', events[0], {\n clientX: rect1.right + dayWidth - 5,\n clientY: rect1.bottom + 95,\n });\n fixture.detectChanges();\n triggerDomEvent('mouseup', events[0], {\n clientX: rect1.right + dayWidth - 5,\n clientY: rect1.bottom + 95,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(dragEvent).to.deep.equal({\n type: 'drag',\n allDay: false,\n event: fixture.componentInstance.events[0],\n newStart: moment(fixture.componentInstance.events[0].start)\n .add(3, 'days')\n .add(1, 'hour')\n .toDate(),\n newEnd: moment(fixture.componentInstance.events[0].end)\n .add(3, 'days')\n .add(1, 'hour')\n .toDate(),\n });\n });\n\n it('should preserve css classes on hour segments when dragging an event', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2018-07-29');\n fixture.componentInstance.events = [\n {\n start: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(3, 'days')\n .toDate(),\n title: 'bar',\n draggable: true,\n },\n ];\n fixture.componentInstance.beforeViewRender.subscribe(\n (view: CalendarWeekViewBeforeRenderEvent) => {\n view.hourColumns.forEach((column) => {\n column.hours.forEach((hour) => {\n hour.segments.forEach((segment) => {\n segment.cssClass = 'disabled-cell';\n });\n });\n });\n }\n );\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n expect(\n fixture.nativeElement\n .querySelector('.cal-hour-segment')\n .classList.contains('disabled-cell')\n ).to.be.true;\n document.body.appendChild(fixture.nativeElement);\n const events = fixture.nativeElement.querySelectorAll(\n '.cal-event-container'\n );\n const dayWidth: number = events[0].parentElement.offsetWidth;\n const rect: ClientRect = events[0].getBoundingClientRect();\n triggerDomEvent('mousedown', events[0], {\n clientX: rect.right,\n clientY: rect.bottom,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', events[0], {\n clientX: rect.right + dayWidth - 5,\n clientY: rect.bottom + 95,\n });\n fixture.detectChanges();\n expect(\n fixture.nativeElement\n .querySelector('.cal-hour-segment')\n .classList.contains('disabled-cell')\n ).to.be.true;\n });\n\n it('should resize a time event to the minimum height', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2018-07-29');\n fixture.componentInstance.events = [\n {\n start: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(3, 'hours')\n .toDate(),\n end: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(5, 'hours')\n .toDate(),\n title: 'foo',\n resizable: {\n afterEnd: true,\n },\n },\n ];\n fixture.componentInstance.minimumEventHeight = 1;\n fixture.componentInstance.hourSegmentHeight = 20;\n fixture.componentInstance.ngOnChanges({\n viewDate: {},\n events: {},\n hourSegmentHeight: {},\n });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event: HTMLElement = fixture.nativeElement.querySelectorAll(\n '.cal-event-container'\n )[0];\n const rect: ClientRect = event.getBoundingClientRect();\n const resizeHandle = event.querySelector('.cal-resize-handle-after-end');\n let resizeEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n resizeEvent = e;\n });\n triggerDomEvent('mousedown', resizeHandle, {\n clientX: rect.right,\n clientY: rect.bottom,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', document.body, {\n clientX: rect.right,\n clientY: rect.bottom - 200,\n });\n fixture.detectChanges();\n expect(event.getBoundingClientRect().height).to.equal(1);\n triggerDomEvent('mouseup', document.body, {\n clientX: rect.right,\n clientY: rect.bottom - 200,\n button: 0,\n });\n fixture.detectChanges();\n expect(resizeEvent).to.deep.equal({\n type: 'resize',\n event: fixture.componentInstance.events[0],\n newStart: fixture.componentInstance.events[0].start,\n newEnd: moment(fixture.componentInstance.events[0].start)\n .add(1, 'minutes')\n .toDate(),\n });\n });\n\n it('should resize a time event to the minimum height with custom hour duration', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2018-07-29');\n fixture.componentInstance.events = [\n {\n start: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(4, 'hours')\n .toDate(),\n end: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(6, 'hours')\n .toDate(),\n title: 'foo',\n resizable: {\n afterEnd: true,\n },\n },\n ];\n fixture.componentInstance.hourDuration = 40;\n fixture.componentInstance.minimumEventHeight = 1;\n fixture.componentInstance.hourSegmentHeight = 20;\n fixture.componentInstance.ngOnChanges({\n viewDate: {},\n events: {},\n hourDuration: {},\n hourSegmentHeight: {},\n });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event: HTMLElement = fixture.nativeElement.querySelectorAll(\n '.cal-event-container'\n )[0];\n const rect: ClientRect = event.getBoundingClientRect();\n const resizeHandle = event.querySelector('.cal-resize-handle-after-end');\n let resizeEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n resizeEvent = e;\n });\n triggerDomEvent('mousedown', resizeHandle, {\n clientX: rect.right,\n clientY: rect.bottom,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', document.body, {\n clientX: rect.right,\n clientY: rect.bottom - 120,\n });\n fixture.detectChanges();\n expect(event.getBoundingClientRect().height).to.equal(1);\n triggerDomEvent('mouseup', document.body, {\n clientX: rect.right,\n clientY: rect.bottom - 120,\n button: 0,\n });\n fixture.detectChanges();\n expect(resizeEvent).to.deep.equal({\n type: 'resize',\n event: fixture.componentInstance.events[0],\n newStart: fixture.componentInstance.events[0].start,\n newEnd: moment(fixture.componentInstance.events[0].start)\n .add(1, 'minutes')\n .toDate(),\n });\n });\n\n it('should allow css variables for colors', () => {\n const style = document.createElement('style');\n style.setAttribute('type', 'text/css');\n style.innerText = `\n :root {\n --white: #fff;\n --black: #000;\n }\n `;\n document.head.appendChild(style);\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.ngOnInit();\n fixture.componentInstance.viewDate = new Date('2016-06-01');\n fixture.componentInstance.events = [\n {\n start: new Date('2016-05-30'),\n end: new Date('2016-06-02'),\n title: 'foo',\n color: {\n primary: 'var(--white)',\n secondary: 'var(--black)',\n },\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n\n const computedStyles: CSSStyleDeclaration = window.getComputedStyle(\n fixture.nativeElement.querySelector('.cal-event')\n );\n expect(computedStyles.getPropertyValue('background-color')).to.equal(\n 'rgb(0, 0, 0)'\n );\n expect(computedStyles.getPropertyValue('border-color')).to.equal(\n 'rgb(255, 255, 255)'\n );\n document.head.appendChild(style);\n });\n\n it('should allow external events to be dropped on the hour segments', () => {\n const fixture = TestBed.createComponent(TestComponent);\n fixture.componentInstance.viewDate = new Date('2016-06-27');\n fixture.componentInstance.events = [];\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const externalEventFixture = fixture.debugElement.query(\n By.directive(ExternalEventComponent)\n );\n\n const event: HTMLElement =\n externalEventFixture.nativeElement.querySelector('.external-event');\n const eventPosition: ClientRect = event.getBoundingClientRect();\n\n const segments: HTMLElement[] = Array.from(\n fixture.nativeElement.querySelectorAll(\n '.cal-day-columns .cal-hour-segment'\n )\n );\n const segment = segments[1];\n const segmentPosition: ClientRect = segment.getBoundingClientRect();\n\n const eventDropped = fixture.componentInstance.eventTimesChanged;\n\n triggerDomEvent('mousedown', event, {\n clientY: eventPosition.top,\n clientX: eventPosition.left,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', document.body, {\n clientY: segmentPosition.top,\n clientX: segmentPosition.left,\n });\n fixture.detectChanges();\n triggerDomEvent('mouseup', document.body, {\n clientY: segmentPosition.top,\n clientX: segmentPosition.left,\n button: 0,\n });\n fixture.detectChanges();\n expect(eventDropped).to.have.been.calledWith({\n type: 'drop',\n event: externalEventFixture.componentInstance.event,\n newStart: moment('2016-06-27')\n .startOf('week')\n .add(30, 'minutes')\n .toDate(),\n allDay: false,\n });\n expect(eventDropped).to.have.been.calledOnce;\n });\n\n it('should update event times when dragging', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n eventTitle.week = ({ start, end }: CalendarEvent) => {\n return (\n formatDate(start, 'H:mm', 'en') + ' - ' + formatDate(end, 'H:mm', 'en')\n );\n };\n fixture.componentInstance.viewDate = new Date('2018-07-29');\n const originalEvent = {\n start: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(3, 'hours')\n .toDate(),\n end: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(5, 'hours')\n .toDate(),\n title: 'foo',\n draggable: true,\n };\n fixture.componentInstance.events = [originalEvent];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event = fixture.nativeElement.querySelector('.cal-event-container');\n const rect: ClientRect = event.getBoundingClientRect();\n triggerDomEvent('mousedown', event, {\n clientX: rect.right,\n clientY: rect.bottom,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', event, {\n clientX: rect.right,\n clientY: rect.bottom + 95,\n });\n fixture.detectChanges();\n const updatedEvent1 = fixture.nativeElement.querySelector(\n '.cal-event-container'\n );\n expect(updatedEvent1.innerText.trim()).to.equal('4:30 - 6:30');\n });\n\n it('should update event times when dragging and not snapping to a grid', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n eventTitle.week = ({ start, end }: CalendarEvent) => {\n return (\n formatDate(start, 'H:mm', 'en') + ' - ' + formatDate(end, 'H:mm', 'en')\n );\n };\n fixture.componentInstance.viewDate = new Date('2018-07-29');\n fixture.componentInstance.snapDraggedEvents = false;\n const originalEvent = {\n start: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(3, 'hours')\n .toDate(),\n end: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(5, 'hours')\n .toDate(),\n title: 'foo',\n draggable: true,\n };\n fixture.componentInstance.events = [originalEvent];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event = fixture.nativeElement.querySelector('.cal-event-container');\n const rect: ClientRect = event.getBoundingClientRect();\n triggerDomEvent('mousedown', event, {\n clientX: rect.right,\n clientY: rect.bottom,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', event, {\n clientX: rect.right,\n clientY: rect.bottom + 95,\n });\n fixture.detectChanges();\n const updatedEvent1 = fixture.nativeElement.querySelector(\n '.cal-event-container'\n );\n expect(updatedEvent1.innerText.trim()).to.equal('4:30 - 6:30');\n });\n\n it('should set a minimum event height', () => {\n const fixture = TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = moment().startOf('week').toDate();\n fixture.componentInstance.events = [\n {\n start: moment().startOf('week').toDate(),\n end: moment().startOf('week').add(5, 'minutes').toDate(),\n title: 'foo',\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n expect(\n fixture.nativeElement.querySelector('.cal-event-container').offsetHeight\n ).to.equal(30);\n fixture.destroy();\n });\n\n it('should drag a time event down and into another day', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2020-05-03');\n fixture.componentInstance.daysInWeek = 2;\n fixture.componentInstance.events = [\n {\n start: moment(new Date('2020-05-03')).startOf('day').hours(20).toDate(),\n end: moment(new Date('2020-05-03')).startOf('day').hours(23).toDate(),\n title: 'foo',\n draggable: true,\n },\n ];\n fixture.componentInstance.ngOnChanges({\n viewDate: {},\n events: {},\n });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const events = fixture.nativeElement.querySelectorAll(\n '.cal-event-container'\n );\n const rect1: ClientRect = events[0].getBoundingClientRect();\n let dragEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n dragEvent = e;\n });\n triggerDomEvent('mousedown', events[0], {\n clientX: 0,\n clientY: rect1.bottom,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', events[0], {\n clientX: 0,\n clientY: rect1.bottom + 95,\n });\n fixture.detectChanges();\n triggerDomEvent('mouseup', events[0], {\n clientX: 0,\n clientY: rect1.bottom + 95,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(dragEvent).to.deep.equal({\n type: 'drag',\n allDay: false,\n event: fixture.componentInstance.events[0],\n newStart: moment(fixture.componentInstance.events[0].start)\n .add(1, 'hour')\n .add(30, 'minutes')\n .toDate(),\n newEnd: moment(fixture.componentInstance.events[0].end)\n .add(1, 'hour')\n .add(30, 'minutes')\n .toDate(),\n });\n });\n\n describe('current time marker', () => {\n let clock: any;\n beforeEach(() => {\n clock = fakeTimers.install({\n now: new Date('2019-09-30T11:30:25.288Z').getTime(),\n toFake: ['Date'],\n });\n });\n\n afterEach(() => {\n clock.uninstall();\n });\n\n it('should show a current time marker', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date();\n fixture.componentInstance.ngOnChanges({\n viewDate: {},\n hourSegmentHeight: {},\n });\n fixture.detectChanges();\n const marker = fixture.nativeElement.querySelector(\n '.cal-day-columns .cal-day-column:nth-child(2) .cal-current-time-marker'\n );\n expect(marker.style.top).to.equal('690px');\n });\n\n it('should respect the start time', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date();\n fixture.componentInstance.dayStartHour = 3;\n fixture.componentInstance.dayStartMinute = 30;\n fixture.componentInstance.ngOnChanges({\n viewDate: {},\n hourSegmentHeight: {},\n });\n fixture.detectChanges();\n const marker = fixture.nativeElement.querySelector(\n '.cal-day-columns .cal-day-column:nth-child(2) .cal-current-time-marker'\n );\n expect(marker.style.top).to.equal('480px');\n });\n\n it('should respect the end time', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date();\n fixture.componentInstance.dayEndHour = 3;\n fixture.componentInstance.ngOnChanges({\n viewDate: {},\n hourSegmentHeight: {},\n });\n fixture.detectChanges();\n const marker = fixture.nativeElement.querySelector(\n '.cal-day-columns .cal-day-column:nth-child(2) .cal-current-time-marker'\n );\n expect(marker).to.equal(null);\n });\n\n it('should respect the hour segment count and height', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date();\n fixture.componentInstance.hourSegments = 4;\n fixture.componentInstance.hourSegmentHeight = 60;\n fixture.componentInstance.ngOnChanges({\n viewDate: {},\n hourSegmentHeight: {},\n });\n fixture.detectChanges();\n const marker = fixture.nativeElement.querySelector(\n '.cal-day-columns .cal-day-column:nth-child(2) .cal-current-time-marker'\n );\n expect(marker.style.top).to.equal('2760px');\n });\n\n it('should not change the all day event end date when ending the drop inside the hour grid', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date();\n fixture.componentInstance.events = [\n {\n title: 'foo',\n start: moment().startOf('week').toDate(),\n end: moment().startOf('week').add(2, 'days').toDate(),\n draggable: true,\n allDay: true,\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n // remove the header as it was causing the test to fail\n const header: HTMLElement =\n fixture.nativeElement.querySelector('.cal-day-headers');\n header.parentNode.removeChild(header);\n\n const eventDropped = sinon.spy();\n fixture.componentInstance.eventTimesChanged.subscribe(eventDropped);\n\n const event: HTMLElement = fixture.nativeElement.querySelector(\n '.cal-event-container'\n );\n const dayWidth: number = event.parentElement.offsetWidth / 7;\n const eventPosition: ClientRect = event.getBoundingClientRect();\n triggerDomEvent('mousedown', event, {\n clientX: eventPosition.right,\n clientY: eventPosition.top,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', document.body, {\n clientX: eventPosition.right + dayWidth,\n clientY: eventPosition.top + 100,\n });\n fixture.detectChanges();\n triggerDomEvent('mouseup', document.body, {\n clientX: eventPosition.right + dayWidth,\n clientY: eventPosition.top + 100,\n button: 0,\n });\n fixture.detectChanges();\n\n expect(eventDropped).to.have.been.calledOnce;\n });\n });\n});\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/week/calendar-week-view/calendar-week-view.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 82,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 422,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        181,
                        2036
                      ],
                      "text": ", ChangeDetectionStrategy,\n} from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\nimport {\n WeekDay,\n CalendarEvent,\n WeekViewAllDayEvent,\n WeekView,\n ViewPeriod,\n WeekViewHourColumn,\n WeekViewTimeEvent,\n WeekViewHourSegment,\n WeekViewHour,\n WeekViewAllDayEventRow,\n} from 'calendar-utils';\nimport { ResizeEvent } from 'angular-resizable-element';\nimport { ResizeCursors } from 'angular-resizable-element';\nimport { CalendarDragHelper } from '../../common/calendar-drag-helper/calendar-drag-helper.provider';\nimport { CalendarResizeHelper } from '../../common/calendar-resize-helper/calendar-resize-helper.provider';\nimport {\n CalendarEventTimesChangedEvent,\n CalendarEventTimesChangedEventType,\n} from '../../common/calendar-event-times-changed-event/calendar-event-times-changed-event.interface';\nimport { CalendarUtils } from '../../common/calendar-utils/calendar-utils.provider';\nimport {\n validateEvents,\n roundToNearest,\n trackByWeekDayHeaderDate,\n trackByHourSegment,\n trackByHour,\n getMinutesMoved,\n getDefaultEventEnd,\n addDaysWithExclusions,\n isDraggedWithinPeriod,\n shouldFireDroppedEvent,\n getWeekViewPeriod,\n trackByWeekAllDayEvent,\n trackByWeekTimeEvent,\n} from '../../common/util/util';\nimport { DateAdapter } from '../../../date-adapters/date-adapter';\nimport {\n DragEndEvent,\n DropEvent,\n DragMoveEvent,\n ValidateDrag,\n} from 'angular-draggable-droppable';\nimport { PlacementArray } from 'positioning';\n\nexport interface WeekViewAllDayEventResize {\n originalOffset: number;\n originalSpan: number;\n edge: string;\n}\n\nexport interface CalendarWeekViewBeforeRenderEvent extends WeekView {\n header: WeekDay[];\n}\n\n/**\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Shows all events on a given week. Example usage:\n angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```typescript\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json <mwl-calendar-week-view\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json [viewDate]=\"viewDate\"\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json [events]=\"events\">\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json </mwl-calendar-week-view>\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```\n */\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (336). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 84,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 421,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 429,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 429,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 435,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 435,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 440,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 440,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 445,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 445,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 450,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 450,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 455,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 455,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 460,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 460,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 465,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 465,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 471,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 471,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 487,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 487,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 492,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 492,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 497,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 497,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 502,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 502,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 507,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 507,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 513,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 513,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 518,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 518,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 523,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 523,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 528,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 528,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 533,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 533,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 538,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 538,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 543,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 543,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 548,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 548,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 553,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 553,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 558,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 558,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 563,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 563,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 568,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 568,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 573,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 573,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 578,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 578,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 584,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 584,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 589,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 589,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 595,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 595,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 602,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 602,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 609,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 609,
                "endColumn": 29,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        20250,
                        20250
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 617,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 617,
                "endColumn": 25,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        20411,
                        20411
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 625,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 625,
                "endColumn": 30,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        20609,
                        20609
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 632,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 632,
                "endColumn": 29,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        20917,
                        20917
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 638,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 638,
                "endColumn": 31,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        21064,
                        21064
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/sort-lifecycle-methods",
                "severity": 2,
                "message": "Lifecycle Methods are not declared in order of execution",
                "line": 786,
                "column": 3,
                "nodeType": "Identifier",
                "messageId": "lifecycleMethodsNotSorted",
                "endLine": 786,
                "endColumn": 14
              },
              {
                "ruleId": "@angular-eslint/sort-lifecycle-methods",
                "severity": 2,
                "message": "Lifecycle Methods are not declared in order of execution",
                "line": 839,
                "column": 3,
                "nodeType": "Identifier",
                "messageId": "lifecycleMethodsNotSorted",
                "endLine": 839,
                "endColumn": 18
              }
            ],
            "suppressedMessages": [],
            "errorCount": 41,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n Input,\n Output,\n EventEmitter,\n ChangeDetectorRef,\n OnChanges,\n OnInit,\n OnDestroy,\n LOCALE_ID,\n Inject,\n TemplateRef,\n ElementRef,\n AfterViewInit,\n} from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\nimport {\n WeekDay,\n CalendarEvent,\n WeekViewAllDayEvent,\n WeekView,\n ViewPeriod,\n WeekViewHourColumn,\n WeekViewTimeEvent,\n WeekViewHourSegment,\n WeekViewHour,\n WeekViewAllDayEventRow,\n} from 'calendar-utils';\nimport { ResizeEvent } from 'angular-resizable-element';\nimport { ResizeCursors } from 'angular-resizable-element';\nimport { CalendarDragHelper } from '../../common/calendar-drag-helper/calendar-drag-helper.provider';\nimport { CalendarResizeHelper } from '../../common/calendar-resize-helper/calendar-resize-helper.provider';\nimport {\n CalendarEventTimesChangedEvent,\n CalendarEventTimesChangedEventType,\n} from '../../common/calendar-event-times-changed-event/calendar-event-times-changed-event.interface';\nimport { CalendarUtils } from '../../common/calendar-utils/calendar-utils.provider';\nimport {\n validateEvents,\n roundToNearest,\n trackByWeekDayHeaderDate,\n trackByHourSegment,\n trackByHour,\n getMinutesMoved,\n getDefaultEventEnd,\n addDaysWithExclusions,\n isDraggedWithinPeriod,\n shouldFireDroppedEvent,\n getWeekViewPeriod,\n trackByWeekAllDayEvent,\n trackByWeekTimeEvent,\n} from '../../common/util/util';\nimport { DateAdapter } from '../../../date-adapters/date-adapter';\nimport {\n DragEndEvent,\n DropEvent,\n DragMoveEvent,\n ValidateDrag,\n} from 'angular-draggable-droppable';\nimport { PlacementArray } from 'positioning';\n\nexport interface WeekViewAllDayEventResize {\n originalOffset: number;\n originalSpan: number;\n edge: string;\n}\n\nexport interface CalendarWeekViewBeforeRenderEvent extends WeekView {\n header: WeekDay[];\n}\n\n/**\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Shows all events on a given week. Example usage:\n angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```typescript\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json <mwl-calendar-week-view\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json [viewDate]=\"viewDate\"\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json [events]=\"events\">\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json </mwl-calendar-week-view>\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```\n */\n@Component({\n selector: 'mwl-calendar-week-view',\n template: `\n <div class=\"cal-week-view\" role=\"grid\">\n <mwl-calendar-week-view-header\n [days]=\"days\"\n [locale]=\"locale\"\n [customTemplate]=\"headerTemplate\"\n (dayHeaderClicked)=\"dayHeaderClicked.emit($event)\"\n (eventDropped)=\"\n eventDropped({ dropData: $event }, $event.newStart, true)\n \"\n (dragEnter)=\"dateDragEnter($event.date)\"\n >\n </mwl-calendar-week-view-header>\n <div\n class=\"cal-all-day-events\"\n #allDayEventsContainer\n *ngIf=\"view.allDayEventRows.length > 0\"\n mwlDroppable\n (dragEnter)=\"dragEnter('allDay')\"\n (dragLeave)=\"dragLeave('allDay')\"\n >\n <div class=\"cal-day-columns\">\n <div class=\"cal-time-label-column\">\n <ng-container\n *ngTemplateOutlet=\"allDayEventsLabelTemplate\"\n ></ng-container>\n </div>\n <div\n class=\"cal-day-column\"\n *ngFor=\"let day of days; trackBy: trackByWeekDayHeaderDate\"\n mwlDroppable\n dragOverClass=\"cal-drag-over\"\n (drop)=\"eventDropped($event, day.date, true)\"\n (dragEnter)=\"dateDragEnter(day.date)\"\n ></div>\n </div>\n <div\n *ngFor=\"let eventRow of view.allDayEventRows; trackBy: trackById\"\n #eventRowContainer\n class=\"cal-events-row\"\n >\n <div\n *ngFor=\"\n let allDayEvent of eventRow.row;\n trackBy: trackByWeekAllDayEvent\n \"\n #event\n class=\"cal-event-container\"\n [class.cal-draggable]=\"\n allDayEvent.event.draggable && allDayEventResizes.size === 0\n \"\n [class.cal-starts-within-week]=\"!allDayEvent.startsBeforeWeek\"\n [class.cal-ends-within-week]=\"!allDayEvent.endsAfterWeek\"\n [ngClass]=\"allDayEvent.event?.cssClass\"\n [style.width.%]=\"(100 / days.length) angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json allDayEvent.span\"\n [style.marginLeft.%]=\"\n rtl ? null : (100 / days.length) angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json allDayEvent.offset\n \"\n [style.marginRight.%]=\"\n rtl ? (100 / days.length) angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json allDayEvent.offset : null\n \"\n mwlResizable\n [resizeCursors]=\"resizeCursors\"\n [resizeSnapGrid]=\"{ left: dayColumnWidth, right: dayColumnWidth }\"\n [validateResize]=\"validateResize\"\n (resizeStart)=\"\n allDayEventResizeStarted(eventRowContainer, allDayEvent, $event)\n \"\n (resizing)=\"\n allDayEventResizing(allDayEvent, $event, dayColumnWidth)\n \"\n (resizeEnd)=\"allDayEventResizeEnded(allDayEvent)\"\n mwlDraggable\n dragActiveClass=\"cal-drag-active\"\n [dropData]=\"{ event: allDayEvent.event, calendarId: calendarId }\"\n [dragAxis]=\"{\n x: allDayEvent.event.draggable && allDayEventResizes.size === 0,\n y:\n !snapDraggedEvents &&\n allDayEvent.event.draggable &&\n allDayEventResizes.size === 0\n }\"\n [dragSnapGrid]=\"snapDraggedEvents ? { x: dayColumnWidth } : {}\"\n [validateDrag]=\"validateDrag\"\n [touchStartLongPress]=\"{ delay: 300, delta: 30 }\"\n (dragStart)=\"\n dragStarted(eventRowContainer, event, allDayEvent, false)\n \"\n (dragging)=\"allDayEventDragMove()\"\n (dragEnd)=\"dragEnded(allDayEvent, $event, dayColumnWidth)\"\n >\n <div\n class=\"cal-resize-handle cal-resize-handle-before-start\"\n *ngIf=\"\n allDayEvent.event?.resizable?.beforeStart &&\n !allDayEvent.startsBeforeWeek\n \"\n mwlResizeHandle\n [resizeEdges]=\"{ left: true }\"\n ></div>\n <mwl-calendar-week-view-event\n [locale]=\"locale\"\n [weekEvent]=\"allDayEvent\"\n [tooltipPlacement]=\"tooltipPlacement\"\n [tooltipTemplate]=\"tooltipTemplate\"\n [tooltipAppendToBody]=\"tooltipAppendToBody\"\n [tooltipDelay]=\"tooltipDelay\"\n [customTemplate]=\"eventTemplate\"\n [eventTitleTemplate]=\"eventTitleTemplate\"\n [eventActionsTemplate]=\"eventActionsTemplate\"\n [daysInWeek]=\"daysInWeek\"\n (eventClicked)=\"\n eventClicked.emit({\n event: allDayEvent.event,\n sourceEvent: $event.sourceEvent\n })\n \"\n >\n </mwl-calendar-week-view-event>\n <div\n class=\"cal-resize-handle cal-resize-handle-after-end\"\n *ngIf=\"\n allDayEvent.event?.resizable?.afterEnd &&\n !allDayEvent.endsAfterWeek\n \"\n mwlResizeHandle\n [resizeEdges]=\"{ right: true }\"\n ></div>\n </div>\n </div>\n </div>\n <div\n class=\"cal-time-events\"\n mwlDroppable\n (dragEnter)=\"dragEnter('time')\"\n (dragLeave)=\"dragLeave('time')\"\n >\n <div\n class=\"cal-time-label-column\"\n *ngIf=\"view.hourColumns.length > 0 && daysInWeek !== 1\"\n >\n <div\n *ngFor=\"\n let hour of view.hourColumns[0].hours;\n trackBy: trackByHour;\n let odd = odd\n \"\n class=\"cal-hour\"\n [class.cal-hour-odd]=\"odd\"\n >\n <mwl-calendar-week-view-hour-segment\n *ngFor=\"let segment of hour.segments; trackBy: trackByHourSegment\"\n [style.height.px]=\"hourSegmentHeight\"\n [segment]=\"segment\"\n [segmentHeight]=\"hourSegmentHeight\"\n [locale]=\"locale\"\n [customTemplate]=\"hourSegmentTemplate\"\n [isTimeLabel]=\"true\"\n [daysInWeek]=\"daysInWeek\"\n >\n </mwl-calendar-week-view-hour-segment>\n </div>\n </div>\n <div\n class=\"cal-day-columns\"\n [class.cal-resize-active]=\"timeEventResizes.size > 0\"\n #dayColumns\n >\n <div\n class=\"cal-day-column\"\n *ngFor=\"let column of view.hourColumns; trackBy: trackByHourColumn\"\n >\n <mwl-calendar-week-view-current-time-marker\n [columnDate]=\"column.date\"\n [dayStartHour]=\"dayStartHour\"\n [dayStartMinute]=\"dayStartMinute\"\n [dayEndHour]=\"dayEndHour\"\n [dayEndMinute]=\"dayEndMinute\"\n [hourSegments]=\"hourSegments\"\n [hourDuration]=\"hourDuration\"\n [hourSegmentHeight]=\"hourSegmentHeight\"\n [customTemplate]=\"currentTimeMarkerTemplate\"\n ></mwl-calendar-week-view-current-time-marker>\n <div class=\"cal-events-container\">\n <div\n *ngFor=\"\n let timeEvent of column.events;\n trackBy: trackByWeekTimeEvent\n \"\n #event\n class=\"cal-event-container\"\n [class.cal-draggable]=\"\n timeEvent.event.draggable && timeEventResizes.size === 0\n \"\n [class.cal-starts-within-day]=\"!timeEvent.startsBeforeDay\"\n [class.cal-ends-within-day]=\"!timeEvent.endsAfterDay\"\n [ngClass]=\"timeEvent.event.cssClass\"\n [hidden]=\"timeEvent.height === 0 && timeEvent.width === 0\"\n [style.top.px]=\"timeEvent.top\"\n [style.height.px]=\"timeEvent.height\"\n [style.left.%]=\"timeEvent.left\"\n [style.width.%]=\"timeEvent.width\"\n mwlResizable\n [resizeCursors]=\"resizeCursors\"\n [resizeSnapGrid]=\"{\n left: dayColumnWidth,\n right: dayColumnWidth,\n top: eventSnapSize || hourSegmentHeight,\n bottom: eventSnapSize || hourSegmentHeight\n }\"\n [validateResize]=\"validateResize\"\n [allowNegativeResizes]=\"true\"\n (resizeStart)=\"\n timeEventResizeStarted(dayColumns, timeEvent, $event)\n \"\n (resizing)=\"timeEventResizing(timeEvent, $event)\"\n (resizeEnd)=\"timeEventResizeEnded(timeEvent)\"\n mwlDraggable\n dragActiveClass=\"cal-drag-active\"\n [dropData]=\"{ event: timeEvent.event, calendarId: calendarId }\"\n [dragAxis]=\"{\n x: timeEvent.event.draggable && timeEventResizes.size === 0,\n y: timeEvent.event.draggable && timeEventResizes.size === 0\n }\"\n [dragSnapGrid]=\"\n snapDraggedEvents\n ? {\n x: dayColumnWidth,\n y: eventSnapSize || hourSegmentHeight\n }\n : {}\n \"\n [touchStartLongPress]=\"{ delay: 300, delta: 30 }\"\n [ghostDragEnabled]=\"!snapDraggedEvents\"\n [ghostElementTemplate]=\"weekEventTemplate\"\n [validateDrag]=\"validateDrag\"\n (dragStart)=\"dragStarted(dayColumns, event, timeEvent, true)\"\n (dragging)=\"dragMove(timeEvent, $event)\"\n (dragEnd)=\"dragEnded(timeEvent, $event, dayColumnWidth, true)\"\n >\n <div\n class=\"cal-resize-handle cal-resize-handle-before-start\"\n *ngIf=\"\n timeEvent.event?.resizable?.beforeStart &&\n !timeEvent.startsBeforeDay\n \"\n mwlResizeHandle\n [resizeEdges]=\"{\n left: true,\n top: true\n }\"\n ></div>\n <ng-template\n [ngTemplateOutlet]=\"weekEventTemplate\"\n ></ng-template>\n <ng-template #weekEventTemplate>\n <mwl-calendar-week-view-event\n [locale]=\"locale\"\n [weekEvent]=\"timeEvent\"\n [tooltipPlacement]=\"tooltipPlacement\"\n [tooltipTemplate]=\"tooltipTemplate\"\n [tooltipAppendToBody]=\"tooltipAppendToBody\"\n [tooltipDisabled]=\"dragActive || timeEventResizes.size > 0\"\n [tooltipDelay]=\"tooltipDelay\"\n [customTemplate]=\"eventTemplate\"\n [eventTitleTemplate]=\"eventTitleTemplate\"\n [eventActionsTemplate]=\"eventActionsTemplate\"\n [column]=\"column\"\n [daysInWeek]=\"daysInWeek\"\n (eventClicked)=\"\n eventClicked.emit({\n event: timeEvent.event,\n sourceEvent: $event.sourceEvent\n })\n \"\n >\n </mwl-calendar-week-view-event>\n </ng-template>\n <div\n class=\"cal-resize-handle cal-resize-handle-after-end\"\n *ngIf=\"\n timeEvent.event?.resizable?.afterEnd &&\n !timeEvent.endsAfterDay\n \"\n mwlResizeHandle\n [resizeEdges]=\"{\n right: true,\n bottom: true\n }\"\n ></div>\n </div>\n </div>\n\n <div\n *ngFor=\"\n let hour of column.hours;\n trackBy: trackByHour;\n let odd = odd\n \"\n class=\"cal-hour\"\n [class.cal-hour-odd]=\"odd\"\n >\n <mwl-calendar-week-view-hour-segment\n *ngFor=\"\n let segment of hour.segments;\n trackBy: trackByHourSegment\n \"\n [style.height.px]=\"hourSegmentHeight\"\n [segment]=\"segment\"\n [segmentHeight]=\"hourSegmentHeight\"\n [locale]=\"locale\"\n [customTemplate]=\"hourSegmentTemplate\"\n [daysInWeek]=\"daysInWeek\"\n (mwlClick)=\"\n hourSegmentClicked.emit({\n date: segment.date,\n sourceEvent: $event\n })\n \"\n [clickListenerDisabled]=\"\n hourSegmentClicked.observers.length === 0\n \"\n mwlDroppable\n [dragOverClass]=\"\n !dragActive || !snapDraggedEvents ? 'cal-drag-over' : null\n \"\n dragActiveClass=\"cal-drag-active\"\n (drop)=\"eventDropped($event, segment.date, false)\"\n (dragEnter)=\"dateDragEnter(segment.date)\"\n [isTimeLabel]=\"daysInWeek === 1\"\n >\n </mwl-calendar-week-view-hour-segment>\n </div>\n </div>\n </div>\n </div>\n </div>\n `,\n})\nexport class CalendarWeekViewComponent\n implements OnChanges, OnInit, OnDestroy, AfterViewInit\n{\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The current view date\n */\n @Input() viewDate: Date;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json An array of events to display on view\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The schema is available here: https://github.com/mattlewis92/calendar-utils/blob/c51689985f59a271940e30bc4e2c4e1fee3fcb5c/src/calendarUtils.ts#L49-L63\n */\n @Input() events: CalendarEvent[] = [];\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json An array of day indexes (0 = sunday, 1 = monday etc) that will be hidden on the view\n */\n @Input() excludeDays: number[] = [];\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json An observable that when emitted on will re-render the current view\n */\n @Input() refresh: Subject<any>;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The locale used to format dates\n */\n @Input() locale: string;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The placement of the event tooltip\n */\n @Input() tooltipPlacement: PlacementArray = 'auto';\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json A custom template to use for the event tooltips\n */\n @Input() tooltipTemplate: TemplateRef<any>;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Whether to append tooltips to the body or next to the trigger element\n */\n @Input() tooltipAppendToBody: boolean = true;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The delay in milliseconds before the tooltip should be displayed. If not provided the tooltip\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json will be displayed immediately.\n */\n @Input() tooltipDelay: number | null = null;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The start number of the week.\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json This is ignored when the `daysInWeek` input is also set as the `viewDate` will be used as the start of the week instead.\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Note, you should also pass this to the calendar title pipe so it shows the same days: {{ viewDate | calendarDate:(view + 'ViewTitle'):locale:weekStartsOn }}\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json If using the moment date adapter this option won't do anything and you'll need to set it globally like so:\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json moment.updateLocale('en', {\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json week: {\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json dow: 1, // set start of week to monday instead\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json doy: 0,\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json },\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json });\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```\n */\n @Input() weekStartsOn: number;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json A custom template to use to replace the header\n */\n @Input() headerTemplate: TemplateRef<any>;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json A custom template to use for week view events\n */\n @Input() eventTemplate: TemplateRef<any>;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json A custom template to use for event titles\n */\n @Input() eventTitleTemplate: TemplateRef<any>;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json A custom template to use for event actions\n */\n @Input() eventActionsTemplate: TemplateRef<any>;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The precision to display events.\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json `days` will round event start and end dates to the nearest day and `minutes` will not do this rounding\n */\n @Input() precision: 'days' | 'minutes' = 'days';\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json An array of day indexes (0 = sunday, 1 = monday etc) that indicate which days are weekends\n */\n @Input() weekendDays: number[];\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Whether to snap events to a grid when dragging\n */\n @Input() snapDraggedEvents: boolean = true;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The number of segments in an hour. Must divide equally into 60.\n */\n @Input() hourSegments: number = 2;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The duration of each segment group in minutes\n */\n @Input() hourDuration: number;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The height in pixels of each hour segment\n */\n @Input() hourSegmentHeight: number = 30;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The minimum height in pixels of each event\n */\n @Input() minimumEventHeight: number = 30;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The day start hours in 24 hour time. Must be 0-23\n */\n @Input() dayStartHour: number = 0;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The day start minutes. Must be 0-59\n */\n @Input() dayStartMinute: number = 0;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The day end hours in 24 hour time. Must be 0-23\n */\n @Input() dayEndHour: number = 23;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The day end minutes. Must be 0-59\n */\n @Input() dayEndMinute: number = 59;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json A custom template to use to replace the hour segment\n */\n @Input() hourSegmentTemplate: TemplateRef<any>;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The grid size to snap resizing and dragging of hourly events to\n */\n @Input() eventSnapSize: number;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json A custom template to use for the all day events label text\n */\n @Input() allDayEventsLabelTemplate: TemplateRef<any>;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The number of days in a week. Can be used to create a shorter or longer week view.\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The first day of the week will always be the `viewDate` and `weekStartsOn` if set will be ignored\n */\n @Input() daysInWeek: number;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json A custom template to use for the current time marker\n */\n @Input() currentTimeMarkerTemplate: TemplateRef<any>;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Allow you to customise where events can be dragged and resized to.\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Return true to allow dragging and resizing to the new location, or false to prevent it\n */\n @Input() validateEventTimesChanged: (\n event: CalendarEventTimesChangedEvent\n ) => boolean;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Customise the document cursor when dragging to resize an event\n */\n @Input() resizeCursors: Partial<\n Pick<ResizeCursors, 'leftOrRight' | 'topOrBottom'>\n >;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Called when a header week day is clicked. Adding a `cssClass` property on `$event.day` will add that class to the header element\n */\n @Output() dayHeaderClicked = new EventEmitter<{\n day: WeekDay;\n sourceEvent: MouseEvent;\n }>();\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Called when an event title is clicked\n */\n @Output() eventClicked = new EventEmitter<{\n event: CalendarEvent;\n sourceEvent: MouseEvent | KeyboardEvent;\n }>();\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Called when an event is resized or dragged and dropped\n */\n @Output() eventTimesChanged =\n new EventEmitter<CalendarEventTimesChangedEvent>();\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json An output that will be called before the view is rendered for the current week.\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json If you add the `cssClass` property to a day in the header it will add that class to the cell element in the template\n */\n @Output() beforeViewRender =\n new EventEmitter<CalendarWeekViewBeforeRenderEvent>();\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Called when an hour segment is clicked\n */\n @Output() hourSegmentClicked = new EventEmitter<{\n date: Date;\n sourceEvent: MouseEvent;\n }>();\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n days: WeekDay[];\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n view: WeekView;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n refreshSubscription: Subscription;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n allDayEventResizes: Map<WeekViewAllDayEvent, WeekViewAllDayEventResize> =\n new Map();\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n timeEventResizes: Map<CalendarEvent, ResizeEvent> = new Map();\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n eventDragEnterByType = {\n allDay: 0,\n time: 0,\n };\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n dragActive = false;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n dragAlreadyMoved = false;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n validateDrag: ValidateDrag;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n validateResize: (args: any) => boolean;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n dayColumnWidth: number;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n calendarId = Symbol('angular calendar week view id');\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n lastDraggedEvent: CalendarEvent;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n rtl = false;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n trackByWeekDayHeaderDate = trackByWeekDayHeaderDate;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n trackByHourSegment = trackByHourSegment;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n trackByHour = trackByHour;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n trackByWeekAllDayEvent = trackByWeekAllDayEvent;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n trackByWeekTimeEvent = trackByWeekTimeEvent;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n private lastDragEnterDate: Date;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n constructor(\n protected cdr: ChangeDetectorRef,\n protected utils: CalendarUtils,\n @Inject(LOCALE_ID) locale: string,\n protected dateAdapter: DateAdapter,\n protected element: ElementRef<HTMLElement>\n ) {\n this.locale = locale;\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n trackByHourColumn = (index: number, column: WeekViewHourColumn) =>\n column.hours[0] ? column.hours[0].segments[0].date.toISOString() : column;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n trackById = (index: number, row: WeekViewAllDayEventRow) => row.id;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n ngOnInit(): void {\n if (this.refresh) {\n this.refreshSubscription = this.refresh.subscribe(() => {\n this.refreshAll();\n this.cdr.markForCheck();\n });\n }\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n ngOnChanges(changes: any): void {\n const refreshHeader =\n changes.viewDate ||\n changes.excludeDays ||\n changes.weekendDays ||\n changes.daysInWeek ||\n changes.weekStartsOn;\n\n const refreshBody =\n changes.viewDate ||\n changes.dayStartHour ||\n changes.dayStartMinute ||\n changes.dayEndHour ||\n changes.dayEndMinute ||\n changes.hourSegments ||\n changes.hourDuration ||\n changes.weekStartsOn ||\n changes.weekendDays ||\n changes.excludeDays ||\n changes.hourSegmentHeight ||\n changes.events ||\n changes.daysInWeek ||\n changes.minimumEventHeight;\n\n if (refreshHeader) {\n this.refreshHeader();\n }\n\n if (changes.events) {\n validateEvents(this.events);\n }\n\n if (refreshBody) {\n this.refreshBody();\n }\n\n if (refreshHeader || refreshBody) {\n this.emitBeforeViewRender();\n }\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n ngOnDestroy(): void {\n if (this.refreshSubscription) {\n this.refreshSubscription.unsubscribe();\n }\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n ngAfterViewInit() {\n this.rtl =\n typeof window !== 'undefined' &&\n getComputedStyle(this.element.nativeElement).direction === 'rtl';\n this.cdr.detectChanges();\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n timeEventResizeStarted(\n eventsContainer: HTMLElement,\n timeEvent: WeekViewTimeEvent,\n resizeEvent: ResizeEvent\n ): void {\n this.timeEventResizes.set(timeEvent.event, resizeEvent);\n this.resizeStarted(eventsContainer, timeEvent);\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n timeEventResizing(timeEvent: WeekViewTimeEvent, resizeEvent: ResizeEvent) {\n this.timeEventResizes.set(timeEvent.event, resizeEvent);\n const adjustedEvents = new Map<CalendarEvent, CalendarEvent>();\n\n const tempEvents = [...this.events];\n\n this.timeEventResizes.forEach((lastResizeEvent, event) => {\n const newEventDates = this.getTimeEventResizedDates(\n event,\n lastResizeEvent\n );\n const adjustedEvent = { ...event, ...newEventDates };\n adjustedEvents.set(adjustedEvent, event);\n const eventIndex = tempEvents.indexOf(event);\n tempEvents[eventIndex] = adjustedEvent;\n });\n\n this.restoreOriginalEvents(tempEvents, adjustedEvents, true);\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n timeEventResizeEnded(timeEvent: WeekViewTimeEvent) {\n this.view = this.getWeekView(this.events);\n const lastResizeEvent = this.timeEventResizes.get(timeEvent.event);\n if (lastResizeEvent) {\n this.timeEventResizes.delete(timeEvent.event);\n const newEventDates = this.getTimeEventResizedDates(\n timeEvent.event,\n lastResizeEvent\n );\n this.eventTimesChanged.emit({\n newStart: newEventDates.start,\n newEnd: newEventDates.end,\n event: timeEvent.event,\n type: CalendarEventTimesChangedEventType.Resize,\n });\n }\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n allDayEventResizeStarted(\n allDayEventsContainer: HTMLElement,\n allDayEvent: WeekViewAllDayEvent,\n resizeEvent: ResizeEvent\n ): void {\n this.allDayEventResizes.set(allDayEvent, {\n originalOffset: allDayEvent.offset,\n originalSpan: allDayEvent.span,\n edge: typeof resizeEvent.edges.left !== 'undefined' ? 'left' : 'right',\n });\n this.resizeStarted(\n allDayEventsContainer,\n allDayEvent,\n this.getDayColumnWidth(allDayEventsContainer)\n );\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n allDayEventResizing(\n allDayEvent: WeekViewAllDayEvent,\n resizeEvent: ResizeEvent,\n dayWidth: number\n ): void {\n const currentResize: WeekViewAllDayEventResize =\n this.allDayEventResizes.get(allDayEvent);\n\n const modifier = this.rtl ? -1 : 1;\n if (typeof resizeEvent.edges.left !== 'undefined') {\n const diff: number =\n Math.round(+resizeEvent.edges.left / dayWidth) angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json modifier;\n allDayEvent.offset = currentResize.originalOffset + diff;\n allDayEvent.span = currentResize.originalSpan - diff;\n } else if (typeof resizeEvent.edges.right !== 'undefined') {\n const diff: number =\n Math.round(+resizeEvent.edges.right / dayWidth) angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json modifier;\n allDayEvent.span = currentResize.originalSpan + diff;\n }\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n allDayEventResizeEnded(allDayEvent: WeekViewAllDayEvent): void {\n const currentResize: WeekViewAllDayEventResize =\n this.allDayEventResizes.get(allDayEvent);\n\n if (currentResize) {\n const allDayEventResizingBeforeStart = currentResize.edge === 'left';\n let daysDiff: number;\n if (allDayEventResizingBeforeStart) {\n daysDiff = allDayEvent.offset - currentResize.originalOffset;\n } else {\n daysDiff = allDayEvent.span - currentResize.originalSpan;\n }\n\n allDayEvent.offset = currentResize.originalOffset;\n allDayEvent.span = currentResize.originalSpan;\n\n const newDates = this.getAllDayEventResizedDates(\n allDayEvent.event,\n daysDiff,\n allDayEventResizingBeforeStart\n );\n\n this.eventTimesChanged.emit({\n newStart: newDates.start,\n newEnd: newDates.end,\n event: allDayEvent.event,\n type: CalendarEventTimesChangedEventType.Resize,\n });\n this.allDayEventResizes.delete(allDayEvent);\n }\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n getDayColumnWidth(eventRowContainer: HTMLElement): number {\n return Math.floor(eventRowContainer.offsetWidth / this.days.length);\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n dateDragEnter(date: Date) {\n this.lastDragEnterDate = date;\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n eventDropped(\n dropEvent: Pick<\n DropEvent<{ event?: CalendarEvent; calendarId?: symbol }>,\n 'dropData'\n >,\n date: Date,\n allDay: boolean\n ): void {\n if (\n shouldFireDroppedEvent(dropEvent, date, allDay, this.calendarId) &&\n this.lastDragEnterDate.getTime() === date.getTime() &&\n (!this.snapDraggedEvents ||\n dropEvent.dropData.event !== this.lastDraggedEvent)\n ) {\n this.eventTimesChanged.emit({\n type: CalendarEventTimesChangedEventType.Drop,\n event: dropEvent.dropData.event,\n newStart: date,\n allDay,\n });\n }\n this.lastDraggedEvent = null;\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n dragEnter(type: 'allDay' | 'time') {\n this.eventDragEnterByType[type]++;\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n dragLeave(type: 'allDay' | 'time') {\n this.eventDragEnterByType[type]--;\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n dragStarted(\n eventsContainerElement: HTMLElement,\n eventElement: HTMLElement,\n event: WeekViewTimeEvent | WeekViewAllDayEvent,\n useY: boolean\n ): void {\n this.dayColumnWidth = this.getDayColumnWidth(eventsContainerElement);\n const dragHelper: CalendarDragHelper = new CalendarDragHelper(\n eventsContainerElement,\n eventElement\n );\n this.validateDrag = ({ x, y, transform }) => {\n const isAllowed =\n this.allDayEventResizes.size === 0 &&\n this.timeEventResizes.size === 0 &&\n dragHelper.validateDrag({\n x,\n y,\n snapDraggedEvents: this.snapDraggedEvents,\n dragAlreadyMoved: this.dragAlreadyMoved,\n transform,\n });\n if (isAllowed && this.validateEventTimesChanged) {\n const newEventTimes = this.getDragMovedEventTimes(\n event,\n { x, y },\n this.dayColumnWidth,\n useY\n );\n return this.validateEventTimesChanged({\n type: CalendarEventTimesChangedEventType.Drag,\n event: event.event,\n newStart: newEventTimes.start,\n newEnd: newEventTimes.end,\n });\n }\n\n return isAllowed;\n };\n this.dragActive = true;\n this.dragAlreadyMoved = false;\n this.lastDraggedEvent = null;\n this.eventDragEnterByType = {\n allDay: 0,\n time: 0,\n };\n if (!this.snapDraggedEvents && useY) {\n this.view.hourColumns.forEach((column) => {\n const linkedEvent = column.events.find(\n (columnEvent) =>\n columnEvent.event === event.event && columnEvent !== event\n );\n // hide any linked events while dragging\n if (linkedEvent) {\n linkedEvent.width = 0;\n linkedEvent.height = 0;\n }\n });\n }\n this.cdr.markForCheck();\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n dragMove(dayEvent: WeekViewTimeEvent, dragEvent: DragMoveEvent) {\n const newEventTimes = this.getDragMovedEventTimes(\n dayEvent,\n dragEvent,\n this.dayColumnWidth,\n true\n );\n const originalEvent = dayEvent.event;\n const adjustedEvent = { ...originalEvent, ...newEventTimes };\n const tempEvents = this.events.map((event) => {\n if (event === originalEvent) {\n return adjustedEvent;\n }\n return event;\n });\n this.restoreOriginalEvents(\n tempEvents,\n new Map([[adjustedEvent, originalEvent]]),\n this.snapDraggedEvents\n );\n this.dragAlreadyMoved = true;\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n allDayEventDragMove() {\n this.dragAlreadyMoved = true;\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n dragEnded(\n weekEvent: WeekViewAllDayEvent | WeekViewTimeEvent,\n dragEndEvent: DragEndEvent,\n dayWidth: number,\n useY = false\n ): void {\n this.view = this.getWeekView(this.events);\n this.dragActive = false;\n this.validateDrag = null;\n const { start, end } = this.getDragMovedEventTimes(\n weekEvent,\n dragEndEvent,\n dayWidth,\n useY\n );\n if (\n (this.snapDraggedEvents ||\n this.eventDragEnterByType[useY ? 'time' : 'allDay'] > 0) &&\n isDraggedWithinPeriod(start, end, this.view.period)\n ) {\n this.lastDraggedEvent = weekEvent.event;\n this.eventTimesChanged.emit({\n newStart: start,\n newEnd: end,\n event: weekEvent.event,\n type: CalendarEventTimesChangedEventType.Drag,\n allDay: !useY,\n });\n }\n }\n\n protected refreshHeader(): void {\n this.days = this.utils.getWeekViewHeader({\n viewDate: this.viewDate,\n weekStartsOn: this.weekStartsOn,\n excluded: this.excludeDays,\n weekendDays: this.weekendDays,\n ...getWeekViewPeriod(\n this.dateAdapter,\n this.viewDate,\n this.weekStartsOn,\n this.excludeDays,\n this.daysInWeek\n ),\n });\n }\n\n protected refreshBody(): void {\n this.view = this.getWeekView(this.events);\n }\n\n protected refreshAll(): void {\n this.refreshHeader();\n this.refreshBody();\n this.emitBeforeViewRender();\n }\n\n protected emitBeforeViewRender(): void {\n if (this.days && this.view) {\n this.beforeViewRender.emit({\n header: this.days,\n ...this.view,\n });\n }\n }\n\n protected getWeekView(events: CalendarEvent[]) {\n return this.utils.getWeekView({\n events,\n viewDate: this.viewDate,\n weekStartsOn: this.weekStartsOn,\n excluded: this.excludeDays,\n precision: this.precision,\n absolutePositionedEvents: true,\n hourSegments: this.hourSegments,\n hourDuration: this.hourDuration,\n dayStart: {\n hour: this.dayStartHour,\n minute: this.dayStartMinute,\n },\n dayEnd: {\n hour: this.dayEndHour,\n minute: this.dayEndMinute,\n },\n segmentHeight: this.hourSegmentHeight,\n weekendDays: this.weekendDays,\n minimumEventHeight: this.minimumEventHeight,\n ...getWeekViewPeriod(\n this.dateAdapter,\n this.viewDate,\n this.weekStartsOn,\n this.excludeDays,\n this.daysInWeek\n ),\n });\n }\n\n protected getDragMovedEventTimes(\n weekEvent: WeekViewAllDayEvent | WeekViewTimeEvent,\n dragEndEvent: DragEndEvent | DragMoveEvent,\n dayWidth: number,\n useY: boolean\n ) {\n const daysDragged =\n (roundToNearest(dragEndEvent.x, dayWidth) / dayWidth) angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json (this.rtl ? -1 : 1);\n const minutesMoved = useY\n ? getMinutesMoved(\n dragEndEvent.y,\n this.hourSegments,\n this.hourSegmentHeight,\n this.eventSnapSize,\n this.hourDuration\n )\n : 0;\n\n const start = this.dateAdapter.addMinutes(\n addDaysWithExclusions(\n this.dateAdapter,\n weekEvent.event.start,\n daysDragged,\n this.excludeDays\n ),\n minutesMoved\n );\n let end: Date;\n if (weekEvent.event.end) {\n end = this.dateAdapter.addMinutes(\n addDaysWithExclusions(\n this.dateAdapter,\n weekEvent.event.end,\n daysDragged,\n this.excludeDays\n ),\n minutesMoved\n );\n }\n\n return { start, end };\n }\n\n protected restoreOriginalEvents(\n tempEvents: CalendarEvent[],\n adjustedEvents: Map<CalendarEvent, CalendarEvent>,\n snapDraggedEvents = true\n ) {\n const previousView = this.view;\n if (snapDraggedEvents) {\n this.view = this.getWeekView(tempEvents);\n }\n\n const adjustedEventsArray = tempEvents.filter((event) =>\n adjustedEvents.has(event)\n );\n this.view.hourColumns.forEach((column, columnIndex) => {\n previousView.hourColumns[columnIndex].hours.forEach((hour, hourIndex) => {\n hour.segments.forEach((segment, segmentIndex) => {\n column.hours[hourIndex].segments[segmentIndex].cssClass =\n segment.cssClass;\n });\n });\n\n adjustedEventsArray.forEach((adjustedEvent) => {\n const originalEvent = adjustedEvents.get(adjustedEvent);\n const existingColumnEvent = column.events.find(\n (columnEvent) =>\n columnEvent.event ===\n (snapDraggedEvents ? adjustedEvent : originalEvent)\n );\n if (existingColumnEvent) {\n // restore the original event so trackBy kicks in and the dom isn't changed\n existingColumnEvent.event = originalEvent;\n existingColumnEvent['tempEvent'] = adjustedEvent;\n if (!snapDraggedEvents) {\n existingColumnEvent.height = 0;\n existingColumnEvent.width = 0;\n }\n } else {\n // add a dummy event to the drop so if the event was removed from the original column the drag doesn't end early\n const event = {\n event: originalEvent,\n left: 0,\n top: 0,\n height: 0,\n width: 0,\n startsBeforeDay: false,\n endsAfterDay: false,\n tempEvent: adjustedEvent,\n };\n column.events.push(event);\n }\n });\n });\n adjustedEvents.clear();\n }\n\n protected getTimeEventResizedDates(\n calendarEvent: CalendarEvent,\n resizeEvent: ResizeEvent\n ) {\n const newEventDates = {\n start: calendarEvent.start,\n end: getDefaultEventEnd(\n this.dateAdapter,\n calendarEvent,\n this.minimumEventHeight\n ),\n };\n const { end, ...eventWithoutEnd } = calendarEvent;\n const smallestResizes = {\n start: this.dateAdapter.addMinutes(\n newEventDates.end,\n this.minimumEventHeight angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json -1\n ),\n end: getDefaultEventEnd(\n this.dateAdapter,\n eventWithoutEnd,\n this.minimumEventHeight\n ),\n };\n\n const modifier = this.rtl ? -1 : 1;\n\n if (typeof resizeEvent.edges.left !== 'undefined') {\n const daysDiff =\n Math.round(+resizeEvent.edges.left / this.dayColumnWidth) angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json modifier;\n const newStart = addDaysWithExclusions(\n this.dateAdapter,\n newEventDates.start,\n daysDiff,\n this.excludeDays\n );\n if (newStart < smallestResizes.start) {\n newEventDates.start = newStart;\n } else {\n newEventDates.start = smallestResizes.start;\n }\n } else if (typeof resizeEvent.edges.right !== 'undefined') {\n const daysDiff =\n Math.round(+resizeEvent.edges.right / this.dayColumnWidth) angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json modifier;\n const newEnd = addDaysWithExclusions(\n this.dateAdapter,\n newEventDates.end,\n daysDiff,\n this.excludeDays\n );\n if (newEnd > smallestResizes.end) {\n newEventDates.end = newEnd;\n } else {\n newEventDates.end = smallestResizes.end;\n }\n }\n\n if (typeof resizeEvent.edges.top !== 'undefined') {\n const minutesMoved = getMinutesMoved(\n resizeEvent.edges.top as number,\n this.hourSegments,\n this.hourSegmentHeight,\n this.eventSnapSize,\n this.hourDuration\n );\n const newStart = this.dateAdapter.addMinutes(\n newEventDates.start,\n minutesMoved\n );\n if (newStart < smallestResizes.start) {\n newEventDates.start = newStart;\n } else {\n newEventDates.start = smallestResizes.start;\n }\n } else if (typeof resizeEvent.edges.bottom !== 'undefined') {\n const minutesMoved = getMinutesMoved(\n resizeEvent.edges.bottom as number,\n this.hourSegments,\n this.hourSegmentHeight,\n this.eventSnapSize,\n this.hourDuration\n );\n const newEnd = this.dateAdapter.addMinutes(\n newEventDates.end,\n minutesMoved\n );\n if (newEnd > smallestResizes.end) {\n newEventDates.end = newEnd;\n } else {\n newEventDates.end = smallestResizes.end;\n }\n }\n\n return newEventDates;\n }\n\n protected resizeStarted(\n eventsContainer: HTMLElement,\n event: WeekViewTimeEvent | WeekViewAllDayEvent,\n dayWidth?: number\n ) {\n this.dayColumnWidth = this.getDayColumnWidth(eventsContainer);\n const resizeHelper = new CalendarResizeHelper(\n eventsContainer,\n dayWidth,\n this.rtl\n );\n this.validateResize = ({ rectangle, edges }) => {\n const isWithinBoundary = resizeHelper.validateResize({\n rectangle: { ...rectangle },\n edges,\n });\n\n if (isWithinBoundary && this.validateEventTimesChanged) {\n let newEventDates;\n if (!dayWidth) {\n newEventDates = this.getTimeEventResizedDates(event.event, {\n rectangle,\n edges,\n });\n } else {\n const modifier = this.rtl ? -1 : 1;\n if (typeof edges.left !== 'undefined') {\n const diff = Math.round(+edges.left / dayWidth) angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json modifier;\n newEventDates = this.getAllDayEventResizedDates(\n event.event,\n diff,\n !this.rtl\n );\n } else {\n const diff = Math.round(+edges.right / dayWidth) angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json modifier;\n newEventDates = this.getAllDayEventResizedDates(\n event.event,\n diff,\n this.rtl\n );\n }\n }\n return this.validateEventTimesChanged({\n type: CalendarEventTimesChangedEventType.Resize,\n event: event.event,\n newStart: newEventDates.start,\n newEnd: newEventDates.end,\n });\n }\n\n return isWithinBoundary;\n };\n this.cdr.markForCheck();\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n protected getAllDayEventResizedDates(\n event: CalendarEvent,\n daysDiff: number,\n beforeStart: boolean\n ) {\n let start: Date = event.start;\n let end: Date = event.end || event.start;\n if (beforeStart) {\n start = addDaysWithExclusions(\n this.dateAdapter,\n start,\n daysDiff,\n this.excludeDays\n );\n } else {\n end = addDaysWithExclusions(\n this.dateAdapter,\n end,\n daysDiff,\n this.excludeDays\n );\n }\n\n return { start, end };\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/test/util.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 16,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 31,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        406
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent } from 'angular-calendar';\n\nexport function triggerDomEvent(\n eventType: string,\n target: HTMLElement | Element,\n eventData: object = {}\n) {\n const event: Event = document.createEvent('Event');\n Object.assign(event, eventData);\n event.initEvent(eventType, true, true);\n target.dispatchEvent(event);\n return event;\n}\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`styles` has too many lines (7). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 20,
                "column": 11,
                "nodeType": "ArrayExpression",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 30,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/consistent-component-styles",
                "severity": 2,
                "message": "Use a `string` instead of a `string[]` for the `styles` property",
                "line": 20,
                "column": 11,
                "nodeType": "ArrayExpression",
                "messageId": "useStylesString",
                "endLine": 30,
                "endColumn": 4,
                "fix": {
                  "range": [
                    560,
                    711
                  ],
                  "text": "`\n .external-event {\n position: fixed;\n top: 0;\n left: 0;\n width: 10px;\n height: 10px;\n }\n `"
                }
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 1,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\nimport { CalendarEvent } from 'angular-calendar';\n\nexport function triggerDomEvent(\n eventType: string,\n target: HTMLElement | Element,\n eventData: object = {}\n) {\n const event: Event = document.createEvent('Event');\n Object.assign(event, eventData);\n event.initEvent(eventType, true, true);\n target.dispatchEvent(event);\n return event;\n}\n\n@Component({\n selector: 'mwl-external-event',\n template:\n '<div class=\"external-event\" mwlDraggable [dropData]=\"{event: event}\">{{ event.title }}</div>',\n styles: [\n `\n .external-event {\n position: fixed;\n top: 0;\n left: 0;\n width: 10px;\n height: 10px;\n }\n `,\n ],\n})\nexport class ExternalEventComponent {\n event: CalendarEvent = {\n title: 'foo',\n start: new Date(),\n draggable: true,\n color: {\n primary: 'blue',\n secondary: 'lightblue',\n },\n };\n}\n",
            "usedDeprecatedRules": []
          }
        ]
      }
    },
    "after": {
      "demos": {
        "recommended": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/environments/environment.prod.ts",
            "messages": [
              {
                "ruleId": null,
                "fatal": true,
                "severity": 2,
                "message": "Parsing error: ESLint was configured to run on `<tsconfigRootDir>/projects/demos/environments/environment.prod.ts` using `parserOptions.project`: <tsconfigRootDir>/projects/demos/tsconfig.app.json\nHowever, that TSConfig does not include this file. Either:\n- Change ESLint's list of included files to not include this file\n- Change that TSConfig to include this file\n- Create a new TSConfig that includes this file and include it in your parserOptions.project\nSee the typescript-eslint docs for more info: https://typescript-eslint.io/linting/troubleshooting#i-get-errors-telling-me-eslint-was-configured-to-run--however-that-tsconfig-does-not--none-of-those-tsconfigs-include-this-file",
                "nodeType": null
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 1,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "export const environment = {\n production: true,\n};\n",
            "usedDeprecatedRules": []
          }
        ],
        "all": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/carbon-ad/carbon-ad.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 8,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 13,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        72,
                        114
                      ],
                      "text": ", ChangeDetectionStrategy,\n} from '@angular/core';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 12,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 12,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        51,
                        268
                      ],
                      "text": ",\n} from '@angular/core';\n\n@Component({\n selector: 'mwl-carbon-ad',\n templateUrl: './carbon-ad.component.html',\n styleUrl: './carbon-ad.component.scss',\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n AfterViewInit,\n Component,\n ElementRef,\n ViewEncapsulation,\n} from '@angular/core';\n\n@Component({\n selector: 'mwl-carbon-ad',\n templateUrl: './carbon-ad.component.html',\n styleUrl: './carbon-ad.component.scss',\n encapsulation: ViewEncapsulation.None,\n})\nexport class CarbonAdComponent implements AfterViewInit {\n constructor(private elementRef: ElementRef<HTMLElement>) {}\n\n ngAfterViewInit(): void {\n const script = document.createElement('script');\n script.src =\n '//cdn.carbonads.com/carbon.js?serve=CESIVK3U&placement=mattlewis92githubio';\n script.id = '_carbonads_js';\n this.elementRef.nativeElement.append(script);\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-app.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 84,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 88,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        37,
                        3124
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { Router, NavigationStart, NavigationEnd } from '@angular/router';\nimport { map, take, filter } from 'rxjs/operators';\nimport StackBlitzSDK from '@stackblitz/sdk';\nimport { Angulartics2GoogleGlobalSiteTag } from 'angulartics2';\nimport { sources as demoUtilsSources } from './demo-modules/demo-utils/sources';\nimport { Subject } from 'rxjs';\nimport { NgbNav } from '@ng-bootstrap/ng-bootstrap/nav/nav';\n\ninterface Source {\n filename: string;\n contents: {\n raw: string;\n highlighted: string;\n };\n language: string;\n}\n\ninterface Demo {\n label: string;\n path: string;\n sources?: Source[];\n darkTheme: boolean;\n tags: string[];\n}\n\nfunction getSources(folder: string): Promise<Source[]> {\n return import('./demo-modules/' + folder + '/sources.ts').then(\n ({ sources }) => {\n return sources.map(({ filename, contents }) => {\n const [, extension]: RegExpMatchArray = filename.match(/^.+\\.(.+)$/);\n const languages: { [extension: string]: string } = {\n ts: 'typescript',\n html: 'html',\n css: 'css',\n };\n return {\n filename,\n contents: {\n raw: contents.raw.default\n .replace(\n \",\\n RouterModule.forChild([{ path: '', component: DemoComponent }])\",\n ''\n )\n .replace(\"\\nimport { RouterModule } from '@angular/router';\", ''),\n highlighted: contents.highlighted.default // TODO - move this into a regexp replace for both\n .replace(\n ',\\n RouterModule.forChild([{ path: <span class=\"hljs-string\">\\'\\'</span>, component: DemoComponent }])',\n ''\n )\n .replace(\n '\\n<span class=\"hljs-keyword\">import</span> { RouterModule } from <span class=\"hljs-string\">\\'@angular/router\\'</span>;',\n ''\n ),\n },\n language: languages[extension],\n };\n });\n }\n );\n}\n\nconst dependencyVersions: any = {\n angular: require('@angular/core/package.json').version,\n angularRouter: require('@angular/router/package.json').version,\n angularCalendar: require('../../../package.json').version,\n calendarUtils: require('calendar-utils/package.json').version,\n angularResizableElement: require('angular-resizable-element/package.json')\n .version,\n angularDraggableDroppable: require('angular-draggable-droppable/package.json')\n .version,\n dateFns: require('date-fns/package.json').version,\n rxjs: require('rxjs/package.json').version,\n bootstrap: require('bootstrap/package.json').version,\n zoneJs: require('zone.js/package.json').version,\n ngBootstrap: require('@ng-bootstrap/ng-bootstrap/package.json').version,\n rrule: require('rrule/package.json').version,\n fontAwesome: require('@fortawesome/fontawesome-free/package.json').version,\n positioning: require('positioning/package.json').version,\n flatpickr: require('flatpickr/package.json').version,\n angularxFlatpickr: require('angularx-flatpickr/package.json').version,\n};\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use the `viewChild` function instead of the `ViewChild` decorator",
                "line": 90,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferQuerySignals",
                "endLine": 90,
                "endColumn": 20
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, OnInit, ViewChild } from '@angular/core';\nimport { Router, NavigationStart, NavigationEnd } from '@angular/router';\nimport { map, take, filter } from 'rxjs/operators';\nimport StackBlitzSDK from '@stackblitz/sdk';\nimport { Angulartics2GoogleGlobalSiteTag } from 'angulartics2';\nimport { sources as demoUtilsSources } from './demo-modules/demo-utils/sources';\nimport { Subject } from 'rxjs';\nimport { NgbNav } from '@ng-bootstrap/ng-bootstrap/nav/nav';\n\ninterface Source {\n filename: string;\n contents: {\n raw: string;\n highlighted: string;\n };\n language: string;\n}\n\ninterface Demo {\n label: string;\n path: string;\n sources?: Source[];\n darkTheme: boolean;\n tags: string[];\n}\n\nfunction getSources(folder: string): Promise<Source[]> {\n return import('./demo-modules/' + folder + '/sources.ts').then(\n ({ sources }) => {\n return sources.map(({ filename, contents }) => {\n const [, extension]: RegExpMatchArray = filename.match(/^.+\\.(.+)$/);\n const languages: { [extension: string]: string } = {\n ts: 'typescript',\n html: 'html',\n css: 'css',\n };\n return {\n filename,\n contents: {\n raw: contents.raw.default\n .replace(\n \",\\n RouterModule.forChild([{ path: '', component: DemoComponent }])\",\n ''\n )\n .replace(\"\\nimport { RouterModule } from '@angular/router';\", ''),\n highlighted: contents.highlighted.default // TODO - move this into a regexp replace for both\n .replace(\n ',\\n RouterModule.forChild([{ path: <span class=\"hljs-string\">\\'\\'</span>, component: DemoComponent }])',\n ''\n )\n .replace(\n '\\n<span class=\"hljs-keyword\">import</span> { RouterModule } from <span class=\"hljs-string\">\\'@angular/router\\'</span>;',\n ''\n ),\n },\n language: languages[extension],\n };\n });\n }\n );\n}\n\nconst dependencyVersions: any = {\n angular: require('@angular/core/package.json').version,\n angularRouter: require('@angular/router/package.json').version,\n angularCalendar: require('../../../package.json').version,\n calendarUtils: require('calendar-utils/package.json').version,\n angularResizableElement: require('angular-resizable-element/package.json')\n .version,\n angularDraggableDroppable: require('angular-draggable-droppable/package.json')\n .version,\n dateFns: require('date-fns/package.json').version,\n rxjs: require('rxjs/package.json').version,\n bootstrap: require('bootstrap/package.json').version,\n zoneJs: require('zone.js/package.json').version,\n ngBootstrap: require('@ng-bootstrap/ng-bootstrap/package.json').version,\n rrule: require('rrule/package.json').version,\n fontAwesome: require('@fortawesome/fontawesome-free/package.json').version,\n positioning: require('positioning/package.json').version,\n flatpickr: require('flatpickr/package.json').version,\n angularxFlatpickr: require('angularx-flatpickr/package.json').version,\n};\n\n@Component({\n selector: 'mwl-demo-app',\n styleUrl: './demo-app.css',\n templateUrl: './demo-app.html',\n})\nexport class DemoAppComponent implements OnInit {\n @ViewChild('nav') nav: NgbNav;\n demos: Demo[] = [];\n filteredDemos: Demo[] = [];\n activeDemo: Demo;\n isMenuVisible = false;\n firstDemoLoaded = false;\n searchText = '';\n copied$ = new Subject<boolean>();\n\n constructor(\n private router: Router,\n analytics: Angulartics2GoogleGlobalSiteTag\n ) {\n analytics.startTracking();\n }\n\n ngOnInit() {\n const defaultRoute = this.router.config.find(\n (route) => route.path === '**'\n );\n\n this.demos = this.router.config\n .filter((route) => route.path !== '**')\n .map((route) => ({\n path: route.path,\n label: route.data.label,\n darkTheme: route.data.darkTheme,\n tags: route.data.tags || [],\n }));\n this.updateFilteredDemos();\n\n this.router.events\n .pipe(filter((event) => event instanceof NavigationEnd))\n .pipe(take(1))\n .subscribe(() => {\n this.firstDemoLoaded = true;\n });\n\n this.router.events\n .pipe(filter((event) => event instanceof NavigationStart))\n .pipe(\n map((event: NavigationStart) => {\n if (event.url === '/') {\n return { url: `/${defaultRoute.redirectTo}` };\n }\n return event;\n })\n )\n .subscribe((event: NavigationStart) => {\n this.activeDemo = this.demos.find(\n (demo) => `/${demo.path}` === event.url\n );\n getSources(this.activeDemo.path).then((sources) => {\n this.activeDemo.sources = sources;\n });\n });\n\n const script = document.createElement('script');\n script.async = true;\n script.setAttribute('data-uid', '7c1627e655');\n script.src = 'https://angular-calendar.ck.page/7c1627e655/index.js';\n document.getElementsByTagName('head')[0].appendChild(script);\n }\n\n updateFilteredDemos() {\n this.filteredDemos = this.demos.filter(\n (demo) =>\n !this.searchText ||\n [demo.label.toLowerCase(), ...demo.tags].some((tag) =>\n tag.includes(this.searchText.toLowerCase())\n )\n );\n }\n\n editInStackblitz(demo: Demo): void {\n const files: {\n [path: string]: string;\n } = {\n 'index.html': `\n<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@${dependencyVersions.bootstrap}/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n<link href=\"https://unpkg.com/@fortawesome/fontawesome-free@${dependencyVersions.fontAwesome}/css/all.css\" rel=\"stylesheet\">\n<link href=\"https://unpkg.com/angular-calendar@${dependencyVersions.angularCalendar}/css/angular-calendar.css\" rel=\"stylesheet\">\n<link href=\"https://unpkg.com/flatpickr@${dependencyVersions.flatpickr}/dist/flatpickr.css\" rel=\"stylesheet\">\n<mwl-demo-component>Loading...</mwl-demo-component>\n`.trim(),\n 'main.ts': `\nimport 'zone.js';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { NgModule } from '@angular/core';\nimport { DemoModule } from './demo/module';\nimport { DemoComponent } from './demo/component';\n\n@NgModule({\n imports: [\n BrowserModule,\n BrowserAnimationsModule,\n DemoModule\n ],\n bootstrap: [DemoComponent]\n})\nexport class BootstrapModule {}\n\nplatformBrowserDynamic().bootstrapModule(BootstrapModule).then(ref => {\n // Ensure Angular destroys itself on hot reloads.\n if (window['ngRef']) {\n window['ngRef'].destroy();\n }\n window['ngRef'] = ref;\n\n // Otherwise, log the boot error\n}).catch(err => console.error(err));\n`.trim(),\n };\n\n demoUtilsSources.forEach((source) => {\n files[`demo-utils/${source.filename}`] = source.contents.raw.default;\n });\n\n demo.sources.forEach((source) => {\n files[`demo/${source.filename}`] = source.contents.raw;\n });\n\n StackBlitzSDK.openProject(\n {\n title: 'Angular Calendar Demo',\n description: demo.label,\n template: 'angular-cli',\n tags: ['angular-calendar'],\n files,\n dependencies: {\n '@angular/core': dependencyVersions.angular,\n '@angular/common': dependencyVersions.angular,\n '@angular/compiler': dependencyVersions.angular,\n '@angular/platform-browser': dependencyVersions.angular,\n '@angular/platform-browser-dynamic': dependencyVersions.angular,\n '@angular/router': dependencyVersions.angular,\n '@angular/forms': dependencyVersions.angular,\n '@angular/animations': dependencyVersions.angular,\n rxjs: dependencyVersions.rxjs,\n 'zone.js': dependencyVersions.zoneJs,\n 'angular-draggable-droppable': `^${dependencyVersions.angularDraggableDroppable}`,\n 'angular-resizable-element': `^${dependencyVersions.angularResizableElement}`,\n 'date-fns': dependencyVersions.dateFns,\n 'angular-calendar': dependencyVersions.angularCalendar,\n '@ng-bootstrap/ng-bootstrap': '5.0.0', // pinned due to issue with stackblitz generation\n rrule: dependencyVersions.rrule,\n 'calendar-utils': dependencyVersions.calendarUtils,\n flatpickr: dependencyVersions.flatpickr,\n 'angularx-flatpickr': dependencyVersions.angularxFlatpickr,\n },\n },\n {\n openFile: 'demo/component.ts',\n }\n );\n }\n\n copied() {\n this.copied$.next(true);\n setTimeout(() => {\n this.copied$.next(false);\n }, 1000);\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/additional-event-properties/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 8,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 8,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Month;\n\n viewDate: Date = new Date();\n\n events: CalendarEvent<{ id: number }>[] = [\n {\n title: 'Event 1',\n color: colors.yellow,\n start: new Date(),\n meta: {\n id: 1,\n },\n },\n {\n title: 'Event 2',\n color: colors.blue,\n start: new Date(),\n meta: {\n id: 2,\n },\n },\n ];\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/all-day-events/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 8,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 8,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent } from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n})\nexport class DemoComponent {\n viewDate: Date = new Date();\n\n events: CalendarEvent[] = [\n {\n title: 'An all day event',\n color: colors.yellow,\n start: new Date(),\n allDay: true,\n },\n {\n title: 'A non all day event',\n color: colors.blue,\n start: new Date(),\n },\n ];\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/async-events/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 39,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 39,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\nimport {\n isSameMonth,\n isSameDay,\n startOfMonth,\n endOfMonth,\n startOfWeek,\n endOfWeek,\n startOfDay,\n endOfDay,\n format,\n} from 'date-fns';\nimport { Observable } from 'rxjs';\nimport { colors } from '../demo-utils/colors';\n\ninterface Film {\n id: number;\n title: string;\n release_date: string;\n}\n\nfunction getTimezoneOffsetString(date: Date): string {\n const timezoneOffset = date.getTimezoneOffset();\n const hoursOffset = String(\n Math.floor(Math.abs(timezoneOffset / 60))\n ).padStart(2, '0');\n const minutesOffset = String(Math.abs(timezoneOffset % 60)).padEnd(2, '0');\n const direction = timezoneOffset > 0 ? '-' : '+';\n\n return `T00:00:00${direction}${hoursOffset}:${minutesOffset}`;\n}\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n})\nexport class DemoComponent implements OnInit {\n view: CalendarView = CalendarView.Month;\n\n viewDate: Date = new Date();\n\n events$: Observable<CalendarEvent<{ film: Film }>[]>;\n\n activeDayIsOpen: boolean = false;\n\n constructor(private http: HttpClient) {}\n\n ngOnInit(): void {\n this.fetchEvents();\n }\n\n fetchEvents(): void {\n const getStart: any = {\n month: startOfMonth,\n week: startOfWeek,\n day: startOfDay,\n }[this.view];\n\n const getEnd: any = {\n month: endOfMonth,\n week: endOfWeek,\n day: endOfDay,\n }[this.view];\n\n const params = new HttpParams()\n .set(\n 'primary_release_date.gte',\n format(getStart(this.viewDate), 'yyyy-MM-dd')\n )\n .set(\n 'primary_release_date.lte',\n format(getEnd(this.viewDate), 'yyyy-MM-dd')\n )\n .set('api_key', '0ec33936a68018857d727958dca1424f');\n\n this.events$ = this.http\n .get('https://api.themoviedb.org/3/discover/movie', { params })\n .pipe(\n map(({ results }: { results: Film[] }) => {\n return results.map((film: Film) => {\n return {\n title: film.title,\n start: new Date(\n film.release_date + getTimezoneOffsetString(this.viewDate)\n ),\n color: colors.yellow,\n allDay: true,\n meta: {\n film,\n },\n };\n });\n })\n );\n }\n\n dayClicked({\n date,\n events,\n }: {\n date: Date;\n events: CalendarEvent<{ film: Film }>[];\n }): void {\n if (isSameMonth(date, this.viewDate)) {\n if (\n (isSameDay(this.viewDate, date) && this.activeDayIsOpen === true) ||\n events.length === 0\n ) {\n this.activeDayIsOpen = false;\n } else {\n this.activeDayIsOpen = true;\n this.viewDate = date;\n }\n }\n }\n\n eventClicked(event: CalendarEvent<{ film: Film }>): void {\n window.open(\n `https://www.themoviedb.org/movie/${event.meta.film.id}`,\n '_blank'\n );\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/before-view-render/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 17,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 17,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        47,
                        413
                      ],
                      "text": ",\n} from '@angular/core';\nimport {\n CalendarEvent,\n CalendarMonthViewBeforeRenderEvent,\n CalendarWeekViewBeforeRenderEvent,\n CalendarDayViewBeforeRenderEvent,\n CalendarView,\n} from 'angular-calendar';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 18,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 18,
                "endColumn": 31
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`styles` has too many lines (5). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 19,
                "column": 11,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 25,
                "endColumn": 6
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n ChangeDetectionStrategy,\n ViewEncapsulation,\n} from '@angular/core';\nimport {\n CalendarEvent,\n CalendarMonthViewBeforeRenderEvent,\n CalendarWeekViewBeforeRenderEvent,\n CalendarDayViewBeforeRenderEvent,\n CalendarView,\n} from 'angular-calendar';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n templateUrl: 'template.html',\n styles: `\n .cal-month-view .bg-pink,\n .cal-week-view .cal-day-columns .bg-pink,\n .cal-day-view .bg-pink {\n background-color: hotpink !important;\n }\n `,\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Month;\n\n viewDate: Date = new Date();\n\n events: CalendarEvent[] = [];\n\n beforeMonthViewRender(renderEvent: CalendarMonthViewBeforeRenderEvent): void {\n renderEvent.body.forEach((day) => {\n const dayOfMonth = day.date.getDate();\n if (dayOfMonth > 5 && dayOfMonth < 10 && day.inMonth) {\n day.cssClass = 'bg-pink';\n }\n });\n }\n\n beforeWeekViewRender(renderEvent: CalendarWeekViewBeforeRenderEvent) {\n renderEvent.hourColumns.forEach((hourColumn) => {\n hourColumn.hours.forEach((hour) => {\n hour.segments.forEach((segment) => {\n if (\n segment.date.getHours() >= 2 &&\n segment.date.getHours() <= 5 &&\n segment.date.getDay() === 2\n ) {\n segment.cssClass = 'bg-pink';\n }\n });\n });\n });\n }\n\n beforeDayViewRender(renderEvent: CalendarDayViewBeforeRenderEvent) {\n renderEvent.hourColumns.forEach((hourColumn) => {\n hourColumn.hours.forEach((hour) => {\n hour.segments.forEach((segment) => {\n if (segment.date.getHours() >= 2 && segment.date.getHours() <= 5) {\n segment.cssClass = 'bg-pink';\n }\n });\n });\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/clickable-days/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 7,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 7,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Month;\n\n viewDate: Date = new Date();\n\n events: CalendarEvent[] = [];\n\n clickedDate: Date;\n\n clickedColumn: number;\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/clickable-events/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 8,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 8,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Month;\n\n viewDate: Date = new Date();\n\n events: CalendarEvent[] = [\n {\n title: 'Click me',\n color: colors.yellow,\n start: new Date(),\n },\n {\n title: 'Or click me',\n color: colors.blue,\n start: new Date(),\n },\n ];\n\n eventClicked({ event }: { event: CalendarEvent }): void {\n console.log('Event clicked', event);\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/context-menu/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 13,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 13,
                "endColumn": 31
              },
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 15,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 15,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        47,
                        437
                      ],
                      "text": ",\n} from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\nimport { Subject } from 'rxjs';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n styleUrl: './styles.scss',\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n ViewEncapsulation,\n} from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\nimport { Subject } from 'rxjs';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n styleUrl: './styles.scss',\n encapsulation: ViewEncapsulation.None,\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Month;\n\n viewDate = new Date();\n\n events: CalendarEvent[] = [];\n\n refresh = new Subject<void>();\n\n addEvent(date: Date): void {\n this.events.push({\n start: date,\n title: 'New event',\n color: colors.red,\n });\n this.refresh.next();\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/custom-event-class/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 12,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 12,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        47,
                        344
                      ],
                      "text": ",\n} from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 13,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 13,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n ChangeDetectionStrategy,\n ViewEncapsulation,\n} from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None, // hack to get the styles to apply locally\n templateUrl: 'template.html',\n // you should really include this CSS in your global stylesheet\n styles: `\n .my-custom-class span {\n color: #ff3d7f !important;\n }\n `,\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Month;\n\n viewDate: Date = new Date();\n\n events: CalendarEvent[] = [\n {\n title: 'Has custom class',\n color: colors.yellow,\n start: new Date(),\n cssClass: 'my-custom-class',\n },\n ];\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/custom-hour-duration/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 13,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 13,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { setMinutes, setHours } from 'date-fns';\nimport { Subject } from 'rxjs';\nimport {\n CalendarEvent,\n CalendarEventTimesChangedEvent,\n CalendarView,\n} from 'angular-calendar';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Week;\n\n viewDate = new Date();\n\n events: CalendarEvent[] = [\n {\n start: setHours(setMinutes(new Date(), 20), 15),\n end: setHours(setMinutes(new Date(), 40), 17),\n title: 'An event',\n resizable: {\n afterEnd: true,\n },\n draggable: true,\n },\n ];\n\n refresh = new Subject<void>();\n\n eventTimesChanged({\n event,\n newStart,\n newEnd,\n }: CalendarEventTimesChangedEvent): void {\n event.start = newStart;\n event.end = newEnd;\n this.refresh.next();\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/custom-templates/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 7,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 7,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Month;\n\n viewDate: Date = new Date();\n\n events: CalendarEvent[] = [];\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/customise-date-formats/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 12,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 12,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport {\n CalendarEvent,\n CalendarDateFormatter,\n CalendarView,\n} from 'angular-calendar';\nimport { CustomDateFormatter } from './custom-date-formatter.provider';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n providers: [\n {\n provide: CalendarDateFormatter,\n useClass: CustomDateFormatter,\n },\n ],\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Month;\n\n viewDate: Date = new Date();\n\n events: CalendarEvent[] = [];\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/customise-date-formats/custom-date-formatter.provider.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 5,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 5,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        182,
                        182
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        182,
                        182
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        182,
                        182
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { CalendarDateFormatter, DateFormatterParams } from 'angular-calendar';\nimport { formatDate } from '@angular/common';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class CustomDateFormatter extends CalendarDateFormatter {\n // you can override any of the methods defined in the parent class\n\n public monthViewColumnHeader({ date, locale }: DateFormatterParams): string {\n return formatDate(date, 'EEE', locale);\n }\n\n public monthViewTitle({ date, locale }: DateFormatterParams): string {\n return formatDate(date, 'MMM y', locale);\n }\n\n public weekViewColumnHeader({ date, locale }: DateFormatterParams): string {\n return formatDate(date, 'EEE', locale);\n }\n\n public dayViewHour({ date, locale }: DateFormatterParams): string {\n return formatDate(date, 'HH:mm', locale);\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/dark-theme/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 17,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 17,
                "endColumn": 31
              },
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 19,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 19,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        80,
                        481
                      ],
                      "text": ",\n} from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\n\nimport { colors } from '../demo-utils/colors';\nimport { DOCUMENT } from '@angular/common';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n styleUrl: 'styles.scss',\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n Inject,\n OnDestroy,\n OnInit,\n ViewEncapsulation,\n} from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\n\nimport { colors } from '../demo-utils/colors';\nimport { DOCUMENT } from '@angular/common';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n styleUrl: 'styles.scss',\n encapsulation: ViewEncapsulation.None,\n})\nexport class DemoComponent implements OnInit, OnDestroy {\n view: CalendarView = CalendarView.Month;\n\n viewDate = new Date();\n\n events: CalendarEvent[] = [\n {\n title: 'An event',\n start: new Date(),\n color: colors.red,\n },\n ];\n\n private readonly darkThemeClass = 'dark-theme';\n\n constructor(@Inject(DOCUMENT) private document) {}\n\n ngOnInit(): void {\n this.document.body.classList.add(this.darkThemeClass);\n }\n\n ngOnDestroy(): void {\n this.document.body.classList.remove(this.darkThemeClass);\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/day-view-hour-split/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 7,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 7,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Day;\n\n viewDate: Date = new Date();\n\n events: CalendarEvent[] = [];\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/day-view-scheduler/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 26,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 26,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport {\n CalendarEvent,\n CalendarEventTimesChangedEvent,\n} from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\nimport { addHours, startOfDay } from 'date-fns';\nimport { User } from './day-view-scheduler.component';\n\nconst users: User[] = [\n {\n id: 0,\n name: 'John smith',\n color: colors.yellow,\n },\n {\n id: 1,\n name: 'Jane Doe',\n color: colors.blue,\n },\n];\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n})\nexport class DemoComponent {\n viewDate = new Date();\n\n users = users;\n\n events: CalendarEvent[] = [\n {\n title: 'An event',\n color: users[0].color,\n start: addHours(startOfDay(new Date()), 5),\n meta: {\n user: users[0],\n },\n resizable: {\n beforeStart: true,\n afterEnd: true,\n },\n draggable: true,\n },\n {\n title: 'Another event',\n color: users[1].color,\n start: addHours(startOfDay(new Date()), 2),\n meta: {\n user: users[1],\n },\n resizable: {\n beforeStart: true,\n afterEnd: true,\n },\n draggable: true,\n },\n {\n title: 'A 3rd event',\n color: users[0].color,\n start: addHours(startOfDay(new Date()), 7),\n meta: {\n user: users[0],\n },\n resizable: {\n beforeStart: true,\n afterEnd: true,\n },\n draggable: true,\n },\n {\n title: 'An all day event',\n color: users[0].color,\n start: new Date(),\n meta: {\n user: users[0],\n },\n draggable: true,\n allDay: true,\n },\n {\n title: 'Another all day event',\n color: users[1].color,\n start: new Date(),\n meta: {\n user: users[1],\n },\n draggable: true,\n allDay: true,\n },\n {\n title: 'A 3rd all day event',\n color: users[0].color,\n start: new Date(),\n meta: {\n user: users[0],\n },\n draggable: true,\n allDay: true,\n },\n ];\n\n eventTimesChanged({\n event,\n newStart,\n newEnd,\n }: CalendarEventTimesChangedEvent): void {\n event.start = newStart;\n event.end = newEnd;\n this.events = [...this.events];\n }\n\n userChanged({ event, newUser }) {\n event.color = newUser.color;\n event.meta.user = newUser;\n this.events = [...this.events];\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/day-view-scheduler/day-view-scheduler.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 45,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 45,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        780,
                        780
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        780,
                        780
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        780,
                        780
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 81,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 85,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        157,
                        1758
                      ],
                      "text": ", ChangeDetectionStrategy,\n} from '@angular/core';\nimport {\n CalendarUtils,\n CalendarWeekViewComponent,\n DateAdapter,\n getWeekViewPeriod,\n} from 'angular-calendar';\nimport {\n WeekView,\n GetWeekViewArgs,\n WeekViewTimeEvent,\n EventColor,\n CalendarEvent,\n WeekViewAllDayEventRow,\n WeekViewAllDayEvent,\n} from 'calendar-utils';\nimport { DragEndEvent, DragMoveEvent } from 'angular-draggable-droppable';\n\nexport interface User {\n id: number;\n name: string;\n color: EventColor;\n}\n\ninterface DayViewScheduler extends WeekView {\n users: User[];\n}\n\ninterface GetWeekViewArgsWithUsers extends GetWeekViewArgs {\n users: User[];\n}\n\n@Injectable()\nexport class DayViewSchedulerCalendarUtils extends CalendarUtils {\n getWeekView(args: GetWeekViewArgsWithUsers): DayViewScheduler {\n const { period } = super.getWeekView(args);\n const view: DayViewScheduler = {\n period,\n allDayEventRows: [],\n hourColumns: [],\n users: [...args.users],\n };\n\n view.users.forEach((user, columnIndex) => {\n const events = args.events.filter(\n (event) => event.meta.user.id === user.id\n );\n const columnView = super.getWeekView({\n ...args,\n events,\n });\n view.hourColumns.push(columnView.hourColumns[0]);\n columnView.allDayEventRows.forEach(({ row }, rowIndex) => {\n view.allDayEventRows[rowIndex] = view.allDayEventRows[rowIndex] || {\n row: [],\n };\n view.allDayEventRows[rowIndex].row.push({\n ...row[0],\n offset: columnIndex,\n span: 1,\n });\n });\n });\n\n return view;\n }\n}\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 83,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 83,
                "endColumn": 51
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 90,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 90,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 92,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 92,
                "endColumn": 24,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        2039,
                        2039
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 5,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectorRef,\n Component,\n ElementRef,\n EventEmitter,\n Inject,\n Injectable,\n Input,\n LOCALE_ID,\n OnChanges,\n Output,\n SimpleChanges,\n} from '@angular/core';\nimport {\n CalendarUtils,\n CalendarWeekViewComponent,\n DateAdapter,\n getWeekViewPeriod,\n} from 'angular-calendar';\nimport {\n WeekView,\n GetWeekViewArgs,\n WeekViewTimeEvent,\n EventColor,\n CalendarEvent,\n WeekViewAllDayEventRow,\n WeekViewAllDayEvent,\n} from 'calendar-utils';\nimport { DragEndEvent, DragMoveEvent } from 'angular-draggable-droppable';\n\nexport interface User {\n id: number;\n name: string;\n color: EventColor;\n}\n\ninterface DayViewScheduler extends WeekView {\n users: User[];\n}\n\ninterface GetWeekViewArgsWithUsers extends GetWeekViewArgs {\n users: User[];\n}\n\n@Injectable()\nexport class DayViewSchedulerCalendarUtils extends CalendarUtils {\n getWeekView(args: GetWeekViewArgsWithUsers): DayViewScheduler {\n const { period } = super.getWeekView(args);\n const view: DayViewScheduler = {\n period,\n allDayEventRows: [],\n hourColumns: [],\n users: [...args.users],\n };\n\n view.users.forEach((user, columnIndex) => {\n const events = args.events.filter(\n (event) => event.meta.user.id === user.id\n );\n const columnView = super.getWeekView({\n ...args,\n events,\n });\n view.hourColumns.push(columnView.hourColumns[0]);\n columnView.allDayEventRows.forEach(({ row }, rowIndex) => {\n view.allDayEventRows[rowIndex] = view.allDayEventRows[rowIndex] || {\n row: [],\n };\n view.allDayEventRows[rowIndex].row.push({\n ...row[0],\n offset: columnIndex,\n span: 1,\n });\n });\n });\n\n return view;\n }\n}\n\n@Component({\n selector: 'mwl-day-view-scheduler',\n templateUrl: 'day-view-scheduler.component.html',\n providers: [DayViewSchedulerCalendarUtils],\n})\nexport class DayViewSchedulerComponent\n extends CalendarWeekViewComponent\n implements OnChanges\n{\n @Input() users: User[] = [];\n\n @Output() userChanged = new EventEmitter();\n\n view: DayViewScheduler;\n\n daysInWeek = 1;\n\n constructor(\n protected cdr: ChangeDetectorRef,\n protected utils: DayViewSchedulerCalendarUtils,\n @Inject(LOCALE_ID) locale: string,\n protected dateAdapter: DateAdapter,\n protected element: ElementRef<HTMLElement>\n ) {\n super(cdr, utils, locale, dateAdapter, element);\n }\n\n trackByUserId = (index: number, row: User) => row.id;\n\n ngOnChanges(changes: SimpleChanges): void {\n super.ngOnChanges(changes);\n\n if (changes.users) {\n this.refreshBody();\n this.emitBeforeViewRender();\n }\n }\n\n getDayColumnWidth(eventRowContainer: HTMLElement): number {\n return Math.floor(eventRowContainer.offsetWidth / this.users.length);\n }\n\n dragMove(dayEvent: WeekViewTimeEvent, dragEvent: DragMoveEvent) {\n if (this.snapDraggedEvents) {\n const newUser = this.getDraggedUserColumn(dayEvent, dragEvent.x);\n const newEventTimes = this.getDragMovedEventTimes(\n dayEvent,\n { ...dragEvent, x: 0 },\n this.dayColumnWidth,\n true\n );\n const originalEvent = dayEvent.event;\n const adjustedEvent = {\n ...originalEvent,\n ...newEventTimes,\n meta: { ...originalEvent.meta, user: newUser },\n };\n const tempEvents = this.events.map((event) => {\n if (event === originalEvent) {\n return adjustedEvent;\n }\n return event;\n });\n this.restoreOriginalEvents(\n tempEvents,\n new Map([[adjustedEvent, originalEvent]])\n );\n }\n this.dragAlreadyMoved = true;\n }\n\n dragEnded(\n weekEvent: WeekViewAllDayEvent | WeekViewTimeEvent,\n dragEndEvent: DragEndEvent,\n dayWidth: number,\n useY = false\n ) {\n super.dragEnded(\n weekEvent,\n {\n ...dragEndEvent,\n x: 0,\n },\n dayWidth,\n useY\n );\n const newUser = this.getDraggedUserColumn(weekEvent, dragEndEvent.x);\n if (newUser && newUser !== weekEvent.event.meta.user) {\n this.userChanged.emit({ event: weekEvent.event, newUser });\n }\n }\n\n protected getWeekView(events: CalendarEvent[]) {\n return this.utils.getWeekView({\n events,\n users: this.users,\n viewDate: this.viewDate,\n weekStartsOn: this.weekStartsOn,\n excluded: this.excludeDays,\n precision: this.precision,\n absolutePositionedEvents: true,\n hourSegments: this.hourSegments,\n dayStart: {\n hour: this.dayStartHour,\n minute: this.dayStartMinute,\n },\n dayEnd: {\n hour: this.dayEndHour,\n minute: this.dayEndMinute,\n },\n segmentHeight: this.hourSegmentHeight,\n weekendDays: this.weekendDays,\n ...getWeekViewPeriod(\n this.dateAdapter,\n this.viewDate,\n this.weekStartsOn,\n this.excludeDays,\n this.daysInWeek\n ),\n });\n }\n\n private getDraggedUserColumn(\n dayEvent: WeekViewTimeEvent | WeekViewAllDayEvent,\n xPixels: number\n ) {\n const columnsMoved = Math.round(xPixels / this.dayColumnWidth);\n const currentColumnIndex = this.view.users.findIndex(\n (user) => user === dayEvent.event.meta.user\n );\n const newIndex = currentColumnIndex + columnsMoved;\n return this.view.users[newIndex];\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/day-view-start-end/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 7,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 7,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Day;\n\n viewDate: Date = new Date();\n\n events: CalendarEvent[] = [];\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/dayjs/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 14,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 14,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent, CalendarView, DAYS_OF_WEEK } from 'angular-calendar';\nimport dayjs from 'dayjs';\nimport en from 'dayjs/locale/en';\n\ndayjs.locale({\n ...en,\n weekStart: DAYS_OF_WEEK.MONDAY,\n});\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Month;\n\n viewDate: Date = new Date();\n\n events: CalendarEvent[] = [];\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/demo-utils/calendar-header.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 4,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 69,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        47,
                        137
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarView } from 'angular-calendar';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (61). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 6,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 68,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 71,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 71,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 73,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 73,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 75,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 75,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 77,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 77,
                "endColumn": 23,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        2075,
                        2075
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 79,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 79,
                "endColumn": 27,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        2135,
                        2135
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 7,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CalendarView } from 'angular-calendar';\n\n@Component({\n selector: 'mwl-demo-utils-calendar-header',\n template: `\n <div class=\"row text-center\">\n <div class=\"col-md-4\">\n <div class=\"btn-group\">\n <div\n class=\"btn btn-primary\"\n mwlCalendarPreviousView\n [view]=\"view\"\n [(viewDate)]=\"viewDate\"\n (viewDateChange)=\"viewDateChange.next(viewDate)\"\n >\n Previous\n </div>\n <div\n class=\"btn btn-outline-secondary\"\n mwlCalendarToday\n [(viewDate)]=\"viewDate\"\n (viewDateChange)=\"viewDateChange.next(viewDate)\"\n >\n Today\n </div>\n <div\n class=\"btn btn-primary\"\n mwlCalendarNextView\n [view]=\"view\"\n [(viewDate)]=\"viewDate\"\n (viewDateChange)=\"viewDateChange.next(viewDate)\"\n >\n Next\n </div>\n </div>\n </div>\n <div class=\"col-md-4\">\n <h3>{{ viewDate | calendarDate: view + 'ViewTitle':locale }}</h3>\n </div>\n <div class=\"col-md-4\">\n <div class=\"btn-group\">\n <div\n class=\"btn btn-primary\"\n (click)=\"viewChange.emit(CalendarView.Month)\"\n [class.active]=\"view === CalendarView.Month\"\n >\n Month\n </div>\n <div\n class=\"btn btn-primary\"\n (click)=\"viewChange.emit(CalendarView.Week)\"\n [class.active]=\"view === CalendarView.Week\"\n >\n Week\n </div>\n <div\n class=\"btn btn-primary\"\n (click)=\"viewChange.emit(CalendarView.Day)\"\n [class.active]=\"view === CalendarView.Day\"\n >\n Day\n </div>\n </div>\n </div>\n </div>\n <br />\n `,\n})\nexport class CalendarHeaderComponent {\n @Input() view: CalendarView;\n\n @Input() viewDate: Date;\n\n @Input() locale: string = 'en';\n\n @Output() viewChange = new EventEmitter<CalendarView>();\n\n @Output() viewDateChange = new EventEmitter<Date>();\n\n CalendarView = CalendarView;\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/disable-slide-animation/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 9,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 9,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent } from 'angular-calendar';\nimport { isSameDay, isSameMonth } from 'date-fns';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n})\nexport class DemoComponent {\n viewDate: Date = new Date();\n\n events: CalendarEvent[] = [\n {\n start: new Date(),\n title: 'An event',\n color: colors.red,\n },\n ];\n\n activeDayIsOpen: boolean;\n\n dayClicked({ date, events }: { date: Date; events: CalendarEvent[] }): void {\n if (isSameMonth(date, this.viewDate)) {\n if (\n (isSameDay(this.viewDate, date) && this.activeDayIsOpen === true) ||\n events.length === 0\n ) {\n this.activeDayIsOpen = false;\n } else {\n this.activeDayIsOpen = true;\n this.viewDate = date;\n }\n }\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/disable-tooltips/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 13,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 13,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport {\n CalendarEvent,\n CalendarEventTitleFormatter,\n CalendarView,\n} from 'angular-calendar';\nimport { CustomEventTitleFormatter } from './custom-event-title-formatter.provider';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n providers: [\n {\n provide: CalendarEventTitleFormatter,\n useClass: CustomEventTitleFormatter,\n },\n ],\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Month;\n\n viewDate: Date = new Date();\n\n events: CalendarEvent[] = [\n {\n title: 'An event',\n start: new Date(),\n color: colors.red,\n },\n ];\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/disable-tooltips/custom-event-title-formatter.provider.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 4,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 4,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        136,
                        136
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        136,
                        136
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        136,
                        136
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { CalendarEventTitleFormatter, CalendarEvent } from 'angular-calendar';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class CustomEventTitleFormatter extends CalendarEventTitleFormatter {\n // you can override any of the methods defined in the parent class\n\n monthTooltip(event: CalendarEvent): string {\n return;\n }\n\n weekTooltip(event: CalendarEvent): string {\n return;\n }\n\n dayTooltip(event: CalendarEvent): string {\n return;\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/drag-to-create-events/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 22,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 22,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        654,
                        654
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        654,
                        654
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        654,
                        654
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 40,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 40,
                "endColumn": 31
              },
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 52,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 52,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        82,
                        1387
                      ],
                      "text": ",\n} from '@angular/core';\nimport { CalendarEvent, CalendarEventTitleFormatter } from 'angular-calendar';\nimport { WeekViewHourSegment } from 'calendar-utils';\nimport { fromEvent } from 'rxjs';\nimport { finalize, takeUntil } from 'rxjs/operators';\nimport { addDays, addMinutes, endOfWeek } from 'date-fns';\n\nfunction floorToNearest(amount: number, precision: number) {\n return Math.floor(amount / precision) angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json precision;\n}\n\nfunction ceilToNearest(amount: number, precision: number) {\n return Math.ceil(amount / precision) angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json precision;\n}\n\n@Injectable()\nexport class CustomEventTitleFormatter extends CalendarEventTitleFormatter {\n weekTooltip(event: CalendarEvent, title: string) {\n if (!event.meta.tmpEvent) {\n return super.weekTooltip(event, title);\n }\n }\n\n dayTooltip(event: CalendarEvent, title: string) {\n if (!event.meta.tmpEvent) {\n return super.dayTooltip(event, title);\n }\n }\n}\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n providers: [\n {\n provide: CalendarEventTitleFormatter,\n useClass: CustomEventTitleFormatter,\n },\n ],\n styles: `\n .disable-hover {\n pointer-events: none;\n }\n `,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n ChangeDetectorRef,\n Component,\n Injectable,\n ViewEncapsulation,\n} from '@angular/core';\nimport { CalendarEvent, CalendarEventTitleFormatter } from 'angular-calendar';\nimport { WeekViewHourSegment } from 'calendar-utils';\nimport { fromEvent } from 'rxjs';\nimport { finalize, takeUntil } from 'rxjs/operators';\nimport { addDays, addMinutes, endOfWeek } from 'date-fns';\n\nfunction floorToNearest(amount: number, precision: number) {\n return Math.floor(amount / precision) angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json precision;\n}\n\nfunction ceilToNearest(amount: number, precision: number) {\n return Math.ceil(amount / precision) angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json precision;\n}\n\n@Injectable()\nexport class CustomEventTitleFormatter extends CalendarEventTitleFormatter {\n weekTooltip(event: CalendarEvent, title: string) {\n if (!event.meta.tmpEvent) {\n return super.weekTooltip(event, title);\n }\n }\n\n dayTooltip(event: CalendarEvent, title: string) {\n if (!event.meta.tmpEvent) {\n return super.dayTooltip(event, title);\n }\n }\n}\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n providers: [\n {\n provide: CalendarEventTitleFormatter,\n useClass: CustomEventTitleFormatter,\n },\n ],\n styles: `\n .disable-hover {\n pointer-events: none;\n }\n `,\n encapsulation: ViewEncapsulation.None,\n})\nexport class DemoComponent {\n viewDate = new Date();\n\n events: CalendarEvent[] = [];\n\n dragToCreateActive = false;\n\n weekStartsOn: 0 = 0;\n\n constructor(private cdr: ChangeDetectorRef) {}\n\n startDragToCreate(\n segment: WeekViewHourSegment,\n mouseDownEvent: MouseEvent,\n segmentElement: HTMLElement\n ) {\n const dragToSelectEvent: CalendarEvent = {\n id: this.events.length,\n title: 'New event',\n start: segment.date,\n meta: {\n tmpEvent: true,\n },\n };\n this.events = [...this.events, dragToSelectEvent];\n const segmentPosition = segmentElement.getBoundingClientRect();\n this.dragToCreateActive = true;\n const endOfView = endOfWeek(this.viewDate, {\n weekStartsOn: this.weekStartsOn,\n });\n\n fromEvent(document, 'mousemove')\n .pipe(\n finalize(() => {\n delete dragToSelectEvent.meta.tmpEvent;\n this.dragToCreateActive = false;\n this.refresh();\n }),\n takeUntil(fromEvent(document, 'mouseup'))\n )\n .subscribe((mouseMoveEvent: MouseEvent) => {\n const minutesDiff = ceilToNearest(\n mouseMoveEvent.clientY - segmentPosition.top,\n 30\n );\n\n const daysDiff =\n floorToNearest(\n mouseMoveEvent.clientX - segmentPosition.left,\n segmentPosition.width\n ) / segmentPosition.width;\n\n const newEnd = addDays(addMinutes(segment.date, minutesDiff), daysDiff);\n if (newEnd > segment.date && newEnd < endOfView) {\n dragToSelectEvent.end = newEnd;\n }\n this.refresh();\n });\n }\n\n private refresh() {\n this.events = [...this.events];\n this.cdr.detectChanges();\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/draggable-events/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 13,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 13,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport {\n CalendarEvent,\n CalendarEventTimesChangedEvent,\n CalendarView,\n} from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Month;\n\n viewDate = new Date();\n\n events: CalendarEvent[] = [\n {\n title: 'Draggable event',\n color: colors.yellow,\n start: new Date(),\n draggable: true,\n },\n {\n title: 'A non draggable event',\n color: colors.blue,\n start: new Date(),\n },\n ];\n\n refresh = new Subject<void>();\n\n eventTimesChanged({\n event,\n newStart,\n newEnd,\n }: CalendarEventTimesChangedEvent): void {\n event.start = newStart;\n event.end = newEnd;\n this.refresh.next();\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/draggable-external-events/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 13,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 13,
                "endColumn": 31
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`styles` has too many lines (8). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 14,
                "column": 11,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 23,
                "endColumn": 6
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport {\n CalendarEvent,\n CalendarEventTimesChangedEvent,\n CalendarView,\n} from 'angular-calendar';\nimport { Subject } from 'rxjs';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n styles: `\n .drag-active {\n position: relative;\n z-index: 1;\n pointer-events: none;\n }\n .drag-over {\n background-color: #eee;\n }\n `,\n})\nexport class DemoComponent {\n CalendarView = CalendarView;\n\n view = CalendarView.Month;\n\n viewDate = new Date();\n\n externalEvents: CalendarEvent[] = [\n {\n title: 'Event 1',\n color: colors.yellow,\n start: new Date(),\n draggable: true,\n },\n {\n title: 'Event 2',\n color: colors.blue,\n start: new Date(),\n draggable: true,\n },\n ];\n\n events: CalendarEvent[] = [];\n\n activeDayIsOpen = false;\n\n refresh = new Subject<void>();\n\n eventDropped({\n event,\n newStart,\n newEnd,\n allDay,\n }: CalendarEventTimesChangedEvent): void {\n const externalIndex = this.externalEvents.indexOf(event);\n if (typeof allDay !== 'undefined') {\n event.allDay = allDay;\n }\n if (externalIndex > -1) {\n this.externalEvents.splice(externalIndex, 1);\n this.events.push(event);\n }\n event.start = newStart;\n if (newEnd) {\n event.end = newEnd;\n }\n if (this.view === 'month') {\n this.viewDate = newStart;\n this.activeDayIsOpen = true;\n }\n this.events = [...this.events];\n }\n\n externalDrop(event: CalendarEvent) {\n if (this.externalEvents.indexOf(event) === -1) {\n this.events = this.events.filter((iEvent) => iEvent !== event);\n this.externalEvents.push(event);\n }\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/editable-deletable-events/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 8,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 8,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Month;\n\n viewDate: Date = new Date();\n\n events: CalendarEvent[] = [\n {\n title: 'Editable event',\n color: colors.yellow,\n start: new Date(),\n actions: [\n {\n label: '<i class=\"fas fa-fw fa-pencil-alt\"></i>',\n onClick: ({ event }: { event: CalendarEvent }): void => {\n console.log('Edit event', event);\n },\n },\n ],\n },\n {\n title: 'Deletable event',\n color: colors.blue,\n start: new Date(),\n actions: [\n {\n label: '<i class=\"fas fa-fw fa-trash-alt\"></i>',\n onClick: ({ event }: { event: CalendarEvent }): void => {\n this.events = this.events.filter((iEvent) => iEvent !== event);\n console.log('Event deleted', event);\n },\n },\n ],\n },\n {\n title: 'Non editable and deletable event',\n color: colors.red,\n start: new Date(),\n },\n ];\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/exclude-days/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 12,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 12,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        47,
                        358
                      ],
                      "text": ",\n} from '@angular/core';\nimport { CalendarEvent, CalendarView, DAYS_OF_WEEK } from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 13,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 13,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n ChangeDetectionStrategy,\n ViewEncapsulation,\n} from '@angular/core';\nimport { CalendarEvent, CalendarView, DAYS_OF_WEEK } from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n templateUrl: 'template.html',\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Month;\n\n viewDate: Date = new Date('2016-01-05');\n\n events: CalendarEvent[] = [\n {\n start: new Date('2016-01-08'),\n end: new Date('2016-01-10'),\n title: 'One day excluded event',\n color: colors.red,\n allDay: true,\n },\n {\n start: new Date('2016-01-01'),\n end: new Date('2016-01-09'),\n title: 'Multiple weeks event',\n allDay: true,\n },\n ];\n\n // exclude weekends\n excludeDays: number[] = [0, 6];\n\n weekStartsOn = DAYS_OF_WEEK.SUNDAY;\n\n CalendarView = CalendarView;\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/extra-month-view-weeks/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 6,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 6,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        293,
                        293
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        293,
                        293
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        293,
                        293
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 18,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 18,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy, Injectable } from '@angular/core';\nimport { CalendarEvent, CalendarUtils } from 'angular-calendar';\nimport { subWeeks, startOfMonth, endOfMonth, addWeeks } from 'date-fns';\nimport { GetMonthViewArgs, MonthView } from 'calendar-utils';\n\n@Injectable()\nexport class MyCalendarUtils extends CalendarUtils {\n getMonthView(args: GetMonthViewArgs): MonthView {\n args.viewStart = subWeeks(startOfMonth(args.viewDate), 1);\n args.viewEnd = addWeeks(endOfMonth(args.viewDate), 1);\n return super.getMonthView(args);\n }\n}\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n providers: [\n {\n provide: CalendarUtils,\n useClass: MyCalendarUtils,\n },\n ],\n})\nexport class DemoComponent {\n viewDate: Date = new Date();\n\n events: CalendarEvent[] = [];\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/group-similar-events/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`styles` has too many lines (7). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 18,
                "column": 11,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 26,
                "endColumn": 6
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport {\n CalendarEvent,\n CalendarMonthViewDay,\n CalendarView,\n} from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\nimport { isSameMinute, startOfDay } from 'date-fns';\n\ninterface EventGroupMeta {\n type: string;\n}\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './template.html',\n styles: `\n .cell-totals {\n margin: 5px;\n text-align: center;\n }\n .badge {\n margin-right: 5px;\n }\n `,\n})\nexport class DemoComponent implements OnInit {\n view: CalendarView = CalendarView.Month;\n\n viewDate: Date = new Date();\n\n events: CalendarEvent[] = [\n {\n title: 'Event 1',\n color: colors.yellow,\n start: startOfDay(new Date()),\n meta: {\n type: 'warning',\n },\n },\n {\n title: 'Event 2',\n color: colors.yellow,\n start: startOfDay(new Date()),\n meta: {\n type: 'warning',\n },\n },\n {\n title: 'Event 3',\n color: colors.blue,\n start: startOfDay(new Date()),\n meta: {\n type: 'info',\n },\n },\n {\n title: 'Event 4',\n color: colors.red,\n start: startOfDay(new Date()),\n meta: {\n type: 'danger',\n },\n },\n {\n title: 'Event 5',\n color: colors.red,\n start: startOfDay(new Date()),\n meta: {\n type: 'danger',\n },\n },\n ];\n\n groupedSimilarEvents: CalendarEvent[] = [];\n\n ngOnInit() {\n // group any events together that have the same type and dates\n // use for when you have a lot of events on the week or day view at the same time\n this.groupedSimilarEvents = [];\n const processedEvents = new Set();\n this.events.forEach((event) => {\n if (processedEvents.has(event)) {\n return;\n }\n const similarEvents = this.events.filter((otherEvent) => {\n return (\n otherEvent !== event &&\n !processedEvents.has(otherEvent) &&\n isSameMinute(otherEvent.start, event.start) &&\n (isSameMinute(otherEvent.end, event.end) ||\n (!otherEvent.end && !event.end)) &&\n otherEvent.color.primary === event.color.primary &&\n otherEvent.color.secondary === event.color.secondary\n );\n });\n processedEvents.add(event);\n similarEvents.forEach((otherEvent) => {\n processedEvents.add(otherEvent);\n });\n if (similarEvents.length > 0) {\n this.groupedSimilarEvents.push({\n title: `${similarEvents.length + 1} events`,\n color: event.color,\n start: event.start,\n end: event.end,\n meta: {\n groupedEvents: [event, ...similarEvents],\n },\n });\n } else {\n this.groupedSimilarEvents.push(event);\n }\n });\n }\n\n beforeMonthViewRender({\n body,\n }: {\n body: CalendarMonthViewDay<EventGroupMeta>[];\n }): void {\n // month view has a different UX from the week and day view so we only really need to group by the type\n body.forEach((cell) => {\n const groups = {};\n cell.events.forEach((event: CalendarEvent<EventGroupMeta>) => {\n groups[event.meta.type] = groups[event.meta.type] || [];\n groups[event.meta.type].push(event);\n });\n cell['eventGroups'] = Object.entries(groups);\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/i18n/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 13,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 13,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport {\n CalendarDateFormatter,\n CalendarEvent,\n CalendarView,\n DAYS_OF_WEEK,\n} from 'angular-calendar';\nimport { CustomDateFormatter } from './custom-date-formatter.provider';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n providers: [\n {\n provide: CalendarDateFormatter,\n useClass: CustomDateFormatter,\n },\n ],\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Month;\n\n viewDate = new Date();\n\n events: CalendarEvent[] = [];\n\n locale: string = 'fr';\n\n weekStartsOn: number = DAYS_OF_WEEK.MONDAY;\n\n weekendDays: number[] = [DAYS_OF_WEEK.FRIDAY, DAYS_OF_WEEK.SATURDAY];\n\n CalendarView = CalendarView;\n\n setView(view: CalendarView) {\n this.view = view;\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/i18n/custom-date-formatter.provider.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 5,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 5,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        182,
                        182
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        182,
                        182
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        182,
                        182
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { CalendarDateFormatter, DateFormatterParams } from 'angular-calendar';\nimport { formatDate } from '@angular/common';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class CustomDateFormatter extends CalendarDateFormatter {\n // you can override any of the methods defined in the parent class\n\n public dayViewHour({ date, locale }: DateFormatterParams): string {\n return formatDate(date, 'HH:mm', locale);\n }\n\n public weekViewHour({ date, locale }: DateFormatterParams): string {\n return this.dayViewHour({ date, locale });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/kitchen-sink/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`styles` has too many lines (8). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 45,
                "column": 11,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 54,
                "endColumn": 6
              },
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 55,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 55,
                "endColumn": 31
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use the `viewChild` function instead of the `ViewChild` decorator",
                "line": 58,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferQuerySignals",
                "endLine": 58,
                "endColumn": 47
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n ChangeDetectionStrategy,\n ViewChild,\n TemplateRef,\n} from '@angular/core';\nimport {\n startOfDay,\n endOfDay,\n subDays,\n addDays,\n endOfMonth,\n isSameDay,\n isSameMonth,\n addHours,\n} from 'date-fns';\nimport { Subject } from 'rxjs';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport {\n CalendarEvent,\n CalendarEventAction,\n CalendarEventTimesChangedEvent,\n CalendarView,\n} from 'angular-calendar';\nimport { EventColor } from 'calendar-utils';\n\nconst colors: Record<string, EventColor> = {\n red: {\n primary: '#ad2121',\n secondary: '#FAE3E3',\n },\n blue: {\n primary: '#1e90ff',\n secondary: '#D1E8FF',\n },\n yellow: {\n primary: '#e3bc08',\n secondary: '#FDF1BA',\n },\n};\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n styles: `\n h3 {\n margin: 0 0 10px;\n }\n\n pre {\n background-color: #f5f5f5;\n padding: 15px;\n }\n `,\n templateUrl: 'template.html',\n})\nexport class DemoComponent {\n @ViewChild('modalContent', { static: true }) modalContent: TemplateRef<any>;\n\n view: CalendarView = CalendarView.Month;\n\n CalendarView = CalendarView;\n\n viewDate: Date = new Date();\n\n modalData: {\n action: string;\n event: CalendarEvent;\n };\n\n actions: CalendarEventAction[] = [\n {\n label: '<i class=\"fas fa-fw fa-pencil-alt\"></i>',\n a11yLabel: 'Edit',\n onClick: ({ event }: { event: CalendarEvent }): void => {\n this.handleEvent('Edited', event);\n },\n },\n {\n label: '<i class=\"fas fa-fw fa-trash-alt\"></i>',\n a11yLabel: 'Delete',\n onClick: ({ event }: { event: CalendarEvent }): void => {\n this.events = this.events.filter((iEvent) => iEvent !== event);\n this.handleEvent('Deleted', event);\n },\n },\n ];\n\n refresh = new Subject<void>();\n\n events: CalendarEvent[] = [\n {\n start: subDays(startOfDay(new Date()), 1),\n end: addDays(new Date(), 1),\n title: 'A 3 day event',\n color: { ...colors.red },\n actions: this.actions,\n allDay: true,\n resizable: {\n beforeStart: true,\n afterEnd: true,\n },\n draggable: true,\n },\n {\n start: startOfDay(new Date()),\n title: 'An event with no end date',\n color: { ...colors.yellow },\n actions: this.actions,\n },\n {\n start: subDays(endOfMonth(new Date()), 3),\n end: addDays(endOfMonth(new Date()), 3),\n title: 'A long event that spans 2 months',\n color: { ...colors.blue },\n allDay: true,\n },\n {\n start: addHours(startOfDay(new Date()), 2),\n end: addHours(new Date(), 2),\n title: 'A draggable and resizable event',\n color: { ...colors.yellow },\n actions: this.actions,\n resizable: {\n beforeStart: true,\n afterEnd: true,\n },\n draggable: true,\n },\n ];\n\n activeDayIsOpen: boolean = true;\n\n constructor(private modal: NgbModal) {}\n\n dayClicked({ date, events }: { date: Date; events: CalendarEvent[] }): void {\n if (isSameMonth(date, this.viewDate)) {\n if (\n (isSameDay(this.viewDate, date) && this.activeDayIsOpen === true) ||\n events.length === 0\n ) {\n this.activeDayIsOpen = false;\n } else {\n this.activeDayIsOpen = true;\n }\n this.viewDate = date;\n }\n }\n\n eventTimesChanged({\n event,\n newStart,\n newEnd,\n }: CalendarEventTimesChangedEvent): void {\n this.events = this.events.map((iEvent) => {\n if (iEvent === event) {\n return {\n ...event,\n start: newStart,\n end: newEnd,\n };\n }\n return iEvent;\n });\n this.handleEvent('Dropped or resized', event);\n }\n\n handleEvent(action: string, event: CalendarEvent): void {\n this.modalData = { event, action };\n this.modal.open(this.modalContent, { size: 'lg' });\n }\n\n addEvent(): void {\n this.events = [\n ...this.events,\n {\n title: 'New event',\n start: startOfDay(new Date()),\n end: endOfDay(new Date()),\n color: colors.red,\n draggable: true,\n resizable: {\n beforeStart: true,\n afterEnd: true,\n },\n },\n ];\n }\n\n deleteEvent(eventToDelete: CalendarEvent) {\n this.events = this.events.filter((event) => event !== eventToDelete);\n }\n\n setView(view: CalendarView) {\n this.view = view;\n }\n\n closeOpenMonthViewDay() {\n this.activeDayIsOpen = false;\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/min-max-date/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 63,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 63,
                "endColumn": 31
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`styles` has too many lines (8). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 64,
                "column": 11,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 73,
                "endColumn": 6
              },
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 75,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 75,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        47,
                        1573
                      ],
                      "text": ",\n} from '@angular/core';\nimport {\n CalendarEvent,\n CalendarMonthViewDay,\n CalendarView,\n} from 'angular-calendar';\nimport {\n subMonths,\n addMonths,\n addDays,\n addWeeks,\n subDays,\n subWeeks,\n startOfMonth,\n endOfMonth,\n startOfWeek,\n endOfWeek,\n startOfDay,\n endOfDay,\n} from 'date-fns';\n\ntype CalendarPeriod = 'day' | 'week' | 'month';\n\nfunction addPeriod(period: CalendarPeriod, date: Date, amount: number): Date {\n return {\n day: addDays,\n week: addWeeks,\n month: addMonths,\n }[period](date, amount);\n}\n\nfunction subPeriod(period: CalendarPeriod, date: Date, amount: number): Date {\n return {\n day: subDays,\n week: subWeeks,\n month: subMonths,\n }[period](date, amount);\n}\n\nfunction startOfPeriod(period: CalendarPeriod, date: Date): Date {\n return {\n day: startOfDay,\n week: startOfWeek,\n month: startOfMonth,\n }[period](date);\n}\n\nfunction endOfPeriod(period: CalendarPeriod, date: Date): Date {\n return {\n day: endOfDay,\n week: endOfWeek,\n month: endOfMonth,\n }[period](date);\n}\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n styles: `\n .cal-disabled {\n background-color: #eee;\n pointer-events: none;\n }\n\n .cal-disabled .cal-day-number {\n opacity: 0.1;\n }\n `,\n // this is a hack to get styles to apply to the inner component. Your app should just use a global stylesheet\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n ChangeDetectionStrategy,\n ViewEncapsulation,\n} from '@angular/core';\nimport {\n CalendarEvent,\n CalendarMonthViewDay,\n CalendarView,\n} from 'angular-calendar';\nimport {\n subMonths,\n addMonths,\n addDays,\n addWeeks,\n subDays,\n subWeeks,\n startOfMonth,\n endOfMonth,\n startOfWeek,\n endOfWeek,\n startOfDay,\n endOfDay,\n} from 'date-fns';\n\ntype CalendarPeriod = 'day' | 'week' | 'month';\n\nfunction addPeriod(period: CalendarPeriod, date: Date, amount: number): Date {\n return {\n day: addDays,\n week: addWeeks,\n month: addMonths,\n }[period](date, amount);\n}\n\nfunction subPeriod(period: CalendarPeriod, date: Date, amount: number): Date {\n return {\n day: subDays,\n week: subWeeks,\n month: subMonths,\n }[period](date, amount);\n}\n\nfunction startOfPeriod(period: CalendarPeriod, date: Date): Date {\n return {\n day: startOfDay,\n week: startOfWeek,\n month: startOfMonth,\n }[period](date);\n}\n\nfunction endOfPeriod(period: CalendarPeriod, date: Date): Date {\n return {\n day: endOfDay,\n week: endOfWeek,\n month: endOfMonth,\n }[period](date);\n}\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n styles: `\n .cal-disabled {\n background-color: #eee;\n pointer-events: none;\n }\n\n .cal-disabled .cal-day-number {\n opacity: 0.1;\n }\n `,\n // this is a hack to get styles to apply to the inner component. Your app should just use a global stylesheet\n encapsulation: ViewEncapsulation.None,\n})\nexport class DemoComponent {\n view: CalendarView | CalendarPeriod = CalendarView.Month;\n\n viewDate: Date = new Date();\n\n events: CalendarEvent[] = [];\n\n minDate: Date = subMonths(new Date(), 1);\n\n maxDate: Date = addMonths(new Date(), 1);\n\n prevBtnDisabled: boolean = false;\n\n nextBtnDisabled: boolean = false;\n\n constructor() {\n this.dateOrViewChanged();\n }\n\n increment(): void {\n this.changeDate(addPeriod(this.view, this.viewDate, 1));\n }\n\n decrement(): void {\n this.changeDate(subPeriod(this.view, this.viewDate, 1));\n }\n\n today(): void {\n this.changeDate(new Date());\n }\n\n dateIsValid(date: Date): boolean {\n return date >= this.minDate && date <= this.maxDate;\n }\n\n changeDate(date: Date): void {\n this.viewDate = date;\n this.dateOrViewChanged();\n }\n\n changeView(view: CalendarPeriod): void {\n this.view = view;\n this.dateOrViewChanged();\n }\n\n dateOrViewChanged(): void {\n this.prevBtnDisabled = !this.dateIsValid(\n endOfPeriod(this.view, subPeriod(this.view, this.viewDate, 1))\n );\n this.nextBtnDisabled = !this.dateIsValid(\n startOfPeriod(this.view, addPeriod(this.view, this.viewDate, 1))\n );\n if (this.viewDate < this.minDate) {\n this.changeDate(this.minDate);\n } else if (this.viewDate > this.maxDate) {\n this.changeDate(this.maxDate);\n }\n }\n\n beforeMonthViewRender({ body }: { body: CalendarMonthViewDay[] }): void {\n body.forEach((day) => {\n if (!this.dateIsValid(day.date)) {\n day.cssClass = 'cal-disabled';\n }\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/moment/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 16,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 16,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent, CalendarView, DAYS_OF_WEEK } from 'angular-calendar';\nimport moment from 'moment';\n\n// weekStartsOn option is ignored when using moment, as it needs to be configured globally for the moment locale\nmoment.updateLocale('en', {\n week: {\n dow: DAYS_OF_WEEK.MONDAY,\n doy: 0,\n },\n});\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Month;\n\n viewDate: Date = new Date();\n\n events: CalendarEvent[] = [];\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/month-view-badge-total/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 8,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 8,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent, CalendarMonthViewDay } from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n})\nexport class DemoComponent {\n viewDate: Date = new Date();\n\n events: CalendarEvent<{ incrementsBadgeTotal: boolean }>[] = [\n {\n title: 'Increments badge total on the day cell',\n color: colors.yellow,\n start: new Date(),\n meta: {\n incrementsBadgeTotal: true,\n },\n },\n {\n title: 'Does not increment the badge total on the day cell',\n color: colors.blue,\n start: new Date(),\n meta: {\n incrementsBadgeTotal: false,\n },\n },\n ];\n\n beforeMonthViewRender({ body }: { body: CalendarMonthViewDay[] }): void {\n body.forEach((day) => {\n day.badgeTotal = day.events.filter(\n (event) => event.meta.incrementsBadgeTotal\n ).length;\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/navigating-between-views/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 7,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 7,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Month;\n\n viewDate: Date = new Date();\n\n events: CalendarEvent[] = [];\n\n changeDay(date: Date) {\n this.viewDate = date;\n this.view = CalendarView.Day;\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/no-events-label/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 19,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 19,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n ChangeDetectionStrategy,\n ChangeDetectorRef,\n} from '@angular/core';\nimport {\n CalendarEvent,\n CalendarViewPeriod,\n CalendarMonthViewBeforeRenderEvent,\n CalendarWeekViewBeforeRenderEvent,\n CalendarDayViewBeforeRenderEvent,\n CalendarView,\n} from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Month;\n\n viewDate: Date = new Date();\n\n events: CalendarEvent[] = [\n {\n title: 'Event 1',\n color: colors.yellow,\n start: new Date(),\n },\n ];\n\n period: CalendarViewPeriod;\n\n constructor(private cdr: ChangeDetectorRef) {}\n\n beforeViewRender(\n event:\n | CalendarMonthViewBeforeRenderEvent\n | CalendarWeekViewBeforeRenderEvent\n | CalendarDayViewBeforeRenderEvent\n ) {\n this.period = event.period;\n this.cdr.detectChanges();\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/optional-event-end-dates/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 9,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 9,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\nimport { setHours, setMinutes } from 'date-fns';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Day;\n\n viewDate: Date = new Date();\n\n events: CalendarEvent[] = [\n {\n title: 'No event end date',\n start: setHours(setMinutes(new Date(), 0), 3),\n color: colors.blue,\n },\n {\n title: 'No event end date',\n start: setHours(setMinutes(new Date(), 0), 5),\n color: colors.yellow,\n },\n ];\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/public-holidays/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 29,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 29,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n ChangeDetectionStrategy,\n OnInit,\n ChangeDetectorRef,\n} from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\nimport { HttpClient } from '@angular/common/http';\nimport { startOfYear, subYears } from 'date-fns';\n\n// get your own key from https://holidayapi.com/\nconst HOLIDAY_API_KEY = '8eb2582d-3a4c-4fc5-94c8-3e21487d4e23';\n\n// change this to your own country\nconst COUNTRY_CODE = 'US';\n\ninterface Holiday {\n date: string;\n name: string;\n}\n\ntype CalendarEventWithMeta = CalendarEvent<\n { type: 'holiday'; holiday: Holiday } | { type: 'normal' }\n>;\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n})\nexport class DemoComponent implements OnInit {\n view: CalendarView = CalendarView.Month;\n\n viewDate = startOfYear(subYears(new Date(), 1));\n\n events: CalendarEventWithMeta[] = [];\n\n constructor(private http: HttpClient, private cdr: ChangeDetectorRef) {}\n\n ngOnInit(): void {\n this.fetchHolidays();\n }\n\n private fetchHolidays() {\n this.http\n .get<{ holidays: Holiday[] }>('https://holidayapi.com/v1/holidays', {\n params: {\n country: COUNTRY_CODE,\n year: String(new Date().getFullYear() - 1),\n key: HOLIDAY_API_KEY,\n },\n })\n .subscribe(({ holidays }) => {\n this.events = holidays.map((holiday) => {\n return {\n start: new Date(holiday.date),\n title: holiday.name,\n allDay: true,\n meta: {\n type: 'holiday',\n holiday,\n },\n };\n });\n this.cdr.markForCheck();\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/recurring-events/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 38,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 38,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n ChangeDetectionStrategy,\n ChangeDetectorRef,\n} from '@angular/core';\n// As an alternative to rrule there is also rSchedule\n// See https://github.com/mattlewis92/angular-calendar/issues/711#issuecomment-418537158 for more info\nimport { RRule } from 'rrule';\nimport moment from 'moment-timezone';\nimport {\n CalendarDayViewBeforeRenderEvent,\n CalendarEvent,\n CalendarMonthViewBeforeRenderEvent,\n CalendarView,\n CalendarWeekViewBeforeRenderEvent,\n} from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\nimport { ViewPeriod } from 'calendar-utils';\n\ninterface RecurringEvent {\n title: string;\n color: any;\n rrule?: {\n freq: any;\n bymonth?: number;\n bymonthday?: number;\n byweekday?: any;\n };\n}\n\n// we set the timezone to UTC to avoid issues with DST changes\n// see https://github.com/mattlewis92/angular-calendar/issues/717 for more info\nmoment.tz.setDefault('Utc');\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Month;\n\n viewDate = moment().toDate();\n\n recurringEvents: RecurringEvent[] = [\n {\n title: 'Recurs on the 5th of each month',\n color: colors.yellow,\n rrule: {\n freq: RRule.MONTHLY,\n bymonthday: 5,\n },\n },\n {\n title: 'Recurs yearly on the 10th of the current month',\n color: colors.blue,\n rrule: {\n freq: RRule.YEARLY,\n bymonth: moment().month() + 1,\n bymonthday: 10,\n },\n },\n {\n title: 'Recurs weekly on mondays',\n color: colors.red,\n rrule: {\n freq: RRule.WEEKLY,\n byweekday: [RRule.MO],\n },\n },\n ];\n\n calendarEvents: CalendarEvent[] = [];\n\n viewPeriod: ViewPeriod;\n\n constructor(private cdr: ChangeDetectorRef) {}\n\n updateCalendarEvents(\n viewRender:\n | CalendarMonthViewBeforeRenderEvent\n | CalendarWeekViewBeforeRenderEvent\n | CalendarDayViewBeforeRenderEvent\n ): void {\n if (\n !this.viewPeriod ||\n !moment(this.viewPeriod.start).isSame(viewRender.period.start) ||\n !moment(this.viewPeriod.end).isSame(viewRender.period.end)\n ) {\n this.viewPeriod = viewRender.period;\n this.calendarEvents = [];\n\n this.recurringEvents.forEach((event) => {\n const rule: RRule = new RRule({\n ...event.rrule,\n dtstart: moment(viewRender.period.start).startOf('day').toDate(),\n until: moment(viewRender.period.end).endOf('day').toDate(),\n });\n const { title, color } = event;\n\n rule.all().forEach((date) => {\n this.calendarEvents.push({\n title,\n color,\n start: moment(date).toDate(),\n });\n });\n });\n this.cdr.detectChanges();\n }\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/refreshing-the-view/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 19,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 19,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        47,
                        444
                      ],
                      "text": ",\n} from '@angular/core';\nimport {\n CalendarEvent,\n CalendarMonthViewDay,\n CalendarView,\n} from 'angular-calendar';\nimport { Subject } from 'rxjs';\n\nconst RED_CELL: 'red-cell' = 'red-cell';\nconst BLUE_CELL: 'blue-cell' = 'blue-cell';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 20,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 20,
                "endColumn": 31
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`styles` has too many lines (6). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 21,
                "column": 11,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 28,
                "endColumn": 6
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n ChangeDetectionStrategy,\n ViewEncapsulation,\n} from '@angular/core';\nimport {\n CalendarEvent,\n CalendarMonthViewDay,\n CalendarView,\n} from 'angular-calendar';\nimport { Subject } from 'rxjs';\n\nconst RED_CELL: 'red-cell' = 'red-cell';\nconst BLUE_CELL: 'blue-cell' = 'blue-cell';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n encapsulation: ViewEncapsulation.None,\n templateUrl: 'template.html',\n styles: `\n .red-cell {\n background-color: red !important;\n }\n .blue-cell {\n background-color: blue !important;\n }\n `,\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Month;\n\n viewDate = new Date();\n\n events: CalendarEvent[] = [];\n\n refresh = new Subject<void>();\n\n cssClass: string = RED_CELL;\n\n refreshView(): void {\n this.cssClass = this.cssClass === RED_CELL ? BLUE_CELL : RED_CELL;\n this.refresh.next();\n }\n\n beforeMonthViewRender({ body }: { body: CalendarMonthViewDay[] }): void {\n body.forEach((day) => {\n if (day.date.getDate() % 2 === 1) {\n day.cssClass = this.cssClass;\n }\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/resizable-events/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 14,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 14,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { addDays } from 'date-fns';\nimport {\n CalendarEvent,\n CalendarEventTimesChangedEvent,\n CalendarView,\n} from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Week;\n\n viewDate = new Date();\n\n events: CalendarEvent[] = [\n {\n title: 'Resizable event',\n color: colors.yellow,\n start: new Date(),\n end: addDays(new Date(), 1), // an end date is always required for resizable events to work\n resizable: {\n beforeStart: true, // this allows you to configure the sides the event is resizable from\n afterEnd: true,\n },\n },\n {\n title: 'A non resizable event',\n color: colors.blue,\n start: new Date(),\n end: addDays(new Date(), 1),\n },\n ];\n\n refresh = new Subject<void>();\n\n eventTimesChanged({\n event,\n newStart,\n newEnd,\n }: CalendarEventTimesChangedEvent): void {\n event.start = newStart;\n event.end = newEnd;\n this.refresh.next();\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/rtl/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 14,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 14,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport {\n CalendarEvent,\n CalendarEventTimesChangedEvent,\n CalendarView,\n} from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\nimport { addDays, addHours, endOfMonth, startOfDay, subDays } from 'date-fns';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Month;\n\n viewDate = new Date();\n\n events: CalendarEvent[] = [\n {\n start: subDays(startOfDay(new Date()), 1),\n end: addDays(new Date(), 1),\n title: 'A 3 day event',\n color: colors.red,\n allDay: true,\n resizable: {\n beforeStart: true,\n afterEnd: true,\n },\n draggable: true,\n },\n {\n start: startOfDay(new Date()),\n title: 'An event with no end date',\n color: colors.yellow,\n },\n {\n start: subDays(endOfMonth(new Date()), 3),\n end: addDays(endOfMonth(new Date()), 3),\n title: 'A long event that spans 2 months',\n color: colors.blue,\n allDay: true,\n },\n {\n start: addHours(startOfDay(new Date()), 2),\n end: addHours(new Date(), 2),\n title: 'A draggable and resizable event',\n color: colors.yellow,\n resizable: {\n beforeStart: true,\n afterEnd: true,\n },\n draggable: true,\n },\n ];\n\n refresh = new Subject<void>();\n\n eventTimesChanged({\n event,\n newStart,\n newEnd,\n }: CalendarEventTimesChangedEvent): void {\n event.start = newStart;\n event.end = newEnd;\n this.refresh.next();\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/scroll-to-current-time/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`styles` has too many lines (4). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 16,
                "column": 11,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 21,
                "endColumn": 6
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use the `viewChild` function instead of the `ViewChild` decorator",
                "line": 24,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferQuerySignals",
                "endLine": 24,
                "endColumn": 32
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n AfterViewInit,\n ChangeDetectionStrategy,\n ChangeDetectorRef,\n Component,\n ElementRef,\n ViewChild,\n} from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\nimport { differenceInMinutes, startOfDay, startOfHour } from 'date-fns';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './template.html',\n styles: `\n .scroll-container {\n height: calc(100vh - 320px);\n overflow-y: auto;\n }\n `,\n})\nexport class DemoComponent implements AfterViewInit {\n @ViewChild('scrollContainer') scrollContainer: ElementRef<HTMLElement>;\n\n view: CalendarView = CalendarView.Week;\n\n viewDate = new Date();\n\n events: CalendarEvent[] = [];\n\n constructor(private cdr: ChangeDetectorRef) {}\n\n ngAfterViewInit() {\n this.scrollToCurrentView();\n }\n\n viewChanged() {\n this.cdr.detectChanges();\n this.scrollToCurrentView();\n }\n\n private scrollToCurrentView() {\n if (this.view === CalendarView.Week || CalendarView.Day) {\n // each hour is 60px high, so to get the pixels to scroll it's just the amount of minutes since midnight\n const minutesSinceStartOfDay = differenceInMinutes(\n startOfHour(new Date()),\n startOfDay(new Date())\n );\n const headerHeight = this.view === CalendarView.Week ? 60 : 0;\n this.scrollContainer.nativeElement.scrollTop =\n minutesSinceStartOfDay + headerHeight;\n }\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/selectable-period/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 17,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 17,
                "endColumn": 31
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`styles` has too many lines (4). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 19,
                "column": 11,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 24,
                "endColumn": 6
              },
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 25,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 25,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        47,
                        669
                      ],
                      "text": ",\n} from '@angular/core';\nimport {\n CalendarEvent,\n CalendarMonthViewDay,\n CalendarView,\n CalendarWeekViewBeforeRenderEvent,\n} from 'angular-calendar';\nimport { WeekViewHour, WeekViewHourColumn } from 'calendar-utils';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n // don't do this in your app, its only so the styles get applied globally\n styles: `\n .cal-day-selected,\n .cal-day-selected:hover {\n background-color: deeppink !important;\n }\n `,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n ChangeDetectionStrategy,\n ViewEncapsulation,\n} from '@angular/core';\nimport {\n CalendarEvent,\n CalendarMonthViewDay,\n CalendarView,\n CalendarWeekViewBeforeRenderEvent,\n} from 'angular-calendar';\nimport { WeekViewHour, WeekViewHourColumn } from 'calendar-utils';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n // don't do this in your app, its only so the styles get applied globally\n styles: `\n .cal-day-selected,\n .cal-day-selected:hover {\n background-color: deeppink !important;\n }\n `,\n encapsulation: ViewEncapsulation.None,\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Month;\n\n viewDate: Date = new Date();\n\n selectedMonthViewDay: CalendarMonthViewDay;\n\n selectedDayViewDate: Date;\n\n hourColumns: WeekViewHourColumn[];\n\n events: CalendarEvent[] = [];\n\n selectedDays: any = [];\n\n dayClicked(day: CalendarMonthViewDay): void {\n this.selectedMonthViewDay = day;\n const selectedDateTime = this.selectedMonthViewDay.date.getTime();\n const dateIndex = this.selectedDays.findIndex(\n (selectedDay) => selectedDay.date.getTime() === selectedDateTime\n );\n if (dateIndex > -1) {\n delete this.selectedMonthViewDay.cssClass;\n this.selectedDays.splice(dateIndex, 1);\n } else {\n this.selectedDays.push(this.selectedMonthViewDay);\n day.cssClass = 'cal-day-selected';\n this.selectedMonthViewDay = day;\n }\n }\n\n beforeMonthViewRender({ body }: { body: CalendarMonthViewDay[] }): void {\n body.forEach((day) => {\n if (\n this.selectedDays.some(\n (selectedDay) => selectedDay.date.getTime() === day.date.getTime()\n )\n ) {\n day.cssClass = 'cal-day-selected';\n }\n });\n }\n\n hourSegmentClicked(date: Date) {\n this.selectedDayViewDate = date;\n this.addSelectedDayViewClass();\n }\n\n beforeWeekOrDayViewRender(event: CalendarWeekViewBeforeRenderEvent) {\n this.hourColumns = event.hourColumns;\n this.addSelectedDayViewClass();\n }\n\n private addSelectedDayViewClass() {\n this.hourColumns.forEach((column) => {\n column.hours.forEach((hourSegment) => {\n hourSegment.segments.forEach((segment) => {\n delete segment.cssClass;\n if (\n this.selectedDayViewDate &&\n segment.date.getTime() === this.selectedDayViewDate.getTime()\n ) {\n segment.cssClass = 'cal-day-selected';\n }\n });\n });\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/show-dates-on-titles/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 13,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 13,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport {\n CalendarEvent,\n CalendarEventTitleFormatter,\n CalendarView,\n} from 'angular-calendar';\nimport { CustomEventTitleFormatter } from './custom-event-title-formatter.provider';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n providers: [\n {\n provide: CalendarEventTitleFormatter,\n useClass: CustomEventTitleFormatter,\n },\n ],\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Month;\n\n viewDate: Date = new Date();\n\n events: CalendarEvent[] = [\n {\n title: 'An event',\n start: new Date(),\n color: colors.red,\n },\n ];\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/show-dates-on-titles/custom-event-title-formatter.provider.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 5,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 5,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        201,
                        201
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        201,
                        201
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        201,
                        201
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { LOCALE_ID, Inject, Injectable } from '@angular/core';\nimport { CalendarEventTitleFormatter, CalendarEvent } from 'angular-calendar';\nimport { formatDate } from '@angular/common';\n\n@Injectable()\nexport class CustomEventTitleFormatter extends CalendarEventTitleFormatter {\n constructor(@Inject(LOCALE_ID) private locale: string) {\n super();\n }\n\n // you can override any of the methods defined in the parent class\n\n month(event: CalendarEvent): string {\n return `<b>${formatDate(event.start, 'h:m a', this.locale)}</b> ${\n event.title\n }`;\n }\n\n week(event: CalendarEvent): string {\n return `<b>${formatDate(event.start, 'h:m a', this.locale)}</b> ${\n event.title\n }`;\n }\n\n day(event: CalendarEvent): string {\n return `<b>${formatDate(event.start, 'h:m a', this.locale)}</b> ${\n event.title\n }`;\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/validate-drag-and-resize/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 26,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 26,
                "endColumn": 31
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`styles` has too many lines (4). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 27,
                "column": 11,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 32,
                "endColumn": 6
              },
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 33,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 33,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        47,
                        691
                      ],
                      "text": ",\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport {\n CalendarEvent,\n CalendarEventTimesChangedEvent,\n CalendarView,\n} from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\nimport {\n addDays,\n addHours,\n isSameDay,\n setDay,\n startOfDay,\n subDays,\n subSeconds,\n} from 'date-fns';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n styles: `\n .invalid-position .cal-event {\n background-color: #ad2121 !important;\n color: #fff;\n }\n `,\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n ViewEncapsulation,\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport {\n CalendarEvent,\n CalendarEventTimesChangedEvent,\n CalendarView,\n} from 'angular-calendar';\nimport { colors } from '../demo-utils/colors';\nimport {\n addDays,\n addHours,\n isSameDay,\n setDay,\n startOfDay,\n subDays,\n subSeconds,\n} from 'date-fns';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n styles: `\n .invalid-position .cal-event {\n background-color: #ad2121 !important;\n color: #fff;\n }\n `,\n encapsulation: ViewEncapsulation.None,\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Week;\n\n viewDate: Date = new Date();\n\n events: CalendarEvent[] = [\n {\n start: subDays(startOfDay(new Date()), 1),\n end: addDays(new Date(), 1),\n title: 'A 3 day event',\n color: colors.blue,\n allDay: true,\n resizable: {\n beforeStart: true,\n afterEnd: true,\n },\n draggable: true,\n },\n {\n start: addHours(startOfDay(setDay(new Date(), 3)), 2),\n end: subSeconds(addHours(startOfDay(setDay(new Date(), 3)), 3), 1),\n title: 'An short event',\n color: colors.yellow,\n resizable: {\n beforeStart: true,\n afterEnd: true,\n },\n draggable: true,\n },\n {\n start: addHours(startOfDay(setDay(new Date(), 3)), 5),\n end: subSeconds(addHours(startOfDay(setDay(new Date(), 3)), 10), 1),\n title: 'A draggable and resizable event',\n color: colors.yellow,\n resizable: {\n beforeStart: true,\n afterEnd: true,\n },\n draggable: true,\n },\n ];\n\n refresh = new Subject<void>();\n\n validateEventTimesChanged = (\n { event, newStart, newEnd, allDay }: CalendarEventTimesChangedEvent,\n addCssClass = true\n ) => {\n if (event.allDay) {\n return true;\n }\n\n delete event.cssClass;\n // don't allow dragging or resizing events to different days\n const sameDay = isSameDay(newStart, newEnd);\n\n if (!sameDay) {\n return false;\n }\n\n // don't allow dragging events to the same times as other events\n const overlappingEvent = this.events.find((otherEvent) => {\n return (\n otherEvent !== event &&\n !otherEvent.allDay &&\n ((otherEvent.start < newStart && newStart < otherEvent.end) ||\n (otherEvent.start < newEnd && newStart < otherEvent.end))\n );\n });\n\n if (overlappingEvent) {\n if (addCssClass) {\n event.cssClass = 'invalid-position';\n } else {\n return false;\n }\n }\n\n return true;\n };\n\n eventTimesChanged(\n eventTimesChangedEvent: CalendarEventTimesChangedEvent\n ): void {\n delete eventTimesChangedEvent.event.cssClass;\n if (this.validateEventTimesChanged(eventTimesChangedEvent, false)) {\n const { event, newStart, newEnd } = eventTimesChangedEvent;\n event.start = newStart;\n event.end = newEnd;\n this.refresh.next();\n }\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/week-view-event-margin/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-view-encapsulation",
                "severity": 2,
                "message": "Using `ViewEncapsulation.None` makes your styles global, which may have an unintended effect",
                "line": 14,
                "column": 36,
                "nodeType": "Identifier",
                "messageId": "useComponentViewEncapsulation",
                "endLine": 14,
                "endColumn": 40,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveViewEncapsulationNone",
                    "fix": {
                      "range": [
                        47,
                        436
                      ],
                      "text": ",\n} from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\nimport { addDays, addHours, startOfDay } from 'date-fns';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './template.html',\n "
                    },
                    "desc": "Remove `ViewEncapsulation.None`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`styles` has too many lines (7). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 15,
                "column": 11,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 23,
                "endColumn": 6
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n ChangeDetectionStrategy,\n Component,\n ViewEncapsulation,\n} from '@angular/core';\nimport { CalendarEvent, CalendarView } from 'angular-calendar';\nimport { addDays, addHours, startOfDay } from 'date-fns';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: './template.html',\n encapsulation: ViewEncapsulation.None,\n styles: `\n .cal-week-view .cal-time-events .cal-day-column {\n margin-right: 10px;\n }\n\n .cal-week-view .cal-hour {\n width: calc(100% + 10px);\n }\n `,\n})\nexport class DemoComponent {\n view: CalendarView = CalendarView.Week;\n\n viewDate: Date = new Date();\n\n events: CalendarEvent[] = [\n {\n start: startOfDay(new Date()),\n title: 'An event',\n color: colors.yellow,\n },\n {\n start: addHours(startOfDay(new Date()), 2),\n end: new Date(),\n title: 'Another event',\n color: colors.blue,\n },\n {\n start: addDays(addHours(startOfDay(new Date()), 2), 2),\n end: addDays(new Date(), 2),\n title: 'And another',\n color: colors.red,\n },\n ];\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/app/demo-modules/week-view-minute-precision/component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/relative-url-prefix",
                "severity": 2,
                "message": "The ./ and ../ prefix is standard syntax for relative URLs. (https://angular.dev/style-guide#style-05-04)",
                "line": 9,
                "column": 16,
                "nodeType": "Literal",
                "messageId": "relativeUrlPrefix",
                "endLine": 9,
                "endColumn": 31
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent } from 'angular-calendar';\nimport { addDays, addHours, startOfDay } from 'date-fns';\nimport { colors } from '../demo-utils/colors';\n\n@Component({\n selector: 'mwl-demo-component',\n changeDetection: ChangeDetectionStrategy.OnPush,\n templateUrl: 'template.html',\n})\nexport class DemoComponent {\n viewDate: Date = new Date();\n\n events: CalendarEvent[] = [\n {\n start: addHours(startOfDay(new Date()), 5),\n end: addHours(startOfDay(new Date()), 17),\n title: 'Event 1',\n color: colors.red,\n allDay: true,\n },\n {\n start: addHours(startOfDay(addDays(new Date(), 1)), 2),\n end: addHours(startOfDay(addDays(new Date(), 1)), 18),\n title: 'Event 2',\n color: colors.blue,\n allDay: true,\n },\n {\n start: addHours(startOfDay(new Date()), 8),\n title: 'Event 3',\n color: colors.blue,\n allDay: true,\n },\n ];\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/demos/environments/environment.prod.ts",
            "messages": [
              {
                "ruleId": null,
                "fatal": true,
                "severity": 2,
                "message": "Parsing error: ESLint was configured to run on `<tsconfigRootDir>/projects/demos/environments/environment.prod.ts` using `parserOptions.project`: <tsconfigRootDir>/projects/demos/tsconfig.app.json\nHowever, that TSConfig does not include this file. Either:\n- Change ESLint's list of included files to not include this file\n- Change that TSConfig to include this file\n- Create a new TSConfig that includes this file and include it in your parserOptions.project\nSee the typescript-eslint docs for more info: https://typescript-eslint.io/linting/troubleshooting#i-get-errors-telling-me-eslint-was-configured-to-run--however-that-tsconfig-does-not--none-of-those-tsconfigs-include-this-file",
                "nodeType": null
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 1,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "export const environment = {\n production: true,\n};\n",
            "usedDeprecatedRules": []
          }
        ]
      },
      "angular-calendar": {
        "recommended": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/schematics/ng-add/version-names.ts",
            "messages": [
              {
                "ruleId": "@typescript-eslint/no-var-requires",
                "message": "Definition for rule '@typescript-eslint/no-var-requires' was not found.",
                "line": 1,
                "column": 48,
                "endLine": 1,
                "endColumn": 106,
                "severity": 2,
                "nodeType": null
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "const packageJson = require('./package.json'); // eslint-disable-line @typescript-eslint/no-var-requires\n\nexport const angularCalendarVersion = `^${packageJson.version}`;\nexport const momentVersion = packageJson.devDependencies.moment;\nexport const dateFnsVersion = packageJson.devDependencies['date-fns'];\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/month/calendar-month-view/calendar-month-cell/calendar-month-cell.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/no-host-metadata-property",
                "message": "Definition for rule '@angular-eslint/no-host-metadata-property' was not found.",
                "line": 92,
                "column": 3,
                "endLine": 92,
                "endColumn": 72,
                "severity": 2,
                "nodeType": null
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n Input,\n Output,\n EventEmitter,\n TemplateRef,\n} from '@angular/core';\nimport { MonthViewDay, CalendarEvent } from 'calendar-utils';\nimport { isWithinThreshold, trackByEventId } from '../../../common/util/util';\nimport { PlacementArray } from 'positioning';\n\n@Component({\n selector: 'mwl-calendar-month-cell',\n template: `\n <ng-template\n #defaultTemplate\n let-day=\"day\"\n let-openDay=\"openDay\"\n let-locale=\"locale\"\n let-tooltipPlacement=\"tooltipPlacement\"\n let-highlightDay=\"highlightDay\"\n let-unhighlightDay=\"unhighlightDay\"\n let-eventClicked=\"eventClicked\"\n let-tooltipTemplate=\"tooltipTemplate\"\n let-tooltipAppendToBody=\"tooltipAppendToBody\"\n let-tooltipDelay=\"tooltipDelay\"\n let-trackByEventId=\"trackByEventId\"\n let-validateDrag=\"validateDrag\"\n >\n <div\n class=\"cal-cell-top\"\n [attr.aria-label]=\"\n { day: day, locale: locale } | calendarA11y : 'monthCell'\n \"\n >\n <span aria-hidden=\"true\">\n <span class=\"cal-day-badge\" *ngIf=\"day.badgeTotal > 0\">{{\n day.badgeTotal\n }}</span>\n <span class=\"cal-day-number\">{{\n day.date | calendarDate : 'monthViewDayNumber' : locale\n }}</span>\n </span>\n </div>\n <div class=\"cal-events\" *ngIf=\"day.events.length > 0\">\n <div\n class=\"cal-event\"\n *ngFor=\"let event of day.events; trackBy: trackByEventId\"\n [ngStyle]=\"{ backgroundColor: event.color?.primary }\"\n [ngClass]=\"event?.cssClass\"\n (mouseenter)=\"highlightDay.emit({ event: event })\"\n (mouseleave)=\"unhighlightDay.emit({ event: event })\"\n [mwlCalendarTooltip]=\"\n event.title | calendarEventTitle : 'monthTooltip' : event\n \"\n [tooltipPlacement]=\"tooltipPlacement\"\n [tooltipEvent]=\"event\"\n [tooltipTemplate]=\"tooltipTemplate\"\n [tooltipAppendToBody]=\"tooltipAppendToBody\"\n [tooltipDelay]=\"tooltipDelay\"\n mwlDraggable\n [class.cal-draggable]=\"event.draggable\"\n dragActiveClass=\"cal-drag-active\"\n [dropData]=\"{ event: event, draggedFrom: day }\"\n [dragAxis]=\"{ x: event.draggable, y: event.draggable }\"\n [validateDrag]=\"validateDrag\"\n [touchStartLongPress]=\"{ delay: 300, delta: 30 }\"\n (mwlClick)=\"eventClicked.emit({ event: event, sourceEvent: $event })\"\n [attr.aria-hidden]=\"{} | calendarA11y : 'hideMonthCellEvents'\"\n ></div>\n </div>\n </ng-template>\n <ng-template\n [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n [ngTemplateOutletContext]=\"{\n day: day,\n openDay: openDay,\n locale: locale,\n tooltipPlacement: tooltipPlacement,\n highlightDay: highlightDay,\n unhighlightDay: unhighlightDay,\n eventClicked: eventClicked,\n tooltipTemplate: tooltipTemplate,\n tooltipAppendToBody: tooltipAppendToBody,\n tooltipDelay: tooltipDelay,\n trackByEventId: trackByEventId,\n validateDrag: validateDrag\n }\"\n >\n </ng-template>\n `,\n // eslint-disable-next-line @angular-eslint/no-host-metadata-property\n host: {\n class: 'cal-cell cal-day-cell',\n '[class.cal-past]': 'day.isPast',\n '[class.cal-today]': 'day.isToday',\n '[class.cal-future]': 'day.isFuture',\n '[class.cal-weekend]': 'day.isWeekend',\n '[class.cal-in-month]': 'day.inMonth',\n '[class.cal-out-month]': '!day.inMonth',\n '[class.cal-has-events]': 'day.events.length > 0',\n '[class.cal-open]': 'day === openDay',\n '[class.cal-event-highlight]': '!!day.backgroundColor',\n },\n})\nexport class CalendarMonthCellComponent {\n @Input() day: MonthViewDay;\n\n @Input() openDay: MonthViewDay;\n\n @Input() locale: string;\n\n @Input() tooltipPlacement: PlacementArray;\n\n @Input() tooltipAppendToBody: boolean;\n\n @Input() customTemplate: TemplateRef<any>;\n\n @Input() tooltipTemplate: TemplateRef<any>;\n\n @Input() tooltipDelay: number | null;\n\n @Output() highlightDay: EventEmitter<any> = new EventEmitter();\n\n @Output() unhighlightDay: EventEmitter<any> = new EventEmitter();\n\n @Output() eventClicked = new EventEmitter<{\n event: CalendarEvent;\n sourceEvent: MouseEvent;\n }>();\n\n trackByEventId = trackByEventId;\n\n validateDrag = isWithinThreshold;\n}\n",
            "usedDeprecatedRules": []
          }
        ],
        "all": [
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/schematics/ng-add/version-names.ts",
            "messages": [
              {
                "ruleId": "@typescript-eslint/no-var-requires",
                "message": "Definition for rule '@typescript-eslint/no-var-requires' was not found.",
                "line": 1,
                "column": 48,
                "endLine": 1,
                "endColumn": 106,
                "severity": 2,
                "nodeType": null
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "const packageJson = require('./package.json'); // eslint-disable-line @typescript-eslint/no-var-requires\n\nexport const angularCalendarVersion = `^${packageJson.version}`;\nexport const momentVersion = packageJson.devDependencies.moment;\nexport const dateFnsVersion = packageJson.devDependencies['date-fns'];\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/common/calendar-a11y/calendar-a11y.pipe.spec.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-selector",
                "severity": 2,
                "message": "The selector of the component is mandatory",
                "line": 7,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useComponentSelector",
                "endLine": 9,
                "endColumn": 3
              },
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 7,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 9,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        307
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { expect } from 'chai';\nimport { A11yParams, CalendarModule, DateAdapter } from 'angular-calendar';\nimport { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { expect } from 'chai';\nimport { A11yParams, CalendarModule, DateAdapter } from 'angular-calendar';\nimport { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\n\n@Component({\n template: '{{ a11yParams | calendarA11y:method }}',\n})\nclass TestComponent {\n a11yParams: A11yParams;\n method: string;\n}\n\ndescribe('calendarA11y pipe', () => {\n beforeEach(() => {\n TestBed.configureTestingModule({\n imports: [\n CalendarModule.forRoot({\n provide: DateAdapter,\n useFactory: adapterFactory,\n }),\n ],\n declarations: [TestComponent],\n });\n });\n\n it('should throw when an invalid method is passed', () => {\n const fixture: ComponentFixture<TestComponent> =\n TestBed.createComponent(TestComponent);\n fixture.componentInstance.a11yParams = {};\n fixture.componentInstance.method = 'invalid';\n expect(() => fixture.detectChanges()).to.throw(\n /^invalid is not a valid a11y method. Can only be one of/\n );\n });\n});\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/common/calendar-a11y/calendar-a11y.provider.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 45,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 45,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        1349,
                        1349
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        1349,
                        1349
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        1349,
                        1349
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Injectable } from '@angular/core';\nimport { formatDate, I18nPluralPipe } from '@angular/common';\nimport { A11yParams } from './calendar-a11y.interface';\n\n/**\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json This class is responsible for adding accessibility to the calendar.\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json You may override any of its methods via angulars DI to suit your requirements.\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json For example:\n angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```typescript\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json import { A11yParams, CalendarA11y } from 'angular-calendar';\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json import { formatDate, I18nPluralPipe } from '@angular/common';\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json import { Injectable } from '@angular/core';\n angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json // adding your own a11y params\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json export interface CustomA11yParams extends A11yParams {\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json isDrSuess?: boolean;\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json }\n angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @Injectable()\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json export class CustomCalendarA11y extends CalendarA11y {\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json constructor(protected i18nPlural: I18nPluralPipe) {\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json super(i18nPlural);\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json }\n angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json // overriding a function\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json public openDayEventsLandmark({ date, locale, isDrSuess }: CustomA11yParams): string {\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json if (isDrSuess) {\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json return `\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ${formatDate(date, 'EEEE MMMM d', locale)}\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Today you are you! That is truer than true! There is no one alive\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json who is you-er than you!\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json `;\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json }\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json }\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json }\n angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json // in your component that uses the calendar\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json providers: [{\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json provide: CalendarA11y,\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json useClass: CustomCalendarA11y\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json }]\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```\n */\n@Injectable()\nexport class CalendarA11y {\n constructor(protected i18nPlural: I18nPluralPipe) {}\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Aria label for the badges/date of a cell\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @example: `Saturday October 19 1 event click to expand`\n */\n public monthCell({ day, locale }: A11yParams): string {\n if (day.badgeTotal > 0) {\n return `\n ${formatDate(day.date, 'EEEE MMMM d', locale)},\n ${this.i18nPlural.transform(day.badgeTotal, {\n '=0': 'No events',\n '=1': 'One event',\n other: '# events',\n })},\n click to expand\n `;\n } else {\n return `${formatDate(day.date, 'EEEE MMMM d', locale)}`;\n }\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Aria label for the open day events start landmark\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @example: `Saturday October 19 expanded view`\n */\n public openDayEventsLandmark({ date, locale }: A11yParams): string {\n return `\n Beginning of expanded view for ${formatDate(date, 'EEEE MMMM dd', locale)}\n `;\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Aria label for alert that a day in the month view was expanded\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @example: `Saturday October 19 expanded`\n */\n public openDayEventsAlert({ date, locale }: A11yParams): string {\n return `${formatDate(date, 'EEEE MMMM dd', locale)} expanded`;\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Descriptive aria label for an event\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @example: `Saturday October 19th, Scott's Pizza Party, from 11:00am to 5:00pm`\n */\n public eventDescription({ event, locale }: A11yParams): string {\n if (event.allDay === true) {\n return this.allDayEventDescription({ event, locale });\n }\n\n const aria = `\n ${formatDate(event.start, 'EEEE MMMM dd', locale)},\n ${event.title}, from ${formatDate(event.start, 'hh:mm a', locale)}\n `;\n if (event.end) {\n return aria + ` to ${formatDate(event.end, 'hh:mm a', locale)}`;\n }\n return aria;\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Descriptive aria label for an all day event\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @example:\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json `Scott's Party, event spans multiple days: start time October 19 5:00pm, no stop time`\n */\n public allDayEventDescription({ event, locale }: A11yParams): string {\n const aria = `\n ${event.title}, event spans multiple days:\n start time ${formatDate(event.start, 'MMMM dd hh:mm a', locale)}\n `;\n if (event.end) {\n return (\n aria + `, stop time ${formatDate(event.end, 'MMMM d hh:mm a', locale)}`\n );\n }\n return aria + `, no stop time`;\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Aria label for the calendar event actions icons\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @returns 'Edit' for fa-pencil icons, and 'Delete' for fa-times icons\n */\n public actionButtonLabel({ action }: A11yParams): string {\n return action.a11yLabel;\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @returns {number} Tab index to be given to month cells\n */\n public monthCellTabIndex(): number {\n return 0;\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @returns true if the events inside the month cell should be aria-hidden\n */\n public hideMonthCellEvents(): boolean {\n return true;\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @returns true if event titles should be aria-hidden (global)\n */\n public hideEventTitle(): boolean {\n return true;\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @returns true if hour segments in the week view should be aria-hidden\n */\n public hideWeekHourSegment(): boolean {\n return true;\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @returns true if hour segments in the day view should be aria-hidden\n */\n public hideDayHourSegment(): boolean {\n return true;\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/common/calendar-angular-date-formatter/calendar-angular-date-formatter.provider.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 13,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 13,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        486,
                        486
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        486,
                        486
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        486,
                        486
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n CalendarDateFormatterInterface,\n DateFormatterParams,\n} from '../calendar-date-formatter/calendar-date-formatter.interface';\nimport { formatDate } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { DateAdapter } from '../../../date-adapters/date-adapter';\nimport { getWeekViewPeriod } from '../util/util';\n\n/**\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json This will use the angular date pipe to do all date formatting. It is the default date formatter used by the calendar.\n */\n@Injectable()\nexport class CalendarAngularDateFormatter\n implements CalendarDateFormatterInterface\n{\n constructor(protected dateAdapter: DateAdapter) {}\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The month view header week day labels\n */\n public monthViewColumnHeader({ date, locale }: DateFormatterParams): string {\n return formatDate(date, 'EEEE', locale);\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The month view cell day number\n */\n public monthViewDayNumber({ date, locale }: DateFormatterParams): string {\n return formatDate(date, 'd', locale);\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The month view title\n */\n public monthViewTitle({ date, locale }: DateFormatterParams): string {\n return formatDate(date, 'LLLL y', locale);\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The week view header week day labels\n */\n public weekViewColumnHeader({ date, locale }: DateFormatterParams): string {\n return formatDate(date, 'EEEE', locale);\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The week view sub header day and month labels\n */\n public weekViewColumnSubHeader({\n date,\n locale,\n }: DateFormatterParams): string {\n return formatDate(date, 'MMM d', locale);\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The week view title\n */\n public weekViewTitle({\n date,\n locale,\n weekStartsOn,\n excludeDays,\n daysInWeek,\n }: DateFormatterParams): string {\n const { viewStart, viewEnd } = getWeekViewPeriod(\n this.dateAdapter,\n date,\n weekStartsOn,\n excludeDays,\n daysInWeek\n );\n const format = (dateToFormat: Date, showYear: boolean) =>\n formatDate(dateToFormat, 'MMM d' + (showYear ? ', yyyy' : ''), locale);\n return `${format(\n viewStart,\n viewStart.getUTCFullYear() !== viewEnd.getUTCFullYear()\n )} - ${format(viewEnd, true)}`;\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The time formatting down the left hand side of the week view\n */\n public weekViewHour({ date, locale }: DateFormatterParams): string {\n return formatDate(date, 'h a', locale);\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The time formatting down the left hand side of the day view\n */\n public dayViewHour({ date, locale }: DateFormatterParams): string {\n return formatDate(date, 'h a', locale);\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The day view title\n */\n public dayViewTitle({ date, locale }: DateFormatterParams): string {\n return formatDate(date, 'EEEE, MMMM d, y', locale);\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/common/calendar-date-formatter/calendar-date-formatter.provider.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 30,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 30,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        1375,
                        1375
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        1375,
                        1375
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        1375,
                        1375
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { CalendarAngularDateFormatter } from '../calendar-angular-date-formatter/calendar-angular-date-formatter.provider';\nimport { Injectable } from '@angular/core';\n\n/**\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json This class is responsible for all formatting of dates. There are 3 implementations available, the `CalendarAngularDateFormatter` (default) which uses the angular date pipe to format dates, the `CalendarNativeDateFormatter` which will use the <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Intl\" target=\"_blank\">Intl</a> API to format dates, or there is the `CalendarMomentDateFormatter` which uses <a href=\"http://momentjs.com/\" target=\"_blank\">moment</a>.\n angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json If you wish, you may override any of the defaults via angulars DI. For example:\n angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```typescript\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json import { CalendarDateFormatter, DateFormatterParams } from 'angular-calendar';\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json import { formatDate } from '@angular/common';\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json import { Injectable } from '@angular/core';\n angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @Injectable()\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json class CustomDateFormatter extends CalendarDateFormatter {\n angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json public monthViewColumnHeader({date, locale}: DateFormatterParams): string {\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json return formatDate(date, 'EEE', locale); // use short week days\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json }\n angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json }\n angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json // in your component that uses the calendar\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json providers: [{\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json provide: CalendarDateFormatter,\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json useClass: CustomDateFormatter\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json }]\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```\n */\n@Injectable()\nexport class CalendarDateFormatter extends CalendarAngularDateFormatter {}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/common/calendar-date/calendar-date.pipe.spec.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-selector",
                "severity": 2,
                "message": "The selector of the component is mandatory",
                "line": 15,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useComponentSelector",
                "endLine": 18,
                "endColumn": 3
              },
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 15,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 18,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        29,
                        476
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { inject, ComponentFixture, TestBed } from '@angular/core/testing';\nimport { expect } from 'chai';\nimport { spy } from 'sinon';\nimport moment from 'moment';\nimport {\n CalendarModule,\n CalendarMomentDateFormatter,\n CalendarDateFormatter,\n MOMENT,\n} from 'angular-calendar';\nimport { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\nimport { DateAdapter } from 'angular-calendar';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, LOCALE_ID } from '@angular/core';\nimport { inject, ComponentFixture, TestBed } from '@angular/core/testing';\nimport { expect } from 'chai';\nimport { spy } from 'sinon';\nimport moment from 'moment';\nimport {\n CalendarModule,\n CalendarMomentDateFormatter,\n CalendarDateFormatter,\n MOMENT,\n} from 'angular-calendar';\nimport { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\nimport { DateAdapter } from 'angular-calendar';\n\n@Component({\n template:\n '{{ date | calendarDate:method:locale:weekStartsOn:excludeDays:daysInWeek }}',\n})\nclass TestComponent {\n date: Date;\n view: string;\n format: string;\n locale: string;\n method: string;\n daysInWeek: number;\n excludeDays: number[];\n weekStartsOn: number;\n}\n\ndescribe('calendarDate pipe', () => {\n beforeEach(() => {\n TestBed.configureTestingModule({\n imports: [\n CalendarModule.forRoot(\n {\n provide: DateAdapter,\n useFactory: adapterFactory,\n },\n {\n dateFormatter: {\n provide: CalendarDateFormatter,\n useClass: CalendarMomentDateFormatter,\n },\n }\n ),\n ],\n declarations: [TestComponent],\n providers: [{ provide: MOMENT, useValue: moment }],\n });\n });\n\n let dateFormatter: CalendarDateFormatter;\n let defaultLocale: string;\n beforeEach(inject(\n [CalendarDateFormatter, LOCALE_ID],\n (_dateFormatter_, locale) => {\n dateFormatter = _dateFormatter_;\n defaultLocale = locale;\n }\n ));\n\n it('should use the date formatter to format the date', () => {\n const fixture: ComponentFixture<TestComponent> =\n TestBed.createComponent(TestComponent);\n spy(dateFormatter, 'monthViewColumnHeader');\n fixture.componentInstance.date = new Date('2016-01-01');\n fixture.componentInstance.method = 'monthViewColumnHeader';\n fixture.detectChanges();\n expect(fixture.nativeElement.innerHTML).to.equal('Friday');\n expect(dateFormatter.monthViewColumnHeader).to.have.been.calledWith({\n date: fixture.componentInstance.date,\n locale: defaultLocale,\n daysInWeek: undefined,\n excludeDays: [],\n weekStartsOn: 0,\n });\n });\n\n it('should allow the locale to be customised', () => {\n const fixture: ComponentFixture<TestComponent> =\n TestBed.createComponent(TestComponent);\n fixture.componentInstance.locale = 'de';\n spy(dateFormatter, 'monthViewColumnHeader');\n fixture.componentInstance.date = new Date('2016-01-01');\n fixture.componentInstance.method = 'monthViewColumnHeader';\n fixture.detectChanges();\n expect(fixture.nativeElement.innerHTML).to.equal('Freitag');\n expect(dateFormatter.monthViewColumnHeader).to.have.been.calledWith({\n date: fixture.componentInstance.date,\n locale: 'de',\n daysInWeek: undefined,\n excludeDays: [],\n weekStartsOn: 0,\n });\n });\n\n it('should throw when an invalid method is passed', () => {\n const fixture: ComponentFixture<TestComponent> =\n TestBed.createComponent(TestComponent);\n fixture.componentInstance.date = new Date('2016-01-01');\n fixture.componentInstance.method = 'invalid';\n expect(() => fixture.detectChanges()).to.throw(\n /^invalid is not a valid date formatter. Can only be one of/\n );\n });\n});\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/common/calendar-event-actions/calendar-event-actions.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 4,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 41,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        38,
                        140
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent, EventAction } from 'calendar-utils';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (33). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 6,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 40,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 43,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 43,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 45,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 45,
                "endColumn": 11
              }
            ],
            "suppressedMessages": [],
            "errorCount": 4,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, Input, TemplateRef } from '@angular/core';\nimport { CalendarEvent, EventAction } from 'calendar-utils';\n\n@Component({\n selector: 'mwl-calendar-event-actions',\n template: `\n <ng-template\n #defaultTemplate\n let-event=\"event\"\n let-trackByActionId=\"trackByActionId\"\n >\n <span *ngIf=\"event.actions\" class=\"cal-event-actions\">\n <a\n class=\"cal-event-action\"\n href=\"javascript:;\"\n *ngFor=\"let action of event.actions; trackBy: trackByActionId\"\n (mwlClick)=\"action.onClick({ event: event, sourceEvent: $event })\"\n (mwlKeydownEnter)=\"\n action.onClick({ event: event, sourceEvent: $event })\n \"\n [ngClass]=\"action.cssClass\"\n [innerHtml]=\"action.label\"\n tabindex=\"0\"\n role=\"button\"\n [attr.aria-label]=\"\n { action: action } | calendarA11y : 'actionButtonLabel'\n \"\n >\n </a>\n </span>\n </ng-template>\n <ng-template\n [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n [ngTemplateOutletContext]=\"{\n event: event,\n trackByActionId: trackByActionId\n }\"\n >\n </ng-template>\n `,\n})\nexport class CalendarEventActionsComponent {\n @Input() event: CalendarEvent;\n\n @Input() customTemplate: TemplateRef<any>;\n\n trackByActionId = (index: number, action: EventAction) =>\n action.id ? action.id : action;\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/common/calendar-event-title/calendar-event-title.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 4,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 24,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        38,
                        127
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent } from 'calendar-utils';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (16). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 6,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 23,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 26,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 26,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 28,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 28,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 30,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 30,
                "endColumn": 11
              }
            ],
            "suppressedMessages": [],
            "errorCount": 5,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, Input, TemplateRef } from '@angular/core';\nimport { CalendarEvent } from 'calendar-utils';\n\n@Component({\n selector: 'mwl-calendar-event-title',\n template: `\n <ng-template #defaultTemplate let-event=\"event\" let-view=\"view\">\n <span\n class=\"cal-event-title\"\n [innerHTML]=\"event.title | calendarEventTitle : view : event\"\n [attr.aria-hidden]=\"{} | calendarA11y : 'hideEventTitle'\"\n >\n </span>\n </ng-template>\n <ng-template\n [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n [ngTemplateOutletContext]=\"{\n event: event,\n view: view\n }\"\n >\n </ng-template>\n `,\n})\nexport class CalendarEventTitleComponent {\n @Input() event: CalendarEvent;\n\n @Input() customTemplate: TemplateRef<any>;\n\n @Input() view: string;\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/common/calendar-moment-date-formatter/calendar-moment-date-formatter.provider.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 27,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 27,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        871,
                        871
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        871,
                        871
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        871,
                        871
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { InjectionToken, Inject, Injectable } from '@angular/core';\nimport {\n CalendarDateFormatterInterface,\n DateFormatterParams,\n} from '../calendar-date-formatter/calendar-date-formatter.interface';\nimport { getWeekViewPeriod } from '../util/util';\nimport { DateAdapter } from '../../../date-adapters/date-adapter';\n\nexport const MOMENT: InjectionToken<string> = new InjectionToken('Moment');\n\n/**\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json This will use <a href=\"http://momentjs.com/\" target=\"_blank\">moment</a> to do all date formatting. To use this class:\n angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```typescript\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json import { CalendarDateFormatter, CalendarMomentDateFormatter, MOMENT } from 'angular-calendar';\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json import moment from 'moment';\n angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json // in your component\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json provide: [{\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json provide: MOMENT, useValue: moment\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json }, {\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json provide: CalendarDateFormatter, useClass: CalendarMomentDateFormatter\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json }]\n angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```\n */\n@Injectable()\nexport class CalendarMomentDateFormatter\n implements CalendarDateFormatterInterface\n{\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n constructor(\n @Inject(MOMENT) protected moment: any,\n protected dateAdapter: DateAdapter\n ) {}\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The month view header week day labels\n */\n public monthViewColumnHeader({ date, locale }: DateFormatterParams): string {\n return this.moment(date).locale(locale).format('dddd');\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The month view cell day number\n */\n public monthViewDayNumber({ date, locale }: DateFormatterParams): string {\n return this.moment(date).locale(locale).format('D');\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The month view title\n */\n public monthViewTitle({ date, locale }: DateFormatterParams): string {\n return this.moment(date).locale(locale).format('MMMM YYYY');\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The week view header week day labels\n */\n public weekViewColumnHeader({ date, locale }: DateFormatterParams): string {\n return this.moment(date).locale(locale).format('dddd');\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The week view sub header day and month labels\n */\n public weekViewColumnSubHeader({\n date,\n locale,\n }: DateFormatterParams): string {\n return this.moment(date).locale(locale).format('MMM D');\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The week view title\n */\n public weekViewTitle({\n date,\n locale,\n weekStartsOn,\n excludeDays,\n daysInWeek,\n }: DateFormatterParams): string {\n const { viewStart, viewEnd } = getWeekViewPeriod(\n this.dateAdapter,\n date,\n weekStartsOn,\n excludeDays,\n daysInWeek\n );\n const format = (dateToFormat: Date, showYear: boolean) =>\n this.moment(dateToFormat)\n .locale(locale)\n .format('MMM D' + (showYear ? ', YYYY' : ''));\n return `${format(\n viewStart,\n viewStart.getUTCFullYear() !== viewEnd.getUTCFullYear()\n )} - ${format(viewEnd, true)}`;\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The time formatting down the left hand side of the week view\n */\n public weekViewHour({ date, locale }: DateFormatterParams): string {\n return this.moment(date).locale(locale).format('ha');\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The time formatting down the left hand side of the day view\n */\n public dayViewHour({ date, locale }: DateFormatterParams): string {\n return this.moment(date).locale(locale).format('ha');\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The day view title\n */\n public dayViewTitle({ date, locale }: DateFormatterParams): string {\n return this.moment(date).locale(locale).format('dddd, LL'); // dddd = Thursday\n } // LL = locale-dependent Month Day, Year\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/common/calendar-native-date-formatter/calendar-native-date-formatter.provider.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 14,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 14,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        602,
                        602
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        602,
                        602
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        602,
                        602
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n CalendarDateFormatterInterface,\n DateFormatterParams,\n} from '../calendar-date-formatter/calendar-date-formatter.interface';\nimport { Injectable } from '@angular/core';\nimport { DateAdapter } from '../../../date-adapters/date-adapter';\nimport { getWeekViewPeriod } from '../util/util';\n\n/**\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json This will use <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Intl\" target=\"_blank\">Intl</a> API to do all date formatting.\n angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json You will need to include a <a href=\"https://github.com/andyearnshaw/Intl.js/\">polyfill</a> for older browsers.\n */\n@Injectable()\nexport class CalendarNativeDateFormatter\n implements CalendarDateFormatterInterface\n{\n constructor(protected dateAdapter: DateAdapter) {}\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The month view header week day labels\n */\n public monthViewColumnHeader({ date, locale }: DateFormatterParams): string {\n return new Intl.DateTimeFormat(locale, { weekday: 'long' }).format(date);\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The month view cell day number\n */\n public monthViewDayNumber({ date, locale }: DateFormatterParams): string {\n return new Intl.DateTimeFormat(locale, { day: 'numeric' }).format(date);\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The month view title\n */\n public monthViewTitle({ date, locale }: DateFormatterParams): string {\n return new Intl.DateTimeFormat(locale, {\n year: 'numeric',\n month: 'long',\n }).format(date);\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The week view header week day labels\n */\n public weekViewColumnHeader({ date, locale }: DateFormatterParams): string {\n return new Intl.DateTimeFormat(locale, { weekday: 'long' }).format(date);\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The week view sub header day and month labels\n */\n public weekViewColumnSubHeader({\n date,\n locale,\n }: DateFormatterParams): string {\n return new Intl.DateTimeFormat(locale, {\n day: 'numeric',\n month: 'short',\n }).format(date);\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The week view title\n */\n public weekViewTitle({\n date,\n locale,\n weekStartsOn,\n excludeDays,\n daysInWeek,\n }: DateFormatterParams): string {\n const { viewStart, viewEnd } = getWeekViewPeriod(\n this.dateAdapter,\n date,\n weekStartsOn,\n excludeDays,\n daysInWeek\n );\n\n const format = (dateToFormat: Date, showYear: boolean) =>\n new Intl.DateTimeFormat(locale, {\n day: 'numeric',\n month: 'short',\n year: showYear ? 'numeric' : undefined,\n }).format(dateToFormat);\n\n return `${format(\n viewStart,\n viewStart.getUTCFullYear() !== viewEnd.getUTCFullYear()\n )} - ${format(viewEnd, true)}`;\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The time formatting down the left hand side of the week view\n */\n public weekViewHour({ date, locale }: DateFormatterParams): string {\n return new Intl.DateTimeFormat(locale, { hour: 'numeric' }).format(date);\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The time formatting down the left hand side of the day view\n */\n public dayViewHour({ date, locale }: DateFormatterParams): string {\n return new Intl.DateTimeFormat(locale, { hour: 'numeric' }).format(date);\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The day view title\n */\n public dayViewTitle({ date, locale }: DateFormatterParams): string {\n return new Intl.DateTimeFormat(locale, {\n day: 'numeric',\n month: 'long',\n year: 'numeric',\n weekday: 'long',\n }).format(date);\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/common/calendar-next-view/calendar-next-view.directive.spec.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-selector",
                "severity": 2,
                "message": "The selector of the component is mandatory",
                "line": 7,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useComponentSelector",
                "endLine": 19,
                "endColumn": 3
              },
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 7,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 19,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        277
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { expect } from 'chai';\nimport { CalendarModule, DateAdapter } from 'angular-calendar';\nimport { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (9). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 8,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 18,
                "endColumn": 4
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { expect } from 'chai';\nimport { CalendarModule, DateAdapter } from 'angular-calendar';\nimport { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\n\n@Component({\n template: `\n <button\n mwlCalendarNextView\n [view]=\"view\"\n [(viewDate)]=\"viewDate\"\n [excludeDays]=\"excludeDays\"\n [daysInWeek]=\"daysInWeek\"\n >\n Next\n </button>\n `,\n})\nclass TestComponent {\n view: string;\n viewDate: Date;\n excludeDays: number[] = [];\n daysInWeek: number;\n}\n\ndescribe('mwlCalendarNextView directive', () => {\n beforeEach(() => {\n TestBed.configureTestingModule({\n imports: [\n CalendarModule.forRoot({\n provide: DateAdapter,\n useFactory: adapterFactory,\n }),\n ],\n declarations: [TestComponent],\n });\n });\n\n it('should increase the view date by 1 month', () => {\n const fixture = TestBed.createComponent<TestComponent>(TestComponent);\n fixture.componentInstance.view = 'month';\n fixture.componentInstance.viewDate = new Date('2017-01-28');\n fixture.detectChanges();\n fixture.nativeElement.querySelector('button').click();\n fixture.detectChanges();\n expect(fixture.componentInstance.viewDate).to.deep.equal(\n new Date('2017-02-28')\n );\n fixture.destroy();\n });\n\n it('should increase the view date by 1 week', () => {\n const fixture = TestBed.createComponent<TestComponent>(TestComponent);\n fixture.componentInstance.view = 'week';\n fixture.componentInstance.viewDate = new Date('2017-01-28');\n fixture.detectChanges();\n fixture.nativeElement.querySelector('button').click();\n fixture.detectChanges();\n expect(fixture.componentInstance.viewDate).to.deep.equal(\n new Date('2017-02-04')\n );\n fixture.destroy();\n });\n\n it('should increase the view date by 1 day', () => {\n const fixture = TestBed.createComponent<TestComponent>(TestComponent);\n fixture.componentInstance.view = 'day';\n fixture.componentInstance.viewDate = new Date('2017-01-28');\n fixture.detectChanges();\n fixture.nativeElement.querySelector('button').click();\n fixture.detectChanges();\n expect(fixture.componentInstance.viewDate).to.deep.equal(\n new Date('2017-01-29')\n );\n fixture.destroy();\n });\n\n it('should increase the view date by 1 day, skipping weekends', () => {\n const fixture = TestBed.createComponent<TestComponent>(TestComponent);\n fixture.componentInstance.view = 'day';\n fixture.componentInstance.viewDate = new Date('2018-06-15');\n fixture.componentInstance.excludeDays = [0, 6];\n fixture.detectChanges();\n fixture.nativeElement.querySelector('button').click();\n fixture.detectChanges();\n expect(fixture.componentInstance.viewDate).to.deep.equal(\n new Date('2018-06-18')\n );\n fixture.destroy();\n });\n\n it('should increase the view date by 4 days, skipping weekends', () => {\n const fixture = TestBed.createComponent<TestComponent>(TestComponent);\n fixture.componentInstance.view = 'week';\n fixture.componentInstance.viewDate = new Date('2018-07-27');\n fixture.componentInstance.excludeDays = [0, 6];\n fixture.componentInstance.daysInWeek = 4;\n fixture.detectChanges();\n fixture.nativeElement.querySelector('button').click();\n fixture.detectChanges();\n expect(fixture.componentInstance.viewDate).to.deep.equal(\n new Date('2018-08-02')\n );\n fixture.destroy();\n });\n});\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/common/calendar-next-view/calendar-next-view.directive.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 31,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 31,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 36,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 36,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 41,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 41,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 46,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 46,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 51,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 51,
                "endColumn": 27,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        1032,
                        1032
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 5,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Directive,\n EventEmitter,\n HostListener,\n Input,\n Output,\n} from '@angular/core';\nimport { DateAdapter } from '../../../date-adapters/date-adapter';\nimport { CalendarView } from '../calendar-view/calendar-view.enum';\nimport { addDaysWithExclusions } from '../util/util';\n\n/**\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Change the view date to the next view. For example:\n angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```typescript\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json <button\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json mwlCalendarNextView\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json [(viewDate)]=\"viewDate\"\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json [view]=\"view\">\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Next\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json </button>\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```\n */\n@Directive({\n selector: '[mwlCalendarNextView]',\n})\nexport class CalendarNextViewDirective {\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The current view\n */\n @Input() view: CalendarView | 'month' | 'week' | 'day';\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The current view date\n */\n @Input() viewDate: Date;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Days to skip when going forward by 1 day\n */\n @Input() excludeDays: number[] = [];\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The number of days in a week. If set will add this amount of days instead of 1 week\n */\n @Input() daysInWeek: number;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Called when the view date is changed\n */\n @Output() viewDateChange: EventEmitter<Date> = new EventEmitter();\n\n constructor(private dateAdapter: DateAdapter) {}\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n @HostListener('click')\n onClick(): void {\n const addFn: any = {\n day: this.dateAdapter.addDays,\n week: this.dateAdapter.addWeeks,\n month: this.dateAdapter.addMonths,\n }[this.view];\n\n if (this.view === CalendarView.Day) {\n this.viewDateChange.emit(\n addDaysWithExclusions(\n this.dateAdapter,\n this.viewDate,\n 1,\n this.excludeDays\n )\n );\n } else if (this.view === CalendarView.Week && this.daysInWeek) {\n this.viewDateChange.emit(\n addDaysWithExclusions(\n this.dateAdapter,\n this.viewDate,\n this.daysInWeek,\n this.excludeDays\n )\n );\n } else {\n this.viewDateChange.emit(addFn(this.viewDate, 1));\n }\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/common/calendar-previous-view/calendar-previous-view.directive.spec.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-selector",
                "severity": 2,
                "message": "The selector of the component is mandatory",
                "line": 7,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useComponentSelector",
                "endLine": 19,
                "endColumn": 3
              },
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 7,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 19,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        277
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { expect } from 'chai';\nimport { CalendarModule, DateAdapter } from 'angular-calendar';\nimport { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (9). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 8,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 18,
                "endColumn": 4
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { expect } from 'chai';\nimport { CalendarModule, DateAdapter } from 'angular-calendar';\nimport { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\n\n@Component({\n template: `\n <button\n mwlCalendarPreviousView\n [view]=\"view\"\n [(viewDate)]=\"viewDate\"\n [excludeDays]=\"excludeDays\"\n [daysInWeek]=\"daysInWeek\"\n >\n Previous\n </button>\n `,\n})\nclass TestComponent {\n public view: string;\n public viewDate: Date;\n excludeDays: number[] = [];\n daysInWeek: number;\n}\n\ndescribe('calendarPreviousView directive', () => {\n beforeEach(() => {\n TestBed.configureTestingModule({\n imports: [\n CalendarModule.forRoot({\n provide: DateAdapter,\n useFactory: adapterFactory,\n }),\n ],\n declarations: [TestComponent],\n });\n });\n\n it('should decrease the view date by 1 month', () => {\n const fixture = TestBed.createComponent<TestComponent>(TestComponent);\n fixture.componentInstance.view = 'month';\n fixture.componentInstance.viewDate = new Date('2017-02-28');\n fixture.detectChanges();\n fixture.nativeElement.querySelector('button').click();\n fixture.detectChanges();\n expect(fixture.componentInstance.viewDate).to.deep.equal(\n new Date('2017-01-28')\n );\n fixture.destroy();\n });\n\n it('should decrease the view date by 1 week', () => {\n const fixture = TestBed.createComponent<TestComponent>(TestComponent);\n fixture.componentInstance.view = 'week';\n fixture.componentInstance.viewDate = new Date('2017-01-28');\n fixture.detectChanges();\n fixture.nativeElement.querySelector('button').click();\n fixture.detectChanges();\n expect(fixture.componentInstance.viewDate).to.deep.equal(\n new Date('2017-01-21')\n );\n fixture.destroy();\n });\n\n it('should decrease the view date by 1 day', () => {\n const fixture = TestBed.createComponent<TestComponent>(TestComponent);\n fixture.componentInstance.view = 'day';\n fixture.componentInstance.viewDate = new Date('2017-01-28');\n fixture.detectChanges();\n fixture.nativeElement.querySelector('button').click();\n fixture.detectChanges();\n expect(fixture.componentInstance.viewDate).to.deep.equal(\n new Date('2017-01-27')\n );\n fixture.destroy();\n });\n\n it('should decrease the view date by 1 day, skipping weekends', () => {\n const fixture = TestBed.createComponent<TestComponent>(TestComponent);\n fixture.componentInstance.view = 'day';\n fixture.componentInstance.viewDate = new Date('2018-06-18');\n fixture.componentInstance.excludeDays = [0, 6];\n fixture.detectChanges();\n fixture.nativeElement.querySelector('button').click();\n fixture.detectChanges();\n expect(fixture.componentInstance.viewDate).to.deep.equal(\n new Date('2018-06-15')\n );\n fixture.destroy();\n });\n\n it('should decrease the view date by 4 days, skipping weekends', () => {\n const fixture = TestBed.createComponent<TestComponent>(TestComponent);\n fixture.componentInstance.view = 'week';\n fixture.componentInstance.viewDate = new Date('2018-08-02');\n fixture.componentInstance.excludeDays = [0, 6];\n fixture.componentInstance.daysInWeek = 4;\n fixture.detectChanges();\n fixture.nativeElement.querySelector('button').click();\n fixture.detectChanges();\n expect(fixture.componentInstance.viewDate).to.deep.equal(\n new Date('2018-07-27')\n );\n fixture.destroy();\n });\n});\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/common/calendar-previous-view/calendar-previous-view.directive.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 31,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 31,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 36,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 36,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 41,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 41,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 46,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 46,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 51,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 51,
                "endColumn": 27,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        1054,
                        1054
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 5,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Directive,\n HostListener,\n Input,\n Output,\n EventEmitter,\n} from '@angular/core';\nimport { DateAdapter } from '../../../date-adapters/date-adapter';\nimport { CalendarView } from '../calendar-view/calendar-view.enum';\nimport { addDaysWithExclusions } from '../util/util';\n\n/**\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Change the view date to the previous view. For example:\n angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```typescript\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json <button\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json mwlCalendarPreviousView\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json [(viewDate)]=\"viewDate\"\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json [view]=\"view\">\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Previous\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json </button>\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```\n */\n@Directive({\n selector: '[mwlCalendarPreviousView]',\n})\nexport class CalendarPreviousViewDirective {\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The current view\n */\n @Input() view: CalendarView | 'month' | 'week' | 'day';\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The current view date\n */\n @Input() viewDate: Date;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Days to skip when going back by 1 day\n */\n @Input() excludeDays: number[] = [];\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The number of days in a week. If set will subtract this amount of days instead of 1 week\n */\n @Input() daysInWeek: number;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Called when the view date is changed\n */\n @Output() viewDateChange: EventEmitter<Date> = new EventEmitter();\n\n constructor(private dateAdapter: DateAdapter) {}\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n @HostListener('click')\n onClick(): void {\n const subFn: any = {\n day: this.dateAdapter.subDays,\n week: this.dateAdapter.subWeeks,\n month: this.dateAdapter.subMonths,\n }[this.view];\n\n if (this.view === CalendarView.Day) {\n this.viewDateChange.emit(\n addDaysWithExclusions(\n this.dateAdapter,\n this.viewDate,\n -1,\n this.excludeDays\n )\n );\n } else if (this.view === CalendarView.Week && this.daysInWeek) {\n this.viewDateChange.emit(\n addDaysWithExclusions(\n this.dateAdapter,\n this.viewDate,\n -this.daysInWeek,\n this.excludeDays\n )\n );\n } else {\n this.viewDateChange.emit(subFn(this.viewDate, 1));\n }\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/common/calendar-today/calendar-today.directive.spec.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-selector",
                "severity": 2,
                "message": "The selector of the component is mandatory",
                "line": 8,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useComponentSelector",
                "endLine": 10,
                "endColumn": 3
              },
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 8,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 10,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        334
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { expect } from 'chai';\nimport { startOfDay } from 'date-fns';\nimport { CalendarModule, DateAdapter } from 'angular-calendar';\nimport { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { expect } from 'chai';\nimport { startOfDay } from 'date-fns';\nimport { CalendarModule, DateAdapter } from 'angular-calendar';\nimport { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\n\n@Component({\n template: '<button mwlCalendarToday [(viewDate)]=\"viewDate\">Next</button>',\n})\nclass TestComponent {\n public viewDate: Date;\n}\n\ndescribe('mwlCalendarNextView directive', () => {\n beforeEach(() => {\n TestBed.configureTestingModule({\n imports: [\n CalendarModule.forRoot({\n provide: DateAdapter,\n useFactory: adapterFactory,\n }),\n ],\n declarations: [TestComponent],\n });\n });\n\n it('should set the view date to the start of today', () => {\n const fixture: ComponentFixture<TestComponent> =\n TestBed.createComponent(TestComponent);\n fixture.componentInstance.viewDate = new Date('2017-01-28');\n fixture.detectChanges();\n fixture.nativeElement.querySelector('button').click();\n fixture.detectChanges();\n expect(fixture.componentInstance.viewDate).to.deep.equal(\n startOfDay(new Date())\n );\n fixture.destroy();\n });\n});\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/common/calendar-today/calendar-today.directive.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 28,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 28,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 33,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 33,
                "endColumn": 27,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        562,
                        562
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Directive,\n HostListener,\n Input,\n Output,\n EventEmitter,\n} from '@angular/core';\nimport { DateAdapter } from '../../../date-adapters/date-adapter';\n\n/**\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Change the view date to the current day. For example:\n angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```typescript\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json <button\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json mwlCalendarToday\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json [(viewDate)]=\"viewDate\">\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Today\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json </button>\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```\n */\n@Directive({\n selector: '[mwlCalendarToday]',\n})\nexport class CalendarTodayDirective {\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The current view date\n */\n @Input() viewDate: Date;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Called when the view date is changed\n */\n @Output() viewDateChange: EventEmitter<Date> = new EventEmitter();\n\n constructor(private dateAdapter: DateAdapter) {}\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n @HostListener('click')\n onClick(): void {\n this.viewDateChange.emit(this.dateAdapter.startOfDay(new Date()));\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/common/calendar-tooltip/calendar-tooltip.directive.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 25,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 49,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        249,
                        546
                      ],
                      "text": ", ChangeDetectionStrategy,\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { PlacementArray, positionElements } from 'positioning';\nimport { CalendarEvent } from 'calendar-utils';\nimport { Observable, of, Subject, timer } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (20). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 27,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 48,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 51,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 51,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 53,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 53,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 55,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 55,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 57,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 57,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 64,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 64,
                "endColumn": 31
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 66,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 66,
                "endColumn": 29
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 68,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 68,
                "endColumn": 28
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 70,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 70,
                "endColumn": 25
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 72,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 72,
                "endColumn": 32
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 74,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 74,
                "endColumn": 25
              }
            ],
            "suppressedMessages": [
              {
                "ruleId": "@angular-eslint/no-input-rename",
                "severity": 2,
                "message": "Input bindings should not be aliased (https://angular.dev/style-guide#style-05-13)",
                "line": 66,
                "column": 10,
                "nodeType": "Literal",
                "messageId": "noInputRename",
                "endLine": 66,
                "endColumn": 28,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveAliasName",
                    "fix": {
                      "range": [
                        1613,
                        1631
                      ],
                      "text": ""
                    },
                    "desc": "Remove alias name"
                  },
                  {
                    "messageId": "suggestReplaceOriginalNameWithAliasName",
                    "fix": {
                      "range": [
                        1613,
                        1642
                      ],
                      "text": ") tooltipPlacement"
                    },
                    "desc": "Remove alias name and use it as the original name"
                  }
                ],
                "suppressions": [
                  {
                    "kind": "directive",
                    "justification": ""
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/no-input-rename",
                "severity": 2,
                "message": "Input bindings should not be aliased (https://angular.dev/style-guide#style-05-13)",
                "line": 68,
                "column": 10,
                "nodeType": "Literal",
                "messageId": "noInputRename",
                "endLine": 68,
                "endColumn": 27,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveAliasName",
                    "fix": {
                      "range": [
                        1735,
                        1752
                      ],
                      "text": ""
                    },
                    "desc": "Remove alias name"
                  },
                  {
                    "messageId": "suggestReplaceOriginalNameWithAliasName",
                    "fix": {
                      "range": [
                        1735,
                        1768
                      ],
                      "text": ") tooltipTemplate"
                    },
                    "desc": "Remove alias name and use it as the original name"
                  }
                ],
                "suppressions": [
                  {
                    "kind": "directive",
                    "justification": ""
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/no-input-rename",
                "severity": 2,
                "message": "Input bindings should not be aliased (https://angular.dev/style-guide#style-05-13)",
                "line": 70,
                "column": 10,
                "nodeType": "Literal",
                "messageId": "noInputRename",
                "endLine": 70,
                "endColumn": 24,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveAliasName",
                    "fix": {
                      "range": [
                        1854,
                        1868
                      ],
                      "text": ""
                    },
                    "desc": "Remove alias name"
                  },
                  {
                    "messageId": "suggestReplaceOriginalNameWithAliasName",
                    "fix": {
                      "range": [
                        1854,
                        1875
                      ],
                      "text": ") tooltipEvent"
                    },
                    "desc": "Remove alias name and use it as the original name"
                  }
                ],
                "suppressions": [
                  {
                    "kind": "directive",
                    "justification": ""
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/no-input-rename",
                "severity": 2,
                "message": "Input bindings should not be aliased (https://angular.dev/style-guide#style-05-13)",
                "line": 72,
                "column": 10,
                "nodeType": "Literal",
                "messageId": "noInputRename",
                "endLine": 72,
                "endColumn": 31,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveAliasName",
                    "fix": {
                      "range": [
                        1958,
                        1979
                      ],
                      "text": ""
                    },
                    "desc": "Remove alias name"
                  },
                  {
                    "messageId": "suggestReplaceOriginalNameWithAliasName",
                    "fix": {
                      "range": [
                        1958,
                        1993
                      ],
                      "text": ") tooltipAppendToBody"
                    },
                    "desc": "Remove alias name and use it as the original name"
                  }
                ],
                "suppressions": [
                  {
                    "kind": "directive",
                    "justification": ""
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/no-input-rename",
                "severity": 2,
                "message": "Input bindings should not be aliased (https://angular.dev/style-guide#style-05-13)",
                "line": 74,
                "column": 10,
                "nodeType": "Literal",
                "messageId": "noInputRename",
                "endLine": 74,
                "endColumn": 24,
                "suggestions": [
                  {
                    "messageId": "suggestRemoveAliasName",
                    "fix": {
                      "range": [
                        2070,
                        2084
                      ],
                      "text": ""
                    },
                    "desc": "Remove alias name"
                  },
                  {
                    "messageId": "suggestReplaceOriginalNameWithAliasName",
                    "fix": {
                      "range": [
                        2070,
                        2091
                      ],
                      "text": ") tooltipDelay"
                    },
                    "desc": "Remove alias name and use it as the original name"
                  }
                ],
                "suppressions": [
                  {
                    "kind": "directive",
                    "justification": ""
                  }
                ]
              }
            ],
            "errorCount": 12,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Directive,\n Component,\n HostListener,\n OnDestroy,\n Input,\n ComponentRef,\n Injector,\n ComponentFactoryResolver,\n ViewContainerRef,\n ElementRef,\n ComponentFactory,\n Inject,\n Renderer2,\n TemplateRef,\n OnChanges,\n SimpleChanges,\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { PlacementArray, positionElements } from 'positioning';\nimport { CalendarEvent } from 'calendar-utils';\nimport { Observable, of, Subject, timer } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n selector: 'mwl-calendar-tooltip-window',\n template: `\n <ng-template\n #defaultTemplate\n let-contents=\"contents\"\n let-placement=\"placement\"\n let-event=\"event\"\n >\n <div class=\"cal-tooltip\" [ngClass]=\"'cal-tooltip-' + placement\">\n <div class=\"cal-tooltip-arrow\"></div>\n <div class=\"cal-tooltip-inner\" [innerHtml]=\"contents\"></div>\n </div>\n </ng-template>\n <ng-template\n [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n [ngTemplateOutletContext]=\"{\n contents: contents,\n placement: placement,\n event: event\n }\"\n >\n </ng-template>\n `,\n})\nexport class CalendarTooltipWindowComponent {\n @Input() contents: string;\n\n @Input() placement: string;\n\n @Input() event: CalendarEvent;\n\n @Input() customTemplate: TemplateRef<any>;\n}\n\n@Directive({\n selector: '[mwlCalendarTooltip]',\n})\nexport class CalendarTooltipDirective implements OnDestroy, OnChanges {\n @Input('mwlCalendarTooltip') contents: string; // eslint-disable-line @angular-eslint/no-input-rename\n\n @Input('tooltipPlacement') placement: PlacementArray = 'auto'; // eslint-disable-line @angular-eslint/no-input-rename\n\n @Input('tooltipTemplate') customTemplate: TemplateRef<any>; // eslint-disable-line @angular-eslint/no-input-rename\n\n @Input('tooltipEvent') event: CalendarEvent; // eslint-disable-line @angular-eslint/no-input-rename\n\n @Input('tooltipAppendToBody') appendToBody: boolean; // eslint-disable-line @angular-eslint/no-input-rename\n\n @Input('tooltipDelay') delay: number | null = null; // eslint-disable-line @angular-eslint/no-input-rename\n\n private tooltipFactory: ComponentFactory<CalendarTooltipWindowComponent>;\n private tooltipRef: ComponentRef<CalendarTooltipWindowComponent>;\n private cancelTooltipDelay$ = new Subject<void>();\n\n constructor(\n private elementRef: ElementRef,\n private injector: Injector,\n private renderer: Renderer2,\n componentFactoryResolver: ComponentFactoryResolver,\n private viewContainerRef: ViewContainerRef,\n @Inject(DOCUMENT) private document // eslint-disable-line\n ) {\n this.tooltipFactory = componentFactoryResolver.resolveComponentFactory(\n CalendarTooltipWindowComponent\n );\n }\n\n ngOnChanges(changes: SimpleChanges): void {\n if (\n this.tooltipRef &&\n (changes.contents || changes.customTemplate || changes.event)\n ) {\n this.tooltipRef.instance.contents = this.contents;\n this.tooltipRef.instance.customTemplate = this.customTemplate;\n this.tooltipRef.instance.event = this.event;\n this.tooltipRef.changeDetectorRef.markForCheck();\n\n if (!this.contents) {\n this.hide();\n }\n }\n }\n\n ngOnDestroy(): void {\n this.hide();\n }\n\n @HostListener('mouseenter')\n onMouseOver(): void {\n const delay$: Observable<any> =\n this.delay === null ? of('now') : timer(this.delay);\n delay$.pipe(takeUntil(this.cancelTooltipDelay$)).subscribe(() => {\n this.show();\n });\n }\n\n @HostListener('mouseleave')\n onMouseOut(): void {\n this.hide();\n }\n\n private show(): void {\n if (!this.tooltipRef && this.contents) {\n this.tooltipRef = this.viewContainerRef.createComponent(\n this.tooltipFactory,\n 0,\n this.injector,\n []\n );\n this.tooltipRef.instance.contents = this.contents;\n this.tooltipRef.instance.customTemplate = this.customTemplate;\n this.tooltipRef.instance.event = this.event;\n if (this.appendToBody) {\n this.document.body.appendChild(this.tooltipRef.location.nativeElement);\n }\n requestAnimationFrame(() => {\n this.positionTooltip();\n });\n }\n }\n\n private hide(): void {\n if (this.tooltipRef) {\n this.viewContainerRef.remove(\n this.viewContainerRef.indexOf(this.tooltipRef.hostView)\n );\n this.tooltipRef = null;\n }\n this.cancelTooltipDelay$.next();\n }\n\n private positionTooltip(previousPositions: string[] = []): void {\n if (this.tooltipRef) {\n this.tooltipRef.changeDetectorRef.detectChanges();\n this.tooltipRef.instance.placement = positionElements(\n this.elementRef.nativeElement,\n this.tooltipRef.location.nativeElement.children[0],\n this.placement,\n this.appendToBody\n );\n // keep re-positioning the tooltip until the arrow position doesn't make a difference\n if (\n previousPositions.indexOf(this.tooltipRef.instance.placement) === -1\n ) {\n this.positionTooltip([\n ...previousPositions,\n this.tooltipRef.instance.placement,\n ]);\n }\n }\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/common/calendar-utils/calendar-utils.provider.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-injectable-provided-in",
                "severity": 2,
                "message": "The `providedIn` property is mandatory for `Injectables`",
                "line": 15,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useInjectableProvidedIn",
                "endLine": 15,
                "endColumn": 14,
                "suggestions": [
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        310,
                        310
                      ],
                      "text": "{providedIn: 'any'}"
                    },
                    "data": {
                      "injector": "any"
                    },
                    "desc": "Use `providedIn: 'any'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        310,
                        310
                      ],
                      "text": "{providedIn: 'platform'}"
                    },
                    "data": {
                      "injector": "platform"
                    },
                    "desc": "Use `providedIn: 'platform'`"
                  },
                  {
                    "messageId": "suggestInjector",
                    "fix": {
                      "range": [
                        310,
                        310
                      ],
                      "text": "{providedIn: 'root'}"
                    },
                    "data": {
                      "injector": "root"
                    },
                    "desc": "Use `providedIn: 'root'`"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Injectable } from '@angular/core';\nimport {\n GetMonthViewArgs,\n MonthView,\n GetWeekViewHeaderArgs,\n WeekDay,\n GetWeekViewArgs,\n WeekView,\n getMonthView,\n getWeekViewHeader,\n getWeekView,\n} from 'calendar-utils';\nimport { DateAdapter } from '../../../date-adapters/date-adapter';\n\n@Injectable()\nexport class CalendarUtils {\n constructor(protected dateAdapter: DateAdapter) {}\n\n getMonthView(args: GetMonthViewArgs): MonthView {\n return getMonthView(this.dateAdapter, args);\n }\n\n getWeekViewHeader(args: GetWeekViewHeaderArgs): WeekDay[] {\n return getWeekViewHeader(this.dateAdapter, args);\n }\n\n getWeekView(args: GetWeekViewArgs): WeekView {\n return getWeekView(this.dateAdapter, args);\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/common/click/click.directive.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 21,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 21,
                "endColumn": 11
              }
            ],
            "suppressedMessages": [
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 23,
                "column": 23,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 23,
                "endColumn": 28,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        450,
                        450
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ],
                "suppressions": [
                  {
                    "kind": "directive",
                    "justification": ""
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/no-output-native",
                "severity": 2,
                "message": "Output bindings, including aliases, should not be named as standard DOM events",
                "line": 23,
                "column": 23,
                "nodeType": "Identifier",
                "messageId": "noOutputNative",
                "endLine": 23,
                "endColumn": 28,
                "suppressions": [
                  {
                    "kind": "directive",
                    "justification": ""
                  }
                ]
              }
            ],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Directive,\n Renderer2,\n ElementRef,\n OnInit,\n OnDestroy,\n Output,\n EventEmitter,\n Inject,\n Input,\n NgZone,\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { Observable, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Directive({\n selector: '[mwlClick]',\n})\nexport class ClickDirective implements OnInit, OnDestroy {\n @Input() clickListenerDisabled = false;\n\n @Output('mwlClick') click = new EventEmitter<MouseEvent>(); // eslint-disable-line\n\n private destroy$ = new Subject<void>();\n\n constructor(\n private renderer: Renderer2,\n private elm: ElementRef<HTMLElement>,\n @Inject(DOCUMENT) private document\n ) {}\n\n ngOnInit(): void {\n if (!this.clickListenerDisabled) {\n this.listen()\n .pipe(takeUntil(this.destroy$))\n .subscribe((event) => {\n event.stopPropagation();\n this.click.emit(event);\n });\n }\n }\n\n ngOnDestroy(): void {\n this.destroy$.next();\n }\n\n private listen() {\n return new Observable<MouseEvent>((observer) => {\n return this.renderer.listen(this.elm.nativeElement, 'click', (event) => {\n observer.next(event);\n });\n });\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/day/calendar-day-view/calendar-day-view.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 28,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 66,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        70,
                        799
                      ],
                      "text": ", ChangeDetectionStrategy,\n} from '@angular/core';\nimport { CalendarEvent } from 'calendar-utils';\nimport { Subject } from 'rxjs';\nimport { CalendarEventTimesChangedEvent } from '../../common/calendar-event-times-changed-event/calendar-event-times-changed-event.interface';\nimport { PlacementArray } from 'positioning';\nimport { CalendarWeekViewBeforeRenderEvent } from '../../week/calendar-week.module';\nimport { ResizeCursors } from 'angular-resizable-element';\n\nexport type CalendarDayViewBeforeRenderEvent =\n CalendarWeekViewBeforeRenderEvent;\n\n/**\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Shows all events on a given day. Example usage:\n angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```typescript\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json <mwl-calendar-day-view\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json [viewDate]=\"viewDate\"\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json [events]=\"events\">\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json </mwl-calendar-day-view>\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```\n */\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (34). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 30,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 65,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 71,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 71,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 77,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 77,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 82,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 82,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 87,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 87,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 92,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 92,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 97,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 97,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 102,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 102,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 107,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 107,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 112,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 112,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 117,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 117,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 122,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 122,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 127,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 127,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 132,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 132,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 137,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 137,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 142,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 142,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 147,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 147,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 153,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 153,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 158,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 158,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 163,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 163,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 168,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 168,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 173,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 173,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 178,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 178,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 183,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 183,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 188,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 188,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 194,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 194,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 201,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 201,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 208,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 208,
                "endColumn": 25,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        5638,
                        5638
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 216,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 216,
                "endColumn": 31,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        5820,
                        5820
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 224,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 224,
                "endColumn": 30,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        5998,
                        5998
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 231,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 231,
                "endColumn": 29,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        6306,
                        6306
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 32,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n Input,\n Output,\n EventEmitter,\n TemplateRef,\n} from '@angular/core';\nimport { CalendarEvent } from 'calendar-utils';\nimport { Subject } from 'rxjs';\nimport { CalendarEventTimesChangedEvent } from '../../common/calendar-event-times-changed-event/calendar-event-times-changed-event.interface';\nimport { PlacementArray } from 'positioning';\nimport { CalendarWeekViewBeforeRenderEvent } from '../../week/calendar-week.module';\nimport { ResizeCursors } from 'angular-resizable-element';\n\nexport type CalendarDayViewBeforeRenderEvent =\n CalendarWeekViewBeforeRenderEvent;\n\n/**\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Shows all events on a given day. Example usage:\n angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```typescript\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json <mwl-calendar-day-view\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json [viewDate]=\"viewDate\"\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json [events]=\"events\">\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json </mwl-calendar-day-view>\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```\n */\n@Component({\n selector: 'mwl-calendar-day-view',\n template: `\n <mwl-calendar-week-view\n class=\"cal-day-view\"\n [daysInWeek]=\"1\"\n [viewDate]=\"viewDate\"\n [events]=\"events\"\n [hourSegments]=\"hourSegments\"\n [hourDuration]=\"hourDuration\"\n [hourSegmentHeight]=\"hourSegmentHeight\"\n [minimumEventHeight]=\"minimumEventHeight\"\n [dayStartHour]=\"dayStartHour\"\n [dayStartMinute]=\"dayStartMinute\"\n [dayEndHour]=\"dayEndHour\"\n [dayEndMinute]=\"dayEndMinute\"\n [refresh]=\"refresh\"\n [locale]=\"locale\"\n [eventSnapSize]=\"eventSnapSize\"\n [tooltipPlacement]=\"tooltipPlacement\"\n [tooltipTemplate]=\"tooltipTemplate\"\n [tooltipAppendToBody]=\"tooltipAppendToBody\"\n [tooltipDelay]=\"tooltipDelay\"\n [resizeCursors]=\"resizeCursors\"\n [hourSegmentTemplate]=\"hourSegmentTemplate\"\n [eventTemplate]=\"eventTemplate\"\n [eventTitleTemplate]=\"eventTitleTemplate\"\n [eventActionsTemplate]=\"eventActionsTemplate\"\n [snapDraggedEvents]=\"snapDraggedEvents\"\n [allDayEventsLabelTemplate]=\"allDayEventsLabelTemplate\"\n [currentTimeMarkerTemplate]=\"currentTimeMarkerTemplate\"\n [validateEventTimesChanged]=\"validateEventTimesChanged\"\n (eventClicked)=\"eventClicked.emit($event)\"\n (hourSegmentClicked)=\"hourSegmentClicked.emit($event)\"\n (eventTimesChanged)=\"eventTimesChanged.emit($event)\"\n (beforeViewRender)=\"beforeViewRender.emit($event)\"\n ></mwl-calendar-week-view>\n `,\n})\nexport class CalendarDayViewComponent {\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The current view date\n */\n @Input() viewDate: Date;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json An array of events to display on view\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The schema is available here: https://github.com/mattlewis92/calendar-utils/blob/c51689985f59a271940e30bc4e2c4e1fee3fcb5c/src/calendarUtils.ts#L49-L63\n */\n @Input() events: CalendarEvent[] = [];\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The number of segments in an hour. Must divide equally into 60.\n */\n @Input() hourSegments: number = 2;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The height in pixels of each hour segment\n */\n @Input() hourSegmentHeight: number = 30;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The duration of each segment group in minutes\n */\n @Input() hourDuration: number;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The minimum height in pixels of each event\n */\n @Input() minimumEventHeight: number = 30;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The day start hours in 24 hour time. Must be 0-23\n */\n @Input() dayStartHour: number = 0;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The day start minutes. Must be 0-59\n */\n @Input() dayStartMinute: number = 0;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The day end hours in 24 hour time. Must be 0-23\n */\n @Input() dayEndHour: number = 23;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The day end minutes. Must be 0-59\n */\n @Input() dayEndMinute: number = 59;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json An observable that when emitted on will re-render the current view\n */\n @Input() refresh: Subject<any>;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The locale used to format dates\n */\n @Input() locale: string;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The grid size to snap resizing and dragging of events to\n */\n @Input() eventSnapSize: number;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The placement of the event tooltip\n */\n @Input() tooltipPlacement: PlacementArray = 'auto';\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json A custom template to use for the event tooltips\n */\n @Input() tooltipTemplate: TemplateRef<any>;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Whether to append tooltips to the body or next to the trigger element\n */\n @Input() tooltipAppendToBody: boolean = true;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The delay in milliseconds before the tooltip should be displayed. If not provided the tooltip\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json will be displayed immediately.\n */\n @Input() tooltipDelay: number | null = null;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json A custom template to use to replace the hour segment\n */\n @Input() hourSegmentTemplate: TemplateRef<any>;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json A custom template to use for day view events\n */\n @Input() eventTemplate: TemplateRef<any>;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json A custom template to use for event titles\n */\n @Input() eventTitleTemplate: TemplateRef<any>;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json A custom template to use for event actions\n */\n @Input() eventActionsTemplate: TemplateRef<any>;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Whether to snap events to a grid when dragging\n */\n @Input() snapDraggedEvents: boolean = true;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json A custom template to use for the all day events label text\n */\n @Input() allDayEventsLabelTemplate: TemplateRef<any>;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json A custom template to use for the current time marker\n */\n @Input() currentTimeMarkerTemplate: TemplateRef<any>;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Allow you to customise where events can be dragged and resized to.\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Return true to allow dragging and resizing to the new location, or false to prevent it\n */\n @Input() validateEventTimesChanged: (\n event: CalendarEventTimesChangedEvent\n ) => boolean;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Customise the document cursor when dragging to resize an event\n */\n @Input() resizeCursors: Partial<\n Pick<ResizeCursors, 'leftOrRight' | 'topOrBottom'>\n >;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Called when an event title is clicked\n */\n @Output() eventClicked = new EventEmitter<{\n event: CalendarEvent;\n sourceEvent: MouseEvent | KeyboardEvent;\n }>();\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Called when an hour segment is clicked\n */\n @Output() hourSegmentClicked = new EventEmitter<{\n date: Date;\n sourceEvent: MouseEvent;\n }>();\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Called when an event is resized or dragged and dropped\n */\n @Output() eventTimesChanged =\n new EventEmitter<CalendarEventTimesChangedEvent>();\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json An output that will be called before the view is rendered for the current day.\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json If you add the `cssClass` property to an hour grid segment it will add that class to the hour segment in the template\n */\n @Output() beforeViewRender =\n new EventEmitter<CalendarDayViewBeforeRenderEvent>();\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/month/calendar-month-view/calendar-month-cell/calendar-month-cell.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 12,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 105,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        70,
                        299
                      ],
                      "text": ", ChangeDetectionStrategy,\n} from '@angular/core';\nimport { MonthViewDay, CalendarEvent } from 'calendar-utils';\nimport { isWithinThreshold, trackByEventId } from '../../../common/util/util';\nimport { PlacementArray } from 'positioning';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (76). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 14,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 91,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/no-host-metadata-property",
                "message": "Definition for rule '@angular-eslint/no-host-metadata-property' was not found.",
                "line": 92,
                "column": 3,
                "endLine": 92,
                "endColumn": 72,
                "severity": 2,
                "nodeType": null
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 107,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 107,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 109,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 109,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 111,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 111,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 113,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 113,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 115,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 115,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 117,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 117,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 119,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 119,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 121,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 121,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 123,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 123,
                "endColumn": 25,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        4069,
                        4069
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 125,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 125,
                "endColumn": 27,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        4136,
                        4136
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 127,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 127,
                "endColumn": 25,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        4205,
                        4205
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 14,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n Input,\n Output,\n EventEmitter,\n TemplateRef,\n} from '@angular/core';\nimport { MonthViewDay, CalendarEvent } from 'calendar-utils';\nimport { isWithinThreshold, trackByEventId } from '../../../common/util/util';\nimport { PlacementArray } from 'positioning';\n\n@Component({\n selector: 'mwl-calendar-month-cell',\n template: `\n <ng-template\n #defaultTemplate\n let-day=\"day\"\n let-openDay=\"openDay\"\n let-locale=\"locale\"\n let-tooltipPlacement=\"tooltipPlacement\"\n let-highlightDay=\"highlightDay\"\n let-unhighlightDay=\"unhighlightDay\"\n let-eventClicked=\"eventClicked\"\n let-tooltipTemplate=\"tooltipTemplate\"\n let-tooltipAppendToBody=\"tooltipAppendToBody\"\n let-tooltipDelay=\"tooltipDelay\"\n let-trackByEventId=\"trackByEventId\"\n let-validateDrag=\"validateDrag\"\n >\n <div\n class=\"cal-cell-top\"\n [attr.aria-label]=\"\n { day: day, locale: locale } | calendarA11y : 'monthCell'\n \"\n >\n <span aria-hidden=\"true\">\n <span class=\"cal-day-badge\" *ngIf=\"day.badgeTotal > 0\">{{\n day.badgeTotal\n }}</span>\n <span class=\"cal-day-number\">{{\n day.date | calendarDate : 'monthViewDayNumber' : locale\n }}</span>\n </span>\n </div>\n <div class=\"cal-events\" *ngIf=\"day.events.length > 0\">\n <div\n class=\"cal-event\"\n *ngFor=\"let event of day.events; trackBy: trackByEventId\"\n [ngStyle]=\"{ backgroundColor: event.color?.primary }\"\n [ngClass]=\"event?.cssClass\"\n (mouseenter)=\"highlightDay.emit({ event: event })\"\n (mouseleave)=\"unhighlightDay.emit({ event: event })\"\n [mwlCalendarTooltip]=\"\n event.title | calendarEventTitle : 'monthTooltip' : event\n \"\n [tooltipPlacement]=\"tooltipPlacement\"\n [tooltipEvent]=\"event\"\n [tooltipTemplate]=\"tooltipTemplate\"\n [tooltipAppendToBody]=\"tooltipAppendToBody\"\n [tooltipDelay]=\"tooltipDelay\"\n mwlDraggable\n [class.cal-draggable]=\"event.draggable\"\n dragActiveClass=\"cal-drag-active\"\n [dropData]=\"{ event: event, draggedFrom: day }\"\n [dragAxis]=\"{ x: event.draggable, y: event.draggable }\"\n [validateDrag]=\"validateDrag\"\n [touchStartLongPress]=\"{ delay: 300, delta: 30 }\"\n (mwlClick)=\"eventClicked.emit({ event: event, sourceEvent: $event })\"\n [attr.aria-hidden]=\"{} | calendarA11y : 'hideMonthCellEvents'\"\n ></div>\n </div>\n </ng-template>\n <ng-template\n [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n [ngTemplateOutletContext]=\"{\n day: day,\n openDay: openDay,\n locale: locale,\n tooltipPlacement: tooltipPlacement,\n highlightDay: highlightDay,\n unhighlightDay: unhighlightDay,\n eventClicked: eventClicked,\n tooltipTemplate: tooltipTemplate,\n tooltipAppendToBody: tooltipAppendToBody,\n tooltipDelay: tooltipDelay,\n trackByEventId: trackByEventId,\n validateDrag: validateDrag\n }\"\n >\n </ng-template>\n `,\n // eslint-disable-next-line @angular-eslint/no-host-metadata-property\n host: {\n class: 'cal-cell cal-day-cell',\n '[class.cal-past]': 'day.isPast',\n '[class.cal-today]': 'day.isToday',\n '[class.cal-future]': 'day.isFuture',\n '[class.cal-weekend]': 'day.isWeekend',\n '[class.cal-in-month]': 'day.inMonth',\n '[class.cal-out-month]': '!day.inMonth',\n '[class.cal-has-events]': 'day.events.length > 0',\n '[class.cal-open]': 'day === openDay',\n '[class.cal-event-highlight]': '!!day.backgroundColor',\n },\n})\nexport class CalendarMonthCellComponent {\n @Input() day: MonthViewDay;\n\n @Input() openDay: MonthViewDay;\n\n @Input() locale: string;\n\n @Input() tooltipPlacement: PlacementArray;\n\n @Input() tooltipAppendToBody: boolean;\n\n @Input() customTemplate: TemplateRef<any>;\n\n @Input() tooltipTemplate: TemplateRef<any>;\n\n @Input() tooltipDelay: number | null;\n\n @Output() highlightDay: EventEmitter<any> = new EventEmitter();\n\n @Output() unhighlightDay: EventEmitter<any> = new EventEmitter();\n\n @Output() eventClicked = new EventEmitter<{\n event: CalendarEvent;\n sourceEvent: MouseEvent;\n }>();\n\n trackByEventId = trackByEventId;\n\n validateDrag = isWithinThreshold;\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/month/calendar-month-view/calendar-month-view-header/calendar-month-view-header.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 11,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 52,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        70,
                        224
                      ],
                      "text": ", ChangeDetectionStrategy,\n} from '@angular/core';\nimport { WeekDay } from 'calendar-utils';\nimport { trackByWeekDayHeaderDate } from '../../../common/util/util';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (37). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 13,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 51,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 54,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 54,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 56,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 56,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 58,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 58,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 60,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 60,
                "endColumn": 32,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        1573,
                        1573
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 6,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n Input,\n TemplateRef,\n EventEmitter,\n Output,\n} from '@angular/core';\nimport { WeekDay } from 'calendar-utils';\nimport { trackByWeekDayHeaderDate } from '../../../common/util/util';\n\n@Component({\n selector: 'mwl-calendar-month-view-header',\n template: `\n <ng-template\n #defaultTemplate\n let-days=\"days\"\n let-locale=\"locale\"\n let-trackByWeekDayHeaderDate=\"trackByWeekDayHeaderDate\"\n >\n <div class=\"cal-cell-row cal-header\" role=\"row\">\n <div\n class=\"cal-cell\"\n *ngFor=\"let day of days; trackBy: trackByWeekDayHeaderDate\"\n [class.cal-past]=\"day.isPast\"\n [class.cal-today]=\"day.isToday\"\n [class.cal-future]=\"day.isFuture\"\n [class.cal-weekend]=\"day.isWeekend\"\n (click)=\"\n columnHeaderClicked.emit({\n isoDayNumber: day.day,\n sourceEvent: $event\n })\n \"\n [ngClass]=\"day.cssClass\"\n tabindex=\"0\"\n role=\"columnheader\"\n >\n {{ day.date | calendarDate : 'monthViewColumnHeader' : locale }}\n </div>\n </div>\n </ng-template>\n <ng-template\n [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n [ngTemplateOutletContext]=\"{\n days: days,\n locale: locale,\n trackByWeekDayHeaderDate: trackByWeekDayHeaderDate\n }\"\n >\n </ng-template>\n `,\n})\nexport class CalendarMonthViewHeaderComponent {\n @Input() days: WeekDay[];\n\n @Input() locale: string;\n\n @Input() customTemplate: TemplateRef<any>;\n\n @Output() columnHeaderClicked = new EventEmitter<{\n isoDayNumber: number;\n sourceEvent: MouseEvent;\n }>();\n\n trackByWeekDayHeaderDate = trackByWeekDayHeaderDate;\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/month/calendar-month-view/calendar-month-view.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 54,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 142,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        150,
                        1297
                      ],
                      "text": ", ChangeDetectionStrategy,\n} from '@angular/core';\nimport {\n CalendarEvent,\n WeekDay,\n MonthView,\n MonthViewDay,\n ViewPeriod,\n} from 'calendar-utils';\nimport { Subject, Subscription } from 'rxjs';\nimport {\n CalendarEventTimesChangedEvent,\n CalendarEventTimesChangedEventType,\n} from '../../common/calendar-event-times-changed-event/calendar-event-times-changed-event.interface';\nimport { CalendarUtils } from '../../common/calendar-utils/calendar-utils.provider';\nimport { validateEvents } from '../../common/util/util';\nimport { DateAdapter } from '../../../date-adapters/date-adapter';\nimport { PlacementArray } from 'positioning';\n\nexport interface CalendarMonthViewBeforeRenderEvent {\n header: WeekDay[];\n body: MonthViewDay[];\n period: ViewPeriod;\n}\n\nexport interface CalendarMonthViewEventTimesChangedEvent<\n EventMetaType = any,\n DayMetaType = any\n> extends CalendarEventTimesChangedEvent<EventMetaType> {\n day: MonthViewDay<DayMetaType>;\n}\n\n/**\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Shows all events on a given month. Example usage:\n angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```typescript\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json <mwl-calendar-month-view\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json [viewDate]=\"viewDate\"\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json [events]=\"events\">\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json </mwl-calendar-month-view>\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```\n */\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (84). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 56,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 141,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 149,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 149,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 155,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 155,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 160,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 160,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 165,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 165,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 170,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 170,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 175,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 175,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 180,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 180,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 185,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 185,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 190,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 190,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 195,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 195,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 201,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 201,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 215,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 215,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 220,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 220,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 225,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 225,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 230,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 230,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 235,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 235,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 240,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 240,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 245,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 245,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 251,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 251,
                "endColumn": 29,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        7324,
                        7324
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 257,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 257,
                "endColumn": 23,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        7469,
                        7469
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 265,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 265,
                "endColumn": 25,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        7646,
                        7646
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 273,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 273,
                "endColumn": 32,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        7855,
                        7855
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 282,
                "column": 3,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 282,
                "endColumn": 20,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        8051,
                        8051
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/sort-lifecycle-methods",
                "severity": 2,
                "message": "Lifecycle Methods are not declared in order of execution",
                "line": 351,
                "column": 3,
                "nodeType": "Identifier",
                "messageId": "lifecycleMethodsNotSorted",
                "endLine": 351,
                "endColumn": 14
              }
            ],
            "suppressedMessages": [],
            "errorCount": 26,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n OnChanges,\n Input,\n Output,\n EventEmitter,\n ChangeDetectorRef,\n OnInit,\n OnDestroy,\n LOCALE_ID,\n Inject,\n TemplateRef,\n} from '@angular/core';\nimport {\n CalendarEvent,\n WeekDay,\n MonthView,\n MonthViewDay,\n ViewPeriod,\n} from 'calendar-utils';\nimport { Subject, Subscription } from 'rxjs';\nimport {\n CalendarEventTimesChangedEvent,\n CalendarEventTimesChangedEventType,\n} from '../../common/calendar-event-times-changed-event/calendar-event-times-changed-event.interface';\nimport { CalendarUtils } from '../../common/calendar-utils/calendar-utils.provider';\nimport { validateEvents } from '../../common/util/util';\nimport { DateAdapter } from '../../../date-adapters/date-adapter';\nimport { PlacementArray } from 'positioning';\n\nexport interface CalendarMonthViewBeforeRenderEvent {\n header: WeekDay[];\n body: MonthViewDay[];\n period: ViewPeriod;\n}\n\nexport interface CalendarMonthViewEventTimesChangedEvent<\n EventMetaType = any,\n DayMetaType = any\n> extends CalendarEventTimesChangedEvent<EventMetaType> {\n day: MonthViewDay<DayMetaType>;\n}\n\n/**\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Shows all events on a given month. Example usage:\n angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```typescript\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json <mwl-calendar-month-view\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json [viewDate]=\"viewDate\"\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json [events]=\"events\">\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json </mwl-calendar-month-view>\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```\n */\n@Component({\n selector: 'mwl-calendar-month-view',\n template: `\n <div class=\"cal-month-view\" role=\"grid\">\n <mwl-calendar-month-view-header\n [days]=\"columnHeaders\"\n [locale]=\"locale\"\n (columnHeaderClicked)=\"columnHeaderClicked.emit($event)\"\n [customTemplate]=\"headerTemplate\"\n >\n </mwl-calendar-month-view-header>\n <div class=\"cal-days\">\n <div\n *ngFor=\"let rowIndex of view.rowOffsets; trackBy: trackByRowOffset\"\n >\n <div role=\"row\" class=\"cal-cell-row\">\n <mwl-calendar-month-cell\n role=\"gridcell\"\n *ngFor=\"\n let day of view.days\n | slice : rowIndex : rowIndex + view.totalDaysVisibleInWeek;\n trackBy: trackByDate\n \"\n [ngClass]=\"day?.cssClass\"\n [day]=\"day\"\n [openDay]=\"openDay\"\n [locale]=\"locale\"\n [tooltipPlacement]=\"tooltipPlacement\"\n [tooltipAppendToBody]=\"tooltipAppendToBody\"\n [tooltipTemplate]=\"tooltipTemplate\"\n [tooltipDelay]=\"tooltipDelay\"\n [customTemplate]=\"cellTemplate\"\n [ngStyle]=\"{ backgroundColor: day.backgroundColor }\"\n (mwlClick)=\"dayClicked.emit({ day: day, sourceEvent: $event })\"\n [clickListenerDisabled]=\"dayClicked.observers.length === 0\"\n (mwlKeydownEnter)=\"\n dayClicked.emit({ day: day, sourceEvent: $event })\n \"\n (highlightDay)=\"toggleDayHighlight($event.event, true)\"\n (unhighlightDay)=\"toggleDayHighlight($event.event, false)\"\n mwlDroppable\n dragOverClass=\"cal-drag-over\"\n (drop)=\"\n eventDropped(\n day,\n $event.dropData.event,\n $event.dropData.draggedFrom\n )\n \"\n (eventClicked)=\"\n eventClicked.emit({\n event: $event.event,\n sourceEvent: $event.sourceEvent\n })\n \"\n [attr.tabindex]=\"{} | calendarA11y : 'monthCellTabIndex'\"\n >\n </mwl-calendar-month-cell>\n </div>\n <mwl-calendar-open-day-events\n [locale]=\"locale\"\n [isOpen]=\"openRowIndex === rowIndex\"\n [events]=\"openDay?.events\"\n [date]=\"openDay?.date\"\n [customTemplate]=\"openDayEventsTemplate\"\n [eventTitleTemplate]=\"eventTitleTemplate\"\n [eventActionsTemplate]=\"eventActionsTemplate\"\n (eventClicked)=\"\n eventClicked.emit({\n event: $event.event,\n sourceEvent: $event.sourceEvent\n })\n \"\n mwlDroppable\n dragOverClass=\"cal-drag-over\"\n (drop)=\"\n eventDropped(\n openDay,\n $event.dropData.event,\n $event.dropData.draggedFrom\n )\n \"\n >\n </mwl-calendar-open-day-events>\n </div>\n </div>\n </div>\n `,\n})\nexport class CalendarMonthViewComponent\n implements OnChanges, OnInit, OnDestroy\n{\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The current view date\n */\n @Input() viewDate: Date;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json An array of events to display on view.\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The schema is available here: https://github.com/mattlewis92/calendar-utils/blob/c51689985f59a271940e30bc4e2c4e1fee3fcb5c/src/calendarUtils.ts#L49-L63\n */\n @Input() events: CalendarEvent[] = [];\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json An array of day indexes (0 = sunday, 1 = monday etc) that will be hidden on the view\n */\n @Input() excludeDays: number[] = [];\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Whether the events list for the day of the `viewDate` option is visible or not\n */\n @Input() activeDayIsOpen: boolean = false;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json If set will be used to determine the day that should be open. If not set, the `viewDate` is used\n */\n @Input() activeDay: Date;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json An observable that when emitted on will re-render the current view\n */\n @Input() refresh: Subject<any>;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The locale used to format dates\n */\n @Input() locale: string;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The placement of the event tooltip\n */\n @Input() tooltipPlacement: PlacementArray = 'auto';\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json A custom template to use for the event tooltips\n */\n @Input() tooltipTemplate: TemplateRef<any>;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Whether to append tooltips to the body or next to the trigger element\n */\n @Input() tooltipAppendToBody: boolean = true;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The delay in milliseconds before the tooltip should be displayed. If not provided the tooltip\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json will be displayed immediately.\n */\n @Input() tooltipDelay: number | null = null;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The start number of the week.\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json If using the moment date adapter this option won't do anything and you'll need to set it globally like so:\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json moment.updateLocale('en', {\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json week: {\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json dow: 1, // set start of week to monday instead\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json doy: 0,\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json },\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json });\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```\n */\n @Input() weekStartsOn: number;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json A custom template to use to replace the header\n */\n @Input() headerTemplate: TemplateRef<any>;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json A custom template to use to replace the day cell\n */\n @Input() cellTemplate: TemplateRef<any>;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json A custom template to use for the slide down box of events for the active day\n */\n @Input() openDayEventsTemplate: TemplateRef<any>;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json A custom template to use for event titles\n */\n @Input() eventTitleTemplate: TemplateRef<any>;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json A custom template to use for event actions\n */\n @Input() eventActionsTemplate: TemplateRef<any>;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json An array of day indexes (0 = sunday, 1 = monday etc) that indicate which days are weekends\n */\n @Input() weekendDays: number[];\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json An output that will be called before the view is rendered for the current month.\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json If you add the `cssClass` property to a day in the body it will add that class to the cell element in the template\n */\n @Output() beforeViewRender =\n new EventEmitter<CalendarMonthViewBeforeRenderEvent>();\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Called when the day cell is clicked\n */\n @Output() dayClicked = new EventEmitter<{\n day: MonthViewDay;\n sourceEvent: MouseEvent | KeyboardEvent;\n }>();\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Called when the event title is clicked\n */\n @Output() eventClicked = new EventEmitter<{\n event: CalendarEvent;\n sourceEvent: MouseEvent | KeyboardEvent;\n }>();\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Called when a header week day is clicked. Returns ISO day number.\n */\n @Output() columnHeaderClicked = new EventEmitter<{\n isoDayNumber: number;\n sourceEvent: MouseEvent | KeyboardEvent;\n }>();\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Called when an event is dragged and dropped\n */\n @Output()\n eventTimesChanged =\n new EventEmitter<CalendarMonthViewEventTimesChangedEvent>();\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n columnHeaders: WeekDay[];\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n view: MonthView;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n openRowIndex: number;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n openDay: MonthViewDay;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n refreshSubscription: Subscription;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n constructor(\n protected cdr: ChangeDetectorRef,\n protected utils: CalendarUtils,\n @Inject(LOCALE_ID) locale: string,\n protected dateAdapter: DateAdapter\n ) {\n this.locale = locale;\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n trackByRowOffset = (index: number, offset: number) =>\n this.view.days\n .slice(offset, this.view.totalDaysVisibleInWeek)\n .map((day) => day.date.toISOString())\n .join('-');\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n trackByDate = (index: number, day: MonthViewDay) => day.date.toISOString();\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n ngOnInit(): void {\n if (this.refresh) {\n this.refreshSubscription = this.refresh.subscribe(() => {\n this.refreshAll();\n this.cdr.markForCheck();\n });\n }\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n ngOnChanges(changes: any): void {\n const refreshHeader =\n changes.viewDate || changes.excludeDays || changes.weekendDays;\n const refreshBody =\n changes.viewDate ||\n changes.events ||\n changes.excludeDays ||\n changes.weekendDays;\n\n if (refreshHeader) {\n this.refreshHeader();\n }\n\n if (changes.events) {\n validateEvents(this.events);\n }\n\n if (refreshBody) {\n this.refreshBody();\n }\n\n if (refreshHeader || refreshBody) {\n this.emitBeforeViewRender();\n }\n\n if (\n changes.activeDayIsOpen ||\n changes.viewDate ||\n changes.events ||\n changes.excludeDays ||\n changes.activeDay\n ) {\n this.checkActiveDayIsOpen();\n }\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n ngOnDestroy(): void {\n if (this.refreshSubscription) {\n this.refreshSubscription.unsubscribe();\n }\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n toggleDayHighlight(event: CalendarEvent, isHighlighted: boolean): void {\n this.view.days.forEach((day) => {\n if (isHighlighted && day.events.indexOf(event) > -1) {\n day.backgroundColor =\n (event.color && event.color.secondary) || '#D1E8FF';\n } else {\n delete day.backgroundColor;\n }\n });\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n eventDropped(\n droppedOn: MonthViewDay,\n event: CalendarEvent,\n draggedFrom?: MonthViewDay\n ): void {\n if (droppedOn !== draggedFrom) {\n const year: number = this.dateAdapter.getYear(droppedOn.date);\n const month: number = this.dateAdapter.getMonth(droppedOn.date);\n const date: number = this.dateAdapter.getDate(droppedOn.date);\n const newStart: Date = this.dateAdapter.setDate(\n this.dateAdapter.setMonth(\n this.dateAdapter.setYear(event.start, year),\n month\n ),\n date\n );\n let newEnd: Date;\n if (event.end) {\n const secondsDiff: number = this.dateAdapter.differenceInSeconds(\n newStart,\n event.start\n );\n newEnd = this.dateAdapter.addSeconds(event.end, secondsDiff);\n }\n this.eventTimesChanged.emit({\n event,\n newStart,\n newEnd,\n day: droppedOn,\n type: CalendarEventTimesChangedEventType.Drop,\n });\n }\n }\n\n protected refreshHeader(): void {\n this.columnHeaders = this.utils.getWeekViewHeader({\n viewDate: this.viewDate,\n weekStartsOn: this.weekStartsOn,\n excluded: this.excludeDays,\n weekendDays: this.weekendDays,\n });\n }\n\n protected refreshBody(): void {\n this.view = this.utils.getMonthView({\n events: this.events,\n viewDate: this.viewDate,\n weekStartsOn: this.weekStartsOn,\n excluded: this.excludeDays,\n weekendDays: this.weekendDays,\n });\n }\n\n protected checkActiveDayIsOpen(): void {\n if (this.activeDayIsOpen === true) {\n const activeDay = this.activeDay || this.viewDate;\n this.openDay = this.view.days.find((day) =>\n this.dateAdapter.isSameDay(day.date, activeDay)\n );\n const index: number = this.view.days.indexOf(this.openDay);\n this.openRowIndex =\n Math.floor(index / this.view.totalDaysVisibleInWeek) angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json this.view.totalDaysVisibleInWeek;\n } else {\n this.openRowIndex = null;\n this.openDay = null;\n }\n }\n\n protected refreshAll(): void {\n this.refreshHeader();\n this.refreshBody();\n this.emitBeforeViewRender();\n this.checkActiveDayIsOpen();\n }\n\n protected emitBeforeViewRender(): void {\n if (this.columnHeaders && this.view) {\n this.beforeViewRender.emit({\n header: this.columnHeaders,\n body: this.view.days,\n period: this.view.period,\n });\n }\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/month/calendar-month-view/calendar-open-day-events/calendar-open-day-events.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 42,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 130,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        70,
                        834
                      ],
                      "text": ", ChangeDetectionStrategy,\n} from '@angular/core';\nimport {\n trigger,\n style,\n state,\n transition,\n animate,\n AnimationTriggerMetadata,\n} from '@angular/animations';\nimport { CalendarEvent } from 'calendar-utils';\nimport { isWithinThreshold, trackByEventId } from '../../../common/util/util';\n\nexport const collapseAnimation: AnimationTriggerMetadata = trigger('collapse', [\n state(\n 'void',\n style({\n height: 0,\n overflow: 'hidden',\n 'padding-top': 0,\n 'padding-bottom': 0,\n })\n ),\n state(\n '*',\n style({\n height: '*',\n overflow: 'hidden',\n 'padding-top': '*',\n 'padding-bottom': '*',\n })\n ),\n transition('* => void', animate('150ms ease-out')),\n transition('void => *', animate('150ms ease-in')),\n]);\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (83). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 44,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 128,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 132,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 132,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 134,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 134,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 136,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 136,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 138,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 138,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 140,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 140,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 142,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 142,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 144,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 144,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 146,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 146,
                "endColumn": 25,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        3760,
                        3760
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 10,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n Input,\n Output,\n EventEmitter,\n TemplateRef,\n} from '@angular/core';\nimport {\n trigger,\n style,\n state,\n transition,\n animate,\n AnimationTriggerMetadata,\n} from '@angular/animations';\nimport { CalendarEvent } from 'calendar-utils';\nimport { isWithinThreshold, trackByEventId } from '../../../common/util/util';\n\nexport const collapseAnimation: AnimationTriggerMetadata = trigger('collapse', [\n state(\n 'void',\n style({\n height: 0,\n overflow: 'hidden',\n 'padding-top': 0,\n 'padding-bottom': 0,\n })\n ),\n state(\n '*',\n style({\n height: '*',\n overflow: 'hidden',\n 'padding-top': '*',\n 'padding-bottom': '*',\n })\n ),\n transition('* => void', animate('150ms ease-out')),\n transition('void => *', animate('150ms ease-in')),\n]);\n\n@Component({\n selector: 'mwl-calendar-open-day-events',\n template: `\n <ng-template\n #defaultTemplate\n let-events=\"events\"\n let-eventClicked=\"eventClicked\"\n let-isOpen=\"isOpen\"\n let-trackByEventId=\"trackByEventId\"\n let-validateDrag=\"validateDrag\"\n >\n <div\n class=\"cal-open-day-events\"\n [@collapse]\n *ngIf=\"isOpen\"\n role=\"application\"\n >\n <span\n tabindex=\"-1\"\n role=\"alert\"\n [attr.aria-label]=\"\n { date: date, locale: locale } | calendarA11y : 'openDayEventsAlert'\n \"\n ></span>\n <span\n tabindex=\"0\"\n role=\"landmark\"\n [attr.aria-label]=\"\n { date: date, locale: locale }\n | calendarA11y : 'openDayEventsLandmark'\n \"\n ></span>\n <div\n *ngFor=\"let event of events; trackBy: trackByEventId\"\n [ngClass]=\"event?.cssClass\"\n mwlDraggable\n [class.cal-draggable]=\"event.draggable\"\n dragActiveClass=\"cal-drag-active\"\n [dropData]=\"{ event: event }\"\n [dragAxis]=\"{ x: event.draggable, y: event.draggable }\"\n [validateDrag]=\"validateDrag\"\n [touchStartLongPress]=\"{ delay: 300, delta: 30 }\"\n >\n <span\n class=\"cal-event\"\n [ngStyle]=\"{ backgroundColor: event.color?.primary }\"\n >\n </span>\n &ngsp;\n <mwl-calendar-event-title\n [event]=\"event\"\n [customTemplate]=\"eventTitleTemplate\"\n view=\"month\"\n (mwlClick)=\"\n eventClicked.emit({ event: event, sourceEvent: $event })\n \"\n (mwlKeydownEnter)=\"\n eventClicked.emit({ event: event, sourceEvent: $event })\n \"\n tabindex=\"0\"\n [attr.aria-label]=\"\n { event: event, locale: locale }\n | calendarA11y : 'eventDescription'\n \"\n >\n </mwl-calendar-event-title>\n &ngsp;\n <mwl-calendar-event-actions\n [event]=\"event\"\n [customTemplate]=\"eventActionsTemplate\"\n >\n </mwl-calendar-event-actions>\n </div>\n </div>\n </ng-template>\n <ng-template\n [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n [ngTemplateOutletContext]=\"{\n events: events,\n eventClicked: eventClicked,\n isOpen: isOpen,\n trackByEventId: trackByEventId,\n validateDrag: validateDrag\n }\"\n >\n </ng-template>\n `,\n animations: [collapseAnimation],\n})\nexport class CalendarOpenDayEventsComponent {\n @Input() locale: string;\n\n @Input() isOpen: boolean = false;\n\n @Input() events: CalendarEvent[];\n\n @Input() customTemplate: TemplateRef<any>;\n\n @Input() eventTitleTemplate: TemplateRef<any>;\n\n @Input() eventActionsTemplate: TemplateRef<any>;\n\n @Input() date: Date;\n\n @Output() eventClicked = new EventEmitter<{\n event: CalendarEvent;\n sourceEvent: MouseEvent | KeyboardEvent;\n }>();\n\n trackByEventId = trackByEventId;\n\n validateDrag = isWithinThreshold;\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/week/calendar-week-view/calendar-week-view-current-time-marker/calendar-week-view-current-time-marker.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 13,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 46,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        84,
                        331
                      ],
                      "text": ", ChangeDetectionStrategy,\n} from '@angular/core';\nimport { BehaviorSubject, interval, Observable } from 'rxjs';\nimport { switchMapTo, startWith, map, switchMap } from 'rxjs/operators';\nimport { DateAdapter } from '../../../../date-adapters/date-adapter';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (29). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 15,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 45,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 48,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 48,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 50,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 50,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 52,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 52,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 54,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 54,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 56,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 56,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 58,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 58,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 60,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 60,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 62,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 62,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 64,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 64,
                "endColumn": 11
              }
            ],
            "suppressedMessages": [],
            "errorCount": 11,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n Input,\n NgZone,\n OnChanges,\n SimpleChanges,\n TemplateRef,\n} from '@angular/core';\nimport { BehaviorSubject, interval, Observable } from 'rxjs';\nimport { switchMapTo, startWith, map, switchMap } from 'rxjs/operators';\nimport { DateAdapter } from '../../../../date-adapters/date-adapter';\n\n@Component({\n selector: 'mwl-calendar-week-view-current-time-marker',\n template: `\n <ng-template\n #defaultTemplate\n let-columnDate=\"columnDate\"\n let-dayStartHour=\"dayStartHour\"\n let-dayStartMinute=\"dayStartMinute\"\n let-dayEndHour=\"dayEndHour\"\n let-dayEndMinute=\"dayEndMinute\"\n let-isVisible=\"isVisible\"\n let-topPx=\"topPx\"\n >\n <div\n class=\"cal-current-time-marker\"\n *ngIf=\"isVisible\"\n [style.top.px]=\"topPx\"\n ></div>\n </ng-template>\n <ng-template\n [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n [ngTemplateOutletContext]=\"{\n columnDate: columnDate,\n dayStartHour: dayStartHour,\n dayStartMinute: dayStartMinute,\n dayEndHour: dayEndHour,\n dayEndMinute: dayEndMinute,\n isVisible: (marker$ | async)?.isVisible,\n topPx: (marker$ | async)?.top\n }\"\n >\n </ng-template>\n `,\n})\nexport class CalendarWeekViewCurrentTimeMarkerComponent implements OnChanges {\n @Input() columnDate: Date;\n\n @Input() dayStartHour: number;\n\n @Input() dayStartMinute: number;\n\n @Input() dayEndHour: number;\n\n @Input() dayEndMinute: number;\n\n @Input() hourSegments: number;\n\n @Input() hourDuration: number;\n\n @Input() hourSegmentHeight: number;\n\n @Input() customTemplate: TemplateRef<any>;\n\n columnDate$ = new BehaviorSubject<Date>(undefined);\n\n marker$: Observable<{\n isVisible: boolean;\n top: number;\n }> = this.zone.onStable.pipe(\n switchMap(() => interval(60 angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json 1000)),\n startWith(0),\n switchMapTo(this.columnDate$),\n map((columnDate) => {\n const startOfDay = this.dateAdapter.setMinutes(\n this.dateAdapter.setHours(columnDate, this.dayStartHour),\n this.dayStartMinute\n );\n const endOfDay = this.dateAdapter.setMinutes(\n this.dateAdapter.setHours(columnDate, this.dayEndHour),\n this.dayEndMinute\n );\n const hourHeightModifier =\n (this.hourSegments angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json this.hourSegmentHeight) /\n (this.hourDuration || 60);\n const now = new Date();\n return {\n isVisible:\n this.dateAdapter.isSameDay(columnDate, now) &&\n now >= startOfDay &&\n now <= endOfDay,\n top:\n this.dateAdapter.differenceInMinutes(now, startOfDay) angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json hourHeightModifier,\n };\n })\n );\n\n constructor(private dateAdapter: DateAdapter, private zone: NgZone) {}\n\n ngOnChanges(changes: SimpleChanges) {\n if (changes.columnDate) {\n this.columnDate$.next(changes.columnDate.currentValue);\n }\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/week/calendar-week-view/calendar-week-view-event/calendar-week-view-event.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 15,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 89,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        70,
                        258
                      ],
                      "text": ", ChangeDetectionStrategy,\n} from '@angular/core';\nimport {\n WeekViewAllDayEvent,\n WeekViewTimeEvent,\n WeekViewHourColumn,\n} from 'calendar-utils';\nimport { PlacementArray } from 'positioning';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (70). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 17,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 88,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 91,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 91,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 93,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 93,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 95,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 95,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 97,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 97,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 99,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 99,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 101,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 101,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 103,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 103,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 105,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 105,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 107,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 107,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 109,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 109,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 111,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 111,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 113,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 113,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 115,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 115,
                "endColumn": 25,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        3387,
                        3387
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 15,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n Input,\n Output,\n EventEmitter,\n TemplateRef,\n} from '@angular/core';\nimport {\n WeekViewAllDayEvent,\n WeekViewTimeEvent,\n WeekViewHourColumn,\n} from 'calendar-utils';\nimport { PlacementArray } from 'positioning';\n\n@Component({\n selector: 'mwl-calendar-week-view-event',\n template: `\n <ng-template\n #defaultTemplate\n let-weekEvent=\"weekEvent\"\n let-tooltipPlacement=\"tooltipPlacement\"\n let-eventClicked=\"eventClicked\"\n let-tooltipTemplate=\"tooltipTemplate\"\n let-tooltipAppendToBody=\"tooltipAppendToBody\"\n let-tooltipDisabled=\"tooltipDisabled\"\n let-tooltipDelay=\"tooltipDelay\"\n let-column=\"column\"\n let-daysInWeek=\"daysInWeek\"\n >\n <div\n class=\"cal-event\"\n [ngStyle]=\"{\n color: weekEvent.event.color?.secondaryText,\n backgroundColor: weekEvent.event.color?.secondary,\n borderColor: weekEvent.event.color?.primary\n }\"\n [mwlCalendarTooltip]=\"\n !tooltipDisabled\n ? (weekEvent.event.title\n | calendarEventTitle\n : (daysInWeek === 1 ? 'dayTooltip' : 'weekTooltip')\n : weekEvent.tempEvent || weekEvent.event)\n : ''\n \"\n [tooltipPlacement]=\"tooltipPlacement\"\n [tooltipEvent]=\"weekEvent.tempEvent || weekEvent.event\"\n [tooltipTemplate]=\"tooltipTemplate\"\n [tooltipAppendToBody]=\"tooltipAppendToBody\"\n [tooltipDelay]=\"tooltipDelay\"\n (mwlClick)=\"eventClicked.emit({ sourceEvent: $event })\"\n (mwlKeydownEnter)=\"eventClicked.emit({ sourceEvent: $event })\"\n tabindex=\"0\"\n role=\"application\"\n [attr.aria-label]=\"\n { event: weekEvent.tempEvent || weekEvent.event, locale: locale }\n | calendarA11y : 'eventDescription'\n \"\n >\n <mwl-calendar-event-actions\n [event]=\"weekEvent.tempEvent || weekEvent.event\"\n [customTemplate]=\"eventActionsTemplate\"\n >\n </mwl-calendar-event-actions>\n &ngsp;\n <mwl-calendar-event-title\n [event]=\"weekEvent.tempEvent || weekEvent.event\"\n [customTemplate]=\"eventTitleTemplate\"\n [view]=\"daysInWeek === 1 ? 'day' : 'week'\"\n >\n </mwl-calendar-event-title>\n </div>\n </ng-template>\n <ng-template\n [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n [ngTemplateOutletContext]=\"{\n weekEvent: weekEvent,\n tooltipPlacement: tooltipPlacement,\n eventClicked: eventClicked,\n tooltipTemplate: tooltipTemplate,\n tooltipAppendToBody: tooltipAppendToBody,\n tooltipDisabled: tooltipDisabled,\n tooltipDelay: tooltipDelay,\n column: column,\n daysInWeek: daysInWeek\n }\"\n >\n </ng-template>\n `,\n})\nexport class CalendarWeekViewEventComponent {\n @Input() locale: string;\n\n @Input() weekEvent: WeekViewAllDayEvent | WeekViewTimeEvent;\n\n @Input() tooltipPlacement: PlacementArray;\n\n @Input() tooltipAppendToBody: boolean;\n\n @Input() tooltipDisabled: boolean;\n\n @Input() tooltipDelay: number | null;\n\n @Input() customTemplate: TemplateRef<any>;\n\n @Input() eventTitleTemplate: TemplateRef<any>;\n\n @Input() eventActionsTemplate: TemplateRef<any>;\n\n @Input() tooltipTemplate: TemplateRef<any>;\n\n @Input() column: WeekViewHourColumn;\n\n @Input() daysInWeek: number;\n\n @Output() eventClicked = new EventEmitter<{\n sourceEvent: MouseEvent | KeyboardEvent;\n }>();\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/week/calendar-week-view/calendar-week-view-header/calendar-week-view-header.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 11,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 66,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        70,
                        239
                      ],
                      "text": ", ChangeDetectionStrategy,\n} from '@angular/core';\nimport { CalendarEvent, WeekDay } from 'calendar-utils';\nimport { trackByWeekDayHeaderDate } from '../../../common/util/util';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (51). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 13,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 65,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 68,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 68,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 70,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 70,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 72,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 72,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 74,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 74,
                "endColumn": 29,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        2141,
                        2141
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 79,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 79,
                "endColumn": 25,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        2247,
                        2247
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 84,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 84,
                "endColumn": 22,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        2348,
                        2348
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              }
            ],
            "suppressedMessages": [],
            "errorCount": 8,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n Input,\n Output,\n EventEmitter,\n TemplateRef,\n} from '@angular/core';\nimport { CalendarEvent, WeekDay } from 'calendar-utils';\nimport { trackByWeekDayHeaderDate } from '../../../common/util/util';\n\n@Component({\n selector: 'mwl-calendar-week-view-header',\n template: `\n <ng-template\n #defaultTemplate\n let-days=\"days\"\n let-locale=\"locale\"\n let-dayHeaderClicked=\"dayHeaderClicked\"\n let-eventDropped=\"eventDropped\"\n let-trackByWeekDayHeaderDate=\"trackByWeekDayHeaderDate\"\n let-dragEnter=\"dragEnter\"\n >\n <div class=\"cal-day-headers\" role=\"row\">\n <div\n class=\"cal-header\"\n *ngFor=\"let day of days; trackBy: trackByWeekDayHeaderDate\"\n [class.cal-past]=\"day.isPast\"\n [class.cal-today]=\"day.isToday\"\n [class.cal-future]=\"day.isFuture\"\n [class.cal-weekend]=\"day.isWeekend\"\n [ngClass]=\"day.cssClass\"\n (mwlClick)=\"dayHeaderClicked.emit({ day: day, sourceEvent: $event })\"\n mwlDroppable\n dragOverClass=\"cal-drag-over\"\n (drop)=\"\n eventDropped.emit({\n event: $event.dropData.event,\n newStart: day.date\n })\n \"\n (dragEnter)=\"dragEnter.emit({ date: day.date })\"\n tabindex=\"0\"\n role=\"columnheader\"\n >\n <b>{{ day.date | calendarDate : 'weekViewColumnHeader' : locale }}</b\n ><br />\n <span>{{\n day.date | calendarDate : 'weekViewColumnSubHeader' : locale\n }}</span>\n </div>\n </div>\n </ng-template>\n <ng-template\n [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n [ngTemplateOutletContext]=\"{\n days: days,\n locale: locale,\n dayHeaderClicked: dayHeaderClicked,\n eventDropped: eventDropped,\n dragEnter: dragEnter,\n trackByWeekDayHeaderDate: trackByWeekDayHeaderDate\n }\"\n >\n </ng-template>\n `,\n})\nexport class CalendarWeekViewHeaderComponent {\n @Input() days: WeekDay[];\n\n @Input() locale: string;\n\n @Input() customTemplate: TemplateRef<any>;\n\n @Output() dayHeaderClicked = new EventEmitter<{\n day: WeekDay;\n sourceEvent: MouseEvent;\n }>();\n\n @Output() eventDropped = new EventEmitter<{\n event: CalendarEvent;\n newStart: Date;\n }>();\n\n @Output() dragEnter = new EventEmitter<{ date: Date }>();\n\n trackByWeekDayHeaderDate = trackByWeekDayHeaderDate;\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/week/calendar-week-view/calendar-week-view-hour-segment/calendar-week-view-hour-segment.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 4,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 51,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        38,
                        133
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { WeekViewHourSegment } from 'calendar-utils';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (43). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 6,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 50,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 53,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 53,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 55,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 55,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 57,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 57,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 59,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 59,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 61,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 61,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 63,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 63,
                "endColumn": 11
              }
            ],
            "suppressedMessages": [],
            "errorCount": 8,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component, Input, TemplateRef } from '@angular/core';\nimport { WeekViewHourSegment } from 'calendar-utils';\n\n@Component({\n selector: 'mwl-calendar-week-view-hour-segment',\n template: `\n <ng-template\n #defaultTemplate\n let-segment=\"segment\"\n let-locale=\"locale\"\n let-segmentHeight=\"segmentHeight\"\n let-isTimeLabel=\"isTimeLabel\"\n let-daysInWeek=\"daysInWeek\"\n >\n <div\n [attr.aria-hidden]=\"\n {}\n | calendarA11y\n : (daysInWeek === 1\n ? 'hideDayHourSegment'\n : 'hideWeekHourSegment')\n \"\n class=\"cal-hour-segment\"\n [style.height.px]=\"segmentHeight\"\n [class.cal-hour-start]=\"segment.isStart\"\n [class.cal-after-hour-start]=\"!segment.isStart\"\n [ngClass]=\"segment.cssClass\"\n >\n <div class=\"cal-time\" *ngIf=\"isTimeLabel\">\n {{\n segment.displayDate\n | calendarDate\n : (daysInWeek === 1 ? 'dayViewHour' : 'weekViewHour')\n : locale\n }}\n </div>\n </div>\n </ng-template>\n <ng-template\n [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n [ngTemplateOutletContext]=\"{\n segment: segment,\n locale: locale,\n segmentHeight: segmentHeight,\n isTimeLabel: isTimeLabel,\n daysInWeek: daysInWeek\n }\"\n >\n </ng-template>\n `,\n})\nexport class CalendarWeekViewHourSegmentComponent {\n @Input() segment: WeekViewHourSegment;\n\n @Input() segmentHeight: number;\n\n @Input() locale: string;\n\n @Input() isTimeLabel: boolean;\n\n @Input() daysInWeek: number;\n\n @Input() customTemplate: TemplateRef<any>;\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/week/calendar-week-view/calendar-week-view.component.spec.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/use-component-selector",
                "severity": 2,
                "message": "The selector of the component is mandatory",
                "line": 34,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "useComponentSelector",
                "endLine": 43,
                "endColumn": 3
              },
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 34,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 43,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        801,
                        988
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { By } from '@angular/platform-browser';\nimport angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json as fakeTimers from '@sinonjs/fake-timers';\nimport { formatDate } from '@angular/common';\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (6). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 35,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 42,
                "endColumn": 4
              }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n inject,\n ComponentFixture,\n TestBed,\n fakeAsync,\n flush,\n} from '@angular/core/testing';\nimport moment from 'moment';\nimport { expect } from 'chai';\nimport {\n CalendarEventTitleFormatter,\n CalendarEvent,\n CalendarMomentDateFormatter,\n CalendarDateFormatter,\n CalendarModule,\n MOMENT,\n CalendarEventTimesChangedEvent,\n DAYS_OF_WEEK,\n CalendarWeekViewComponent,\n DateAdapter,\n CalendarWeekViewBeforeRenderEvent,\n} from 'angular-calendar';\nimport { DragAndDropModule } from 'angular-draggable-droppable';\nimport { Subject } from 'rxjs';\nimport angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json as sinon from 'sinon';\nimport { triggerDomEvent, ExternalEventComponent } from '../../../test/util';\nimport { take } from 'rxjs/operators';\nimport { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\nimport { Component } from '@angular/core';\nimport { By } from '@angular/platform-browser';\nimport angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json as fakeTimers from '@sinonjs/fake-timers';\nimport { formatDate } from '@angular/common';\n\n@Component({\n template: `\n <mwl-calendar-week-view\n [viewDate]=\"viewDate\"\n [events]=\"events\"\n (eventTimesChanged)=\"eventTimesChanged($event)\"\n ></mwl-calendar-week-view>\n <mwl-external-event></mwl-external-event>\n `,\n})\nclass TestComponent {\n viewDate: Date;\n events: CalendarEvent[];\n eventTimesChanged = sinon.spy();\n}\n\ndescribe('calendarWeekView component', () => {\n beforeEach(() => {\n TestBed.configureTestingModule({\n imports: [\n CalendarModule.forRoot(\n {\n provide: DateAdapter,\n useFactory: adapterFactory,\n },\n {\n dateFormatter: {\n provide: CalendarDateFormatter,\n useClass: CalendarMomentDateFormatter,\n },\n }\n ),\n DragAndDropModule,\n ],\n declarations: [ExternalEventComponent, TestComponent],\n providers: [{ provide: MOMENT, useValue: moment }],\n });\n });\n\n let eventTitle: CalendarEventTitleFormatter;\n beforeEach(inject([CalendarEventTitleFormatter], (_eventTitle_) => {\n eventTitle = _eventTitle_;\n }));\n\n it('should generate the week view', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2016-06-29');\n fixture.componentInstance.ngOnChanges({ viewDate: {} });\n expect(fixture.componentInstance.days.length).to.equal(7);\n expect(fixture.componentInstance.days[0].date).to.deep.equal(\n moment('2016-06-26').toDate()\n );\n });\n\n it('should generate the week view without excluded days', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2016-06-29');\n fixture.componentInstance.excludeDays = [0, 6];\n fixture.componentInstance.ngOnChanges({ viewDate: {} });\n expect(fixture.componentInstance.days.length).to.equal(5);\n fixture.destroy();\n });\n\n it('should update the week view when excluded days changed', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2016-06-29');\n fixture.componentInstance.excludeDays = [0, 6];\n fixture.componentInstance.ngOnChanges({ excludeDays: {} });\n expect(fixture.componentInstance.days.length).to.equal(5);\n expect(fixture.nativeElement.querySelector('.cal-weekend')).to.equal(null);\n\n fixture.componentInstance.excludeDays = [1];\n fixture.componentInstance.ngOnChanges({ excludeDays: [] });\n fixture.detectChanges();\n expect(fixture.componentInstance.days.length).to.equal(6);\n expect(fixture.nativeElement.querySelector('.cal-weekend')).not.to.equal(\n null\n );\n\n fixture.destroy();\n });\n\n it('should support excluding non consecutive days', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2016-06-29');\n fixture.componentInstance.excludeDays = [4, 6];\n fixture.componentInstance.ngOnChanges({ viewDate: {} });\n expect(fixture.componentInstance.days.length).to.equal(5);\n fixture.destroy();\n });\n\n it('should support excluding all but 1 day', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2016-06-29');\n fixture.componentInstance.excludeDays = [0, 1, 2, 3, 4, 5];\n fixture.componentInstance.ngOnChanges({ viewDate: {} });\n expect(fixture.componentInstance.days.length).to.equal(1);\n fixture.destroy();\n });\n\n it('should generate the week view with default colors for events', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.ngOnInit();\n fixture.componentInstance.viewDate = new Date('2016-06-01');\n fixture.componentInstance.events = [\n {\n start: new Date('2016-05-30'),\n end: new Date('2016-06-02'),\n title: 'foo',\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n\n const computedStyles: CSSStyleDeclaration = window.getComputedStyle(\n fixture.nativeElement.querySelector('.cal-event')\n );\n expect(computedStyles.getPropertyValue('background-color')).to.equal(\n 'rgb(209, 232, 255)'\n );\n expect(computedStyles.getPropertyValue('border-color')).to.equal(\n 'rgb(30, 144, 255)'\n );\n expect(computedStyles.getPropertyValue('color')).to.equal(\n 'rgb(30, 144, 255)'\n );\n fixture.destroy();\n });\n\n it('should emit on the dayHeaderClicked output', (done) => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2016-06-29');\n fixture.componentInstance.ngOnChanges({ viewDate: {} });\n fixture.detectChanges();\n fixture.componentInstance.dayHeaderClicked.subscribe((val) => {\n expect(val).to.deep.equal({\n day: fixture.componentInstance.days[0],\n sourceEvent: window['event'],\n });\n done();\n });\n fixture.nativeElement.querySelector('.cal-header').click();\n });\n\n it('should add a custom CSS class to events', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2016-06-01');\n fixture.componentInstance.events = [\n {\n start: new Date('2016-05-30'),\n end: new Date('2016-06-02'),\n cssClass: 'foo',\n title: 'foo',\n color: {\n primary: 'blue',\n secondary: '',\n },\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n expect(\n fixture.nativeElement\n .querySelector('.cal-event-container')\n .classList.contains('foo')\n ).to.equal(true);\n fixture.destroy();\n });\n\n it('should call the event clicked callback', (done) => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2016-06-01');\n fixture.componentInstance.events = [\n {\n start: new Date('2016-05-30'),\n end: new Date('2016-06-02'),\n title: '<span>foo</span>',\n color: {\n primary: 'blue',\n secondary: '',\n },\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n const title: HTMLElement =\n fixture.nativeElement.querySelector('.cal-event-title');\n expect(title.innerHTML).to.equal('<span>foo</span>');\n fixture.componentInstance.eventClicked.subscribe((val) => {\n expect(val).to.deep.equal({\n event: fixture.componentInstance.events[0],\n sourceEvent: window['event'],\n });\n done();\n });\n title.click();\n });\n\n it('should refresh the view when the refresh observable is emitted on', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.refresh = new Subject();\n fixture.componentInstance.ngOnInit();\n fixture.componentInstance.viewDate = new Date('2016-06-01');\n fixture.componentInstance.ngOnChanges({ viewDate: {} });\n const event: CalendarEvent = {\n start: new Date('2016-06-01'),\n end: new Date('2016-06-02'),\n title: 'foo',\n allDay: true,\n };\n fixture.componentInstance.events.push(event);\n fixture.componentInstance.refresh.next(true);\n expect(\n fixture.componentInstance.view.allDayEventRows[0].row[0].event\n ).to.deep.equal(event);\n fixture.destroy();\n });\n\n it('should allow the event title to be customised', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n eventTitle.week = (event: CalendarEvent) => {\n return `foo ${event.title}`;\n };\n fixture.componentInstance.viewDate = new Date('2016-06-01');\n fixture.componentInstance.events = [\n {\n start: new Date('2016-05-30'),\n end: new Date('2016-06-02'),\n title: 'bar',\n color: {\n primary: 'blue',\n secondary: '',\n },\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n const title: HTMLElement =\n fixture.nativeElement.querySelector('.cal-event-title');\n expect(title.innerHTML).to.equal('foo bar');\n });\n\n it('should allow the locale to be changed', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.locale = 'de';\n fixture.componentInstance.viewDate = new Date();\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n expect(\n fixture.nativeElement.querySelector('.cal-header b').innerHTML.trim()\n ).to.equal('Sonntag');\n });\n\n it('should show a tooltip on mouseover of the event', fakeAsync(() => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n eventTitle.weekTooltip = (e: CalendarEvent) => {\n return `title: ${e.title}`;\n };\n fixture.componentInstance.viewDate = new Date('2016-06-01');\n fixture.componentInstance.events = [\n {\n start: new Date('2016-05-30'),\n end: new Date('2016-06-02'),\n title: 'foo <b>bar</b>',\n color: {\n primary: 'blue',\n secondary: '',\n },\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n const event: HTMLElement =\n fixture.nativeElement.querySelector('.cal-event');\n triggerDomEvent('mouseenter', event);\n fixture.detectChanges();\n flush();\n const tooltip: HTMLElement = document.body.querySelector(\n '.cal-tooltip'\n ) as HTMLElement;\n expect(tooltip.querySelector('.cal-tooltip-inner').innerHTML).to.equal(\n 'title: foo <b>bar</b>'\n );\n expect(tooltip.classList.contains('cal-tooltip-top')).to.equal(true);\n expect(!!tooltip.style.top).to.equal(true);\n expect(!!tooltip.style.left).to.equal(true);\n triggerDomEvent('mouseleave', event);\n fixture.detectChanges();\n expect(!!document.body.querySelector('.cal-tooltip')).to.equal(false);\n fixture.destroy();\n }));\n\n it('should disable the tooltip', fakeAsync(() => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n eventTitle.weekTooltip = () => '';\n fixture.componentInstance.viewDate = new Date('2016-06-01');\n fixture.componentInstance.events = [\n {\n start: new Date('2016-05-30'),\n end: new Date('2016-06-02'),\n title: 'foo <b>bar</b>',\n color: {\n primary: 'blue',\n secondary: '',\n },\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n const event: HTMLElement =\n fixture.nativeElement.querySelector('.cal-event');\n triggerDomEvent('mouseenter', event);\n fixture.detectChanges();\n flush();\n expect(!!document.body.querySelector('.cal-tooltip')).to.equal(false);\n fixture.destroy();\n }));\n\n it('should hide the tooltip when dragging', fakeAsync(() => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n eventTitle.weekTooltip = (e: CalendarEvent) => {\n return `title: ${e.title}`;\n };\n fixture.componentInstance.viewDate = new Date('2016-06-01');\n fixture.componentInstance.events = [\n {\n start: new Date('2016-05-30'),\n end: new Date('2016-06-02'),\n title: 'foo <b>bar</b>',\n color: {\n primary: 'blue',\n secondary: '',\n },\n draggable: true,\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n const event: HTMLElement =\n fixture.nativeElement.querySelector('.cal-event');\n triggerDomEvent('mouseenter', event);\n fixture.detectChanges();\n flush();\n expect(document.body.querySelector('.cal-tooltip')).to.be.ok;\n const eventPosition = event.getBoundingClientRect();\n triggerDomEvent('mousedown', event, {\n clientX: eventPosition.left,\n clientY: eventPosition.top,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', event, {\n clientX: eventPosition.left,\n clientY: eventPosition.top + 100,\n });\n fixture.detectChanges();\n expect(document.body.querySelector('.cal-tooltip')).not.to.be.ok;\n fixture.destroy();\n }));\n\n it('should allow the start of the week to be changed', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2016-06-27');\n fixture.componentInstance.weekStartsOn = 1;\n fixture.componentInstance.ngOnChanges({ viewDate: {} });\n fixture.detectChanges();\n expect(\n fixture.nativeElement.querySelector('.cal-day-headers b').innerText\n ).to.deep.equal('Monday');\n fixture.destroy();\n });\n\n it('should resize the all day event by dragging from the left edge', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2016-06-27');\n fixture.componentInstance.events = [\n {\n title: 'foo',\n color: { primary: '', secondary: '' },\n start: moment('2016-06-27').add(4, 'hours').toDate(),\n end: moment('2016-06-27').add(6, 'hours').toDate(),\n resizable: {\n beforeStart: true,\n },\n allDay: true,\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event: HTMLElement = fixture.nativeElement.querySelector(\n '.cal-event-container'\n );\n const dayWidth: number = event.parentElement.offsetWidth / 7;\n const rect: ClientRect = event.getBoundingClientRect();\n let resizeEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n resizeEvent = e;\n });\n const resizeHandle = event.querySelector('.cal-resize-handle-before-start');\n triggerDomEvent('mousedown', resizeHandle, {\n clientX: rect.left,\n clientY: rect.top,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', resizeHandle, {\n clientX: rect.left - dayWidth,\n clientY: rect.top,\n });\n fixture.detectChanges();\n expect(Math.round(event.getBoundingClientRect().left)).to.equal(\n Math.round(rect.left - dayWidth)\n );\n expect(Math.round(event.getBoundingClientRect().width)).to.equal(\n Math.round(rect.width + dayWidth)\n );\n triggerDomEvent('mouseup', resizeHandle, {\n clientX: rect.left - dayWidth,\n clientY: rect.top,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(resizeEvent).to.deep.equal({\n type: 'resize',\n event: fixture.componentInstance.events[0],\n newStart: moment('2016-06-27')\n .add(4, 'hours')\n .subtract(1, 'day')\n .toDate(),\n newEnd: moment('2016-06-27').add(6, 'hours').toDate(),\n });\n });\n\n it('should resize the all day event by dragging from the right edge', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2016-06-27');\n fixture.componentInstance.events = [\n {\n title: 'foo',\n color: { primary: '', secondary: '' },\n start: moment('2016-06-27').add(4, 'hours').toDate(),\n end: moment('2016-06-27').add(6, 'hours').toDate(),\n resizable: {\n afterEnd: true,\n },\n allDay: true,\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event: HTMLElement = fixture.nativeElement.querySelector(\n '.cal-event-container'\n );\n const dayWidth: number = event.parentElement.offsetWidth / 7;\n const rect: ClientRect = event.getBoundingClientRect();\n let resizeEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n resizeEvent = e;\n });\n const handle = fixture.nativeElement.querySelector(\n '.cal-resize-handle-after-end'\n );\n triggerDomEvent('mousedown', handle, {\n clientX: rect.right,\n clientY: rect.top,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', handle, {\n clientX: rect.right + dayWidth,\n clientY: rect.top,\n });\n fixture.detectChanges();\n expect(Math.round(event.getBoundingClientRect().left)).to.equal(\n Math.round(rect.left)\n );\n expect(Math.round(event.getBoundingClientRect().width)).to.equal(\n Math.round(rect.width + dayWidth)\n );\n triggerDomEvent('mouseup', handle, {\n clientX: rect.right + dayWidth,\n clientY: rect.top,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(resizeEvent).to.deep.equal({\n type: 'resize',\n event: fixture.componentInstance.events[0],\n newStart: moment('2016-06-27').add(4, 'hours').toDate(),\n newEnd: moment('2016-06-27').add(6, 'hours').add(1, 'day').toDate(),\n });\n });\n\n it('should validate resizing all day events from the right end', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2016-06-27');\n fixture.componentInstance.events = [\n {\n title: 'foo',\n start: moment('2016-06-27').add(4, 'hours').toDate(),\n end: moment('2016-06-27').add(6, 'hours').toDate(),\n resizable: {\n afterEnd: true,\n },\n allDay: true,\n },\n ];\n const validateEventTimesChanged = sinon\n .stub()\n .onFirstCall()\n .returns(true)\n .onSecondCall()\n .returns(false);\n fixture.componentInstance.validateEventTimesChanged =\n validateEventTimesChanged;\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event: HTMLElement = fixture.nativeElement.querySelector(\n '.cal-event-container'\n );\n const dayWidth: number = event.parentElement.offsetWidth / 7;\n const rect: ClientRect = event.getBoundingClientRect();\n let resizeEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n resizeEvent = e;\n });\n const handle = fixture.nativeElement.querySelector(\n '.cal-resize-handle-after-end'\n );\n triggerDomEvent('mousedown', handle, {\n clientX: rect.right,\n clientY: rect.top,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', handle, {\n clientX: rect.right + dayWidth,\n clientY: rect.top,\n });\n fixture.detectChanges();\n expect(Math.round(event.getBoundingClientRect().left)).to.equal(\n Math.round(rect.left)\n );\n expect(Math.round(event.getBoundingClientRect().width)).to.equal(\n Math.round(rect.width + dayWidth)\n );\n triggerDomEvent('mousemove', handle, {\n clientX: rect.right + dayWidth angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json 2,\n clientY: rect.top,\n });\n fixture.detectChanges();\n expect(Math.round(event.getBoundingClientRect().left)).to.equal(\n Math.round(rect.left)\n );\n expect(Math.round(event.getBoundingClientRect().width)).to.equal(\n Math.round(rect.width + dayWidth)\n );\n triggerDomEvent('mouseup', handle, {\n clientX: rect.right + dayWidth angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json 2,\n clientY: rect.top,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(resizeEvent).to.deep.equal({\n type: 'resize',\n event: fixture.componentInstance.events[0],\n newStart: moment('2016-06-27').add(4, 'hours').toDate(),\n newEnd: moment('2016-06-27').add(6, 'hours').add(1, 'day').toDate(),\n });\n expect(validateEventTimesChanged).to.have.been.calledTwice;\n expect(validateEventTimesChanged.getCall(0).args[0]).to.deep.equal({\n type: 'resize',\n event: fixture.componentInstance.events[0],\n newStart: moment('2016-06-27').add(4, 'hours').toDate(),\n newEnd: moment('2016-06-27').add(6, 'hours').add(1, 'day').toDate(),\n });\n expect(validateEventTimesChanged.getCall(1).args[0]).to.deep.equal({\n type: 'resize',\n event: fixture.componentInstance.events[0],\n newStart: moment('2016-06-27').add(4, 'hours').toDate(),\n newEnd: moment('2016-06-27').add(6, 'hours').add(2, 'day').toDate(),\n });\n });\n\n it('should validate resizing all day events from the left end', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2020-05-20');\n fixture.componentInstance.events = [\n {\n title: 'foo',\n start: moment(fixture.componentInstance.viewDate)\n .add(4, 'hours')\n .toDate(),\n end: moment(fixture.componentInstance.viewDate)\n .add(6, 'hours')\n .toDate(),\n resizable: {\n beforeStart: true,\n },\n allDay: true,\n },\n ];\n const validateEventTimesChanged = sinon\n .stub()\n .onFirstCall()\n .returns(true)\n .onSecondCall()\n .returns(false);\n fixture.componentInstance.validateEventTimesChanged =\n validateEventTimesChanged;\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event: HTMLElement = fixture.nativeElement.querySelector(\n '.cal-event-container'\n );\n const dayWidth: number = event.parentElement.offsetWidth / 7;\n const rect: ClientRect = event.getBoundingClientRect();\n let resizeEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n resizeEvent = e;\n });\n const handle = fixture.nativeElement.querySelector(\n '.cal-resize-handle-before-start'\n );\n triggerDomEvent('mousedown', handle, {\n clientX: rect.left,\n clientY: rect.top,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', handle, {\n clientX: rect.left - dayWidth,\n clientY: rect.top,\n });\n fixture.detectChanges();\n expect(Math.round(event.getBoundingClientRect().left)).to.equal(\n Math.round(rect.left - dayWidth)\n );\n expect(Math.round(event.getBoundingClientRect().width)).to.equal(\n Math.round(rect.width + dayWidth)\n );\n triggerDomEvent('mousemove', handle, {\n clientX: rect.left - dayWidth angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json 2,\n clientY: rect.top,\n });\n fixture.detectChanges();\n expect(Math.round(event.getBoundingClientRect().left)).to.equal(\n Math.round(rect.left - dayWidth)\n );\n expect(Math.round(event.getBoundingClientRect().width)).to.equal(\n Math.round(rect.width + dayWidth)\n );\n triggerDomEvent('mouseup', handle, {\n clientX: rect.left - dayWidth angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json 2,\n clientY: rect.top,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(resizeEvent).to.deep.equal({\n type: 'resize',\n event: fixture.componentInstance.events[0],\n newStart: moment(fixture.componentInstance.events[0].start)\n .subtract(1, 'day')\n .toDate(),\n newEnd: moment(fixture.componentInstance.events[0].end).toDate(),\n });\n expect(validateEventTimesChanged).to.have.been.calledTwice;\n expect(validateEventTimesChanged.getCall(0).args[0]).to.deep.equal({\n type: 'resize',\n event: fixture.componentInstance.events[0],\n newStart: moment(fixture.componentInstance.events[0].start)\n .subtract(1, 'day')\n .toDate(),\n newEnd: moment(fixture.componentInstance.events[0].end).toDate(),\n });\n expect(validateEventTimesChanged.getCall(1).args[0]).to.deep.equal({\n type: 'resize',\n event: fixture.componentInstance.events[0],\n newStart: moment(fixture.componentInstance.events[0].start)\n .subtract(2, 'day')\n .toDate(),\n newEnd: moment(fixture.componentInstance.events[0].end).toDate(),\n });\n });\n\n it('should resize all day events with no end date', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2016-06-27');\n fixture.componentInstance.events = [\n {\n title: 'foo',\n color: { primary: '', secondary: '' },\n start: moment('2016-06-27').add(4, 'hours').toDate(),\n resizable: {\n afterEnd: true,\n },\n allDay: true,\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event: HTMLElement = fixture.nativeElement.querySelector(\n '.cal-event-container'\n );\n const dayWidth: number = event.parentElement.offsetWidth / 7;\n const rect: ClientRect = event.getBoundingClientRect();\n let resizeEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n resizeEvent = e;\n });\n const handle = fixture.nativeElement.querySelector(\n '.cal-resize-handle-after-end'\n );\n triggerDomEvent('mousedown', handle, {\n clientX: rect.right,\n clientY: rect.top,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', handle, {\n clientX: rect.right + dayWidth,\n clientY: rect.top,\n });\n fixture.detectChanges();\n expect(Math.round(event.getBoundingClientRect().left)).to.equal(\n Math.round(rect.left)\n );\n expect(Math.round(event.getBoundingClientRect().width)).to.equal(\n Math.round(rect.width + dayWidth)\n );\n triggerDomEvent('mouseup', handle, {\n clientX: rect.right + dayWidth,\n clientY: rect.top,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(resizeEvent).to.deep.equal({\n type: 'resize',\n event: fixture.componentInstance.events[0],\n newStart: moment('2016-06-27').add(4, 'hours').toDate(),\n newEnd: moment('2016-06-27').add(4, 'hours').add(1, 'day').toDate(),\n });\n });\n\n it('should allow the all day event to be dragged and dropped', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2016-12-08');\n fixture.componentInstance.events = [\n {\n title: 'foo',\n color: { primary: '', secondary: '' },\n start: moment('2016-12-08').add(4, 'hours').toDate(),\n end: moment('2016-12-08').add(6, 'hours').toDate(),\n draggable: true,\n allDay: true,\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n // remove the header as it was causing the test to fail\n const header: HTMLElement =\n fixture.nativeElement.querySelector('.cal-day-headers');\n header.parentNode.removeChild(header);\n const event: HTMLElement = fixture.nativeElement.querySelector(\n '.cal-event-container'\n );\n const dayWidth: number = event.parentElement.offsetWidth / 7;\n const eventPosition: ClientRect = event.getBoundingClientRect();\n const eventDropped = sinon.spy();\n fixture.componentInstance.eventTimesChanged\n .pipe(take(1))\n .subscribe(eventDropped);\n triggerDomEvent('mousedown', event, {\n clientX: eventPosition.left,\n clientY: eventPosition.top,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', event, {\n clientX: eventPosition.left,\n clientY: eventPosition.top,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', document.body, {\n clientX: eventPosition.left - 100,\n clientY: eventPosition.top,\n });\n fixture.detectChanges();\n const ghostElement = event.nextSibling as HTMLElement;\n expect(Math.round(ghostElement.getBoundingClientRect().left)).to.equal(\n Math.round(eventPosition.left - dayWidth) + 1\n );\n triggerDomEvent('mouseup', document.body, {\n clientX: eventPosition.left - dayWidth,\n clientY: eventPosition.top,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(eventDropped.getCall(0).args[0]).to.deep.equal({\n type: 'drag',\n event: fixture.componentInstance.events[0],\n newStart: moment('2016-12-07').add(4, 'hours').toDate(),\n newEnd: moment('2016-12-07').add(6, 'hours').toDate(),\n allDay: true,\n });\n expect(eventDropped).to.have.been.calledOnce;\n });\n\n it('should allow the all day event to be dragged and dropped and control where it can be dragged', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2016-12-08');\n fixture.componentInstance.events = [\n {\n title: 'foo',\n start: moment('2016-12-08').add(4, 'hours').toDate(),\n end: moment('2016-12-08').add(6, 'hours').toDate(),\n draggable: true,\n allDay: true,\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n // remove the header as it was causing the test to fail\n const header: HTMLElement =\n fixture.nativeElement.querySelector('.cal-day-headers');\n header.parentNode.removeChild(header);\n const event: HTMLElement = fixture.nativeElement.querySelector(\n '.cal-event-container'\n );\n const dayWidth: number = event.parentElement.offsetWidth / 7;\n const eventPosition: ClientRect = event.getBoundingClientRect();\n const eventDropped = sinon.spy();\n const validateEventTimesChanged = sinon\n .stub()\n .onFirstCall()\n .returns(true)\n .onSecondCall()\n .returns(false);\n fixture.componentInstance.validateEventTimesChanged =\n validateEventTimesChanged;\n fixture.componentInstance.eventTimesChanged\n .pipe(take(1))\n .subscribe(eventDropped);\n triggerDomEvent('mousedown', event, {\n clientX: eventPosition.left,\n clientY: eventPosition.top,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', document.body, {\n clientX: eventPosition.left,\n clientY: eventPosition.top,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', document.body, {\n clientX: eventPosition.left - dayWidth,\n clientY: eventPosition.top,\n });\n fixture.detectChanges();\n const ghostElement = event.nextSibling as HTMLElement;\n expect(Math.round(ghostElement.getBoundingClientRect().left)).to.equal(\n Math.round(eventPosition.left - dayWidth) + 1\n );\n triggerDomEvent('mousemove', document.body, {\n clientX: eventPosition.left - dayWidth angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json 2,\n clientY: eventPosition.top,\n });\n fixture.detectChanges();\n expect(Math.round(ghostElement.getBoundingClientRect().left)).to.equal(\n Math.round(eventPosition.left - dayWidth) + 1\n );\n triggerDomEvent('mouseup', document.body, {\n clientX: eventPosition.left - dayWidth angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json 2,\n clientY: eventPosition.top,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(eventDropped.getCall(0).args[0]).to.deep.equal({\n type: 'drag',\n event: fixture.componentInstance.events[0],\n newStart: moment('2016-12-07').add(4, 'hours').toDate(),\n newEnd: moment('2016-12-07').add(6, 'hours').toDate(),\n allDay: true,\n });\n expect(eventDropped).to.have.been.calledOnce;\n expect(validateEventTimesChanged).to.have.been.calledTwice;\n expect(validateEventTimesChanged.getCall(0).args[0]).to.deep.equal({\n type: 'drag',\n event: fixture.componentInstance.events[0],\n newStart: moment('2016-12-07').add(4, 'hours').toDate(),\n newEnd: moment('2016-12-07').add(6, 'hours').toDate(),\n });\n expect(validateEventTimesChanged.getCall(1).args[0]).to.deep.equal({\n type: 'drag',\n event: fixture.componentInstance.events[0],\n newStart: moment('2016-12-06').add(4, 'hours').toDate(),\n newEnd: moment('2016-12-06').add(6, 'hours').toDate(),\n });\n });\n\n it('should allow all day events to be dragged outside of the calendar', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2016-12-08');\n fixture.componentInstance.events = [\n {\n title: 'foo',\n start: moment('2016-12-08').add(4, 'hours').toDate(),\n end: moment('2016-12-08').add(6, 'hours').toDate(),\n draggable: true,\n allDay: true,\n },\n ];\n fixture.componentInstance.snapDraggedEvents = false;\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n // remove the header as it was causing the test to fail\n const header: HTMLElement =\n fixture.nativeElement.querySelector('.cal-day-headers');\n header.parentNode.removeChild(header);\n const event: HTMLElement = fixture.nativeElement.querySelector(\n '.cal-event-container'\n );\n const eventPosition: ClientRect = event.getBoundingClientRect();\n const calendarPosition: ClientRect =\n fixture.nativeElement.getBoundingClientRect();\n const eventDropped = sinon.spy();\n fixture.componentInstance.eventTimesChanged\n .pipe(take(1))\n .subscribe(eventDropped);\n triggerDomEvent('mousedown', event, {\n clientX: eventPosition.left,\n clientY: eventPosition.top,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', document.body, {\n clientX: eventPosition.left - 50,\n clientY: eventPosition.top,\n });\n fixture.detectChanges();\n const ghostElement = event.nextSibling as HTMLElement;\n expect(Math.round(ghostElement.getBoundingClientRect().left)).to.equal(\n Math.round(eventPosition.left - 50)\n );\n triggerDomEvent('mousemove', document.body, {\n clientX: calendarPosition.left - 50,\n clientY: eventPosition.top,\n });\n fixture.detectChanges();\n triggerDomEvent('mouseup', document.body, {\n clientX: calendarPosition.left - 50,\n clientY: eventPosition.top,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(eventDropped).not.to.have.been.called;\n });\n\n it('should round all day event drag sizes to the event snap size when dragging and dropping non snapped events', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2016-12-08');\n fixture.componentInstance.events = [\n {\n title: 'foo',\n color: { primary: '', secondary: '' },\n start: moment('2016-12-08').add(4, 'hours').toDate(),\n end: moment('2016-12-08').add(6, 'hours').toDate(),\n draggable: true,\n allDay: true,\n },\n ];\n fixture.componentInstance.snapDraggedEvents = false;\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n // remove the header as it was causing the test to fail\n const header: HTMLElement =\n fixture.nativeElement.querySelector('.cal-day-headers');\n header.parentNode.removeChild(header);\n const event: HTMLElement = fixture.nativeElement.querySelector(\n '.cal-event-container'\n );\n const eventPosition: ClientRect = event.getBoundingClientRect();\n const eventDropped = sinon.spy();\n fixture.componentInstance.eventTimesChanged\n .pipe(take(1))\n .subscribe(eventDropped);\n triggerDomEvent('mousedown', event, {\n clientX: eventPosition.left,\n clientY: eventPosition.top,\n button: 0,\n });\n fixture.detectChanges();\n const dragLeft = event.parentElement.offsetWidth / 7;\n triggerDomEvent('mousemove', document.body, {\n clientX: eventPosition.left - dragLeft,\n clientY: eventPosition.top,\n });\n fixture.detectChanges();\n triggerDomEvent('mouseup', document.body, {\n clientX: eventPosition.left - dragLeft,\n clientY: eventPosition.top,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(eventDropped.getCall(0).args[0]).to.deep.equal({\n type: 'drag',\n event: fixture.componentInstance.events[0],\n newStart: moment('2016-12-07').add(4, 'hours').toDate(),\n newEnd: moment('2016-12-07').add(6, 'hours').toDate(),\n allDay: true,\n });\n expect(eventDropped).to.have.been.calledOnce;\n });\n\n it('should not allow all day events to be resized smaller than 1 day', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2016-06-27');\n fixture.componentInstance.events = [\n {\n title: 'foo',\n start: moment('2016-06-27').add(4, 'hours').toDate(),\n end: moment('2016-06-27').add(6, 'hours').toDate(),\n resizable: {\n beforeStart: true,\n },\n allDay: true,\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event: HTMLElement = fixture.nativeElement.querySelector(\n '.cal-event-container'\n );\n const dayWidth: number = event.parentElement.offsetWidth / 7;\n const rect: ClientRect = event.getBoundingClientRect();\n const handle = fixture.nativeElement.querySelector(\n '.cal-resize-handle-before-start'\n );\n triggerDomEvent('mousedown', handle, {\n clientX: rect.left,\n clientY: rect.top,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', handle, {\n clientX: rect.left + dayWidth,\n clientY: rect.top,\n });\n fixture.detectChanges();\n expect(Math.round(event.getBoundingClientRect().left)).to.equal(\n Math.round(rect.left)\n );\n expect(Math.round(event.getBoundingClientRect().width)).to.equal(\n Math.round(rect.width)\n );\n triggerDomEvent('mouseup', handle, {\n clientX: rect.left - dayWidth,\n clientY: rect.top,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n });\n\n it('should not allow all day events to be resized outside of the current view', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2016-06-27');\n fixture.componentInstance.events = [\n {\n title: 'foo',\n start: moment('2016-06-27').add(4, 'hours').toDate(),\n end: moment('2016-06-27').add(6, 'hours').toDate(),\n resizable: {\n beforeStart: true,\n },\n allDay: true,\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event: HTMLElement = fixture.nativeElement.querySelector(\n '.cal-event-container'\n );\n const dayWidth: number = event.parentElement.offsetWidth / 7;\n const rect: ClientRect = event.getBoundingClientRect();\n const handle = fixture.nativeElement.querySelector(\n '.cal-resize-handle-before-start'\n );\n triggerDomEvent('mousedown', handle, {\n clientX: rect.left,\n clientY: rect.top,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', handle, {\n clientX: rect.left - dayWidth,\n clientY: rect.top,\n });\n fixture.detectChanges();\n expect(Math.round(event.getBoundingClientRect().left)).to.equal(\n Math.round(rect.left - dayWidth)\n );\n expect(Math.round(event.getBoundingClientRect().width)).to.equal(\n Math.round(rect.width + dayWidth)\n );\n triggerDomEvent('mousemove', handle, {\n clientX: rect.left - dayWidth angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json 2,\n clientY: rect.top,\n });\n fixture.detectChanges();\n expect(Math.round(event.getBoundingClientRect().left)).to.equal(\n Math.round(rect.left - dayWidth)\n );\n expect(Math.round(event.getBoundingClientRect().width)).to.equal(\n Math.round(rect.width + dayWidth)\n );\n triggerDomEvent('mouseup', handle, {\n clientX: rect.left - dayWidth angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json 2,\n clientY: rect.top,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n });\n\n it('should allow external events to be dropped on the week view headers', () => {\n const fixture = TestBed.createComponent(TestComponent);\n fixture.componentInstance.viewDate = new Date('2016-06-27');\n fixture.componentInstance.events = [];\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const externalEventFixture = fixture.debugElement.query(\n By.directive(ExternalEventComponent)\n );\n\n const event: HTMLElement =\n externalEventFixture.nativeElement.querySelector('.external-event');\n const eventPosition: ClientRect = event.getBoundingClientRect();\n\n const headers: any[] = Array.from(\n fixture.nativeElement.querySelectorAll('.cal-header')\n );\n const header: HTMLElement = headers[2];\n const headerPosition: ClientRect = header.getBoundingClientRect();\n\n const eventDropped = fixture.componentInstance.eventTimesChanged;\n triggerDomEvent('mousedown', event, {\n clientY: eventPosition.top,\n clientX: eventPosition.left,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', document.body, {\n clientY: headerPosition.top,\n clientX: headerPosition.left,\n });\n fixture.detectChanges();\n triggerDomEvent('mouseup', document.body, {\n clientY: headerPosition.top,\n clientX: headerPosition.left,\n button: 0,\n });\n fixture.detectChanges();\n expect(eventDropped).to.have.been.calledWith({\n type: 'drop',\n event: externalEventFixture.componentInstance.event,\n newStart: moment('2016-06-27').startOf('week').add(2, 'days').toDate(),\n allDay: true,\n });\n expect(eventDropped).to.have.been.calledOnce;\n });\n\n it('should allow the weekend days to be customised', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2017-06-25');\n fixture.componentInstance.weekendDays = [\n DAYS_OF_WEEK.FRIDAY,\n DAYS_OF_WEEK.SATURDAY,\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, weekendDays: {} });\n fixture.detectChanges();\n const headerCells: HTMLElement[] =\n fixture.nativeElement.querySelectorAll('.cal-header');\n expect(headerCells[0].classList.contains('cal-weekend')).to.equal(false);\n expect(headerCells[5].classList.contains('cal-weekend')).to.equal(true);\n expect(headerCells[6].classList.contains('cal-weekend')).to.equal(true);\n fixture.destroy();\n });\n\n it('should add a custom CSS class to headers via the beforeViewRender output', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2016-06-27');\n fixture.componentInstance.beforeViewRender\n .pipe(take(1))\n .subscribe(({ header }) => {\n header[0].cssClass = 'foo';\n });\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n expect(\n fixture.nativeElement\n .querySelector('.cal-header')\n .classList.contains('foo')\n ).to.equal(true);\n fixture.destroy();\n });\n\n it('should log on invalid events', () => {\n const stub = sinon.stub(console, 'warn');\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.events = [\n { start: 1234, title: '', color: { primary: '', secondary: '' } },\n ] as any;\n fixture.componentInstance.viewDate = new Date('2017-01-01');\n fixture.componentInstance.ngOnChanges({ events: {}, viewDate: {} });\n fixture.detectChanges();\n stub.restore();\n expect(stub).to.have.been.calledOnce; // eslint-disable-line\n });\n\n it('should only call the beforeViewRender output once when refreshing the view', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.refresh = new Subject();\n fixture.componentInstance.ngOnInit();\n fixture.componentInstance.viewDate = new Date('2016-06-27');\n const beforeViewRenderCalled = sinon.spy();\n // use subscription to test that it was only called a max of one times\n const subscription = fixture.componentInstance.beforeViewRender.subscribe(\n beforeViewRenderCalled\n );\n fixture.componentInstance.refresh.next(true);\n expect(beforeViewRenderCalled).to.have.been.calledOnce;\n subscription.unsubscribe();\n fixture.destroy();\n });\n\n it('should only call the beforeViewRender output once when changing the view date', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.ngOnInit();\n fixture.componentInstance.viewDate = new Date('2016-06-27');\n fixture.componentInstance.ngOnChanges({ viewDate: {} });\n const beforeViewRenderCalled = sinon.spy();\n // use subscription to test that it was only called a max of one times\n const subscription = fixture.componentInstance.beforeViewRender.subscribe(\n beforeViewRenderCalled\n );\n fixture.componentInstance.viewDate = new Date('2016-06-28');\n fixture.componentInstance.ngOnChanges({ viewDate: {} });\n expect(beforeViewRenderCalled).to.have.been.calledOnce;\n subscription.unsubscribe();\n fixture.destroy();\n });\n\n it('should expose the view period on the beforeViewRender output', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n const beforeViewRenderCalled = sinon.spy();\n fixture.componentInstance.beforeViewRender\n .pipe(take(1))\n .subscribe(beforeViewRenderCalled);\n fixture.componentInstance.ngOnInit();\n fixture.componentInstance.viewDate = new Date('2016-06-27');\n fixture.componentInstance.ngOnChanges({ viewDate: {} });\n const data = beforeViewRenderCalled.getCall(0).args[0];\n expect(data.period.start).to.be.an.instanceOf(Date);\n expect(data.period.end).to.be.an.instanceOf(Date);\n expect(Array.isArray(data.period.events)).to.equal(true);\n expect(Array.isArray(data.allDayEventRows)).to.be.true;\n expect(Array.isArray(data.hourColumns)).to.be.true;\n });\n\n it('should add event actions to each event', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2016-06-27');\n const eventClicked = sinon.spy();\n fixture.componentInstance.eventClicked.subscribe(eventClicked);\n fixture.componentInstance.events = [\n {\n start: new Date('2016-06-26'),\n end: new Date('2016-06-28'),\n title: 'foo',\n actions: [\n {\n label: '<i class=\"fa fa-fw fa-times\"></i>',\n onClick: sinon.spy(),\n cssClass: 'foo',\n },\n ],\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n const action: HTMLElement = fixture.nativeElement.querySelector(\n '.cal-event .cal-event-action'\n );\n expect(action.innerHTML).to.equal('<i class=\"fa fa-fw fa-times\"></i>');\n expect(action.classList.contains('foo')).to.equal(true);\n action.querySelector('i').click();\n const actionSpy = fixture.componentInstance.events[0].actions[0]\n .onClick as sinon.SinonSpy;\n expect(actionSpy.getCall(0).args[0].event).to.equal(\n fixture.componentInstance.events[0]\n );\n expect(actionSpy.getCall(0).args[0].sourceEvent instanceof MouseEvent).to.be\n .true;\n expect(eventClicked).not.to.have.been.called;\n });\n\n it('should make a 4 day week', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2018-07-29');\n fixture.componentInstance.daysInWeek = 4;\n fixture.componentInstance.events = [\n {\n start: new Date('2018-07-29'),\n title: 'foo',\n allDay: true,\n },\n ];\n fixture.componentInstance.ngOnChanges({\n daysInWeek: {},\n events: {},\n viewDate: {},\n });\n fixture.detectChanges();\n expect(\n fixture.nativeElement.querySelectorAll('.cal-header').length\n ).to.equal(4);\n expect(\n fixture.nativeElement.querySelectorAll(\n '.cal-all-day-events .cal-day-column'\n ).length\n ).to.equal(4);\n expect(\n fixture.nativeElement.querySelectorAll('.cal-time-events .cal-day-column')\n .length\n ).to.equal(4);\n });\n\n it('should resize a time event from the end to another day on the right', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2018-07-29');\n fixture.componentInstance.events = [\n {\n start: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(3, 'hours')\n .toDate(),\n end: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(18, 'hours')\n .toDate(),\n title: 'foo',\n resizable: {\n afterEnd: true,\n },\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event: HTMLElement = fixture.nativeElement.querySelector(\n '.cal-event-container'\n );\n const dayWidth: number = event.parentElement.offsetWidth;\n const rect: ClientRect = event.getBoundingClientRect();\n const resizeHandle = event.querySelector('.cal-resize-handle-after-end');\n let resizeEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n resizeEvent = e;\n });\n triggerDomEvent('mousedown', resizeHandle, {\n clientX: rect.right,\n clientY: rect.bottom,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', document.body, {\n clientX: rect.right + dayWidth,\n clientY: rect.bottom + 90,\n });\n fixture.detectChanges();\n expect(event.getBoundingClientRect().top).to.equal(rect.top);\n expect(event.getBoundingClientRect().height).to.equal(1259);\n const events = fixture.nativeElement.querySelectorAll(\n '.cal-event-container'\n );\n expect(events[0]).to.equal(event);\n expect(events[1].getBoundingClientRect().top).to.equal(rect.top - 180);\n expect(events[1].getBoundingClientRect().height).to.equal(1170);\n triggerDomEvent('mouseup', document.body, {\n clientX: rect.right + dayWidth,\n clientY: rect.bottom + 90,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(resizeEvent).to.deep.equal({\n type: 'resize',\n event: fixture.componentInstance.events[0],\n newStart: fixture.componentInstance.events[0].start,\n newEnd: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(1, 'day')\n .add(19, 'hours')\n .add(30, 'minutes')\n .toDate(),\n });\n });\n\n it('should control resizing time events', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2018-07-29');\n fixture.componentInstance.events = [\n {\n start: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(3, 'hours')\n .toDate(),\n end: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(18, 'hours')\n .toDate(),\n title: 'foo',\n resizable: {\n afterEnd: true,\n },\n },\n ];\n const validateEventTimesChanged = sinon\n .stub()\n .onFirstCall()\n .returns(true)\n .onSecondCall()\n .returns(false);\n fixture.componentInstance.validateEventTimesChanged =\n validateEventTimesChanged;\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event: HTMLElement = fixture.nativeElement.querySelector(\n '.cal-event-container'\n );\n const dayWidth: number = event.parentElement.offsetWidth;\n const rect: ClientRect = event.getBoundingClientRect();\n const resizeHandle = event.querySelector('.cal-resize-handle-after-end');\n let resizeEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n resizeEvent = e;\n });\n triggerDomEvent('mousedown', resizeHandle, {\n clientX: rect.right,\n clientY: rect.bottom,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', document.body, {\n clientX: rect.right,\n clientY: rect.bottom + 90,\n });\n fixture.detectChanges();\n expect(event.getBoundingClientRect().top).to.equal(rect.top);\n expect(event.getBoundingClientRect().height).to.equal(rect.height + 90);\n triggerDomEvent('mousemove', document.body, {\n clientX: rect.right,\n clientY: rect.bottom + 180,\n });\n fixture.detectChanges();\n expect(event.getBoundingClientRect().top).to.equal(rect.top);\n expect(event.getBoundingClientRect().height).to.equal(rect.height + 90);\n triggerDomEvent('mouseup', document.body, {\n clientX: rect.right + dayWidth,\n clientY: rect.bottom + 180,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(resizeEvent).to.deep.equal({\n type: 'resize',\n event: fixture.componentInstance.events[0],\n newStart: fixture.componentInstance.events[0].start,\n newEnd: moment(fixture.componentInstance.events[0].end)\n .add(90, 'minutes')\n .toDate(),\n });\n expect(validateEventTimesChanged).to.have.been.calledTwice;\n expect(validateEventTimesChanged.getCall(0).args[0]).to.deep.equal({\n type: 'resize',\n event: fixture.componentInstance.events[0],\n newStart: fixture.componentInstance.events[0].start,\n newEnd: moment(fixture.componentInstance.events[0].end)\n .add(90, 'minutes')\n .toDate(),\n });\n expect(validateEventTimesChanged.getCall(1).args[0]).to.deep.equal({\n type: 'resize',\n event: fixture.componentInstance.events[0],\n newStart: fixture.componentInstance.events[0].start,\n newEnd: moment(fixture.componentInstance.events[0].end)\n .add(180, 'minutes')\n .toDate(),\n });\n });\n\n it('should resize a time event from the end to another day on the left when using rtl', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.nativeElement.setAttribute('dir', 'rtl');\n fixture.componentInstance.viewDate = new Date('2018-07-29');\n fixture.componentInstance.events = [\n {\n start: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(3, 'hours')\n .toDate(),\n end: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(18, 'hours')\n .toDate(),\n title: 'foo',\n resizable: {\n afterEnd: true,\n },\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event: HTMLElement = fixture.nativeElement.querySelector(\n '.cal-event-container'\n );\n const dayWidth: number = event.parentElement.offsetWidth;\n const rect: ClientRect = event.getBoundingClientRect();\n const resizeHandle = event.querySelector('.cal-resize-handle-after-end');\n let resizeEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n resizeEvent = e;\n });\n triggerDomEvent('mousedown', resizeHandle, {\n clientX: rect.right,\n clientY: rect.bottom,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', document.body, {\n clientX: rect.right - dayWidth,\n clientY: rect.bottom,\n });\n fixture.detectChanges();\n triggerDomEvent('mouseup', document.body, {\n clientX: rect.right + dayWidth,\n clientY: rect.bottom + 90,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(resizeEvent).to.deep.equal({\n type: 'resize',\n event: fixture.componentInstance.events[0],\n newStart: fixture.componentInstance.events[0].start,\n newEnd: moment(fixture.componentInstance.events[0].end)\n .add(1, 'day')\n .toDate(),\n });\n });\n\n it('should resize a time event from the end to another day on the left', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2018-07-29');\n fixture.componentInstance.events = [\n {\n start: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(3, 'hours')\n .toDate(),\n end: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(1, 'day')\n .add(19, 'hours')\n .add(30, 'minutes')\n .toDate(),\n title: 'foo',\n resizable: {\n afterEnd: true,\n },\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event: HTMLElement = fixture.nativeElement.querySelectorAll(\n '.cal-event-container'\n )[1];\n const dayWidth: number = event.parentElement.offsetWidth;\n const rect: ClientRect = event.getBoundingClientRect();\n const resizeHandle = event.querySelector('.cal-resize-handle-after-end');\n let resizeEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n resizeEvent = e;\n });\n triggerDomEvent('mousedown', resizeHandle, {\n clientX: rect.right,\n clientY: rect.bottom,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', document.body, {\n clientX: rect.right - dayWidth,\n clientY: rect.bottom - 90,\n });\n fixture.detectChanges();\n expect(event.getBoundingClientRect().width).to.equal(0);\n expect(event.getBoundingClientRect().height).to.equal(0);\n const events = fixture.nativeElement.querySelectorAll(\n '.cal-event-container'\n );\n expect(events[1]).to.equal(event);\n expect(events[0].getBoundingClientRect().top).to.equal(rect.top + 180);\n expect(events[0].getBoundingClientRect().height).to.equal(900);\n triggerDomEvent('mouseup', document.body, {\n clientX: rect.right - dayWidth,\n clientY: rect.bottom - 90,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(resizeEvent).to.deep.equal({\n type: 'resize',\n event: fixture.componentInstance.events[0],\n newStart: fixture.componentInstance.events[0].start,\n newEnd: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(18, 'hours')\n .toDate(),\n });\n });\n\n it('should resize a time event from the end to another day on the right when using rtl', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.nativeElement.setAttribute('dir', 'rtl');\n fixture.componentInstance.viewDate = new Date('2018-07-29');\n fixture.componentInstance.events = [\n {\n start: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(3, 'hours')\n .toDate(),\n end: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(1, 'day')\n .add(19, 'hours')\n .add(30, 'minutes')\n .toDate(),\n title: 'foo',\n resizable: {\n afterEnd: true,\n },\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event: HTMLElement = fixture.nativeElement.querySelectorAll(\n '.cal-event-container'\n )[1];\n const dayWidth: number = event.parentElement.offsetWidth;\n const rect: ClientRect = event.getBoundingClientRect();\n const resizeHandle = event.querySelector('.cal-resize-handle-after-end');\n let resizeEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n resizeEvent = e;\n });\n triggerDomEvent('mousedown', resizeHandle, {\n clientX: rect.right,\n clientY: rect.bottom,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', document.body, {\n clientX: rect.right + dayWidth,\n clientY: rect.bottom,\n });\n fixture.detectChanges();\n triggerDomEvent('mouseup', document.body, {\n clientX: rect.right + dayWidth,\n clientY: rect.bottom,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(resizeEvent).to.deep.equal({\n type: 'resize',\n event: fixture.componentInstance.events[0],\n newStart: fixture.componentInstance.events[0].start,\n newEnd: moment(fixture.componentInstance.events[0].end)\n .subtract(1, 'day')\n .toDate(),\n });\n });\n\n it('should resize a time event from the end and not allow it to end before it starts', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2018-07-29');\n fixture.componentInstance.events = [\n {\n start: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(3, 'hours')\n .toDate(),\n end: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(1, 'day')\n .add(19, 'hours')\n .add(30, 'minutes')\n .toDate(),\n title: 'foo',\n resizable: {\n afterEnd: true,\n },\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event: HTMLElement = fixture.nativeElement.querySelectorAll(\n '.cal-event-container'\n )[1];\n const dayWidth: number = event.parentElement.offsetWidth;\n const rect: ClientRect = event.getBoundingClientRect();\n const resizeHandle = event.querySelector('.cal-resize-handle-after-end');\n let resizeEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n resizeEvent = e;\n });\n triggerDomEvent('mousedown', resizeHandle, {\n clientX: rect.right,\n clientY: rect.bottom,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', document.body, {\n clientX: rect.right - dayWidth angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json 2,\n clientY: rect.bottom - 1000,\n });\n fixture.detectChanges();\n expect(event.getBoundingClientRect().width).to.equal(0);\n expect(event.getBoundingClientRect().height).to.equal(0);\n const events = fixture.nativeElement.querySelectorAll(\n '.cal-event-container'\n );\n expect(events[1]).to.equal(event);\n expect(events[0].getBoundingClientRect().top).to.equal(rect.top + 180);\n expect(events[0].getBoundingClientRect().height).to.equal(30);\n triggerDomEvent('mouseup', document.body, {\n clientX: rect.right - dayWidth angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json 2,\n clientY: rect.bottom - 1000,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(resizeEvent).to.deep.equal({\n type: 'resize',\n event: fixture.componentInstance.events[0],\n newStart: fixture.componentInstance.events[0].start,\n newEnd: moment(fixture.componentInstance.events[0].start)\n .add(30, 'minutes')\n .toDate(),\n });\n });\n\n it('should resize a time event from the start to another day on the left', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2018-07-30');\n fixture.componentInstance.events = [\n {\n start: moment(new Date('2018-07-30'))\n .startOf('day')\n .add(3, 'hours')\n .toDate(),\n end: moment(new Date('2018-07-30'))\n .startOf('day')\n .add(18, 'hours')\n .toDate(),\n title: 'foo',\n resizable: {\n beforeStart: true,\n },\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event: HTMLElement = fixture.nativeElement.querySelector(\n '.cal-event-container'\n );\n const dayWidth: number = event.parentElement.offsetWidth;\n const rect: ClientRect = event.getBoundingClientRect();\n const resizeHandle = event.querySelector('.cal-resize-handle-before-start');\n let resizeEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n resizeEvent = e;\n });\n triggerDomEvent('mousedown', resizeHandle, {\n clientX: rect.left,\n clientY: rect.top,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', document.body, {\n clientX: rect.left - dayWidth,\n clientY: rect.top - 90,\n });\n fixture.detectChanges();\n expect(event.getBoundingClientRect().top).to.equal(rect.top - 180);\n expect(event.getBoundingClientRect().height).to.equal(rect.height + 180);\n const events = fixture.nativeElement.querySelectorAll(\n '.cal-event-container'\n );\n expect(events[1]).to.equal(event);\n expect(events[0].getBoundingClientRect().top).to.equal(rect.top - 90);\n expect(events[0].getBoundingClientRect().height).to.equal(1349);\n triggerDomEvent('mouseup', document.body, {\n clientX: rect.left - dayWidth,\n clientY: rect.top - 90,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(resizeEvent).to.deep.equal({\n type: 'resize',\n event: fixture.componentInstance.events[0],\n newStart: moment(fixture.componentInstance.events[0].start)\n .subtract(1, 'days')\n .subtract(90, 'minutes')\n .toDate(),\n newEnd: fixture.componentInstance.events[0].end,\n });\n });\n\n it('should resize a time event from the start to another day on the right', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2018-07-30');\n fixture.componentInstance.events = [\n {\n start: moment(new Date('2018-07-30'))\n .startOf('day')\n .add(3, 'hours')\n .subtract(1, 'days')\n .subtract(90, 'minutes')\n .toDate(),\n end: moment(new Date('2018-07-30'))\n .startOf('day')\n .add(18, 'hours')\n .toDate(),\n title: 'foo',\n resizable: {\n beforeStart: true,\n },\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event: HTMLElement = fixture.nativeElement.querySelector(\n '.cal-event-container'\n );\n const dayWidth: number = event.parentElement.offsetWidth;\n const rect: ClientRect = event.getBoundingClientRect();\n const resizeHandle = event.querySelector('.cal-resize-handle-before-start');\n let resizeEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n resizeEvent = e;\n });\n triggerDomEvent('mousedown', resizeHandle, {\n clientX: rect.left,\n clientY: rect.top,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', document.body, {\n clientX: rect.left + dayWidth,\n clientY: rect.top + 90,\n });\n fixture.detectChanges();\n expect(event.getBoundingClientRect().width).to.equal(0);\n expect(event.getBoundingClientRect().height).to.equal(0);\n const events = fixture.nativeElement.querySelectorAll(\n '.cal-event-container'\n );\n expect(events[0]).to.equal(event);\n expect(events[1].getBoundingClientRect().top).to.equal(rect.top + 90);\n expect(events[1].getBoundingClientRect().height).to.equal(900);\n triggerDomEvent('mouseup', document.body, {\n clientX: rect.left + dayWidth,\n clientY: rect.top + 90,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(resizeEvent).to.deep.equal({\n type: 'resize',\n event: fixture.componentInstance.events[0],\n newStart: moment(new Date('2018-07-30'))\n .startOf('day')\n .add(3, 'hours')\n .toDate(),\n newEnd: fixture.componentInstance.events[0].end,\n });\n });\n\n it('should resize a time event and not allow it to start after it ends', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2018-07-30');\n fixture.componentInstance.events = [\n {\n start: moment(new Date('2018-07-30'))\n .startOf('day')\n .add(3, 'hours')\n .subtract(1, 'days')\n .subtract(90, 'minutes')\n .toDate(),\n end: moment(new Date('2018-07-30'))\n .startOf('day')\n .add(18, 'hours')\n .toDate(),\n title: 'foo',\n resizable: {\n beforeStart: true,\n },\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event: HTMLElement = fixture.nativeElement.querySelector(\n '.cal-event-container'\n );\n const dayWidth: number = event.parentElement.offsetWidth;\n const rect: ClientRect = event.getBoundingClientRect();\n const resizeHandle = event.querySelector('.cal-resize-handle-before-start');\n let resizeEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n resizeEvent = e;\n });\n triggerDomEvent('mousedown', resizeHandle, {\n clientX: rect.left,\n clientY: rect.top,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', document.body, {\n clientX: rect.left + dayWidth angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json 2,\n clientY: rect.top + 90,\n });\n fixture.detectChanges();\n expect(event.getBoundingClientRect().width).to.equal(0);\n expect(event.getBoundingClientRect().height).to.equal(0);\n const events = fixture.nativeElement.querySelectorAll(\n '.cal-event-container'\n );\n expect(events[0]).to.equal(event);\n // locally the top comes out as 1107 but on the CI it's 1106\n expect(events[1].getBoundingClientRect().top).to.closeTo(1106, 1);\n expect(events[1].getBoundingClientRect().height).to.equal(30);\n triggerDomEvent('mouseup', document.body, {\n clientX: rect.left + dayWidth angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json 2,\n clientY: rect.top + 90,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(resizeEvent).to.deep.equal({\n type: 'resize',\n event: fixture.componentInstance.events[0],\n newStart: moment(fixture.componentInstance.events[0].end)\n .subtract(30, 'minutes')\n .toDate(),\n newEnd: fixture.componentInstance.events[0].end,\n });\n });\n\n it('should drag time events to different days and columns while snapping to a grid', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2018-07-29');\n fixture.componentInstance.events = [\n {\n start: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(3, 'hours')\n .toDate(),\n end: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(1, 'day')\n .add(18, 'hours')\n .toDate(),\n title: 'foo',\n draggable: true,\n },\n {\n start: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(3, 'days')\n .toDate(),\n title: 'bar',\n draggable: true,\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const events = fixture.nativeElement.querySelectorAll(\n '.cal-event-container'\n );\n const dayWidth: number = events[0].parentElement.offsetWidth;\n const rect1: ClientRect = events[0].getBoundingClientRect();\n const rect2: ClientRect = events[1].getBoundingClientRect();\n let dragEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n dragEvent = e;\n });\n triggerDomEvent('mousedown', events[1], {\n clientX: rect2.right,\n clientY: rect2.bottom,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', events[1], {\n clientX: rect2.right + dayWidth - 5,\n clientY: rect2.bottom + 95,\n });\n fixture.detectChanges();\n expect(events[0].getBoundingClientRect().height).to.equal(0);\n expect(events[0].getBoundingClientRect().width).to.equal(0);\n const updatedEvents = fixture.nativeElement.querySelectorAll(\n '.cal-event-container'\n );\n expect(updatedEvents[0]).to.equal(events[0]);\n expect(updatedEvents[1].getBoundingClientRect().top).to.equal(\n rect1.top + 90\n );\n expect(updatedEvents[1].getBoundingClientRect().height).to.equal(\n rect1.height - 90\n );\n expect(updatedEvents[2].getBoundingClientRect().top).to.equal(rect2.top);\n expect(updatedEvents[2].getBoundingClientRect().height).to.equal(\n rect2.height + 90\n );\n triggerDomEvent('mouseup', events[1], {\n clientX: rect2.right + dayWidth - 5,\n clientY: rect2.bottom + 95,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(dragEvent).to.deep.equal({\n type: 'drag',\n allDay: false,\n event: fixture.componentInstance.events[0],\n newStart: moment(fixture.componentInstance.events[0].start)\n .add(1, 'day')\n .add(1, 'hour')\n .add(30, 'minutes')\n .toDate(),\n newEnd: moment(fixture.componentInstance.events[0].end)\n .add(1, 'day')\n .add(1, 'hour')\n .add(30, 'minutes')\n .toDate(),\n });\n });\n\n it('should control dragging time events', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2018-07-29');\n fixture.componentInstance.events = [\n {\n start: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(3, 'hours')\n .toDate(),\n end: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(1, 'day')\n .add(18, 'hours')\n .toDate(),\n title: 'foo',\n draggable: true,\n },\n ];\n const validateEventTimesChanged = sinon\n .stub()\n .onFirstCall()\n .returns(true)\n .onSecondCall()\n .returns(false);\n fixture.componentInstance.validateEventTimesChanged =\n validateEventTimesChanged;\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event = fixture.nativeElement.querySelector('.cal-event-container');\n const rect: ClientRect = event.getBoundingClientRect();\n let dragEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n dragEvent = e;\n });\n triggerDomEvent('mousedown', event, {\n clientX: rect.right,\n clientY: rect.bottom,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', event, {\n clientX: rect.right,\n clientY: rect.bottom,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', event, {\n clientX: rect.right,\n clientY: rect.bottom + 95,\n });\n fixture.detectChanges();\n expect(event.getBoundingClientRect().top).to.equal(rect.top + 90);\n triggerDomEvent('mousemove', event, {\n clientX: rect.right,\n clientY: rect.bottom + 180,\n });\n fixture.detectChanges();\n expect(event.getBoundingClientRect().top).to.equal(rect.top + 90);\n triggerDomEvent('mouseup', event, {\n clientX: rect.right,\n clientY: rect.bottom + 180,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(dragEvent).to.deep.equal({\n type: 'drag',\n allDay: false,\n event: fixture.componentInstance.events[0],\n newStart: moment(fixture.componentInstance.events[0].start)\n .add(90, 'minutes')\n .toDate(),\n newEnd: moment(fixture.componentInstance.events[0].end)\n .add(90, 'minutes')\n .toDate(),\n });\n expect(validateEventTimesChanged).to.have.been.calledTwice;\n expect(validateEventTimesChanged.getCall(0).args[0]).to.deep.equal({\n type: 'drag',\n event: fixture.componentInstance.events[0],\n newStart: moment(fixture.componentInstance.events[0].start)\n .add(90, 'minutes')\n .toDate(),\n newEnd: moment(fixture.componentInstance.events[0].end)\n .add(90, 'minutes')\n .toDate(),\n });\n expect(validateEventTimesChanged.getCall(1).args[0]).to.deep.equal({\n type: 'drag',\n event: fixture.componentInstance.events[0],\n newStart: moment(fixture.componentInstance.events[0].start)\n .add(180, 'minutes')\n .toDate(),\n newEnd: moment(fixture.componentInstance.events[0].end)\n .add(180, 'minutes')\n .toDate(),\n });\n });\n\n it('should drag time events back to their original position while snapping to a grid', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2018-07-29');\n const originalEvent = {\n start: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(3, 'hours')\n .toDate(),\n end: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(5, 'hours')\n .toDate(),\n title: 'foo',\n draggable: true,\n };\n fixture.componentInstance.events = [originalEvent];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event = fixture.nativeElement.querySelector('.cal-event-container');\n const rect: ClientRect = event.getBoundingClientRect();\n let dragEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n dragEvent = e;\n });\n triggerDomEvent('mousedown', event, {\n clientX: rect.right,\n clientY: rect.bottom,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', event, {\n clientX: rect.right,\n clientY: rect.bottom + 95,\n });\n fixture.detectChanges();\n const updatedEvent1 = fixture.nativeElement.querySelector(\n '.cal-event-container'\n );\n expect(updatedEvent1.getBoundingClientRect().top).to.equal(rect.top + 90);\n triggerDomEvent('mousemove', event, {\n clientX: rect.right,\n clientY: rect.bottom,\n });\n fixture.detectChanges();\n const updatedEvent2 = fixture.nativeElement.querySelector(\n '.cal-event-container'\n );\n expect(updatedEvent2.getBoundingClientRect().top).to.equal(rect.top);\n triggerDomEvent('mouseup', event, {\n clientX: rect.right,\n clientY: rect.bottom,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(dragEvent.newStart).to.deep.equal(originalEvent.start);\n expect(dragEvent.newEnd).to.deep.equal(originalEvent.end);\n });\n\n it('should drag time events without end dates', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2018-07-29');\n fixture.componentInstance.events = [\n {\n start: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(3, 'hours')\n .toDate(),\n title: 'foo',\n draggable: true,\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event = fixture.nativeElement.querySelector('.cal-event-container');\n const dayWidth: number = event.parentElement.offsetWidth;\n const rect: ClientRect = event.getBoundingClientRect();\n let dragEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n dragEvent = e;\n });\n triggerDomEvent('mousedown', event, {\n clientX: rect.right,\n clientY: rect.bottom,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', event, {\n clientX: rect.right + dayWidth - 5,\n clientY: rect.bottom + 95,\n });\n fixture.detectChanges();\n expect(event.getBoundingClientRect().height).to.equal(0);\n expect(event.getBoundingClientRect().width).to.equal(0);\n const updatedEvents = fixture.nativeElement.querySelectorAll(\n '.cal-event-container'\n );\n expect(updatedEvents[0]).to.equal(event);\n expect(updatedEvents[1].getBoundingClientRect().top).to.equal(\n rect.top + 90\n );\n expect(updatedEvents[1].getBoundingClientRect().height).to.equal(\n rect.height\n );\n triggerDomEvent('mouseup', event, {\n clientX: rect.right + dayWidth - 5,\n clientY: rect.bottom + 95,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(dragEvent).to.deep.equal({\n type: 'drag',\n allDay: false,\n event: fixture.componentInstance.events[0],\n newStart: moment(fixture.componentInstance.events[0].start)\n .add(1, 'day')\n .add(1, 'hour')\n .add(30, 'minutes')\n .toDate(),\n newEnd: undefined,\n });\n });\n\n it('should drag time events to different days and columns while not snapping to a grid', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2018-07-29');\n fixture.componentInstance.events = [\n {\n start: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(3, 'hours')\n .toDate(),\n end: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(1, 'day')\n .add(18, 'hours')\n .toDate(),\n title: 'foo',\n draggable: true,\n },\n ];\n fixture.componentInstance.snapDraggedEvents = false;\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const events = fixture.nativeElement.querySelectorAll(\n '.cal-event-container'\n );\n const dayWidth: number = events[0].parentElement.offsetWidth;\n const rect: ClientRect = events[0].getBoundingClientRect();\n let dragEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n dragEvent = e;\n });\n triggerDomEvent('mousedown', events[0], {\n clientX: rect.left,\n clientY: rect.top,\n button: 0,\n });\n fixture.detectChanges();\n const timeEvents = fixture.nativeElement.querySelector('.cal-time-events');\n triggerDomEvent('mousemove', timeEvents, {\n clientX: rect.left + dayWidth - 5,\n clientY: rect.top + 95,\n });\n fixture.detectChanges();\n triggerDomEvent('mouseup', timeEvents, {\n clientX: rect.left + dayWidth - 5,\n clientY: rect.top + 95,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(dragEvent).to.deep.equal({\n type: 'drag',\n allDay: false,\n event: fixture.componentInstance.events[0],\n newStart: moment(fixture.componentInstance.events[0].start)\n .add(1, 'day')\n .add(1, 'hour')\n .add(30, 'minutes')\n .toDate(),\n newEnd: moment(fixture.componentInstance.events[0].end)\n .add(1, 'day')\n .add(1, 'hour')\n .add(30, 'minutes')\n .toDate(),\n });\n });\n\n it('should drag time events back to their original position while not snapping to a grid', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2018-07-29');\n const originalEvent = {\n start: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(3, 'hours')\n .toDate(),\n end: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(5, 'hours')\n .toDate(),\n title: 'foo',\n draggable: true,\n };\n fixture.componentInstance.events = [originalEvent];\n fixture.componentInstance.snapDraggedEvents = false;\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event = fixture.nativeElement.querySelector('.cal-event-container');\n const rect: ClientRect = event.getBoundingClientRect();\n let dragEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n dragEvent = e;\n });\n triggerDomEvent('mousedown', event, {\n clientX: rect.left,\n clientY: rect.top,\n button: 0,\n });\n const timeEvents = fixture.nativeElement.querySelector('.cal-time-events');\n fixture.detectChanges();\n triggerDomEvent('mousemove', timeEvents, {\n clientX: rect.left,\n clientY: rect.top + 95,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', timeEvents, {\n clientX: rect.left,\n clientY: rect.top,\n });\n fixture.detectChanges();\n triggerDomEvent('mouseup', timeEvents, {\n clientX: rect.left,\n clientY: rect.top,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(dragEvent.newStart).to.deep.equal(originalEvent.start);\n expect(dragEvent.newEnd).to.deep.equal(originalEvent.end);\n });\n\n it('should drag an all day event onto the time grid', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2018-07-29');\n fixture.componentInstance.events = [\n {\n start: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(1, 'days')\n .add(3, 'hours')\n .toDate(),\n end: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(2, 'days')\n .add(18, 'hours')\n .toDate(),\n title: 'foo',\n draggable: true,\n allDay: true,\n },\n ];\n fixture.componentInstance.snapDraggedEvents = false;\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event = fixture.nativeElement.querySelector('.cal-event-container');\n const rect: ClientRect = event.getBoundingClientRect();\n let dragEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n dragEvent = e;\n });\n triggerDomEvent('mousedown', event, {\n clientX: rect.left,\n clientY: rect.top,\n button: 0,\n });\n fixture.detectChanges();\n const hourSegment = fixture.nativeElement.querySelectorAll(\n '.cal-day-columns mwl-calendar-week-view-hour-segment'\n )[3];\n const hourSegmentPosition = hourSegment.getBoundingClientRect();\n triggerDomEvent('mousemove', hourSegment, {\n clientX: hourSegmentPosition.left + 1,\n clientY: hourSegmentPosition.top + 1,\n });\n fixture.detectChanges();\n triggerDomEvent('mouseup', hourSegment, {\n clientX: hourSegmentPosition.left + 1,\n clientY: hourSegmentPosition.top + 1,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(dragEvent).to.deep.equal({\n type: 'drop',\n allDay: false,\n event: fixture.componentInstance.events[0],\n newStart: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(90, 'minutes')\n .toDate(),\n });\n });\n\n it('should drag a time event onto the all day grid', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2018-07-29');\n fixture.componentInstance.events = [\n {\n start: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(1, 'days')\n .add(3, 'hours')\n .toDate(),\n end: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(2, 'days')\n .add(18, 'hours')\n .toDate(),\n title: 'foo',\n draggable: true,\n allDay: false,\n },\n {\n start: moment(new Date('2018-07-29')).startOf('day').toDate(),\n allDay: true,\n title: 'bar',\n },\n ];\n fixture.componentInstance.snapDraggedEvents = false;\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event = fixture.nativeElement.querySelector(\n '.cal-time-events .cal-event-container'\n );\n const rect: ClientRect = event.getBoundingClientRect();\n let dragEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n dragEvent = e;\n });\n triggerDomEvent('mousedown', event, {\n clientX: rect.left,\n clientY: rect.top,\n button: 0,\n });\n fixture.detectChanges();\n const dayColumn = fixture.nativeElement.querySelectorAll(\n '.cal-all-day-events .cal-day-column'\n )[2];\n const dayColumnPosition = dayColumn.getBoundingClientRect();\n triggerDomEvent('mousemove', dayColumn, {\n clientX: dayColumnPosition.left + 1,\n clientY: dayColumnPosition.top + 1,\n });\n fixture.detectChanges();\n triggerDomEvent('mouseup', dayColumn, {\n clientX: dayColumnPosition.left + 1,\n clientY: dayColumnPosition.top + 1,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(dragEvent).to.deep.equal({\n type: 'drop',\n allDay: true,\n event: fixture.componentInstance.events[0],\n newStart: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(2, 'days')\n .toDate(),\n });\n });\n\n it('should handle time event objects changing when resizing', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2018-07-29');\n fixture.componentInstance.events = [\n {\n id: '1',\n start: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(3, 'hours')\n .toDate(),\n end: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(18, 'hours')\n .toDate(),\n title: 'foo',\n resizable: {\n afterEnd: true,\n },\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event: HTMLElement = fixture.nativeElement.querySelector(\n '.cal-event-container'\n );\n const dayWidth: number = event.parentElement.offsetWidth;\n const rect: ClientRect = event.getBoundingClientRect();\n const resizeHandle = event.querySelector('.cal-resize-handle-after-end');\n let resizeEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n resizeEvent = e;\n });\n triggerDomEvent('mousedown', resizeHandle, {\n clientX: rect.right,\n clientY: rect.bottom,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', document.body, {\n clientX: rect.right + dayWidth,\n clientY: rect.bottom + 90,\n });\n fixture.detectChanges();\n fixture.componentInstance.events = [\n {\n ...fixture.componentInstance.events[0],\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n triggerDomEvent('mouseup', document.body, {\n clientX: rect.right + dayWidth,\n clientY: rect.bottom + 90,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n });\n\n it('should drag time events to different days and columns while snapping to a grid and excluding weekends', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2019-03-01');\n fixture.componentInstance.excludeDays = [0, 6];\n fixture.componentInstance.daysInWeek = 4;\n fixture.componentInstance.events = [\n {\n start: moment(new Date('2019-03-01'))\n .startOf('day')\n .add(3, 'hours')\n .toDate(),\n end: moment(new Date('2019-03-01'))\n .startOf('day')\n .add(18, 'hours')\n .toDate(),\n title: 'foo',\n draggable: true,\n },\n ];\n fixture.componentInstance.ngOnChanges({\n viewDate: {},\n events: {},\n excludeDays: {},\n daysInWeek: {},\n });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const events = fixture.nativeElement.querySelectorAll(\n '.cal-event-container'\n );\n const dayWidth: number = events[0].parentElement.offsetWidth;\n const rect1: ClientRect = events[0].getBoundingClientRect();\n let dragEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n dragEvent = e;\n });\n triggerDomEvent('mousedown', events[0], {\n clientX: rect1.right,\n clientY: rect1.bottom,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', events[0], {\n clientX: rect1.right + dayWidth - 5,\n clientY: rect1.bottom + 95,\n });\n fixture.detectChanges();\n triggerDomEvent('mouseup', events[0], {\n clientX: rect1.right + dayWidth - 5,\n clientY: rect1.bottom + 95,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(dragEvent).to.deep.equal({\n type: 'drag',\n allDay: false,\n event: fixture.componentInstance.events[0],\n newStart: moment(fixture.componentInstance.events[0].start)\n .add(3, 'days')\n .add(1, 'hour')\n .add(30, 'minutes')\n .toDate(),\n newEnd: moment(fixture.componentInstance.events[0].end)\n .add(3, 'days')\n .add(1, 'hour')\n .add(30, 'minutes')\n .toDate(),\n });\n });\n\n it('should drag time events to different days and columns when rtl is enabled', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.nativeElement.setAttribute('dir', 'rtl');\n fixture.componentInstance.viewDate = new Date('2019-03-01');\n fixture.componentInstance.events = [\n {\n start: moment(new Date('2019-03-01'))\n .startOf('day')\n .add(3, 'hours')\n .toDate(),\n end: moment(new Date('2019-03-01'))\n .startOf('day')\n .add(18, 'hours')\n .toDate(),\n title: 'foo',\n draggable: true,\n },\n ];\n fixture.componentInstance.ngOnChanges({\n viewDate: {},\n events: {},\n excludeDays: {},\n daysInWeek: {},\n });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const events = fixture.nativeElement.querySelectorAll(\n '.cal-event-container'\n );\n const dayWidth: number = events[0].parentElement.offsetWidth;\n const rect1: ClientRect = events[0].getBoundingClientRect();\n let dragEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n dragEvent = e;\n });\n triggerDomEvent('mousedown', events[0], {\n clientX: rect1.right,\n clientY: rect1.bottom,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', events[0], {\n clientX: rect1.right + dayWidth,\n clientY: rect1.bottom,\n });\n fixture.detectChanges();\n triggerDomEvent('mouseup', events[0], {\n clientX: rect1.right + dayWidth,\n clientY: rect1.bottom,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(dragEvent).to.deep.equal({\n type: 'drag',\n allDay: false,\n event: fixture.componentInstance.events[0],\n newStart: moment(fixture.componentInstance.events[0].start)\n .subtract(1, 'days')\n .toDate(),\n newEnd: moment(fixture.componentInstance.events[0].end)\n .subtract(1, 'days')\n .toDate(),\n });\n });\n\n it('should drag time events to different days and columns while snapping to a grid and excluding weekends with custom hour duration', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2019-03-01');\n fixture.componentInstance.excludeDays = [0, 6];\n fixture.componentInstance.daysInWeek = 4;\n fixture.componentInstance.events = [\n {\n start: moment(new Date('2019-03-01'))\n .startOf('day')\n .add(4, 'hours')\n .toDate(),\n end: moment(new Date('2019-03-01'))\n .startOf('day')\n .add(18, 'hours')\n .toDate(),\n title: 'foo',\n draggable: true,\n },\n ];\n fixture.componentInstance.hourDuration = 40;\n fixture.componentInstance.ngOnChanges({\n viewDate: {},\n events: {},\n excludeDays: {},\n daysInWeek: {},\n hourColumns: {},\n });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const events = fixture.nativeElement.querySelectorAll(\n '.cal-event-container'\n );\n const dayWidth: number = events[0].parentElement.offsetWidth;\n const rect1: ClientRect = events[0].getBoundingClientRect();\n let dragEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n dragEvent = e;\n });\n triggerDomEvent('mousedown', events[0], {\n clientX: rect1.right,\n clientY: rect1.bottom,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', events[0], {\n clientX: rect1.right + dayWidth - 5,\n clientY: rect1.bottom + 95,\n });\n fixture.detectChanges();\n triggerDomEvent('mouseup', events[0], {\n clientX: rect1.right + dayWidth - 5,\n clientY: rect1.bottom + 95,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(dragEvent).to.deep.equal({\n type: 'drag',\n allDay: false,\n event: fixture.componentInstance.events[0],\n newStart: moment(fixture.componentInstance.events[0].start)\n .add(3, 'days')\n .add(1, 'hour')\n .toDate(),\n newEnd: moment(fixture.componentInstance.events[0].end)\n .add(3, 'days')\n .add(1, 'hour')\n .toDate(),\n });\n });\n\n it('should preserve css classes on hour segments when dragging an event', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2018-07-29');\n fixture.componentInstance.events = [\n {\n start: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(3, 'days')\n .toDate(),\n title: 'bar',\n draggable: true,\n },\n ];\n fixture.componentInstance.beforeViewRender.subscribe(\n (view: CalendarWeekViewBeforeRenderEvent) => {\n view.hourColumns.forEach((column) => {\n column.hours.forEach((hour) => {\n hour.segments.forEach((segment) => {\n segment.cssClass = 'disabled-cell';\n });\n });\n });\n }\n );\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n expect(\n fixture.nativeElement\n .querySelector('.cal-hour-segment')\n .classList.contains('disabled-cell')\n ).to.be.true;\n document.body.appendChild(fixture.nativeElement);\n const events = fixture.nativeElement.querySelectorAll(\n '.cal-event-container'\n );\n const dayWidth: number = events[0].parentElement.offsetWidth;\n const rect: ClientRect = events[0].getBoundingClientRect();\n triggerDomEvent('mousedown', events[0], {\n clientX: rect.right,\n clientY: rect.bottom,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', events[0], {\n clientX: rect.right + dayWidth - 5,\n clientY: rect.bottom + 95,\n });\n fixture.detectChanges();\n expect(\n fixture.nativeElement\n .querySelector('.cal-hour-segment')\n .classList.contains('disabled-cell')\n ).to.be.true;\n });\n\n it('should resize a time event to the minimum height', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2018-07-29');\n fixture.componentInstance.events = [\n {\n start: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(3, 'hours')\n .toDate(),\n end: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(5, 'hours')\n .toDate(),\n title: 'foo',\n resizable: {\n afterEnd: true,\n },\n },\n ];\n fixture.componentInstance.minimumEventHeight = 1;\n fixture.componentInstance.hourSegmentHeight = 20;\n fixture.componentInstance.ngOnChanges({\n viewDate: {},\n events: {},\n hourSegmentHeight: {},\n });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event: HTMLElement = fixture.nativeElement.querySelectorAll(\n '.cal-event-container'\n )[0];\n const rect: ClientRect = event.getBoundingClientRect();\n const resizeHandle = event.querySelector('.cal-resize-handle-after-end');\n let resizeEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n resizeEvent = e;\n });\n triggerDomEvent('mousedown', resizeHandle, {\n clientX: rect.right,\n clientY: rect.bottom,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', document.body, {\n clientX: rect.right,\n clientY: rect.bottom - 200,\n });\n fixture.detectChanges();\n expect(event.getBoundingClientRect().height).to.equal(1);\n triggerDomEvent('mouseup', document.body, {\n clientX: rect.right,\n clientY: rect.bottom - 200,\n button: 0,\n });\n fixture.detectChanges();\n expect(resizeEvent).to.deep.equal({\n type: 'resize',\n event: fixture.componentInstance.events[0],\n newStart: fixture.componentInstance.events[0].start,\n newEnd: moment(fixture.componentInstance.events[0].start)\n .add(1, 'minutes')\n .toDate(),\n });\n });\n\n it('should resize a time event to the minimum height with custom hour duration', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2018-07-29');\n fixture.componentInstance.events = [\n {\n start: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(4, 'hours')\n .toDate(),\n end: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(6, 'hours')\n .toDate(),\n title: 'foo',\n resizable: {\n afterEnd: true,\n },\n },\n ];\n fixture.componentInstance.hourDuration = 40;\n fixture.componentInstance.minimumEventHeight = 1;\n fixture.componentInstance.hourSegmentHeight = 20;\n fixture.componentInstance.ngOnChanges({\n viewDate: {},\n events: {},\n hourDuration: {},\n hourSegmentHeight: {},\n });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event: HTMLElement = fixture.nativeElement.querySelectorAll(\n '.cal-event-container'\n )[0];\n const rect: ClientRect = event.getBoundingClientRect();\n const resizeHandle = event.querySelector('.cal-resize-handle-after-end');\n let resizeEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n resizeEvent = e;\n });\n triggerDomEvent('mousedown', resizeHandle, {\n clientX: rect.right,\n clientY: rect.bottom,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', document.body, {\n clientX: rect.right,\n clientY: rect.bottom - 120,\n });\n fixture.detectChanges();\n expect(event.getBoundingClientRect().height).to.equal(1);\n triggerDomEvent('mouseup', document.body, {\n clientX: rect.right,\n clientY: rect.bottom - 120,\n button: 0,\n });\n fixture.detectChanges();\n expect(resizeEvent).to.deep.equal({\n type: 'resize',\n event: fixture.componentInstance.events[0],\n newStart: fixture.componentInstance.events[0].start,\n newEnd: moment(fixture.componentInstance.events[0].start)\n .add(1, 'minutes')\n .toDate(),\n });\n });\n\n it('should allow css variables for colors', () => {\n const style = document.createElement('style');\n style.setAttribute('type', 'text/css');\n style.innerText = `\n :root {\n --white: #fff;\n --black: #000;\n }\n `;\n document.head.appendChild(style);\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.ngOnInit();\n fixture.componentInstance.viewDate = new Date('2016-06-01');\n fixture.componentInstance.events = [\n {\n start: new Date('2016-05-30'),\n end: new Date('2016-06-02'),\n title: 'foo',\n color: {\n primary: 'var(--white)',\n secondary: 'var(--black)',\n },\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n\n const computedStyles: CSSStyleDeclaration = window.getComputedStyle(\n fixture.nativeElement.querySelector('.cal-event')\n );\n expect(computedStyles.getPropertyValue('background-color')).to.equal(\n 'rgb(0, 0, 0)'\n );\n expect(computedStyles.getPropertyValue('border-color')).to.equal(\n 'rgb(255, 255, 255)'\n );\n document.head.appendChild(style);\n });\n\n it('should allow external events to be dropped on the hour segments', () => {\n const fixture = TestBed.createComponent(TestComponent);\n fixture.componentInstance.viewDate = new Date('2016-06-27');\n fixture.componentInstance.events = [];\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const externalEventFixture = fixture.debugElement.query(\n By.directive(ExternalEventComponent)\n );\n\n const event: HTMLElement =\n externalEventFixture.nativeElement.querySelector('.external-event');\n const eventPosition: ClientRect = event.getBoundingClientRect();\n\n const segments: HTMLElement[] = Array.from(\n fixture.nativeElement.querySelectorAll(\n '.cal-day-columns .cal-hour-segment'\n )\n );\n const segment = segments[1];\n const segmentPosition: ClientRect = segment.getBoundingClientRect();\n\n const eventDropped = fixture.componentInstance.eventTimesChanged;\n\n triggerDomEvent('mousedown', event, {\n clientY: eventPosition.top,\n clientX: eventPosition.left,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', document.body, {\n clientY: segmentPosition.top,\n clientX: segmentPosition.left,\n });\n fixture.detectChanges();\n triggerDomEvent('mouseup', document.body, {\n clientY: segmentPosition.top,\n clientX: segmentPosition.left,\n button: 0,\n });\n fixture.detectChanges();\n expect(eventDropped).to.have.been.calledWith({\n type: 'drop',\n event: externalEventFixture.componentInstance.event,\n newStart: moment('2016-06-27')\n .startOf('week')\n .add(30, 'minutes')\n .toDate(),\n allDay: false,\n });\n expect(eventDropped).to.have.been.calledOnce;\n });\n\n it('should update event times when dragging', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n eventTitle.week = ({ start, end }: CalendarEvent) => {\n return (\n formatDate(start, 'H:mm', 'en') + ' - ' + formatDate(end, 'H:mm', 'en')\n );\n };\n fixture.componentInstance.viewDate = new Date('2018-07-29');\n const originalEvent = {\n start: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(3, 'hours')\n .toDate(),\n end: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(5, 'hours')\n .toDate(),\n title: 'foo',\n draggable: true,\n };\n fixture.componentInstance.events = [originalEvent];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event = fixture.nativeElement.querySelector('.cal-event-container');\n const rect: ClientRect = event.getBoundingClientRect();\n triggerDomEvent('mousedown', event, {\n clientX: rect.right,\n clientY: rect.bottom,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', event, {\n clientX: rect.right,\n clientY: rect.bottom + 95,\n });\n fixture.detectChanges();\n const updatedEvent1 = fixture.nativeElement.querySelector(\n '.cal-event-container'\n );\n expect(updatedEvent1.innerText.trim()).to.equal('4:30 - 6:30');\n });\n\n it('should update event times when dragging and not snapping to a grid', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n eventTitle.week = ({ start, end }: CalendarEvent) => {\n return (\n formatDate(start, 'H:mm', 'en') + ' - ' + formatDate(end, 'H:mm', 'en')\n );\n };\n fixture.componentInstance.viewDate = new Date('2018-07-29');\n fixture.componentInstance.snapDraggedEvents = false;\n const originalEvent = {\n start: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(3, 'hours')\n .toDate(),\n end: moment(new Date('2018-07-29'))\n .startOf('day')\n .add(5, 'hours')\n .toDate(),\n title: 'foo',\n draggable: true,\n };\n fixture.componentInstance.events = [originalEvent];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const event = fixture.nativeElement.querySelector('.cal-event-container');\n const rect: ClientRect = event.getBoundingClientRect();\n triggerDomEvent('mousedown', event, {\n clientX: rect.right,\n clientY: rect.bottom,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', event, {\n clientX: rect.right,\n clientY: rect.bottom + 95,\n });\n fixture.detectChanges();\n const updatedEvent1 = fixture.nativeElement.querySelector(\n '.cal-event-container'\n );\n expect(updatedEvent1.innerText.trim()).to.equal('4:30 - 6:30');\n });\n\n it('should set a minimum event height', () => {\n const fixture = TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = moment().startOf('week').toDate();\n fixture.componentInstance.events = [\n {\n start: moment().startOf('week').toDate(),\n end: moment().startOf('week').add(5, 'minutes').toDate(),\n title: 'foo',\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n expect(\n fixture.nativeElement.querySelector('.cal-event-container').offsetHeight\n ).to.equal(30);\n fixture.destroy();\n });\n\n it('should drag a time event down and into another day', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date('2020-05-03');\n fixture.componentInstance.daysInWeek = 2;\n fixture.componentInstance.events = [\n {\n start: moment(new Date('2020-05-03')).startOf('day').hours(20).toDate(),\n end: moment(new Date('2020-05-03')).startOf('day').hours(23).toDate(),\n title: 'foo',\n draggable: true,\n },\n ];\n fixture.componentInstance.ngOnChanges({\n viewDate: {},\n events: {},\n });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n const events = fixture.nativeElement.querySelectorAll(\n '.cal-event-container'\n );\n const rect1: ClientRect = events[0].getBoundingClientRect();\n let dragEvent: CalendarEventTimesChangedEvent;\n fixture.componentInstance.eventTimesChanged.pipe(take(1)).subscribe((e) => {\n dragEvent = e;\n });\n triggerDomEvent('mousedown', events[0], {\n clientX: 0,\n clientY: rect1.bottom,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', events[0], {\n clientX: 0,\n clientY: rect1.bottom + 95,\n });\n fixture.detectChanges();\n triggerDomEvent('mouseup', events[0], {\n clientX: 0,\n clientY: rect1.bottom + 95,\n button: 0,\n });\n fixture.detectChanges();\n fixture.destroy();\n expect(dragEvent).to.deep.equal({\n type: 'drag',\n allDay: false,\n event: fixture.componentInstance.events[0],\n newStart: moment(fixture.componentInstance.events[0].start)\n .add(1, 'hour')\n .add(30, 'minutes')\n .toDate(),\n newEnd: moment(fixture.componentInstance.events[0].end)\n .add(1, 'hour')\n .add(30, 'minutes')\n .toDate(),\n });\n });\n\n describe('current time marker', () => {\n let clock: any;\n beforeEach(() => {\n clock = fakeTimers.install({\n now: new Date('2019-09-30T11:30:25.288Z').getTime(),\n toFake: ['Date'],\n });\n });\n\n afterEach(() => {\n clock.uninstall();\n });\n\n it('should show a current time marker', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date();\n fixture.componentInstance.ngOnChanges({\n viewDate: {},\n hourSegmentHeight: {},\n });\n fixture.detectChanges();\n const marker = fixture.nativeElement.querySelector(\n '.cal-day-columns .cal-day-column:nth-child(2) .cal-current-time-marker'\n );\n expect(marker.style.top).to.equal('690px');\n });\n\n it('should respect the start time', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date();\n fixture.componentInstance.dayStartHour = 3;\n fixture.componentInstance.dayStartMinute = 30;\n fixture.componentInstance.ngOnChanges({\n viewDate: {},\n hourSegmentHeight: {},\n });\n fixture.detectChanges();\n const marker = fixture.nativeElement.querySelector(\n '.cal-day-columns .cal-day-column:nth-child(2) .cal-current-time-marker'\n );\n expect(marker.style.top).to.equal('480px');\n });\n\n it('should respect the end time', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date();\n fixture.componentInstance.dayEndHour = 3;\n fixture.componentInstance.ngOnChanges({\n viewDate: {},\n hourSegmentHeight: {},\n });\n fixture.detectChanges();\n const marker = fixture.nativeElement.querySelector(\n '.cal-day-columns .cal-day-column:nth-child(2) .cal-current-time-marker'\n );\n expect(marker).to.equal(null);\n });\n\n it('should respect the hour segment count and height', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date();\n fixture.componentInstance.hourSegments = 4;\n fixture.componentInstance.hourSegmentHeight = 60;\n fixture.componentInstance.ngOnChanges({\n viewDate: {},\n hourSegmentHeight: {},\n });\n fixture.detectChanges();\n const marker = fixture.nativeElement.querySelector(\n '.cal-day-columns .cal-day-column:nth-child(2) .cal-current-time-marker'\n );\n expect(marker.style.top).to.equal('2760px');\n });\n\n it('should not change the all day event end date when ending the drop inside the hour grid', () => {\n const fixture: ComponentFixture<CalendarWeekViewComponent> =\n TestBed.createComponent(CalendarWeekViewComponent);\n fixture.componentInstance.viewDate = new Date();\n fixture.componentInstance.events = [\n {\n title: 'foo',\n start: moment().startOf('week').toDate(),\n end: moment().startOf('week').add(2, 'days').toDate(),\n draggable: true,\n allDay: true,\n },\n ];\n fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n fixture.detectChanges();\n document.body.appendChild(fixture.nativeElement);\n // remove the header as it was causing the test to fail\n const header: HTMLElement =\n fixture.nativeElement.querySelector('.cal-day-headers');\n header.parentNode.removeChild(header);\n\n const eventDropped = sinon.spy();\n fixture.componentInstance.eventTimesChanged.subscribe(eventDropped);\n\n const event: HTMLElement = fixture.nativeElement.querySelector(\n '.cal-event-container'\n );\n const dayWidth: number = event.parentElement.offsetWidth / 7;\n const eventPosition: ClientRect = event.getBoundingClientRect();\n triggerDomEvent('mousedown', event, {\n clientX: eventPosition.right,\n clientY: eventPosition.top,\n button: 0,\n });\n fixture.detectChanges();\n triggerDomEvent('mousemove', document.body, {\n clientX: eventPosition.right + dayWidth,\n clientY: eventPosition.top + 100,\n });\n fixture.detectChanges();\n triggerDomEvent('mouseup', document.body, {\n clientX: eventPosition.right + dayWidth,\n clientY: eventPosition.top + 100,\n button: 0,\n });\n fixture.detectChanges();\n\n expect(eventDropped).to.have.been.calledOnce;\n });\n });\n});\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/modules/week/calendar-week-view/calendar-week-view.component.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 82,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 422,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        181,
                        2036
                      ],
                      "text": ", ChangeDetectionStrategy,\n} from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\nimport {\n WeekDay,\n CalendarEvent,\n WeekViewAllDayEvent,\n WeekView,\n ViewPeriod,\n WeekViewHourColumn,\n WeekViewTimeEvent,\n WeekViewHourSegment,\n WeekViewHour,\n WeekViewAllDayEventRow,\n} from 'calendar-utils';\nimport { ResizeEvent } from 'angular-resizable-element';\nimport { ResizeCursors } from 'angular-resizable-element';\nimport { CalendarDragHelper } from '../../common/calendar-drag-helper/calendar-drag-helper.provider';\nimport { CalendarResizeHelper } from '../../common/calendar-resize-helper/calendar-resize-helper.provider';\nimport {\n CalendarEventTimesChangedEvent,\n CalendarEventTimesChangedEventType,\n} from '../../common/calendar-event-times-changed-event/calendar-event-times-changed-event.interface';\nimport { CalendarUtils } from '../../common/calendar-utils/calendar-utils.provider';\nimport {\n validateEvents,\n roundToNearest,\n trackByWeekDayHeaderDate,\n trackByHourSegment,\n trackByHour,\n getMinutesMoved,\n getDefaultEventEnd,\n addDaysWithExclusions,\n isDraggedWithinPeriod,\n shouldFireDroppedEvent,\n getWeekViewPeriod,\n trackByWeekAllDayEvent,\n trackByWeekTimeEvent,\n} from '../../common/util/util';\nimport { DateAdapter } from '../../../date-adapters/date-adapter';\nimport {\n DragEndEvent,\n DropEvent,\n DragMoveEvent,\n ValidateDrag,\n} from 'angular-draggable-droppable';\nimport { PlacementArray } from 'positioning';\n\nexport interface WeekViewAllDayEventResize {\n originalOffset: number;\n originalSpan: number;\n edge: string;\n}\n\nexport interface CalendarWeekViewBeforeRenderEvent extends WeekView {\n header: WeekDay[];\n}\n\n/**\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Shows all events on a given week. Example usage:\n angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```typescript\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json <mwl-calendar-week-view\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json [viewDate]=\"viewDate\"\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json [events]=\"events\">\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json </mwl-calendar-week-view>\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```\n */\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`template` has too many lines (336). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 84,
                "column": 13,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 421,
                "endColumn": 4
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 429,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 429,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 435,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 435,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 440,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 440,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 445,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 445,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 450,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 450,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 455,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 455,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 460,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 460,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 465,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 465,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 471,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 471,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 487,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 487,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 492,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 492,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 497,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 497,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 502,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 502,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 507,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 507,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 513,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 513,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 518,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 518,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 523,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 523,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 528,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 528,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 533,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 533,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 538,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 538,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 543,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 543,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 548,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 548,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 553,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 553,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 558,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 558,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 563,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 563,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 568,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 568,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 573,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 573,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 578,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 578,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 584,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 584,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 589,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 589,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 595,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 595,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-signals",
                "severity": 2,
                "message": "Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator",
                "line": 602,
                "column": 3,
                "nodeType": "Decorator",
                "messageId": "preferInputSignals",
                "endLine": 602,
                "endColumn": 11
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 609,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 609,
                "endColumn": 29,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        20250,
                        20250
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 617,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 617,
                "endColumn": 25,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        20411,
                        20411
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 625,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 625,
                "endColumn": 30,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        20609,
                        20609
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 632,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 632,
                "endColumn": 29,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        20917,
                        20917
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/prefer-output-readonly",
                "severity": 2,
                "message": "Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned",
                "line": 638,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "preferOutputReadonly",
                "endLine": 638,
                "endColumn": 31,
                "suggestions": [
                  {
                    "messageId": "suggestAddReadonlyModifier",
                    "fix": {
                      "range": [
                        21064,
                        21064
                      ],
                      "text": "readonly "
                    },
                    "desc": "Add `readonly` modifier"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/sort-lifecycle-methods",
                "severity": 2,
                "message": "Lifecycle Methods are not declared in order of execution",
                "line": 786,
                "column": 3,
                "nodeType": "Identifier",
                "messageId": "lifecycleMethodsNotSorted",
                "endLine": 786,
                "endColumn": 14
              },
              {
                "ruleId": "@angular-eslint/sort-lifecycle-methods",
                "severity": 2,
                "message": "Lifecycle Methods are not declared in order of execution",
                "line": 839,
                "column": 3,
                "nodeType": "Identifier",
                "messageId": "lifecycleMethodsNotSorted",
                "endLine": 839,
                "endColumn": 18
              }
            ],
            "suppressedMessages": [],
            "errorCount": 41,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import {\n Component,\n Input,\n Output,\n EventEmitter,\n ChangeDetectorRef,\n OnChanges,\n OnInit,\n OnDestroy,\n LOCALE_ID,\n Inject,\n TemplateRef,\n ElementRef,\n AfterViewInit,\n} from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\nimport {\n WeekDay,\n CalendarEvent,\n WeekViewAllDayEvent,\n WeekView,\n ViewPeriod,\n WeekViewHourColumn,\n WeekViewTimeEvent,\n WeekViewHourSegment,\n WeekViewHour,\n WeekViewAllDayEventRow,\n} from 'calendar-utils';\nimport { ResizeEvent } from 'angular-resizable-element';\nimport { ResizeCursors } from 'angular-resizable-element';\nimport { CalendarDragHelper } from '../../common/calendar-drag-helper/calendar-drag-helper.provider';\nimport { CalendarResizeHelper } from '../../common/calendar-resize-helper/calendar-resize-helper.provider';\nimport {\n CalendarEventTimesChangedEvent,\n CalendarEventTimesChangedEventType,\n} from '../../common/calendar-event-times-changed-event/calendar-event-times-changed-event.interface';\nimport { CalendarUtils } from '../../common/calendar-utils/calendar-utils.provider';\nimport {\n validateEvents,\n roundToNearest,\n trackByWeekDayHeaderDate,\n trackByHourSegment,\n trackByHour,\n getMinutesMoved,\n getDefaultEventEnd,\n addDaysWithExclusions,\n isDraggedWithinPeriod,\n shouldFireDroppedEvent,\n getWeekViewPeriod,\n trackByWeekAllDayEvent,\n trackByWeekTimeEvent,\n} from '../../common/util/util';\nimport { DateAdapter } from '../../../date-adapters/date-adapter';\nimport {\n DragEndEvent,\n DropEvent,\n DragMoveEvent,\n ValidateDrag,\n} from 'angular-draggable-droppable';\nimport { PlacementArray } from 'positioning';\n\nexport interface WeekViewAllDayEventResize {\n originalOffset: number;\n originalSpan: number;\n edge: string;\n}\n\nexport interface CalendarWeekViewBeforeRenderEvent extends WeekView {\n header: WeekDay[];\n}\n\n/**\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Shows all events on a given week. Example usage:\n angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```typescript\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json <mwl-calendar-week-view\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json [viewDate]=\"viewDate\"\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json [events]=\"events\">\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json </mwl-calendar-week-view>\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```\n */\n@Component({\n selector: 'mwl-calendar-week-view',\n template: `\n <div class=\"cal-week-view\" role=\"grid\">\n <mwl-calendar-week-view-header\n [days]=\"days\"\n [locale]=\"locale\"\n [customTemplate]=\"headerTemplate\"\n (dayHeaderClicked)=\"dayHeaderClicked.emit($event)\"\n (eventDropped)=\"\n eventDropped({ dropData: $event }, $event.newStart, true)\n \"\n (dragEnter)=\"dateDragEnter($event.date)\"\n >\n </mwl-calendar-week-view-header>\n <div\n class=\"cal-all-day-events\"\n #allDayEventsContainer\n *ngIf=\"view.allDayEventRows.length > 0\"\n mwlDroppable\n (dragEnter)=\"dragEnter('allDay')\"\n (dragLeave)=\"dragLeave('allDay')\"\n >\n <div class=\"cal-day-columns\">\n <div class=\"cal-time-label-column\">\n <ng-container\n *ngTemplateOutlet=\"allDayEventsLabelTemplate\"\n ></ng-container>\n </div>\n <div\n class=\"cal-day-column\"\n *ngFor=\"let day of days; trackBy: trackByWeekDayHeaderDate\"\n mwlDroppable\n dragOverClass=\"cal-drag-over\"\n (drop)=\"eventDropped($event, day.date, true)\"\n (dragEnter)=\"dateDragEnter(day.date)\"\n ></div>\n </div>\n <div\n *ngFor=\"let eventRow of view.allDayEventRows; trackBy: trackById\"\n #eventRowContainer\n class=\"cal-events-row\"\n >\n <div\n *ngFor=\"\n let allDayEvent of eventRow.row;\n trackBy: trackByWeekAllDayEvent\n \"\n #event\n class=\"cal-event-container\"\n [class.cal-draggable]=\"\n allDayEvent.event.draggable && allDayEventResizes.size === 0\n \"\n [class.cal-starts-within-week]=\"!allDayEvent.startsBeforeWeek\"\n [class.cal-ends-within-week]=\"!allDayEvent.endsAfterWeek\"\n [ngClass]=\"allDayEvent.event?.cssClass\"\n [style.width.%]=\"(100 / days.length) angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json allDayEvent.span\"\n [style.marginLeft.%]=\"\n rtl ? null : (100 / days.length) angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json allDayEvent.offset\n \"\n [style.marginRight.%]=\"\n rtl ? (100 / days.length) angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json allDayEvent.offset : null\n \"\n mwlResizable\n [resizeCursors]=\"resizeCursors\"\n [resizeSnapGrid]=\"{ left: dayColumnWidth, right: dayColumnWidth }\"\n [validateResize]=\"validateResize\"\n (resizeStart)=\"\n allDayEventResizeStarted(eventRowContainer, allDayEvent, $event)\n \"\n (resizing)=\"\n allDayEventResizing(allDayEvent, $event, dayColumnWidth)\n \"\n (resizeEnd)=\"allDayEventResizeEnded(allDayEvent)\"\n mwlDraggable\n dragActiveClass=\"cal-drag-active\"\n [dropData]=\"{ event: allDayEvent.event, calendarId: calendarId }\"\n [dragAxis]=\"{\n x: allDayEvent.event.draggable && allDayEventResizes.size === 0,\n y:\n !snapDraggedEvents &&\n allDayEvent.event.draggable &&\n allDayEventResizes.size === 0\n }\"\n [dragSnapGrid]=\"snapDraggedEvents ? { x: dayColumnWidth } : {}\"\n [validateDrag]=\"validateDrag\"\n [touchStartLongPress]=\"{ delay: 300, delta: 30 }\"\n (dragStart)=\"\n dragStarted(eventRowContainer, event, allDayEvent, false)\n \"\n (dragging)=\"allDayEventDragMove()\"\n (dragEnd)=\"dragEnded(allDayEvent, $event, dayColumnWidth)\"\n >\n <div\n class=\"cal-resize-handle cal-resize-handle-before-start\"\n *ngIf=\"\n allDayEvent.event?.resizable?.beforeStart &&\n !allDayEvent.startsBeforeWeek\n \"\n mwlResizeHandle\n [resizeEdges]=\"{ left: true }\"\n ></div>\n <mwl-calendar-week-view-event\n [locale]=\"locale\"\n [weekEvent]=\"allDayEvent\"\n [tooltipPlacement]=\"tooltipPlacement\"\n [tooltipTemplate]=\"tooltipTemplate\"\n [tooltipAppendToBody]=\"tooltipAppendToBody\"\n [tooltipDelay]=\"tooltipDelay\"\n [customTemplate]=\"eventTemplate\"\n [eventTitleTemplate]=\"eventTitleTemplate\"\n [eventActionsTemplate]=\"eventActionsTemplate\"\n [daysInWeek]=\"daysInWeek\"\n (eventClicked)=\"\n eventClicked.emit({\n event: allDayEvent.event,\n sourceEvent: $event.sourceEvent\n })\n \"\n >\n </mwl-calendar-week-view-event>\n <div\n class=\"cal-resize-handle cal-resize-handle-after-end\"\n *ngIf=\"\n allDayEvent.event?.resizable?.afterEnd &&\n !allDayEvent.endsAfterWeek\n \"\n mwlResizeHandle\n [resizeEdges]=\"{ right: true }\"\n ></div>\n </div>\n </div>\n </div>\n <div\n class=\"cal-time-events\"\n mwlDroppable\n (dragEnter)=\"dragEnter('time')\"\n (dragLeave)=\"dragLeave('time')\"\n >\n <div\n class=\"cal-time-label-column\"\n *ngIf=\"view.hourColumns.length > 0 && daysInWeek !== 1\"\n >\n <div\n *ngFor=\"\n let hour of view.hourColumns[0].hours;\n trackBy: trackByHour;\n let odd = odd\n \"\n class=\"cal-hour\"\n [class.cal-hour-odd]=\"odd\"\n >\n <mwl-calendar-week-view-hour-segment\n *ngFor=\"let segment of hour.segments; trackBy: trackByHourSegment\"\n [style.height.px]=\"hourSegmentHeight\"\n [segment]=\"segment\"\n [segmentHeight]=\"hourSegmentHeight\"\n [locale]=\"locale\"\n [customTemplate]=\"hourSegmentTemplate\"\n [isTimeLabel]=\"true\"\n [daysInWeek]=\"daysInWeek\"\n >\n </mwl-calendar-week-view-hour-segment>\n </div>\n </div>\n <div\n class=\"cal-day-columns\"\n [class.cal-resize-active]=\"timeEventResizes.size > 0\"\n #dayColumns\n >\n <div\n class=\"cal-day-column\"\n *ngFor=\"let column of view.hourColumns; trackBy: trackByHourColumn\"\n >\n <mwl-calendar-week-view-current-time-marker\n [columnDate]=\"column.date\"\n [dayStartHour]=\"dayStartHour\"\n [dayStartMinute]=\"dayStartMinute\"\n [dayEndHour]=\"dayEndHour\"\n [dayEndMinute]=\"dayEndMinute\"\n [hourSegments]=\"hourSegments\"\n [hourDuration]=\"hourDuration\"\n [hourSegmentHeight]=\"hourSegmentHeight\"\n [customTemplate]=\"currentTimeMarkerTemplate\"\n ></mwl-calendar-week-view-current-time-marker>\n <div class=\"cal-events-container\">\n <div\n *ngFor=\"\n let timeEvent of column.events;\n trackBy: trackByWeekTimeEvent\n \"\n #event\n class=\"cal-event-container\"\n [class.cal-draggable]=\"\n timeEvent.event.draggable && timeEventResizes.size === 0\n \"\n [class.cal-starts-within-day]=\"!timeEvent.startsBeforeDay\"\n [class.cal-ends-within-day]=\"!timeEvent.endsAfterDay\"\n [ngClass]=\"timeEvent.event.cssClass\"\n [hidden]=\"timeEvent.height === 0 && timeEvent.width === 0\"\n [style.top.px]=\"timeEvent.top\"\n [style.height.px]=\"timeEvent.height\"\n [style.left.%]=\"timeEvent.left\"\n [style.width.%]=\"timeEvent.width\"\n mwlResizable\n [resizeCursors]=\"resizeCursors\"\n [resizeSnapGrid]=\"{\n left: dayColumnWidth,\n right: dayColumnWidth,\n top: eventSnapSize || hourSegmentHeight,\n bottom: eventSnapSize || hourSegmentHeight\n }\"\n [validateResize]=\"validateResize\"\n [allowNegativeResizes]=\"true\"\n (resizeStart)=\"\n timeEventResizeStarted(dayColumns, timeEvent, $event)\n \"\n (resizing)=\"timeEventResizing(timeEvent, $event)\"\n (resizeEnd)=\"timeEventResizeEnded(timeEvent)\"\n mwlDraggable\n dragActiveClass=\"cal-drag-active\"\n [dropData]=\"{ event: timeEvent.event, calendarId: calendarId }\"\n [dragAxis]=\"{\n x: timeEvent.event.draggable && timeEventResizes.size === 0,\n y: timeEvent.event.draggable && timeEventResizes.size === 0\n }\"\n [dragSnapGrid]=\"\n snapDraggedEvents\n ? {\n x: dayColumnWidth,\n y: eventSnapSize || hourSegmentHeight\n }\n : {}\n \"\n [touchStartLongPress]=\"{ delay: 300, delta: 30 }\"\n [ghostDragEnabled]=\"!snapDraggedEvents\"\n [ghostElementTemplate]=\"weekEventTemplate\"\n [validateDrag]=\"validateDrag\"\n (dragStart)=\"dragStarted(dayColumns, event, timeEvent, true)\"\n (dragging)=\"dragMove(timeEvent, $event)\"\n (dragEnd)=\"dragEnded(timeEvent, $event, dayColumnWidth, true)\"\n >\n <div\n class=\"cal-resize-handle cal-resize-handle-before-start\"\n *ngIf=\"\n timeEvent.event?.resizable?.beforeStart &&\n !timeEvent.startsBeforeDay\n \"\n mwlResizeHandle\n [resizeEdges]=\"{\n left: true,\n top: true\n }\"\n ></div>\n <ng-template\n [ngTemplateOutlet]=\"weekEventTemplate\"\n ></ng-template>\n <ng-template #weekEventTemplate>\n <mwl-calendar-week-view-event\n [locale]=\"locale\"\n [weekEvent]=\"timeEvent\"\n [tooltipPlacement]=\"tooltipPlacement\"\n [tooltipTemplate]=\"tooltipTemplate\"\n [tooltipAppendToBody]=\"tooltipAppendToBody\"\n [tooltipDisabled]=\"dragActive || timeEventResizes.size > 0\"\n [tooltipDelay]=\"tooltipDelay\"\n [customTemplate]=\"eventTemplate\"\n [eventTitleTemplate]=\"eventTitleTemplate\"\n [eventActionsTemplate]=\"eventActionsTemplate\"\n [column]=\"column\"\n [daysInWeek]=\"daysInWeek\"\n (eventClicked)=\"\n eventClicked.emit({\n event: timeEvent.event,\n sourceEvent: $event.sourceEvent\n })\n \"\n >\n </mwl-calendar-week-view-event>\n </ng-template>\n <div\n class=\"cal-resize-handle cal-resize-handle-after-end\"\n *ngIf=\"\n timeEvent.event?.resizable?.afterEnd &&\n !timeEvent.endsAfterDay\n \"\n mwlResizeHandle\n [resizeEdges]=\"{\n right: true,\n bottom: true\n }\"\n ></div>\n </div>\n </div>\n\n <div\n *ngFor=\"\n let hour of column.hours;\n trackBy: trackByHour;\n let odd = odd\n \"\n class=\"cal-hour\"\n [class.cal-hour-odd]=\"odd\"\n >\n <mwl-calendar-week-view-hour-segment\n *ngFor=\"\n let segment of hour.segments;\n trackBy: trackByHourSegment\n \"\n [style.height.px]=\"hourSegmentHeight\"\n [segment]=\"segment\"\n [segmentHeight]=\"hourSegmentHeight\"\n [locale]=\"locale\"\n [customTemplate]=\"hourSegmentTemplate\"\n [daysInWeek]=\"daysInWeek\"\n (mwlClick)=\"\n hourSegmentClicked.emit({\n date: segment.date,\n sourceEvent: $event\n })\n \"\n [clickListenerDisabled]=\"\n hourSegmentClicked.observers.length === 0\n \"\n mwlDroppable\n [dragOverClass]=\"\n !dragActive || !snapDraggedEvents ? 'cal-drag-over' : null\n \"\n dragActiveClass=\"cal-drag-active\"\n (drop)=\"eventDropped($event, segment.date, false)\"\n (dragEnter)=\"dateDragEnter(segment.date)\"\n [isTimeLabel]=\"daysInWeek === 1\"\n >\n </mwl-calendar-week-view-hour-segment>\n </div>\n </div>\n </div>\n </div>\n </div>\n `,\n})\nexport class CalendarWeekViewComponent\n implements OnChanges, OnInit, OnDestroy, AfterViewInit\n{\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The current view date\n */\n @Input() viewDate: Date;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json An array of events to display on view\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The schema is available here: https://github.com/mattlewis92/calendar-utils/blob/c51689985f59a271940e30bc4e2c4e1fee3fcb5c/src/calendarUtils.ts#L49-L63\n */\n @Input() events: CalendarEvent[] = [];\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json An array of day indexes (0 = sunday, 1 = monday etc) that will be hidden on the view\n */\n @Input() excludeDays: number[] = [];\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json An observable that when emitted on will re-render the current view\n */\n @Input() refresh: Subject<any>;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The locale used to format dates\n */\n @Input() locale: string;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The placement of the event tooltip\n */\n @Input() tooltipPlacement: PlacementArray = 'auto';\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json A custom template to use for the event tooltips\n */\n @Input() tooltipTemplate: TemplateRef<any>;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Whether to append tooltips to the body or next to the trigger element\n */\n @Input() tooltipAppendToBody: boolean = true;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The delay in milliseconds before the tooltip should be displayed. If not provided the tooltip\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json will be displayed immediately.\n */\n @Input() tooltipDelay: number | null = null;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The start number of the week.\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json This is ignored when the `daysInWeek` input is also set as the `viewDate` will be used as the start of the week instead.\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Note, you should also pass this to the calendar title pipe so it shows the same days: {{ viewDate | calendarDate:(view + 'ViewTitle'):locale:weekStartsOn }}\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json If using the moment date adapter this option won't do anything and you'll need to set it globally like so:\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json moment.updateLocale('en', {\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json week: {\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json dow: 1, // set start of week to monday instead\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json doy: 0,\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json },\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json });\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json ```\n */\n @Input() weekStartsOn: number;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json A custom template to use to replace the header\n */\n @Input() headerTemplate: TemplateRef<any>;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json A custom template to use for week view events\n */\n @Input() eventTemplate: TemplateRef<any>;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json A custom template to use for event titles\n */\n @Input() eventTitleTemplate: TemplateRef<any>;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json A custom template to use for event actions\n */\n @Input() eventActionsTemplate: TemplateRef<any>;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The precision to display events.\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json `days` will round event start and end dates to the nearest day and `minutes` will not do this rounding\n */\n @Input() precision: 'days' | 'minutes' = 'days';\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json An array of day indexes (0 = sunday, 1 = monday etc) that indicate which days are weekends\n */\n @Input() weekendDays: number[];\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Whether to snap events to a grid when dragging\n */\n @Input() snapDraggedEvents: boolean = true;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The number of segments in an hour. Must divide equally into 60.\n */\n @Input() hourSegments: number = 2;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The duration of each segment group in minutes\n */\n @Input() hourDuration: number;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The height in pixels of each hour segment\n */\n @Input() hourSegmentHeight: number = 30;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The minimum height in pixels of each event\n */\n @Input() minimumEventHeight: number = 30;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The day start hours in 24 hour time. Must be 0-23\n */\n @Input() dayStartHour: number = 0;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The day start minutes. Must be 0-59\n */\n @Input() dayStartMinute: number = 0;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The day end hours in 24 hour time. Must be 0-23\n */\n @Input() dayEndHour: number = 23;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The day end minutes. Must be 0-59\n */\n @Input() dayEndMinute: number = 59;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json A custom template to use to replace the hour segment\n */\n @Input() hourSegmentTemplate: TemplateRef<any>;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The grid size to snap resizing and dragging of hourly events to\n */\n @Input() eventSnapSize: number;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json A custom template to use for the all day events label text\n */\n @Input() allDayEventsLabelTemplate: TemplateRef<any>;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The number of days in a week. Can be used to create a shorter or longer week view.\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json The first day of the week will always be the `viewDate` and `weekStartsOn` if set will be ignored\n */\n @Input() daysInWeek: number;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json A custom template to use for the current time marker\n */\n @Input() currentTimeMarkerTemplate: TemplateRef<any>;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Allow you to customise where events can be dragged and resized to.\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Return true to allow dragging and resizing to the new location, or false to prevent it\n */\n @Input() validateEventTimesChanged: (\n event: CalendarEventTimesChangedEvent\n ) => boolean;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Customise the document cursor when dragging to resize an event\n */\n @Input() resizeCursors: Partial<\n Pick<ResizeCursors, 'leftOrRight' | 'topOrBottom'>\n >;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Called when a header week day is clicked. Adding a `cssClass` property on `$event.day` will add that class to the header element\n */\n @Output() dayHeaderClicked = new EventEmitter<{\n day: WeekDay;\n sourceEvent: MouseEvent;\n }>();\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Called when an event title is clicked\n */\n @Output() eventClicked = new EventEmitter<{\n event: CalendarEvent;\n sourceEvent: MouseEvent | KeyboardEvent;\n }>();\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Called when an event is resized or dragged and dropped\n */\n @Output() eventTimesChanged =\n new EventEmitter<CalendarEventTimesChangedEvent>();\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json An output that will be called before the view is rendered for the current week.\n angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json If you add the `cssClass` property to a day in the header it will add that class to the cell element in the template\n */\n @Output() beforeViewRender =\n new EventEmitter<CalendarWeekViewBeforeRenderEvent>();\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json Called when an hour segment is clicked\n */\n @Output() hourSegmentClicked = new EventEmitter<{\n date: Date;\n sourceEvent: MouseEvent;\n }>();\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n days: WeekDay[];\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n view: WeekView;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n refreshSubscription: Subscription;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n allDayEventResizes: Map<WeekViewAllDayEvent, WeekViewAllDayEventResize> =\n new Map();\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n timeEventResizes: Map<CalendarEvent, ResizeEvent> = new Map();\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n eventDragEnterByType = {\n allDay: 0,\n time: 0,\n };\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n dragActive = false;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n dragAlreadyMoved = false;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n validateDrag: ValidateDrag;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n validateResize: (args: any) => boolean;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n dayColumnWidth: number;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n calendarId = Symbol('angular calendar week view id');\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n lastDraggedEvent: CalendarEvent;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n rtl = false;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n trackByWeekDayHeaderDate = trackByWeekDayHeaderDate;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n trackByHourSegment = trackByHourSegment;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n trackByHour = trackByHour;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n trackByWeekAllDayEvent = trackByWeekAllDayEvent;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n trackByWeekTimeEvent = trackByWeekTimeEvent;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n private lastDragEnterDate: Date;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n constructor(\n protected cdr: ChangeDetectorRef,\n protected utils: CalendarUtils,\n @Inject(LOCALE_ID) locale: string,\n protected dateAdapter: DateAdapter,\n protected element: ElementRef<HTMLElement>\n ) {\n this.locale = locale;\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n trackByHourColumn = (index: number, column: WeekViewHourColumn) =>\n column.hours[0] ? column.hours[0].segments[0].date.toISOString() : column;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n trackById = (index: number, row: WeekViewAllDayEventRow) => row.id;\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n ngOnInit(): void {\n if (this.refresh) {\n this.refreshSubscription = this.refresh.subscribe(() => {\n this.refreshAll();\n this.cdr.markForCheck();\n });\n }\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n ngOnChanges(changes: any): void {\n const refreshHeader =\n changes.viewDate ||\n changes.excludeDays ||\n changes.weekendDays ||\n changes.daysInWeek ||\n changes.weekStartsOn;\n\n const refreshBody =\n changes.viewDate ||\n changes.dayStartHour ||\n changes.dayStartMinute ||\n changes.dayEndHour ||\n changes.dayEndMinute ||\n changes.hourSegments ||\n changes.hourDuration ||\n changes.weekStartsOn ||\n changes.weekendDays ||\n changes.excludeDays ||\n changes.hourSegmentHeight ||\n changes.events ||\n changes.daysInWeek ||\n changes.minimumEventHeight;\n\n if (refreshHeader) {\n this.refreshHeader();\n }\n\n if (changes.events) {\n validateEvents(this.events);\n }\n\n if (refreshBody) {\n this.refreshBody();\n }\n\n if (refreshHeader || refreshBody) {\n this.emitBeforeViewRender();\n }\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n ngOnDestroy(): void {\n if (this.refreshSubscription) {\n this.refreshSubscription.unsubscribe();\n }\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n ngAfterViewInit() {\n this.rtl =\n typeof window !== 'undefined' &&\n getComputedStyle(this.element.nativeElement).direction === 'rtl';\n this.cdr.detectChanges();\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n timeEventResizeStarted(\n eventsContainer: HTMLElement,\n timeEvent: WeekViewTimeEvent,\n resizeEvent: ResizeEvent\n ): void {\n this.timeEventResizes.set(timeEvent.event, resizeEvent);\n this.resizeStarted(eventsContainer, timeEvent);\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n timeEventResizing(timeEvent: WeekViewTimeEvent, resizeEvent: ResizeEvent) {\n this.timeEventResizes.set(timeEvent.event, resizeEvent);\n const adjustedEvents = new Map<CalendarEvent, CalendarEvent>();\n\n const tempEvents = [...this.events];\n\n this.timeEventResizes.forEach((lastResizeEvent, event) => {\n const newEventDates = this.getTimeEventResizedDates(\n event,\n lastResizeEvent\n );\n const adjustedEvent = { ...event, ...newEventDates };\n adjustedEvents.set(adjustedEvent, event);\n const eventIndex = tempEvents.indexOf(event);\n tempEvents[eventIndex] = adjustedEvent;\n });\n\n this.restoreOriginalEvents(tempEvents, adjustedEvents, true);\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n timeEventResizeEnded(timeEvent: WeekViewTimeEvent) {\n this.view = this.getWeekView(this.events);\n const lastResizeEvent = this.timeEventResizes.get(timeEvent.event);\n if (lastResizeEvent) {\n this.timeEventResizes.delete(timeEvent.event);\n const newEventDates = this.getTimeEventResizedDates(\n timeEvent.event,\n lastResizeEvent\n );\n this.eventTimesChanged.emit({\n newStart: newEventDates.start,\n newEnd: newEventDates.end,\n event: timeEvent.event,\n type: CalendarEventTimesChangedEventType.Resize,\n });\n }\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n allDayEventResizeStarted(\n allDayEventsContainer: HTMLElement,\n allDayEvent: WeekViewAllDayEvent,\n resizeEvent: ResizeEvent\n ): void {\n this.allDayEventResizes.set(allDayEvent, {\n originalOffset: allDayEvent.offset,\n originalSpan: allDayEvent.span,\n edge: typeof resizeEvent.edges.left !== 'undefined' ? 'left' : 'right',\n });\n this.resizeStarted(\n allDayEventsContainer,\n allDayEvent,\n this.getDayColumnWidth(allDayEventsContainer)\n );\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n allDayEventResizing(\n allDayEvent: WeekViewAllDayEvent,\n resizeEvent: ResizeEvent,\n dayWidth: number\n ): void {\n const currentResize: WeekViewAllDayEventResize =\n this.allDayEventResizes.get(allDayEvent);\n\n const modifier = this.rtl ? -1 : 1;\n if (typeof resizeEvent.edges.left !== 'undefined') {\n const diff: number =\n Math.round(+resizeEvent.edges.left / dayWidth) angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json modifier;\n allDayEvent.offset = currentResize.originalOffset + diff;\n allDayEvent.span = currentResize.originalSpan - diff;\n } else if (typeof resizeEvent.edges.right !== 'undefined') {\n const diff: number =\n Math.round(+resizeEvent.edges.right / dayWidth) angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json modifier;\n allDayEvent.span = currentResize.originalSpan + diff;\n }\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n allDayEventResizeEnded(allDayEvent: WeekViewAllDayEvent): void {\n const currentResize: WeekViewAllDayEventResize =\n this.allDayEventResizes.get(allDayEvent);\n\n if (currentResize) {\n const allDayEventResizingBeforeStart = currentResize.edge === 'left';\n let daysDiff: number;\n if (allDayEventResizingBeforeStart) {\n daysDiff = allDayEvent.offset - currentResize.originalOffset;\n } else {\n daysDiff = allDayEvent.span - currentResize.originalSpan;\n }\n\n allDayEvent.offset = currentResize.originalOffset;\n allDayEvent.span = currentResize.originalSpan;\n\n const newDates = this.getAllDayEventResizedDates(\n allDayEvent.event,\n daysDiff,\n allDayEventResizingBeforeStart\n );\n\n this.eventTimesChanged.emit({\n newStart: newDates.start,\n newEnd: newDates.end,\n event: allDayEvent.event,\n type: CalendarEventTimesChangedEventType.Resize,\n });\n this.allDayEventResizes.delete(allDayEvent);\n }\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n getDayColumnWidth(eventRowContainer: HTMLElement): number {\n return Math.floor(eventRowContainer.offsetWidth / this.days.length);\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n dateDragEnter(date: Date) {\n this.lastDragEnterDate = date;\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n eventDropped(\n dropEvent: Pick<\n DropEvent<{ event?: CalendarEvent; calendarId?: symbol }>,\n 'dropData'\n >,\n date: Date,\n allDay: boolean\n ): void {\n if (\n shouldFireDroppedEvent(dropEvent, date, allDay, this.calendarId) &&\n this.lastDragEnterDate.getTime() === date.getTime() &&\n (!this.snapDraggedEvents ||\n dropEvent.dropData.event !== this.lastDraggedEvent)\n ) {\n this.eventTimesChanged.emit({\n type: CalendarEventTimesChangedEventType.Drop,\n event: dropEvent.dropData.event,\n newStart: date,\n allDay,\n });\n }\n this.lastDraggedEvent = null;\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n dragEnter(type: 'allDay' | 'time') {\n this.eventDragEnterByType[type]++;\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n dragLeave(type: 'allDay' | 'time') {\n this.eventDragEnterByType[type]--;\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n dragStarted(\n eventsContainerElement: HTMLElement,\n eventElement: HTMLElement,\n event: WeekViewTimeEvent | WeekViewAllDayEvent,\n useY: boolean\n ): void {\n this.dayColumnWidth = this.getDayColumnWidth(eventsContainerElement);\n const dragHelper: CalendarDragHelper = new CalendarDragHelper(\n eventsContainerElement,\n eventElement\n );\n this.validateDrag = ({ x, y, transform }) => {\n const isAllowed =\n this.allDayEventResizes.size === 0 &&\n this.timeEventResizes.size === 0 &&\n dragHelper.validateDrag({\n x,\n y,\n snapDraggedEvents: this.snapDraggedEvents,\n dragAlreadyMoved: this.dragAlreadyMoved,\n transform,\n });\n if (isAllowed && this.validateEventTimesChanged) {\n const newEventTimes = this.getDragMovedEventTimes(\n event,\n { x, y },\n this.dayColumnWidth,\n useY\n );\n return this.validateEventTimesChanged({\n type: CalendarEventTimesChangedEventType.Drag,\n event: event.event,\n newStart: newEventTimes.start,\n newEnd: newEventTimes.end,\n });\n }\n\n return isAllowed;\n };\n this.dragActive = true;\n this.dragAlreadyMoved = false;\n this.lastDraggedEvent = null;\n this.eventDragEnterByType = {\n allDay: 0,\n time: 0,\n };\n if (!this.snapDraggedEvents && useY) {\n this.view.hourColumns.forEach((column) => {\n const linkedEvent = column.events.find(\n (columnEvent) =>\n columnEvent.event === event.event && columnEvent !== event\n );\n // hide any linked events while dragging\n if (linkedEvent) {\n linkedEvent.width = 0;\n linkedEvent.height = 0;\n }\n });\n }\n this.cdr.markForCheck();\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n dragMove(dayEvent: WeekViewTimeEvent, dragEvent: DragMoveEvent) {\n const newEventTimes = this.getDragMovedEventTimes(\n dayEvent,\n dragEvent,\n this.dayColumnWidth,\n true\n );\n const originalEvent = dayEvent.event;\n const adjustedEvent = { ...originalEvent, ...newEventTimes };\n const tempEvents = this.events.map((event) => {\n if (event === originalEvent) {\n return adjustedEvent;\n }\n return event;\n });\n this.restoreOriginalEvents(\n tempEvents,\n new Map([[adjustedEvent, originalEvent]]),\n this.snapDraggedEvents\n );\n this.dragAlreadyMoved = true;\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n allDayEventDragMove() {\n this.dragAlreadyMoved = true;\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n dragEnded(\n weekEvent: WeekViewAllDayEvent | WeekViewTimeEvent,\n dragEndEvent: DragEndEvent,\n dayWidth: number,\n useY = false\n ): void {\n this.view = this.getWeekView(this.events);\n this.dragActive = false;\n this.validateDrag = null;\n const { start, end } = this.getDragMovedEventTimes(\n weekEvent,\n dragEndEvent,\n dayWidth,\n useY\n );\n if (\n (this.snapDraggedEvents ||\n this.eventDragEnterByType[useY ? 'time' : 'allDay'] > 0) &&\n isDraggedWithinPeriod(start, end, this.view.period)\n ) {\n this.lastDraggedEvent = weekEvent.event;\n this.eventTimesChanged.emit({\n newStart: start,\n newEnd: end,\n event: weekEvent.event,\n type: CalendarEventTimesChangedEventType.Drag,\n allDay: !useY,\n });\n }\n }\n\n protected refreshHeader(): void {\n this.days = this.utils.getWeekViewHeader({\n viewDate: this.viewDate,\n weekStartsOn: this.weekStartsOn,\n excluded: this.excludeDays,\n weekendDays: this.weekendDays,\n ...getWeekViewPeriod(\n this.dateAdapter,\n this.viewDate,\n this.weekStartsOn,\n this.excludeDays,\n this.daysInWeek\n ),\n });\n }\n\n protected refreshBody(): void {\n this.view = this.getWeekView(this.events);\n }\n\n protected refreshAll(): void {\n this.refreshHeader();\n this.refreshBody();\n this.emitBeforeViewRender();\n }\n\n protected emitBeforeViewRender(): void {\n if (this.days && this.view) {\n this.beforeViewRender.emit({\n header: this.days,\n ...this.view,\n });\n }\n }\n\n protected getWeekView(events: CalendarEvent[]) {\n return this.utils.getWeekView({\n events,\n viewDate: this.viewDate,\n weekStartsOn: this.weekStartsOn,\n excluded: this.excludeDays,\n precision: this.precision,\n absolutePositionedEvents: true,\n hourSegments: this.hourSegments,\n hourDuration: this.hourDuration,\n dayStart: {\n hour: this.dayStartHour,\n minute: this.dayStartMinute,\n },\n dayEnd: {\n hour: this.dayEndHour,\n minute: this.dayEndMinute,\n },\n segmentHeight: this.hourSegmentHeight,\n weekendDays: this.weekendDays,\n minimumEventHeight: this.minimumEventHeight,\n ...getWeekViewPeriod(\n this.dateAdapter,\n this.viewDate,\n this.weekStartsOn,\n this.excludeDays,\n this.daysInWeek\n ),\n });\n }\n\n protected getDragMovedEventTimes(\n weekEvent: WeekViewAllDayEvent | WeekViewTimeEvent,\n dragEndEvent: DragEndEvent | DragMoveEvent,\n dayWidth: number,\n useY: boolean\n ) {\n const daysDragged =\n (roundToNearest(dragEndEvent.x, dayWidth) / dayWidth) angular-calendar.report.json angular.json _.eslintrc.json package.json tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json (this.rtl ? -1 : 1);\n const minutesMoved = useY\n ? getMinutesMoved(\n dragEndEvent.y,\n this.hourSegments,\n this.hourSegmentHeight,\n this.eventSnapSize,\n this.hourDuration\n )\n : 0;\n\n const start = this.dateAdapter.addMinutes(\n addDaysWithExclusions(\n this.dateAdapter,\n weekEvent.event.start,\n daysDragged,\n this.excludeDays\n ),\n minutesMoved\n );\n let end: Date;\n if (weekEvent.event.end) {\n end = this.dateAdapter.addMinutes(\n addDaysWithExclusions(\n this.dateAdapter,\n weekEvent.event.end,\n daysDragged,\n this.excludeDays\n ),\n minutesMoved\n );\n }\n\n return { start, end };\n }\n\n protected restoreOriginalEvents(\n tempEvents: CalendarEvent[],\n adjustedEvents: Map<CalendarEvent, CalendarEvent>,\n snapDraggedEvents = true\n ) {\n const previousView = this.view;\n if (snapDraggedEvents) {\n this.view = this.getWeekView(tempEvents);\n }\n\n const adjustedEventsArray = tempEvents.filter((event) =>\n adjustedEvents.has(event)\n );\n this.view.hourColumns.forEach((column, columnIndex) => {\n previousView.hourColumns[columnIndex].hours.forEach((hour, hourIndex) => {\n hour.segments.forEach((segment, segmentIndex) => {\n column.hours[hourIndex].segments[segmentIndex].cssClass =\n segment.cssClass;\n });\n });\n\n adjustedEventsArray.forEach((adjustedEvent) => {\n const originalEvent = adjustedEvents.get(adjustedEvent);\n const existingColumnEvent = column.events.find(\n (columnEvent) =>\n columnEvent.event ===\n (snapDraggedEvents ? adjustedEvent : originalEvent)\n );\n if (existingColumnEvent) {\n // restore the original event so trackBy kicks in and the dom isn't changed\n existingColumnEvent.event = originalEvent;\n existingColumnEvent['tempEvent'] = adjustedEvent;\n if (!snapDraggedEvents) {\n existingColumnEvent.height = 0;\n existingColumnEvent.width = 0;\n }\n } else {\n // add a dummy event to the drop so if the event was removed from the original column the drag doesn't end early\n const event = {\n event: originalEvent,\n left: 0,\n top: 0,\n height: 0,\n width: 0,\n startsBeforeDay: false,\n endsAfterDay: false,\n tempEvent: adjustedEvent,\n };\n column.events.push(event);\n }\n });\n });\n adjustedEvents.clear();\n }\n\n protected getTimeEventResizedDates(\n calendarEvent: CalendarEvent,\n resizeEvent: ResizeEvent\n ) {\n const newEventDates = {\n start: calendarEvent.start,\n end: getDefaultEventEnd(\n this.dateAdapter,\n calendarEvent,\n this.minimumEventHeight\n ),\n };\n const { end, ...eventWithoutEnd } = calendarEvent;\n const smallestResizes = {\n start: this.dateAdapter.addMinutes(\n newEventDates.end,\n this.minimumEventHeight angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json -1\n ),\n end: getDefaultEventEnd(\n this.dateAdapter,\n eventWithoutEnd,\n this.minimumEventHeight\n ),\n };\n\n const modifier = this.rtl ? -1 : 1;\n\n if (typeof resizeEvent.edges.left !== 'undefined') {\n const daysDiff =\n Math.round(+resizeEvent.edges.left / this.dayColumnWidth) angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json modifier;\n const newStart = addDaysWithExclusions(\n this.dateAdapter,\n newEventDates.start,\n daysDiff,\n this.excludeDays\n );\n if (newStart < smallestResizes.start) {\n newEventDates.start = newStart;\n } else {\n newEventDates.start = smallestResizes.start;\n }\n } else if (typeof resizeEvent.edges.right !== 'undefined') {\n const daysDiff =\n Math.round(+resizeEvent.edges.right / this.dayColumnWidth) angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json modifier;\n const newEnd = addDaysWithExclusions(\n this.dateAdapter,\n newEventDates.end,\n daysDiff,\n this.excludeDays\n );\n if (newEnd > smallestResizes.end) {\n newEventDates.end = newEnd;\n } else {\n newEventDates.end = smallestResizes.end;\n }\n }\n\n if (typeof resizeEvent.edges.top !== 'undefined') {\n const minutesMoved = getMinutesMoved(\n resizeEvent.edges.top as number,\n this.hourSegments,\n this.hourSegmentHeight,\n this.eventSnapSize,\n this.hourDuration\n );\n const newStart = this.dateAdapter.addMinutes(\n newEventDates.start,\n minutesMoved\n );\n if (newStart < smallestResizes.start) {\n newEventDates.start = newStart;\n } else {\n newEventDates.start = smallestResizes.start;\n }\n } else if (typeof resizeEvent.edges.bottom !== 'undefined') {\n const minutesMoved = getMinutesMoved(\n resizeEvent.edges.bottom as number,\n this.hourSegments,\n this.hourSegmentHeight,\n this.eventSnapSize,\n this.hourDuration\n );\n const newEnd = this.dateAdapter.addMinutes(\n newEventDates.end,\n minutesMoved\n );\n if (newEnd > smallestResizes.end) {\n newEventDates.end = newEnd;\n } else {\n newEventDates.end = smallestResizes.end;\n }\n }\n\n return newEventDates;\n }\n\n protected resizeStarted(\n eventsContainer: HTMLElement,\n event: WeekViewTimeEvent | WeekViewAllDayEvent,\n dayWidth?: number\n ) {\n this.dayColumnWidth = this.getDayColumnWidth(eventsContainer);\n const resizeHelper = new CalendarResizeHelper(\n eventsContainer,\n dayWidth,\n this.rtl\n );\n this.validateResize = ({ rectangle, edges }) => {\n const isWithinBoundary = resizeHelper.validateResize({\n rectangle: { ...rectangle },\n edges,\n });\n\n if (isWithinBoundary && this.validateEventTimesChanged) {\n let newEventDates;\n if (!dayWidth) {\n newEventDates = this.getTimeEventResizedDates(event.event, {\n rectangle,\n edges,\n });\n } else {\n const modifier = this.rtl ? -1 : 1;\n if (typeof edges.left !== 'undefined') {\n const diff = Math.round(+edges.left / dayWidth) angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json modifier;\n newEventDates = this.getAllDayEventResizedDates(\n event.event,\n diff,\n !this.rtl\n );\n } else {\n const diff = Math.round(+edges.right / dayWidth) angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json modifier;\n newEventDates = this.getAllDayEventResizedDates(\n event.event,\n diff,\n this.rtl\n );\n }\n }\n return this.validateEventTimesChanged({\n type: CalendarEventTimesChangedEventType.Resize,\n event: event.event,\n newStart: newEventDates.start,\n newEnd: newEventDates.end,\n });\n }\n\n return isWithinBoundary;\n };\n this.cdr.markForCheck();\n }\n\n /bin /run /sbin angular-calendar.report.json angular.json BACKERS.md CHANGELOG.md codecov.yml CODE_OF_CONDUCT.md _.eslintrc.json LICENSE lint.after.all lint.after.recommended lint.before.all lint.before.recommended node_modules package.json pnpm-lock.yaml postcss.config.js projects README.md tea.yaml tsconfig-compodoc.json tsconfig-date-adapters.json tsconfig.json @hidden\n */\n protected getAllDayEventResizedDates(\n event: CalendarEvent,\n daysDiff: number,\n beforeStart: boolean\n ) {\n let start: Date = event.start;\n let end: Date = event.end || event.start;\n if (beforeStart) {\n start = addDaysWithExclusions(\n this.dateAdapter,\n start,\n daysDiff,\n this.excludeDays\n );\n } else {\n end = addDaysWithExclusions(\n this.dateAdapter,\n end,\n daysDiff,\n this.excludeDays\n );\n }\n\n return { start, end };\n }\n}\n",
            "usedDeprecatedRules": []
          },
          {
            "filePath": "/home/migudel/Documentos/TFG/repos/articulo/angular-calendar/projects/angular-calendar/src/test/util.ts",
            "messages": [
              {
                "ruleId": "@angular-eslint/prefer-on-push-component-change-detection",
                "severity": 2,
                "message": "The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`",
                "line": 16,
                "column": 1,
                "nodeType": "Decorator",
                "messageId": "preferOnPushComponentChangeDetection",
                "endLine": 29,
                "endColumn": 3,
                "suggestions": [
                  {
                    "messageId": "suggestAddChangeDetectionOnPush",
                    "fix": {
                      "range": [
                        18,
                        406
                      ],
                      "text": ", ChangeDetectionStrategy } from '@angular/core';\nimport { CalendarEvent } from 'angular-calendar';\n\nexport function triggerDomEvent(\n eventType: string,\n target: HTMLElement | Element,\n eventData: object = {}\n) {\n const event: Event = document.createEvent('Event');\n Object.assign(event, eventData);\n event.initEvent(eventType, true, true);\n target.dispatchEvent(event);\n return event;\n}\n\n@Component({\n changeDetection: ChangeDetectionStrategy.OnPush,"
                    },
                    "desc": "Add `ChangeDetectionStrategy.OnPush`"
                  }
                ]
              },
              {
                "ruleId": "@angular-eslint/component-max-inline-declarations",
                "severity": 2,
                "message": "`styles` has too many lines (7). Maximum allowed is 3 (https://angular.dev/style-guide#style-05-04)",
                "line": 20,
                "column": 11,
                "nodeType": "TemplateLiteral",
                "messageId": "componentMaxInlineDeclarations",
                "endLine": 28,
                "endColumn": 6
              }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "import { Component } from '@angular/core';\nimport { CalendarEvent } from 'angular-calendar';\n\nexport function triggerDomEvent(\n eventType: string,\n target: HTMLElement | Element,\n eventData: object = {}\n) {\n const event: Event = document.createEvent('Event');\n Object.assign(event, eventData);\n event.initEvent(eventType, true, true);\n target.dispatchEvent(event);\n return event;\n}\n\n@Component({\n selector: 'mwl-external-event',\n template:\n '<div class=\"external-event\" mwlDraggable [dropData]=\"{event: event}\">{{ event.title }}</div>',\n styles: `\n .external-event {\n position: fixed;\n top: 0;\n left: 0;\n width: 10px;\n height: 10px;\n }\n `,\n})\nexport class ExternalEventComponent {\n event: CalendarEvent = {\n title: 'foo',\n start: new Date(),\n draggable: true,\n color: {\n primary: 'blue',\n secondary: 'lightblue',\n },\n };\n}\n",
            "usedDeprecatedRules": []
          }
        ]
      }
    }
  }
}
