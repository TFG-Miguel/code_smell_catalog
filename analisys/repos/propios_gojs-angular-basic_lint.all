
Linting "first-app"...
[{"filePath":"/home/migudel/Documentos/TFG/repos/own2/gojs-angular-basic/src/app/app.component.ts","messages":[{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":20,"column":1,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":32,"endColumn":3,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[360,692],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport * as go from 'gojs';\nimport {\n  DataSyncService,\n  DiagramComponent,\n  OverviewComponent,\n  PaletteComponent,\n} from 'gojs-angular';\nimport { produce } from 'immer';\nimport { InspectorComponent } from './inspector/inspector.component';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/prefer-signals","severity":2,"message":"Use the `viewChild` function instead of the `ViewChild` decorator","line":34,"column":3,"nodeType":"Decorator","messageId":"preferQuerySignals","endLine":34,"endColumn":44},{"ruleId":"@angular-eslint/prefer-signals","severity":2,"message":"Use the `viewChild` function instead of the `ViewChild` decorator","line":35,"column":3,"nodeType":"Decorator","messageId":"preferQuerySignals","endLine":35,"endColumn":44}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"output":"/**\n * Sample app showcasing gojs-angular components\n * For use with gojs-angular version 2.x, assuming immutable data\n * This now uses GoJS version 3.0, using some of its new features,\n * but your app could use GoJS version 2.3.17, if you don't yet want to upgrade to v3.\n */\n\nimport { ChangeDetectorRef, Component, ViewChild, ViewEncapsulation, AfterViewInit } from '@angular/core';\nimport * as go from 'gojs';\nimport {\n  DataSyncService,\n  DiagramComponent,\n  OverviewComponent,\n  PaletteComponent,\n} from 'gojs-angular';\nimport { produce } from 'immer';\nimport { InspectorComponent } from './inspector/inspector.component';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.css',\n  imports: [\n    DiagramComponent,\n    PaletteComponent,\n    InspectorComponent,\n    OverviewComponent,\n    CommonModule,\n  ],\n  encapsulation: ViewEncapsulation.ShadowDom,\n})\nexport class AppComponent implements AfterViewInit {\n  @ViewChild('myDiagram', { static: true }) public myDiagramComponent: DiagramComponent;\n  @ViewChild('myPalette', { static: true }) public myPaletteComponent: PaletteComponent;\n\n  // Big object that holds app-level state data\n  // As of gojs-angular 2.0, immutability is expected and required of state for ease of change detection.\n  // Whenever updating state, immutability must be preserved. It is recommended to use immer for this, a small package that makes working with immutable data easy.\n  public state = {\n    // Diagram state props\n    diagramNodeData: [\n      { key: 'Alpha', text: 'Alpha', color: 'lightblue', loc: '0 0' },\n      { key: 'Beta', text: 'Beta', color: 'orange', loc: '150 0' },\n      { key: 'Gamma', text: 'Gamma', color: 'lightgreen', loc: '0 100' },\n      { key: 'Delta', text: 'Delta', color: 'pink', loc: '100 100' },\n    ],\n    diagramLinkData: [\n      { key: -1, from: 'Alpha', to: 'Beta', fromPort: 'r', toPort: 'l' },\n      { key: -2, from: 'Alpha', to: 'Gamma', fromPort: 'b', toPort: 't' },\n      { key: -3, from: 'Beta', to: 'Beta' },\n      { key: -4, from: 'Gamma', to: 'Delta', fromPort: 'r', toPort: 'l' },\n      { key: -5, from: 'Delta', to: 'Alpha', fromPort: 't', toPort: 'r' },\n    ],\n    diagramModelData: { prop: 'value' },\n    skipsDiagramUpdate: false,\n    selectedNodeData: null, // used by InspectorComponent\n\n    // Palette state props\n    paletteNodeData: [\n      { key: 'Epsilon', text: 'Epsilon', color: 'moccasin' },\n      { key: 'Kappa', text: 'Kappa', color: 'lavender' },\n    ],\n    paletteModelData: { prop: 'val' },\n  };\n\n  public diagramDivClassName = 'myDiagramDiv';\n  public paletteDivClassName = 'myPaletteDiv';\n\n  // initialize diagram / templates\n  public initDiagram(): go.Diagram {\n    const diagram = new go.Diagram({\n      'commandHandler.archetypeGroupData': { key: 'Group', isGroup: true },\n      'clickCreatingTool.archetypeNodeData': { text: 'new node', color: 'lightblue' },\n      'undoManager.isEnabled': true,\n      model: new go.GraphLinksModel({\n        linkToPortIdProperty: 'toPort', // want to support multiple ports per node\n        linkFromPortIdProperty: 'fromPort',\n        linkKeyProperty: 'key', // IMPORTANT! must be defined for merges and data sync when using GraphLinksModel\n      }),\n    });\n\n    // a helper function for defining multiple ports in node templates\n    function makePort(id: string, spot: go.Spot) {\n      return new go.Shape('Circle', {\n        desiredSize: new go.Size(8, 8),\n        opacity: 0.5,\n        fill: 'gray',\n        strokeWidth: 0,\n        portId: id,\n        alignment: spot,\n        fromSpot: spot,\n        toSpot: spot,\n        fromLinkable: true,\n        toLinkable: true,\n        cursor: 'pointer',\n      });\n    }\n\n    // define the Node template\n    diagram.nodeTemplate = new go.Node('Spot', {\n      contextMenu: (go.GraphObject.build('ContextMenu') as go.Adornment).add(\n        (go.GraphObject.build('ContextMenuButton') as go.Panel).add(\n          new go.TextBlock('Group', {\n            click: (e, obj) => e.diagram.commandHandler.groupSelection(),\n          })\n        )\n      ),\n    })\n      .bindTwoWay('location', 'loc', go.Point.parse, go.Point.stringifyFixed(1))\n      .add(\n        new go.Panel('Auto').add(\n          new go.Shape('RoundedRectangle', { strokeWidth: 0.5 }).bind('fill', 'color'),\n          new go.TextBlock({ margin: 8, editable: true }).bindTwoWay('text')\n        ),\n        // Ports\n        makePort('t', go.Spot.Top),\n        makePort('l', go.Spot.Left),\n        makePort('r', go.Spot.Right),\n        makePort('b', go.Spot.Bottom)\n      );\n\n    diagram.linkTemplate = new go.Link({\n      curve: go.Curve.Bezier,\n      fromEndSegmentLength: 30,\n      toEndSegmentLength: 30,\n    }).add(new go.Shape({ strokeWidth: 1.5 }), new go.Shape({ toArrow: 'Standard' }));\n\n    return diagram;\n  }\n\n  // When the diagram model changes, update app data to reflect those changes. Be sure to use immer's \"produce\" function to preserve immutability\n  public diagramModelChange = function (changes: go.IncrementalData) {\n    if (!changes) return;\n    const appComp = this;\n    this.state = produce(this.state, (draft) => {\n      // set skipsDiagramUpdate: true since GoJS already has this update\n      // this way, we don't log an unneeded transaction in the Diagram's undoManager history\n      draft.skipsDiagramUpdate = true;\n      draft.diagramNodeData = DataSyncService.syncNodeData(\n        changes,\n        draft.diagramNodeData,\n        appComp.observedDiagram.model\n      );\n      draft.diagramLinkData = DataSyncService.syncLinkData(\n        changes,\n        draft.diagramLinkData,\n        appComp.observedDiagram.model\n      );\n      draft.diagramModelData = DataSyncService.syncModelData(changes, draft.diagramModelData);\n      // If one of the modified nodes was the selected node used by the inspector, update the inspector selectedNodeData object\n      const modifiedNodeData = changes.modifiedNodeData;\n      if (modifiedNodeData && draft.selectedNodeData) {\n        for (let i = 0; i < modifiedNodeData.length; i++) {\n          const mn = modifiedNodeData[i];\n          const nodeKeyProperty = appComp.myDiagramComponent.diagram.model\n            .nodeKeyProperty as string;\n          if (mn[nodeKeyProperty] === draft.selectedNodeData[nodeKeyProperty]) {\n            draft.selectedNodeData = mn;\n          }\n        }\n      }\n    });\n  };\n\n  public initPalette(): go.Palette {\n    const palette = new go.Palette();\n    // define a simpler Node template than the one used by the main Diagram\n    palette.nodeTemplate = new go.Node('Auto').add(\n      new go.Shape('RoundedRectangle', { strokeWidth: 0.5 }).bind('fill', 'color'),\n      new go.TextBlock({ margin: 8 }).bind('text')\n    );\n    return palette;\n  }\n\n  constructor(private cdr: ChangeDetectorRef) {}\n\n  // Overview Component testing\n  public oDivClassName = 'myOverviewDiv';\n  public initOverview(): go.Overview {\n    return new go.Overview();\n  }\n  public observedDiagram = null;\n\n  // currently selected node; for inspector\n  public selectedNodeData: go.ObjectData = null;\n\n  public ngAfterViewInit() {\n    if (this.observedDiagram) return;\n    this.observedDiagram = this.myDiagramComponent.diagram;\n    this.cdr.detectChanges(); // IMPORTANT: without this, Angular will throw ExpressionChangedAfterItHasBeenCheckedError (dev mode only)\n\n    const appComp: AppComponent = this;\n    // listener for inspector\n    this.myDiagramComponent.diagram.addDiagramListener('ChangedSelection', function (e) {\n      if (e.diagram.selection.count === 0) {\n        appComp.selectedNodeData = null;\n      }\n      const node = e.diagram.selection.first();\n      appComp.state = produce(appComp.state, (draft) => {\n        if (node instanceof go.Node) {\n          var idx = draft.diagramNodeData.findIndex((nd) => nd.key == node.data.key);\n          var nd = draft.diagramNodeData[idx];\n          draft.selectedNodeData = nd;\n        } else {\n          draft.selectedNodeData = null;\n        }\n      });\n    });\n  } // end ngAfterViewInit\n\n  /**\n   * Update a node's data based on some change to an inspector row's input\n   * @param changedPropAndVal An object with 2 entries: \"prop\" (the node data prop changed), and \"newVal\" (the value the user entered in the inspector <input>)\n   */\n  public handleInspectorChange(changedPropAndVal) {\n    const path = changedPropAndVal.prop;\n    const value = changedPropAndVal.newVal;\n\n    this.state = produce(this.state, (draft) => {\n      var data = draft.selectedNodeData;\n      data[path] = value;\n      const key = data.key;\n      const idx = draft.diagramNodeData.findIndex((nd) => nd.key == key);\n      if (idx >= 0) {\n        draft.diagramNodeData[idx] = data;\n        draft.skipsDiagramUpdate = false; // we need to sync GoJS data with this new app state, so do not skips Diagram update\n      }\n    });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documentos/TFG/repos/own2/gojs-angular-basic/src/app/inspector/inspector-row.component.ts","messages":[{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":5,"column":1,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":9,"endColumn":3,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[79,166],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/prefer-signals","severity":2,"message":"Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator","line":11,"column":3,"nodeType":"Decorator","messageId":"preferInputSignals","endLine":11,"endColumn":11},{"ruleId":"@angular-eslint/prefer-signals","severity":2,"message":"Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator","line":14,"column":3,"nodeType":"Decorator","messageId":"preferInputSignals","endLine":14,"endColumn":11},{"ruleId":"@angular-eslint/prefer-output-readonly","severity":2,"message":"Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned","line":18,"column":10,"nodeType":"Identifier","messageId":"preferOutputReadonly","endLine":18,"endColumn":30,"suggestions":[{"messageId":"suggestAddReadonlyModifier","fix":{"range":[402,402],"text":"readonly "},"desc":"Add `readonly` modifier"}]},{"ruleId":"@angular-eslint/no-output-on-prefix","severity":2,"message":"Output bindings, including aliases, should not be named \"on\", nor prefixed with it (https://angular.dev/style-guide#style-05-16)","line":18,"column":10,"nodeType":"Identifier","messageId":"noOutputOnPrefix","endLine":18,"endColumn":30}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Input } from '@angular/core';\nimport { Component, EventEmitter, Output } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n  selector: 'app-inspector-row',\n  templateUrl: './inspector-row.component.html',\n  imports: [FormsModule],\n})\nexport class InspectorRowComponent {\n  @Input()\n  public id: string;\n\n  @Input()\n  public value: string;\n\n  @Output()\n  public onInputChangeEmitter: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor() {}\n\n  public onInputChange(e: any) {\n    // when <input> is changed, emit an Object up, with what property changed, and to what new value\n    this.onInputChangeEmitter.emit({ prop: this.id, newVal: e.target.value });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/migudel/Documentos/TFG/repos/own2/gojs-angular-basic/src/app/inspector/inspector.component.ts","messages":[{"ruleId":"@angular-eslint/prefer-on-push-component-change-detection","severity":2,"message":"The component's `changeDetection` value should be set to `ChangeDetectionStrategy.OnPush`","line":6,"column":1,"nodeType":"Decorator","messageId":"preferOnPushComponentChangeDetection","endLine":11,"endColumn":3,"suggestions":[{"messageId":"suggestAddChangeDetectionOnPush","fix":{"range":[47,231],"text":", ChangeDetectionStrategy } from '@angular/core';\nimport * as go from 'gojs';\nimport { CommonModule } from '@angular/common';\nimport { InspectorRowComponent } from './inspector-row.component';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,"},"desc":"Add `ChangeDetectionStrategy.OnPush`"}]},{"ruleId":"@angular-eslint/prefer-signals","severity":2,"message":"Use `InputSignal`s (e.g. via `input()`) for Component input properties rather than the legacy `@Input()` decorator","line":13,"column":3,"nodeType":"Decorator","messageId":"preferInputSignals","endLine":13,"endColumn":11},{"ruleId":"@angular-eslint/prefer-output-readonly","severity":2,"message":"Prefer to declare `@Output` as `readonly` since they are not supposed to be reassigned","line":17,"column":10,"nodeType":"Identifier","messageId":"preferOutputReadonly","endLine":17,"endColumn":27,"suggestions":[{"messageId":"suggestAddReadonlyModifier","fix":{"range":[498,498],"text":"readonly "},"desc":"Add `readonly` modifier"}]},{"ruleId":"@angular-eslint/no-output-on-prefix","severity":2,"message":"Output bindings, including aliases, should not be named \"on\", nor prefixed with it (https://angular.dev/style-guide#style-05-16)","line":17,"column":10,"nodeType":"Identifier","messageId":"noOutputOnPrefix","endLine":17,"endColumn":27}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"output":"import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport * as go from 'gojs';\nimport { CommonModule } from '@angular/common';\nimport { InspectorRowComponent } from './inspector-row.component';\n\n@Component({\n  selector: 'app-inspector',\n  imports: [CommonModule, InspectorRowComponent],\n  templateUrl: './inspector.component.html',\n  styleUrl: './inspector.component.css',\n})\nexport class InspectorComponent {\n  @Input()\n  public nodeData: go.ObjectData;\n\n  @Output()\n  public onInspectorChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor() {}\n\n  public onInputChange(propAndValObj: any) {\n    this.onInspectorChange.emit(propAndValObj);\n  }\n}\n","usedDeprecatedRules":[]}]
