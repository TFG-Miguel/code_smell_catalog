#!/bin/bash

# Check the args
if [ "$#" -lt 2 ] && { [[ -z "$REPOS" ]] || [[ -z "$ANALISYS_REPO" ]]; }; then
  echo "Usage: $0 <repos_dir> <reports_dir>"
  echo "Also if you want execute"
  exit 1
fi

NODE_REPORT=$ANALISYS_BIN/gen_report.js

if [ ! -e "$ANALISYS_BIN/analize_repos" ]; then
  echo "No bin found for analisys. Please found the code_smell_catalog repo and execute \`source setup\` on it"
  exit -1
elif [[ ! -e "$NODE_REPORT" ]]; then
  echo "Report js program not found"
  exit -1
fi

# Dir args
REPOS_DIR="${1:-$REPOS}"           # Dir which contains the repos files
REPORTS_DIR="${2:-$ANALISYS_REPO}" # Dir in which will be save the final report
res_recc=lint.res.recommended
res_all=lint.res.all
json_tmp=/tmp/tmp_json.json
json_tmp2=/tmp/tmp_json2.json
report_name=automatic.report

# Función de "pantalla de carga" (spinner)
loading() {
  local pid=$1 # Obtener el PID del proceso en segundo plano
  local spinstr='|/-\'
  local temp
  touch $LOCK_FILE
  while [ -e $LOCK_FILE ]; do
    temp=${spinstr#?}
    printf "\t[%c] Linting... " "$spinstr"
    spinstr=$temp${spinstr%"$temp"}
    sleep .1
    printf "\r"
  done
  printf "\r\t                          \r" # Limpiar la línea cuando termina
  echo -e "\tLinted!"
}

# Change the Angular-ESlint rules scope, by default try to change recommended to all, if -i is pressent in second arg it's inverted
function change_mode() {
  local file="$1"
  # Modos de ESLint
  local src='recommended'
  local dest='all'

  if [[ "$2" == "-i" ]]; then
    local tmp="$src"
    src="$dest"
    dest="$tmp"
  fi

  if [[ "$file" == *.json ]]; then
    preffix="plugin:@angular-eslint/"
    pattern="s|${preffix}${src}|${preffix}${dest}|"
  else
    preffix="..angular.configs.ts"
    pattern="s|${preffix}${src^}|${preffix}${dest^}|"
  fi

  sed -i $pattern $file
}

TMP_DIR=/tmp/analize.repos
LOCK_FILE=$TMP_DIR/ng.lock
mkdir -p $TMP_DIR

function generate_repository_report() {
  # Get the last commit data on JSON format
  local url_repo=$(git config --get remote.origin.url)
  local data_repo=$(git log --skip=1 -1 --pretty=format:'{"commit": "%H", "author": "%an", "date": "%ad", "message": "%s"}')

  echo -e "HEAD:$data_repo\nurl:$url_repo"
  for mode in '' -i; do
    change_mode $ESLINT_CONFIG $mode
    echo -n "mode:"
    if [ -z "$mode" ]; then
      echo "recommended"
    else
      echo "all"
    fi

    ng lint --format=json 2>>/tmp/ng.lint.report.log | sed '/^$/d;/^All files pass linting.$/d;s/^Linting \"\(.*\)\"...$/project:\1/g'
    rm -f $LOCK_FILE
  done
}

# Recorremos todos los repositorios
i=0
total=$(ls -d "$REPOS_DIR"/*/*/ | wc -l)
reports=()
for repo in "$REPOS_DIR"/*/*/; do
  if [ -d "$repo" ]; then

    repo_name=$(echo $repo | awk -F'/' '{print $(NF-1)}')
    repo_source=$(echo $repo | awk -F'/' '{print $(NF-2)}')
    report_file=$repo_name.lint.txt

    i=$(($i + 1))
    printf "[ %02d / %02d ] " $i $total
    echo "repo: $repo_name [$repo_source] ($repo)"

    # Acceder al repositorio
    cd "$repo" || continue

    # Buscar el primer archivo de configuración de eslint
    ESLINT_CONFIG=$(find . -type f \( -name ".eslintrc.json" -or -name "eslint.json" -or -name "eslint.config.js" -or -name "eslint.config.mjs" \) ! -path "*/node_modules/*" | tail -n 1 | cut -d'/' -f2-)

    if [ -z "$ESLINT_CONFIG" ]; then
      echo -e "\n\tNo ESLint config found in $repo"
      continue
    fi

    echo -e "\n\tConfig found at: $ESLINT_CONFIG"

    REPO_DIR_NAME=$(dirname $ESLINT_CONFIG)
    if [[ -n "$REPO_DIR_NAME" && "$REPO_DIR_NAME" != "." ]]; then
      echo -e "\tGoing into $REPO_DIR_NAME"
      cd $REPO_DIR_NAME
      ESLINT_CONFIG=$(basename $ESLINT_CONFIG)
    fi
    echo ""

    if [ ! -e $report_file ]; then
      # echo -en "\tLinting... "
      generate_repository_report $ESLINT_CONFIG >$report_file &
      loading
      # echo -e "\r\tLinted    "
    else
      echo -e "\tProject already linted"
    fi

    abs_path_report=$PWD/$report_file
    reports+=("$abs_path_report")
    echo -e "\tReport generated [$abs_path_report]\n\n"
  fi
done
node_command="node $NODE_REPORT -i -r $RESULT_DIR ${reports[@]}"
$node_command
