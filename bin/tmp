{
  'angular-calendar.lint.all-demos': [
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/carbon-ad/carbon-ad.component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 2,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: 'import {\n' +
        '  AfterViewInit,\n' +
        '  Component,\n' +
        '  ElementRef,\n' +
        '  ViewEncapsulation,\n' +
        "} from '@angular/core';\n" +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-carbon-ad',\n" +
        "  templateUrl: './carbon-ad.component.html',\n" +
        "  styleUrls: ['./carbon-ad.component.scss'],\n" +
        '  encapsulation: ViewEncapsulation.None,\n' +
        '})\n' +
        'export class CarbonAdComponent implements AfterViewInit {\n' +
        '  constructor(private elementRef: ElementRef<HTMLElement>) {}\n' +
        '\n' +
        '  ngAfterViewInit(): void {\n' +
        "    const script = document.createElement('script');\n" +
        '    script.src =\n' +
        "      '//cdn.carbonads.com/carbon.js?serve=CESIVK3U&placement=mattlewis92githubio';\n" +
        "    script.id = '_carbonads_js';\n" +
        '    this.elementRef.nativeElement.append(script);\n' +
        '  }\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-app.component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: "import { Component, OnInit, ViewChild } from '@angular/core';\n" +
        "import { Router, NavigationStart, NavigationEnd } from '@angular/router';\n" +
        "import { map, take, filter } from 'rxjs/operators';\n" +
        "import StackBlitzSDK from '@stackblitz/sdk';\n" +
        "import { Angulartics2GoogleGlobalSiteTag } from 'angulartics2';\n" +
        "import { sources as demoUtilsSources } from './demo-modules/demo-utils/sources';\n" +
        "import { Subject } from 'rxjs';\n" +
        "import { NgbNav } from '@ng-bootstrap/ng-bootstrap/nav/nav';\n" +
        '\n' +
        'interface Source {\n' +
        '  filename: string;\n' +
        '  contents: {\n' +
        '    raw: string;\n' +
        '    highlighted: string;\n' +
        '  };\n' +
        '  language: string;\n' +
        '}\n' +
        '\n' +
        'interface Demo {\n' +
        '  label: string;\n' +
        '  path: string;\n' +
        '  sources?: Source[];\n' +
        '  darkTheme: boolean;\n' +
        '  tags: string[];\n' +
        '}\n' +
        '\n' +
        'function getSources(folder: string): Promise<Source[]> {\n' +
        "  return import('./demo-modules/' + folder + '/sources.ts').then(\n" +
        '    ({ sources }) => {\n' +
        '      return sources.map(({ filename, contents }) => {\n' +
        '        const [, extension]: RegExpMatchArray = filename.match(/^.+\\.(.+)$/);\n' +
        '        const languages: { [extension: string]: string } = {\n' +
        "          ts: 'typescript',\n" +
        "          html: 'html',\n" +
        "          css: 'css',\n" +
        '        };\n' +
        '        return {\n' +
        '          filename,\n' +
        '          contents: {\n' +
        '            raw: contents.raw.default\n' +
        '              .replace(\n' +
        `                ",\\n    RouterModule.forChild([{ path: '', component: DemoComponent }])",\n` +
        "                ''\n" +
        '              )\n' +
        `              .replace("\\nimport { RouterModule } from '@angular/router';", ''),\n` +
        '            highlighted: contents.highlighted.default // TODO - move this into a regexp replace for both\n' +
        '              .replace(\n' +
        `                ',\\n    RouterModule.forChild([{ path: <span class="hljs-string">\\'\\'</span>, component: DemoComponent }])',\n` +
        "                ''\n" +
        '              )\n' +
        '              .replace(\n' +
        `                '\\n<span class="hljs-keyword">import</span> { RouterModule } from <span class="hljs-string">\\'@angular/router\\'</span>;',\n` +
        "                ''\n" +
        '              ),\n' +
        '          },\n' +
        '          language: languages[extension],\n' +
        '        };\n' +
        '      });\n' +
        '    }\n' +
        '  );\n' +
        '}\n' +
        '\n' +
        'const dependencyVersions: any = {\n' +
        "  angular: require('@angular/core/package.json').version,\n" +
        "  angularRouter: require('@angular/router/package.json').version,\n" +
        "  angularCalendar: require('../../../package.json').version,\n" +
        "  calendarUtils: require('calendar-utils/package.json').version,\n" +
        "  angularResizableElement: require('angular-resizable-element/package.json')\n" +
        '    .version,\n' +
        "  angularDraggableDroppable: require('angular-draggable-droppable/package.json')\n" +
        '    .version,\n' +
        "  dateFns: require('date-fns/package.json').version,\n" +
        "  rxjs: require('rxjs/package.json').version,\n" +
        "  bootstrap: require('bootstrap/package.json').version,\n" +
        "  zoneJs: require('zone.js/package.json').version,\n" +
        "  ngBootstrap: require('@ng-bootstrap/ng-bootstrap/package.json').version,\n" +
        "  rrule: require('rrule/package.json').version,\n" +
        "  fontAwesome: require('@fortawesome/fontawesome-free/package.json').version,\n" +
        "  positioning: require('positioning/package.json').version,\n" +
        "  flatpickr: require('flatpickr/package.json').version,\n" +
        "  angularxFlatpickr: require('angularx-flatpickr/package.json').version,\n" +
        '};\n' +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-demo-app',\n" +
        "  styleUrls: ['./demo-app.css'],\n" +
        "  templateUrl: './demo-app.html',\n" +
        '})\n' +
        'export class DemoAppComponent implements OnInit {\n' +
        "  @ViewChild('nav') nav: NgbNav;\n" +
        '  demos: Demo[] = [];\n' +
        '  filteredDemos: Demo[] = [];\n' +
        '  activeDemo: Demo;\n' +
        '  isMenuVisible = false;\n' +
        '  firstDemoLoaded = false;\n' +
        "  searchText = '';\n" +
        '  copied$ = new Subject<boolean>();\n' +
        '\n' +
        '  constructor(\n' +
        '    private router: Router,\n' +
        '    analytics: Angulartics2GoogleGlobalSiteTag\n' +
        '  ) {\n' +
        '    analytics.startTracking();\n' +
        '  }\n' +
        '\n' +
        '  ngOnInit() {\n' +
        '    const defaultRoute = this.router.config.find(\n' +
        "      (route) => route.path === '**'\n" +
        '    );\n' +
        '\n' +
        '    this.demos = this.router.config\n' +
        "      .filter((route) => route.path !== '**')\n" +
        '      .map((route) => ({\n' +
        '        path: route.path,\n' +
        '        label: route.data.label,\n' +
        '        darkTheme: route.data.darkTheme,\n' +
        '        tags: route.data.tags || [],\n' +
        '      }));\n' +
        '    this.updateFilteredDemos();\n' +
        '\n' +
        '    this.router.events\n' +
        '      .pipe(filter((event) => event instanceof NavigationEnd))\n' +
        '      .pipe(take(1))\n' +
        '      .subscribe(() => {\n' +
        '        this.firstDemoLoaded = true;\n' +
        '      });\n' +
        '\n' +
        '    this.router.events\n' +
        '      .pipe(filter((event) => event instanceof NavigationStart))\n' +
        '      .pipe(\n' +
        '        map((event: NavigationStart) => {\n' +
        "          if (event.url === '/') {\n" +
        '            return { url: `/${defaultRoute.redirectTo}` };\n' +
        '          }\n' +
        '          return event;\n' +
        '        })\n' +
        '      )\n' +
        '      .subscribe((event: NavigationStart) => {\n' +
        '        this.activeDemo = this.demos.find(\n' +
        '          (demo) => `/${demo.path}` === event.url\n' +
        '        );\n' +
        '        getSources(this.activeDemo.path).then((sources) => {\n' +
        '          this.activeDemo.sources = sources;\n' +
        '        });\n' +
        '      });\n' +
        '\n' +
        "    const script = document.createElement('script');\n" +
        '    script.async = true;\n' +
        "    script.setAttribute('data-uid', '7c1627e655');\n" +
        "    script.src = 'https://angular-calendar.ck.page/7c1627e655/index.js';\n" +
        "    document.getElementsByTagName('head')[0].appendChild(script);\n" +
        '  }\n' +
        '\n' +
        '  updateFilteredDemos() {\n' +
        '    this.filteredDemos = this.demos.filter(\n' +
        '      (demo) =>\n' +
        '        !this.searchText ||\n' +
        '        [demo.label.toLowerCase(), ...demo.tags].some((tag) =>\n' +
        '          tag.includes(this.searchText.toLowerCase())\n' +
        '        )\n' +
        '    );\n' +
        '  }\n' +
        '\n' +
        '  editInStackblitz(demo: Demo): void {\n' +
        '    const files: {\n' +
        '      [path: string]: string;\n' +
        '    } = {\n' +
        "      'index.html': `\n" +
        '<link href="https://cdn.jsdelivr.net/npm/bootstrap@${dependencyVersions.bootstrap}/dist/css/bootstrap.min.css" rel="stylesheet">\n' +
        '<link href="https://unpkg.com/@fortawesome/fontawesome-free@${dependencyVersions.fontAwesome}/css/all.css" rel="stylesheet">\n' +
        '<link href="https://unpkg.com/angular-calendar@${dependencyVersions.angularCalendar}/css/angular-calendar.css" rel="stylesheet">\n' +
        '<link href="https://unpkg.com/flatpickr@${dependencyVersions.flatpickr}/dist/flatpickr.css" rel="stylesheet">\n' +
        '<mwl-demo-component>Loading...</mwl-demo-component>\n' +
        '`.trim(),\n' +
        "      'main.ts': `\n" +
        "import 'zone.js';\n" +
        "import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n" +
        "import { BrowserModule } from '@angular/platform-browser';\n" +
        "import { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n" +
        "import { NgModule } from '@angular/core';\n" +
        "import { DemoModule } from './demo/module';\n" +
        "import { DemoComponent } from './demo/component';\n" +
        '\n' +
        '@NgModule({\n' +
        '  imports: [\n' +
        '    BrowserModule,\n' +
        '    BrowserAnimationsModule,\n' +
        '    DemoModule\n' +
        '  ],\n' +
        '  bootstrap: [DemoComponent]\n' +
        '})\n' +
        'export class BootstrapModule {}\n' +
        '\n' +
        'platformBrowserDynamic().bootstrapModule(BootstrapModule).then(ref => {\n' +
        '  // Ensure Angular destroys itself on hot reloads.\n' +
        "  if (window['ngRef']) {\n" +
        "    window['ngRef'].destroy();\n" +
        '  }\n' +
        "  window['ngRef'] = ref;\n" +
        '\n' +
        '  // Otherwise, log the boot error\n' +
        '}).catch(err => console.error(err));\n' +
        '`.trim(),\n' +
        '    };\n' +
        '\n' +
        '    demoUtilsSources.forEach((source) => {\n' +
        '      files[`demo-utils/${source.filename}`] = source.contents.raw.default;\n' +
        '    });\n' +
        '\n' +
        '    demo.sources.forEach((source) => {\n' +
        '      files[`demo/${source.filename}`] = source.contents.raw;\n' +
        '    });\n' +
        '\n' +
        '    StackBlitzSDK.openProject(\n' +
        '      {\n' +
        "        title: 'Angular Calendar Demo',\n" +
        '        description: demo.label,\n' +
        "        template: 'angular-cli',\n" +
        "        tags: ['angular-calendar'],\n" +
        '        files,\n' +
        '        dependencies: {\n' +
        "          '@angular/core': dependencyVersions.angular,\n" +
        "          '@angular/common': dependencyVersions.angular,\n" +
        "          '@angular/compiler': dependencyVersions.angular,\n" +
        "          '@angular/platform-browser': dependencyVersions.angular,\n" +
        "          '@angular/platform-browser-dynamic': dependencyVersions.angular,\n" +
        "          '@angular/router': dependencyVersions.angular,\n" +
        "          '@angular/forms': dependencyVersions.angular,\n" +
        "          '@angular/animations': dependencyVersions.angular,\n" +
        '          rxjs: dependencyVersions.rxjs,\n' +
        "          'zone.js': dependencyVersions.zoneJs,\n" +
        "          'angular-draggable-droppable': `^${dependencyVersions.angularDraggableDroppable}`,\n" +
        "          'angular-resizable-element': `^${dependencyVersions.angularResizableElement}`,\n" +
        "          'date-fns': dependencyVersions.dateFns,\n" +
        "          'angular-calendar': dependencyVersions.angularCalendar,\n" +
        "          '@ng-bootstrap/ng-bootstrap': '5.0.0', // pinned due to issue with stackblitz generation\n" +
        '          rrule: dependencyVersions.rrule,\n' +
        "          'calendar-utils': dependencyVersions.calendarUtils,\n" +
        '          flatpickr: dependencyVersions.flatpickr,\n' +
        "          'angularx-flatpickr': dependencyVersions.angularxFlatpickr,\n" +
        '        },\n' +
        '      },\n' +
        '      {\n' +
        "        openFile: 'demo/component.ts',\n" +
        '      }\n' +
        '    );\n' +
        '  }\n' +
        '\n' +
        '  copied() {\n' +
        '    this.copied$.next(true);\n' +
        '    setTimeout(() => {\n' +
        '      this.copied$.next(false);\n' +
        '    }, 1000);\n' +
        '  }\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-app.html',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 29,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 15,
      fixableWarningCount: 0,
      source: '<nav\n' +
        '  class="navbar navbar-expand-lg navbar-light bg-light fixed-top"\n' +
        '  [class.navbar-dark]="activeDemo?.darkTheme"\n' +
        '  [class.bg-dark]="activeDemo?.darkTheme"\n' +
        '  role="navigation"\n' +
        '>\n' +
        '  <div class="container-fluid">\n' +
        '    <a class="navbar-brand" href="#">Angular 15.0+ calendar</a>\n' +
        '\n' +
        '    <button\n' +
        '      type="button"\n' +
        '      class="navbar-toggler"\n' +
        '      (click)="isMenuVisible = !isMenuVisible"\n' +
        '    >\n' +
        '      <span class="navbar-toggler-icon"></span>\n' +
        '    </button>\n' +
        '\n' +
        '    <div class="collapse navbar-collapse" [ngbCollapse]="!isMenuVisible">\n' +
        '      <ul class="navbar-nav me-auto mb-2 mb-lg-0">\n' +
        '        <li class="nav-item active">\n' +
        '          <a class="nav-link" href="javascript:;">\n' +
        '            <i class="fas fa-laptop"></i> Demos\n' +
        '          </a>\n' +
        '        </li>\n' +
        '        <li class="nav-item">\n' +
        '          <a\n' +
        '            class="nav-link"\n' +
        '            href="https://github.com/mattlewis92/angular-calendar#getting-started"\n' +
        '          >\n' +
        '            <i class="fas fa-map-pin"></i> Getting started\n' +
        '          </a>\n' +
        '        </li>\n' +
        '        <li class="nav-item">\n' +
        '          <a\n' +
        '            class="nav-link"\n' +
        '            href="https://mattlewis92.github.io/angular-calendar/docs/"\n' +
        '          >\n' +
        '            <i class="fas fa-book"></i> API docs\n' +
        '          </a>\n' +
        '        </li>\n' +
        '        <li class="nav-item">\n' +
        '          <a\n' +
        '            class="nav-link"\n' +
        '            data-formkit-toggle="7c1627e655"\n' +
        '            href="javascript:;"\n' +
        '            (click)="isMenuVisible = false"\n' +
        '          >\n' +
        '            <i class="fas fa-fw fa-envelope"></i>Subscribe\n' +
        '          </a>\n' +
        '        </li>\n' +
        '        <li class="nav-item">\n' +
        '          <a\n' +
        '            class="nav-link text-danger"\n' +
        '            href="https://github.com/users/mattlewis92/sponsorship"\n' +
        '            target="_blank"\n' +
        '          >\n' +
        '            <i class="fas fa-dollar-sign"></i> Donate\n' +
        '          </a>\n' +
        '        </li>\n' +
        '      </ul>\n' +
        '      <ul class="nav navbar-nav ml-md-auto">\n' +
        '        <li class="nav-item">\n' +
        '          <a\n' +
        '            class="nav-link"\n' +
        '            href="https://www.npmjs.com/package/angular-calendar"\n' +
        '            target="_blank"\n' +
        `            [ngbTooltip]="'View on npm'"\n` +
        '          >\n' +
        '            <i class="fab fa-lg fa-npm"></i>\n' +
        '            <span class="d-lg-none">View on npm</span>\n' +
        '          </a>\n' +
        '        </li>\n' +
        '        <li class="nav-item">\n' +
        '          <a\n' +
        '            class="nav-link"\n' +
        '            href="https://github.com/mattlewis92/angular-calendar"\n' +
        '            target="_blank"\n' +
        `            [ngbTooltip]="'View on GitHub'"\n` +
        '          >\n' +
        '            <i class="fab fa-lg fa-github"></i>\n' +
        '            <span class="d-lg-none">View on GitHub</span>\n' +
        '          </a>\n' +
        '        </li>\n' +
        '        <li class="nav-item">\n' +
        '          <a\n' +
        '            class="nav-link text-primary"\n' +
        '            href="https://twitter.com/mattlewis92_"\n' +
        '            target="_blank"\n' +
        `            [ngbTooltip]="'Follow me on Twitter'"\n` +
        '          >\n' +
        '            <i class="fab fa-lg fa-twitter"></i>\n' +
        '            <span class="d-lg-none">Follow me on Twitter</span>\n' +
        '          </a>\n' +
        '        </li>\n' +
        '      </ul>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</nav>\n' +
        '\n' +
        '<ng-template #loading>\n' +
        '  <div class="card">\n' +
        '    <div class="card-body text-center">\n' +
        '      <i class="fas fa-spin fa-spinner fa-5x"></i> <br />\n' +
        '      Loading demo...\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</ng-template>\n' +
        '\n' +
        '<div class="container-fluid main-content">\n' +
        '  <div class="row fill-height">\n' +
        '    <div\n' +
        '      class="col fill-height scroll-y demo-container"\n' +
        '      mwlDraggableScrollContainer\n' +
        '    >\n' +
        '      <div class="card" *ngIf="firstDemoLoaded; else loading">\n' +
        '        <div class="card-header">\n' +
        '          <div class="row">\n' +
        '            <div class="col-md-6"><h3>{{ activeDemo.label }}</h3></div>\n' +
        '            <div class="col-md-6">\n' +
        '              <button\n' +
        '                class="btn btn-info float-end"\n' +
        '                (click)="editInStackblitz(activeDemo)"\n' +
        '              >\n' +
        '                <i class="fas fa-edit"></i> Edit in Stackblitz\n' +
        '              </button>\n' +
        '            </div>\n' +
        '          </div>\n' +
        '        </div>\n' +
        '        <div class="card-body">\n' +
        '          <ul ngbNav #nav="ngbNav" class="justify-content-start nav-tabs">\n' +
        '            <li ngbNavItem domId="demo">\n' +
        '              <a ngbNavLink><i class="fas fa-fw fa-laptop"></i> Live demo</a>\n' +
        '              <ng-template ngbNavContent>\n' +
        '                <div class="spacer-top"><router-outlet></router-outlet></div>\n' +
        '              </ng-template>\n' +
        '            </li>\n' +
        '\n' +
        '            <li ngbNavItem *ngFor="let source of activeDemo?.sources">\n' +
        '              <a ngbNavLink>\n' +
        '                <span [ngSwitch]="source.language">\n' +
        `                  <i class="fab fa-fw fa-html5" *ngSwitchCase="'html'"></i>\n` +
        `                  <i class="fab fa-fw fa-css3" *ngSwitchCase="'css'"></i>\n` +
        '                  <i class="fas fa-fw fa-code" *ngSwitchDefault></i>\n' +
        '                </span>\n' +
        '                {{ source.filename }}\n' +
        '              </a>\n' +
        '              <ng-template ngbNavContent>\n' +
        '                <div class="code-container">\n' +
        '                  <button\n' +
        '                    class="btn btn-outline-primary copy-code"\n' +
        '                    (click)="copied()"\n' +
        '                    ngxClipboard\n' +
        '                    [cbContent]="source.contents.raw"\n' +
        `                    [ngbTooltip]="'Copy source'"\n` +
        `                    [placement]="'top-right'"\n` +
        '                  >\n' +
        '                    <i\n' +
        '                      class="fa"\n' +
        `                      [ngClass]="{'fa-copy': (copied$ | async) !== true, 'fa-check': (copied$ | async) }"\n` +
        '                    ></i>\n' +
        '                  </button>\n' +
        '                  <pre><code [innerHTML]="source.contents.highlighted"></code></pre>\n' +
        '                </div>\n' +
        '              </ng-template>\n' +
        '            </li>\n' +
        '          </ul>\n' +
        '          <div [ngbNavOutlet]="nav"></div>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '    <div class="fill-height sidebar-nav scroll-y">\n' +
        '      <mwl-carbon-ad></mwl-carbon-ad>\n' +
        '      <input\n' +
        '        type="search"\n' +
        '        class="form-control"\n' +
        '        placeholder="Search demos..."\n' +
        '        [(ngModel)]="searchText"\n' +
        '        (ngModelChange)="updateFilteredDemos()"\n' +
        '      />\n' +
        '      <ul class="list-unstyled spacer-top">\n' +
        '        <li *ngFor="let demo of filteredDemos">\n' +
        '          <a\n' +
        '            [routerLink]="[demo.path]"\n' +
        '            [class.active]="activeDemo?.path === demo.path"\n' +
        `            (click)="nav.select('demo')"\n` +
        '          >\n' +
        '            {{ demo.label }}\n' +
        '          </a>\n' +
        '        </li>\n' +
        '      </ul>\n' +
        '      <em *ngIf="filteredDemos.length === 0">No matching demos found</em>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n',
      usedDeprecatedRules: [Array]
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-app.module.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 2,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 2,
      fixableWarningCount: 0,
      source: "import { NgModule } from '@angular/core';\n" +
        "import { RouterModule } from '@angular/router';\n" +
        "import { BrowserModule } from '@angular/platform-browser';\n" +
        "import { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n" +
        'import {\n' +
        '  NgbNavModule,\n' +
        '  NgbCollapseModule,\n' +
        '  NgbTooltipModule,\n' +
        "} from '@ng-bootstrap/ng-bootstrap';\n" +
        "import { Angulartics2Module } from 'angulartics2';\n" +
        "import { DragAndDropModule } from 'angular-draggable-droppable';\n" +
        "import { DemoAppComponent } from './demo-app.component';\n" +
        "import { DemoComponent as DefaultDemoComponent } from './demo-modules/kitchen-sink/component';\n" +
        "import { DemoModule as DefaultDemoModule } from './demo-modules/kitchen-sink/module';\n" +
        "import { environment } from '../environments/environment';\n" +
        "import { FormsModule } from '@angular/forms';\n" +
        "import { ClipboardModule } from 'ngx-clipboard';\n" +
        "import { CarbonAdComponent } from './carbon-ad/carbon-ad.component';\n" +
        '\n' +
        '@NgModule({\n' +
        '  declarations: [DemoAppComponent, CarbonAdComponent],\n' +
        '  imports: [\n' +
        '    BrowserModule,\n' +
        '    BrowserAnimationsModule,\n' +
        '    FormsModule,\n' +
        '    NgbNavModule,\n' +
        '    NgbCollapseModule,\n' +
        '    NgbTooltipModule,\n' +
        '    DragAndDropModule,\n' +
        '    Angulartics2Module.forRoot({\n' +
        '      developerMode: !environment.production,\n' +
        '    }),\n' +
        '    ClipboardModule,\n' +
        '    DefaultDemoModule,\n' +
        '    RouterModule.forRoot(\n' +
        '      [\n' +
        '        {\n' +
        "          path: 'kitchen-sink',\n" +
        '          component: DefaultDemoComponent,\n' +
        '          data: {\n' +
        "            label: 'Kitchen sink',\n" +
        '          },\n' +
        '        },\n' +
        '        {\n' +
        "          path: 'async-events',\n" +
        '          loadChildren: () =>\n' +
        "            import('./demo-modules/async-events/module').then(\n" +
        '              (m) => m.DemoModule\n' +
        '            ),\n' +
        '          data: {\n' +
        "            label: 'Async events',\n" +
        '          },\n' +
        '        },\n' +
        '        {\n' +
        "          path: 'optional-event-end-dates',\n" +
        '          loadChildren: () =>\n' +
        "            import('./demo-modules/optional-event-end-dates/module').then(\n" +
        '              (m) => m.DemoModule\n' +
        '            ),\n' +
        '          data: {\n' +
        "            label: 'Optional event end dates',\n" +
        '          },\n' +
        '        },\n' +
        '        {\n' +
        "          path: 'editable-deletable-events',\n" +
        '          loadChildren: () =>\n' +
        "            import('./demo-modules/editable-deletable-events/module').then(\n" +
        '              (m) => m.DemoModule\n' +
        '            ),\n' +
        '          data: {\n' +
        "            label: 'Editable / deletable events',\n" +
        '          },\n' +
        '        },\n' +
        '        {\n' +
        "          path: 'draggable-events',\n" +
        '          loadChildren: () =>\n' +
        "            import('./demo-modules/draggable-events/module').then(\n" +
        '              (m) => m.DemoModule\n' +
        '            ),\n' +
        '          data: {\n' +
        "            label: 'Draggable events',\n" +
        '          },\n' +
        '        },\n' +
        '        {\n' +
        "          path: 'resizable-events',\n" +
        '          loadChildren: () =>\n' +
        "            import('./demo-modules/resizable-events/module').then(\n" +
        '              (m) => m.DemoModule\n' +
        '            ),\n' +
        '          data: {\n' +
        "            label: 'Resizable events',\n" +
        '          },\n' +
        '        },\n' +
        '        {\n' +
        "          path: 'month-view-badge-total',\n" +
        '          loadChildren: () =>\n' +
        "            import('./demo-modules/month-view-badge-total/module').then(\n" +
        '              (m) => m.DemoModule\n' +
        '            ),\n' +
        '          data: {\n' +
        "            label: 'Month view badge total',\n" +
        '          },\n' +
        '        },\n' +
        '        {\n' +
        "          path: 'recurring-events',\n" +
        '          loadChildren: () =>\n' +
        "            import('./demo-modules/recurring-events/module').then(\n" +
        '              (m) => m.DemoModule\n' +
        '            ),\n' +
        '          data: {\n' +
        "            label: 'Recurring events',\n" +
        '          },\n' +
        '        },\n' +
        '        {\n' +
        "          path: 'custom-event-class',\n" +
        '          loadChildren: () =>\n' +
        "            import('./demo-modules/custom-event-class/module').then(\n" +
        '              (m) => m.DemoModule\n' +
        '            ),\n' +
        '          data: {\n' +
        "            label: 'Custom event class',\n" +
        '          },\n' +
        '        },\n' +
        '        {\n' +
        "          path: 'clickable-events',\n" +
        '          loadChildren: () =>\n' +
        "            import('./demo-modules/clickable-events/module').then(\n" +
        '              (m) => m.DemoModule\n' +
        '            ),\n' +
        '          data: {\n' +
        "            label: 'Clickable events',\n" +
        '          },\n' +
        '        },\n' +
        '        {\n' +
        "          path: 'clickable-days',\n" +
        '          loadChildren: () =>\n' +
        "            import('./demo-modules/clickable-days/module').then(\n" +
        '              (m) => m.DemoModule\n' +
        '            ),\n' +
        '          data: {\n' +
        "            label: 'Clickable times',\n" +
        '          },\n' +
        '        },\n' +
        '        {\n' +
        "          path: 'custom-hour-duration',\n" +
        '          loadChildren: () =>\n' +
        "            import('./demo-modules/custom-hour-duration/module').then(\n" +
        '              (m) => m.DemoModule\n' +
        '            ),\n' +
        '          data: {\n' +
        "            label: 'Custom hour duration',\n" +
        '          },\n' +
        '        },\n' +
        '        {\n' +
        "          path: 'day-view-start-end',\n" +
        '          loadChildren: () =>\n' +
        "            import('./demo-modules/day-view-start-end/module').then(\n" +
        '              (m) => m.DemoModule\n' +
        '            ),\n' +
        '          data: {\n' +
        "            label: 'Day view start / end time',\n" +
        '          },\n' +
        '        },\n' +
        '        {\n' +
        "          path: 'day-view-hour-split',\n" +
        '          loadChildren: () =>\n' +
        "            import('./demo-modules/day-view-hour-split/module').then(\n" +
        '              (m) => m.DemoModule\n' +
        '            ),\n' +
        '          data: {\n' +
        "            label: 'Day view hour split',\n" +
        '          },\n' +
        '        },\n' +
        '        {\n' +
        "          path: 'navigating-between-views',\n" +
        '          loadChildren: () =>\n' +
        "            import('./demo-modules/navigating-between-views/module').then(\n" +
        '              (m) => m.DemoModule\n' +
        '            ),\n' +
        '          data: {\n' +
        "            label: 'Navigating between views',\n" +
        '          },\n' +
        '        },\n' +
        '        {\n' +
        "          path: 'before-view-render',\n" +
        '          loadChildren: () =>\n' +
        "            import('./demo-modules/before-view-render/module').then(\n" +
        '              (m) => m.DemoModule\n' +
        '            ),\n' +
        '          data: {\n' +
        "            label: 'Before view render',\n" +
        "            tags: ['disable'],\n" +
        '          },\n' +
        '        },\n' +
        '        {\n' +
        "          path: 'exclude-days',\n" +
        '          loadChildren: () =>\n' +
        "            import('./demo-modules/exclude-days/module').then(\n" +
        '              (m) => m.DemoModule\n' +
        '            ),\n' +
        '          data: {\n' +
        "            label: 'Exclude Weekends',\n" +
        '          },\n' +
        '        },\n' +
        '        {\n' +
        "          path: 'i18n',\n" +
        '          loadChildren: () =>\n' +
        "            import('./demo-modules/i18n/module').then((m) => m.DemoModule),\n" +
        '          data: {\n' +
        "            label: 'Internationalisation',\n" +
        "            tags: ['translation', 'i18n', 'translate', 'locale'],\n" +
        '          },\n' +
        '        },\n' +
        '        {\n' +
        "          path: 'draggable-external-events',\n" +
        '          loadChildren: () =>\n' +
        "            import('./demo-modules/draggable-external-events/module').then(\n" +
        '              (m) => m.DemoModule\n' +
        '            ),\n' +
        '          data: {\n' +
        "            label: 'Draggable external events',\n" +
        '          },\n' +
        '        },\n' +
        '        {\n' +
        "          path: 'all-day-events',\n" +
        '          loadChildren: () =>\n' +
        "            import('./demo-modules/all-day-events/module').then(\n" +
        '              (m) => m.DemoModule\n' +
        '            ),\n' +
        '          data: {\n' +
        "            label: 'All day events',\n" +
        '          },\n' +
        '        },\n' +
        '        {\n' +
        "          path: 'customise-date-formats',\n" +
        '          loadChildren: () =>\n' +
        "            import('./demo-modules/customise-date-formats/module').then(\n" +
        '              (m) => m.DemoModule\n' +
        '            ),\n' +
        '          data: {\n' +
        "            label: 'Customise date formats',\n" +
        '          },\n' +
        '        },\n' +
        '        {\n' +
        "          path: 'show-dates-on-titles',\n" +
        '          loadChildren: () =>\n' +
        "            import('./demo-modules/show-dates-on-titles/module').then(\n" +
        '              (m) => m.DemoModule\n' +
        '            ),\n' +
        '          data: {\n' +
        "            label: 'Show dates on title',\n" +
        '          },\n' +
        '        },\n' +
        '        {\n' +
        "          path: 'disable-tooltips',\n" +
        '          loadChildren: () =>\n' +
        "            import('./demo-modules/disable-tooltips/module').then(\n" +
        '              (m) => m.DemoModule\n' +
        '            ),\n' +
        '          data: {\n' +
        "            label: 'Disable tooltips',\n" +
        '          },\n' +
        '        },\n' +
        '        {\n' +
        "          path: 'additional-event-properties',\n" +
        '          loadChildren: () =>\n' +
        "            import('./demo-modules/additional-event-properties/module').then(\n" +
        '              (m) => m.DemoModule\n' +
        '            ),\n' +
        '          data: {\n' +
        "            label: 'Additional event properties',\n" +
        '          },\n' +
        '        },\n' +
        '        {\n' +
        "          path: 'selectable-period',\n" +
        '          loadChildren: () =>\n' +
        "            import('./demo-modules/selectable-period/module').then(\n" +
        '              (m) => m.DemoModule\n' +
        '            ),\n' +
        '          data: {\n' +
        "            label: 'Selectable period',\n" +
        '          },\n' +
        '        },\n' +
        '        {\n' +
        "          path: 'min-max-date',\n" +
        '          loadChildren: () =>\n' +
        "            import('./demo-modules/min-max-date/module').then(\n" +
        '              (m) => m.DemoModule\n' +
        '            ),\n' +
        '          data: {\n' +
        "            label: 'Min max date',\n" +
        '          },\n' +
        '        },\n' +
        '        {\n' +
        "          path: 'refreshing-the-view',\n" +
        '          loadChildren: () =>\n' +
        "            import('./demo-modules/refreshing-the-view/module').then(\n" +
        '              (m) => m.DemoModule\n' +
        '            ),\n' +
        '          data: {\n' +
        "            label: 'Refreshing the view',\n" +
        '          },\n' +
        '        },\n' +
        '        {\n' +
        "          path: 'custom-templates',\n" +
        '          loadChildren: () =>\n' +
        "            import('./demo-modules/custom-templates/module').then(\n" +
        '              (m) => m.DemoModule\n' +
        '            ),\n' +
        '          data: {\n' +
        "            label: 'Custom templates',\n" +
        '          },\n' +
        '        },\n' +
        '        {\n' +
        "          path: 'group-similar-events',\n" +
        '          loadChildren: () =>\n' +
        "            import('./demo-modules/group-similar-events/module').then(\n" +
        '              (m) => m.DemoModule\n' +
        '            ),\n' +
        '          data: {\n' +
        "            label: 'Group similar events',\n" +
        '          },\n' +
        '        },\n' +
        '        {\n' +
        "          path: 'context-menu',\n" +
        '          loadChildren: () =>\n' +
        "            import('./demo-modules/context-menu/module').then(\n" +
        '              (m) => m.DemoModule\n' +
        '            ),\n' +
        '          data: {\n' +
        "            label: 'Context menu',\n" +
        "            tags: ['right click'],\n" +
        '          },\n' +
        '        },\n' +
        '        {\n' +
        "          path: 'week-view-minute-precision',\n" +
        '          loadChildren: () =>\n' +
        "            import('./demo-modules/week-view-minute-precision/module').then(\n" +
        '              (m) => m.DemoModule\n' +
        '            ),\n' +
        '          data: {\n' +
        "            label: 'Week view minute precision',\n" +
        '          },\n' +
        '        },\n' +
        '        {\n' +
        "          path: 'ex"... 4277 more characters,
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/additional-event-properties/component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: "import { Component, ChangeDetectionStrategy } from '@angular/core';\n" +
        "import { CalendarEvent, CalendarView } from 'angular-calendar';\n" +
        "import { colors } from '../demo-utils/colors';\n" +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-demo-component',\n" +
        '  changeDetection: ChangeDetectionStrategy.OnPush,\n' +
        "  templateUrl: 'template.html',\n" +
        '})\n' +
        'export class DemoComponent {\n' +
        '  view: CalendarView = CalendarView.Month;\n' +
        '\n' +
        '  viewDate: Date = new Date();\n' +
        '\n' +
        '  events: CalendarEvent<{ id: number }>[] = [\n' +
        '    {\n' +
        "      title: 'Event 1',\n" +
        '      color: colors.yellow,\n' +
        '      start: new Date(),\n' +
        '      meta: {\n' +
        '        id: 1,\n' +
        '      },\n' +
        '    },\n' +
        '    {\n' +
        "      title: 'Event 2',\n" +
        '      color: colors.blue,\n' +
        '      start: new Date(),\n' +
        '      meta: {\n' +
        '        id: 2,\n' +
        '      },\n' +
        '    },\n' +
        '  ];\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/all-day-events/component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: "import { Component, ChangeDetectionStrategy } from '@angular/core';\n" +
        "import { CalendarEvent } from 'angular-calendar';\n" +
        "import { colors } from '../demo-utils/colors';\n" +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-demo-component',\n" +
        '  changeDetection: ChangeDetectionStrategy.OnPush,\n' +
        "  templateUrl: 'template.html',\n" +
        '})\n' +
        'export class DemoComponent {\n' +
        '  viewDate: Date = new Date();\n' +
        '\n' +
        '  events: CalendarEvent[] = [\n' +
        '    {\n' +
        "      title: 'An all day event',\n" +
        '      color: colors.yellow,\n' +
        '      start: new Date(),\n' +
        '      allDay: true,\n' +
        '    },\n' +
        '    {\n' +
        "      title: 'A non all day event',\n" +
        '      color: colors.blue,\n' +
        '      start: new Date(),\n' +
        '    },\n' +
        '  ];\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/async-events/component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: "import { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\n" +
        "import { HttpClient, HttpParams } from '@angular/common/http';\n" +
        "import { map } from 'rxjs/operators';\n" +
        "import { CalendarEvent, CalendarView } from 'angular-calendar';\n" +
        'import {\n' +
        '  isSameMonth,\n' +
        '  isSameDay,\n' +
        '  startOfMonth,\n' +
        '  endOfMonth,\n' +
        '  startOfWeek,\n' +
        '  endOfWeek,\n' +
        '  startOfDay,\n' +
        '  endOfDay,\n' +
        '  format,\n' +
        "} from 'date-fns';\n" +
        "import { Observable } from 'rxjs';\n" +
        "import { colors } from '../demo-utils/colors';\n" +
        '\n' +
        'interface Film {\n' +
        '  id: number;\n' +
        '  title: string;\n' +
        '  release_date: string;\n' +
        '}\n' +
        '\n' +
        'function getTimezoneOffsetString(date: Date): string {\n' +
        '  const timezoneOffset = date.getTimezoneOffset();\n' +
        '  const hoursOffset = String(\n' +
        '    Math.floor(Math.abs(timezoneOffset / 60))\n' +
        "  ).padStart(2, '0');\n" +
        "  const minutesOffset = String(Math.abs(timezoneOffset % 60)).padEnd(2, '0');\n" +
        "  const direction = timezoneOffset > 0 ? '-' : '+';\n" +
        '\n' +
        '  return `T00:00:00${direction}${hoursOffset}:${minutesOffset}`;\n' +
        '}\n' +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-demo-component',\n" +
        '  changeDetection: ChangeDetectionStrategy.OnPush,\n' +
        "  templateUrl: 'template.html',\n" +
        '})\n' +
        'export class DemoComponent implements OnInit {\n' +
        '  view: CalendarView = CalendarView.Month;\n' +
        '\n' +
        '  viewDate: Date = new Date();\n' +
        '\n' +
        '  events$: Observable<CalendarEvent<{ film: Film }>[]>;\n' +
        '\n' +
        '  activeDayIsOpen: boolean = false;\n' +
        '\n' +
        '  constructor(private http: HttpClient) {}\n' +
        '\n' +
        '  ngOnInit(): void {\n' +
        '    this.fetchEvents();\n' +
        '  }\n' +
        '\n' +
        '  fetchEvents(): void {\n' +
        '    const getStart: any = {\n' +
        '      month: startOfMonth,\n' +
        '      week: startOfWeek,\n' +
        '      day: startOfDay,\n' +
        '    }[this.view];\n' +
        '\n' +
        '    const getEnd: any = {\n' +
        '      month: endOfMonth,\n' +
        '      week: endOfWeek,\n' +
        '      day: endOfDay,\n' +
        '    }[this.view];\n' +
        '\n' +
        '    const params = new HttpParams()\n' +
        '      .set(\n' +
        "        'primary_release_date.gte',\n" +
        "        format(getStart(this.viewDate), 'yyyy-MM-dd')\n" +
        '      )\n' +
        '      .set(\n' +
        "        'primary_release_date.lte',\n" +
        "        format(getEnd(this.viewDate), 'yyyy-MM-dd')\n" +
        '      )\n' +
        "      .set('api_key', '0ec33936a68018857d727958dca1424f');\n" +
        '\n' +
        '    this.events$ = this.http\n' +
        "      .get('https://api.themoviedb.org/3/discover/movie', { params })\n" +
        '      .pipe(\n' +
        '        map(({ results }: { results: Film[] }) => {\n' +
        '          return results.map((film: Film) => {\n' +
        '            return {\n' +
        '              title: film.title,\n' +
        '              start: new Date(\n' +
        '                film.release_date + getTimezoneOffsetString(this.viewDate)\n' +
        '              ),\n' +
        '              color: colors.yellow,\n' +
        '              allDay: true,\n' +
        '              meta: {\n' +
        '                film,\n' +
        '              },\n' +
        '            };\n' +
        '          });\n' +
        '        })\n' +
        '      );\n' +
        '  }\n' +
        '\n' +
        '  dayClicked({\n' +
        '    date,\n' +
        '    events,\n' +
        '  }: {\n' +
        '    date: Date;\n' +
        '    events: CalendarEvent<{ film: Film }>[];\n' +
        '  }): void {\n' +
        '    if (isSameMonth(date, this.viewDate)) {\n' +
        '      if (\n' +
        '        (isSameDay(this.viewDate, date) && this.activeDayIsOpen === true) ||\n' +
        '        events.length === 0\n' +
        '      ) {\n' +
        '        this.activeDayIsOpen = false;\n' +
        '      } else {\n' +
        '        this.activeDayIsOpen = true;\n' +
        '        this.viewDate = date;\n' +
        '      }\n' +
        '    }\n' +
        '  }\n' +
        '\n' +
        '  eventClicked(event: CalendarEvent<{ film: Film }>): void {\n' +
        '    window.open(\n' +
        '      `https://www.themoviedb.org/movie/${event.meta.film.id}`,\n' +
        "      '_blank'\n" +
        '    );\n' +
        '  }\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/async-events/module.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 1,
      fixableWarningCount: 0,
      source: "import { NgModule } from '@angular/core';\n" +
        "import { CommonModule } from '@angular/common';\n" +
        "import { HttpClientModule } from '@angular/common/http';\n" +
        "import { RouterModule } from '@angular/router';\n" +
        "import { CalendarModule, DateAdapter } from 'angular-calendar';\n" +
        "import { DemoUtilsModule } from '../demo-utils/module';\n" +
        "import { DemoComponent } from './component';\n" +
        "import { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\n" +
        '\n' +
        '@NgModule({\n' +
        '  imports: [\n' +
        '    CommonModule,\n' +
        '    HttpClientModule,\n' +
        '    CalendarModule.forRoot({\n' +
        '      provide: DateAdapter,\n' +
        '      useFactory: adapterFactory,\n' +
        '    }),\n' +
        '    DemoUtilsModule,\n' +
        "    RouterModule.forChild([{ path: '', component: DemoComponent }]),\n" +
        '  ],\n' +
        '  declarations: [DemoComponent],\n' +
        '  exports: [DemoComponent],\n' +
        '})\n' +
        'export class DemoModule {}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/async-events/template.html',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: '<mwl-demo-utils-calendar-header\n' +
        '  [(view)]="view"\n' +
        '  [(viewDate)]="viewDate"\n' +
        '  (viewDateChange)="fetchEvents()"\n' +
        '  (viewChange)="fetchEvents()"\n' +
        '>\n' +
        '</mwl-demo-utils-calendar-header>\n' +
        '\n' +
        '<ng-template #loading>\n' +
        '  <div class="text-center">\n' +
        '    <i class="fas fa-spin fa-spinner fa-5x"></i> <br />\n' +
        '    Loading events...\n' +
        '  </div>\n' +
        '</ng-template>\n' +
        '\n' +
        '<div *ngIf="events$ | async; else loading; let events">\n' +
        '  <div [ngSwitch]="view">\n' +
        '    <mwl-calendar-month-view\n' +
        `      *ngSwitchCase="'month'"\n` +
        '      [viewDate]="viewDate"\n' +
        '      [events]="events"\n' +
        '      [activeDayIsOpen]="activeDayIsOpen"\n' +
        '      (dayClicked)="dayClicked($event.day)"\n' +
        '      (eventClicked)="eventClicked($event.event)"\n' +
        '    >\n' +
        '    </mwl-calendar-month-view>\n' +
        '    <mwl-calendar-week-view\n' +
        `      *ngSwitchCase="'week'"\n` +
        '      [viewDate]="viewDate"\n' +
        '      [events]="events"\n' +
        '      (eventClicked)="eventClicked($event.event)"\n' +
        '    >\n' +
        '    </mwl-calendar-week-view>\n' +
        '    <mwl-calendar-day-view\n' +
        `      *ngSwitchCase="'day'"\n` +
        '      [viewDate]="viewDate"\n' +
        '      [events]="events"\n' +
        '      (eventClicked)="eventClicked($event.event)"\n' +
        '    >\n' +
        '    </mwl-calendar-day-view>\n' +
        '  </div>\n' +
        '</div>\n',
      usedDeprecatedRules: [Array]
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/before-view-render/component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 3,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: 'import {\n' +
        '  Component,\n' +
        '  ChangeDetectionStrategy,\n' +
        '  ViewEncapsulation,\n' +
        "} from '@angular/core';\n" +
        'import {\n' +
        '  CalendarEvent,\n' +
        '  CalendarMonthViewBeforeRenderEvent,\n' +
        '  CalendarWeekViewBeforeRenderEvent,\n' +
        '  CalendarDayViewBeforeRenderEvent,\n' +
        '  CalendarView,\n' +
        "} from 'angular-calendar';\n" +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-demo-component',\n" +
        '  changeDetection: ChangeDetectionStrategy.OnPush,\n' +
        '  encapsulation: ViewEncapsulation.None,\n' +
        "  templateUrl: 'template.html',\n" +
        '  styles: [\n' +
        '    `\n' +
        '      .cal-month-view .bg-pink,\n' +
        '      .cal-week-view .cal-day-columns .bg-pink,\n' +
        '      .cal-day-view .bg-pink {\n' +
        '        background-color: hotpink !important;\n' +
        '      }\n' +
        '    `,\n' +
        '  ],\n' +
        '})\n' +
        'export class DemoComponent {\n' +
        '  view: CalendarView = CalendarView.Month;\n' +
        '\n' +
        '  viewDate: Date = new Date();\n' +
        '\n' +
        '  events: CalendarEvent[] = [];\n' +
        '\n' +
        '  beforeMonthViewRender(renderEvent: CalendarMonthViewBeforeRenderEvent): void {\n' +
        '    renderEvent.body.forEach((day) => {\n' +
        '      const dayOfMonth = day.date.getDate();\n' +
        '      if (dayOfMonth > 5 && dayOfMonth < 10 && day.inMonth) {\n' +
        "        day.cssClass = 'bg-pink';\n" +
        '      }\n' +
        '    });\n' +
        '  }\n' +
        '\n' +
        '  beforeWeekViewRender(renderEvent: CalendarWeekViewBeforeRenderEvent) {\n' +
        '    renderEvent.hourColumns.forEach((hourColumn) => {\n' +
        '      hourColumn.hours.forEach((hour) => {\n' +
        '        hour.segments.forEach((segment) => {\n' +
        '          if (\n' +
        '            segment.date.getHours() >= 2 &&\n' +
        '            segment.date.getHours() <= 5 &&\n' +
        '            segment.date.getDay() === 2\n' +
        '          ) {\n' +
        "            segment.cssClass = 'bg-pink';\n" +
        '          }\n' +
        '        });\n' +
        '      });\n' +
        '    });\n' +
        '  }\n' +
        '\n' +
        '  beforeDayViewRender(renderEvent: CalendarDayViewBeforeRenderEvent) {\n' +
        '    renderEvent.hourColumns.forEach((hourColumn) => {\n' +
        '      hourColumn.hours.forEach((hour) => {\n' +
        '        hour.segments.forEach((segment) => {\n' +
        '          if (segment.date.getHours() >= 2 && segment.date.getHours() <= 5) {\n' +
        "            segment.cssClass = 'bg-pink';\n" +
        '          }\n' +
        '        });\n' +
        '      });\n' +
        '    });\n' +
        '  }\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/before-view-render/template.html',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 1,
      fixableWarningCount: 0,
      source: '<mwl-demo-utils-calendar-header [(view)]="view" [(viewDate)]="viewDate">\n' +
        '</mwl-demo-utils-calendar-header>\n' +
        '\n' +
        '<div class="alert alert-info">\n' +
        '  You can use each views beforeViewRender output to add a custom cssClass to\n' +
        '  different cells to add styling for disabled time slots\n' +
        '</div>\n' +
        '\n' +
        '<div [ngSwitch]="view">\n' +
        '  <mwl-calendar-month-view\n' +
        `    *ngSwitchCase="'month'"\n` +
        '    [viewDate]="viewDate"\n' +
        '    [events]="events"\n' +
        '    (beforeViewRender)="beforeMonthViewRender($event)"\n' +
        '  >\n' +
        '  </mwl-calendar-month-view>\n' +
        '  <mwl-calendar-week-view\n' +
        `    *ngSwitchCase="'week'"\n` +
        '    [viewDate]="viewDate"\n' +
        '    [events]="events"\n' +
        '    (beforeViewRender)="beforeWeekViewRender($event)"\n' +
        '  >\n' +
        '  </mwl-calendar-week-view>\n' +
        '  <mwl-calendar-day-view\n' +
        `    *ngSwitchCase="'day'"\n` +
        '    [viewDate]="viewDate"\n' +
        '    [events]="events"\n' +
        '    (beforeViewRender)="beforeDayViewRender($event)"\n' +
        '  >\n' +
        '  </mwl-calendar-day-view>\n' +
        '</div>\n',
      usedDeprecatedRules: [Array]
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/clickable-days/component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: "import { Component, ChangeDetectionStrategy } from '@angular/core';\n" +
        "import { CalendarEvent, CalendarView } from 'angular-calendar';\n" +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-demo-component',\n" +
        '  changeDetection: ChangeDetectionStrategy.OnPush,\n' +
        "  templateUrl: 'template.html',\n" +
        '})\n' +
        'export class DemoComponent {\n' +
        '  view: CalendarView = CalendarView.Month;\n' +
        '\n' +
        '  viewDate: Date = new Date();\n' +
        '\n' +
        '  events: CalendarEvent[] = [];\n' +
        '\n' +
        '  clickedDate: Date;\n' +
        '\n' +
        '  clickedColumn: number;\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/clickable-days/template.html',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 3,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 3,
      fixableWarningCount: 0,
      source: '<mwl-demo-utils-calendar-header [(view)]="view" [(viewDate)]="viewDate">\n' +
        '</mwl-demo-utils-calendar-header>\n' +
        '\n' +
        '<div class="alert alert-info">\n' +
        '  Click on a day or time slot on the view.\n' +
        '  <strong *ngIf="clickedDate"\n' +
        "    >You clicked on this time: {{ clickedDate | date:'medium' }}</strong\n" +
        '  >\n' +
        '  <strong *ngIf="clickedColumn !== undefined"\n' +
        '    >You clicked on this column: {{ clickedColumn }}</strong\n' +
        '  >\n' +
        '</div>\n' +
        '\n' +
        '<div [ngSwitch]="view">\n' +
        '  <mwl-calendar-month-view\n' +
        `    *ngSwitchCase="'month'"\n` +
        '    [viewDate]="viewDate"\n' +
        '    [events]="events"\n' +
        '    (columnHeaderClicked)="clickedColumn = $event.isoDayNumber"\n' +
        '    (dayClicked)="clickedDate = $event.day.date"\n' +
        '  >\n' +
        '  </mwl-calendar-month-view>\n' +
        '  <mwl-calendar-week-view\n' +
        `    *ngSwitchCase="'week'"\n` +
        '    [viewDate]="viewDate"\n' +
        '    [events]="events"\n' +
        '    (dayHeaderClicked)="clickedDate = $event.day.date"\n' +
        '    (hourSegmentClicked)="clickedDate = $event.date"\n' +
        '  >\n' +
        '  </mwl-calendar-week-view>\n' +
        '  <mwl-calendar-day-view\n' +
        `    *ngSwitchCase="'day'"\n` +
        '    [viewDate]="viewDate"\n' +
        '    [events]="events"\n' +
        '    (hourSegmentClicked)="clickedDate = $event.date"\n' +
        '  >\n' +
        '  </mwl-calendar-day-view>\n' +
        '</div>\n',
      usedDeprecatedRules: [Array]
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/clickable-events/component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: "import { Component, ChangeDetectionStrategy } from '@angular/core';\n" +
        "import { CalendarEvent, CalendarView } from 'angular-calendar';\n" +
        "import { colors } from '../demo-utils/colors';\n" +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-demo-component',\n" +
        '  changeDetection: ChangeDetectionStrategy.OnPush,\n' +
        "  templateUrl: 'template.html',\n" +
        '})\n' +
        'export class DemoComponent {\n' +
        '  view: CalendarView = CalendarView.Month;\n' +
        '\n' +
        '  viewDate: Date = new Date();\n' +
        '\n' +
        '  events: CalendarEvent[] = [\n' +
        '    {\n' +
        "      title: 'Click me',\n" +
        '      color: colors.yellow,\n' +
        '      start: new Date(),\n' +
        '    },\n' +
        '    {\n' +
        "      title: 'Or click me',\n" +
        '      color: colors.blue,\n' +
        '      start: new Date(),\n' +
        '    },\n' +
        '  ];\n' +
        '\n' +
        '  eventClicked({ event }: { event: CalendarEvent }): void {\n' +
        "    console.log('Event clicked', event);\n" +
        '  }\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/context-menu/component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 2,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: 'import {\n' +
        '  ChangeDetectionStrategy,\n' +
        '  Component,\n' +
        '  ViewEncapsulation,\n' +
        "} from '@angular/core';\n" +
        "import { CalendarEvent, CalendarView } from 'angular-calendar';\n" +
        "import { Subject } from 'rxjs';\n" +
        "import { colors } from '../demo-utils/colors';\n" +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-demo-component',\n" +
        '  changeDetection: ChangeDetectionStrategy.OnPush,\n' +
        "  templateUrl: 'template.html',\n" +
        "  styleUrls: ['./styles.scss'],\n" +
        '  encapsulation: ViewEncapsulation.None,\n' +
        '})\n' +
        'export class DemoComponent {\n' +
        '  view: CalendarView = CalendarView.Month;\n' +
        '\n' +
        '  viewDate = new Date();\n' +
        '\n' +
        '  events: CalendarEvent[] = [];\n' +
        '\n' +
        '  refresh = new Subject<void>();\n' +
        '\n' +
        '  addEvent(date: Date): void {\n' +
        '    this.events.push({\n' +
        '      start: date,\n' +
        "      title: 'New event',\n" +
        '      color: colors.red,\n' +
        '    });\n' +
        '    this.refresh.next();\n' +
        '  }\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/context-menu/template.html',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 16,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 5,
      fixableWarningCount: 0,
      source: '<mwl-demo-utils-calendar-header [(view)]="view" [(viewDate)]="viewDate">\n' +
        '</mwl-demo-utils-calendar-header>\n' +
        '\n' +
        '<context-menu #basicMenu>\n' +
        '  <ng-template contextMenuItem (execute)="addEvent($event.value)">\n' +
        '    Add event\n' +
        '  </ng-template>\n' +
        '</context-menu>\n' +
        '\n' +
        '<ng-template\n' +
        '  #monthCellTemplate\n' +
        '  let-day="day"\n' +
        '  let-openDay="openDay"\n' +
        '  let-locale="locale"\n' +
        '  let-tooltipPlacement="tooltipPlacement"\n' +
        '  let-highlightDay="highlightDay"\n' +
        '  let-unhighlightDay="unhighlightDay"\n' +
        '  let-eventClicked="eventClicked"\n' +
        '>\n' +
        '  <div\n' +
        '    class="month-cell-fill-height"\n' +
        '    [contextMenu]="basicMenu"\n' +
        '    [contextMenuValue]="day.date"\n' +
        '  >\n' +
        '    <div class="cal-cell-top">\n' +
        '      <span class="cal-day-badge" *ngIf="day.badgeTotal > 0"\n' +
        '        >{{ day.badgeTotal }}</span\n' +
        '      >\n' +
        '      <span class="cal-day-number"\n' +
        "        >{{ day.date | calendarDate:'monthViewDayNumber':locale }}</span\n" +
        '      >\n' +
        '    </div>\n' +
        '    <div class="cal-events">\n' +
        '      <div\n' +
        '        class="cal-event"\n' +
        '        *ngFor="let event of day.events"\n' +
        '        [style.backgroundColor]="event.color.primary"\n' +
        '        [ngClass]="event?.cssClass"\n' +
        '        (mouseenter)="highlightDay.emit({event: event})"\n' +
        '        (mouseleave)="unhighlightDay.emit({event: event})"\n' +
        `        [mwlCalendarTooltip]="event.title | calendarEventTitle:'monthTooltip':event"\n` +
        '        [tooltipPlacement]="tooltipPlacement"\n' +
        '        (click)="$event.stopPropagation(); eventClicked.emit({event: event})"\n' +
        '      ></div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</ng-template>\n' +
        '\n' +
        '<ng-template\n' +
        '  #weekHeaderTemplate\n' +
        '  let-days="days"\n' +
        '  let-locale="locale"\n' +
        '  let-dayHeaderClicked="dayHeaderClicked"\n' +
        '>\n' +
        '  <div class="cal-day-headers">\n' +
        '    <div\n' +
        '      class="cal-header"\n' +
        '      *ngFor="let day of days"\n' +
        '      [class.cal-past]="day.isPast"\n' +
        '      [class.cal-today]="day.isToday"\n' +
        '      [class.cal-future]="day.isFuture"\n' +
        '      [class.cal-weekend]="day.isWeekend"\n' +
        '      (click)="dayHeaderClicked.emit({day: day})"\n' +
        '      [contextMenu]="basicMenu"\n' +
        '      [contextMenuValue]="day.date"\n' +
        '    >\n' +
        "      <b>{{ day.date | calendarDate:'weekViewColumnHeader':locale }}</b><br />\n" +
        '      <span\n' +
        "        >{{ day.date | calendarDate:'weekViewColumnSubHeader':locale }}</span\n" +
        '      >\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</ng-template>\n' +
        '\n' +
        '<ng-template\n' +
        '  #dayHourSegmentTemplate\n' +
        '  let-segment="segment"\n' +
        '  let-locale="locale"\n' +
        '  let-segmentHeight="segmentHeight"\n' +
        '>\n' +
        '  <div\n' +
        '    class="cal-hour-segment"\n' +
        '    [style.height.px]="segmentHeight"\n' +
        '    [class.cal-hour-start]="segment.isStart"\n' +
        '    [class.cal-after-hour-start]="!segment.isStart"\n' +
        '    [ngClass]="segment.cssClass"\n' +
        '    [contextMenu]="basicMenu"\n' +
        '    [contextMenuValue]="segment.date"\n' +
        '  >\n' +
        '    <div class="cal-time">\n' +
        "      {{ segment.date | calendarDate: 'dayViewHour':locale }}\n" +
        '    </div>\n' +
        '  </div>\n' +
        '</ng-template>\n' +
        '\n' +
        '<ng-template\n' +
        '  #weekViewHourSegment\n' +
        '  let-segment="segment"\n' +
        '  let-locale="locale"\n' +
        '  let-segmentHeight="segmentHeight"\n' +
        '  let-isTimeLabel="isTimeLabel"\n' +
        '>\n' +
        '  <div\n' +
        '    class="cal-hour-segment"\n' +
        '    [style.height.px]="segmentHeight"\n' +
        '    [class.cal-hour-start]="segment.isStart"\n' +
        '    [class.cal-after-hour-start]="!segment.isStart"\n' +
        '    [ngClass]="segment.cssClass"\n' +
        '    [contextMenu]="basicMenu"\n' +
        '    [contextMenuValue]="segment.date"\n' +
        '  >\n' +
        '    <div class="cal-time" *ngIf="isTimeLabel">\n' +
        "      {{ segment.date | calendarDate: 'weekViewHour':locale }}\n" +
        '    </div>\n' +
        '  </div>\n' +
        '</ng-template>\n' +
        '\n' +
        '<div [ngSwitch]="view">\n' +
        '  <mwl-calendar-month-view\n' +
        `    *ngSwitchCase="'month'"\n` +
        '    [viewDate]="viewDate"\n' +
        '    [events]="events"\n' +
        '    [refresh]="refresh"\n' +
        '    [cellTemplate]="monthCellTemplate"\n' +
        '  >\n' +
        '  </mwl-calendar-month-view>\n' +
        '  <mwl-calendar-week-view\n' +
        `    *ngSwitchCase="'week'"\n` +
        '    [viewDate]="viewDate"\n' +
        '    [events]="events"\n' +
        '    [refresh]="refresh"\n' +
        '    [headerTemplate]="weekHeaderTemplate"\n' +
        '    [hourSegmentTemplate]="weekViewHourSegment"\n' +
        '  >\n' +
        '  </mwl-calendar-week-view>\n' +
        '  <mwl-calendar-day-view\n' +
        `    *ngSwitchCase="'day'"\n` +
        '    [viewDate]="viewDate"\n' +
        '    [events]="events"\n' +
        '    [refresh]="refresh"\n' +
        '    [hourSegmentTemplate]="dayHourSegmentTemplate"\n' +
        '  >\n' +
        '  </mwl-calendar-day-view>\n' +
        '</div>\n',
      usedDeprecatedRules: [Array]
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/custom-event-class/component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 2,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: 'import {\n' +
        '  Component,\n' +
        '  ChangeDetectionStrategy,\n' +
        '  ViewEncapsulation,\n' +
        "} from '@angular/core';\n" +
        "import { CalendarEvent, CalendarView } from 'angular-calendar';\n" +
        "import { colors } from '../demo-utils/colors';\n" +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-demo-component',\n" +
        '  changeDetection: ChangeDetectionStrategy.OnPush,\n' +
        '  encapsulation: ViewEncapsulation.None, // hack to get the styles to apply locally\n' +
        "  templateUrl: 'template.html',\n" +
        '  // you should really include this CSS in your global stylesheet\n' +
        '  styles: [\n' +
        '    `\n' +
        '      .my-custom-class span {\n' +
        '        color: #ff3d7f !important;\n' +
        '      }\n' +
        '    `,\n' +
        '  ],\n' +
        '})\n' +
        'export class DemoComponent {\n' +
        '  view: CalendarView = CalendarView.Month;\n' +
        '\n' +
        '  viewDate: Date = new Date();\n' +
        '\n' +
        '  events: CalendarEvent[] = [\n' +
        '    {\n' +
        "      title: 'Has custom class',\n" +
        '      color: colors.yellow,\n' +
        '      start: new Date(),\n' +
        "      cssClass: 'my-custom-class',\n" +
        '    },\n' +
        '  ];\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/custom-hour-duration/component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: "import { Component, ChangeDetectionStrategy } from '@angular/core';\n" +
        "import { setMinutes, setHours } from 'date-fns';\n" +
        "import { Subject } from 'rxjs';\n" +
        'import {\n' +
        '  CalendarEvent,\n' +
        '  CalendarEventTimesChangedEvent,\n' +
        '  CalendarView,\n' +
        "} from 'angular-calendar';\n" +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-demo-component',\n" +
        '  changeDetection: ChangeDetectionStrategy.OnPush,\n' +
        "  templateUrl: 'template.html',\n" +
        '})\n' +
        'export class DemoComponent {\n' +
        '  view: CalendarView = CalendarView.Week;\n' +
        '\n' +
        '  viewDate = new Date();\n' +
        '\n' +
        '  events: CalendarEvent[] = [\n' +
        '    {\n' +
        '      start: setHours(setMinutes(new Date(), 20), 15),\n' +
        '      end: setHours(setMinutes(new Date(), 40), 17),\n' +
        "      title: 'An event',\n" +
        '      resizable: {\n' +
        '        afterEnd: true,\n' +
        '      },\n' +
        '      draggable: true,\n' +
        '    },\n' +
        '  ];\n' +
        '\n' +
        '  refresh = new Subject<void>();\n' +
        '\n' +
        '  eventTimesChanged({\n' +
        '    event,\n' +
        '    newStart,\n' +
        '    newEnd,\n' +
        '  }: CalendarEventTimesChangedEvent): void {\n' +
        '    event.start = newStart;\n' +
        '    event.end = newEnd;\n' +
        '    this.refresh.next();\n' +
        '  }\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/custom-templates/component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: "import { Component, ChangeDetectionStrategy } from '@angular/core';\n" +
        "import { CalendarEvent, CalendarView } from 'angular-calendar';\n" +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-demo-component',\n" +
        '  changeDetection: ChangeDetectionStrategy.OnPush,\n' +
        "  templateUrl: 'template.html',\n" +
        '})\n' +
        'export class DemoComponent {\n' +
        '  view: CalendarView = CalendarView.Month;\n' +
        '\n' +
        '  viewDate: Date = new Date();\n' +
        '\n' +
        '  events: CalendarEvent[] = [];\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/custom-templates/template.html',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 5,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 3,
      fixableWarningCount: 0,
      source: '<mwl-demo-utils-calendar-header [(view)]="view" [(viewDate)]="viewDate">\n' +
        '</mwl-demo-utils-calendar-header>\n' +
        '\n' +
        '<div class="alert alert-info">\n' +
        '  For details on how to customise any of the templates, please see\n' +
        '  <a\n' +
        '    href="https://github.com/mattlewis92/angular-calendar#how-do-i-use-a-custom-template"\n' +
        '    >this guide</a\n' +
        '  >\n' +
        '</div>\n' +
        '\n' +
        '<ng-template #customCellTemplate let-day="day" let-locale="locale">\n' +
        '  <div class="cal-cell-top">\n' +
        '    <span class="cal-day-badge" *ngIf="day.badgeTotal > 0"\n' +
        '      >{{ day.badgeTotal }}</span\n' +
        '    >\n' +
        '    <span class="cal-day-number"\n' +
        "      >{{ day.date | calendarDate:'monthViewDayNumber':locale }}</span\n" +
        '    >\n' +
        '  </div>\n' +
        '  <small style="margin: 5px"\n' +
        '    >There are {{ day.events.length }} events on this day</small\n' +
        '  >\n' +
        '</ng-template>\n' +
        '\n' +
        '<div [ngSwitch]="view">\n' +
        '  <mwl-calendar-month-view\n' +
        `    *ngSwitchCase="'month'"\n` +
        '    [viewDate]="viewDate"\n' +
        '    [events]="events"\n' +
        '    [cellTemplate]="customCellTemplate"\n' +
        '  >\n' +
        '  </mwl-calendar-month-view>\n' +
        '  <mwl-calendar-week-view\n' +
        `    *ngSwitchCase="'week'"\n` +
        '    [viewDate]="viewDate"\n' +
        '    [events]="events"\n' +
        '  >\n' +
        '  </mwl-calendar-week-view>\n' +
        '  <mwl-calendar-day-view\n' +
        `    *ngSwitchCase="'day'"\n` +
        '    [viewDate]="viewDate"\n' +
        '    [events]="events"\n' +
        '  >\n' +
        '  </mwl-calendar-day-view>\n' +
        '</div>\n',
      usedDeprecatedRules: [Array]
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/customise-current-time-marker/template.html',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 3,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 2,
      fixableWarningCount: 0,
      source: '<ng-template\n' +
        '  #currentTimeMarkerTemplate\n' +
        '  let-columnDate="columnDate"\n' +
        '  let-dayStartHour="dayStartHour"\n' +
        '  let-dayStartMinute="dayStartMinute"\n' +
        '  let-dayEndHour="dayEndHour"\n' +
        '  let-dayEndMinute="dayEndMinute"\n' +
        '  let-isVisible="isVisible"\n' +
        '  let-topPx="topPx"\n' +
        '>\n' +
        '  <div\n' +
        '    class="cal-current-time-marker"\n' +
        '    *ngIf="isVisible && showMarker"\n' +
        '    [style.top.px]="topPx"\n' +
        '  ></div>\n' +
        '</ng-template>\n' +
        '\n' +
        '<div class="form-group form-check">\n' +
        '  <input\n' +
        '    type="checkbox"\n' +
        '    class="form-check-input"\n' +
        '    id="showMarker"\n' +
        '    [(ngModel)]="showMarker"\n' +
        '  />\n' +
        '  <label class="form-check-label" for="showMarker">Show marker</label>\n' +
        '</div>\n' +
        '\n' +
        '<mwl-calendar-week-view\n' +
        '  [viewDate]="viewDate"\n' +
        '  [currentTimeMarkerTemplate]="currentTimeMarkerTemplate"\n' +
        '  [dayStartHour]="dayStartHour"\n' +
        '  [dayEndHour]="dayEndHour"\n' +
        '>\n' +
        '</mwl-calendar-week-view>\n',
      usedDeprecatedRules: [Array]
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/customise-date-formats/component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: "import { Component, ChangeDetectionStrategy } from '@angular/core';\n" +
        'import {\n' +
        '  CalendarEvent,\n' +
        '  CalendarDateFormatter,\n' +
        '  CalendarView,\n' +
        "} from 'angular-calendar';\n" +
        "import { CustomDateFormatter } from './custom-date-formatter.provider';\n" +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-demo-component',\n" +
        '  changeDetection: ChangeDetectionStrategy.OnPush,\n' +
        "  templateUrl: 'template.html',\n" +
        '  providers: [\n' +
        '    {\n' +
        '      provide: CalendarDateFormatter,\n' +
        '      useClass: CustomDateFormatter,\n' +
        '    },\n' +
        '  ],\n' +
        '})\n' +
        'export class DemoComponent {\n' +
        '  view: CalendarView = CalendarView.Month;\n' +
        '\n' +
        '  viewDate: Date = new Date();\n' +
        '\n' +
        '  events: CalendarEvent[] = [];\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/customise-date-formats/custom-date-formatter.provider.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: "import { CalendarDateFormatter, DateFormatterParams } from 'angular-calendar';\n" +
        "import { formatDate } from '@angular/common';\n" +
        "import { Injectable } from '@angular/core';\n" +
        '\n' +
        '@Injectable()\n' +
        'export class CustomDateFormatter extends CalendarDateFormatter {\n' +
        '  // you can override any of the methods defined in the parent class\n' +
        '\n' +
        '  public monthViewColumnHeader({ date, locale }: DateFormatterParams): string {\n' +
        "    return formatDate(date, 'EEE', locale);\n" +
        '  }\n' +
        '\n' +
        '  public monthViewTitle({ date, locale }: DateFormatterParams): string {\n' +
        "    return formatDate(date, 'MMM y', locale);\n" +
        '  }\n' +
        '\n' +
        '  public weekViewColumnHeader({ date, locale }: DateFormatterParams): string {\n' +
        "    return formatDate(date, 'EEE', locale);\n" +
        '  }\n' +
        '\n' +
        '  public dayViewHour({ date, locale }: DateFormatterParams): string {\n' +
        "    return formatDate(date, 'HH:mm', locale);\n" +
        '  }\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/dark-theme/component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 3,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: 'import {\n' +
        '  ChangeDetectionStrategy,\n' +
        '  Component,\n' +
        '  Inject,\n' +
        '  OnDestroy,\n' +
        '  OnInit,\n' +
        '  ViewEncapsulation,\n' +
        "} from '@angular/core';\n" +
        "import { CalendarEvent, CalendarView } from 'angular-calendar';\n" +
        '\n' +
        "import { colors } from '../demo-utils/colors';\n" +
        "import { DOCUMENT } from '@angular/common';\n" +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-demo-component',\n" +
        '  changeDetection: ChangeDetectionStrategy.OnPush,\n' +
        "  templateUrl: 'template.html',\n" +
        "  styleUrls: ['styles.scss'],\n" +
        '  encapsulation: ViewEncapsulation.None,\n' +
        '})\n' +
        'export class DemoComponent implements OnInit, OnDestroy {\n' +
        '  view: CalendarView = CalendarView.Month;\n' +
        '\n' +
        '  viewDate = new Date();\n' +
        '\n' +
        '  events: CalendarEvent[] = [\n' +
        '    {\n' +
        "      title: 'An event',\n" +
        '      start: new Date(),\n' +
        '      color: colors.red,\n' +
        '    },\n' +
        '  ];\n' +
        '\n' +
        "  private readonly darkThemeClass = 'dark-theme';\n" +
        '\n' +
        '  constructor(@Inject(DOCUMENT) private document) {}\n' +
        '\n' +
        '  ngOnInit(): void {\n' +
        '    this.document.body.classList.add(this.darkThemeClass);\n' +
        '  }\n' +
        '\n' +
        '  ngOnDestroy(): void {\n' +
        '    this.document.body.classList.remove(this.darkThemeClass);\n' +
        '  }\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/day-view-hour-split/component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: "import { Component, ChangeDetectionStrategy } from '@angular/core';\n" +
        "import { CalendarEvent, CalendarView } from 'angular-calendar';\n" +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-demo-component',\n" +
        '  changeDetection: ChangeDetectionStrategy.OnPush,\n' +
        "  templateUrl: 'template.html',\n" +
        '})\n' +
        'export class DemoComponent {\n' +
        '  view: CalendarView = CalendarView.Day;\n' +
        '\n' +
        '  viewDate: Date = new Date();\n' +
        '\n' +
        '  events: CalendarEvent[] = [];\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/day-view-scheduler/component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: "import { Component, ChangeDetectionStrategy } from '@angular/core';\n" +
        'import {\n' +
        '  CalendarEvent,\n' +
        '  CalendarEventTimesChangedEvent,\n' +
        "} from 'angular-calendar';\n" +
        "import { colors } from '../demo-utils/colors';\n" +
        "import { addHours, startOfDay } from 'date-fns';\n" +
        "import { User } from './day-view-scheduler.component';\n" +
        '\n' +
        'const users: User[] = [\n' +
        '  {\n' +
        '    id: 0,\n' +
        "    name: 'John smith',\n" +
        '    color: colors.yellow,\n' +
        '  },\n' +
        '  {\n' +
        '    id: 1,\n' +
        "    name: 'Jane Doe',\n" +
        '    color: colors.blue,\n' +
        '  },\n' +
        '];\n' +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-demo-component',\n" +
        '  changeDetection: ChangeDetectionStrategy.OnPush,\n' +
        "  templateUrl: 'template.html',\n" +
        '})\n' +
        'export class DemoComponent {\n' +
        '  viewDate = new Date();\n' +
        '\n' +
        '  users = users;\n' +
        '\n' +
        '  events: CalendarEvent[] = [\n' +
        '    {\n' +
        "      title: 'An event',\n" +
        '      color: users[0].color,\n' +
        '      start: addHours(startOfDay(new Date()), 5),\n' +
        '      meta: {\n' +
        '        user: users[0],\n' +
        '      },\n' +
        '      resizable: {\n' +
        '        beforeStart: true,\n' +
        '        afterEnd: true,\n' +
        '      },\n' +
        '      draggable: true,\n' +
        '    },\n' +
        '    {\n' +
        "      title: 'Another event',\n" +
        '      color: users[1].color,\n' +
        '      start: addHours(startOfDay(new Date()), 2),\n' +
        '      meta: {\n' +
        '        user: users[1],\n' +
        '      },\n' +
        '      resizable: {\n' +
        '        beforeStart: true,\n' +
        '        afterEnd: true,\n' +
        '      },\n' +
        '      draggable: true,\n' +
        '    },\n' +
        '    {\n' +
        "      title: 'A 3rd event',\n" +
        '      color: users[0].color,\n' +
        '      start: addHours(startOfDay(new Date()), 7),\n' +
        '      meta: {\n' +
        '        user: users[0],\n' +
        '      },\n' +
        '      resizable: {\n' +
        '        beforeStart: true,\n' +
        '        afterEnd: true,\n' +
        '      },\n' +
        '      draggable: true,\n' +
        '    },\n' +
        '    {\n' +
        "      title: 'An all day event',\n" +
        '      color: users[0].color,\n' +
        '      start: new Date(),\n' +
        '      meta: {\n' +
        '        user: users[0],\n' +
        '      },\n' +
        '      draggable: true,\n' +
        '      allDay: true,\n' +
        '    },\n' +
        '    {\n' +
        "      title: 'Another all day event',\n" +
        '      color: users[1].color,\n' +
        '      start: new Date(),\n' +
        '      meta: {\n' +
        '        user: users[1],\n' +
        '      },\n' +
        '      draggable: true,\n' +
        '      allDay: true,\n' +
        '    },\n' +
        '    {\n' +
        "      title: 'A 3rd all day event',\n" +
        '      color: users[0].color,\n' +
        '      start: new Date(),\n' +
        '      meta: {\n' +
        '        user: users[0],\n' +
        '      },\n' +
        '      draggable: true,\n' +
        '      allDay: true,\n' +
        '    },\n' +
        '  ];\n' +
        '\n' +
        '  eventTimesChanged({\n' +
        '    event,\n' +
        '    newStart,\n' +
        '    newEnd,\n' +
        '  }: CalendarEventTimesChangedEvent): void {\n' +
        '    event.start = newStart;\n' +
        '    event.end = newEnd;\n' +
        '    this.events = [...this.events];\n' +
        '  }\n' +
        '\n' +
        '  userChanged({ event, newUser }) {\n' +
        '    event.color = newUser.color;\n' +
        '    event.meta.user = newUser;\n' +
        '    this.events = [...this.events];\n' +
        '  }\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/day-view-scheduler/day-view-scheduler.component.html',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 28,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 15,
      fixableWarningCount: 0,
      source: '<div class="cal-week-view" role="grid">\n' +
        '  <div class="cal-day-headers" role="row">\n' +
        '    <div\n' +
        '      class="cal-header"\n' +
        '      *ngFor="let user of users; trackBy: trackByUserId"\n' +
        '      tabindex="0"\n' +
        '      role="columnheader"\n' +
        '    >\n' +
        '      <b>{{ user.name }}</b>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '  <div\n' +
        '    class="cal-all-day-events"\n' +
        '    #allDayEventsContainer\n' +
        '    *ngIf="view.allDayEventRows.length > 0"\n' +
        '    mwlDroppable\n' +
        `    (dragEnter)="dragEnter('allDay')"\n` +
        `    (dragLeave)="dragLeave('allDay')"\n` +
        '  >\n' +
        '    <div class="cal-day-columns">\n' +
        '      <div\n' +
        '        class="cal-time-label-column"\n' +
        '        [ngTemplateOutlet]="allDayEventsLabelTemplate"\n' +
        '      ></div>\n' +
        '      <div\n' +
        '        class="cal-day-column"\n' +
        '        *ngFor="let day of days; trackBy: trackByWeekDayHeaderDate"\n' +
        '        mwlDroppable\n' +
        '        dragOverClass="cal-drag-over"\n' +
        '        (drop)="eventDropped($event, day.date, true)"\n' +
        '        (dragEnter)="dateDragEnter(day.date)"\n' +
        '      ></div>\n' +
        '    </div>\n' +
        '    <div\n' +
        '      *ngFor="let eventRow of view.allDayEventRows; trackBy: trackById"\n' +
        '      #eventRowContainer\n' +
        '      class="cal-events-row"\n' +
        '    >\n' +
        '      <div\n' +
        '        *ngFor="\n' +
        '          let allDayEvent of eventRow.row;\n' +
        '          trackBy: trackByWeekAllDayEvent\n' +
        '        "\n' +
        '        #event\n' +
        '        class="cal-event-container"\n' +
        '        [class.cal-draggable]="\n' +
        '          allDayEvent.event.draggable && allDayEventResizes.size === 0\n' +
        '        "\n' +
        '        [class.cal-starts-within-week]="!allDayEvent.startsBeforeWeek"\n' +
        '        [class.cal-ends-within-week]="!allDayEvent.endsAfterWeek"\n' +
        '        [ngClass]="allDayEvent.event?.cssClass"\n' +
        '        [style.width.%]="(100 / users.length) * allDayEvent.span"\n' +
        '        [style.marginLeft.%]="(100 / users.length) * allDayEvent.offset"\n' +
        '        mwlDraggable\n' +
        '        dragActiveClass="cal-drag-active"\n' +
        '        [dropData]="{ event: allDayEvent.event, calendarId: calendarId }"\n' +
        '        [dragAxis]="{\n' +
        '          x: allDayEvent.event.draggable && allDayEventResizes.size === 0,\n' +
        '          y:\n' +
        '            !snapDraggedEvents &&\n' +
        '            allDayEvent.event.draggable &&\n' +
        '            allDayEventResizes.size === 0\n' +
        '        }"\n' +
        '        [dragSnapGrid]="snapDraggedEvents ? { x: dayColumnWidth } : {}"\n' +
        '        [validateDrag]="validateDrag"\n' +
        '        (dragStart)="dragStarted(eventRowContainer, event, allDayEvent, false)"\n' +
        '        (dragging)="allDayEventDragMove()"\n' +
        '        (dragEnd)="dragEnded(allDayEvent, $event, dayColumnWidth)"\n' +
        '      >\n' +
        '        <mwl-calendar-week-view-event\n' +
        '          [locale]="locale"\n' +
        '          [weekEvent]="allDayEvent"\n' +
        '          [tooltipPlacement]="tooltipPlacement"\n' +
        '          [tooltipTemplate]="tooltipTemplate"\n' +
        '          [tooltipAppendToBody]="tooltipAppendToBody"\n' +
        '          [tooltipDelay]="tooltipDelay"\n' +
        '          [customTemplate]="eventTemplate"\n' +
        '          [eventTitleTemplate]="eventTitleTemplate"\n' +
        '          [eventActionsTemplate]="eventActionsTemplate"\n' +
        '          [daysInWeek]="daysInWeek"\n' +
        '          (eventClicked)="\n' +
        '            eventClicked.emit({\n' +
        '              event: allDayEvent.event,\n' +
        '              sourceEvent: $event.sourceEvent\n' +
        '            })\n' +
        '          "\n' +
        '        >\n' +
        '        </mwl-calendar-week-view-event>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '  <div\n' +
        '    class="cal-time-events"\n' +
        '    mwlDroppable\n' +
        `    (dragEnter)="dragEnter('time')"\n` +
        `    (dragLeave)="dragLeave('time')"\n` +
        '  >\n' +
        '    <div class="cal-time-label-column" *ngIf="view.hourColumns.length > 0">\n' +
        '      <div\n' +
        '        *ngFor="\n' +
        '          let hour of view.hourColumns[0].hours;\n' +
        '          trackBy: trackByHour;\n' +
        '          let odd = odd\n' +
        '        "\n' +
        '        class="cal-hour"\n' +
        '        [class.cal-hour-odd]="odd"\n' +
        '      >\n' +
        '        <mwl-calendar-week-view-hour-segment\n' +
        '          *ngFor="let segment of hour.segments; trackBy: trackByHourSegment"\n' +
        '          [style.height.px]="hourSegmentHeight"\n' +
        '          [segment]="segment"\n' +
        '          [segmentHeight]="hourSegmentHeight"\n' +
        '          [locale]="locale"\n' +
        '          [customTemplate]="hourSegmentTemplate"\n' +
        '          [isTimeLabel]="true"\n' +
        '        >\n' +
        '        </mwl-calendar-week-view-hour-segment>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '    <div\n' +
        '      class="cal-day-columns"\n' +
        '      [class.cal-resize-active]="timeEventResizes.size > 0"\n' +
        '      #dayColumns\n' +
        '    >\n' +
        '      <div\n' +
        '        class="cal-day-column"\n' +
        '        *ngFor="let column of view.hourColumns; trackBy: trackByHourColumn"\n' +
        '      >\n' +
        '        <mwl-calendar-week-view-current-time-marker\n' +
        '          [columnDate]="column.date"\n' +
        '          [dayStartHour]="dayStartHour"\n' +
        '          [dayStartMinute]="dayStartMinute"\n' +
        '          [dayEndHour]="dayEndHour"\n' +
        '          [dayEndMinute]="dayEndMinute"\n' +
        '          [hourSegments]="hourSegments"\n' +
        '          [hourSegmentHeight]="hourSegmentHeight"\n' +
        '          [customTemplate]="currentTimeMarkerTemplate"\n' +
        '        ></mwl-calendar-week-view-current-time-marker>\n' +
        '        <div\n' +
        '          *ngFor="let timeEvent of column.events; trackBy: trackByWeekTimeEvent"\n' +
        '          #event\n' +
        '          class="cal-event-container"\n' +
        '          [class.cal-draggable]="\n' +
        '            timeEvent.event.draggable && timeEventResizes.size === 0\n' +
        '          "\n' +
        '          [class.cal-starts-within-day]="!timeEvent.startsBeforeDay"\n' +
        '          [class.cal-ends-within-day]="!timeEvent.endsAfterDay"\n' +
        '          [ngClass]="timeEvent.event.cssClass"\n' +
        '          [hidden]="timeEvent.height === 0 && timeEvent.width === 0"\n' +
        '          [style.top.px]="timeEvent.top"\n' +
        '          [style.height.px]="timeEvent.height"\n' +
        '          [style.left.%]="timeEvent.left"\n' +
        '          [style.width.%]="timeEvent.width"\n' +
        '          mwlResizable\n' +
        '          [resizeSnapGrid]="{\n' +
        '            left: dayColumnWidth,\n' +
        '            right: dayColumnWidth,\n' +
        '            top: eventSnapSize || hourSegmentHeight,\n' +
        '            bottom: eventSnapSize || hourSegmentHeight\n' +
        '          }"\n' +
        '          [validateResize]="validateResize"\n' +
        '          [allowNegativeResizes]="true"\n' +
        '          (resizeStart)="timeEventResizeStarted(dayColumns, timeEvent, $event)"\n' +
        '          (resizing)="timeEventResizing(timeEvent, $event)"\n' +
        '          (resizeEnd)="timeEventResizeEnded(timeEvent)"\n' +
        '          mwlDraggable\n' +
        '          dragActiveClass="cal-drag-active"\n' +
        '          [dropData]="{ event: timeEvent.event, calendarId: calendarId }"\n' +
        '          [dragAxis]="{\n' +
        '            x: timeEvent.event.draggable && timeEventResizes.size === 0,\n' +
        '            y: timeEvent.event.draggable && timeEventResizes.size === 0\n' +
        '          }"\n' +
        '          [dragSnapGrid]="\n' +
        '            snapDraggedEvents\n' +
        '              ? { x: dayColumnWidth, y: eventSnapSize || hourSegmentHeight }\n' +
        '              : {}\n' +
        '          "\n' +
        '          [ghostDragEnabled]="!snapDraggedEvents"\n' +
        '          [validateDrag]="validateDrag"\n' +
        '          (dragStart)="dragStarted(dayColumns, event, timeEvent, true)"\n' +
        '          (dragging)="dragMove(timeEvent, $event)"\n' +
        '          (dragEnd)="dragEnded(timeEvent, $event, dayColumnWidth, true)"\n' +
        '        >\n' +
        '          <div\n' +
        '            class="cal-resize-handle cal-resize-handle-before-start"\n' +
        '            *ngIf="\n' +
        '              timeEvent.event?.resizable?.beforeStart &&\n' +
        '              !timeEvent.startsBeforeDay\n' +
        '            "\n' +
        '            mwlResizeHandle\n' +
        '            [resizeEdges]="{\n' +
        '              left: true,\n' +
        '              top: true\n' +
        '            }"\n' +
        '          ></div>\n' +
        '          <mwl-calendar-week-view-event\n' +
        '            [locale]="locale"\n' +
        '            [weekEvent]="timeEvent"\n' +
        '            [tooltipPlacement]="tooltipPlacement"\n' +
        '            [tooltipTemplate]="tooltipTemplate"\n' +
        '            [tooltipAppendToBody]="tooltipAppendToBody"\n' +
        '            [tooltipDisabled]="dragActive || timeEventResizes.size > 0"\n' +
        '            [tooltipDelay]="tooltipDelay"\n' +
        '            [customTemplate]="eventTemplate"\n' +
        '            [eventTitleTemplate]="eventTitleTemplate"\n' +
        '            [eventActionsTemplate]="eventActionsTemplate"\n' +
        '            [column]="column"\n' +
        '            (eventClicked)="\n' +
        '              eventClicked.emit({\n' +
        '                event: timeEvent.event,\n' +
        '                sourceEvent: $event.sourceEvent\n' +
        '              })\n' +
        '            "\n' +
        '          >\n' +
        '          </mwl-calendar-week-view-event>\n' +
        '          <div\n' +
        '            class="cal-resize-handle cal-resize-handle-after-end"\n' +
        '            *ngIf="\n' +
        '              timeEvent.event?.resizable?.afterEnd && !timeEvent.endsAfterDay\n' +
        '            "\n' +
        '            mwlResizeHandle\n' +
        '            [resizeEdges]="{\n' +
        '              right: true,\n' +
        '              bottom: true\n' +
        '            }"\n' +
        '          ></div>\n' +
        '        </div>\n' +
        '\n' +
        '        <div\n' +
        '          *ngFor="let hour of column.hours; trackBy: trackByHour; let odd = odd"\n' +
        '          class="cal-hour"\n' +
        '          [class.cal-hour-odd]="odd"\n' +
        '        >\n' +
        '          <mwl-calendar-week-view-hour-segment\n' +
        '            *ngFor="let segment of hour.segments; trackBy: trackByHourSegment"\n' +
        '            [style.height.px]="hourSegmentHeight"\n' +
        '            [segment]="segment"\n' +
        '            [segmentHeight]="hourSegmentHeight"\n' +
        '            [locale]="locale"\n' +
        '            [customTemplate]="hourSegmentTemplate"\n' +
        '            (mwlClick)="\n' +
        '              hourSegmentClicked.emit({\n' +
        '                date: segment.date,\n' +
        '                sourceEvent: $event\n' +
        '              })\n' +
        '            "\n' +
        '            [clickListenerDisabled]="hourSegmentClicked.observers.length === 0"\n' +
        '            mwlDroppable\n' +
        '            [dragOverClass]="\n' +
        "              !dragActive || !snapDraggedEvents ? 'cal-drag-over' : null\n" +
        '            "\n' +
        '            dragActiveClass="cal-drag-active"\n' +
        '            (drop)="eventDropped($event, segment.date, false)"\n' +
        '          >\n' +
        '          </mwl-calendar-week-view-hour-segment>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n',
      usedDeprecatedRules: [Array]
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/day-view-scheduler/day-view-scheduler.component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 4,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: 'import {\n' +
        '  ChangeDetectorRef,\n' +
        '  Component,\n' +
        '  ElementRef,\n' +
        '  EventEmitter,\n' +
        '  Inject,\n' +
        '  Injectable,\n' +
        '  Input,\n' +
        '  LOCALE_ID,\n' +
        '  OnChanges,\n' +
        '  Output,\n' +
        '  SimpleChanges,\n' +
        "} from '@angular/core';\n" +
        'import {\n' +
        '  CalendarUtils,\n' +
        '  CalendarWeekViewComponent,\n' +
        '  DateAdapter,\n' +
        '  getWeekViewPeriod,\n' +
        "} from 'angular-calendar';\n" +
        'import {\n' +
        '  WeekView,\n' +
        '  GetWeekViewArgs,\n' +
        '  WeekViewTimeEvent,\n' +
        '  EventColor,\n' +
        '  CalendarEvent,\n' +
        '  WeekViewAllDayEventRow,\n' +
        '  WeekViewAllDayEvent,\n' +
        "} from 'calendar-utils';\n" +
        "import { DragEndEvent, DragMoveEvent } from 'angular-draggable-droppable';\n" +
        '\n' +
        'export interface User {\n' +
        '  id: number;\n' +
        '  name: string;\n' +
        '  color: EventColor;\n' +
        '}\n' +
        '\n' +
        'interface DayViewScheduler extends WeekView {\n' +
        '  users: User[];\n' +
        '}\n' +
        '\n' +
        'interface GetWeekViewArgsWithUsers extends GetWeekViewArgs {\n' +
        '  users: User[];\n' +
        '}\n' +
        '\n' +
        '@Injectable()\n' +
        'export class DayViewSchedulerCalendarUtils extends CalendarUtils {\n' +
        '  getWeekView(args: GetWeekViewArgsWithUsers): DayViewScheduler {\n' +
        '    const { period } = super.getWeekView(args);\n' +
        '    const view: DayViewScheduler = {\n' +
        '      period,\n' +
        '      allDayEventRows: [],\n' +
        '      hourColumns: [],\n' +
        '      users: [...args.users],\n' +
        '    };\n' +
        '\n' +
        '    view.users.forEach((user, columnIndex) => {\n' +
        '      const events = args.events.filter(\n' +
        '        (event) => event.meta.user.id === user.id\n' +
        '      );\n' +
        '      const columnView = super.getWeekView({\n' +
        '        ...args,\n' +
        '        events,\n' +
        '      });\n' +
        '      view.hourColumns.push(columnView.hourColumns[0]);\n' +
        '      columnView.allDayEventRows.forEach(({ row }, rowIndex) => {\n' +
        '        view.allDayEventRows[rowIndex] = view.allDayEventRows[rowIndex] || {\n' +
        '          row: [],\n' +
        '        };\n' +
        '        view.allDayEventRows[rowIndex].row.push({\n' +
        '          ...row[0],\n' +
        '          offset: columnIndex,\n' +
        '          span: 1,\n' +
        '        });\n' +
        '      });\n' +
        '    });\n' +
        '\n' +
        '    return view;\n' +
        '  }\n' +
        '}\n' +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-day-view-scheduler',\n" +
        "  templateUrl: 'day-view-scheduler.component.html',\n" +
        '  providers: [DayViewSchedulerCalendarUtils],\n' +
        '})\n' +
        'export class DayViewSchedulerComponent\n' +
        '  extends CalendarWeekViewComponent\n' +
        '  implements OnChanges\n' +
        '{\n' +
        '  @Input() users: User[] = [];\n' +
        '\n' +
        '  @Output() userChanged = new EventEmitter();\n' +
        '\n' +
        '  view: DayViewScheduler;\n' +
        '\n' +
        '  daysInWeek = 1;\n' +
        '\n' +
        '  constructor(\n' +
        '    protected cdr: ChangeDetectorRef,\n' +
        '    protected utils: DayViewSchedulerCalendarUtils,\n' +
        '    @Inject(LOCALE_ID) locale: string,\n' +
        '    protected dateAdapter: DateAdapter,\n' +
        '    protected element: ElementRef<HTMLElement>\n' +
        '  ) {\n' +
        '    super(cdr, utils, locale, dateAdapter, element);\n' +
        '  }\n' +
        '\n' +
        '  trackByUserId = (index: number, row: User) => row.id;\n' +
        '\n' +
        '  ngOnChanges(changes: SimpleChanges): void {\n' +
        '    super.ngOnChanges(changes);\n' +
        '\n' +
        '    if (changes.users) {\n' +
        '      this.refreshBody();\n' +
        '      this.emitBeforeViewRender();\n' +
        '    }\n' +
        '  }\n' +
        '\n' +
        '  getDayColumnWidth(eventRowContainer: HTMLElement): number {\n' +
        '    return Math.floor(eventRowContainer.offsetWidth / this.users.length);\n' +
        '  }\n' +
        '\n' +
        '  dragMove(dayEvent: WeekViewTimeEvent, dragEvent: DragMoveEvent) {\n' +
        '    if (this.snapDraggedEvents) {\n' +
        '      const newUser = this.getDraggedUserColumn(dayEvent, dragEvent.x);\n' +
        '      const newEventTimes = this.getDragMovedEventTimes(\n' +
        '        dayEvent,\n' +
        '        { ...dragEvent, x: 0 },\n' +
        '        this.dayColumnWidth,\n' +
        '        true\n' +
        '      );\n' +
        '      const originalEvent = dayEvent.event;\n' +
        '      const adjustedEvent = {\n' +
        '        ...originalEvent,\n' +
        '        ...newEventTimes,\n' +
        '        meta: { ...originalEvent.meta, user: newUser },\n' +
        '      };\n' +
        '      const tempEvents = this.events.map((event) => {\n' +
        '        if (event === originalEvent) {\n' +
        '          return adjustedEvent;\n' +
        '        }\n' +
        '        return event;\n' +
        '      });\n' +
        '      this.restoreOriginalEvents(\n' +
        '        tempEvents,\n' +
        '        new Map([[adjustedEvent, originalEvent]])\n' +
        '      );\n' +
        '    }\n' +
        '    this.dragAlreadyMoved = true;\n' +
        '  }\n' +
        '\n' +
        '  dragEnded(\n' +
        '    weekEvent: WeekViewAllDayEvent | WeekViewTimeEvent,\n' +
        '    dragEndEvent: DragEndEvent,\n' +
        '    dayWidth: number,\n' +
        '    useY = false\n' +
        '  ) {\n' +
        '    super.dragEnded(\n' +
        '      weekEvent,\n' +
        '      {\n' +
        '        ...dragEndEvent,\n' +
        '        x: 0,\n' +
        '      },\n' +
        '      dayWidth,\n' +
        '      useY\n' +
        '    );\n' +
        '    const newUser = this.getDraggedUserColumn(weekEvent, dragEndEvent.x);\n' +
        '    if (newUser && newUser !== weekEvent.event.meta.user) {\n' +
        '      this.userChanged.emit({ event: weekEvent.event, newUser });\n' +
        '    }\n' +
        '  }\n' +
        '\n' +
        '  protected getWeekView(events: CalendarEvent[]) {\n' +
        '    return this.utils.getWeekView({\n' +
        '      events,\n' +
        '      users: this.users,\n' +
        '      viewDate: this.viewDate,\n' +
        '      weekStartsOn: this.weekStartsOn,\n' +
        '      excluded: this.excludeDays,\n' +
        '      precision: this.precision,\n' +
        '      absolutePositionedEvents: true,\n' +
        '      hourSegments: this.hourSegments,\n' +
        '      dayStart: {\n' +
        '        hour: this.dayStartHour,\n' +
        '        minute: this.dayStartMinute,\n' +
        '      },\n' +
        '      dayEnd: {\n' +
        '        hour: this.dayEndHour,\n' +
        '        minute: this.dayEndMinute,\n' +
        '      },\n' +
        '      segmentHeight: this.hourSegmentHeight,\n' +
        '      weekendDays: this.weekendDays,\n' +
        '      ...getWeekViewPeriod(\n' +
        '        this.dateAdapter,\n' +
        '        this.viewDate,\n' +
        '        this.weekStartsOn,\n' +
        '        this.excludeDays,\n' +
        '        this.daysInWeek\n' +
        '      ),\n' +
        '    });\n' +
        '  }\n' +
        '\n' +
        '  private getDraggedUserColumn(\n' +
        '    dayEvent: WeekViewTimeEvent | WeekViewAllDayEvent,\n' +
        '    xPixels: number\n' +
        '  ) {\n' +
        '    const columnsMoved = Math.round(xPixels / this.dayColumnWidth);\n' +
        '    const currentColumnIndex = this.view.users.findIndex(\n' +
        '      (user) => user === dayEvent.event.meta.user\n' +
        '    );\n' +
        '    const newIndex = currentColumnIndex + columnsMoved;\n' +
        '    return this.view.users[newIndex];\n' +
        '  }\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/day-view-scheduler/module.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 1,
      fixableWarningCount: 0,
      source: "import { NgModule } from '@angular/core';\n" +
        "import { CommonModule } from '@angular/common';\n" +
        "import { RouterModule } from '@angular/router';\n" +
        "import { CalendarModule, DateAdapter } from 'angular-calendar';\n" +
        "import { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\n" +
        "import { DemoUtilsModule } from '../demo-utils/module';\n" +
        "import { DemoComponent } from './component';\n" +
        "import { DayViewSchedulerComponent } from './day-view-scheduler.component';\n" +
        '\n' +
        '@NgModule({\n' +
        '  imports: [\n' +
        '    CommonModule,\n' +
        '    CalendarModule.forRoot({\n' +
        '      provide: DateAdapter,\n' +
        '      useFactory: adapterFactory,\n' +
        '    }),\n' +
        '    DemoUtilsModule,\n' +
        "    RouterModule.forChild([{ path: '', component: DemoComponent }]),\n" +
        '  ],\n' +
        '  declarations: [DemoComponent, DayViewSchedulerComponent],\n' +
        '  exports: [DemoComponent],\n' +
        '})\n' +
        'export class DemoModule {}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/day-view-scheduler/template.html',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 3,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 3,
      fixableWarningCount: 0,
      source: '<div class="row">\n' +
        '  <div class="col-md-6">\n' +
        '    <div class="btn-group">\n' +
        '      <div\n' +
        '        class="btn btn-primary"\n' +
        '        mwlCalendarPreviousView\n' +
        `        [view]="'day'"\n` +
        '        [(viewDate)]="viewDate"\n' +
        '      >\n' +
        '        Previous\n' +
        '      </div>\n' +
        '      <div\n' +
        '        class="btn btn-outline-secondary"\n' +
        '        mwlCalendarToday\n' +
        '        [(viewDate)]="viewDate"\n' +
        '      >\n' +
        '        Today\n' +
        '      </div>\n' +
        '      <div\n' +
        '        class="btn btn-primary"\n' +
        '        mwlCalendarNextView\n' +
        `        [view]="'day'"\n` +
        '        [(viewDate)]="viewDate"\n' +
        '      >\n' +
        '        Next\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '  <div class="col-md-6 text-right">\n' +
        "    <h3>{{ viewDate | calendarDate:('dayViewTitle') }}</h3>\n" +
        '  </div>\n' +
        '</div>\n' +
        '<br />\n' +
        '\n' +
        '<mwl-day-view-scheduler\n' +
        '  [viewDate]="viewDate"\n' +
        '  [events]="events"\n' +
        '  [users]="users"\n' +
        '  (eventTimesChanged)="eventTimesChanged($event)"\n' +
        '  (userChanged)="userChanged($event)"\n' +
        '>\n' +
        '</mwl-day-view-scheduler>\n',
      usedDeprecatedRules: [Array]
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/day-view-start-end/component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: "import { Component, ChangeDetectionStrategy } from '@angular/core';\n" +
        "import { CalendarEvent, CalendarView } from 'angular-calendar';\n" +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-demo-component',\n" +
        '  changeDetection: ChangeDetectionStrategy.OnPush,\n' +
        "  templateUrl: 'template.html',\n" +
        '})\n' +
        'export class DemoComponent {\n' +
        '  view: CalendarView = CalendarView.Day;\n' +
        '\n' +
        '  viewDate: Date = new Date();\n' +
        '\n' +
        '  events: CalendarEvent[] = [];\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/dayjs/component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: "import { Component, ChangeDetectionStrategy } from '@angular/core';\n" +
        "import { CalendarEvent, CalendarView, DAYS_OF_WEEK } from 'angular-calendar';\n" +
        "import dayjs from 'dayjs';\n" +
        "import en from 'dayjs/locale/en';\n" +
        '\n' +
        'dayjs.locale({\n' +
        '  ...en,\n' +
        '  weekStart: DAYS_OF_WEEK.MONDAY,\n' +
        '});\n' +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-demo-component',\n" +
        '  changeDetection: ChangeDetectionStrategy.OnPush,\n' +
        "  templateUrl: 'template.html',\n" +
        '})\n' +
        'export class DemoComponent {\n' +
        '  view: CalendarView = CalendarView.Month;\n' +
        '\n' +
        '  viewDate: Date = new Date();\n' +
        '\n' +
        '  events: CalendarEvent[] = [];\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/dayjs/template.html',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 1,
      fixableWarningCount: 0,
      source: '<div class="alert alert-info">\n' +
        "  Use this if you're already using dayjs heavily in your app and don't want to\n" +
        '  include date-fns in your bundle, or you need to be able to adjust dates to be\n' +
        '  in a different timezone than the users browser via dayjs-locale\n' +
        '</div>\n' +
        '\n' +
        '<mwl-demo-utils-calendar-header [(view)]="view" [(viewDate)]="viewDate">\n' +
        '</mwl-demo-utils-calendar-header>\n' +
        '\n' +
        '<div [ngSwitch]="view">\n' +
        '  <mwl-calendar-month-view\n' +
        `    *ngSwitchCase="'month'"\n` +
        '    [viewDate]="viewDate"\n' +
        '    [events]="events"\n' +
        '  >\n' +
        '  </mwl-calendar-month-view>\n' +
        '  <mwl-calendar-week-view\n' +
        `    *ngSwitchCase="'week'"\n` +
        '    [viewDate]="viewDate"\n' +
        '    [events]="events"\n' +
        '  >\n' +
        '  </mwl-calendar-week-view>\n' +
        '  <mwl-calendar-day-view\n' +
        `    *ngSwitchCase="'day'"\n` +
        '    [viewDate]="viewDate"\n' +
        '    [events]="events"\n' +
        '  >\n' +
        '  </mwl-calendar-day-view>\n' +
        '</div>\n',
      usedDeprecatedRules: [Array]
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/demo-utils/calendar-header.component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 19,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 9,
      fixableWarningCount: 0,
      source: "import { Component, Input, Output, EventEmitter } from '@angular/core';\n" +
        "import { CalendarView } from 'angular-calendar';\n" +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-demo-utils-calendar-header',\n" +
        '  template: `\n' +
        '    <div class="row text-center">\n' +
        '      <div class="col-md-4">\n' +
        '        <div class="btn-group">\n' +
        '          <div\n' +
        '            class="btn btn-primary"\n' +
        '            mwlCalendarPreviousView\n' +
        '            [view]="view"\n' +
        '            [(viewDate)]="viewDate"\n' +
        '            (viewDateChange)="viewDateChange.next(viewDate)"\n' +
        '          >\n' +
        '            Previous\n' +
        '          </div>\n' +
        '          <div\n' +
        '            class="btn btn-outline-secondary"\n' +
        '            mwlCalendarToday\n' +
        '            [(viewDate)]="viewDate"\n' +
        '            (viewDateChange)="viewDateChange.next(viewDate)"\n' +
        '          >\n' +
        '            Today\n' +
        '          </div>\n' +
        '          <div\n' +
        '            class="btn btn-primary"\n' +
        '            mwlCalendarNextView\n' +
        '            [view]="view"\n' +
        '            [(viewDate)]="viewDate"\n' +
        '            (viewDateChange)="viewDateChange.next(viewDate)"\n' +
        '          >\n' +
        '            Next\n' +
        '          </div>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '      <div class="col-md-4">\n' +
        "        <h3>{{ viewDate | calendarDate: view + 'ViewTitle':locale }}</h3>\n" +
        '      </div>\n' +
        '      <div class="col-md-4">\n' +
        '        <div class="btn-group">\n' +
        '          <div\n' +
        '            class="btn btn-primary"\n' +
        '            (click)="viewChange.emit(CalendarView.Month)"\n' +
        '            [class.active]="view === CalendarView.Month"\n' +
        '          >\n' +
        '            Month\n' +
        '          </div>\n' +
        '          <div\n' +
        '            class="btn btn-primary"\n' +
        '            (click)="viewChange.emit(CalendarView.Week)"\n' +
        '            [class.active]="view === CalendarView.Week"\n' +
        '          >\n' +
        '            Week\n' +
        '          </div>\n' +
        '          <div\n' +
        '            class="btn btn-primary"\n' +
        '            (click)="viewChange.emit(CalendarView.Day)"\n' +
        '            [class.active]="view === CalendarView.Day"\n' +
        '          >\n' +
        '            Day\n' +
        '          </div>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '    <br />\n' +
        '  `,\n' +
        '})\n' +
        'export class CalendarHeaderComponent {\n' +
        '  @Input() view: CalendarView;\n' +
        '\n' +
        '  @Input() viewDate: Date;\n' +
        '\n' +
        "  @Input() locale: string = 'en';\n" +
        '\n' +
        '  @Output() viewChange = new EventEmitter<CalendarView>();\n' +
        '\n' +
        '  @Output() viewDateChange = new EventEmitter<Date>();\n' +
        '\n' +
        '  CalendarView = CalendarView;\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/demo-utils/module.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 1,
      fixableWarningCount: 0,
      source: "import { NgModule } from '@angular/core';\n" +
        "import { CommonModule } from '@angular/common';\n" +
        "import { FormsModule } from '@angular/forms';\n" +
        "import { CalendarModule } from 'angular-calendar';\n" +
        "import { CalendarHeaderComponent } from './calendar-header.component';\n" +
        '\n' +
        '@NgModule({\n' +
        '  imports: [CommonModule, FormsModule, CalendarModule],\n' +
        '  declarations: [CalendarHeaderComponent],\n' +
        '  exports: [CalendarHeaderComponent],\n' +
        '})\n' +
        'export class DemoUtilsModule {}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/disable-slide-animation/component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: "import { Component, ChangeDetectionStrategy } from '@angular/core';\n" +
        "import { CalendarEvent } from 'angular-calendar';\n" +
        "import { isSameDay, isSameMonth } from 'date-fns';\n" +
        "import { colors } from '../demo-utils/colors';\n" +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-demo-component',\n" +
        '  changeDetection: ChangeDetectionStrategy.OnPush,\n' +
        "  templateUrl: 'template.html',\n" +
        '})\n' +
        'export class DemoComponent {\n' +
        '  viewDate: Date = new Date();\n' +
        '\n' +
        '  events: CalendarEvent[] = [\n' +
        '    {\n' +
        '      start: new Date(),\n' +
        "      title: 'An event',\n" +
        '      color: colors.red,\n' +
        '    },\n' +
        '  ];\n' +
        '\n' +
        '  activeDayIsOpen: boolean;\n' +
        '\n' +
        '  dayClicked({ date, events }: { date: Date; events: CalendarEvent[] }): void {\n' +
        '    if (isSameMonth(date, this.viewDate)) {\n' +
        '      if (\n' +
        '        (isSameDay(this.viewDate, date) && this.activeDayIsOpen === true) ||\n' +
        '        events.length === 0\n' +
        '      ) {\n' +
        '        this.activeDayIsOpen = false;\n' +
        '      } else {\n' +
        '        this.activeDayIsOpen = true;\n' +
        '        this.viewDate = date;\n' +
        '      }\n' +
        '    }\n' +
        '  }\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/disable-tooltips/component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: "import { Component, ChangeDetectionStrategy } from '@angular/core';\n" +
        'import {\n' +
        '  CalendarEvent,\n' +
        '  CalendarEventTitleFormatter,\n' +
        '  CalendarView,\n' +
        "} from 'angular-calendar';\n" +
        "import { CustomEventTitleFormatter } from './custom-event-title-formatter.provider';\n" +
        "import { colors } from '../demo-utils/colors';\n" +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-demo-component',\n" +
        '  changeDetection: ChangeDetectionStrategy.OnPush,\n' +
        "  templateUrl: 'template.html',\n" +
        '  providers: [\n' +
        '    {\n' +
        '      provide: CalendarEventTitleFormatter,\n' +
        '      useClass: CustomEventTitleFormatter,\n' +
        '    },\n' +
        '  ],\n' +
        '})\n' +
        'export class DemoComponent {\n' +
        '  view: CalendarView = CalendarView.Month;\n' +
        '\n' +
        '  viewDate: Date = new Date();\n' +
        '\n' +
        '  events: CalendarEvent[] = [\n' +
        '    {\n' +
        "      title: 'An event',\n" +
        '      start: new Date(),\n' +
        '      color: colors.red,\n' +
        '    },\n' +
        '  ];\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/disable-tooltips/custom-event-title-formatter.provider.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: "import { CalendarEventTitleFormatter, CalendarEvent } from 'angular-calendar';\n" +
        "import { Injectable } from '@angular/core';\n" +
        '\n' +
        '@Injectable()\n' +
        'export class CustomEventTitleFormatter extends CalendarEventTitleFormatter {\n' +
        '  // you can override any of the methods defined in the parent class\n' +
        '\n' +
        '  monthTooltip(event: CalendarEvent): string {\n' +
        '    return;\n' +
        '  }\n' +
        '\n' +
        '  weekTooltip(event: CalendarEvent): string {\n' +
        '    return;\n' +
        '  }\n' +
        '\n' +
        '  dayTooltip(event: CalendarEvent): string {\n' +
        '    return;\n' +
        '  }\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/drag-to-create-events/component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 3,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: 'import {\n' +
        '  ChangeDetectionStrategy,\n' +
        '  ChangeDetectorRef,\n' +
        '  Component,\n' +
        '  Injectable,\n' +
        '  ViewEncapsulation,\n' +
        "} from '@angular/core';\n" +
        "import { CalendarEvent, CalendarEventTitleFormatter } from 'angular-calendar';\n" +
        "import { WeekViewHourSegment } from 'calendar-utils';\n" +
        "import { fromEvent } from 'rxjs';\n" +
        "import { finalize, takeUntil } from 'rxjs/operators';\n" +
        "import { addDays, addMinutes, endOfWeek } from 'date-fns';\n" +
        '\n' +
        'function floorToNearest(amount: number, precision: number) {\n' +
        '  return Math.floor(amount / precision) * precision;\n' +
        '}\n' +
        '\n' +
        'function ceilToNearest(amount: number, precision: number) {\n' +
        '  return Math.ceil(amount / precision) * precision;\n' +
        '}\n' +
        '\n' +
        '@Injectable()\n' +
        'export class CustomEventTitleFormatter extends CalendarEventTitleFormatter {\n' +
        '  weekTooltip(event: CalendarEvent, title: string) {\n' +
        '    if (!event.meta.tmpEvent) {\n' +
        '      return super.weekTooltip(event, title);\n' +
        '    }\n' +
        '  }\n' +
        '\n' +
        '  dayTooltip(event: CalendarEvent, title: string) {\n' +
        '    if (!event.meta.tmpEvent) {\n' +
        '      return super.dayTooltip(event, title);\n' +
        '    }\n' +
        '  }\n' +
        '}\n' +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-demo-component',\n" +
        '  changeDetection: ChangeDetectionStrategy.OnPush,\n' +
        "  templateUrl: 'template.html',\n" +
        '  providers: [\n' +
        '    {\n' +
        '      provide: CalendarEventTitleFormatter,\n' +
        '      useClass: CustomEventTitleFormatter,\n' +
        '    },\n' +
        '  ],\n' +
        '  styles: [\n' +
        '    `\n' +
        '      .disable-hover {\n' +
        '        pointer-events: none;\n' +
        '      }\n' +
        '    `,\n' +
        '  ],\n' +
        '  encapsulation: ViewEncapsulation.None,\n' +
        '})\n' +
        'export class DemoComponent {\n' +
        '  viewDate = new Date();\n' +
        '\n' +
        '  events: CalendarEvent[] = [];\n' +
        '\n' +
        '  dragToCreateActive = false;\n' +
        '\n' +
        '  weekStartsOn: 0 = 0;\n' +
        '\n' +
        '  constructor(private cdr: ChangeDetectorRef) {}\n' +
        '\n' +
        '  startDragToCreate(\n' +
        '    segment: WeekViewHourSegment,\n' +
        '    mouseDownEvent: MouseEvent,\n' +
        '    segmentElement: HTMLElement\n' +
        '  ) {\n' +
        '    const dragToSelectEvent: CalendarEvent = {\n' +
        '      id: this.events.length,\n' +
        "      title: 'New event',\n" +
        '      start: segment.date,\n' +
        '      meta: {\n' +
        '        tmpEvent: true,\n' +
        '      },\n' +
        '    };\n' +
        '    this.events = [...this.events, dragToSelectEvent];\n' +
        '    const segmentPosition = segmentElement.getBoundingClientRect();\n' +
        '    this.dragToCreateActive = true;\n' +
        '    const endOfView = endOfWeek(this.viewDate, {\n' +
        '      weekStartsOn: this.weekStartsOn,\n' +
        '    });\n' +
        '\n' +
        "    fromEvent(document, 'mousemove')\n" +
        '      .pipe(\n' +
        '        finalize(() => {\n' +
        '          delete dragToSelectEvent.meta.tmpEvent;\n' +
        '          this.dragToCreateActive = false;\n' +
        '          this.refresh();\n' +
        '        }),\n' +
        "        takeUntil(fromEvent(document, 'mouseup'))\n" +
        '      )\n' +
        '      .subscribe((mouseMoveEvent: MouseEvent) => {\n' +
        '        const minutesDiff = ceilToNearest(\n' +
        '          mouseMoveEvent.clientY - segmentPosition.top,\n' +
        '          30\n' +
        '        );\n' +
        '\n' +
        '        const daysDiff =\n' +
        '          floorToNearest(\n' +
        '            mouseMoveEvent.clientX - segmentPosition.left,\n' +
        '            segmentPosition.width\n' +
        '          ) / segmentPosition.width;\n' +
        '\n' +
        '        const newEnd = addDays(addMinutes(segment.date, minutesDiff), daysDiff);\n' +
        '        if (newEnd > segment.date && newEnd < endOfView) {\n' +
        '          dragToSelectEvent.end = newEnd;\n' +
        '        }\n' +
        '        this.refresh();\n' +
        '      });\n' +
        '  }\n' +
        '\n' +
        '  private refresh() {\n' +
        '    this.events = [...this.events];\n' +
        '    this.cdr.detectChanges();\n' +
        '  }\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/drag-to-create-events/template.html',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 5,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 4,
      fixableWarningCount: 0,
      source: '<div class="row">\n' +
        '  <div class="col-md-6">\n' +
        '    <div class="btn-group">\n' +
        '      <div\n' +
        '        class="btn btn-primary"\n' +
        '        mwlCalendarPreviousView\n' +
        `        [view]="'week'"\n` +
        '        [(viewDate)]="viewDate"\n' +
        '      >\n' +
        '        Previous\n' +
        '      </div>\n' +
        '      <div\n' +
        '        class="btn btn-outline-secondary"\n' +
        '        mwlCalendarToday\n' +
        '        [(viewDate)]="viewDate"\n' +
        '      >\n' +
        '        Today\n' +
        '      </div>\n' +
        '      <div\n' +
        '        class="btn btn-primary"\n' +
        '        mwlCalendarNextView\n' +
        `        [view]="'week'"\n` +
        '        [(viewDate)]="viewDate"\n' +
        '      >\n' +
        '        Next\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '  <div class="col-md-6 text-right">\n' +
        "    <h3>{{ viewDate | calendarDate:('weekViewTitle') }}</h3>\n" +
        '  </div>\n' +
        '</div>\n' +
        '<br />\n' +
        '\n' +
        '<ng-template\n' +
        '  #weekViewHourSegmentTemplate\n' +
        '  let-segment="segment"\n' +
        '  let-locale="locale"\n' +
        '  let-segmentHeight="segmentHeight"\n' +
        '  let-isTimeLabel="isTimeLabel"\n' +
        '>\n' +
        '  <div\n' +
        '    #segmentElement\n' +
        '    class="cal-hour-segment"\n' +
        '    [style.height.px]="segmentHeight"\n' +
        '    [class.cal-hour-start]="segment.isStart"\n' +
        '    [class.cal-after-hour-start]="!segment.isStart"\n' +
        '    [ngClass]="segment.cssClass"\n' +
        '    (mousedown)="startDragToCreate(segment, $event, segmentElement)"\n' +
        '  >\n' +
        '    <div class="cal-time" *ngIf="isTimeLabel">\n' +
        "      {{ segment.date | calendarDate:'weekViewHour':locale }}\n" +
        '    </div>\n' +
        '  </div>\n' +
        '</ng-template>\n' +
        '\n' +
        '<mwl-calendar-week-view\n' +
        '  [viewDate]="viewDate"\n' +
        '  [events]="events"\n' +
        '  [hourSegmentTemplate]="weekViewHourSegmentTemplate"\n' +
        '  [weekStartsOn]="weekStartsOn"\n' +
        '>\n' +
        '</mwl-calendar-week-view>\n',
      usedDeprecatedRules: [Array]
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/draggable-events/component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: "import { Component, ChangeDetectionStrategy } from '@angular/core';\n" +
        "import { Subject } from 'rxjs';\n" +
        'import {\n' +
        '  CalendarEvent,\n' +
        '  CalendarEventTimesChangedEvent,\n' +
        '  CalendarView,\n' +
        "} from 'angular-calendar';\n" +
        "import { colors } from '../demo-utils/colors';\n" +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-demo-component',\n" +
        '  changeDetection: ChangeDetectionStrategy.OnPush,\n' +
        "  templateUrl: 'template.html',\n" +
        '})\n' +
        'export class DemoComponent {\n' +
        '  view: CalendarView = CalendarView.Month;\n' +
        '\n' +
        '  viewDate = new Date();\n' +
        '\n' +
        '  events: CalendarEvent[] = [\n' +
        '    {\n' +
        "      title: 'Draggable event',\n" +
        '      color: colors.yellow,\n' +
        '      start: new Date(),\n' +
        '      draggable: true,\n' +
        '    },\n' +
        '    {\n' +
        "      title: 'A non draggable event',\n" +
        '      color: colors.blue,\n' +
        '      start: new Date(),\n' +
        '    },\n' +
        '  ];\n' +
        '\n' +
        '  refresh = new Subject<void>();\n' +
        '\n' +
        '  eventTimesChanged({\n' +
        '    event,\n' +
        '    newStart,\n' +
        '    newEnd,\n' +
        '  }: CalendarEventTimesChangedEvent): void {\n' +
        '    event.start = newStart;\n' +
        '    event.end = newEnd;\n' +
        '    this.refresh.next();\n' +
        '  }\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/draggable-external-events/component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 2,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: "import { Component, ChangeDetectionStrategy } from '@angular/core';\n" +
        'import {\n' +
        '  CalendarEvent,\n' +
        '  CalendarEventTimesChangedEvent,\n' +
        '  CalendarView,\n' +
        "} from 'angular-calendar';\n" +
        "import { Subject } from 'rxjs';\n" +
        "import { colors } from '../demo-utils/colors';\n" +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-demo-component',\n" +
        '  changeDetection: ChangeDetectionStrategy.OnPush,\n' +
        "  templateUrl: 'template.html',\n" +
        '  styles: [\n' +
        '    `\n' +
        '      .drag-active {\n' +
        '        position: relative;\n' +
        '        z-index: 1;\n' +
        '        pointer-events: none;\n' +
        '      }\n' +
        '      .drag-over {\n' +
        '        background-color: #eee;\n' +
        '      }\n' +
        '    `,\n' +
        '  ],\n' +
        '})\n' +
        'export class DemoComponent {\n' +
        '  CalendarView = CalendarView;\n' +
        '\n' +
        '  view = CalendarView.Month;\n' +
        '\n' +
        '  viewDate = new Date();\n' +
        '\n' +
        '  externalEvents: CalendarEvent[] = [\n' +
        '    {\n' +
        "      title: 'Event 1',\n" +
        '      color: colors.yellow,\n' +
        '      start: new Date(),\n' +
        '      draggable: true,\n' +
        '    },\n' +
        '    {\n' +
        "      title: 'Event 2',\n" +
        '      color: colors.blue,\n' +
        '      start: new Date(),\n' +
        '      draggable: true,\n' +
        '    },\n' +
        '  ];\n' +
        '\n' +
        '  events: CalendarEvent[] = [];\n' +
        '\n' +
        '  activeDayIsOpen = false;\n' +
        '\n' +
        '  refresh = new Subject<void>();\n' +
        '\n' +
        '  eventDropped({\n' +
        '    event,\n' +
        '    newStart,\n' +
        '    newEnd,\n' +
        '    allDay,\n' +
        '  }: CalendarEventTimesChangedEvent): void {\n' +
        '    const externalIndex = this.externalEvents.indexOf(event);\n' +
        "    if (typeof allDay !== 'undefined') {\n" +
        '      event.allDay = allDay;\n' +
        '    }\n' +
        '    if (externalIndex > -1) {\n' +
        '      this.externalEvents.splice(externalIndex, 1);\n' +
        '      this.events.push(event);\n' +
        '    }\n' +
        '    event.start = newStart;\n' +
        '    if (newEnd) {\n' +
        '      event.end = newEnd;\n' +
        '    }\n' +
        "    if (this.view === 'month') {\n" +
        '      this.viewDate = newStart;\n' +
        '      this.activeDayIsOpen = true;\n' +
        '    }\n' +
        '    this.events = [...this.events];\n' +
        '  }\n' +
        '\n' +
        '  externalDrop(event: CalendarEvent) {\n' +
        '    if (this.externalEvents.indexOf(event) === -1) {\n' +
        '      this.events = this.events.filter((iEvent) => iEvent !== event);\n' +
        '      this.externalEvents.push(event);\n' +
        '    }\n' +
        '  }\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/draggable-external-events/module.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 1,
      fixableWarningCount: 0,
      source: "import { NgModule } from '@angular/core';\n" +
        "import { CommonModule } from '@angular/common';\n" +
        "import { RouterModule } from '@angular/router';\n" +
        "import { CalendarModule, DateAdapter } from 'angular-calendar';\n" +
        "import { DragAndDropModule } from 'angular-draggable-droppable';\n" +
        "import { DemoUtilsModule } from '../demo-utils/module';\n" +
        "import { DemoComponent } from './component';\n" +
        "import { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\n" +
        '\n' +
        '@NgModule({\n' +
        '  imports: [\n' +
        '    CommonModule,\n' +
        '    CalendarModule.forRoot({\n' +
        '      provide: DateAdapter,\n' +
        '      useFactory: adapterFactory,\n' +
        '    }),\n' +
        '    DragAndDropModule,\n' +
        '    DemoUtilsModule,\n' +
        "    RouterModule.forChild([{ path: '', component: DemoComponent }]),\n" +
        '  ],\n' +
        '  declarations: [DemoComponent],\n' +
        '  exports: [DemoComponent],\n' +
        '})\n' +
        'export class DemoModule {}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/draggable-external-events/template.html',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 7,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 5,
      fixableWarningCount: 0,
      source: '<div class="row">\n' +
        '  <div class="col-md-3">\n' +
        '    <div\n' +
        '      class="card"\n' +
        '      mwlDroppable\n' +
        '      (drop)="externalDrop($event.dropData.event)"\n' +
        '      dragOverClass="drag-over"\n' +
        '    >\n' +
        '      <div class="card-body">\n' +
        '        <p *ngIf="externalEvents.length === 0"><em>No events added</em></p>\n' +
        '        <ul>\n' +
        '          <li\n' +
        '            *ngFor="let event of externalEvents"\n' +
        '            mwlDraggable\n' +
        '            [dropData]="{event: event}"\n' +
        '            [touchStartLongPress]="{ delay: 300, delta: 30 }"\n' +
        '            dragActiveClass="drag-active"\n' +
        '          >\n' +
        '            <a href="javascript:;" [style.color]="event.color.primary">\n' +
        '              {{ event.title }}\n' +
        '            </a>\n' +
        '          </li>\n' +
        '        </ul>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '\n' +
        '  <div class="col-md-9">\n' +
        '    <mwl-demo-utils-calendar-header [(view)]="view" [(viewDate)]="viewDate">\n' +
        '    </mwl-demo-utils-calendar-header>\n' +
        '\n' +
        '    <div [ngSwitch]="view">\n' +
        '      <mwl-calendar-month-view\n' +
        '        *ngSwitchCase="CalendarView.Month"\n' +
        '        [viewDate]="viewDate"\n' +
        '        [events]="events"\n' +
        '        [activeDayIsOpen]="activeDayIsOpen"\n' +
        '        [refresh]="refresh"\n' +
        '        (eventTimesChanged)="eventDropped($event)"\n' +
        '      >\n' +
        '      </mwl-calendar-month-view>\n' +
        '      <mwl-calendar-week-view\n' +
        '        *ngSwitchCase="CalendarView.Week"\n' +
        '        [viewDate]="viewDate"\n' +
        '        [events]="events"\n' +
        '        [refresh]="refresh"\n' +
        '        [snapDraggedEvents]="false"\n' +
        '        (eventTimesChanged)="eventDropped($event)"\n' +
        '      >\n' +
        '      </mwl-calendar-week-view>\n' +
        '      <mwl-calendar-day-view\n' +
        '        *ngSwitchCase="CalendarView.Day"\n' +
        '        [viewDate]="viewDate"\n' +
        '        [events]="events"\n' +
        '        [refresh]="refresh"\n' +
        '        [snapDraggedEvents]="false"\n' +
        '        (eventTimesChanged)="eventDropped($event)"\n' +
        '      >\n' +
        '      </mwl-calendar-day-view>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n',
      usedDeprecatedRules: [Array]
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/editable-deletable-events/component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: "import { Component, ChangeDetectionStrategy } from '@angular/core';\n" +
        "import { CalendarEvent, CalendarView } from 'angular-calendar';\n" +
        "import { colors } from '../demo-utils/colors';\n" +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-demo-component',\n" +
        '  changeDetection: ChangeDetectionStrategy.OnPush,\n' +
        "  templateUrl: 'template.html',\n" +
        '})\n' +
        'export class DemoComponent {\n' +
        '  view: CalendarView = CalendarView.Month;\n' +
        '\n' +
        '  viewDate: Date = new Date();\n' +
        '\n' +
        '  events: CalendarEvent[] = [\n' +
        '    {\n' +
        "      title: 'Editable event',\n" +
        '      color: colors.yellow,\n' +
        '      start: new Date(),\n' +
        '      actions: [\n' +
        '        {\n' +
        `          label: '<i class="fas fa-fw fa-pencil-alt"></i>',\n` +
        '          onClick: ({ event }: { event: CalendarEvent }): void => {\n' +
        "            console.log('Edit event', event);\n" +
        '          },\n' +
        '        },\n' +
        '      ],\n' +
        '    },\n' +
        '    {\n' +
        "      title: 'Deletable event',\n" +
        '      color: colors.blue,\n' +
        '      start: new Date(),\n' +
        '      actions: [\n' +
        '        {\n' +
        `          label: '<i class="fas fa-fw fa-trash-alt"></i>',\n` +
        '          onClick: ({ event }: { event: CalendarEvent }): void => {\n' +
        '            this.events = this.events.filter((iEvent) => iEvent !== event);\n' +
        "            console.log('Event deleted', event);\n" +
        '          },\n' +
        '        },\n' +
        '      ],\n' +
        '    },\n' +
        '    {\n' +
        "      title: 'Non editable and deletable event',\n" +
        '      color: colors.red,\n' +
        '      start: new Date(),\n' +
        '    },\n' +
        '  ];\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/exclude-days/component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 2,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: 'import {\n' +
        '  Component,\n' +
        '  ChangeDetectionStrategy,\n' +
        '  ViewEncapsulation,\n' +
        "} from '@angular/core';\n" +
        "import { CalendarEvent, CalendarView, DAYS_OF_WEEK } from 'angular-calendar';\n" +
        "import { colors } from '../demo-utils/colors';\n" +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-demo-component',\n" +
        '  changeDetection: ChangeDetectionStrategy.OnPush,\n' +
        '  encapsulation: ViewEncapsulation.None,\n' +
        "  templateUrl: 'template.html',\n" +
        '})\n' +
        'export class DemoComponent {\n' +
        '  view: CalendarView = CalendarView.Month;\n' +
        '\n' +
        "  viewDate: Date = new Date('2016-01-05');\n" +
        '\n' +
        '  events: CalendarEvent[] = [\n' +
        '    {\n' +
        "      start: new Date('2016-01-08'),\n" +
        "      end: new Date('2016-01-10'),\n" +
        "      title: 'One day excluded event',\n" +
        '      color: colors.red,\n' +
        '      allDay: true,\n' +
        '    },\n' +
        '    {\n' +
        "      start: new Date('2016-01-01'),\n" +
        "      end: new Date('2016-01-09'),\n" +
        "      title: 'Multiple weeks event',\n" +
        '      allDay: true,\n' +
        '    },\n' +
        '  ];\n' +
        '\n' +
        '  // exclude weekends\n' +
        '  excludeDays: number[] = [0, 6];\n' +
        '\n' +
        '  weekStartsOn = DAYS_OF_WEEK.SUNDAY;\n' +
        '\n' +
        '  CalendarView = CalendarView;\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/exclude-days/template.html',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 17,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 11,
      fixableWarningCount: 0,
      source: '<div class="row text-center">\n' +
        '  <div class="col-md-4">\n' +
        '    <div class="btn-group">\n' +
        '      <div\n' +
        '        class="btn btn-primary"\n' +
        '        mwlCalendarPreviousView\n' +
        '        [view]="view"\n' +
        '        [(viewDate)]="viewDate"\n' +
        '        [excludeDays]="excludeDays"\n' +
        '      >\n' +
        '        Previous\n' +
        '      </div>\n' +
        '      <div\n' +
        '        class="btn btn-outline-secondary"\n' +
        '        mwlCalendarToday\n' +
        '        [(viewDate)]="viewDate"\n' +
        '      >\n' +
        '        Today\n' +
        '      </div>\n' +
        '      <div\n' +
        '        class="btn btn-primary"\n' +
        '        mwlCalendarNextView\n' +
        '        [view]="view"\n' +
        '        [(viewDate)]="viewDate"\n' +
        '        [excludeDays]="excludeDays"\n' +
        '      >\n' +
        '        Next\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '  <div class="col-md-4">\n' +
        '    <h3>\n' +
        '      {{ viewDate | calendarDate:(view +\n' +
        "      'ViewTitle'):'en':weekStartsOn:excludeDays }}\n" +
        '    </h3>\n' +
        '  </div>\n' +
        '  <div class="col-md-4">\n' +
        '    <div class="btn-group">\n' +
        '      <div\n' +
        '        class="btn btn-primary"\n' +
        '        (click)="view = CalendarView.Month"\n' +
        `        [class.active]="view === 'month'"\n` +
        '      >\n' +
        '        Month\n' +
        '      </div>\n' +
        '      <div\n' +
        '        class="btn btn-primary"\n' +
        '        (click)="view = CalendarView.Week"\n' +
        `        [class.active]="view === 'week'"\n` +
        '      >\n' +
        '        Week\n' +
        '      </div>\n' +
        '      <div\n' +
        '        class="btn btn-primary"\n' +
        '        (click)="view = CalendarView.Day"\n' +
        `        [class.active]="view === 'day'"\n` +
        '      >\n' +
        '        Day\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n' +
        '<br />\n' +
        '\n' +
        '<div [ngSwitch]="view">\n' +
        '  <mwl-calendar-month-view\n' +
        `    *ngSwitchCase="'month'"\n` +
        '    [viewDate]="viewDate"\n' +
        '    [events]="events"\n' +
        '    [excludeDays]="excludeDays"\n' +
        '  >\n' +
        '  </mwl-calendar-month-view>\n' +
        '  <mwl-calendar-week-view\n' +
        `    *ngSwitchCase="'week'"\n` +
        '    [excludeDays]="excludeDays"\n' +
        '    [viewDate]="viewDate"\n' +
        '    [events]="events"\n' +
        '  >\n' +
        '  </mwl-calendar-week-view>\n' +
        '  <mwl-calendar-day-view\n' +
        `    *ngSwitchCase="'day'"\n` +
        '    [viewDate]="viewDate"\n' +
        '    [events]="events"\n' +
        '  >\n' +
        '  </mwl-calendar-day-view>\n' +
        '</div>\n',
      usedDeprecatedRules: [Array]
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/extra-month-view-weeks/component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 2,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: "import { Component, ChangeDetectionStrategy, Injectable } from '@angular/core';\n" +
        "import { CalendarEvent, CalendarUtils } from 'angular-calendar';\n" +
        "import { subWeeks, startOfMonth, endOfMonth, addWeeks } from 'date-fns';\n" +
        "import { GetMonthViewArgs, MonthView } from 'calendar-utils';\n" +
        '\n' +
        '@Injectable()\n' +
        'export class MyCalendarUtils extends CalendarUtils {\n' +
        '  getMonthView(args: GetMonthViewArgs): MonthView {\n' +
        '    args.viewStart = subWeeks(startOfMonth(args.viewDate), 1);\n' +
        '    args.viewEnd = addWeeks(endOfMonth(args.viewDate), 1);\n' +
        '    return super.getMonthView(args);\n' +
        '  }\n' +
        '}\n' +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-demo-component',\n" +
        '  changeDetection: ChangeDetectionStrategy.OnPush,\n' +
        "  templateUrl: 'template.html',\n" +
        '  providers: [\n' +
        '    {\n' +
        '      provide: CalendarUtils,\n' +
        '      useClass: MyCalendarUtils,\n' +
        '    },\n' +
        '  ],\n' +
        '})\n' +
        'export class DemoComponent {\n' +
        '  viewDate: Date = new Date();\n' +
        '\n' +
        '  events: CalendarEvent[] = [];\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/group-similar-events/component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: "import { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\n" +
        'import {\n' +
        '  CalendarEvent,\n' +
        '  CalendarMonthViewDay,\n' +
        '  CalendarView,\n' +
        "} from 'angular-calendar';\n" +
        "import { colors } from '../demo-utils/colors';\n" +
        "import { isSameMinute, startOfDay } from 'date-fns';\n" +
        '\n' +
        'interface EventGroupMeta {\n' +
        '  type: string;\n' +
        '}\n' +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-demo-component',\n" +
        '  changeDetection: ChangeDetectionStrategy.OnPush,\n' +
        "  templateUrl: './template.html',\n" +
        '  styles: [\n' +
        '    `\n' +
        '      .cell-totals {\n' +
        '        margin: 5px;\n' +
        '        text-align: center;\n' +
        '      }\n' +
        '      .badge {\n' +
        '        margin-right: 5px;\n' +
        '      }\n' +
        '    `,\n' +
        '  ],\n' +
        '})\n' +
        'export class DemoComponent implements OnInit {\n' +
        '  view: CalendarView = CalendarView.Month;\n' +
        '\n' +
        '  viewDate: Date = new Date();\n' +
        '\n' +
        '  events: CalendarEvent[] = [\n' +
        '    {\n' +
        "      title: 'Event 1',\n" +
        '      color: colors.yellow,\n' +
        '      start: startOfDay(new Date()),\n' +
        '      meta: {\n' +
        "        type: 'warning',\n" +
        '      },\n' +
        '    },\n' +
        '    {\n' +
        "      title: 'Event 2',\n" +
        '      color: colors.yellow,\n' +
        '      start: startOfDay(new Date()),\n' +
        '      meta: {\n' +
        "        type: 'warning',\n" +
        '      },\n' +
        '    },\n' +
        '    {\n' +
        "      title: 'Event 3',\n" +
        '      color: colors.blue,\n' +
        '      start: startOfDay(new Date()),\n' +
        '      meta: {\n' +
        "        type: 'info',\n" +
        '      },\n' +
        '    },\n' +
        '    {\n' +
        "      title: 'Event 4',\n" +
        '      color: colors.red,\n' +
        '      start: startOfDay(new Date()),\n' +
        '      meta: {\n' +
        "        type: 'danger',\n" +
        '      },\n' +
        '    },\n' +
        '    {\n' +
        "      title: 'Event 5',\n" +
        '      color: colors.red,\n' +
        '      start: startOfDay(new Date()),\n' +
        '      meta: {\n' +
        "        type: 'danger',\n" +
        '      },\n' +
        '    },\n' +
        '  ];\n' +
        '\n' +
        '  groupedSimilarEvents: CalendarEvent[] = [];\n' +
        '\n' +
        '  ngOnInit() {\n' +
        '    // group any events together that have the same type and dates\n' +
        '    // use for when you have a lot of events on the week or day view at the same time\n' +
        '    this.groupedSimilarEvents = [];\n' +
        '    const processedEvents = new Set();\n' +
        '    this.events.forEach((event) => {\n' +
        '      if (processedEvents.has(event)) {\n' +
        '        return;\n' +
        '      }\n' +
        '      const similarEvents = this.events.filter((otherEvent) => {\n' +
        '        return (\n' +
        '          otherEvent !== event &&\n' +
        '          !processedEvents.has(otherEvent) &&\n' +
        '          isSameMinute(otherEvent.start, event.start) &&\n' +
        '          (isSameMinute(otherEvent.end, event.end) ||\n' +
        '            (!otherEvent.end && !event.end)) &&\n' +
        '          otherEvent.color.primary === event.color.primary &&\n' +
        '          otherEvent.color.secondary === event.color.secondary\n' +
        '        );\n' +
        '      });\n' +
        '      processedEvents.add(event);\n' +
        '      similarEvents.forEach((otherEvent) => {\n' +
        '        processedEvents.add(otherEvent);\n' +
        '      });\n' +
        '      if (similarEvents.length > 0) {\n' +
        '        this.groupedSimilarEvents.push({\n' +
        '          title: `${similarEvents.length + 1} events`,\n' +
        '          color: event.color,\n' +
        '          start: event.start,\n' +
        '          end: event.end,\n' +
        '          meta: {\n' +
        '            groupedEvents: [event, ...similarEvents],\n' +
        '          },\n' +
        '        });\n' +
        '      } else {\n' +
        '        this.groupedSimilarEvents.push(event);\n' +
        '      }\n' +
        '    });\n' +
        '  }\n' +
        '\n' +
        '  beforeMonthViewRender({\n' +
        '    body,\n' +
        '  }: {\n' +
        '    body: CalendarMonthViewDay<EventGroupMeta>[];\n' +
        '  }): void {\n' +
        '    // month view has a different UX from the week and day view so we only really need to group by the type\n' +
        '    body.forEach((cell) => {\n' +
        '      const groups = {};\n' +
        '      cell.events.forEach((event: CalendarEvent<EventGroupMeta>) => {\n' +
        '        groups[event.meta.type] = groups[event.meta.type] || [];\n' +
        '        groups[event.meta.type].push(event);\n' +
        '      });\n' +
        "      cell['eventGroups'] = Object.entries(groups);\n" +
        '    });\n' +
        '  }\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/group-similar-events/module.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 1,
      fixableWarningCount: 0,
      source: "import { NgModule } from '@angular/core';\n" +
        "import { CommonModule } from '@angular/common';\n" +
        "import { RouterModule } from '@angular/router';\n" +
        "import { CalendarModule, DateAdapter } from 'angular-calendar';\n" +
        "import { DemoUtilsModule } from '../demo-utils/module';\n" +
        "import { DemoComponent } from './component';\n" +
        "import { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\n" +
        "import { NgbPopoverModule } from '@ng-bootstrap/ng-bootstrap';\n" +
        '\n' +
        '@NgModule({\n' +
        '  imports: [\n' +
        '    CommonModule,\n' +
        '    CalendarModule.forRoot({\n' +
        '      provide: DateAdapter,\n' +
        '      useFactory: adapterFactory,\n' +
        '    }),\n' +
        '    NgbPopoverModule,\n' +
        '    DemoUtilsModule,\n' +
        "    RouterModule.forChild([{ path: '', component: DemoComponent }]),\n" +
        '  ],\n' +
        '  declarations: [DemoComponent],\n' +
        '  exports: [DemoComponent],\n' +
        '})\n' +
        'export class DemoModule {}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/group-similar-events/template.html',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 13,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 7,
      fixableWarningCount: 0,
      source: '<mwl-demo-utils-calendar-header [(view)]="view" [(viewDate)]="viewDate">\n' +
        '</mwl-demo-utils-calendar-header>\n' +
        '\n' +
        '<ng-template #customCellTemplate let-day="day" let-locale="locale">\n' +
        '  <div class="cal-cell-top">\n' +
        '    <span class="cal-day-badge" *ngIf="day.badgeTotal > 0"\n' +
        '      >{{ day.badgeTotal }}</span\n' +
        '    >\n' +
        '    <span class="cal-day-number"\n' +
        "      >{{ day.date | calendarDate:'monthViewDayNumber':locale }}</span\n" +
        '    >\n' +
        '  </div>\n' +
        '  <div class="cell-totals">\n' +
        '    <span\n' +
        '      *ngFor="let group of day.eventGroups"\n' +
        '      class="badge text-bg-{{ group[0] }}"\n' +
        '    >\n' +
        '      {{ group[1].length }}\n' +
        '    </span>\n' +
        '  </div>\n' +
        '</ng-template>\n' +
        '\n' +
        '<ng-template\n' +
        '  #customEventTemplate\n' +
        '  let-weekEvent="weekEvent"\n' +
        '  let-tooltipPlacement="tooltipPlacement"\n' +
        '  let-eventClicked="eventClicked"\n' +
        '  let-tooltipTemplate="tooltipTemplate"\n' +
        '  let-tooltipAppendToBody="tooltipAppendToBody"\n' +
        '  let-tooltipDisabled="tooltipDisabled"\n' +
        '  let-tooltipDelay="tooltipDelay"\n' +
        '  let-column="column"\n' +
        '>\n' +
        '  <ng-template #groupedEventsTemplate>\n' +
        '    <div style="min-width: 150px">\n' +
        '      <div *ngFor="let event of weekEvent.event.meta.groupedEvents">\n' +
        '        <mwl-calendar-event-actions [event]="event">\n' +
        '        </mwl-calendar-event-actions>\n' +
        '        &ngsp;\n' +
        '        <mwl-calendar-event-title [event]="event" view="week">\n' +
        '        </mwl-calendar-event-title>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </ng-template>\n' +
        '\n' +
        '  <div\n' +
        '    [ngbPopover]="groupedEventsTemplate"\n' +
        '    [disablePopover]="!weekEvent.event.meta.groupedEvents"\n' +
        '    class="cal-event"\n' +
        '    [ngStyle]="{\n' +
        '          color: weekEvent.event.color?.secondaryText,\n' +
        '          backgroundColor: weekEvent.event.color?.secondary,\n' +
        '          borderColor: weekEvent.event.color?.primary\n' +
        '        }"\n' +
        '    [mwlCalendarTooltip]="\n' +
        '          !tooltipDisabled && !weekEvent.event.meta.groupedEvents\n' +
        '            ? (weekEvent.event.title\n' +
        "              | calendarEventTitle: 'weekTooltip':weekEvent.event)\n" +
        "            : ''\n" +
        '        "\n' +
        '    [tooltipPlacement]="tooltipPlacement"\n' +
        '    [tooltipEvent]="weekEvent.event"\n' +
        '    [tooltipTemplate]="tooltipTemplate"\n' +
        '    [tooltipAppendToBody]="tooltipAppendToBody"\n' +
        '    [tooltipDelay]="tooltipDelay"\n' +
        '    (mwlClick)="eventClicked.emit()"\n' +
        '  >\n' +
        '    <ng-container *ngIf="!weekEvent.event.meta.groupedEvents">\n' +
        '      <mwl-calendar-event-actions [event]="weekEvent.event">\n' +
        '      </mwl-calendar-event-actions>\n' +
        '      &ngsp;\n' +
        '    </ng-container>\n' +
        '    <mwl-calendar-event-title [event]="weekEvent.event" view="week">\n' +
        '    </mwl-calendar-event-title>\n' +
        '  </div>\n' +
        '</ng-template>\n' +
        '\n' +
        '<div [ngSwitch]="view">\n' +
        '  <mwl-calendar-month-view\n' +
        `    *ngSwitchCase="'month'"\n` +
        '    [viewDate]="viewDate"\n' +
        '    [events]="events"\n' +
        '    [cellTemplate]="customCellTemplate"\n' +
        '    (beforeViewRender)="beforeMonthViewRender($event)"\n' +
        '    [activeDayIsOpen]="true"\n' +
        '  >\n' +
        '  </mwl-calendar-month-view>\n' +
        '  <mwl-calendar-week-view\n' +
        `    *ngSwitchCase="'week'"\n` +
        '    [viewDate]="viewDate"\n' +
        '    [events]="groupedSimilarEvents"\n' +
        '    [eventTemplate]="customEventTemplate"\n' +
        '  >\n' +
        '  </mwl-calendar-week-view>\n' +
        '  <mwl-calendar-day-view\n' +
        `    *ngSwitchCase="'day'"\n` +
        '    [viewDate]="viewDate"\n' +
        '    [events]="groupedSimilarEvents"\n' +
        '    [eventTemplate]="customEventTemplate"\n' +
        '  >\n' +
        '  </mwl-calendar-day-view>\n' +
        '</div>\n',
      usedDeprecatedRules: [Array]
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/i18n/component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: "import { Component, ChangeDetectionStrategy } from '@angular/core';\n" +
        'import {\n' +
        '  CalendarDateFormatter,\n' +
        '  CalendarEvent,\n' +
        '  CalendarView,\n' +
        '  DAYS_OF_WEEK,\n' +
        "} from 'angular-calendar';\n" +
        "import { CustomDateFormatter } from './custom-date-formatter.provider';\n" +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-demo-component',\n" +
        '  changeDetection: ChangeDetectionStrategy.OnPush,\n' +
        "  templateUrl: 'template.html',\n" +
        '  providers: [\n' +
        '    {\n' +
        '      provide: CalendarDateFormatter,\n' +
        '      useClass: CustomDateFormatter,\n' +
        '    },\n' +
        '  ],\n' +
        '})\n' +
        'export class DemoComponent {\n' +
        '  view: CalendarView = CalendarView.Month;\n' +
        '\n' +
        '  viewDate = new Date();\n' +
        '\n' +
        '  events: CalendarEvent[] = [];\n' +
        '\n' +
        "  locale: string = 'fr';\n" +
        '\n' +
        '  weekStartsOn: number = DAYS_OF_WEEK.MONDAY;\n' +
        '\n' +
        '  weekendDays: number[] = [DAYS_OF_WEEK.FRIDAY, DAYS_OF_WEEK.SATURDAY];\n' +
        '\n' +
        '  CalendarView = CalendarView;\n' +
        '\n' +
        '  setView(view: CalendarView) {\n' +
        '    this.view = view;\n' +
        '  }\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/i18n/custom-date-formatter.provider.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: "import { CalendarDateFormatter, DateFormatterParams } from 'angular-calendar';\n" +
        "import { formatDate } from '@angular/common';\n" +
        "import { Injectable } from '@angular/core';\n" +
        '\n' +
        '@Injectable()\n' +
        'export class CustomDateFormatter extends CalendarDateFormatter {\n' +
        '  // you can override any of the methods defined in the parent class\n' +
        '\n' +
        '  public dayViewHour({ date, locale }: DateFormatterParams): string {\n' +
        "    return formatDate(date, 'HH:mm', locale);\n" +
        '  }\n' +
        '\n' +
        '  public weekViewHour({ date, locale }: DateFormatterParams): string {\n' +
        '    return this.dayViewHour({ date, locale });\n' +
        '  }\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/i18n/template.html',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 15,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 9,
      fixableWarningCount: 0,
      source: '<div class="row text-center">\n' +
        '  <div class="col-md-4">\n' +
        '    <div class="btn-group">\n' +
        '      <div\n' +
        '        class="btn btn-primary"\n' +
        '        mwlCalendarPreviousView\n' +
        '        [view]="view"\n' +
        '        [(viewDate)]="viewDate"\n' +
        '      >\n' +
        '        Previous\n' +
        '      </div>\n' +
        '      <div\n' +
        '        class="btn btn-outline-secondary"\n' +
        '        mwlCalendarToday\n' +
        '        [(viewDate)]="viewDate"\n' +
        '      >\n' +
        '        Today\n' +
        '      </div>\n' +
        '      <div\n' +
        '        class="btn btn-primary"\n' +
        '        mwlCalendarNextView\n' +
        '        [view]="view"\n' +
        '        [(viewDate)]="viewDate"\n' +
        '      >\n' +
        '        Next\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '  <div class="col-md-4">\n' +
        '    <h3>\n' +
        "      {{ viewDate | calendarDate:(view + 'ViewTitle'):locale:weekStartsOn }}\n" +
        '    </h3>\n' +
        '  </div>\n' +
        '  <div class="col-md-4">\n' +
        '    <div class="btn-group">\n' +
        '      <div\n' +
        '        class="btn btn-primary"\n' +
        '        (click)="setView(CalendarView.Month)"\n' +
        '        [class.active]="view === CalendarView.Month"\n' +
        '      >\n' +
        '        Month\n' +
        '      </div>\n' +
        '      <div\n' +
        '        class="btn btn-primary"\n' +
        '        (click)="setView(CalendarView.Week)"\n' +
        '        [class.active]="view === CalendarView.Week"\n' +
        '      >\n' +
        '        Week\n' +
        '      </div>\n' +
        '      <div\n' +
        '        class="btn btn-primary"\n' +
        '        (click)="setView(CalendarView.Day)"\n' +
        '        [class.active]="view === CalendarView.Day"\n' +
        '      >\n' +
        '        Day\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n' +
        '<br />\n' +
        '\n' +
        '<div [ngSwitch]="view">\n' +
        '  <mwl-calendar-month-view\n' +
        `    *ngSwitchCase="'month'"\n` +
        '    [viewDate]="viewDate"\n' +
        '    [events]="events"\n' +
        '    [locale]="locale"\n' +
        '    [weekStartsOn]="weekStartsOn"\n' +
        '    [weekendDays]="weekendDays"\n' +
        '  >\n' +
        '  </mwl-calendar-month-view>\n' +
        '  <mwl-calendar-week-view\n' +
        `    *ngSwitchCase="'week'"\n` +
        '    [viewDate]="viewDate"\n' +
        '    [events]="events"\n' +
        '    [locale]="locale"\n' +
        '    [weekStartsOn]="weekStartsOn"\n' +
        '    [weekendDays]="weekendDays"\n' +
        '  >\n' +
        '  </mwl-calendar-week-view>\n' +
        '  <mwl-calendar-day-view\n' +
        `    *ngSwitchCase="'day'"\n` +
        '    [viewDate]="viewDate"\n' +
        '    [events]="events"\n' +
        '    [locale]="locale"\n' +
        '  >\n' +
        '  </mwl-calendar-day-view>\n' +
        '</div>\n',
      usedDeprecatedRules: [Array]
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/kitchen-sink/component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 2,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: 'import {\n' +
        '  Component,\n' +
        '  ChangeDetectionStrategy,\n' +
        '  ViewChild,\n' +
        '  TemplateRef,\n' +
        "} from '@angular/core';\n" +
        'import {\n' +
        '  startOfDay,\n' +
        '  endOfDay,\n' +
        '  subDays,\n' +
        '  addDays,\n' +
        '  endOfMonth,\n' +
        '  isSameDay,\n' +
        '  isSameMonth,\n' +
        '  addHours,\n' +
        "} from 'date-fns';\n" +
        "import { Subject } from 'rxjs';\n" +
        "import { NgbModal } from '@ng-bootstrap/ng-bootstrap';\n" +
        'import {\n' +
        '  CalendarEvent,\n' +
        '  CalendarEventAction,\n' +
        '  CalendarEventTimesChangedEvent,\n' +
        '  CalendarView,\n' +
        "} from 'angular-calendar';\n" +
        "import { EventColor } from 'calendar-utils';\n" +
        '\n' +
        'const colors: Record<string, EventColor> = {\n' +
        '  red: {\n' +
        "    primary: '#ad2121',\n" +
        "    secondary: '#FAE3E3',\n" +
        '  },\n' +
        '  blue: {\n' +
        "    primary: '#1e90ff',\n" +
        "    secondary: '#D1E8FF',\n" +
        '  },\n' +
        '  yellow: {\n' +
        "    primary: '#e3bc08',\n" +
        "    secondary: '#FDF1BA',\n" +
        '  },\n' +
        '};\n' +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-demo-component',\n" +
        '  changeDetection: ChangeDetectionStrategy.OnPush,\n' +
        '  styles: [\n' +
        '    `\n' +
        '      h3 {\n' +
        '        margin: 0 0 10px;\n' +
        '      }\n' +
        '\n' +
        '      pre {\n' +
        '        background-color: #f5f5f5;\n' +
        '        padding: 15px;\n' +
        '      }\n' +
        '    `,\n' +
        '  ],\n' +
        "  templateUrl: 'template.html',\n" +
        '})\n' +
        'export class DemoComponent {\n' +
        "  @ViewChild('modalContent', { static: true }) modalContent: TemplateRef<any>;\n" +
        '\n' +
        '  view: CalendarView = CalendarView.Month;\n' +
        '\n' +
        '  CalendarView = CalendarView;\n' +
        '\n' +
        '  viewDate: Date = new Date();\n' +
        '\n' +
        '  modalData: {\n' +
        '    action: string;\n' +
        '    event: CalendarEvent;\n' +
        '  };\n' +
        '\n' +
        '  actions: CalendarEventAction[] = [\n' +
        '    {\n' +
        `      label: '<i class="fas fa-fw fa-pencil-alt"></i>',\n` +
        "      a11yLabel: 'Edit',\n" +
        '      onClick: ({ event }: { event: CalendarEvent }): void => {\n' +
        "        this.handleEvent('Edited', event);\n" +
        '      },\n' +
        '    },\n' +
        '    {\n' +
        `      label: '<i class="fas fa-fw fa-trash-alt"></i>',\n` +
        "      a11yLabel: 'Delete',\n" +
        '      onClick: ({ event }: { event: CalendarEvent }): void => {\n' +
        '        this.events = this.events.filter((iEvent) => iEvent !== event);\n' +
        "        this.handleEvent('Deleted', event);\n" +
        '      },\n' +
        '    },\n' +
        '  ];\n' +
        '\n' +
        '  refresh = new Subject<void>();\n' +
        '\n' +
        '  events: CalendarEvent[] = [\n' +
        '    {\n' +
        '      start: subDays(startOfDay(new Date()), 1),\n' +
        '      end: addDays(new Date(), 1),\n' +
        "      title: 'A 3 day event',\n" +
        '      color: { ...colors.red },\n' +
        '      actions: this.actions,\n' +
        '      allDay: true,\n' +
        '      resizable: {\n' +
        '        beforeStart: true,\n' +
        '        afterEnd: true,\n' +
        '      },\n' +
        '      draggable: true,\n' +
        '    },\n' +
        '    {\n' +
        '      start: startOfDay(new Date()),\n' +
        "      title: 'An event with no end date',\n" +
        '      color: { ...colors.yellow },\n' +
        '      actions: this.actions,\n' +
        '    },\n' +
        '    {\n' +
        '      start: subDays(endOfMonth(new Date()), 3),\n' +
        '      end: addDays(endOfMonth(new Date()), 3),\n' +
        "      title: 'A long event that spans 2 months',\n" +
        '      color: { ...colors.blue },\n' +
        '      allDay: true,\n' +
        '    },\n' +
        '    {\n' +
        '      start: addHours(startOfDay(new Date()), 2),\n' +
        '      end: addHours(new Date(), 2),\n' +
        "      title: 'A draggable and resizable event',\n" +
        '      color: { ...colors.yellow },\n' +
        '      actions: this.actions,\n' +
        '      resizable: {\n' +
        '        beforeStart: true,\n' +
        '        afterEnd: true,\n' +
        '      },\n' +
        '      draggable: true,\n' +
        '    },\n' +
        '  ];\n' +
        '\n' +
        '  activeDayIsOpen: boolean = true;\n' +
        '\n' +
        '  constructor(private modal: NgbModal) {}\n' +
        '\n' +
        '  dayClicked({ date, events }: { date: Date; events: CalendarEvent[] }): void {\n' +
        '    if (isSameMonth(date, this.viewDate)) {\n' +
        '      if (\n' +
        '        (isSameDay(this.viewDate, date) && this.activeDayIsOpen === true) ||\n' +
        '        events.length === 0\n' +
        '      ) {\n' +
        '        this.activeDayIsOpen = false;\n' +
        '      } else {\n' +
        '        this.activeDayIsOpen = true;\n' +
        '      }\n' +
        '      this.viewDate = date;\n' +
        '    }\n' +
        '  }\n' +
        '\n' +
        '  eventTimesChanged({\n' +
        '    event,\n' +
        '    newStart,\n' +
        '    newEnd,\n' +
        '  }: CalendarEventTimesChangedEvent): void {\n' +
        '    this.events = this.events.map((iEvent) => {\n' +
        '      if (iEvent === event) {\n' +
        '        return {\n' +
        '          ...event,\n' +
        '          start: newStart,\n' +
        '          end: newEnd,\n' +
        '        };\n' +
        '      }\n' +
        '      return iEvent;\n' +
        '    });\n' +
        "    this.handleEvent('Dropped or resized', event);\n" +
        '  }\n' +
        '\n' +
        '  handleEvent(action: string, event: CalendarEvent): void {\n' +
        '    this.modalData = { event, action };\n' +
        "    this.modal.open(this.modalContent, { size: 'lg' });\n" +
        '  }\n' +
        '\n' +
        '  addEvent(): void {\n' +
        '    this.events = [\n' +
        '      ...this.events,\n' +
        '      {\n' +
        "        title: 'New event',\n" +
        '        start: startOfDay(new Date()),\n' +
        '        end: endOfDay(new Date()),\n' +
        '        color: colors.red,\n' +
        '        draggable: true,\n' +
        '        resizable: {\n' +
        '          beforeStart: true,\n' +
        '          afterEnd: true,\n' +
        '        },\n' +
        '      },\n' +
        '    ];\n' +
        '  }\n' +
        '\n' +
        '  deleteEvent(eventToDelete: CalendarEvent) {\n' +
        '    this.events = this.events.filter((event) => event !== eventToDelete);\n' +
        '  }\n' +
        '\n' +
        '  setView(view: CalendarView) {\n' +
        '    this.view = view;\n' +
        '  }\n' +
        '\n' +
        '  closeOpenMonthViewDay() {\n' +
        '    this.activeDayIsOpen = false;\n' +
        '  }\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/kitchen-sink/template.html',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 39,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 27,
      fixableWarningCount: 0,
      source: '<div class="row text-center">\n' +
        '  <div class="col-md-4">\n' +
        '    <div class="btn-group">\n' +
        '      <div\n' +
        '        class="btn btn-primary"\n' +
        '        mwlCalendarPreviousView\n' +
        '        [view]="view"\n' +
        '        [(viewDate)]="viewDate"\n' +
        '        (viewDateChange)="closeOpenMonthViewDay()"\n' +
        '      >\n' +
        '        Previous\n' +
        '      </div>\n' +
        '      <div\n' +
        '        class="btn btn-outline-secondary"\n' +
        '        mwlCalendarToday\n' +
        '        [(viewDate)]="viewDate"\n' +
        '      >\n' +
        '        Today\n' +
        '      </div>\n' +
        '      <div\n' +
        '        class="btn btn-primary"\n' +
        '        mwlCalendarNextView\n' +
        '        [view]="view"\n' +
        '        [(viewDate)]="viewDate"\n' +
        '        (viewDateChange)="closeOpenMonthViewDay()"\n' +
        '      >\n' +
        '        Next\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '  <div class="col-md-4">\n' +
        "    <h3>{{ viewDate | calendarDate:(view + 'ViewTitle'):'en' }}</h3>\n" +
        '  </div>\n' +
        '  <div class="col-md-4">\n' +
        '    <div class="btn-group">\n' +
        '      <div\n' +
        '        class="btn btn-primary"\n' +
        '        (click)="setView(CalendarView.Month)"\n' +
        '        [class.active]="view === CalendarView.Month"\n' +
        '      >\n' +
        '        Month\n' +
        '      </div>\n' +
        '      <div\n' +
        '        class="btn btn-primary"\n' +
        '        (click)="setView(CalendarView.Week)"\n' +
        '        [class.active]="view === CalendarView.Week"\n' +
        '      >\n' +
        '        Week\n' +
        '      </div>\n' +
        '      <div\n' +
        '        class="btn btn-primary"\n' +
        '        (click)="setView(CalendarView.Day)"\n' +
        '        [class.active]="view === CalendarView.Day"\n' +
        '      >\n' +
        '        Day\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n' +
        '<br />\n' +
        '<div [ngSwitch]="view">\n' +
        '  <mwl-calendar-month-view\n' +
        '    *ngSwitchCase="CalendarView.Month"\n' +
        '    [viewDate]="viewDate"\n' +
        '    [events]="events"\n' +
        '    [refresh]="refresh"\n' +
        '    [activeDayIsOpen]="activeDayIsOpen"\n' +
        '    (dayClicked)="dayClicked($event.day)"\n' +
        `    (eventClicked)="handleEvent('Clicked', $event.event)"\n` +
        '    (eventTimesChanged)="eventTimesChanged($event)"\n' +
        '  >\n' +
        '  </mwl-calendar-month-view>\n' +
        '  <mwl-calendar-week-view\n' +
        '    *ngSwitchCase="CalendarView.Week"\n' +
        '    [viewDate]="viewDate"\n' +
        '    [events]="events"\n' +
        '    [refresh]="refresh"\n' +
        `    (eventClicked)="handleEvent('Clicked', $event.event)"\n` +
        '    (eventTimesChanged)="eventTimesChanged($event)"\n' +
        '  >\n' +
        '  </mwl-calendar-week-view>\n' +
        '  <mwl-calendar-day-view\n' +
        '    *ngSwitchCase="CalendarView.Day"\n' +
        '    [viewDate]="viewDate"\n' +
        '    [events]="events"\n' +
        '    [refresh]="refresh"\n' +
        `    (eventClicked)="handleEvent('Clicked', $event.event)"\n` +
        '    (eventTimesChanged)="eventTimesChanged($event)"\n' +
        '  >\n' +
        '  </mwl-calendar-day-view>\n' +
        '</div>\n' +
        '\n' +
        "<!-- Everything you see below is just for the demo, you don't need to include it in your app -->\n" +
        '\n' +
        '<br /><br /><br />\n' +
        '\n' +
        '<h3>\n' +
        '  Edit events\n' +
        '  <button class="btn btn-primary float-end" (click)="addEvent()">\n' +
        '    Add new\n' +
        '  </button>\n' +
        '  <div class="clearfix"></div>\n' +
        '</h3>\n' +
        '\n' +
        '<div class="table-responsive">\n' +
        '  <table class="table table-bordered">\n' +
        '    <thead>\n' +
        '      <tr>\n' +
        '        <th>Title</th>\n' +
        '        <th>Primary color</th>\n' +
        '        <th>Secondary + text color</th>\n' +
        '        <th>Starts at</th>\n' +
        '        <th>Ends at</th>\n' +
        '        <th>Remove</th>\n' +
        '      </tr>\n' +
        '    </thead>\n' +
        '\n' +
        '    <tbody>\n' +
        '      <tr *ngFor="let event of events">\n' +
        '        <td>\n' +
        '          <input\n' +
        '            type="text"\n' +
        '            class="form-control"\n' +
        '            [(ngModel)]="event.title"\n' +
        '            (keyup)="refresh.next()"\n' +
        '          />\n' +
        '        </td>\n' +
        '        <td>\n' +
        '          <input\n' +
        '            type="color"\n' +
        '            [(ngModel)]="event.color.primary"\n' +
        '            (change)="refresh.next()"\n' +
        '          />\n' +
        '        </td>\n' +
        '        <td>\n' +
        '          <input\n' +
        '            type="color"\n' +
        '            [(ngModel)]="event.color.secondary"\n' +
        '            (change)="refresh.next()"\n' +
        '          />\n' +
        '          <input\n' +
        '            type="color"\n' +
        `            [ngModel]="event.color.secondaryText ?? '#1e90ff'"\n` +
        '            (ngModelChange)="event.color.secondaryText = $event"\n' +
        '            (change)="refresh.next()"\n' +
        '          />\n' +
        '        </td>\n' +
        '        <td>\n' +
        '          <input\n' +
        '            class="form-control"\n' +
        '            type="text"\n' +
        '            mwlFlatpickr\n' +
        '            [(ngModel)]="event.start"\n' +
        '            (ngModelChange)="refresh.next()"\n' +
        '            [altInput]="true"\n' +
        '            [convertModelValue]="true"\n' +
        '            [enableTime]="true"\n' +
        '            dateFormat="Y-m-dTH:i"\n' +
        '            altFormat="F j, Y H:i"\n' +
        '            placeholder="Not set"\n' +
        '          />\n' +
        '        </td>\n' +
        '        <td>\n' +
        '          <input\n' +
        '            class="form-control"\n' +
        '            type="text"\n' +
        '            mwlFlatpickr\n' +
        '            [(ngModel)]="event.end"\n' +
        '            (ngModelChange)="refresh.next()"\n' +
        '            [altInput]="true"\n' +
        '            [convertModelValue]="true"\n' +
        '            [enableTime]="true"\n' +
        '            dateFormat="Y-m-dTH:i"\n' +
        '            altFormat="F j, Y H:i"\n' +
        '            placeholder="Not set"\n' +
        '          />\n' +
        '        </td>\n' +
        '        <td>\n' +
        '          <button class="btn btn-danger" (click)="deleteEvent(event)">\n' +
        '            Delete\n' +
        '          </button>\n' +
        '        </td>\n' +
        '      </tr>\n' +
        '    </tbody>\n' +
        '  </table>\n' +
        '</div>\n' +
        '\n' +
        '<ng-template #modalContent let-close="close">\n' +
        '  <div class="modal-header">\n' +
        '    <h5 class="modal-title">Event action occurred</h5>\n' +
        '    <button type="button" class="close" (click)="close()">\n' +
        '      <span aria-hidden="true">&times;</span>\n' +
        '    </button>\n' +
        '  </div>\n' +
        '  <div class="modal-body">\n' +
        '    <div>\n' +
        '      Action:\n' +
        '      <pre>{{ modalData?.action }}</pre>\n' +
        '    </div>\n' +
        '    <div>\n' +
        '      Event:\n' +
        '      <pre>{{ modalData?.event | json }}</pre>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '  <div class="modal-footer">\n' +
        '    <button type="button" class="btn btn-outline-secondary" (click)="close()">\n' +
        '      OK\n' +
        '    </button>\n' +
        '  </div>\n' +
        '</ng-template>\n',
      usedDeprecatedRules: [Array]
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/min-max-date/component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 3,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: 'import {\n' +
        '  Component,\n' +
        '  ChangeDetectionStrategy,\n' +
        '  ViewEncapsulation,\n' +
        "} from '@angular/core';\n" +
        'import {\n' +
        '  CalendarEvent,\n' +
        '  CalendarMonthViewDay,\n' +
        '  CalendarView,\n' +
        "} from 'angular-calendar';\n" +
        'import {\n' +
        '  subMonths,\n' +
        '  addMonths,\n' +
        '  addDays,\n' +
        '  addWeeks,\n' +
        '  subDays,\n' +
        '  subWeeks,\n' +
        '  startOfMonth,\n' +
        '  endOfMonth,\n' +
        '  startOfWeek,\n' +
        '  endOfWeek,\n' +
        '  startOfDay,\n' +
        '  endOfDay,\n' +
        "} from 'date-fns';\n" +
        '\n' +
        "type CalendarPeriod = 'day' | 'week' | 'month';\n" +
        '\n' +
        'function addPeriod(period: CalendarPeriod, date: Date, amount: number): Date {\n' +
        '  return {\n' +
        '    day: addDays,\n' +
        '    week: addWeeks,\n' +
        '    month: addMonths,\n' +
        '  }[period](date, amount);\n' +
        '}\n' +
        '\n' +
        'function subPeriod(period: CalendarPeriod, date: Date, amount: number): Date {\n' +
        '  return {\n' +
        '    day: subDays,\n' +
        '    week: subWeeks,\n' +
        '    month: subMonths,\n' +
        '  }[period](date, amount);\n' +
        '}\n' +
        '\n' +
        'function startOfPeriod(period: CalendarPeriod, date: Date): Date {\n' +
        '  return {\n' +
        '    day: startOfDay,\n' +
        '    week: startOfWeek,\n' +
        '    month: startOfMonth,\n' +
        '  }[period](date);\n' +
        '}\n' +
        '\n' +
        'function endOfPeriod(period: CalendarPeriod, date: Date): Date {\n' +
        '  return {\n' +
        '    day: endOfDay,\n' +
        '    week: endOfWeek,\n' +
        '    month: endOfMonth,\n' +
        '  }[period](date);\n' +
        '}\n' +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-demo-component',\n" +
        '  changeDetection: ChangeDetectionStrategy.OnPush,\n' +
        "  templateUrl: 'template.html',\n" +
        '  styles: [\n' +
        '    `\n' +
        '      .cal-disabled {\n' +
        '        background-color: #eee;\n' +
        '        pointer-events: none;\n' +
        '      }\n' +
        '\n' +
        '      .cal-disabled .cal-day-number {\n' +
        '        opacity: 0.1;\n' +
        '      }\n' +
        '    `,\n' +
        '  ],\n' +
        '  // this is a hack to get styles to apply to the inner component. Your app should just use a global stylesheet\n' +
        '  encapsulation: ViewEncapsulation.None,\n' +
        '})\n' +
        'export class DemoComponent {\n' +
        '  view: CalendarView | CalendarPeriod = CalendarView.Month;\n' +
        '\n' +
        '  viewDate: Date = new Date();\n' +
        '\n' +
        '  events: CalendarEvent[] = [];\n' +
        '\n' +
        '  minDate: Date = subMonths(new Date(), 1);\n' +
        '\n' +
        '  maxDate: Date = addMonths(new Date(), 1);\n' +
        '\n' +
        '  prevBtnDisabled: boolean = false;\n' +
        '\n' +
        '  nextBtnDisabled: boolean = false;\n' +
        '\n' +
        '  constructor() {\n' +
        '    this.dateOrViewChanged();\n' +
        '  }\n' +
        '\n' +
        '  increment(): void {\n' +
        '    this.changeDate(addPeriod(this.view, this.viewDate, 1));\n' +
        '  }\n' +
        '\n' +
        '  decrement(): void {\n' +
        '    this.changeDate(subPeriod(this.view, this.viewDate, 1));\n' +
        '  }\n' +
        '\n' +
        '  today(): void {\n' +
        '    this.changeDate(new Date());\n' +
        '  }\n' +
        '\n' +
        '  dateIsValid(date: Date): boolean {\n' +
        '    return date >= this.minDate && date <= this.maxDate;\n' +
        '  }\n' +
        '\n' +
        '  changeDate(date: Date): void {\n' +
        '    this.viewDate = date;\n' +
        '    this.dateOrViewChanged();\n' +
        '  }\n' +
        '\n' +
        '  changeView(view: CalendarPeriod): void {\n' +
        '    this.view = view;\n' +
        '    this.dateOrViewChanged();\n' +
        '  }\n' +
        '\n' +
        '  dateOrViewChanged(): void {\n' +
        '    this.prevBtnDisabled = !this.dateIsValid(\n' +
        '      endOfPeriod(this.view, subPeriod(this.view, this.viewDate, 1))\n' +
        '    );\n' +
        '    this.nextBtnDisabled = !this.dateIsValid(\n' +
        '      startOfPeriod(this.view, addPeriod(this.view, this.viewDate, 1))\n' +
        '    );\n' +
        '    if (this.viewDate < this.minDate) {\n' +
        '      this.changeDate(this.minDate);\n' +
        '    } else if (this.viewDate > this.maxDate) {\n' +
        '      this.changeDate(this.maxDate);\n' +
        '    }\n' +
        '  }\n' +
        '\n' +
        '  beforeMonthViewRender({ body }: { body: CalendarMonthViewDay[] }): void {\n' +
        '    body.forEach((day) => {\n' +
        '      if (!this.dateIsValid(day.date)) {\n' +
        "        day.cssClass = 'cal-disabled';\n" +
        '      }\n' +
        '    });\n' +
        '  }\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/min-max-date/template.html',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 20,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 11,
      fixableWarningCount: 0,
      source: '<div class="row text-center">\n' +
        '  <div class="col-md-4">\n' +
        '    <div class="btn-group">\n' +
        '      <button\n' +
        '        class="btn btn-primary"\n' +
        '        (click)="decrement()"\n' +
        '        [disabled]="prevBtnDisabled"\n' +
        '      >\n' +
        '        Previous\n' +
        '      </button>\n' +
        '      <button class="btn btn-outline-secondary" (click)="today()">Today</button>\n' +
        '      <button\n' +
        '        class="btn btn-primary"\n' +
        '        (click)="increment()"\n' +
        '        [disabled]="nextBtnDisabled"\n' +
        '      >\n' +
        '        Next\n' +
        '      </button>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '  <div class="col-md-4">\n' +
        "    <h3>{{ viewDate | calendarDate:(view + 'ViewTitle'):'en' }}</h3>\n" +
        '  </div>\n' +
        '  <div class="col-md-4">\n' +
        '    <div class="btn-group">\n' +
        '      <div\n' +
        '        class="btn btn-primary"\n' +
        `        (click)="changeView('month')"\n` +
        `        [class.active]="view === 'month'"\n` +
        '      >\n' +
        '        Month\n' +
        '      </div>\n' +
        '      <div\n' +
        '        class="btn btn-primary"\n' +
        `        (click)="changeView('week')"\n` +
        `        [class.active]="view === 'week'"\n` +
        '      >\n' +
        '        Week\n' +
        '      </div>\n' +
        '      <div\n' +
        '        class="btn btn-primary"\n' +
        `        (click)="changeView('day')"\n` +
        `        [class.active]="view === 'day'"\n` +
        '      >\n' +
        '        Day\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n' +
        '<br />\n' +
        '\n' +
        '<div [ngSwitch]="view">\n' +
        '  <mwl-calendar-month-view\n' +
        `    *ngSwitchCase="'month'"\n` +
        '    [viewDate]="viewDate"\n' +
        '    [events]="events"\n' +
        '    (beforeViewRender)="beforeMonthViewRender($event)"\n' +
        '  >\n' +
        '  </mwl-calendar-month-view>\n' +
        '  <mwl-calendar-week-view\n' +
        `    *ngSwitchCase="'week'"\n` +
        '    [viewDate]="viewDate"\n' +
        '    [events]="events"\n' +
        '  >\n' +
        '  </mwl-calendar-week-view>\n' +
        '  <mwl-calendar-day-view\n' +
        `    *ngSwitchCase="'day'"\n` +
        '    [viewDate]="viewDate"\n' +
        '    [events]="events"\n' +
        '  >\n' +
        '  </mwl-calendar-day-view>\n' +
        '</div>\n',
      usedDeprecatedRules: [Array]
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/moment/component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: "import { Component, ChangeDetectionStrategy } from '@angular/core';\n" +
        "import { CalendarEvent, CalendarView, DAYS_OF_WEEK } from 'angular-calendar';\n" +
        "import moment from 'moment';\n" +
        '\n' +
        '// weekStartsOn option is ignored when using moment, as it needs to be configured globally for the moment locale\n' +
        "moment.updateLocale('en', {\n" +
        '  week: {\n' +
        '    dow: DAYS_OF_WEEK.MONDAY,\n' +
        '    doy: 0,\n' +
        '  },\n' +
        '});\n' +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-demo-component',\n" +
        '  changeDetection: ChangeDetectionStrategy.OnPush,\n' +
        "  templateUrl: 'template.html',\n" +
        '})\n' +
        'export class DemoComponent {\n' +
        '  view: CalendarView = CalendarView.Month;\n' +
        '\n' +
        '  viewDate: Date = new Date();\n' +
        '\n' +
        '  events: CalendarEvent[] = [];\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/moment/template.html',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 1,
      fixableWarningCount: 0,
      source: '<div class="alert alert-info">\n' +
        "  Use this if you're already using moment heavily in your app and don't want to\n" +
        '  include date-fns in your bundle, or you need to be able to adjust dates to be\n' +
        '  in a different timezone than the users browser via moment-locale\n' +
        '</div>\n' +
        '\n' +
        '<mwl-demo-utils-calendar-header [(view)]="view" [(viewDate)]="viewDate">\n' +
        '</mwl-demo-utils-calendar-header>\n' +
        '\n' +
        '<div [ngSwitch]="view">\n' +
        '  <mwl-calendar-month-view\n' +
        `    *ngSwitchCase="'month'"\n` +
        '    [viewDate]="viewDate"\n' +
        '    [events]="events"\n' +
        '  >\n' +
        '  </mwl-calendar-month-view>\n' +
        '  <mwl-calendar-week-view\n' +
        `    *ngSwitchCase="'week'"\n` +
        '    [viewDate]="viewDate"\n' +
        '    [events]="events"\n' +
        '  >\n' +
        '  </mwl-calendar-week-view>\n' +
        '  <mwl-calendar-day-view\n' +
        `    *ngSwitchCase="'day'"\n` +
        '    [viewDate]="viewDate"\n' +
        '    [events]="events"\n' +
        '  >\n' +
        '  </mwl-calendar-day-view>\n' +
        '</div>\n',
      usedDeprecatedRules: [Array]
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/month-view-badge-total/component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: "import { Component, ChangeDetectionStrategy } from '@angular/core';\n" +
        "import { CalendarEvent, CalendarMonthViewDay } from 'angular-calendar';\n" +
        "import { colors } from '../demo-utils/colors';\n" +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-demo-component',\n" +
        '  changeDetection: ChangeDetectionStrategy.OnPush,\n' +
        "  templateUrl: 'template.html',\n" +
        '})\n' +
        'export class DemoComponent {\n' +
        '  viewDate: Date = new Date();\n' +
        '\n' +
        '  events: CalendarEvent<{ incrementsBadgeTotal: boolean }>[] = [\n' +
        '    {\n' +
        "      title: 'Increments badge total on the day cell',\n" +
        '      color: colors.yellow,\n' +
        '      start: new Date(),\n' +
        '      meta: {\n' +
        '        incrementsBadgeTotal: true,\n' +
        '      },\n' +
        '    },\n' +
        '    {\n' +
        "      title: 'Does not increment the badge total on the day cell',\n" +
        '      color: colors.blue,\n' +
        '      start: new Date(),\n' +
        '      meta: {\n' +
        '        incrementsBadgeTotal: false,\n' +
        '      },\n' +
        '    },\n' +
        '  ];\n' +
        '\n' +
        '  beforeMonthViewRender({ body }: { body: CalendarMonthViewDay[] }): void {\n' +
        '    body.forEach((day) => {\n' +
        '      day.badgeTotal = day.events.filter(\n' +
        '        (event) => event.meta.incrementsBadgeTotal\n' +
        '      ).length;\n' +
        '    });\n' +
        '  }\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/navigating-between-views/component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: "import { Component, ChangeDetectionStrategy } from '@angular/core';\n" +
        "import { CalendarEvent, CalendarView } from 'angular-calendar';\n" +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-demo-component',\n" +
        '  changeDetection: ChangeDetectionStrategy.OnPush,\n' +
        "  templateUrl: 'template.html',\n" +
        '})\n' +
        'export class DemoComponent {\n' +
        '  view: CalendarView = CalendarView.Month;\n' +
        '\n' +
        '  viewDate: Date = new Date();\n' +
        '\n' +
        '  events: CalendarEvent[] = [];\n' +
        '\n' +
        '  changeDay(date: Date) {\n' +
        '    this.viewDate = date;\n' +
        '    this.view = CalendarView.Day;\n' +
        '  }\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/navigating-between-views/template.html',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 4,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 3,
      fixableWarningCount: 0,
      source: '<mwl-demo-utils-calendar-header [(view)]="view" [(viewDate)]="viewDate">\n' +
        '</mwl-demo-utils-calendar-header>\n' +
        '\n' +
        '<div class="alert alert-info">\n' +
        '  <div [ngSwitch]="view">\n' +
        `    <span *ngSwitchCase="'month'"\n` +
        '      >Click on a month label to change the view to that month.</span\n' +
        '    >\n' +
        `    <span *ngSwitchCase="'week'"\n` +
        '      >Click on a day header to change the view to that day.</span\n' +
        '    >\n' +
        `    <span *ngSwitchCase="'day'">There is no other view to navigate to.</span>\n` +
        '  </div>\n' +
        '</div>\n' +
        '\n' +
        '<div [ngSwitch]="view">\n' +
        '  <mwl-calendar-month-view\n' +
        `    *ngSwitchCase="'month'"\n` +
        '    [viewDate]="viewDate"\n' +
        '    [events]="events"\n' +
        '    (dayClicked)="changeDay($event.day.date)"\n' +
        '  >\n' +
        '  </mwl-calendar-month-view>\n' +
        '  <mwl-calendar-week-view\n' +
        `    *ngSwitchCase="'week'"\n` +
        '    [viewDate]="viewDate"\n' +
        '    [events]="events"\n' +
        '    (dayHeaderClicked)="changeDay($event.day.date)"\n' +
        '  >\n' +
        '  </mwl-calendar-week-view>\n' +
        '  <mwl-calendar-day-view\n' +
        `    *ngSwitchCase="'day'"\n` +
        '    [viewDate]="viewDate"\n' +
        '    [events]="events"\n' +
        '  >\n' +
        '  </mwl-calendar-day-view>\n' +
        '</div>\n',
      usedDeprecatedRules: [Array]
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/no-events-label/component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: 'import {\n' +
        '  Component,\n' +
        '  ChangeDetectionStrategy,\n' +
        '  ChangeDetectorRef,\n' +
        "} from '@angular/core';\n" +
        'import {\n' +
        '  CalendarEvent,\n' +
        '  CalendarViewPeriod,\n' +
        '  CalendarMonthViewBeforeRenderEvent,\n' +
        '  CalendarWeekViewBeforeRenderEvent,\n' +
        '  CalendarDayViewBeforeRenderEvent,\n' +
        '  CalendarView,\n' +
        "} from 'angular-calendar';\n" +
        "import { colors } from '../demo-utils/colors';\n" +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-demo-component',\n" +
        '  changeDetection: ChangeDetectionStrategy.OnPush,\n' +
        "  templateUrl: 'template.html',\n" +
        '})\n' +
        'export class DemoComponent {\n' +
        '  view: CalendarView = CalendarView.Month;\n' +
        '\n' +
        '  viewDate: Date = new Date();\n' +
        '\n' +
        '  events: CalendarEvent[] = [\n' +
        '    {\n' +
        "      title: 'Event 1',\n" +
        '      color: colors.yellow,\n' +
        '      start: new Date(),\n' +
        '    },\n' +
        '  ];\n' +
        '\n' +
        '  period: CalendarViewPeriod;\n' +
        '\n' +
        '  constructor(private cdr: ChangeDetectorRef) {}\n' +
        '\n' +
        '  beforeViewRender(\n' +
        '    event:\n' +
        '      | CalendarMonthViewBeforeRenderEvent\n' +
        '      | CalendarWeekViewBeforeRenderEvent\n' +
        '      | CalendarDayViewBeforeRenderEvent\n' +
        '  ) {\n' +
        '    this.period = event.period;\n' +
        '    this.cdr.detectChanges();\n' +
        '  }\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/no-events-label/template.html',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 2,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 2,
      fixableWarningCount: 0,
      source: '<mwl-demo-utils-calendar-header [(view)]="view" [(viewDate)]="viewDate">\n' +
        '</mwl-demo-utils-calendar-header>\n' +
        '\n' +
        '<div class="alert alert-warning" *ngIf="period?.events.length === 0">\n' +
        '  There are no events on this {{ view }}\n' +
        '</div>\n' +
        '\n' +
        '<div [ngSwitch]="view">\n' +
        '  <mwl-calendar-month-view\n' +
        `    *ngSwitchCase="'month'"\n` +
        '    [viewDate]="viewDate"\n' +
        '    [events]="events"\n' +
        '    [activeDayIsOpen]="true"\n' +
        '    (beforeViewRender)="beforeViewRender($event)"\n' +
        '  >\n' +
        '  </mwl-calendar-month-view>\n' +
        '  <mwl-calendar-week-view\n' +
        `    *ngSwitchCase="'week'"\n` +
        '    [viewDate]="viewDate"\n' +
        '    [events]="events"\n' +
        '    (beforeViewRender)="beforeViewRender($event)"\n' +
        '  >\n' +
        '  </mwl-calendar-week-view>\n' +
        '  <mwl-calendar-day-view\n' +
        `    *ngSwitchCase="'day'"\n` +
        '    [viewDate]="viewDate"\n' +
        '    [events]="events"\n' +
        '    (beforeViewRender)="beforeViewRender($event)"\n' +
        '  >\n' +
        '  </mwl-calendar-day-view>\n' +
        '</div>\n',
      usedDeprecatedRules: [Array]
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/optional-event-end-dates/component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: "import { Component, ChangeDetectionStrategy } from '@angular/core';\n" +
        "import { CalendarEvent, CalendarView } from 'angular-calendar';\n" +
        "import { setHours, setMinutes } from 'date-fns';\n" +
        "import { colors } from '../demo-utils/colors';\n" +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-demo-component',\n" +
        '  changeDetection: ChangeDetectionStrategy.OnPush,\n' +
        "  templateUrl: 'template.html',\n" +
        '})\n' +
        'export class DemoComponent {\n' +
        '  view: CalendarView = CalendarView.Day;\n' +
        '\n' +
        '  viewDate: Date = new Date();\n' +
        '\n' +
        '  events: CalendarEvent[] = [\n' +
        '    {\n' +
        "      title: 'No event end date',\n" +
        '      start: setHours(setMinutes(new Date(), 0), 3),\n' +
        '      color: colors.blue,\n' +
        '    },\n' +
        '    {\n' +
        "      title: 'No event end date',\n" +
        '      start: setHours(setMinutes(new Date(), 0), 5),\n' +
        '      color: colors.yellow,\n' +
        '    },\n' +
        '  ];\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/public-holidays/component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: 'import {\n' +
        '  Component,\n' +
        '  ChangeDetectionStrategy,\n' +
        '  OnInit,\n' +
        '  ChangeDetectorRef,\n' +
        "} from '@angular/core';\n" +
        "import { CalendarEvent, CalendarView } from 'angular-calendar';\n" +
        "import { HttpClient } from '@angular/common/http';\n" +
        "import { startOfYear, subYears } from 'date-fns';\n" +
        '\n' +
        '// get your own key from https://holidayapi.com/\n' +
        "const HOLIDAY_API_KEY = '8eb2582d-3a4c-4fc5-94c8-3e21487d4e23';\n" +
        '\n' +
        '// change this to your own country\n' +
        "const COUNTRY_CODE = 'US';\n" +
        '\n' +
        'interface Holiday {\n' +
        '  date: string;\n' +
        '  name: string;\n' +
        '}\n' +
        '\n' +
        'type CalendarEventWithMeta = CalendarEvent<\n' +
        "  { type: 'holiday'; holiday: Holiday } | { type: 'normal' }\n" +
        '>;\n' +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-demo-component',\n" +
        '  changeDetection: ChangeDetectionStrategy.OnPush,\n' +
        "  templateUrl: 'template.html',\n" +
        '})\n' +
        'export class DemoComponent implements OnInit {\n' +
        '  view: CalendarView = CalendarView.Month;\n' +
        '\n' +
        '  viewDate = startOfYear(subYears(new Date(), 1));\n' +
        '\n' +
        '  events: CalendarEventWithMeta[] = [];\n' +
        '\n' +
        '  constructor(private http: HttpClient, private cdr: ChangeDetectorRef) {}\n' +
        '\n' +
        '  ngOnInit(): void {\n' +
        '    this.fetchHolidays();\n' +
        '  }\n' +
        '\n' +
        '  private fetchHolidays() {\n' +
        '    this.http\n' +
        "      .get<{ holidays: Holiday[] }>('https://holidayapi.com/v1/holidays', {\n" +
        '        params: {\n' +
        '          country: COUNTRY_CODE,\n' +
        '          year: String(new Date().getFullYear() - 1),\n' +
        '          key: HOLIDAY_API_KEY,\n' +
        '        },\n' +
        '      })\n' +
        '      .subscribe(({ holidays }) => {\n' +
        '        this.events = holidays.map((holiday) => {\n' +
        '          return {\n' +
        '            start: new Date(holiday.date),\n' +
        '            title: holiday.name,\n' +
        '            allDay: true,\n' +
        '            meta: {\n' +
        "              type: 'holiday',\n" +
        '              holiday,\n' +
        '            },\n' +
        '          };\n' +
        '        });\n' +
        '        this.cdr.markForCheck();\n' +
        '      });\n' +
        '  }\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/public-holidays/module.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 1,
      fixableWarningCount: 0,
      source: "import { NgModule } from '@angular/core';\n" +
        "import { CommonModule } from '@angular/common';\n" +
        "import { RouterModule } from '@angular/router';\n" +
        "import { CalendarModule, DateAdapter } from 'angular-calendar';\n" +
        "import { DemoUtilsModule } from '../demo-utils/module';\n" +
        "import { DemoComponent } from './component';\n" +
        "import { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\n" +
        "import { HttpClientModule } from '@angular/common/http';\n" +
        '\n' +
        '@NgModule({\n' +
        '  imports: [\n' +
        '    CommonModule,\n' +
        '    CalendarModule.forRoot({\n' +
        '      provide: DateAdapter,\n' +
        '      useFactory: adapterFactory,\n' +
        '    }),\n' +
        '    HttpClientModule,\n' +
        '    DemoUtilsModule,\n' +
        "    RouterModule.forChild([{ path: '', component: DemoComponent }]),\n" +
        '  ],\n' +
        '  declarations: [DemoComponent],\n' +
        '  exports: [DemoComponent],\n' +
        '})\n' +
        'export class DemoModule {}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/recurring-events/component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: 'import {\n' +
        '  Component,\n' +
        '  ChangeDetectionStrategy,\n' +
        '  ChangeDetectorRef,\n' +
        "} from '@angular/core';\n" +
        '// As an alternative to rrule there is also rSchedule\n' +
        '// See https://github.com/mattlewis92/angular-calendar/issues/711#issuecomment-418537158 for more info\n' +
        "import { RRule } from 'rrule';\n" +
        "import moment from 'moment-timezone';\n" +
        'import {\n' +
        '  CalendarDayViewBeforeRenderEvent,\n' +
        '  CalendarEvent,\n' +
        '  CalendarMonthViewBeforeRenderEvent,\n' +
        '  CalendarView,\n' +
        '  CalendarWeekViewBeforeRenderEvent,\n' +
        "} from 'angular-calendar';\n" +
        "import { colors } from '../demo-utils/colors';\n" +
        "import { ViewPeriod } from 'calendar-utils';\n" +
        '\n' +
        'interface RecurringEvent {\n' +
        '  title: string;\n' +
        '  color: any;\n' +
        '  rrule?: {\n' +
        '    freq: any;\n' +
        '    bymonth?: number;\n' +
        '    bymonthday?: number;\n' +
        '    byweekday?: any;\n' +
        '  };\n' +
        '}\n' +
        '\n' +
        '// we set the timezone to UTC to avoid issues with DST changes\n' +
        '// see https://github.com/mattlewis92/angular-calendar/issues/717 for more info\n' +
        "moment.tz.setDefault('Utc');\n" +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-demo-component',\n" +
        '  changeDetection: ChangeDetectionStrategy.OnPush,\n' +
        "  templateUrl: 'template.html',\n" +
        '})\n' +
        'export class DemoComponent {\n' +
        '  view: CalendarView = CalendarView.Month;\n' +
        '\n' +
        '  viewDate = moment().toDate();\n' +
        '\n' +
        '  recurringEvents: RecurringEvent[] = [\n' +
        '    {\n' +
        "      title: 'Recurs on the 5th of each month',\n" +
        '      color: colors.yellow,\n' +
        '      rrule: {\n' +
        '        freq: RRule.MONTHLY,\n' +
        '        bymonthday: 5,\n' +
        '      },\n' +
        '    },\n' +
        '    {\n' +
        "      title: 'Recurs yearly on the 10th of the current month',\n" +
        '      color: colors.blue,\n' +
        '      rrule: {\n' +
        '        freq: RRule.YEARLY,\n' +
        '        bymonth: moment().month() + 1,\n' +
        '        bymonthday: 10,\n' +
        '      },\n' +
        '    },\n' +
        '    {\n' +
        "      title: 'Recurs weekly on mondays',\n" +
        '      color: colors.red,\n' +
        '      rrule: {\n' +
        '        freq: RRule.WEEKLY,\n' +
        '        byweekday: [RRule.MO],\n' +
        '      },\n' +
        '    },\n' +
        '  ];\n' +
        '\n' +
        '  calendarEvents: CalendarEvent[] = [];\n' +
        '\n' +
        '  viewPeriod: ViewPeriod;\n' +
        '\n' +
        '  constructor(private cdr: ChangeDetectorRef) {}\n' +
        '\n' +
        '  updateCalendarEvents(\n' +
        '    viewRender:\n' +
        '      | CalendarMonthViewBeforeRenderEvent\n' +
        '      | CalendarWeekViewBeforeRenderEvent\n' +
        '      | CalendarDayViewBeforeRenderEvent\n' +
        '  ): void {\n' +
        '    if (\n' +
        '      !this.viewPeriod ||\n' +
        '      !moment(this.viewPeriod.start).isSame(viewRender.period.start) ||\n' +
        '      !moment(this.viewPeriod.end).isSame(viewRender.period.end)\n' +
        '    ) {\n' +
        '      this.viewPeriod = viewRender.period;\n' +
        '      this.calendarEvents = [];\n' +
        '\n' +
        '      this.recurringEvents.forEach((event) => {\n' +
        '        const rule: RRule = new RRule({\n' +
        '          ...event.rrule,\n' +
        "          dtstart: moment(viewRender.period.start).startOf('day').toDate(),\n" +
        "          until: moment(viewRender.period.end).endOf('day').toDate(),\n" +
        '        });\n' +
        '        const { title, color } = event;\n' +
        '\n' +
        '        rule.all().forEach((date) => {\n' +
        '          this.calendarEvents.push({\n' +
        '            title,\n' +
        '            color,\n' +
        '            start: moment(date).toDate(),\n' +
        '          });\n' +
        '        });\n' +
        '      });\n' +
        '      this.cdr.detectChanges();\n' +
        '    }\n' +
        '  }\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/refreshing-the-view/component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 3,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: 'import {\n' +
        '  Component,\n' +
        '  ChangeDetectionStrategy,\n' +
        '  ViewEncapsulation,\n' +
        "} from '@angular/core';\n" +
        'import {\n' +
        '  CalendarEvent,\n' +
        '  CalendarMonthViewDay,\n' +
        '  CalendarView,\n' +
        "} from 'angular-calendar';\n" +
        "import { Subject } from 'rxjs';\n" +
        '\n' +
        "const RED_CELL: 'red-cell' = 'red-cell';\n" +
        "const BLUE_CELL: 'blue-cell' = 'blue-cell';\n" +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-demo-component',\n" +
        '  changeDetection: ChangeDetectionStrategy.OnPush,\n' +
        '  encapsulation: ViewEncapsulation.None,\n' +
        "  templateUrl: 'template.html',\n" +
        '  styles: [\n' +
        '    `\n' +
        '      .red-cell {\n' +
        '        background-color: red !important;\n' +
        '      }\n' +
        '      .blue-cell {\n' +
        '        background-color: blue !important;\n' +
        '      }\n' +
        '    `,\n' +
        '  ],\n' +
        '})\n' +
        'export class DemoComponent {\n' +
        '  view: CalendarView = CalendarView.Month;\n' +
        '\n' +
        '  viewDate = new Date();\n' +
        '\n' +
        '  events: CalendarEvent[] = [];\n' +
        '\n' +
        '  refresh = new Subject<void>();\n' +
        '\n' +
        '  cssClass: string = RED_CELL;\n' +
        '\n' +
        '  refreshView(): void {\n' +
        '    this.cssClass = this.cssClass === RED_CELL ? BLUE_CELL : RED_CELL;\n' +
        '    this.refresh.next();\n' +
        '  }\n' +
        '\n' +
        '  beforeMonthViewRender({ body }: { body: CalendarMonthViewDay[] }): void {\n' +
        '    body.forEach((day) => {\n' +
        '      if (day.date.getDate() % 2 === 1) {\n' +
        '        day.cssClass = this.cssClass;\n' +
        '      }\n' +
        '    });\n' +
        '  }\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/refreshing-the-view/template.html',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 2,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 1,
      fixableWarningCount: 0,
      source: '<mwl-demo-utils-calendar-header [(view)]="view" [(viewDate)]="viewDate">\n' +
        '</mwl-demo-utils-calendar-header>\n' +
        '\n' +
        '<div class="text-center">\n' +
        '  <button class="btn btn-primary" (click)="refreshView()">\n' +
        '    Refresh + re-render the current view\n' +
        '  </button>\n' +
        '</div>\n' +
        '\n' +
        '<div [ngSwitch]="view">\n' +
        '  <mwl-calendar-month-view\n' +
        `    *ngSwitchCase="'month'"\n` +
        '    [viewDate]="viewDate"\n' +
        '    [events]="events"\n' +
        '    [refresh]="refresh"\n' +
        '    (beforeViewRender)="beforeMonthViewRender($event)"\n' +
        '  >\n' +
        '  </mwl-calendar-month-view>\n' +
        '  <mwl-calendar-week-view\n' +
        `    *ngSwitchCase="'week'"\n` +
        '    [viewDate]="viewDate"\n' +
        '    [events]="events"\n' +
        '    [refresh]="refresh"\n' +
        '  >\n' +
        '  </mwl-calendar-week-view>\n' +
        '  <mwl-calendar-day-view\n' +
        `    *ngSwitchCase="'day'"\n` +
        '    [viewDate]="viewDate"\n' +
        '    [events]="events"\n' +
        '    [refresh]="refresh"\n' +
        '  >\n' +
        '  </mwl-calendar-day-view>\n' +
        '</div>\n',
      usedDeprecatedRules: [Array]
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/resizable-events/component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: "import { Component, ChangeDetectionStrategy } from '@angular/core';\n" +
        "import { Subject } from 'rxjs';\n" +
        "import { addDays } from 'date-fns';\n" +
        'import {\n' +
        '  CalendarEvent,\n' +
        '  CalendarEventTimesChangedEvent,\n' +
        '  CalendarView,\n' +
        "} from 'angular-calendar';\n" +
        "import { colors } from '../demo-utils/colors';\n" +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-demo-component',\n" +
        '  changeDetection: ChangeDetectionStrategy.OnPush,\n' +
        "  templateUrl: 'template.html',\n" +
        '})\n' +
        'export class DemoComponent {\n' +
        '  view: CalendarView = CalendarView.Week;\n' +
        '\n' +
        '  viewDate = new Date();\n' +
        '\n' +
        '  events: CalendarEvent[] = [\n' +
        '    {\n' +
        "      title: 'Resizable event',\n" +
        '      color: colors.yellow,\n' +
        '      start: new Date(),\n' +
        '      end: addDays(new Date(), 1), // an end date is always required for resizable events to work\n' +
        '      resizable: {\n' +
        '        beforeStart: true, // this allows you to configure the sides the event is resizable from\n' +
        '        afterEnd: true,\n' +
        '      },\n' +
        '    },\n' +
        '    {\n' +
        "      title: 'A non resizable event',\n" +
        '      color: colors.blue,\n' +
        '      start: new Date(),\n' +
        '      end: addDays(new Date(), 1),\n' +
        '    },\n' +
        '  ];\n' +
        '\n' +
        '  refresh = new Subject<void>();\n' +
        '\n' +
        '  eventTimesChanged({\n' +
        '    event,\n' +
        '    newStart,\n' +
        '    newEnd,\n' +
        '  }: CalendarEventTimesChangedEvent): void {\n' +
        '    event.start = newStart;\n' +
        '    event.end = newEnd;\n' +
        '    this.refresh.next();\n' +
        '  }\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/responsive-week-view/template.html',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 1,
      fixableWarningCount: 0,
      source: '<div class="alert alert-info">\n' +
        '  Shrink the browser window size to reduce the number of days in the week.\n' +
        '</div>\n' +
        '\n' +
        '<mwl-calendar-week-view [viewDate]="viewDate" [daysInWeek]="daysInWeek">\n' +
        '</mwl-calendar-week-view>\n',
      usedDeprecatedRules: [Array]
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/rtl/component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: "import { Component, ChangeDetectionStrategy } from '@angular/core';\n" +
        "import { Subject } from 'rxjs';\n" +
        'import {\n' +
        '  CalendarEvent,\n' +
        '  CalendarEventTimesChangedEvent,\n' +
        '  CalendarView,\n' +
        "} from 'angular-calendar';\n" +
        "import { colors } from '../demo-utils/colors';\n" +
        "import { addDays, addHours, endOfMonth, startOfDay, subDays } from 'date-fns';\n" +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-demo-component',\n" +
        '  changeDetection: ChangeDetectionStrategy.OnPush,\n' +
        "  templateUrl: 'template.html',\n" +
        '})\n' +
        'export class DemoComponent {\n' +
        '  view: CalendarView = CalendarView.Month;\n' +
        '\n' +
        '  viewDate = new Date();\n' +
        '\n' +
        '  events: CalendarEvent[] = [\n' +
        '    {\n' +
        '      start: subDays(startOfDay(new Date()), 1),\n' +
        '      end: addDays(new Date(), 1),\n' +
        "      title: 'A 3 day event',\n" +
        '      color: colors.red,\n' +
        '      allDay: true,\n' +
        '      resizable: {\n' +
        '        beforeStart: true,\n' +
        '        afterEnd: true,\n' +
        '      },\n' +
        '      draggable: true,\n' +
        '    },\n' +
        '    {\n' +
        '      start: startOfDay(new Date()),\n' +
        "      title: 'An event with no end date',\n" +
        '      color: colors.yellow,\n' +
        '    },\n' +
        '    {\n' +
        '      start: subDays(endOfMonth(new Date()), 3),\n' +
        '      end: addDays(endOfMonth(new Date()), 3),\n' +
        "      title: 'A long event that spans 2 months',\n" +
        '      color: colors.blue,\n' +
        '      allDay: true,\n' +
        '    },\n' +
        '    {\n' +
        '      start: addHours(startOfDay(new Date()), 2),\n' +
        '      end: addHours(new Date(), 2),\n' +
        "      title: 'A draggable and resizable event',\n" +
        '      color: colors.yellow,\n' +
        '      resizable: {\n' +
        '        beforeStart: true,\n' +
        '        afterEnd: true,\n' +
        '      },\n' +
        '      draggable: true,\n' +
        '    },\n' +
        '  ];\n' +
        '\n' +
        '  refresh = new Subject<void>();\n' +
        '\n' +
        '  eventTimesChanged({\n' +
        '    event,\n' +
        '    newStart,\n' +
        '    newEnd,\n' +
        '  }: CalendarEventTimesChangedEvent): void {\n' +
        '    event.start = newStart;\n' +
        '    event.end = newEnd;\n' +
        '    this.refresh.next();\n' +
        '  }\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/rtl/template.html',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 1,
      fixableWarningCount: 0,
      source: '<mwl-demo-utils-calendar-header [(view)]="view" [(viewDate)]="viewDate">\n' +
        '</mwl-demo-utils-calendar-header>\n' +
        '\n' +
        '<div [ngSwitch]="view" dir="rtl">\n' +
        '  <mwl-calendar-month-view\n' +
        `    *ngSwitchCase="'month'"\n` +
        '    [viewDate]="viewDate"\n' +
        '    [events]="events"\n' +
        '    [activeDayIsOpen]="true"\n' +
        '    [refresh]="refresh"\n' +
        '    (eventTimesChanged)="eventTimesChanged($event)"\n' +
        '  >\n' +
        '  </mwl-calendar-month-view>\n' +
        '  <mwl-calendar-week-view\n' +
        `    *ngSwitchCase="'week'"\n` +
        '    [viewDate]="viewDate"\n' +
        '    [events]="events"\n' +
        '    [refresh]="refresh"\n' +
        '    (eventTimesChanged)="eventTimesChanged($event)"\n' +
        '  >\n' +
        '  </mwl-calendar-week-view>\n' +
        '  <mwl-calendar-day-view\n' +
        `    *ngSwitchCase="'day'"\n` +
        '    [viewDate]="viewDate"\n' +
        '    [events]="events"\n' +
        '    [refresh]="refresh"\n' +
        '    (eventTimesChanged)="eventTimesChanged($event)"\n' +
        '  >\n' +
        '  </mwl-calendar-day-view>\n' +
        '</div>\n',
      usedDeprecatedRules: [Array]
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/scroll-to-current-time/component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: 'import {\n' +
        '  AfterViewInit,\n' +
        '  ChangeDetectionStrategy,\n' +
        '  ChangeDetectorRef,\n' +
        '  Component,\n' +
        '  ElementRef,\n' +
        '  ViewChild,\n' +
        "} from '@angular/core';\n" +
        "import { CalendarEvent, CalendarView } from 'angular-calendar';\n" +
        "import { differenceInMinutes, startOfDay, startOfHour } from 'date-fns';\n" +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-demo-component',\n" +
        '  changeDetection: ChangeDetectionStrategy.OnPush,\n' +
        "  templateUrl: './template.html',\n" +
        '  styles: [\n' +
        '    `\n' +
        '      .scroll-container {\n' +
        '        height: calc(100vh - 320px);\n' +
        '        overflow-y: auto;\n' +
        '      }\n' +
        '    `,\n' +
        '  ],\n' +
        '})\n' +
        'export class DemoComponent implements AfterViewInit {\n' +
        "  @ViewChild('scrollContainer') scrollContainer: ElementRef<HTMLElement>;\n" +
        '\n' +
        '  view: CalendarView = CalendarView.Week;\n' +
        '\n' +
        '  viewDate = new Date();\n' +
        '\n' +
        '  events: CalendarEvent[] = [];\n' +
        '\n' +
        '  constructor(private cdr: ChangeDetectorRef) {}\n' +
        '\n' +
        '  ngAfterViewInit() {\n' +
        '    this.scrollToCurrentView();\n' +
        '  }\n' +
        '\n' +
        '  viewChanged() {\n' +
        '    this.cdr.detectChanges();\n' +
        '    this.scrollToCurrentView();\n' +
        '  }\n' +
        '\n' +
        '  private scrollToCurrentView() {\n' +
        '    if (this.view === CalendarView.Week || CalendarView.Day) {\n' +
        "      // each hour is 60px high, so to get the pixels to scroll it's just the amount of minutes since midnight\n" +
        '      const minutesSinceStartOfDay = differenceInMinutes(\n' +
        '        startOfHour(new Date()),\n' +
        '        startOfDay(new Date())\n' +
        '      );\n' +
        '      const headerHeight = this.view === CalendarView.Week ? 60 : 0;\n' +
        '      this.scrollContainer.nativeElement.scrollTop =\n' +
        '        minutesSinceStartOfDay + headerHeight;\n' +
        '    }\n' +
        '  }\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/scroll-to-current-time/template.html',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 1,
      fixableWarningCount: 0,
      source: '<mwl-demo-utils-calendar-header\n' +
        '  [(view)]="view"\n' +
        '  [(viewDate)]="viewDate"\n' +
        '  (viewChange)="viewChanged()"\n' +
        '>\n' +
        '</mwl-demo-utils-calendar-header>\n' +
        '\n' +
        '<div [ngSwitch]="view" class="scroll-container" #scrollContainer>\n' +
        '  <mwl-calendar-month-view\n' +
        `    *ngSwitchCase="'month'"\n` +
        '    [viewDate]="viewDate"\n' +
        '    [events]="events"\n' +
        '  >\n' +
        '  </mwl-calendar-month-view>\n' +
        '  <mwl-calendar-week-view\n' +
        `    *ngSwitchCase="'week'"\n` +
        '    [viewDate]="viewDate"\n' +
        '    [events]="events"\n' +
        '  >\n' +
        '  </mwl-calendar-week-view>\n' +
        '  <mwl-calendar-day-view\n' +
        `    *ngSwitchCase="'day'"\n` +
        '    [viewDate]="viewDate"\n' +
        '    [events]="events"\n' +
        '  >\n' +
        '  </mwl-calendar-day-view>\n' +
        '</div>\n',
      usedDeprecatedRules: [Array]
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/selectable-period/component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 3,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: 'import {\n' +
        '  Component,\n' +
        '  ChangeDetectionStrategy,\n' +
        '  ViewEncapsulation,\n' +
        "} from '@angular/core';\n" +
        'import {\n' +
        '  CalendarEvent,\n' +
        '  CalendarMonthViewDay,\n' +
        '  CalendarView,\n' +
        '  CalendarWeekViewBeforeRenderEvent,\n' +
        "} from 'angular-calendar';\n" +
        "import { WeekViewHour, WeekViewHourColumn } from 'calendar-utils';\n" +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-demo-component',\n" +
        '  changeDetection: ChangeDetectionStrategy.OnPush,\n' +
        "  templateUrl: 'template.html',\n" +
        "  // don't do this in your app, its only so the styles get applied globally\n" +
        '  styles: [\n' +
        '    `\n' +
        '      .cal-day-selected,\n' +
        '      .cal-day-selected:hover {\n' +
        '        background-color: deeppink !important;\n' +
        '      }\n' +
        '    `,\n' +
        '  ],\n' +
        '  encapsulation: ViewEncapsulation.None,\n' +
        '})\n' +
        'export class DemoComponent {\n' +
        '  view: CalendarView = CalendarView.Month;\n' +
        '\n' +
        '  viewDate: Date = new Date();\n' +
        '\n' +
        '  selectedMonthViewDay: CalendarMonthViewDay;\n' +
        '\n' +
        '  selectedDayViewDate: Date;\n' +
        '\n' +
        '  hourColumns: WeekViewHourColumn[];\n' +
        '\n' +
        '  events: CalendarEvent[] = [];\n' +
        '\n' +
        '  selectedDays: any = [];\n' +
        '\n' +
        '  dayClicked(day: CalendarMonthViewDay): void {\n' +
        '    this.selectedMonthViewDay = day;\n' +
        '    const selectedDateTime = this.selectedMonthViewDay.date.getTime();\n' +
        '    const dateIndex = this.selectedDays.findIndex(\n' +
        '      (selectedDay) => selectedDay.date.getTime() === selectedDateTime\n' +
        '    );\n' +
        '    if (dateIndex > -1) {\n' +
        '      delete this.selectedMonthViewDay.cssClass;\n' +
        '      this.selectedDays.splice(dateIndex, 1);\n' +
        '    } else {\n' +
        '      this.selectedDays.push(this.selectedMonthViewDay);\n' +
        "      day.cssClass = 'cal-day-selected';\n" +
        '      this.selectedMonthViewDay = day;\n' +
        '    }\n' +
        '  }\n' +
        '\n' +
        '  beforeMonthViewRender({ body }: { body: CalendarMonthViewDay[] }): void {\n' +
        '    body.forEach((day) => {\n' +
        '      if (\n' +
        '        this.selectedDays.some(\n' +
        '          (selectedDay) => selectedDay.date.getTime() === day.date.getTime()\n' +
        '        )\n' +
        '      ) {\n' +
        "        day.cssClass = 'cal-day-selected';\n" +
        '      }\n' +
        '    });\n' +
        '  }\n' +
        '\n' +
        '  hourSegmentClicked(date: Date) {\n' +
        '    this.selectedDayViewDate = date;\n' +
        '    this.addSelectedDayViewClass();\n' +
        '  }\n' +
        '\n' +
        '  beforeWeekOrDayViewRender(event: CalendarWeekViewBeforeRenderEvent) {\n' +
        '    this.hourColumns = event.hourColumns;\n' +
        '    this.addSelectedDayViewClass();\n' +
        '  }\n' +
        '\n' +
        '  private addSelectedDayViewClass() {\n' +
        '    this.hourColumns.forEach((column) => {\n' +
        '      column.hours.forEach((hourSegment) => {\n' +
        '        hourSegment.segments.forEach((segment) => {\n' +
        '          delete segment.cssClass;\n' +
        '          if (\n' +
        '            this.selectedDayViewDate &&\n' +
        '            segment.date.getTime() === this.selectedDayViewDate.getTime()\n' +
        '          ) {\n' +
        "            segment.cssClass = 'cal-day-selected';\n" +
        '          }\n' +
        '        });\n' +
        '      });\n' +
        '    });\n' +
        '  }\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/selectable-period/template.html',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 1,
      fixableWarningCount: 0,
      source: '<mwl-demo-utils-calendar-header [(view)]="view" [(viewDate)]="viewDate">\n' +
        '</mwl-demo-utils-calendar-header>\n' +
        '\n' +
        '<div class="alert alert-info">\n' +
        '  Click on a month view day or a time on the week or day view to select it\n' +
        '</div>\n' +
        '\n' +
        '<div [ngSwitch]="view">\n' +
        '  <mwl-calendar-month-view\n' +
        `    *ngSwitchCase="'month'"\n` +
        '    [viewDate]="viewDate"\n' +
        '    [events]="events"\n' +
        '    (beforeViewRender)="beforeMonthViewRender($event)"\n' +
        '    (dayClicked)="dayClicked($event.day)"\n' +
        '  >\n' +
        '  </mwl-calendar-month-view>\n' +
        '  <mwl-calendar-week-view\n' +
        `    *ngSwitchCase="'week'"\n` +
        '    [viewDate]="viewDate"\n' +
        '    [events]="events"\n' +
        '    (beforeViewRender)="beforeWeekOrDayViewRender($event)"\n' +
        '    (hourSegmentClicked)="hourSegmentClicked($event.date)"\n' +
        '  >\n' +
        '  </mwl-calendar-week-view>\n' +
        '  <mwl-calendar-day-view\n' +
        `    *ngSwitchCase="'day'"\n` +
        '    [viewDate]="viewDate"\n' +
        '    [events]="events"\n' +
        '    (beforeViewRender)="beforeWeekOrDayViewRender($event)"\n' +
        '    (hourSegmentClicked)="hourSegmentClicked($event.date)"\n' +
        '  >\n' +
        '  </mwl-calendar-day-view>\n' +
        '</div>\n',
      usedDeprecatedRules: [Array]
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/show-dates-on-titles/component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: "import { Component, ChangeDetectionStrategy } from '@angular/core';\n" +
        'import {\n' +
        '  CalendarEvent,\n' +
        '  CalendarEventTitleFormatter,\n' +
        '  CalendarView,\n' +
        "} from 'angular-calendar';\n" +
        "import { CustomEventTitleFormatter } from './custom-event-title-formatter.provider';\n" +
        "import { colors } from '../demo-utils/colors';\n" +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-demo-component',\n" +
        '  changeDetection: ChangeDetectionStrategy.OnPush,\n' +
        "  templateUrl: 'template.html',\n" +
        '  providers: [\n' +
        '    {\n' +
        '      provide: CalendarEventTitleFormatter,\n' +
        '      useClass: CustomEventTitleFormatter,\n' +
        '    },\n' +
        '  ],\n' +
        '})\n' +
        'export class DemoComponent {\n' +
        '  view: CalendarView = CalendarView.Month;\n' +
        '\n' +
        '  viewDate: Date = new Date();\n' +
        '\n' +
        '  events: CalendarEvent[] = [\n' +
        '    {\n' +
        "      title: 'An event',\n" +
        '      start: new Date(),\n' +
        '      color: colors.red,\n' +
        '    },\n' +
        '  ];\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/show-dates-on-titles/custom-event-title-formatter.provider.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: "import { LOCALE_ID, Inject, Injectable } from '@angular/core';\n" +
        "import { CalendarEventTitleFormatter, CalendarEvent } from 'angular-calendar';\n" +
        "import { formatDate } from '@angular/common';\n" +
        '\n' +
        '@Injectable()\n' +
        'export class CustomEventTitleFormatter extends CalendarEventTitleFormatter {\n' +
        '  constructor(@Inject(LOCALE_ID) private locale: string) {\n' +
        '    super();\n' +
        '  }\n' +
        '\n' +
        '  // you can override any of the methods defined in the parent class\n' +
        '\n' +
        '  month(event: CalendarEvent): string {\n' +
        "    return `<b>${formatDate(event.start, 'h:m a', this.locale)}</b> ${\n" +
        '      event.title\n' +
        '    }`;\n' +
        '  }\n' +
        '\n' +
        '  week(event: CalendarEvent): string {\n' +
        "    return `<b>${formatDate(event.start, 'h:m a', this.locale)}</b> ${\n" +
        '      event.title\n' +
        '    }`;\n' +
        '  }\n' +
        '\n' +
        '  day(event: CalendarEvent): string {\n' +
        "    return `<b>${formatDate(event.start, 'h:m a', this.locale)}</b> ${\n" +
        '      event.title\n' +
        '    }`;\n' +
        '  }\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/validate-drag-and-resize/component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 3,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: 'import {\n' +
        '  ChangeDetectionStrategy,\n' +
        '  Component,\n' +
        '  ViewEncapsulation,\n' +
        "} from '@angular/core';\n" +
        "import { Subject } from 'rxjs';\n" +
        'import {\n' +
        '  CalendarEvent,\n' +
        '  CalendarEventTimesChangedEvent,\n' +
        '  CalendarView,\n' +
        "} from 'angular-calendar';\n" +
        "import { colors } from '../demo-utils/colors';\n" +
        'import {\n' +
        '  addDays,\n' +
        '  addHours,\n' +
        '  isSameDay,\n' +
        '  setDay,\n' +
        '  startOfDay,\n' +
        '  subDays,\n' +
        '  subSeconds,\n' +
        "} from 'date-fns';\n" +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-demo-component',\n" +
        '  changeDetection: ChangeDetectionStrategy.OnPush,\n' +
        "  templateUrl: 'template.html',\n" +
        '  styles: [\n' +
        '    `\n' +
        '      .invalid-position .cal-event {\n' +
        '        background-color: #ad2121 !important;\n' +
        '        color: #fff;\n' +
        '      }\n' +
        '    `,\n' +
        '  ],\n' +
        '  encapsulation: ViewEncapsulation.None,\n' +
        '})\n' +
        'export class DemoComponent {\n' +
        '  view: CalendarView = CalendarView.Week;\n' +
        '\n' +
        '  viewDate: Date = new Date();\n' +
        '\n' +
        '  events: CalendarEvent[] = [\n' +
        '    {\n' +
        '      start: subDays(startOfDay(new Date()), 1),\n' +
        '      end: addDays(new Date(), 1),\n' +
        "      title: 'A 3 day event',\n" +
        '      color: colors.blue,\n' +
        '      allDay: true,\n' +
        '      resizable: {\n' +
        '        beforeStart: true,\n' +
        '        afterEnd: true,\n' +
        '      },\n' +
        '      draggable: true,\n' +
        '    },\n' +
        '    {\n' +
        '      start: addHours(startOfDay(setDay(new Date(), 3)), 2),\n' +
        '      end: subSeconds(addHours(startOfDay(setDay(new Date(), 3)), 3), 1),\n' +
        "      title: 'An short event',\n" +
        '      color: colors.yellow,\n' +
        '      resizable: {\n' +
        '        beforeStart: true,\n' +
        '        afterEnd: true,\n' +
        '      },\n' +
        '      draggable: true,\n' +
        '    },\n' +
        '    {\n' +
        '      start: addHours(startOfDay(setDay(new Date(), 3)), 5),\n' +
        '      end: subSeconds(addHours(startOfDay(setDay(new Date(), 3)), 10), 1),\n' +
        "      title: 'A draggable and resizable event',\n" +
        '      color: colors.yellow,\n' +
        '      resizable: {\n' +
        '        beforeStart: true,\n' +
        '        afterEnd: true,\n' +
        '      },\n' +
        '      draggable: true,\n' +
        '    },\n' +
        '  ];\n' +
        '\n' +
        '  refresh = new Subject<void>();\n' +
        '\n' +
        '  validateEventTimesChanged = (\n' +
        '    { event, newStart, newEnd, allDay }: CalendarEventTimesChangedEvent,\n' +
        '    addCssClass = true\n' +
        '  ) => {\n' +
        '    if (event.allDay) {\n' +
        '      return true;\n' +
        '    }\n' +
        '\n' +
        '    delete event.cssClass;\n' +
        "    // don't allow dragging or resizing events to different days\n" +
        '    const sameDay = isSameDay(newStart, newEnd);\n' +
        '\n' +
        '    if (!sameDay) {\n' +
        '      return false;\n' +
        '    }\n' +
        '\n' +
        "    // don't allow dragging events to the same times as other events\n" +
        '    const overlappingEvent = this.events.find((otherEvent) => {\n' +
        '      return (\n' +
        '        otherEvent !== event &&\n' +
        '        !otherEvent.allDay &&\n' +
        '        ((otherEvent.start < newStart && newStart < otherEvent.end) ||\n' +
        '          (otherEvent.start < newEnd && newStart < otherEvent.end))\n' +
        '      );\n' +
        '    });\n' +
        '\n' +
        '    if (overlappingEvent) {\n' +
        '      if (addCssClass) {\n' +
        "        event.cssClass = 'invalid-position';\n" +
        '      } else {\n' +
        '        return false;\n' +
        '      }\n' +
        '    }\n' +
        '\n' +
        '    return true;\n' +
        '  };\n' +
        '\n' +
        '  eventTimesChanged(\n' +
        '    eventTimesChangedEvent: CalendarEventTimesChangedEvent\n' +
        '  ): void {\n' +
        '    delete eventTimesChangedEvent.event.cssClass;\n' +
        '    if (this.validateEventTimesChanged(eventTimesChangedEvent, false)) {\n' +
        '      const { event, newStart, newEnd } = eventTimesChangedEvent;\n' +
        '      event.start = newStart;\n' +
        '      event.end = newEnd;\n' +
        '      this.refresh.next();\n' +
        '    }\n' +
        '  }\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/week-view-event-margin/component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 2,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: 'import {\n' +
        '  ChangeDetectionStrategy,\n' +
        '  Component,\n' +
        '  ViewEncapsulation,\n' +
        "} from '@angular/core';\n" +
        "import { CalendarEvent, CalendarView } from 'angular-calendar';\n" +
        "import { addDays, addHours, startOfDay } from 'date-fns';\n" +
        "import { colors } from '../demo-utils/colors';\n" +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-demo-component',\n" +
        '  changeDetection: ChangeDetectionStrategy.OnPush,\n' +
        "  templateUrl: './template.html',\n" +
        '  encapsulation: ViewEncapsulation.None,\n' +
        '  styles: [\n' +
        '    `\n' +
        '      .cal-week-view .cal-time-events .cal-day-column {\n' +
        '        margin-right: 10px;\n' +
        '      }\n' +
        '\n' +
        '      .cal-week-view .cal-hour {\n' +
        '        width: calc(100% + 10px);\n' +
        '      }\n' +
        '    `,\n' +
        '  ],\n' +
        '})\n' +
        'export class DemoComponent {\n' +
        '  view: CalendarView = CalendarView.Week;\n' +
        '\n' +
        '  viewDate: Date = new Date();\n' +
        '\n' +
        '  events: CalendarEvent[] = [\n' +
        '    {\n' +
        '      start: startOfDay(new Date()),\n' +
        "      title: 'An event',\n" +
        '      color: colors.yellow,\n' +
        '    },\n' +
        '    {\n' +
        '      start: addHours(startOfDay(new Date()), 2),\n' +
        '      end: new Date(),\n' +
        "      title: 'Another event',\n" +
        '      color: colors.blue,\n' +
        '    },\n' +
        '    {\n' +
        '      start: addDays(addHours(startOfDay(new Date()), 2), 2),\n' +
        '      end: addDays(new Date(), 2),\n' +
        "      title: 'And another',\n" +
        '      color: colors.red,\n' +
        '    },\n' +
        '  ];\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/week-view-minute-precision/component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: "import { Component, ChangeDetectionStrategy } from '@angular/core';\n" +
        "import { CalendarEvent } from 'angular-calendar';\n" +
        "import { addDays, addHours, startOfDay } from 'date-fns';\n" +
        "import { colors } from '../demo-utils/colors';\n" +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-demo-component',\n" +
        '  changeDetection: ChangeDetectionStrategy.OnPush,\n' +
        "  templateUrl: 'template.html',\n" +
        '})\n' +
        'export class DemoComponent {\n' +
        '  viewDate: Date = new Date();\n' +
        '\n' +
        '  events: CalendarEvent[] = [\n' +
        '    {\n' +
        '      start: addHours(startOfDay(new Date()), 5),\n' +
        '      end: addHours(startOfDay(new Date()), 17),\n' +
        "      title: 'Event 1',\n" +
        '      color: colors.red,\n' +
        '      allDay: true,\n' +
        '    },\n' +
        '    {\n' +
        '      start: addHours(startOfDay(addDays(new Date(), 1)), 2),\n' +
        '      end: addHours(startOfDay(addDays(new Date(), 1)), 18),\n' +
        "      title: 'Event 2',\n" +
        '      color: colors.blue,\n' +
        '      allDay: true,\n' +
        '    },\n' +
        '    {\n' +
        '      start: addHours(startOfDay(new Date()), 8),\n' +
        "      title: 'Event 3',\n" +
        '      color: colors.blue,\n' +
        '      allDay: true,\n' +
        '    },\n' +
        '  ];\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/app/demo-modules/week-view-minute-precision/template.html',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 1,
      fixableWarningCount: 0,
      source: '<mwl-calendar-week-view\n' +
        '  precision="minutes"\n' +
        '  [viewDate]="viewDate"\n' +
        '  [events]="events"\n' +
        '>\n' +
        '</mwl-calendar-week-view>\n',
      usedDeprecatedRules: [Array]
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/demos/index.html',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 7,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 6,
      fixableWarningCount: 0,
      source: '<!DOCTYPE html>\n' +
        '<html lang="en">\n' +
        '  <head>\n' +
        '    <meta charset="utf-8" />\n' +
        '    <meta name="viewport" content="width=device-width, initial-scale=1" />\n' +
        '    <meta http-equiv="x-ua-compatible" content="ie=edge" />\n' +
        '    <title>Angular 15.0+ calendar</title>\n' +
        '    <link rel="icon" type="image/x-icon" href="favicon.ico" />\n' +
        '\n' +
        '    <style type="text/css">\n' +
        '      .formkit-slide-in {\n' +
        '        max-width: 350px !important;\n' +
        '        z-index: 1 !important;\n' +
        '      }\n' +
        '\n' +
        '      .formkit-slide-in .formkit-close {\n' +
        '        z-index: 3;\n' +
        '        top: 0 !important;\n' +
        '      }\n' +
        '    </style>\n' +
        '  </head>\n' +
        '  <body>\n' +
        '    <mwl-demo-app>Loading demo...</mwl-demo-app>\n' +
        '\n' +
        '    <!-- Global site tag (gtag.js) - Google Analytics -->\n' +
        '    <script\n' +
        '      async\n' +
        '      src="https://www.googletagmanager.com/gtag/js?id=G-6NL16F0Q9N"\n' +
        '    ></script>\n' +
        '    <script>\n' +
        '      window.dataLayer = window.dataLayer || [];\n' +
        '      function gtag() {\n' +
        '        dataLayer.push(arguments);\n' +
        '      }\n' +
        "      gtag('js', new Date());\n" +
        '\n' +
        "      gtag('config', 'G-6NL16F0Q9N');\n" +
        '    </script>\n' +
        '\n' +
        '    <img\n' +
        '      src="https://static.scarf.sh/a.png?x-pxid=a9c630e9-616e-4308-9af7-8b201184d66c"\n' +
        '    />\n' +
        '  </body>\n' +
        '</html>\n',
      usedDeprecatedRules: [Array]
    }
  ],
  'angular-calendar': [
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/calendar.module.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 2,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 2,
      fixableWarningCount: 0,
      source: "import { NgModule, ModuleWithProviders, Provider } from '@angular/core';\n" +
        'import {\n' +
        '  CalendarCommonModule,\n' +
        '  CalendarModuleConfig,\n' +
        '  CalendarEventTitleFormatter,\n' +
        '  CalendarDateFormatter,\n' +
        '  CalendarA11y,\n' +
        "} from './common/calendar-common.module';\n" +
        "import { CalendarMonthModule } from './month/calendar-month.module';\n" +
        "import { CalendarWeekModule } from './week/calendar-week.module';\n" +
        "import { CalendarDayModule } from './day/calendar-day.module';\n" +
        "import { CalendarUtils } from './common/calendar-utils/calendar-utils.provider';\n" +
        '\n' +
        "export * from './common/calendar-common.module';\n" +
        "export * from './month/calendar-month.module';\n" +
        "export * from './week/calendar-week.module';\n" +
        "export * from './day/calendar-day.module';\n" +
        '\n' +
        '/**\n' +
        ' * The main module of this library. Example usage:\n' +
        ' *\n' +
        ' * ```typescript\n' +
        " * import { CalenderModule } from 'angular-calendar';\n" +
        ' *\n' +
        ' * @NgModule({\n' +
        ' *   imports: [\n' +
        ' *     CalenderModule.forRoot()\n' +
        ' *   ]\n' +
        ' * })\n' +
        ' * class MyModule {}\n' +
        ' * ```\n' +
        ' *\n' +
        ' */\n' +
        '@NgModule({\n' +
        '  imports: [\n' +
        '    CalendarCommonModule,\n' +
        '    CalendarMonthModule,\n' +
        '    CalendarWeekModule,\n' +
        '    CalendarDayModule,\n' +
        '  ],\n' +
        '  exports: [\n' +
        '    CalendarCommonModule,\n' +
        '    CalendarMonthModule,\n' +
        '    CalendarWeekModule,\n' +
        '    CalendarDayModule,\n' +
        '  ],\n' +
        '})\n' +
        'export class CalendarModule {\n' +
        '  static forRoot(\n' +
        '    dateAdapter: Provider,\n' +
        '    config: CalendarModuleConfig = {}\n' +
        '  ): ModuleWithProviders<CalendarModule> {\n' +
        '    return {\n' +
        '      ngModule: CalendarModule,\n' +
        '      providers: [\n' +
        '        dateAdapter,\n' +
        '        config.eventTitleFormatter || CalendarEventTitleFormatter,\n' +
        '        config.dateFormatter || CalendarDateFormatter,\n' +
        '        config.utils || CalendarUtils,\n' +
        '        config.a11y || CalendarA11y,\n' +
        '      ],\n' +
        '    };\n' +
        '  }\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/common/calendar-a11y/calendar-a11y.pipe.spec.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 2,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: "import { Component } from '@angular/core';\n" +
        "import { ComponentFixture, TestBed } from '@angular/core/testing';\n" +
        "import { expect } from 'chai';\n" +
        "import { A11yParams, CalendarModule, DateAdapter } from 'angular-calendar';\n" +
        "import { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\n" +
        '\n' +
        '@Component({\n' +
        "  template: '{{ a11yParams | calendarA11y:method }}',\n" +
        '})\n' +
        'class TestComponent {\n' +
        '  a11yParams: A11yParams;\n' +
        '  method: string;\n' +
        '}\n' +
        '\n' +
        "describe('calendarA11y pipe', () => {\n" +
        '  beforeEach(() => {\n' +
        '    TestBed.configureTestingModule({\n' +
        '      imports: [\n' +
        '        CalendarModule.forRoot({\n' +
        '          provide: DateAdapter,\n' +
        '          useFactory: adapterFactory,\n' +
        '        }),\n' +
        '      ],\n' +
        '      declarations: [TestComponent],\n' +
        '    });\n' +
        '  });\n' +
        '\n' +
        "  it('should throw when an invalid method is passed', () => {\n" +
        '    const fixture: ComponentFixture<TestComponent> =\n' +
        '      TestBed.createComponent(TestComponent);\n' +
        '    fixture.componentInstance.a11yParams = {};\n' +
        "    fixture.componentInstance.method = 'invalid';\n" +
        '    expect(() => fixture.detectChanges()).to.throw(\n' +
        '      /^invalid is not a valid a11y method. Can only be one of/\n' +
        '    );\n' +
        '  });\n' +
        '});\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/common/calendar-a11y/calendar-a11y.provider.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: "import { Injectable } from '@angular/core';\n" +
        "import { formatDate, I18nPluralPipe } from '@angular/common';\n" +
        "import { A11yParams } from './calendar-a11y.interface';\n" +
        '\n' +
        '/**\n' +
        ' * This class is responsible for adding accessibility to the calendar.\n' +
        ' * You may override any of its methods via angulars DI to suit your requirements.\n' +
        ' * For example:\n' +
        ' *\n' +
        ' * ```typescript\n' +
        " * import { A11yParams, CalendarA11y } from 'angular-calendar';\n" +
        " * import { formatDate, I18nPluralPipe } from '@angular/common';\n" +
        " * import { Injectable } from '@angular/core';\n" +
        ' *\n' +
        ' * // adding your own a11y params\n' +
        ' * export interface CustomA11yParams extends A11yParams {\n' +
        ' *   isDrSuess?: boolean;\n' +
        ' * }\n' +
        ' *\n' +
        ' * @Injectable()\n' +
        ' * export class CustomCalendarA11y extends CalendarA11y {\n' +
        ' *   constructor(protected i18nPlural: I18nPluralPipe) {\n' +
        ' *     super(i18nPlural);\n' +
        ' *   }\n' +
        ' *\n' +
        ' *   // overriding a function\n' +
        ' *   public openDayEventsLandmark({ date, locale, isDrSuess }: CustomA11yParams): string {\n' +
        ' *     if (isDrSuess) {\n' +
        ' *       return `\n' +
        " *         ${formatDate(date, 'EEEE MMMM d', locale)}\n" +
        ' *          Today you are you! That is truer than true! There is no one alive\n' +
        ' *          who is you-er than you!\n' +
        ' *       `;\n' +
        ' *     }\n' +
        ' *   }\n' +
        ' * }\n' +
        ' *\n' +
        ' * // in your component that uses the calendar\n' +
        ' * providers: [{\n' +
        ' *  provide: CalendarA11y,\n' +
        ' *  useClass: CustomCalendarA11y\n' +
        ' * }]\n' +
        ' * ```\n' +
        ' */\n' +
        '@Injectable()\n' +
        'export class CalendarA11y {\n' +
        '  constructor(protected i18nPlural: I18nPluralPipe) {}\n' +
        '\n' +
        '  /**\n' +
        '   * Aria label for the badges/date of a cell\n' +
        '   * @example: `Saturday October 19 1 event click to expand`\n' +
        '   */\n' +
        '  public monthCell({ day, locale }: A11yParams): string {\n' +
        '    if (day.badgeTotal > 0) {\n' +
        '      return `\n' +
        "        ${formatDate(day.date, 'EEEE MMMM d', locale)},\n" +
        '        ${this.i18nPlural.transform(day.badgeTotal, {\n' +
        "          '=0': 'No events',\n" +
        "          '=1': 'One event',\n" +
        "          other: '# events',\n" +
        '        })},\n' +
        '         click to expand\n' +
        '      `;\n' +
        '    } else {\n' +
        "      return `${formatDate(day.date, 'EEEE MMMM d', locale)}`;\n" +
        '    }\n' +
        '  }\n' +
        '\n' +
        '  /**\n' +
        '   * Aria label for the open day events start landmark\n' +
        '   * @example: `Saturday October 19 expanded view`\n' +
        '   */\n' +
        '  public openDayEventsLandmark({ date, locale }: A11yParams): string {\n' +
        '    return `\n' +
        "      Beginning of expanded view for ${formatDate(date, 'EEEE MMMM dd', locale)}\n" +
        '    `;\n' +
        '  }\n' +
        '\n' +
        '  /**\n' +
        '   * Aria label for alert that a day in the month view was expanded\n' +
        '   * @example: `Saturday October 19 expanded`\n' +
        '   */\n' +
        '  public openDayEventsAlert({ date, locale }: A11yParams): string {\n' +
        "    return `${formatDate(date, 'EEEE MMMM dd', locale)} expanded`;\n" +
        '  }\n' +
        '\n' +
        '  /**\n' +
        '   * Descriptive aria label for an event\n' +
        "   * @example: `Saturday October 19th, Scott's Pizza Party, from 11:00am to 5:00pm`\n" +
        '   */\n' +
        '  public eventDescription({ event, locale }: A11yParams): string {\n' +
        '    if (event.allDay === true) {\n' +
        '      return this.allDayEventDescription({ event, locale });\n' +
        '    }\n' +
        '\n' +
        '    const aria = `\n' +
        "      ${formatDate(event.start, 'EEEE MMMM dd', locale)},\n" +
        "      ${event.title}, from ${formatDate(event.start, 'hh:mm a', locale)}\n" +
        '    `;\n' +
        '    if (event.end) {\n' +
        "      return aria + ` to ${formatDate(event.end, 'hh:mm a', locale)}`;\n" +
        '    }\n' +
        '    return aria;\n' +
        '  }\n' +
        '\n' +
        '  /**\n' +
        '   * Descriptive aria label for an all day event\n' +
        '   * @example:\n' +
        "   * `Scott's Party, event spans multiple days: start time October 19 5:00pm, no stop time`\n" +
        '   */\n' +
        '  public allDayEventDescription({ event, locale }: A11yParams): string {\n' +
        '    const aria = `\n' +
        '      ${event.title}, event spans multiple days:\n' +
        "      start time ${formatDate(event.start, 'MMMM dd hh:mm a', locale)}\n" +
        '    `;\n' +
        '    if (event.end) {\n' +
        '      return (\n' +
        "        aria + `, stop time ${formatDate(event.end, 'MMMM d hh:mm a', locale)}`\n" +
        '      );\n' +
        '    }\n' +
        '    return aria + `, no stop time`;\n' +
        '  }\n' +
        '\n' +
        '  /**\n' +
        '   * Aria label for the calendar event actions icons\n' +
        "   * @returns 'Edit' for fa-pencil icons, and 'Delete' for fa-times icons\n" +
        '   */\n' +
        '  public actionButtonLabel({ action }: A11yParams): string {\n' +
        '    return action.a11yLabel;\n' +
        '  }\n' +
        '\n' +
        '  /**\n' +
        '   * @returns {number} Tab index to be given to month cells\n' +
        '   */\n' +
        '  public monthCellTabIndex(): number {\n' +
        '    return 0;\n' +
        '  }\n' +
        '\n' +
        '  /**\n' +
        '   * @returns true if the events inside the month cell should be aria-hidden\n' +
        '   */\n' +
        '  public hideMonthCellEvents(): boolean {\n' +
        '    return true;\n' +
        '  }\n' +
        '\n' +
        '  /**\n' +
        '   * @returns true if event titles should be aria-hidden (global)\n' +
        '   */\n' +
        '  public hideEventTitle(): boolean {\n' +
        '    return true;\n' +
        '  }\n' +
        '\n' +
        '  /**\n' +
        '   * @returns true if hour segments in the week view should be aria-hidden\n' +
        '   */\n' +
        '  public hideWeekHourSegment(): boolean {\n' +
        '    return true;\n' +
        '  }\n' +
        '\n' +
        '  /**\n' +
        '   * @returns true if hour segments in the day view should be aria-hidden\n' +
        '   */\n' +
        '  public hideDayHourSegment(): boolean {\n' +
        '    return true;\n' +
        '  }\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/common/calendar-angular-date-formatter/calendar-angular-date-formatter.provider.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: 'import {\n' +
        '  CalendarDateFormatterInterface,\n' +
        '  DateFormatterParams,\n' +
        "} from '../calendar-date-formatter/calendar-date-formatter.interface';\n" +
        "import { formatDate } from '@angular/common';\n" +
        "import { Injectable } from '@angular/core';\n" +
        "import { DateAdapter } from '../../../date-adapters/date-adapter';\n" +
        "import { getWeekViewPeriod } from '../util/util';\n" +
        '\n' +
        '/**\n' +
        ' * This will use the angular date pipe to do all date formatting. It is the default date formatter used by the calendar.\n' +
        ' */\n' +
        '@Injectable()\n' +
        'export class CalendarAngularDateFormatter\n' +
        '  implements CalendarDateFormatterInterface\n' +
        '{\n' +
        '  constructor(protected dateAdapter: DateAdapter) {}\n' +
        '\n' +
        '  /**\n' +
        '   * The month view header week day labels\n' +
        '   */\n' +
        '  public monthViewColumnHeader({ date, locale }: DateFormatterParams): string {\n' +
        "    return formatDate(date, 'EEEE', locale);\n" +
        '  }\n' +
        '\n' +
        '  /**\n' +
        '   * The month view cell day number\n' +
        '   */\n' +
        '  public monthViewDayNumber({ date, locale }: DateFormatterParams): string {\n' +
        "    return formatDate(date, 'd', locale);\n" +
        '  }\n' +
        '\n' +
        '  /**\n' +
        '   * The month view title\n' +
        '   */\n' +
        '  public monthViewTitle({ date, locale }: DateFormatterParams): string {\n' +
        "    return formatDate(date, 'LLLL y', locale);\n" +
        '  }\n' +
        '\n' +
        '  /**\n' +
        '   * The week view header week day labels\n' +
        '   */\n' +
        '  public weekViewColumnHeader({ date, locale }: DateFormatterParams): string {\n' +
        "    return formatDate(date, 'EEEE', locale);\n" +
        '  }\n' +
        '\n' +
        '  /**\n' +
        '   * The week view sub header day and month labels\n' +
        '   */\n' +
        '  public weekViewColumnSubHeader({\n' +
        '    date,\n' +
        '    locale,\n' +
        '  }: DateFormatterParams): string {\n' +
        "    return formatDate(date, 'MMM d', locale);\n" +
        '  }\n' +
        '\n' +
        '  /**\n' +
        '   * The week view title\n' +
        '   */\n' +
        '  public weekViewTitle({\n' +
        '    date,\n' +
        '    locale,\n' +
        '    weekStartsOn,\n' +
        '    excludeDays,\n' +
        '    daysInWeek,\n' +
        '  }: DateFormatterParams): string {\n' +
        '    const { viewStart, viewEnd } = getWeekViewPeriod(\n' +
        '      this.dateAdapter,\n' +
        '      date,\n' +
        '      weekStartsOn,\n' +
        '      excludeDays,\n' +
        '      daysInWeek\n' +
        '    );\n' +
        '    const format = (dateToFormat: Date, showYear: boolean) =>\n' +
        "      formatDate(dateToFormat, 'MMM d' + (showYear ? ', yyyy' : ''), locale);\n" +
        '    return `${format(\n' +
        '      viewStart,\n' +
        '      viewStart.getUTCFullYear() !== viewEnd.getUTCFullYear()\n' +
        '    )} - ${format(viewEnd, true)}`;\n' +
        '  }\n' +
        '\n' +
        '  /**\n' +
        '   * The time formatting down the left hand side of the week view\n' +
        '   */\n' +
        '  public weekViewHour({ date, locale }: DateFormatterParams): string {\n' +
        "    return formatDate(date, 'h a', locale);\n" +
        '  }\n' +
        '\n' +
        '  /**\n' +
        '   * The time formatting down the left hand side of the day view\n' +
        '   */\n' +
        '  public dayViewHour({ date, locale }: DateFormatterParams): string {\n' +
        "    return formatDate(date, 'h a', locale);\n" +
        '  }\n' +
        '\n' +
        '  /**\n' +
        '   * The day view title\n' +
        '   */\n' +
        '  public dayViewTitle({ date, locale }: DateFormatterParams): string {\n' +
        "    return formatDate(date, 'EEEE, MMMM d, y', locale);\n" +
        '  }\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/common/calendar-common.module.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 2,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 2,
      fixableWarningCount: 0,
      source: "import { ModuleWithProviders, NgModule, Provider } from '@angular/core';\n" +
        "import { CommonModule, I18nPluralPipe } from '@angular/common';\n" +
        "import { CalendarEventActionsComponent } from './calendar-event-actions/calendar-event-actions.component';\n" +
        "import { CalendarEventTitleComponent } from './calendar-event-title/calendar-event-title.component';\n" +
        'import {\n' +
        '  CalendarTooltipDirective,\n' +
        '  CalendarTooltipWindowComponent,\n' +
        "} from './calendar-tooltip/calendar-tooltip.directive';\n" +
        "import { CalendarPreviousViewDirective } from './calendar-previous-view/calendar-previous-view.directive';\n" +
        "import { CalendarNextViewDirective } from './calendar-next-view/calendar-next-view.directive';\n" +
        "import { CalendarTodayDirective } from './calendar-today/calendar-today.directive';\n" +
        "import { CalendarDatePipe } from './calendar-date/calendar-date.pipe';\n" +
        "import { CalendarEventTitlePipe } from './calendar-event-title/calendar-event-title.pipe';\n" +
        "import { ClickDirective } from './click/click.directive';\n" +
        "import { KeydownEnterDirective } from './keydown-enter/keydown-enter.directive';\n" +
        "import { CalendarEventTitleFormatter } from './calendar-event-title-formatter/calendar-event-title-formatter.provider';\n" +
        "import { CalendarDateFormatter } from './calendar-date-formatter/calendar-date-formatter.provider';\n" +
        "import { CalendarUtils } from './calendar-utils/calendar-utils.provider';\n" +
        "import { CalendarA11y } from './calendar-a11y/calendar-a11y.provider';\n" +
        "import { CalendarA11yPipe } from './calendar-a11y/calendar-a11y.pipe';\n" +
        '\n' +
        'export interface CalendarModuleConfig {\n' +
        '  eventTitleFormatter?: Provider;\n' +
        '  dateFormatter?: Provider;\n' +
        '  utils?: Provider;\n' +
        '  a11y?: Provider;\n' +
        '}\n' +
        '\n' +
        "export * from './calendar-event-title-formatter/calendar-event-title-formatter.provider';\n" +
        "export * from './calendar-moment-date-formatter/calendar-moment-date-formatter.provider';\n" +
        "export * from './calendar-native-date-formatter/calendar-native-date-formatter.provider';\n" +
        "export * from './calendar-angular-date-formatter/calendar-angular-date-formatter.provider';\n" +
        "export * from './calendar-date-formatter/calendar-date-formatter.provider';\n" +
        "export * from './calendar-utils/calendar-utils.provider';\n" +
        "export * from './calendar-a11y/calendar-a11y.provider';\n" +
        "export * from './calendar-a11y/calendar-a11y.interface';\n" +
        "export * from './calendar-date-formatter/calendar-date-formatter.interface';\n" +
        "export * from './calendar-event-times-changed-event/calendar-event-times-changed-event.interface';\n" +
        "export * from '../../date-adapters/date-adapter';\n" +
        "export * from './calendar-view/calendar-view.enum';\n" +
        '\n' +
        '// needed for ivy, not part of the public api\n' +
        "export { CalendarEventActionsComponent as ɵCalendarEventActionsComponent } from './calendar-event-actions/calendar-event-actions.component';\n" +
        "export { CalendarEventTitleComponent as ɵCalendarEventTitleComponent } from './calendar-event-title/calendar-event-title.component';\n" +
        'export {\n' +
        '  CalendarTooltipDirective as ɵCalendarTooltipDirective,\n' +
        '  CalendarTooltipWindowComponent as ɵCalendarTooltipWindowComponent,\n' +
        "} from './calendar-tooltip/calendar-tooltip.directive';\n" +
        "export { CalendarPreviousViewDirective as ɵCalendarPreviousViewDirective } from './calendar-previous-view/calendar-previous-view.directive';\n" +
        "export { CalendarNextViewDirective as ɵCalendarNextViewDirective } from './calendar-next-view/calendar-next-view.directive';\n" +
        "export { CalendarTodayDirective as ɵCalendarTodayDirective } from './calendar-today/calendar-today.directive';\n" +
        "export { CalendarDatePipe as ɵCalendarDatePipe } from './calendar-date/calendar-date.pipe';\n" +
        "export { CalendarEventTitlePipe as ɵCalendarEventTitlePipe } from './calendar-event-title/calendar-event-title.pipe';\n" +
        "export { ClickDirective as ɵClickDirective } from './click/click.directive';\n" +
        "export { KeydownEnterDirective as ɵKeydownEnterDirective } from './keydown-enter/keydown-enter.directive';\n" +
        "export { CalendarA11yPipe as ɵCalendarA11yPipe } from './calendar-a11y/calendar-a11y.pipe';\n" +
        '\n' +
        'export {\n' +
        '  CalendarEvent,\n' +
        '  EventAction as CalendarEventAction,\n' +
        '  DAYS_OF_WEEK,\n' +
        '  ViewPeriod as CalendarViewPeriod,\n' +
        "} from 'calendar-utils';\n" +
        '\n' +
        '/**\n' +
        " * Import this module to if you're just using a singular view and want to save on bundle size. Example usage:\n" +
        ' *\n' +
        ' * ```typescript\n' +
        " * import { CalendarCommonModule, CalendarMonthModule } from 'angular-calendar';\n" +
        ' *\n' +
        ' * @NgModule({\n' +
        ' *   imports: [\n' +
        ' *     CalendarCommonModule.forRoot(),\n' +
        ' *     CalendarMonthModule\n' +
        ' *   ]\n' +
        ' * })\n' +
        ' * class MyModule {}\n' +
        ' * ```\n' +
        ' *\n' +
        ' */\n' +
        '@NgModule({\n' +
        '  declarations: [\n' +
        '    CalendarEventActionsComponent,\n' +
        '    CalendarEventTitleComponent,\n' +
        '    CalendarTooltipWindowComponent,\n' +
        '    CalendarTooltipDirective,\n' +
        '    CalendarPreviousViewDirective,\n' +
        '    CalendarNextViewDirective,\n' +
        '    CalendarTodayDirective,\n' +
        '    CalendarDatePipe,\n' +
        '    CalendarEventTitlePipe,\n' +
        '    CalendarA11yPipe,\n' +
        '    ClickDirective,\n' +
        '    KeydownEnterDirective,\n' +
        '  ],\n' +
        '  imports: [CommonModule],\n' +
        '  exports: [\n' +
        '    CalendarEventActionsComponent,\n' +
        '    CalendarEventTitleComponent,\n' +
        '    CalendarTooltipWindowComponent,\n' +
        '    CalendarTooltipDirective,\n' +
        '    CalendarPreviousViewDirective,\n' +
        '    CalendarNextViewDirective,\n' +
        '    CalendarTodayDirective,\n' +
        '    CalendarDatePipe,\n' +
        '    CalendarEventTitlePipe,\n' +
        '    CalendarA11yPipe,\n' +
        '    ClickDirective,\n' +
        '    KeydownEnterDirective,\n' +
        '  ],\n' +
        '  providers: [I18nPluralPipe],\n' +
        '})\n' +
        'export class CalendarCommonModule {\n' +
        '  static forRoot(\n' +
        '    dateAdapter: Provider,\n' +
        '    config: CalendarModuleConfig = {}\n' +
        '  ): ModuleWithProviders<CalendarCommonModule> {\n' +
        '    return {\n' +
        '      ngModule: CalendarCommonModule,\n' +
        '      providers: [\n' +
        '        dateAdapter,\n' +
        '        config.eventTitleFormatter || CalendarEventTitleFormatter,\n' +
        '        config.dateFormatter || CalendarDateFormatter,\n' +
        '        config.utils || CalendarUtils,\n' +
        '        config.a11y || CalendarA11y,\n' +
        '      ],\n' +
        '    };\n' +
        '  }\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/common/calendar-date-formatter/calendar-date-formatter.provider.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: "import { CalendarAngularDateFormatter } from '../calendar-angular-date-formatter/calendar-angular-date-formatter.provider';\n" +
        "import { Injectable } from '@angular/core';\n" +
        '\n' +
        '/**\n' +
        ' * This class is responsible for all formatting of dates. There are 3 implementations available, the `CalendarAngularDateFormatter` (default) which uses the angular date pipe to format dates, the `CalendarNativeDateFormatter` which will use the <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Intl" target="_blank">Intl</a> API to format dates, or there is the `CalendarMomentDateFormatter` which uses <a href="http://momentjs.com/" target="_blank">moment</a>.\n' +
        ' *\n' +
        ' * If you wish, you may override any of the defaults via angulars DI. For example:\n' +
        ' *\n' +
        ' * ```typescript\n' +
        " * import { CalendarDateFormatter, DateFormatterParams } from 'angular-calendar';\n" +
        " * import { formatDate } from '@angular/common';\n" +
        " * import { Injectable } from '@angular/core';\n" +
        ' *\n' +
        ' * @Injectable()\n' +
        ' * class CustomDateFormatter extends CalendarDateFormatter {\n' +
        ' *\n' +
        ' *   public monthViewColumnHeader({date, locale}: DateFormatterParams): string {\n' +
        " *     return formatDate(date, 'EEE', locale); // use short week days\n" +
        ' *   }\n' +
        ' *\n' +
        ' * }\n' +
        ' *\n' +
        ' * // in your component that uses the calendar\n' +
        ' * providers: [{\n' +
        ' *   provide: CalendarDateFormatter,\n' +
        ' *   useClass: CustomDateFormatter\n' +
        ' * }]\n' +
        ' * ```\n' +
        ' */\n' +
        '@Injectable()\n' +
        'export class CalendarDateFormatter extends CalendarAngularDateFormatter {}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/common/calendar-date/calendar-date.pipe.spec.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 2,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: "import { Component, LOCALE_ID } from '@angular/core';\n" +
        "import { inject, ComponentFixture, TestBed } from '@angular/core/testing';\n" +
        "import { expect } from 'chai';\n" +
        "import { spy } from 'sinon';\n" +
        "import moment from 'moment';\n" +
        'import {\n' +
        '  CalendarModule,\n' +
        '  CalendarMomentDateFormatter,\n' +
        '  CalendarDateFormatter,\n' +
        '  MOMENT,\n' +
        "} from 'angular-calendar';\n" +
        "import { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\n" +
        "import { DateAdapter } from 'angular-calendar';\n" +
        '\n' +
        '@Component({\n' +
        '  template:\n' +
        "    '{{ date | calendarDate:method:locale:weekStartsOn:excludeDays:daysInWeek }}',\n" +
        '})\n' +
        'class TestComponent {\n' +
        '  date: Date;\n' +
        '  view: string;\n' +
        '  format: string;\n' +
        '  locale: string;\n' +
        '  method: string;\n' +
        '  daysInWeek: number;\n' +
        '  excludeDays: number[];\n' +
        '  weekStartsOn: number;\n' +
        '}\n' +
        '\n' +
        "describe('calendarDate pipe', () => {\n" +
        '  beforeEach(() => {\n' +
        '    TestBed.configureTestingModule({\n' +
        '      imports: [\n' +
        '        CalendarModule.forRoot(\n' +
        '          {\n' +
        '            provide: DateAdapter,\n' +
        '            useFactory: adapterFactory,\n' +
        '          },\n' +
        '          {\n' +
        '            dateFormatter: {\n' +
        '              provide: CalendarDateFormatter,\n' +
        '              useClass: CalendarMomentDateFormatter,\n' +
        '            },\n' +
        '          }\n' +
        '        ),\n' +
        '      ],\n' +
        '      declarations: [TestComponent],\n' +
        '      providers: [{ provide: MOMENT, useValue: moment }],\n' +
        '    });\n' +
        '  });\n' +
        '\n' +
        '  let dateFormatter: CalendarDateFormatter;\n' +
        '  let defaultLocale: string;\n' +
        '  beforeEach(inject(\n' +
        '    [CalendarDateFormatter, LOCALE_ID],\n' +
        '    (_dateFormatter_, locale) => {\n' +
        '      dateFormatter = _dateFormatter_;\n' +
        '      defaultLocale = locale;\n' +
        '    }\n' +
        '  ));\n' +
        '\n' +
        "  it('should use the date formatter to format the date', () => {\n" +
        '    const fixture: ComponentFixture<TestComponent> =\n' +
        '      TestBed.createComponent(TestComponent);\n' +
        "    spy(dateFormatter, 'monthViewColumnHeader');\n" +
        "    fixture.componentInstance.date = new Date('2016-01-01');\n" +
        "    fixture.componentInstance.method = 'monthViewColumnHeader';\n" +
        '    fixture.detectChanges();\n' +
        "    expect(fixture.nativeElement.innerHTML).to.equal('Friday');\n" +
        '    expect(dateFormatter.monthViewColumnHeader).to.have.been.calledWith({\n' +
        '      date: fixture.componentInstance.date,\n' +
        '      locale: defaultLocale,\n' +
        '      daysInWeek: undefined,\n' +
        '      excludeDays: [],\n' +
        '      weekStartsOn: 0,\n' +
        '    });\n' +
        '  });\n' +
        '\n' +
        "  it('should allow the locale to be customised', () => {\n" +
        '    const fixture: ComponentFixture<TestComponent> =\n' +
        '      TestBed.createComponent(TestComponent);\n' +
        "    fixture.componentInstance.locale = 'de';\n" +
        "    spy(dateFormatter, 'monthViewColumnHeader');\n" +
        "    fixture.componentInstance.date = new Date('2016-01-01');\n" +
        "    fixture.componentInstance.method = 'monthViewColumnHeader';\n" +
        '    fixture.detectChanges();\n' +
        "    expect(fixture.nativeElement.innerHTML).to.equal('Freitag');\n" +
        '    expect(dateFormatter.monthViewColumnHeader).to.have.been.calledWith({\n' +
        '      date: fixture.componentInstance.date,\n' +
        "      locale: 'de',\n" +
        '      daysInWeek: undefined,\n' +
        '      excludeDays: [],\n' +
        '      weekStartsOn: 0,\n' +
        '    });\n' +
        '  });\n' +
        '\n' +
        "  it('should throw when an invalid method is passed', () => {\n" +
        '    const fixture: ComponentFixture<TestComponent> =\n' +
        '      TestBed.createComponent(TestComponent);\n' +
        "    fixture.componentInstance.date = new Date('2016-01-01');\n" +
        "    fixture.componentInstance.method = 'invalid';\n" +
        '    expect(() => fixture.detectChanges()).to.throw(\n' +
        '      /^invalid is not a valid date formatter. Can only be one of/\n' +
        '    );\n' +
        '  });\n' +
        '});\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/common/calendar-event-actions/calendar-event-actions.component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 3,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 1,
      fixableWarningCount: 0,
      source: "import { Component, Input, TemplateRef } from '@angular/core';\n" +
        "import { CalendarEvent, EventAction } from 'calendar-utils';\n" +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-calendar-event-actions',\n" +
        '  template: `\n' +
        '    <ng-template\n' +
        '      #defaultTemplate\n' +
        '      let-event="event"\n' +
        '      let-trackByActionId="trackByActionId"\n' +
        '    >\n' +
        '      <span *ngIf="event.actions" class="cal-event-actions">\n' +
        '        <a\n' +
        '          class="cal-event-action"\n' +
        '          href="javascript:;"\n' +
        '          *ngFor="let action of event.actions; trackBy: trackByActionId"\n' +
        '          (mwlClick)="action.onClick({ event: event, sourceEvent: $event })"\n' +
        '          (mwlKeydownEnter)="\n' +
        '            action.onClick({ event: event, sourceEvent: $event })\n' +
        '          "\n' +
        '          [ngClass]="action.cssClass"\n' +
        '          [innerHtml]="action.label"\n' +
        '          tabindex="0"\n' +
        '          role="button"\n' +
        '          [attr.aria-label]="\n' +
        "            { action: action } | calendarA11y : 'actionButtonLabel'\n" +
        '          "\n' +
        '        >\n' +
        '        </a>\n' +
        '      </span>\n' +
        '    </ng-template>\n' +
        '    <ng-template\n' +
        '      [ngTemplateOutlet]="customTemplate || defaultTemplate"\n' +
        '      [ngTemplateOutletContext]="{\n' +
        '        event: event,\n' +
        '        trackByActionId: trackByActionId\n' +
        '      }"\n' +
        '    >\n' +
        '    </ng-template>\n' +
        '  `,\n' +
        '})\n' +
        'export class CalendarEventActionsComponent {\n' +
        '  @Input() event: CalendarEvent;\n' +
        '\n' +
        '  @Input() customTemplate: TemplateRef<any>;\n' +
        '\n' +
        '  trackByActionId = (index: number, action: EventAction) =>\n' +
        '    action.id ? action.id : action;\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/common/calendar-event-title/calendar-event-title.component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 2,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: "import { Component, Input, TemplateRef } from '@angular/core';\n" +
        "import { CalendarEvent } from 'calendar-utils';\n" +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-calendar-event-title',\n" +
        '  template: `\n' +
        '    <ng-template #defaultTemplate let-event="event" let-view="view">\n' +
        '      <span\n' +
        '        class="cal-event-title"\n' +
        '        [innerHTML]="event.title | calendarEventTitle : view : event"\n' +
        `        [attr.aria-hidden]="{} | calendarA11y : 'hideEventTitle'"\n` +
        '      >\n' +
        '      </span>\n' +
        '    </ng-template>\n' +
        '    <ng-template\n' +
        '      [ngTemplateOutlet]="customTemplate || defaultTemplate"\n' +
        '      [ngTemplateOutletContext]="{\n' +
        '        event: event,\n' +
        '        view: view\n' +
        '      }"\n' +
        '    >\n' +
        '    </ng-template>\n' +
        '  `,\n' +
        '})\n' +
        'export class CalendarEventTitleComponent {\n' +
        '  @Input() event: CalendarEvent;\n' +
        '\n' +
        '  @Input() customTemplate: TemplateRef<any>;\n' +
        '\n' +
        '  @Input() view: string;\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/common/calendar-moment-date-formatter/calendar-moment-date-formatter.provider.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: "import { InjectionToken, Inject, Injectable } from '@angular/core';\n" +
        'import {\n' +
        '  CalendarDateFormatterInterface,\n' +
        '  DateFormatterParams,\n' +
        "} from '../calendar-date-formatter/calendar-date-formatter.interface';\n" +
        "import { getWeekViewPeriod } from '../util/util';\n" +
        "import { DateAdapter } from '../../../date-adapters/date-adapter';\n" +
        '\n' +
        "export const MOMENT: InjectionToken<string> = new InjectionToken('Moment');\n" +
        '\n' +
        '/**\n' +
        ' * This will use <a href="http://momentjs.com/" target="_blank">moment</a> to do all date formatting. To use this class:\n' +
        ' *\n' +
        ' * ```typescript\n' +
        " * import { CalendarDateFormatter, CalendarMomentDateFormatter, MOMENT } from 'angular-calendar';\n" +
        " * import moment from 'moment';\n" +
        ' *\n' +
        ' * // in your component\n' +
        ' * provide: [{\n' +
        ' *   provide: MOMENT, useValue: moment\n' +
        ' * }, {\n' +
        ' *   provide: CalendarDateFormatter, useClass: CalendarMomentDateFormatter\n' +
        ' * }]\n' +
        ' *\n' +
        ' * ```\n' +
        ' */\n' +
        '@Injectable()\n' +
        'export class CalendarMomentDateFormatter\n' +
        '  implements CalendarDateFormatterInterface\n' +
        '{\n' +
        '  /**\n' +
        '   * @hidden\n' +
        '   */\n' +
        '  constructor(\n' +
        '    @Inject(MOMENT) protected moment: any,\n' +
        '    protected dateAdapter: DateAdapter\n' +
        '  ) {}\n' +
        '\n' +
        '  /**\n' +
        '   * The month view header week day labels\n' +
        '   */\n' +
        '  public monthViewColumnHeader({ date, locale }: DateFormatterParams): string {\n' +
        "    return this.moment(date).locale(locale).format('dddd');\n" +
        '  }\n' +
        '\n' +
        '  /**\n' +
        '   * The month view cell day number\n' +
        '   */\n' +
        '  public monthViewDayNumber({ date, locale }: DateFormatterParams): string {\n' +
        "    return this.moment(date).locale(locale).format('D');\n" +
        '  }\n' +
        '\n' +
        '  /**\n' +
        '   * The month view title\n' +
        '   */\n' +
        '  public monthViewTitle({ date, locale }: DateFormatterParams): string {\n' +
        "    return this.moment(date).locale(locale).format('MMMM YYYY');\n" +
        '  }\n' +
        '\n' +
        '  /**\n' +
        '   * The week view header week day labels\n' +
        '   */\n' +
        '  public weekViewColumnHeader({ date, locale }: DateFormatterParams): string {\n' +
        "    return this.moment(date).locale(locale).format('dddd');\n" +
        '  }\n' +
        '\n' +
        '  /**\n' +
        '   * The week view sub header day and month labels\n' +
        '   */\n' +
        '  public weekViewColumnSubHeader({\n' +
        '    date,\n' +
        '    locale,\n' +
        '  }: DateFormatterParams): string {\n' +
        "    return this.moment(date).locale(locale).format('MMM D');\n" +
        '  }\n' +
        '\n' +
        '  /**\n' +
        '   * The week view title\n' +
        '   */\n' +
        '  public weekViewTitle({\n' +
        '    date,\n' +
        '    locale,\n' +
        '    weekStartsOn,\n' +
        '    excludeDays,\n' +
        '    daysInWeek,\n' +
        '  }: DateFormatterParams): string {\n' +
        '    const { viewStart, viewEnd } = getWeekViewPeriod(\n' +
        '      this.dateAdapter,\n' +
        '      date,\n' +
        '      weekStartsOn,\n' +
        '      excludeDays,\n' +
        '      daysInWeek\n' +
        '    );\n' +
        '    const format = (dateToFormat: Date, showYear: boolean) =>\n' +
        '      this.moment(dateToFormat)\n' +
        '        .locale(locale)\n' +
        "        .format('MMM D' + (showYear ? ', YYYY' : ''));\n" +
        '    return `${format(\n' +
        '      viewStart,\n' +
        '      viewStart.getUTCFullYear() !== viewEnd.getUTCFullYear()\n' +
        '    )} - ${format(viewEnd, true)}`;\n' +
        '  }\n' +
        '\n' +
        '  /**\n' +
        '   * The time formatting down the left hand side of the week view\n' +
        '   */\n' +
        '  public weekViewHour({ date, locale }: DateFormatterParams): string {\n' +
        "    return this.moment(date).locale(locale).format('ha');\n" +
        '  }\n' +
        '\n' +
        '  /**\n' +
        '   * The time formatting down the left hand side of the day view\n' +
        '   */\n' +
        '  public dayViewHour({ date, locale }: DateFormatterParams): string {\n' +
        "    return this.moment(date).locale(locale).format('ha');\n" +
        '  }\n' +
        '\n' +
        '  /**\n' +
        '   * The day view title\n' +
        '   */\n' +
        '  public dayViewTitle({ date, locale }: DateFormatterParams): string {\n' +
        "    return this.moment(date).locale(locale).format('dddd, LL'); // dddd = Thursday\n" +
        '  } // LL = locale-dependent Month Day, Year\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/common/calendar-native-date-formatter/calendar-native-date-formatter.provider.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: 'import {\n' +
        '  CalendarDateFormatterInterface,\n' +
        '  DateFormatterParams,\n' +
        "} from '../calendar-date-formatter/calendar-date-formatter.interface';\n" +
        "import { Injectable } from '@angular/core';\n" +
        "import { DateAdapter } from '../../../date-adapters/date-adapter';\n" +
        "import { getWeekViewPeriod } from '../util/util';\n" +
        '\n' +
        '/**\n' +
        ' * This will use <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Intl" target="_blank">Intl</a> API to do all date formatting.\n' +
        ' *\n' +
        ' * You will need to include a <a href="https://github.com/andyearnshaw/Intl.js/">polyfill</a> for older browsers.\n' +
        ' */\n' +
        '@Injectable()\n' +
        'export class CalendarNativeDateFormatter\n' +
        '  implements CalendarDateFormatterInterface\n' +
        '{\n' +
        '  constructor(protected dateAdapter: DateAdapter) {}\n' +
        '\n' +
        '  /**\n' +
        '   * The month view header week day labels\n' +
        '   */\n' +
        '  public monthViewColumnHeader({ date, locale }: DateFormatterParams): string {\n' +
        "    return new Intl.DateTimeFormat(locale, { weekday: 'long' }).format(date);\n" +
        '  }\n' +
        '\n' +
        '  /**\n' +
        '   * The month view cell day number\n' +
        '   */\n' +
        '  public monthViewDayNumber({ date, locale }: DateFormatterParams): string {\n' +
        "    return new Intl.DateTimeFormat(locale, { day: 'numeric' }).format(date);\n" +
        '  }\n' +
        '\n' +
        '  /**\n' +
        '   * The month view title\n' +
        '   */\n' +
        '  public monthViewTitle({ date, locale }: DateFormatterParams): string {\n' +
        '    return new Intl.DateTimeFormat(locale, {\n' +
        "      year: 'numeric',\n" +
        "      month: 'long',\n" +
        '    }).format(date);\n' +
        '  }\n' +
        '\n' +
        '  /**\n' +
        '   * The week view header week day labels\n' +
        '   */\n' +
        '  public weekViewColumnHeader({ date, locale }: DateFormatterParams): string {\n' +
        "    return new Intl.DateTimeFormat(locale, { weekday: 'long' }).format(date);\n" +
        '  }\n' +
        '\n' +
        '  /**\n' +
        '   * The week view sub header day and month labels\n' +
        '   */\n' +
        '  public weekViewColumnSubHeader({\n' +
        '    date,\n' +
        '    locale,\n' +
        '  }: DateFormatterParams): string {\n' +
        '    return new Intl.DateTimeFormat(locale, {\n' +
        "      day: 'numeric',\n" +
        "      month: 'short',\n" +
        '    }).format(date);\n' +
        '  }\n' +
        '\n' +
        '  /**\n' +
        '   * The week view title\n' +
        '   */\n' +
        '  public weekViewTitle({\n' +
        '    date,\n' +
        '    locale,\n' +
        '    weekStartsOn,\n' +
        '    excludeDays,\n' +
        '    daysInWeek,\n' +
        '  }: DateFormatterParams): string {\n' +
        '    const { viewStart, viewEnd } = getWeekViewPeriod(\n' +
        '      this.dateAdapter,\n' +
        '      date,\n' +
        '      weekStartsOn,\n' +
        '      excludeDays,\n' +
        '      daysInWeek\n' +
        '    );\n' +
        '\n' +
        '    const format = (dateToFormat: Date, showYear: boolean) =>\n' +
        '      new Intl.DateTimeFormat(locale, {\n' +
        "        day: 'numeric',\n" +
        "        month: 'short',\n" +
        "        year: showYear ? 'numeric' : undefined,\n" +
        '      }).format(dateToFormat);\n' +
        '\n' +
        '    return `${format(\n' +
        '      viewStart,\n' +
        '      viewStart.getUTCFullYear() !== viewEnd.getUTCFullYear()\n' +
        '    )} - ${format(viewEnd, true)}`;\n' +
        '  }\n' +
        '\n' +
        '  /**\n' +
        '   * The time formatting down the left hand side of the week view\n' +
        '   */\n' +
        '  public weekViewHour({ date, locale }: DateFormatterParams): string {\n' +
        "    return new Intl.DateTimeFormat(locale, { hour: 'numeric' }).format(date);\n" +
        '  }\n' +
        '\n' +
        '  /**\n' +
        '   * The time formatting down the left hand side of the day view\n' +
        '   */\n' +
        '  public dayViewHour({ date, locale }: DateFormatterParams): string {\n' +
        "    return new Intl.DateTimeFormat(locale, { hour: 'numeric' }).format(date);\n" +
        '  }\n' +
        '\n' +
        '  /**\n' +
        '   * The day view title\n' +
        '   */\n' +
        '  public dayViewTitle({ date, locale }: DateFormatterParams): string {\n' +
        '    return new Intl.DateTimeFormat(locale, {\n' +
        "      day: 'numeric',\n" +
        "      month: 'long',\n" +
        "      year: 'numeric',\n" +
        "      weekday: 'long',\n" +
        '    }).format(date);\n' +
        '  }\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/common/calendar-next-view/calendar-next-view.directive.spec.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 6,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 2,
      fixableWarningCount: 0,
      source: "import { Component } from '@angular/core';\n" +
        "import { TestBed } from '@angular/core/testing';\n" +
        "import { expect } from 'chai';\n" +
        "import { CalendarModule, DateAdapter } from 'angular-calendar';\n" +
        "import { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\n" +
        '\n' +
        '@Component({\n' +
        '  template: `\n' +
        '    <button\n' +
        '      mwlCalendarNextView\n' +
        '      [view]="view"\n' +
        '      [(viewDate)]="viewDate"\n' +
        '      [excludeDays]="excludeDays"\n' +
        '      [daysInWeek]="daysInWeek"\n' +
        '    >\n' +
        '      Next\n' +
        '    </button>\n' +
        '  `,\n' +
        '})\n' +
        'class TestComponent {\n' +
        '  view: string;\n' +
        '  viewDate: Date;\n' +
        '  excludeDays: number[] = [];\n' +
        '  daysInWeek: number;\n' +
        '}\n' +
        '\n' +
        "describe('mwlCalendarNextView directive', () => {\n" +
        '  beforeEach(() => {\n' +
        '    TestBed.configureTestingModule({\n' +
        '      imports: [\n' +
        '        CalendarModule.forRoot({\n' +
        '          provide: DateAdapter,\n' +
        '          useFactory: adapterFactory,\n' +
        '        }),\n' +
        '      ],\n' +
        '      declarations: [TestComponent],\n' +
        '    });\n' +
        '  });\n' +
        '\n' +
        "  it('should increase the view date by 1 month', () => {\n" +
        '    const fixture = TestBed.createComponent<TestComponent>(TestComponent);\n' +
        "    fixture.componentInstance.view = 'month';\n" +
        "    fixture.componentInstance.viewDate = new Date('2017-01-28');\n" +
        '    fixture.detectChanges();\n' +
        "    fixture.nativeElement.querySelector('button').click();\n" +
        '    fixture.detectChanges();\n' +
        '    expect(fixture.componentInstance.viewDate).to.deep.equal(\n' +
        "      new Date('2017-02-28')\n" +
        '    );\n' +
        '    fixture.destroy();\n' +
        '  });\n' +
        '\n' +
        "  it('should increase the view date by 1 week', () => {\n" +
        '    const fixture = TestBed.createComponent<TestComponent>(TestComponent);\n' +
        "    fixture.componentInstance.view = 'week';\n" +
        "    fixture.componentInstance.viewDate = new Date('2017-01-28');\n" +
        '    fixture.detectChanges();\n' +
        "    fixture.nativeElement.querySelector('button').click();\n" +
        '    fixture.detectChanges();\n' +
        '    expect(fixture.componentInstance.viewDate).to.deep.equal(\n' +
        "      new Date('2017-02-04')\n" +
        '    );\n' +
        '    fixture.destroy();\n' +
        '  });\n' +
        '\n' +
        "  it('should increase the view date by 1 day', () => {\n" +
        '    const fixture = TestBed.createComponent<TestComponent>(TestComponent);\n' +
        "    fixture.componentInstance.view = 'day';\n" +
        "    fixture.componentInstance.viewDate = new Date('2017-01-28');\n" +
        '    fixture.detectChanges();\n' +
        "    fixture.nativeElement.querySelector('button').click();\n" +
        '    fixture.detectChanges();\n' +
        '    expect(fixture.componentInstance.viewDate).to.deep.equal(\n' +
        "      new Date('2017-01-29')\n" +
        '    );\n' +
        '    fixture.destroy();\n' +
        '  });\n' +
        '\n' +
        "  it('should increase the view date by 1 day, skipping weekends', () => {\n" +
        '    const fixture = TestBed.createComponent<TestComponent>(TestComponent);\n' +
        "    fixture.componentInstance.view = 'day';\n" +
        "    fixture.componentInstance.viewDate = new Date('2018-06-15');\n" +
        '    fixture.componentInstance.excludeDays = [0, 6];\n' +
        '    fixture.detectChanges();\n' +
        "    fixture.nativeElement.querySelector('button').click();\n" +
        '    fixture.detectChanges();\n' +
        '    expect(fixture.componentInstance.viewDate).to.deep.equal(\n' +
        "      new Date('2018-06-18')\n" +
        '    );\n' +
        '    fixture.destroy();\n' +
        '  });\n' +
        '\n' +
        "  it('should increase the view date by 4 days, skipping weekends', () => {\n" +
        '    const fixture = TestBed.createComponent<TestComponent>(TestComponent);\n' +
        "    fixture.componentInstance.view = 'week';\n" +
        "    fixture.componentInstance.viewDate = new Date('2018-07-27');\n" +
        '    fixture.componentInstance.excludeDays = [0, 6];\n' +
        '    fixture.componentInstance.daysInWeek = 4;\n' +
        '    fixture.detectChanges();\n' +
        "    fixture.nativeElement.querySelector('button').click();\n" +
        '    fixture.detectChanges();\n' +
        '    expect(fixture.componentInstance.viewDate).to.deep.equal(\n' +
        "      new Date('2018-08-02')\n" +
        '    );\n' +
        '    fixture.destroy();\n' +
        '  });\n' +
        '});\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/common/calendar-next-view/calendar-next-view.directive.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: 'import {\n' +
        '  Directive,\n' +
        '  EventEmitter,\n' +
        '  HostListener,\n' +
        '  Input,\n' +
        '  Output,\n' +
        "} from '@angular/core';\n" +
        "import { DateAdapter } from '../../../date-adapters/date-adapter';\n" +
        "import { CalendarView } from '../calendar-view/calendar-view.enum';\n" +
        "import { addDaysWithExclusions } from '../util/util';\n" +
        '\n' +
        '/**\n' +
        ' * Change the view date to the next view. For example:\n' +
        ' *\n' +
        ' * ```typescript\n' +
        ' * <button\n' +
        ' *  mwlCalendarNextView\n' +
        ' *  [(viewDate)]="viewDate"\n' +
        ' *  [view]="view">\n' +
        ' *  Next\n' +
        ' * </button>\n' +
        ' * ```\n' +
        ' */\n' +
        '@Directive({\n' +
        "  selector: '[mwlCalendarNextView]',\n" +
        '})\n' +
        'export class CalendarNextViewDirective {\n' +
        '  /**\n' +
        '   * The current view\n' +
        '   */\n' +
        "  @Input() view: CalendarView | 'month' | 'week' | 'day';\n" +
        '\n' +
        '  /**\n' +
        '   * The current view date\n' +
        '   */\n' +
        '  @Input() viewDate: Date;\n' +
        '\n' +
        '  /**\n' +
        '   * Days to skip when going forward by 1 day\n' +
        '   */\n' +
        '  @Input() excludeDays: number[] = [];\n' +
        '\n' +
        '  /**\n' +
        '   * The number of days in a week. If set will add this amount of days instead of 1 week\n' +
        '   */\n' +
        '  @Input() daysInWeek: number;\n' +
        '\n' +
        '  /**\n' +
        '   * Called when the view date is changed\n' +
        '   */\n' +
        '  @Output() viewDateChange: EventEmitter<Date> = new EventEmitter();\n' +
        '\n' +
        '  constructor(private dateAdapter: DateAdapter) {}\n' +
        '\n' +
        '  /**\n' +
        '   * @hidden\n' +
        '   */\n' +
        "  @HostListener('click')\n" +
        '  onClick(): void {\n' +
        '    const addFn: any = {\n' +
        '      day: this.dateAdapter.addDays,\n' +
        '      week: this.dateAdapter.addWeeks,\n' +
        '      month: this.dateAdapter.addMonths,\n' +
        '    }[this.view];\n' +
        '\n' +
        '    if (this.view === CalendarView.Day) {\n' +
        '      this.viewDateChange.emit(\n' +
        '        addDaysWithExclusions(\n' +
        '          this.dateAdapter,\n' +
        '          this.viewDate,\n' +
        '          1,\n' +
        '          this.excludeDays\n' +
        '        )\n' +
        '      );\n' +
        '    } else if (this.view === CalendarView.Week && this.daysInWeek) {\n' +
        '      this.viewDateChange.emit(\n' +
        '        addDaysWithExclusions(\n' +
        '          this.dateAdapter,\n' +
        '          this.viewDate,\n' +
        '          this.daysInWeek,\n' +
        '          this.excludeDays\n' +
        '        )\n' +
        '      );\n' +
        '    } else {\n' +
        '      this.viewDateChange.emit(addFn(this.viewDate, 1));\n' +
        '    }\n' +
        '  }\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/common/calendar-previous-view/calendar-previous-view.directive.spec.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 6,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 2,
      fixableWarningCount: 0,
      source: "import { Component } from '@angular/core';\n" +
        "import { TestBed } from '@angular/core/testing';\n" +
        "import { expect } from 'chai';\n" +
        "import { CalendarModule, DateAdapter } from 'angular-calendar';\n" +
        "import { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\n" +
        '\n' +
        '@Component({\n' +
        '  template: `\n' +
        '    <button\n' +
        '      mwlCalendarPreviousView\n' +
        '      [view]="view"\n' +
        '      [(viewDate)]="viewDate"\n' +
        '      [excludeDays]="excludeDays"\n' +
        '      [daysInWeek]="daysInWeek"\n' +
        '    >\n' +
        '      Previous\n' +
        '    </button>\n' +
        '  `,\n' +
        '})\n' +
        'class TestComponent {\n' +
        '  public view: string;\n' +
        '  public viewDate: Date;\n' +
        '  excludeDays: number[] = [];\n' +
        '  daysInWeek: number;\n' +
        '}\n' +
        '\n' +
        "describe('calendarPreviousView directive', () => {\n" +
        '  beforeEach(() => {\n' +
        '    TestBed.configureTestingModule({\n' +
        '      imports: [\n' +
        '        CalendarModule.forRoot({\n' +
        '          provide: DateAdapter,\n' +
        '          useFactory: adapterFactory,\n' +
        '        }),\n' +
        '      ],\n' +
        '      declarations: [TestComponent],\n' +
        '    });\n' +
        '  });\n' +
        '\n' +
        "  it('should decrease the view date by 1 month', () => {\n" +
        '    const fixture = TestBed.createComponent<TestComponent>(TestComponent);\n' +
        "    fixture.componentInstance.view = 'month';\n" +
        "    fixture.componentInstance.viewDate = new Date('2017-02-28');\n" +
        '    fixture.detectChanges();\n' +
        "    fixture.nativeElement.querySelector('button').click();\n" +
        '    fixture.detectChanges();\n' +
        '    expect(fixture.componentInstance.viewDate).to.deep.equal(\n' +
        "      new Date('2017-01-28')\n" +
        '    );\n' +
        '    fixture.destroy();\n' +
        '  });\n' +
        '\n' +
        "  it('should decrease the view date by 1 week', () => {\n" +
        '    const fixture = TestBed.createComponent<TestComponent>(TestComponent);\n' +
        "    fixture.componentInstance.view = 'week';\n" +
        "    fixture.componentInstance.viewDate = new Date('2017-01-28');\n" +
        '    fixture.detectChanges();\n' +
        "    fixture.nativeElement.querySelector('button').click();\n" +
        '    fixture.detectChanges();\n' +
        '    expect(fixture.componentInstance.viewDate).to.deep.equal(\n' +
        "      new Date('2017-01-21')\n" +
        '    );\n' +
        '    fixture.destroy();\n' +
        '  });\n' +
        '\n' +
        "  it('should decrease the view date by 1 day', () => {\n" +
        '    const fixture = TestBed.createComponent<TestComponent>(TestComponent);\n' +
        "    fixture.componentInstance.view = 'day';\n" +
        "    fixture.componentInstance.viewDate = new Date('2017-01-28');\n" +
        '    fixture.detectChanges();\n' +
        "    fixture.nativeElement.querySelector('button').click();\n" +
        '    fixture.detectChanges();\n' +
        '    expect(fixture.componentInstance.viewDate).to.deep.equal(\n' +
        "      new Date('2017-01-27')\n" +
        '    );\n' +
        '    fixture.destroy();\n' +
        '  });\n' +
        '\n' +
        "  it('should decrease the view date by 1 day, skipping weekends', () => {\n" +
        '    const fixture = TestBed.createComponent<TestComponent>(TestComponent);\n' +
        "    fixture.componentInstance.view = 'day';\n" +
        "    fixture.componentInstance.viewDate = new Date('2018-06-18');\n" +
        '    fixture.componentInstance.excludeDays = [0, 6];\n' +
        '    fixture.detectChanges();\n' +
        "    fixture.nativeElement.querySelector('button').click();\n" +
        '    fixture.detectChanges();\n' +
        '    expect(fixture.componentInstance.viewDate).to.deep.equal(\n' +
        "      new Date('2018-06-15')\n" +
        '    );\n' +
        '    fixture.destroy();\n' +
        '  });\n' +
        '\n' +
        "  it('should decrease the view date by 4 days, skipping weekends', () => {\n" +
        '    const fixture = TestBed.createComponent<TestComponent>(TestComponent);\n' +
        "    fixture.componentInstance.view = 'week';\n" +
        "    fixture.componentInstance.viewDate = new Date('2018-08-02');\n" +
        '    fixture.componentInstance.excludeDays = [0, 6];\n' +
        '    fixture.componentInstance.daysInWeek = 4;\n' +
        '    fixture.detectChanges();\n' +
        "    fixture.nativeElement.querySelector('button').click();\n" +
        '    fixture.detectChanges();\n' +
        '    expect(fixture.componentInstance.viewDate).to.deep.equal(\n' +
        "      new Date('2018-07-27')\n" +
        '    );\n' +
        '    fixture.destroy();\n' +
        '  });\n' +
        '});\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/common/calendar-previous-view/calendar-previous-view.directive.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: 'import {\n' +
        '  Directive,\n' +
        '  HostListener,\n' +
        '  Input,\n' +
        '  Output,\n' +
        '  EventEmitter,\n' +
        "} from '@angular/core';\n" +
        "import { DateAdapter } from '../../../date-adapters/date-adapter';\n" +
        "import { CalendarView } from '../calendar-view/calendar-view.enum';\n" +
        "import { addDaysWithExclusions } from '../util/util';\n" +
        '\n' +
        '/**\n' +
        ' * Change the view date to the previous view. For example:\n' +
        ' *\n' +
        ' * ```typescript\n' +
        ' * <button\n' +
        ' *  mwlCalendarPreviousView\n' +
        ' *  [(viewDate)]="viewDate"\n' +
        ' *  [view]="view">\n' +
        ' *  Previous\n' +
        ' * </button>\n' +
        ' * ```\n' +
        ' */\n' +
        '@Directive({\n' +
        "  selector: '[mwlCalendarPreviousView]',\n" +
        '})\n' +
        'export class CalendarPreviousViewDirective {\n' +
        '  /**\n' +
        '   * The current view\n' +
        '   */\n' +
        "  @Input() view: CalendarView | 'month' | 'week' | 'day';\n" +
        '\n' +
        '  /**\n' +
        '   * The current view date\n' +
        '   */\n' +
        '  @Input() viewDate: Date;\n' +
        '\n' +
        '  /**\n' +
        '   * Days to skip when going back by 1 day\n' +
        '   */\n' +
        '  @Input() excludeDays: number[] = [];\n' +
        '\n' +
        '  /**\n' +
        '   * The number of days in a week. If set will subtract this amount of days instead of 1 week\n' +
        '   */\n' +
        '  @Input() daysInWeek: number;\n' +
        '\n' +
        '  /**\n' +
        '   * Called when the view date is changed\n' +
        '   */\n' +
        '  @Output() viewDateChange: EventEmitter<Date> = new EventEmitter();\n' +
        '\n' +
        '  constructor(private dateAdapter: DateAdapter) {}\n' +
        '\n' +
        '  /**\n' +
        '   * @hidden\n' +
        '   */\n' +
        "  @HostListener('click')\n" +
        '  onClick(): void {\n' +
        '    const subFn: any = {\n' +
        '      day: this.dateAdapter.subDays,\n' +
        '      week: this.dateAdapter.subWeeks,\n' +
        '      month: this.dateAdapter.subMonths,\n' +
        '    }[this.view];\n' +
        '\n' +
        '    if (this.view === CalendarView.Day) {\n' +
        '      this.viewDateChange.emit(\n' +
        '        addDaysWithExclusions(\n' +
        '          this.dateAdapter,\n' +
        '          this.viewDate,\n' +
        '          -1,\n' +
        '          this.excludeDays\n' +
        '        )\n' +
        '      );\n' +
        '    } else if (this.view === CalendarView.Week && this.daysInWeek) {\n' +
        '      this.viewDateChange.emit(\n' +
        '        addDaysWithExclusions(\n' +
        '          this.dateAdapter,\n' +
        '          this.viewDate,\n' +
        '          -this.daysInWeek,\n' +
        '          this.excludeDays\n' +
        '        )\n' +
        '      );\n' +
        '    } else {\n' +
        '      this.viewDateChange.emit(subFn(this.viewDate, 1));\n' +
        '    }\n' +
        '  }\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/common/calendar-today/calendar-today.directive.spec.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 4,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 1,
      fixableWarningCount: 0,
      source: "import { Component } from '@angular/core';\n" +
        "import { ComponentFixture, TestBed } from '@angular/core/testing';\n" +
        "import { expect } from 'chai';\n" +
        "import { startOfDay } from 'date-fns';\n" +
        "import { CalendarModule, DateAdapter } from 'angular-calendar';\n" +
        "import { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\n" +
        '\n' +
        '@Component({\n' +
        `  template: '<button mwlCalendarToday [(viewDate)]="viewDate">Next</button>',\n` +
        '})\n' +
        'class TestComponent {\n' +
        '  public viewDate: Date;\n' +
        '}\n' +
        '\n' +
        "describe('mwlCalendarNextView directive', () => {\n" +
        '  beforeEach(() => {\n' +
        '    TestBed.configureTestingModule({\n' +
        '      imports: [\n' +
        '        CalendarModule.forRoot({\n' +
        '          provide: DateAdapter,\n' +
        '          useFactory: adapterFactory,\n' +
        '        }),\n' +
        '      ],\n' +
        '      declarations: [TestComponent],\n' +
        '    });\n' +
        '  });\n' +
        '\n' +
        "  it('should set the view date to the start of today', () => {\n" +
        '    const fixture: ComponentFixture<TestComponent> =\n' +
        '      TestBed.createComponent(TestComponent);\n' +
        "    fixture.componentInstance.viewDate = new Date('2017-01-28');\n" +
        '    fixture.detectChanges();\n' +
        "    fixture.nativeElement.querySelector('button').click();\n" +
        '    fixture.detectChanges();\n' +
        '    expect(fixture.componentInstance.viewDate).to.deep.equal(\n' +
        '      startOfDay(new Date())\n' +
        '    );\n' +
        '    fixture.destroy();\n' +
        '  });\n' +
        '});\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/common/calendar-today/calendar-today.directive.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: 'import {\n' +
        '  Directive,\n' +
        '  HostListener,\n' +
        '  Input,\n' +
        '  Output,\n' +
        '  EventEmitter,\n' +
        "} from '@angular/core';\n" +
        "import { DateAdapter } from '../../../date-adapters/date-adapter';\n" +
        '\n' +
        '/**\n' +
        ' * Change the view date to the current day. For example:\n' +
        ' *\n' +
        ' * ```typescript\n' +
        ' * <button\n' +
        ' *  mwlCalendarToday\n' +
        ' *  [(viewDate)]="viewDate">\n' +
        ' *  Today\n' +
        ' * </button>\n' +
        ' * ```\n' +
        ' */\n' +
        '@Directive({\n' +
        "  selector: '[mwlCalendarToday]',\n" +
        '})\n' +
        'export class CalendarTodayDirective {\n' +
        '  /**\n' +
        '   * The current view date\n' +
        '   */\n' +
        '  @Input() viewDate: Date;\n' +
        '\n' +
        '  /**\n' +
        '   * Called when the view date is changed\n' +
        '   */\n' +
        '  @Output() viewDateChange: EventEmitter<Date> = new EventEmitter();\n' +
        '\n' +
        '  constructor(private dateAdapter: DateAdapter) {}\n' +
        '\n' +
        '  /**\n' +
        '   * @hidden\n' +
        '   */\n' +
        "  @HostListener('click')\n" +
        '  onClick(): void {\n' +
        '    this.viewDateChange.emit(this.dateAdapter.startOfDay(new Date()));\n' +
        '  }\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/common/calendar-tooltip/calendar-tooltip.directive.ts',
      messages: [Array],
      suppressedMessages: [Array],
      errorCount: 2,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: 'import {\n' +
        '  Directive,\n' +
        '  Component,\n' +
        '  HostListener,\n' +
        '  OnDestroy,\n' +
        '  Input,\n' +
        '  ComponentRef,\n' +
        '  Injector,\n' +
        '  ComponentFactoryResolver,\n' +
        '  ViewContainerRef,\n' +
        '  ElementRef,\n' +
        '  ComponentFactory,\n' +
        '  Inject,\n' +
        '  Renderer2,\n' +
        '  TemplateRef,\n' +
        '  OnChanges,\n' +
        '  SimpleChanges,\n' +
        "} from '@angular/core';\n" +
        "import { DOCUMENT } from '@angular/common';\n" +
        "import { PlacementArray, positionElements } from 'positioning';\n" +
        "import { CalendarEvent } from 'calendar-utils';\n" +
        "import { Observable, of, Subject, timer } from 'rxjs';\n" +
        "import { takeUntil } from 'rxjs/operators';\n" +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-calendar-tooltip-window',\n" +
        '  template: `\n' +
        '    <ng-template\n' +
        '      #defaultTemplate\n' +
        '      let-contents="contents"\n' +
        '      let-placement="placement"\n' +
        '      let-event="event"\n' +
        '    >\n' +
        `      <div class="cal-tooltip" [ngClass]="'cal-tooltip-' + placement">\n` +
        '        <div class="cal-tooltip-arrow"></div>\n' +
        '        <div class="cal-tooltip-inner" [innerHtml]="contents"></div>\n' +
        '      </div>\n' +
        '    </ng-template>\n' +
        '    <ng-template\n' +
        '      [ngTemplateOutlet]="customTemplate || defaultTemplate"\n' +
        '      [ngTemplateOutletContext]="{\n' +
        '        contents: contents,\n' +
        '        placement: placement,\n' +
        '        event: event\n' +
        '      }"\n' +
        '    >\n' +
        '    </ng-template>\n' +
        '  `,\n' +
        '})\n' +
        'export class CalendarTooltipWindowComponent {\n' +
        '  @Input() contents: string;\n' +
        '\n' +
        '  @Input() placement: string;\n' +
        '\n' +
        '  @Input() event: CalendarEvent;\n' +
        '\n' +
        '  @Input() customTemplate: TemplateRef<any>;\n' +
        '}\n' +
        '\n' +
        '@Directive({\n' +
        "  selector: '[mwlCalendarTooltip]',\n" +
        '})\n' +
        'export class CalendarTooltipDirective implements OnDestroy, OnChanges {\n' +
        "  @Input('mwlCalendarTooltip') contents: string; // eslint-disable-line  @angular-eslint/no-input-rename\n" +
        '\n' +
        "  @Input('tooltipPlacement') placement: PlacementArray = 'auto'; // eslint-disable-line  @angular-eslint/no-input-rename\n" +
        '\n' +
        "  @Input('tooltipTemplate') customTemplate: TemplateRef<any>; // eslint-disable-line  @angular-eslint/no-input-rename\n" +
        '\n' +
        "  @Input('tooltipEvent') event: CalendarEvent; // eslint-disable-line  @angular-eslint/no-input-rename\n" +
        '\n' +
        "  @Input('tooltipAppendToBody') appendToBody: boolean; // eslint-disable-line  @angular-eslint/no-input-rename\n" +
        '\n' +
        "  @Input('tooltipDelay') delay: number | null = null; // eslint-disable-line  @angular-eslint/no-input-rename\n" +
        '\n' +
        '  private tooltipFactory: ComponentFactory<CalendarTooltipWindowComponent>;\n' +
        '  private tooltipRef: ComponentRef<CalendarTooltipWindowComponent>;\n' +
        '  private cancelTooltipDelay$ = new Subject<void>();\n' +
        '\n' +
        '  constructor(\n' +
        '    private elementRef: ElementRef,\n' +
        '    private injector: Injector,\n' +
        '    private renderer: Renderer2,\n' +
        '    componentFactoryResolver: ComponentFactoryResolver,\n' +
        '    private viewContainerRef: ViewContainerRef,\n' +
        '    @Inject(DOCUMENT) private document // eslint-disable-line\n' +
        '  ) {\n' +
        '    this.tooltipFactory = componentFactoryResolver.resolveComponentFactory(\n' +
        '      CalendarTooltipWindowComponent\n' +
        '    );\n' +
        '  }\n' +
        '\n' +
        '  ngOnChanges(changes: SimpleChanges): void {\n' +
        '    if (\n' +
        '      this.tooltipRef &&\n' +
        '      (changes.contents || changes.customTemplate || changes.event)\n' +
        '    ) {\n' +
        '      this.tooltipRef.instance.contents = this.contents;\n' +
        '      this.tooltipRef.instance.customTemplate = this.customTemplate;\n' +
        '      this.tooltipRef.instance.event = this.event;\n' +
        '      this.tooltipRef.changeDetectorRef.markForCheck();\n' +
        '\n' +
        '      if (!this.contents) {\n' +
        '        this.hide();\n' +
        '      }\n' +
        '    }\n' +
        '  }\n' +
        '\n' +
        '  ngOnDestroy(): void {\n' +
        '    this.hide();\n' +
        '  }\n' +
        '\n' +
        "  @HostListener('mouseenter')\n" +
        '  onMouseOver(): void {\n' +
        '    const delay$: Observable<any> =\n' +
        "      this.delay === null ? of('now') : timer(this.delay);\n" +
        '    delay$.pipe(takeUntil(this.cancelTooltipDelay$)).subscribe(() => {\n' +
        '      this.show();\n' +
        '    });\n' +
        '  }\n' +
        '\n' +
        "  @HostListener('mouseleave')\n" +
        '  onMouseOut(): void {\n' +
        '    this.hide();\n' +
        '  }\n' +
        '\n' +
        '  private show(): void {\n' +
        '    if (!this.tooltipRef && this.contents) {\n' +
        '      this.tooltipRef = this.viewContainerRef.createComponent(\n' +
        '        this.tooltipFactory,\n' +
        '        0,\n' +
        '        this.injector,\n' +
        '        []\n' +
        '      );\n' +
        '      this.tooltipRef.instance.contents = this.contents;\n' +
        '      this.tooltipRef.instance.customTemplate = this.customTemplate;\n' +
        '      this.tooltipRef.instance.event = this.event;\n' +
        '      if (this.appendToBody) {\n' +
        '        this.document.body.appendChild(this.tooltipRef.location.nativeElement);\n' +
        '      }\n' +
        '      requestAnimationFrame(() => {\n' +
        '        this.positionTooltip();\n' +
        '      });\n' +
        '    }\n' +
        '  }\n' +
        '\n' +
        '  private hide(): void {\n' +
        '    if (this.tooltipRef) {\n' +
        '      this.viewContainerRef.remove(\n' +
        '        this.viewContainerRef.indexOf(this.tooltipRef.hostView)\n' +
        '      );\n' +
        '      this.tooltipRef = null;\n' +
        '    }\n' +
        '    this.cancelTooltipDelay$.next();\n' +
        '  }\n' +
        '\n' +
        '  private positionTooltip(previousPositions: string[] = []): void {\n' +
        '    if (this.tooltipRef) {\n' +
        '      this.tooltipRef.changeDetectorRef.detectChanges();\n' +
        '      this.tooltipRef.instance.placement = positionElements(\n' +
        '        this.elementRef.nativeElement,\n' +
        '        this.tooltipRef.location.nativeElement.children[0],\n' +
        '        this.placement,\n' +
        '        this.appendToBody\n' +
        '      );\n' +
        "      // keep re-positioning the tooltip until the arrow position doesn't make a difference\n" +
        '      if (\n' +
        '        previousPositions.indexOf(this.tooltipRef.instance.placement) === -1\n' +
        '      ) {\n' +
        '        this.positionTooltip([\n' +
        '          ...previousPositions,\n' +
        '          this.tooltipRef.instance.placement,\n' +
        '        ]);\n' +
        '      }\n' +
        '    }\n' +
        '  }\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/common/calendar-utils/calendar-utils.provider.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: "import { Injectable } from '@angular/core';\n" +
        'import {\n' +
        '  GetMonthViewArgs,\n' +
        '  MonthView,\n' +
        '  GetWeekViewHeaderArgs,\n' +
        '  WeekDay,\n' +
        '  GetWeekViewArgs,\n' +
        '  WeekView,\n' +
        '  getMonthView,\n' +
        '  getWeekViewHeader,\n' +
        '  getWeekView,\n' +
        "} from 'calendar-utils';\n" +
        "import { DateAdapter } from '../../../date-adapters/date-adapter';\n" +
        '\n' +
        '@Injectable()\n' +
        'export class CalendarUtils {\n' +
        '  constructor(protected dateAdapter: DateAdapter) {}\n' +
        '\n' +
        '  getMonthView(args: GetMonthViewArgs): MonthView {\n' +
        '    return getMonthView(this.dateAdapter, args);\n' +
        '  }\n' +
        '\n' +
        '  getWeekViewHeader(args: GetWeekViewHeaderArgs): WeekDay[] {\n' +
        '    return getWeekViewHeader(this.dateAdapter, args);\n' +
        '  }\n' +
        '\n' +
        '  getWeekView(args: GetWeekViewArgs): WeekView {\n' +
        '    return getWeekView(this.dateAdapter, args);\n' +
        '  }\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/day/calendar-day-view/calendar-day-view.component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 6,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: 'import {\n' +
        '  Component,\n' +
        '  Input,\n' +
        '  Output,\n' +
        '  EventEmitter,\n' +
        '  TemplateRef,\n' +
        "} from '@angular/core';\n" +
        "import { CalendarEvent } from 'calendar-utils';\n" +
        "import { Subject } from 'rxjs';\n" +
        "import { CalendarEventTimesChangedEvent } from '../../common/calendar-event-times-changed-event/calendar-event-times-changed-event.interface';\n" +
        "import { PlacementArray } from 'positioning';\n" +
        "import { CalendarWeekViewBeforeRenderEvent } from '../../week/calendar-week.module';\n" +
        "import { ResizeCursors } from 'angular-resizable-element';\n" +
        '\n' +
        'export type CalendarDayViewBeforeRenderEvent =\n' +
        '  CalendarWeekViewBeforeRenderEvent;\n' +
        '\n' +
        '/**\n' +
        ' * Shows all events on a given day. Example usage:\n' +
        ' *\n' +
        ' * ```typescript\n' +
        ' * <mwl-calendar-day-view\n' +
        ' *  [viewDate]="viewDate"\n' +
        ' *  [events]="events">\n' +
        ' * </mwl-calendar-day-view>\n' +
        ' * ```\n' +
        ' */\n' +
        '@Component({\n' +
        "  selector: 'mwl-calendar-day-view',\n" +
        '  template: `\n' +
        '    <mwl-calendar-week-view\n' +
        '      class="cal-day-view"\n' +
        '      [daysInWeek]="1"\n' +
        '      [viewDate]="viewDate"\n' +
        '      [events]="events"\n' +
        '      [hourSegments]="hourSegments"\n' +
        '      [hourDuration]="hourDuration"\n' +
        '      [hourSegmentHeight]="hourSegmentHeight"\n' +
        '      [minimumEventHeight]="minimumEventHeight"\n' +
        '      [dayStartHour]="dayStartHour"\n' +
        '      [dayStartMinute]="dayStartMinute"\n' +
        '      [dayEndHour]="dayEndHour"\n' +
        '      [dayEndMinute]="dayEndMinute"\n' +
        '      [refresh]="refresh"\n' +
        '      [locale]="locale"\n' +
        '      [eventSnapSize]="eventSnapSize"\n' +
        '      [tooltipPlacement]="tooltipPlacement"\n' +
        '      [tooltipTemplate]="tooltipTemplate"\n' +
        '      [tooltipAppendToBody]="tooltipAppendToBody"\n' +
        '      [tooltipDelay]="tooltipDelay"\n' +
        '      [resizeCursors]="resizeCursors"\n' +
        '      [hourSegmentTemplate]="hourSegmentTemplate"\n' +
        '      [eventTemplate]="eventTemplate"\n' +
        '      [eventTitleTemplate]="eventTitleTemplate"\n' +
        '      [eventActionsTemplate]="eventActionsTemplate"\n' +
        '      [snapDraggedEvents]="snapDraggedEvents"\n' +
        '      [allDayEventsLabelTemplate]="allDayEventsLabelTemplate"\n' +
        '      [currentTimeMarkerTemplate]="currentTimeMarkerTemplate"\n' +
        '      [validateEventTimesChanged]="validateEventTimesChanged"\n' +
        '      (eventClicked)="eventClicked.emit($event)"\n' +
        '      (hourSegmentClicked)="hourSegmentClicked.emit($event)"\n' +
        '      (eventTimesChanged)="eventTimesChanged.emit($event)"\n' +
        '      (beforeViewRender)="beforeViewRender.emit($event)"\n' +
        '    ></mwl-calendar-week-view>\n' +
        '  `,\n' +
        '})\n' +
        'export class CalendarDayViewComponent {\n' +
        '  /**\n' +
        '   * The current view date\n' +
        '   */\n' +
        '  @Input() viewDate: Date;\n' +
        '\n' +
        '  /**\n' +
        '   * An array of events to display on view\n' +
        '   * The schema is available here: https://github.com/mattlewis92/calendar-utils/blob/c51689985f59a271940e30bc4e2c4e1fee3fcb5c/src/calendarUtils.ts#L49-L63\n' +
        '   */\n' +
        '  @Input() events: CalendarEvent[] = [];\n' +
        '\n' +
        '  /**\n' +
        '   * The number of segments in an hour. Must divide equally into 60.\n' +
        '   */\n' +
        '  @Input() hourSegments: number = 2;\n' +
        '\n' +
        '  /**\n' +
        '   * The height in pixels of each hour segment\n' +
        '   */\n' +
        '  @Input() hourSegmentHeight: number = 30;\n' +
        '\n' +
        '  /**\n' +
        '   * The duration of each segment group in minutes\n' +
        '   */\n' +
        '  @Input() hourDuration: number;\n' +
        '\n' +
        '  /**\n' +
        '   * The minimum height in pixels of each event\n' +
        '   */\n' +
        '  @Input() minimumEventHeight: number = 30;\n' +
        '\n' +
        '  /**\n' +
        '   * The day start hours in 24 hour time. Must be 0-23\n' +
        '   */\n' +
        '  @Input() dayStartHour: number = 0;\n' +
        '\n' +
        '  /**\n' +
        '   * The day start minutes. Must be 0-59\n' +
        '   */\n' +
        '  @Input() dayStartMinute: number = 0;\n' +
        '\n' +
        '  /**\n' +
        '   * The day end hours in 24 hour time. Must be 0-23\n' +
        '   */\n' +
        '  @Input() dayEndHour: number = 23;\n' +
        '\n' +
        '  /**\n' +
        '   * The day end minutes. Must be 0-59\n' +
        '   */\n' +
        '  @Input() dayEndMinute: number = 59;\n' +
        '\n' +
        '  /**\n' +
        '   * An observable that when emitted on will re-render the current view\n' +
        '   */\n' +
        '  @Input() refresh: Subject<any>;\n' +
        '\n' +
        '  /**\n' +
        '   * The locale used to format dates\n' +
        '   */\n' +
        '  @Input() locale: string;\n' +
        '\n' +
        '  /**\n' +
        '   * The grid size to snap resizing and dragging of events to\n' +
        '   */\n' +
        '  @Input() eventSnapSize: number;\n' +
        '\n' +
        '  /**\n' +
        '   * The placement of the event tooltip\n' +
        '   */\n' +
        "  @Input() tooltipPlacement: PlacementArray = 'auto';\n" +
        '\n' +
        '  /**\n' +
        '   * A custom template to use for the event tooltips\n' +
        '   */\n' +
        '  @Input() tooltipTemplate: TemplateRef<any>;\n' +
        '\n' +
        '  /**\n' +
        '   * Whether to append tooltips to the body or next to the trigger element\n' +
        '   */\n' +
        '  @Input() tooltipAppendToBody: boolean = true;\n' +
        '\n' +
        '  /**\n' +
        '   * The delay in milliseconds before the tooltip should be displayed. If not provided the tooltip\n' +
        '   * will be displayed immediately.\n' +
        '   */\n' +
        '  @Input() tooltipDelay: number | null = null;\n' +
        '\n' +
        '  /**\n' +
        '   * A custom template to use to replace the hour segment\n' +
        '   */\n' +
        '  @Input() hourSegmentTemplate: TemplateRef<any>;\n' +
        '\n' +
        '  /**\n' +
        '   * A custom template to use for day view events\n' +
        '   */\n' +
        '  @Input() eventTemplate: TemplateRef<any>;\n' +
        '\n' +
        '  /**\n' +
        '   * A custom template to use for event titles\n' +
        '   */\n' +
        '  @Input() eventTitleTemplate: TemplateRef<any>;\n' +
        '\n' +
        '  /**\n' +
        '   * A custom template to use for event actions\n' +
        '   */\n' +
        '  @Input() eventActionsTemplate: TemplateRef<any>;\n' +
        '\n' +
        '  /**\n' +
        '   * Whether to snap events to a grid when dragging\n' +
        '   */\n' +
        '  @Input() snapDraggedEvents: boolean = true;\n' +
        '\n' +
        '  /**\n' +
        '   * A custom template to use for the all day events label text\n' +
        '   */\n' +
        '  @Input() allDayEventsLabelTemplate: TemplateRef<any>;\n' +
        '\n' +
        '  /**\n' +
        '   * A custom template to use for the current time marker\n' +
        '   */\n' +
        '  @Input() currentTimeMarkerTemplate: TemplateRef<any>;\n' +
        '\n' +
        '  /**\n' +
        '   * Allow you to customise where events can be dragged and resized to.\n' +
        '   * Return true to allow dragging and resizing to the new location, or false to prevent it\n' +
        '   */\n' +
        '  @Input() validateEventTimesChanged: (\n' +
        '    event: CalendarEventTimesChangedEvent\n' +
        '  ) => boolean;\n' +
        '\n' +
        '  /**\n' +
        '   * Customise the document cursor when dragging to resize an event\n' +
        '   */\n' +
        '  @Input() resizeCursors: Partial<\n' +
        "    Pick<ResizeCursors, 'leftOrRight' | 'topOrBottom'>\n" +
        '  >;\n' +
        '\n' +
        '  /**\n' +
        '   * Called when an event title is clicked\n' +
        '   */\n' +
        '  @Output() eventClicked = new EventEmitter<{\n' +
        '    event: CalendarEvent;\n' +
        '    sourceEvent: MouseEvent | KeyboardEvent;\n' +
        '  }>();\n' +
        '\n' +
        '  /**\n' +
        '   * Called when an hour segment is clicked\n' +
        '   */\n' +
        '  @Output() hourSegmentClicked = new EventEmitter<{\n' +
        '    date: Date;\n' +
        '    sourceEvent: MouseEvent;\n' +
        '  }>();\n' +
        '\n' +
        '  /**\n' +
        '   * Called when an event is resized or dragged and dropped\n' +
        '   */\n' +
        '  @Output() eventTimesChanged =\n' +
        '    new EventEmitter<CalendarEventTimesChangedEvent>();\n' +
        '\n' +
        '  /**\n' +
        '   * An output that will be called before the view is rendered for the current day.\n' +
        '   * If you add the `cssClass` property to an hour grid segment it will add that class to the hour segment in the template\n' +
        '   */\n' +
        '  @Output() beforeViewRender =\n' +
        '    new EventEmitter<CalendarDayViewBeforeRenderEvent>();\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/day/calendar-day.module.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 1,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 1,
      fixableWarningCount: 0,
      source: "import { NgModule } from '@angular/core';\n" +
        "import { CommonModule } from '@angular/common';\n" +
        "import { CalendarDayViewComponent } from './calendar-day-view/calendar-day-view.component';\n" +
        "import { CalendarCommonModule } from '../common/calendar-common.module';\n" +
        "import { CalendarWeekModule } from '../week/calendar-week.module';\n" +
        '\n' +
        'export {\n' +
        '  CalendarDayViewComponent,\n' +
        '  CalendarDayViewBeforeRenderEvent,\n' +
        "} from './calendar-day-view/calendar-day-view.component';\n" +
        '\n' +
        '@NgModule({\n' +
        '  imports: [CommonModule, CalendarCommonModule, CalendarWeekModule],\n' +
        '  declarations: [CalendarDayViewComponent],\n' +
        '  exports: [CalendarDayViewComponent],\n' +
        '})\n' +
        'export class CalendarDayModule {}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/month/calendar-month-view/calendar-month-cell/calendar-month-cell.component.ts',
      messages: [Array],
      suppressedMessages: [Array],
      errorCount: 10,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 4,
      fixableWarningCount: 0,
      source: 'import {\n' +
        '  Component,\n' +
        '  Input,\n' +
        '  Output,\n' +
        '  EventEmitter,\n' +
        '  TemplateRef,\n' +
        "} from '@angular/core';\n" +
        "import { MonthViewDay, CalendarEvent } from 'calendar-utils';\n" +
        "import { isWithinThreshold, trackByEventId } from '../../../common/util/util';\n" +
        "import { PlacementArray } from 'positioning';\n" +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-calendar-month-cell',\n" +
        '  template: `\n' +
        '    <ng-template\n' +
        '      #defaultTemplate\n' +
        '      let-day="day"\n' +
        '      let-openDay="openDay"\n' +
        '      let-locale="locale"\n' +
        '      let-tooltipPlacement="tooltipPlacement"\n' +
        '      let-highlightDay="highlightDay"\n' +
        '      let-unhighlightDay="unhighlightDay"\n' +
        '      let-eventClicked="eventClicked"\n' +
        '      let-tooltipTemplate="tooltipTemplate"\n' +
        '      let-tooltipAppendToBody="tooltipAppendToBody"\n' +
        '      let-tooltipDelay="tooltipDelay"\n' +
        '      let-trackByEventId="trackByEventId"\n' +
        '      let-validateDrag="validateDrag"\n' +
        '    >\n' +
        '      <div\n' +
        '        class="cal-cell-top"\n' +
        '        [attr.aria-label]="\n' +
        "          { day: day, locale: locale } | calendarA11y : 'monthCell'\n" +
        '        "\n' +
        '      >\n' +
        '        <span aria-hidden="true">\n' +
        '          <span class="cal-day-badge" *ngIf="day.badgeTotal > 0">{{\n' +
        '            day.badgeTotal\n' +
        '          }}</span>\n' +
        '          <span class="cal-day-number">{{\n' +
        "            day.date | calendarDate : 'monthViewDayNumber' : locale\n" +
        '          }}</span>\n' +
        '        </span>\n' +
        '      </div>\n' +
        '      <div class="cal-events" *ngIf="day.events.length > 0">\n' +
        '        <div\n' +
        '          class="cal-event"\n' +
        '          *ngFor="let event of day.events; trackBy: trackByEventId"\n' +
        '          [ngStyle]="{ backgroundColor: event.color?.primary }"\n' +
        '          [ngClass]="event?.cssClass"\n' +
        '          (mouseenter)="highlightDay.emit({ event: event })"\n' +
        '          (mouseleave)="unhighlightDay.emit({ event: event })"\n' +
        '          [mwlCalendarTooltip]="\n' +
        "            event.title | calendarEventTitle : 'monthTooltip' : event\n" +
        '          "\n' +
        '          [tooltipPlacement]="tooltipPlacement"\n' +
        '          [tooltipEvent]="event"\n' +
        '          [tooltipTemplate]="tooltipTemplate"\n' +
        '          [tooltipAppendToBody]="tooltipAppendToBody"\n' +
        '          [tooltipDelay]="tooltipDelay"\n' +
        '          mwlDraggable\n' +
        '          [class.cal-draggable]="event.draggable"\n' +
        '          dragActiveClass="cal-drag-active"\n' +
        '          [dropData]="{ event: event, draggedFrom: day }"\n' +
        '          [dragAxis]="{ x: event.draggable, y: event.draggable }"\n' +
        '          [validateDrag]="validateDrag"\n' +
        '          [touchStartLongPress]="{ delay: 300, delta: 30 }"\n' +
        '          (mwlClick)="eventClicked.emit({ event: event, sourceEvent: $event })"\n' +
        `          [attr.aria-hidden]="{} | calendarA11y : 'hideMonthCellEvents'"\n` +
        '        ></div>\n' +
        '      </div>\n' +
        '    </ng-template>\n' +
        '    <ng-template\n' +
        '      [ngTemplateOutlet]="customTemplate || defaultTemplate"\n' +
        '      [ngTemplateOutletContext]="{\n' +
        '        day: day,\n' +
        '        openDay: openDay,\n' +
        '        locale: locale,\n' +
        '        tooltipPlacement: tooltipPlacement,\n' +
        '        highlightDay: highlightDay,\n' +
        '        unhighlightDay: unhighlightDay,\n' +
        '        eventClicked: eventClicked,\n' +
        '        tooltipTemplate: tooltipTemplate,\n' +
        '        tooltipAppendToBody: tooltipAppendToBody,\n' +
        '        tooltipDelay: tooltipDelay,\n' +
        '        trackByEventId: trackByEventId,\n' +
        '        validateDrag: validateDrag\n' +
        '      }"\n' +
        '    >\n' +
        '    </ng-template>\n' +
        '  `,\n' +
        '  // eslint-disable-next-line @angular-eslint/no-host-metadata-property\n' +
        '  host: {\n' +
        "    class: 'cal-cell cal-day-cell',\n" +
        "    '[class.cal-past]': 'day.isPast',\n" +
        "    '[class.cal-today]': 'day.isToday',\n" +
        "    '[class.cal-future]': 'day.isFuture',\n" +
        "    '[class.cal-weekend]': 'day.isWeekend',\n" +
        "    '[class.cal-in-month]': 'day.inMonth',\n" +
        "    '[class.cal-out-month]': '!day.inMonth',\n" +
        "    '[class.cal-has-events]': 'day.events.length > 0',\n" +
        "    '[class.cal-open]': 'day === openDay',\n" +
        "    '[class.cal-event-highlight]': '!!day.backgroundColor',\n" +
        '  },\n' +
        '})\n' +
        'export class CalendarMonthCellComponent {\n' +
        '  @Input() day: MonthViewDay;\n' +
        '\n' +
        '  @Input() openDay: MonthViewDay;\n' +
        '\n' +
        '  @Input() locale: string;\n' +
        '\n' +
        '  @Input() tooltipPlacement: PlacementArray;\n' +
        '\n' +
        '  @Input() tooltipAppendToBody: boolean;\n' +
        '\n' +
        '  @Input() customTemplate: TemplateRef<any>;\n' +
        '\n' +
        '  @Input() tooltipTemplate: TemplateRef<any>;\n' +
        '\n' +
        '  @Input() tooltipDelay: number | null;\n' +
        '\n' +
        '  @Output() highlightDay: EventEmitter<any> = new EventEmitter();\n' +
        '\n' +
        '  @Output() unhighlightDay: EventEmitter<any> = new EventEmitter();\n' +
        '\n' +
        '  @Output() eventClicked = new EventEmitter<{\n' +
        '    event: CalendarEvent;\n' +
        '    sourceEvent: MouseEvent;\n' +
        '  }>();\n' +
        '\n' +
        '  trackByEventId = trackByEventId;\n' +
        '\n' +
        '  validateDrag = isWithinThreshold;\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/month/calendar-month-view/calendar-month-view-header/calendar-month-view-header.component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 5,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 1,
      fixableWarningCount: 0,
      source: 'import {\n' +
        '  Component,\n' +
        '  Input,\n' +
        '  TemplateRef,\n' +
        '  EventEmitter,\n' +
        '  Output,\n' +
        "} from '@angular/core';\n" +
        "import { WeekDay } from 'calendar-utils';\n" +
        "import { trackByWeekDayHeaderDate } from '../../../common/util/util';\n" +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-calendar-month-view-header',\n" +
        '  template: `\n' +
        '    <ng-template\n' +
        '      #defaultTemplate\n' +
        '      let-days="days"\n' +
        '      let-locale="locale"\n' +
        '      let-trackByWeekDayHeaderDate="trackByWeekDayHeaderDate"\n' +
        '    >\n' +
        '      <div class="cal-cell-row cal-header" role="row">\n' +
        '        <div\n' +
        '          class="cal-cell"\n' +
        '          *ngFor="let day of days; trackBy: trackByWeekDayHeaderDate"\n' +
        '          [class.cal-past]="day.isPast"\n' +
        '          [class.cal-today]="day.isToday"\n' +
        '          [class.cal-future]="day.isFuture"\n' +
        '          [class.cal-weekend]="day.isWeekend"\n' +
        '          (click)="\n' +
        '            columnHeaderClicked.emit({\n' +
        '              isoDayNumber: day.day,\n' +
        '              sourceEvent: $event\n' +
        '            })\n' +
        '          "\n' +
        '          [ngClass]="day.cssClass"\n' +
        '          tabindex="0"\n' +
        '          role="columnheader"\n' +
        '        >\n' +
        "          {{ day.date | calendarDate : 'monthViewColumnHeader' : locale }}\n" +
        '        </div>\n' +
        '      </div>\n' +
        '    </ng-template>\n' +
        '    <ng-template\n' +
        '      [ngTemplateOutlet]="customTemplate || defaultTemplate"\n' +
        '      [ngTemplateOutletContext]="{\n' +
        '        days: days,\n' +
        '        locale: locale,\n' +
        '        trackByWeekDayHeaderDate: trackByWeekDayHeaderDate\n' +
        '      }"\n' +
        '    >\n' +
        '    </ng-template>\n' +
        '  `,\n' +
        '})\n' +
        'export class CalendarMonthViewHeaderComponent {\n' +
        '  @Input() days: WeekDay[];\n' +
        '\n' +
        '  @Input() locale: string;\n' +
        '\n' +
        '  @Input() customTemplate: TemplateRef<any>;\n' +
        '\n' +
        '  @Output() columnHeaderClicked = new EventEmitter<{\n' +
        '    isoDayNumber: number;\n' +
        '    sourceEvent: MouseEvent;\n' +
        '  }>();\n' +
        '\n' +
        '  trackByWeekDayHeaderDate = trackByWeekDayHeaderDate;\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/month/calendar-month-view/calendar-month-view.component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 13,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 5,
      fixableWarningCount: 0,
      source: 'import {\n' +
        '  Component,\n' +
        '  OnChanges,\n' +
        '  Input,\n' +
        '  Output,\n' +
        '  EventEmitter,\n' +
        '  ChangeDetectorRef,\n' +
        '  OnInit,\n' +
        '  OnDestroy,\n' +
        '  LOCALE_ID,\n' +
        '  Inject,\n' +
        '  TemplateRef,\n' +
        "} from '@angular/core';\n" +
        'import {\n' +
        '  CalendarEvent,\n' +
        '  WeekDay,\n' +
        '  MonthView,\n' +
        '  MonthViewDay,\n' +
        '  ViewPeriod,\n' +
        "} from 'calendar-utils';\n" +
        "import { Subject, Subscription } from 'rxjs';\n" +
        'import {\n' +
        '  CalendarEventTimesChangedEvent,\n' +
        '  CalendarEventTimesChangedEventType,\n' +
        "} from '../../common/calendar-event-times-changed-event/calendar-event-times-changed-event.interface';\n" +
        "import { CalendarUtils } from '../../common/calendar-utils/calendar-utils.provider';\n" +
        "import { validateEvents } from '../../common/util/util';\n" +
        "import { DateAdapter } from '../../../date-adapters/date-adapter';\n" +
        "import { PlacementArray } from 'positioning';\n" +
        '\n' +
        'export interface CalendarMonthViewBeforeRenderEvent {\n' +
        '  header: WeekDay[];\n' +
        '  body: MonthViewDay[];\n' +
        '  period: ViewPeriod;\n' +
        '}\n' +
        '\n' +
        'export interface CalendarMonthViewEventTimesChangedEvent<\n' +
        '  EventMetaType = any,\n' +
        '  DayMetaType = any\n' +
        '> extends CalendarEventTimesChangedEvent<EventMetaType> {\n' +
        '  day: MonthViewDay<DayMetaType>;\n' +
        '}\n' +
        '\n' +
        '/**\n' +
        ' * Shows all events on a given month. Example usage:\n' +
        ' *\n' +
        ' * ```typescript\n' +
        ' * <mwl-calendar-month-view\n' +
        ' *  [viewDate]="viewDate"\n' +
        ' *  [events]="events">\n' +
        ' * </mwl-calendar-month-view>\n' +
        ' * ```\n' +
        ' */\n' +
        '@Component({\n' +
        "  selector: 'mwl-calendar-month-view',\n" +
        '  template: `\n' +
        '    <div class="cal-month-view" role="grid">\n' +
        '      <mwl-calendar-month-view-header\n' +
        '        [days]="columnHeaders"\n' +
        '        [locale]="locale"\n' +
        '        (columnHeaderClicked)="columnHeaderClicked.emit($event)"\n' +
        '        [customTemplate]="headerTemplate"\n' +
        '      >\n' +
        '      </mwl-calendar-month-view-header>\n' +
        '      <div class="cal-days">\n' +
        '        <div\n' +
        '          *ngFor="let rowIndex of view.rowOffsets; trackBy: trackByRowOffset"\n' +
        '        >\n' +
        '          <div role="row" class="cal-cell-row">\n' +
        '            <mwl-calendar-month-cell\n' +
        '              role="gridcell"\n' +
        '              *ngFor="\n' +
        '                let day of view.days\n' +
        '                  | slice : rowIndex : rowIndex + view.totalDaysVisibleInWeek;\n' +
        '                trackBy: trackByDate\n' +
        '              "\n' +
        '              [ngClass]="day?.cssClass"\n' +
        '              [day]="day"\n' +
        '              [openDay]="openDay"\n' +
        '              [locale]="locale"\n' +
        '              [tooltipPlacement]="tooltipPlacement"\n' +
        '              [tooltipAppendToBody]="tooltipAppendToBody"\n' +
        '              [tooltipTemplate]="tooltipTemplate"\n' +
        '              [tooltipDelay]="tooltipDelay"\n' +
        '              [customTemplate]="cellTemplate"\n' +
        '              [ngStyle]="{ backgroundColor: day.backgroundColor }"\n' +
        '              (mwlClick)="dayClicked.emit({ day: day, sourceEvent: $event })"\n' +
        '              [clickListenerDisabled]="dayClicked.observers.length === 0"\n' +
        '              (mwlKeydownEnter)="\n' +
        '                dayClicked.emit({ day: day, sourceEvent: $event })\n' +
        '              "\n' +
        '              (highlightDay)="toggleDayHighlight($event.event, true)"\n' +
        '              (unhighlightDay)="toggleDayHighlight($event.event, false)"\n' +
        '              mwlDroppable\n' +
        '              dragOverClass="cal-drag-over"\n' +
        '              (drop)="\n' +
        '                eventDropped(\n' +
        '                  day,\n' +
        '                  $event.dropData.event,\n' +
        '                  $event.dropData.draggedFrom\n' +
        '                )\n' +
        '              "\n' +
        '              (eventClicked)="\n' +
        '                eventClicked.emit({\n' +
        '                  event: $event.event,\n' +
        '                  sourceEvent: $event.sourceEvent\n' +
        '                })\n' +
        '              "\n' +
        `              [attr.tabindex]="{} | calendarA11y : 'monthCellTabIndex'"\n` +
        '            >\n' +
        '            </mwl-calendar-month-cell>\n' +
        '          </div>\n' +
        '          <mwl-calendar-open-day-events\n' +
        '            [locale]="locale"\n' +
        '            [isOpen]="openRowIndex === rowIndex"\n' +
        '            [events]="openDay?.events"\n' +
        '            [date]="openDay?.date"\n' +
        '            [customTemplate]="openDayEventsTemplate"\n' +
        '            [eventTitleTemplate]="eventTitleTemplate"\n' +
        '            [eventActionsTemplate]="eventActionsTemplate"\n' +
        '            (eventClicked)="\n' +
        '              eventClicked.emit({\n' +
        '                event: $event.event,\n' +
        '                sourceEvent: $event.sourceEvent\n' +
        '              })\n' +
        '            "\n' +
        '            mwlDroppable\n' +
        '            dragOverClass="cal-drag-over"\n' +
        '            (drop)="\n' +
        '              eventDropped(\n' +
        '                openDay,\n' +
        '                $event.dropData.event,\n' +
        '                $event.dropData.draggedFrom\n' +
        '              )\n' +
        '            "\n' +
        '          >\n' +
        '          </mwl-calendar-open-day-events>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  `,\n' +
        '})\n' +
        'export class CalendarMonthViewComponent\n' +
        '  implements OnChanges, OnInit, OnDestroy\n' +
        '{\n' +
        '  /**\n' +
        '   * The current view date\n' +
        '   */\n' +
        '  @Input() viewDate: Date;\n' +
        '\n' +
        '  /**\n' +
        '   * An array of events to display on view.\n' +
        '   * The schema is available here: https://github.com/mattlewis92/calendar-utils/blob/c51689985f59a271940e30bc4e2c4e1fee3fcb5c/src/calendarUtils.ts#L49-L63\n' +
        '   */\n' +
        '  @Input() events: CalendarEvent[] = [];\n' +
        '\n' +
        '  /**\n' +
        '   * An array of day indexes (0 = sunday, 1 = monday etc) that will be hidden on the view\n' +
        '   */\n' +
        '  @Input() excludeDays: number[] = [];\n' +
        '\n' +
        '  /**\n' +
        '   * Whether the events list for the day of the `viewDate` option is visible or not\n' +
        '   */\n' +
        '  @Input() activeDayIsOpen: boolean = false;\n' +
        '\n' +
        '  /**\n' +
        '   * If set will be used to determine the day that should be open. If not set, the `viewDate` is used\n' +
        '   */\n' +
        '  @Input() activeDay: Date;\n' +
        '\n' +
        '  /**\n' +
        '   * An observable that when emitted on will re-render the current view\n' +
        '   */\n' +
        '  @Input() refresh: Subject<any>;\n' +
        '\n' +
        '  /**\n' +
        '   * The locale used to format dates\n' +
        '   */\n' +
        '  @Input() locale: string;\n' +
        '\n' +
        '  /**\n' +
        '   * The placement of the event tooltip\n' +
        '   */\n' +
        "  @Input() tooltipPlacement: PlacementArray = 'auto';\n" +
        '\n' +
        '  /**\n' +
        '   * A custom template to use for the event tooltips\n' +
        '   */\n' +
        '  @Input() tooltipTemplate: TemplateRef<any>;\n' +
        '\n' +
        '  /**\n' +
        '   * Whether to append tooltips to the body or next to the trigger element\n' +
        '   */\n' +
        '  @Input() tooltipAppendToBody: boolean = true;\n' +
        '\n' +
        '  /**\n' +
        '   * The delay in milliseconds before the tooltip should be displayed. If not provided the tooltip\n' +
        '   * will be displayed immediately.\n' +
        '   */\n' +
        '  @Input() tooltipDelay: number | null = null;\n' +
        '\n' +
        '  /**\n' +
        '   * The start number of the week.\n' +
        "   * If using the moment date adapter this option won't do anything and you'll need to set it globally like so:\n" +
        '   * ```\n' +
        "   * moment.updateLocale('en', {\n" +
        '   *   week: {\n' +
        '   *     dow: 1, // set start of week to monday instead\n' +
        '   *     doy: 0,\n' +
        '   *   },\n' +
        '   * });\n' +
        '   * ```\n' +
        '   */\n' +
        '  @Input() weekStartsOn: number;\n' +
        '\n' +
        '  /**\n' +
        '   * A custom template to use to replace the header\n' +
        '   */\n' +
        '  @Input() headerTemplate: TemplateRef<any>;\n' +
        '\n' +
        '  /**\n' +
        '   * A custom template to use to replace the day cell\n' +
        '   */\n' +
        '  @Input() cellTemplate: TemplateRef<any>;\n' +
        '\n' +
        '  /**\n' +
        '   * A custom template to use for the slide down box of events for the active day\n' +
        '   */\n' +
        '  @Input() openDayEventsTemplate: TemplateRef<any>;\n' +
        '\n' +
        '  /**\n' +
        '   * A custom template to use for event titles\n' +
        '   */\n' +
        '  @Input() eventTitleTemplate: TemplateRef<any>;\n' +
        '\n' +
        '  /**\n' +
        '   * A custom template to use for event actions\n' +
        '   */\n' +
        '  @Input() eventActionsTemplate: TemplateRef<any>;\n' +
        '\n' +
        '  /**\n' +
        '   * An array of day indexes (0 = sunday, 1 = monday etc) that indicate which days are weekends\n' +
        '   */\n' +
        '  @Input() weekendDays: number[];\n' +
        '\n' +
        '  /**\n' +
        '   * An output that will be called before the view is rendered for the current month.\n' +
        '   * If you add the `cssClass` property to a day in the body it will add that class to the cell element in the template\n' +
        '   */\n' +
        '  @Output() beforeViewRender =\n' +
        '    new EventEmitter<CalendarMonthViewBeforeRenderEvent>();\n' +
        '\n' +
        '  /**\n' +
        '   * Called when the day cell is clicked\n' +
        '   */\n' +
        '  @Output() dayClicked = new EventEmitter<{\n' +
        '    day: MonthViewDay;\n' +
        '    sourceEvent: MouseEvent | KeyboardEvent;\n' +
        '  }>();\n' +
        '\n' +
        '  /**\n' +
        '   * Called when the event title is clicked\n' +
        '   */\n' +
        '  @Output() eventClicked = new EventEmitter<{\n' +
        '    event: CalendarEvent;\n' +
        '    sourceEvent: MouseEvent | KeyboardEvent;\n' +
        '  }>();\n' +
        '\n' +
        '  /**\n' +
        '   * Called when a header week day is clicked. Returns ISO day number.\n' +
        '   */\n' +
        '  @Output() columnHeaderClicked = new EventEmitter<{\n' +
        '    isoDayNumber: number;\n' +
        '    sourceEvent: MouseEvent | KeyboardEvent;\n' +
        '  }>();\n' +
        '\n' +
        '  /**\n' +
        '   * Called when an event is dragged and dropped\n' +
        '   */\n' +
        '  @Output()\n' +
        '  eventTimesChanged =\n' +
        '    new EventEmitter<CalendarMonthViewEventTimesChangedEvent>();\n' +
        '\n' +
        '  /**\n' +
        '   * @hidden\n' +
        '   */\n' +
        '  columnHeaders: WeekDay[];\n' +
        '\n' +
        '  /**\n' +
        '   * @hidden\n' +
        '   */\n' +
        '  view: MonthView;\n' +
        '\n' +
        '  /**\n' +
        '   * @hidden\n' +
        '   */\n' +
        '  openRowIndex: number;\n' +
        '\n' +
        '  /**\n' +
        '   * @hidden\n' +
        '   */\n' +
        '  openDay: MonthViewDay;\n' +
        '\n' +
        '  /**\n' +
        '   * @hidden\n' +
        '   */\n' +
        '  refreshSubscription: Subscription;\n' +
        '\n' +
        '  /**\n' +
        '   * @hidden\n' +
        '   */\n' +
        '  constructor(\n' +
        '    protected cdr: ChangeDetectorRef,\n' +
        '    protected utils: CalendarUtils,\n' +
        '    @Inject(LOCALE_ID) locale: string,\n' +
        '    protected dateAdapter: DateAdapter\n' +
        '  ) {\n' +
        '    this.locale = locale;\n' +
        '  }\n' +
        '\n' +
        '  /**\n' +
        '   * @hidden\n' +
        '   */\n' +
        '  trackByRowOffset = (index: number, offset: number) =>\n' +
        '    this.view.days\n' +
        '      .slice(offset, this.view.totalDaysVisibleInWeek)\n' +
        '      .map((day) => day.date.toISOString())\n' +
        "      .join('-');\n" +
        '\n' +
        '  /**\n' +
        '   * @hidden\n' +
        '   */\n' +
        '  trackByDate = (index: number, day: MonthViewDay) => day.date.toISOString();\n' +
        '\n' +
        '  /**\n' +
        '   * @hidden\n' +
        '   */\n' +
        '  ngOnInit(): void {\n' +
        '    if (this.refresh) {\n' +
        '      this.refreshSubscription = this.refresh.subscribe(() => {\n' +
        '        this.refreshAll();\n' +
        '        this.cdr.markForCheck();\n' +
        '      });\n' +
        '    }\n' +
        '  }\n' +
        '\n' +
        '  /**\n' +
        '   * @hidden\n' +
        '   */\n' +
        '  ngOnChanges(changes: any): void {\n' +
        '    const refreshHeader =\n' +
        '      changes.viewDate || changes.excludeDays || changes.weekendDays;\n' +
        '    const refreshBody =\n' +
        '      changes.viewDate ||\n' +
        '      changes.events ||\n' +
        '      changes.excludeDays ||\n' +
        '      changes.weekendDays;\n' +
        '\n' +
        '    if (refreshHeader) {\n' +
        '      this.refreshHeader();\n' +
        '    }\n' +
        '\n' +
        '    if (changes.events) {\n' +
        '      validateEvents(this.events);\n' +
        '    }\n' +
        '\n' +
        '    if (refreshBody) {\n' +
        '      this.refreshBody();\n' +
        '    }\n' +
        '\n' +
        '    if (refreshHeader || refreshBody) {\n' +
        '      this.emitBeforeViewRender();\n' +
        '    }\n' +
        '\n' +
        '    if (\n' +
        '      changes.activeDayIsOpen ||\n' +
        '      changes.viewDate ||\n' +
        '      changes.events ||\n' +
        '      changes.excludeDays ||\n' +
        '      changes.activeDay\n' +
        '    ) {\n' +
        '      this.checkActiveDayIsOpen();\n' +
        '    }\n' +
        '  }\n' +
        '\n' +
        '  /**\n' +
        '   * @hidden\n' +
        '   */\n' +
        '  ngOnDestroy(): void {\n' +
        '    if (this.refreshSubscription'... 2877 more characters,
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/month/calendar-month-view/calendar-open-day-events/calendar-open-day-events.component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 9,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 5,
      fixableWarningCount: 0,
      source: 'import {\n' +
        '  Component,\n' +
        '  Input,\n' +
        '  Output,\n' +
        '  EventEmitter,\n' +
        '  TemplateRef,\n' +
        "} from '@angular/core';\n" +
        'import {\n' +
        '  trigger,\n' +
        '  style,\n' +
        '  state,\n' +
        '  transition,\n' +
        '  animate,\n' +
        '  AnimationTriggerMetadata,\n' +
        "} from '@angular/animations';\n" +
        "import { CalendarEvent } from 'calendar-utils';\n" +
        "import { isWithinThreshold, trackByEventId } from '../../../common/util/util';\n" +
        '\n' +
        "export const collapseAnimation: AnimationTriggerMetadata = trigger('collapse', [\n" +
        '  state(\n' +
        "    'void',\n" +
        '    style({\n' +
        '      height: 0,\n' +
        "      overflow: 'hidden',\n" +
        "      'padding-top': 0,\n" +
        "      'padding-bottom': 0,\n" +
        '    })\n' +
        '  ),\n' +
        '  state(\n' +
        "    '*',\n" +
        '    style({\n' +
        "      height: '*',\n" +
        "      overflow: 'hidden',\n" +
        "      'padding-top': '*',\n" +
        "      'padding-bottom': '*',\n" +
        '    })\n' +
        '  ),\n' +
        "  transition('* => void', animate('150ms ease-out')),\n" +
        "  transition('void => *', animate('150ms ease-in')),\n" +
        ']);\n' +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-calendar-open-day-events',\n" +
        '  template: `\n' +
        '    <ng-template\n' +
        '      #defaultTemplate\n' +
        '      let-events="events"\n' +
        '      let-eventClicked="eventClicked"\n' +
        '      let-isOpen="isOpen"\n' +
        '      let-trackByEventId="trackByEventId"\n' +
        '      let-validateDrag="validateDrag"\n' +
        '    >\n' +
        '      <div\n' +
        '        class="cal-open-day-events"\n' +
        '        [@collapse]\n' +
        '        *ngIf="isOpen"\n' +
        '        role="application"\n' +
        '      >\n' +
        '        <span\n' +
        '          tabindex="-1"\n' +
        '          role="alert"\n' +
        '          [attr.aria-label]="\n' +
        "            { date: date, locale: locale } | calendarA11y : 'openDayEventsAlert'\n" +
        '          "\n' +
        '        ></span>\n' +
        '        <span\n' +
        '          tabindex="0"\n' +
        '          role="landmark"\n' +
        '          [attr.aria-label]="\n' +
        '            { date: date, locale: locale }\n' +
        "              | calendarA11y : 'openDayEventsLandmark'\n" +
        '          "\n' +
        '        ></span>\n' +
        '        <div\n' +
        '          *ngFor="let event of events; trackBy: trackByEventId"\n' +
        '          [ngClass]="event?.cssClass"\n' +
        '          mwlDraggable\n' +
        '          [class.cal-draggable]="event.draggable"\n' +
        '          dragActiveClass="cal-drag-active"\n' +
        '          [dropData]="{ event: event }"\n' +
        '          [dragAxis]="{ x: event.draggable, y: event.draggable }"\n' +
        '          [validateDrag]="validateDrag"\n' +
        '          [touchStartLongPress]="{ delay: 300, delta: 30 }"\n' +
        '        >\n' +
        '          <span\n' +
        '            class="cal-event"\n' +
        '            [ngStyle]="{ backgroundColor: event.color?.primary }"\n' +
        '          >\n' +
        '          </span>\n' +
        '          &ngsp;\n' +
        '          <mwl-calendar-event-title\n' +
        '            [event]="event"\n' +
        '            [customTemplate]="eventTitleTemplate"\n' +
        '            view="month"\n' +
        '            (mwlClick)="\n' +
        '              eventClicked.emit({ event: event, sourceEvent: $event })\n' +
        '            "\n' +
        '            (mwlKeydownEnter)="\n' +
        '              eventClicked.emit({ event: event, sourceEvent: $event })\n' +
        '            "\n' +
        '            tabindex="0"\n' +
        '            [attr.aria-label]="\n' +
        '              { event: event, locale: locale }\n' +
        "                | calendarA11y : 'eventDescription'\n" +
        '            "\n' +
        '          >\n' +
        '          </mwl-calendar-event-title>\n' +
        '          &ngsp;\n' +
        '          <mwl-calendar-event-actions\n' +
        '            [event]="event"\n' +
        '            [customTemplate]="eventActionsTemplate"\n' +
        '          >\n' +
        '          </mwl-calendar-event-actions>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '    </ng-template>\n' +
        '    <ng-template\n' +
        '      [ngTemplateOutlet]="customTemplate || defaultTemplate"\n' +
        '      [ngTemplateOutletContext]="{\n' +
        '        events: events,\n' +
        '        eventClicked: eventClicked,\n' +
        '        isOpen: isOpen,\n' +
        '        trackByEventId: trackByEventId,\n' +
        '        validateDrag: validateDrag\n' +
        '      }"\n' +
        '    >\n' +
        '    </ng-template>\n' +
        '  `,\n' +
        '  animations: [collapseAnimation],\n' +
        '})\n' +
        'export class CalendarOpenDayEventsComponent {\n' +
        '  @Input() locale: string;\n' +
        '\n' +
        '  @Input() isOpen: boolean = false;\n' +
        '\n' +
        '  @Input() events: CalendarEvent[];\n' +
        '\n' +
        '  @Input() customTemplate: TemplateRef<any>;\n' +
        '\n' +
        '  @Input() eventTitleTemplate: TemplateRef<any>;\n' +
        '\n' +
        '  @Input() eventActionsTemplate: TemplateRef<any>;\n' +
        '\n' +
        '  @Input() date: Date;\n' +
        '\n' +
        '  @Output() eventClicked = new EventEmitter<{\n' +
        '    event: CalendarEvent;\n' +
        '    sourceEvent: MouseEvent | KeyboardEvent;\n' +
        '  }>();\n' +
        '\n' +
        '  trackByEventId = trackByEventId;\n' +
        '\n' +
        '  validateDrag = isWithinThreshold;\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/month/calendar-month.module.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 3,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 3,
      fixableWarningCount: 0,
      source: "import { NgModule } from '@angular/core';\n" +
        "import { CommonModule } from '@angular/common';\n" +
        "import { DragAndDropModule } from 'angular-draggable-droppable';\n" +
        "import { CalendarMonthViewComponent } from './calendar-month-view/calendar-month-view.component';\n" +
        "import { CalendarMonthViewHeaderComponent } from './calendar-month-view/calendar-month-view-header/calendar-month-view-header.component';\n" +
        "import { CalendarMonthCellComponent } from './calendar-month-view/calendar-month-cell/calendar-month-cell.component';\n" +
        "import { CalendarOpenDayEventsComponent } from './calendar-month-view/calendar-open-day-events/calendar-open-day-events.component';\n" +
        "import { CalendarCommonModule } from '../common/calendar-common.module';\n" +
        '\n' +
        'export {\n' +
        '  CalendarMonthViewComponent,\n' +
        '  CalendarMonthViewBeforeRenderEvent,\n' +
        '  CalendarMonthViewEventTimesChangedEvent,\n' +
        "} from './calendar-month-view/calendar-month-view.component';\n" +
        "export { MonthViewDay as CalendarMonthViewDay } from 'calendar-utils';\n" +
        "export { collapseAnimation } from './calendar-month-view/calendar-open-day-events/calendar-open-day-events.component';\n" +
        '\n' +
        '// needed for ivy, not part of the public api\n' +
        "export { CalendarMonthCellComponent as ɵCalendarMonthCellComponent } from './calendar-month-view/calendar-month-cell/calendar-month-cell.component';\n" +
        "export { CalendarMonthViewHeaderComponent as ɵCalendarMonthViewHeaderComponent } from './calendar-month-view/calendar-month-view-header/calendar-month-view-header.component';\n" +
        "export { CalendarOpenDayEventsComponent as ɵCalendarOpenDayEventsComponent } from './calendar-month-view/calendar-open-day-events/calendar-open-day-events.component';\n" +
        '\n' +
        '@NgModule({\n' +
        '  imports: [CommonModule, DragAndDropModule, CalendarCommonModule],\n' +
        '  declarations: [\n' +
        '    CalendarMonthViewComponent,\n' +
        '    CalendarMonthCellComponent,\n' +
        '    CalendarOpenDayEventsComponent,\n' +
        '    CalendarMonthViewHeaderComponent,\n' +
        '  ],\n' +
        '  exports: [\n' +
        '    DragAndDropModule,\n' +
        '    CalendarMonthViewComponent,\n' +
        '    CalendarMonthCellComponent,\n' +
        '    CalendarOpenDayEventsComponent,\n' +
        '    CalendarMonthViewHeaderComponent,\n' +
        '  ],\n' +
        '})\n' +
        'export class CalendarMonthModule {}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/week/calendar-week-view/calendar-week-view-current-time-marker/calendar-week-view-current-time-marker.component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 4,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 1,
      fixableWarningCount: 0,
      source: 'import {\n' +
        '  Component,\n' +
        '  Input,\n' +
        '  NgZone,\n' +
        '  OnChanges,\n' +
        '  SimpleChanges,\n' +
        '  TemplateRef,\n' +
        "} from '@angular/core';\n" +
        "import { BehaviorSubject, interval, Observable } from 'rxjs';\n" +
        "import { switchMapTo, startWith, map, switchMap } from 'rxjs/operators';\n" +
        "import { DateAdapter } from '../../../../date-adapters/date-adapter';\n" +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-calendar-week-view-current-time-marker',\n" +
        '  template: `\n' +
        '    <ng-template\n' +
        '      #defaultTemplate\n' +
        '      let-columnDate="columnDate"\n' +
        '      let-dayStartHour="dayStartHour"\n' +
        '      let-dayStartMinute="dayStartMinute"\n' +
        '      let-dayEndHour="dayEndHour"\n' +
        '      let-dayEndMinute="dayEndMinute"\n' +
        '      let-isVisible="isVisible"\n' +
        '      let-topPx="topPx"\n' +
        '    >\n' +
        '      <div\n' +
        '        class="cal-current-time-marker"\n' +
        '        *ngIf="isVisible"\n' +
        '        [style.top.px]="topPx"\n' +
        '      ></div>\n' +
        '    </ng-template>\n' +
        '    <ng-template\n' +
        '      [ngTemplateOutlet]="customTemplate || defaultTemplate"\n' +
        '      [ngTemplateOutletContext]="{\n' +
        '        columnDate: columnDate,\n' +
        '        dayStartHour: dayStartHour,\n' +
        '        dayStartMinute: dayStartMinute,\n' +
        '        dayEndHour: dayEndHour,\n' +
        '        dayEndMinute: dayEndMinute,\n' +
        '        isVisible: (marker$ | async)?.isVisible,\n' +
        '        topPx: (marker$ | async)?.top\n' +
        '      }"\n' +
        '    >\n' +
        '    </ng-template>\n' +
        '  `,\n' +
        '})\n' +
        'export class CalendarWeekViewCurrentTimeMarkerComponent implements OnChanges {\n' +
        '  @Input() columnDate: Date;\n' +
        '\n' +
        '  @Input() dayStartHour: number;\n' +
        '\n' +
        '  @Input() dayStartMinute: number;\n' +
        '\n' +
        '  @Input() dayEndHour: number;\n' +
        '\n' +
        '  @Input() dayEndMinute: number;\n' +
        '\n' +
        '  @Input() hourSegments: number;\n' +
        '\n' +
        '  @Input() hourDuration: number;\n' +
        '\n' +
        '  @Input() hourSegmentHeight: number;\n' +
        '\n' +
        '  @Input() customTemplate: TemplateRef<any>;\n' +
        '\n' +
        '  columnDate$ = new BehaviorSubject<Date>(undefined);\n' +
        '\n' +
        '  marker$: Observable<{\n' +
        '    isVisible: boolean;\n' +
        '    top: number;\n' +
        '  }> = this.zone.onStable.pipe(\n' +
        '    switchMap(() => interval(60 * 1000)),\n' +
        '    startWith(0),\n' +
        '    switchMapTo(this.columnDate$),\n' +
        '    map((columnDate) => {\n' +
        '      const startOfDay = this.dateAdapter.setMinutes(\n' +
        '        this.dateAdapter.setHours(columnDate, this.dayStartHour),\n' +
        '        this.dayStartMinute\n' +
        '      );\n' +
        '      const endOfDay = this.dateAdapter.setMinutes(\n' +
        '        this.dateAdapter.setHours(columnDate, this.dayEndHour),\n' +
        '        this.dayEndMinute\n' +
        '      );\n' +
        '      const hourHeightModifier =\n' +
        '        (this.hourSegments * this.hourSegmentHeight) /\n' +
        '        (this.hourDuration || 60);\n' +
        '      const now = new Date();\n' +
        '      return {\n' +
        '        isVisible:\n' +
        '          this.dateAdapter.isSameDay(columnDate, now) &&\n' +
        '          now >= startOfDay &&\n' +
        '          now <= endOfDay,\n' +
        '        top:\n' +
        '          this.dateAdapter.differenceInMinutes(now, startOfDay) *\n' +
        '          hourHeightModifier,\n' +
        '      };\n' +
        '    })\n' +
        '  );\n' +
        '\n' +
        '  constructor(private dateAdapter: DateAdapter, private zone: NgZone) {}\n' +
        '\n' +
        '  ngOnChanges(changes: SimpleChanges) {\n' +
        '    if (changes.columnDate) {\n' +
        '      this.columnDate$.next(changes.columnDate.currentValue);\n' +
        '    }\n' +
        '  }\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/week/calendar-week-view/calendar-week-view-event/calendar-week-view-event.component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 5,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 1,
      fixableWarningCount: 0,
      source: 'import {\n' +
        '  Component,\n' +
        '  Input,\n' +
        '  Output,\n' +
        '  EventEmitter,\n' +
        '  TemplateRef,\n' +
        "} from '@angular/core';\n" +
        'import {\n' +
        '  WeekViewAllDayEvent,\n' +
        '  WeekViewTimeEvent,\n' +
        '  WeekViewHourColumn,\n' +
        "} from 'calendar-utils';\n" +
        "import { PlacementArray } from 'positioning';\n" +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-calendar-week-view-event',\n" +
        '  template: `\n' +
        '    <ng-template\n' +
        '      #defaultTemplate\n' +
        '      let-weekEvent="weekEvent"\n' +
        '      let-tooltipPlacement="tooltipPlacement"\n' +
        '      let-eventClicked="eventClicked"\n' +
        '      let-tooltipTemplate="tooltipTemplate"\n' +
        '      let-tooltipAppendToBody="tooltipAppendToBody"\n' +
        '      let-tooltipDisabled="tooltipDisabled"\n' +
        '      let-tooltipDelay="tooltipDelay"\n' +
        '      let-column="column"\n' +
        '      let-daysInWeek="daysInWeek"\n' +
        '    >\n' +
        '      <div\n' +
        '        class="cal-event"\n' +
        '        [ngStyle]="{\n' +
        '          color: weekEvent.event.color?.secondaryText,\n' +
        '          backgroundColor: weekEvent.event.color?.secondary,\n' +
        '          borderColor: weekEvent.event.color?.primary\n' +
        '        }"\n' +
        '        [mwlCalendarTooltip]="\n' +
        '          !tooltipDisabled\n' +
        '            ? (weekEvent.event.title\n' +
        '              | calendarEventTitle\n' +
        "                : (daysInWeek === 1 ? 'dayTooltip' : 'weekTooltip')\n" +
        '                : weekEvent.tempEvent || weekEvent.event)\n' +
        "            : ''\n" +
        '        "\n' +
        '        [tooltipPlacement]="tooltipPlacement"\n' +
        '        [tooltipEvent]="weekEvent.tempEvent || weekEvent.event"\n' +
        '        [tooltipTemplate]="tooltipTemplate"\n' +
        '        [tooltipAppendToBody]="tooltipAppendToBody"\n' +
        '        [tooltipDelay]="tooltipDelay"\n' +
        '        (mwlClick)="eventClicked.emit({ sourceEvent: $event })"\n' +
        '        (mwlKeydownEnter)="eventClicked.emit({ sourceEvent: $event })"\n' +
        '        tabindex="0"\n' +
        '        role="application"\n' +
        '        [attr.aria-label]="\n' +
        '          { event: weekEvent.tempEvent || weekEvent.event, locale: locale }\n' +
        "            | calendarA11y : 'eventDescription'\n" +
        '        "\n' +
        '      >\n' +
        '        <mwl-calendar-event-actions\n' +
        '          [event]="weekEvent.tempEvent || weekEvent.event"\n' +
        '          [customTemplate]="eventActionsTemplate"\n' +
        '        >\n' +
        '        </mwl-calendar-event-actions>\n' +
        '        &ngsp;\n' +
        '        <mwl-calendar-event-title\n' +
        '          [event]="weekEvent.tempEvent || weekEvent.event"\n' +
        '          [customTemplate]="eventTitleTemplate"\n' +
        `          [view]="daysInWeek === 1 ? 'day' : 'week'"\n` +
        '        >\n' +
        '        </mwl-calendar-event-title>\n' +
        '      </div>\n' +
        '    </ng-template>\n' +
        '    <ng-template\n' +
        '      [ngTemplateOutlet]="customTemplate || defaultTemplate"\n' +
        '      [ngTemplateOutletContext]="{\n' +
        '        weekEvent: weekEvent,\n' +
        '        tooltipPlacement: tooltipPlacement,\n' +
        '        eventClicked: eventClicked,\n' +
        '        tooltipTemplate: tooltipTemplate,\n' +
        '        tooltipAppendToBody: tooltipAppendToBody,\n' +
        '        tooltipDisabled: tooltipDisabled,\n' +
        '        tooltipDelay: tooltipDelay,\n' +
        '        column: column,\n' +
        '        daysInWeek: daysInWeek\n' +
        '      }"\n' +
        '    >\n' +
        '    </ng-template>\n' +
        '  `,\n' +
        '})\n' +
        'export class CalendarWeekViewEventComponent {\n' +
        '  @Input() locale: string;\n' +
        '\n' +
        '  @Input() weekEvent: WeekViewAllDayEvent | WeekViewTimeEvent;\n' +
        '\n' +
        '  @Input() tooltipPlacement: PlacementArray;\n' +
        '\n' +
        '  @Input() tooltipAppendToBody: boolean;\n' +
        '\n' +
        '  @Input() tooltipDisabled: boolean;\n' +
        '\n' +
        '  @Input() tooltipDelay: number | null;\n' +
        '\n' +
        '  @Input() customTemplate: TemplateRef<any>;\n' +
        '\n' +
        '  @Input() eventTitleTemplate: TemplateRef<any>;\n' +
        '\n' +
        '  @Input() eventActionsTemplate: TemplateRef<any>;\n' +
        '\n' +
        '  @Input() tooltipTemplate: TemplateRef<any>;\n' +
        '\n' +
        '  @Input() column: WeekViewHourColumn;\n' +
        '\n' +
        '  @Input() daysInWeek: number;\n' +
        '\n' +
        '  @Output() eventClicked = new EventEmitter<{\n' +
        '    sourceEvent: MouseEvent | KeyboardEvent;\n' +
        '  }>();\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/week/calendar-week-view/calendar-week-view-header/calendar-week-view-header.component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 7,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 2,
      fixableWarningCount: 0,
      source: 'import {\n' +
        '  Component,\n' +
        '  Input,\n' +
        '  Output,\n' +
        '  EventEmitter,\n' +
        '  TemplateRef,\n' +
        "} from '@angular/core';\n" +
        "import { CalendarEvent, WeekDay } from 'calendar-utils';\n" +
        "import { trackByWeekDayHeaderDate } from '../../../common/util/util';\n" +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-calendar-week-view-header',\n" +
        '  template: `\n' +
        '    <ng-template\n' +
        '      #defaultTemplate\n' +
        '      let-days="days"\n' +
        '      let-locale="locale"\n' +
        '      let-dayHeaderClicked="dayHeaderClicked"\n' +
        '      let-eventDropped="eventDropped"\n' +
        '      let-trackByWeekDayHeaderDate="trackByWeekDayHeaderDate"\n' +
        '      let-dragEnter="dragEnter"\n' +
        '    >\n' +
        '      <div class="cal-day-headers" role="row">\n' +
        '        <div\n' +
        '          class="cal-header"\n' +
        '          *ngFor="let day of days; trackBy: trackByWeekDayHeaderDate"\n' +
        '          [class.cal-past]="day.isPast"\n' +
        '          [class.cal-today]="day.isToday"\n' +
        '          [class.cal-future]="day.isFuture"\n' +
        '          [class.cal-weekend]="day.isWeekend"\n' +
        '          [ngClass]="day.cssClass"\n' +
        '          (mwlClick)="dayHeaderClicked.emit({ day: day, sourceEvent: $event })"\n' +
        '          mwlDroppable\n' +
        '          dragOverClass="cal-drag-over"\n' +
        '          (drop)="\n' +
        '            eventDropped.emit({\n' +
        '              event: $event.dropData.event,\n' +
        '              newStart: day.date\n' +
        '            })\n' +
        '          "\n' +
        '          (dragEnter)="dragEnter.emit({ date: day.date })"\n' +
        '          tabindex="0"\n' +
        '          role="columnheader"\n' +
        '        >\n' +
        "          <b>{{ day.date | calendarDate : 'weekViewColumnHeader' : locale }}</b\n" +
        '          ><br />\n' +
        '          <span>{{\n' +
        "            day.date | calendarDate : 'weekViewColumnSubHeader' : locale\n" +
        '          }}</span>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '    </ng-template>\n' +
        '    <ng-template\n' +
        '      [ngTemplateOutlet]="customTemplate || defaultTemplate"\n' +
        '      [ngTemplateOutletContext]="{\n' +
        '        days: days,\n' +
        '        locale: locale,\n' +
        '        dayHeaderClicked: dayHeaderClicked,\n' +
        '        eventDropped: eventDropped,\n' +
        '        dragEnter: dragEnter,\n' +
        '        trackByWeekDayHeaderDate: trackByWeekDayHeaderDate\n' +
        '      }"\n' +
        '    >\n' +
        '    </ng-template>\n' +
        '  `,\n' +
        '})\n' +
        'export class CalendarWeekViewHeaderComponent {\n' +
        '  @Input() days: WeekDay[];\n' +
        '\n' +
        '  @Input() locale: string;\n' +
        '\n' +
        '  @Input() customTemplate: TemplateRef<any>;\n' +
        '\n' +
        '  @Output() dayHeaderClicked = new EventEmitter<{\n' +
        '    day: WeekDay;\n' +
        '    sourceEvent: MouseEvent;\n' +
        '  }>();\n' +
        '\n' +
        '  @Output() eventDropped = new EventEmitter<{\n' +
        '    event: CalendarEvent;\n' +
        '    newStart: Date;\n' +
        '  }>();\n' +
        '\n' +
        '  @Output() dragEnter = new EventEmitter<{ date: Date }>();\n' +
        '\n' +
        '  trackByWeekDayHeaderDate = trackByWeekDayHeaderDate;\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/week/calendar-week-view/calendar-week-view-hour-segment/calendar-week-view-hour-segment.component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 5,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 2,
      fixableWarningCount: 0,
      source: "import { Component, Input, TemplateRef } from '@angular/core';\n" +
        "import { WeekViewHourSegment } from 'calendar-utils';\n" +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-calendar-week-view-hour-segment',\n" +
        '  template: `\n' +
        '    <ng-template\n' +
        '      #defaultTemplate\n' +
        '      let-segment="segment"\n' +
        '      let-locale="locale"\n' +
        '      let-segmentHeight="segmentHeight"\n' +
        '      let-isTimeLabel="isTimeLabel"\n' +
        '      let-daysInWeek="daysInWeek"\n' +
        '    >\n' +
        '      <div\n' +
        '        [attr.aria-hidden]="\n' +
        '          {}\n' +
        '            | calendarA11y\n' +
        '              : (daysInWeek === 1\n' +
        "                  ? 'hideDayHourSegment'\n" +
        "                  : 'hideWeekHourSegment')\n" +
        '        "\n' +
        '        class="cal-hour-segment"\n' +
        '        [style.height.px]="segmentHeight"\n' +
        '        [class.cal-hour-start]="segment.isStart"\n' +
        '        [class.cal-after-hour-start]="!segment.isStart"\n' +
        '        [ngClass]="segment.cssClass"\n' +
        '      >\n' +
        '        <div class="cal-time" *ngIf="isTimeLabel">\n' +
        '          {{\n' +
        '            segment.displayDate\n' +
        '              | calendarDate\n' +
        "                : (daysInWeek === 1 ? 'dayViewHour' : 'weekViewHour')\n" +
        '                : locale\n' +
        '          }}\n' +
        '        </div>\n' +
        '      </div>\n' +
        '    </ng-template>\n' +
        '    <ng-template\n' +
        '      [ngTemplateOutlet]="customTemplate || defaultTemplate"\n' +
        '      [ngTemplateOutletContext]="{\n' +
        '        segment: segment,\n' +
        '        locale: locale,\n' +
        '        segmentHeight: segmentHeight,\n' +
        '        isTimeLabel: isTimeLabel,\n' +
        '        daysInWeek: daysInWeek\n' +
        '      }"\n' +
        '    >\n' +
        '    </ng-template>\n' +
        '  `,\n' +
        '})\n' +
        'export class CalendarWeekViewHourSegmentComponent {\n' +
        '  @Input() segment: WeekViewHourSegment;\n' +
        '\n' +
        '  @Input() segmentHeight: number;\n' +
        '\n' +
        '  @Input() locale: string;\n' +
        '\n' +
        '  @Input() isTimeLabel: boolean;\n' +
        '\n' +
        '  @Input() daysInWeek: number;\n' +
        '\n' +
        '  @Input() customTemplate: TemplateRef<any>;\n' +
        '}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/week/calendar-week-view/calendar-week-view.component.spec.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 3,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: 'import {\n' +
        '  inject,\n' +
        '  ComponentFixture,\n' +
        '  TestBed,\n' +
        '  fakeAsync,\n' +
        '  flush,\n' +
        "} from '@angular/core/testing';\n" +
        "import moment from 'moment';\n" +
        "import { expect } from 'chai';\n" +
        'import {\n' +
        '  CalendarEventTitleFormatter,\n' +
        '  CalendarEvent,\n' +
        '  CalendarMomentDateFormatter,\n' +
        '  CalendarDateFormatter,\n' +
        '  CalendarModule,\n' +
        '  MOMENT,\n' +
        '  CalendarEventTimesChangedEvent,\n' +
        '  DAYS_OF_WEEK,\n' +
        '  CalendarWeekViewComponent,\n' +
        '  DateAdapter,\n' +
        '  CalendarWeekViewBeforeRenderEvent,\n' +
        "} from 'angular-calendar';\n" +
        "import { DragAndDropModule } from 'angular-draggable-droppable';\n" +
        "import { Subject } from 'rxjs';\n" +
        "import * as sinon from 'sinon';\n" +
        "import { triggerDomEvent, ExternalEventComponent } from '../../../test/util';\n" +
        "import { take } from 'rxjs/operators';\n" +
        "import { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\n" +
        "import { Component } from '@angular/core';\n" +
        "import { By } from '@angular/platform-browser';\n" +
        "import * as fakeTimers from '@sinonjs/fake-timers';\n" +
        "import { formatDate } from '@angular/common';\n" +
        '\n' +
        '@Component({\n' +
        '  template: `\n' +
        '    <mwl-calendar-week-view\n' +
        '      [viewDate]="viewDate"\n' +
        '      [events]="events"\n' +
        '      (eventTimesChanged)="eventTimesChanged($event)"\n' +
        '    ></mwl-calendar-week-view>\n' +
        '    <mwl-external-event></mwl-external-event>\n' +
        '  `,\n' +
        '})\n' +
        'class TestComponent {\n' +
        '  viewDate: Date;\n' +
        '  events: CalendarEvent[];\n' +
        '  eventTimesChanged = sinon.spy();\n' +
        '}\n' +
        '\n' +
        "describe('calendarWeekView component', () => {\n" +
        '  beforeEach(() => {\n' +
        '    TestBed.configureTestingModule({\n' +
        '      imports: [\n' +
        '        CalendarModule.forRoot(\n' +
        '          {\n' +
        '            provide: DateAdapter,\n' +
        '            useFactory: adapterFactory,\n' +
        '          },\n' +
        '          {\n' +
        '            dateFormatter: {\n' +
        '              provide: CalendarDateFormatter,\n' +
        '              useClass: CalendarMomentDateFormatter,\n' +
        '            },\n' +
        '          }\n' +
        '        ),\n' +
        '        DragAndDropModule,\n' +
        '      ],\n' +
        '      declarations: [ExternalEventComponent, TestComponent],\n' +
        '      providers: [{ provide: MOMENT, useValue: moment }],\n' +
        '    });\n' +
        '  });\n' +
        '\n' +
        '  let eventTitle: CalendarEventTitleFormatter;\n' +
        '  beforeEach(inject([CalendarEventTitleFormatter], (_eventTitle_) => {\n' +
        '    eventTitle = _eventTitle_;\n' +
        '  }));\n' +
        '\n' +
        "  it('should generate the week view', () => {\n" +
        '    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n' +
        '      TestBed.createComponent(CalendarWeekViewComponent);\n' +
        "    fixture.componentInstance.viewDate = new Date('2016-06-29');\n" +
        '    fixture.componentInstance.ngOnChanges({ viewDate: {} });\n' +
        '    expect(fixture.componentInstance.days.length).to.equal(7);\n' +
        '    expect(fixture.componentInstance.days[0].date).to.deep.equal(\n' +
        "      moment('2016-06-26').toDate()\n" +
        '    );\n' +
        '  });\n' +
        '\n' +
        "  it('should generate the week view without excluded days', () => {\n" +
        '    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n' +
        '      TestBed.createComponent(CalendarWeekViewComponent);\n' +
        "    fixture.componentInstance.viewDate = new Date('2016-06-29');\n" +
        '    fixture.componentInstance.excludeDays = [0, 6];\n' +
        '    fixture.componentInstance.ngOnChanges({ viewDate: {} });\n' +
        '    expect(fixture.componentInstance.days.length).to.equal(5);\n' +
        '    fixture.destroy();\n' +
        '  });\n' +
        '\n' +
        "  it('should update the week view when excluded days changed', () => {\n" +
        '    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n' +
        '      TestBed.createComponent(CalendarWeekViewComponent);\n' +
        "    fixture.componentInstance.viewDate = new Date('2016-06-29');\n" +
        '    fixture.componentInstance.excludeDays = [0, 6];\n' +
        '    fixture.componentInstance.ngOnChanges({ excludeDays: {} });\n' +
        '    expect(fixture.componentInstance.days.length).to.equal(5);\n' +
        "    expect(fixture.nativeElement.querySelector('.cal-weekend')).to.equal(null);\n" +
        '\n' +
        '    fixture.componentInstance.excludeDays = [1];\n' +
        '    fixture.componentInstance.ngOnChanges({ excludeDays: [] });\n' +
        '    fixture.detectChanges();\n' +
        '    expect(fixture.componentInstance.days.length).to.equal(6);\n' +
        "    expect(fixture.nativeElement.querySelector('.cal-weekend')).not.to.equal(\n" +
        '      null\n' +
        '    );\n' +
        '\n' +
        '    fixture.destroy();\n' +
        '  });\n' +
        '\n' +
        "  it('should support excluding non consecutive days', () => {\n" +
        '    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n' +
        '      TestBed.createComponent(CalendarWeekViewComponent);\n' +
        "    fixture.componentInstance.viewDate = new Date('2016-06-29');\n" +
        '    fixture.componentInstance.excludeDays = [4, 6];\n' +
        '    fixture.componentInstance.ngOnChanges({ viewDate: {} });\n' +
        '    expect(fixture.componentInstance.days.length).to.equal(5);\n' +
        '    fixture.destroy();\n' +
        '  });\n' +
        '\n' +
        "  it('should support excluding all but 1 day', () => {\n" +
        '    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n' +
        '      TestBed.createComponent(CalendarWeekViewComponent);\n' +
        "    fixture.componentInstance.viewDate = new Date('2016-06-29');\n" +
        '    fixture.componentInstance.excludeDays = [0, 1, 2, 3, 4, 5];\n' +
        '    fixture.componentInstance.ngOnChanges({ viewDate: {} });\n' +
        '    expect(fixture.componentInstance.days.length).to.equal(1);\n' +
        '    fixture.destroy();\n' +
        '  });\n' +
        '\n' +
        "  it('should generate the week view with default colors for events', () => {\n" +
        '    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n' +
        '      TestBed.createComponent(CalendarWeekViewComponent);\n' +
        '    fixture.componentInstance.ngOnInit();\n' +
        "    fixture.componentInstance.viewDate = new Date('2016-06-01');\n" +
        '    fixture.componentInstance.events = [\n' +
        '      {\n' +
        "        start: new Date('2016-05-30'),\n" +
        "        end: new Date('2016-06-02'),\n" +
        "        title: 'foo',\n" +
        '      },\n' +
        '    ];\n' +
        '    fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n' +
        '    fixture.detectChanges();\n' +
        '\n' +
        '    const computedStyles: CSSStyleDeclaration = window.getComputedStyle(\n' +
        "      fixture.nativeElement.querySelector('.cal-event')\n" +
        '    );\n' +
        "    expect(computedStyles.getPropertyValue('background-color')).to.equal(\n" +
        "      'rgb(209, 232, 255)'\n" +
        '    );\n' +
        "    expect(computedStyles.getPropertyValue('border-color')).to.equal(\n" +
        "      'rgb(30, 144, 255)'\n" +
        '    );\n' +
        "    expect(computedStyles.getPropertyValue('color')).to.equal(\n" +
        "      'rgb(30, 144, 255)'\n" +
        '    );\n' +
        '    fixture.destroy();\n' +
        '  });\n' +
        '\n' +
        "  it('should emit on the dayHeaderClicked output', (done) => {\n" +
        '    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n' +
        '      TestBed.createComponent(CalendarWeekViewComponent);\n' +
        "    fixture.componentInstance.viewDate = new Date('2016-06-29');\n" +
        '    fixture.componentInstance.ngOnChanges({ viewDate: {} });\n' +
        '    fixture.detectChanges();\n' +
        '    fixture.componentInstance.dayHeaderClicked.subscribe((val) => {\n' +
        '      expect(val).to.deep.equal({\n' +
        '        day: fixture.componentInstance.days[0],\n' +
        "        sourceEvent: window['event'],\n" +
        '      });\n' +
        '      done();\n' +
        '    });\n' +
        "    fixture.nativeElement.querySelector('.cal-header').click();\n" +
        '  });\n' +
        '\n' +
        "  it('should add a custom CSS class to events', () => {\n" +
        '    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n' +
        '      TestBed.createComponent(CalendarWeekViewComponent);\n' +
        "    fixture.componentInstance.viewDate = new Date('2016-06-01');\n" +
        '    fixture.componentInstance.events = [\n' +
        '      {\n' +
        "        start: new Date('2016-05-30'),\n" +
        "        end: new Date('2016-06-02'),\n" +
        "        cssClass: 'foo',\n" +
        "        title: 'foo',\n" +
        '        color: {\n' +
        "          primary: 'blue',\n" +
        "          secondary: '',\n" +
        '        },\n' +
        '      },\n' +
        '    ];\n' +
        '    fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n' +
        '    fixture.detectChanges();\n' +
        '    expect(\n' +
        '      fixture.nativeElement\n' +
        "        .querySelector('.cal-event-container')\n" +
        "        .classList.contains('foo')\n" +
        '    ).to.equal(true);\n' +
        '    fixture.destroy();\n' +
        '  });\n' +
        '\n' +
        "  it('should call the event clicked callback', (done) => {\n" +
        '    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n' +
        '      TestBed.createComponent(CalendarWeekViewComponent);\n' +
        "    fixture.componentInstance.viewDate = new Date('2016-06-01');\n" +
        '    fixture.componentInstance.events = [\n' +
        '      {\n' +
        "        start: new Date('2016-05-30'),\n" +
        "        end: new Date('2016-06-02'),\n" +
        "        title: '<span>foo</span>',\n" +
        '        color: {\n' +
        "          primary: 'blue',\n" +
        "          secondary: '',\n" +
        '        },\n' +
        '      },\n' +
        '    ];\n' +
        '    fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n' +
        '    fixture.detectChanges();\n' +
        '    const title: HTMLElement =\n' +
        "      fixture.nativeElement.querySelector('.cal-event-title');\n" +
        "    expect(title.innerHTML).to.equal('<span>foo</span>');\n" +
        '    fixture.componentInstance.eventClicked.subscribe((val) => {\n' +
        '      expect(val).to.deep.equal({\n' +
        '        event: fixture.componentInstance.events[0],\n' +
        "        sourceEvent: window['event'],\n" +
        '      });\n' +
        '      done();\n' +
        '    });\n' +
        '    title.click();\n' +
        '  });\n' +
        '\n' +
        "  it('should refresh the view when the refresh observable is emitted on', () => {\n" +
        '    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n' +
        '      TestBed.createComponent(CalendarWeekViewComponent);\n' +
        '    fixture.componentInstance.refresh = new Subject();\n' +
        '    fixture.componentInstance.ngOnInit();\n' +
        "    fixture.componentInstance.viewDate = new Date('2016-06-01');\n" +
        '    fixture.componentInstance.ngOnChanges({ viewDate: {} });\n' +
        '    const event: CalendarEvent = {\n' +
        "      start: new Date('2016-06-01'),\n" +
        "      end: new Date('2016-06-02'),\n" +
        "      title: 'foo',\n" +
        '      allDay: true,\n' +
        '    };\n' +
        '    fixture.componentInstance.events.push(event);\n' +
        '    fixture.componentInstance.refresh.next(true);\n' +
        '    expect(\n' +
        '      fixture.componentInstance.view.allDayEventRows[0].row[0].event\n' +
        '    ).to.deep.equal(event);\n' +
        '    fixture.destroy();\n' +
        '  });\n' +
        '\n' +
        "  it('should allow the event title to be customised', () => {\n" +
        '    const fixture: ComponentFixture<CalendarWeekViewComponent> =\n' +
        '      TestBed.createComponent(CalendarWeekViewComponent);\n' +
        '    eventTitle.week = (event: CalendarEvent) => {\n' +
        '      return `foo ${event.title}`;\n' +
        '    };\n' +
        "    fixture.componentInstance.viewDate = new Date('2016-06-01');\n" +
        '    fixture.componentInstance.events = [\n' +
        '      {\n' +
        "        start: new Date('2016-05-30'),\n" +
        "        end: new Date('2016-06-02'),\n" +
        "        title: 'bar',\n" +
        '        color: {\n' +
        "          primary: 'blue',\n" +
        "          secondary: '',\n" +
        '        },\n' +
        '      },\n' +
        '    ];\n' +
        '    fixture.componentInstance.ngOnChanges({ viewDate: {}, events: {} });\n' +
        '    fixture.detectChanges();\n' +
        '    const title: HTMLElement =\n' +
        "      fixture.nativeElement.querySelector('.cal-event-title');\n" +
        "    expect(title.innerHTML).to.equal('foo bar');\n" +
        '  });\n' +
        '\n' +
        "  it('should allow the locale to be changed', () => {\n" +
        '    const fixture: ComponentFixtu'... 113416 more characters,
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/week/calendar-week-view/calendar-week-view.component.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 37,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 16,
      fixableWarningCount: 0,
      source: 'import {\n' +
        '  Component,\n' +
        '  Input,\n' +
        '  Output,\n' +
        '  EventEmitter,\n' +
        '  ChangeDetectorRef,\n' +
        '  OnChanges,\n' +
        '  OnInit,\n' +
        '  OnDestroy,\n' +
        '  LOCALE_ID,\n' +
        '  Inject,\n' +
        '  TemplateRef,\n' +
        '  ElementRef,\n' +
        '  AfterViewInit,\n' +
        "} from '@angular/core';\n" +
        "import { Subject, Subscription } from 'rxjs';\n" +
        'import {\n' +
        '  WeekDay,\n' +
        '  CalendarEvent,\n' +
        '  WeekViewAllDayEvent,\n' +
        '  WeekView,\n' +
        '  ViewPeriod,\n' +
        '  WeekViewHourColumn,\n' +
        '  WeekViewTimeEvent,\n' +
        '  WeekViewHourSegment,\n' +
        '  WeekViewHour,\n' +
        '  WeekViewAllDayEventRow,\n' +
        "} from 'calendar-utils';\n" +
        "import { ResizeEvent } from 'angular-resizable-element';\n" +
        "import { ResizeCursors } from 'angular-resizable-element';\n" +
        "import { CalendarDragHelper } from '../../common/calendar-drag-helper/calendar-drag-helper.provider';\n" +
        "import { CalendarResizeHelper } from '../../common/calendar-resize-helper/calendar-resize-helper.provider';\n" +
        'import {\n' +
        '  CalendarEventTimesChangedEvent,\n' +
        '  CalendarEventTimesChangedEventType,\n' +
        "} from '../../common/calendar-event-times-changed-event/calendar-event-times-changed-event.interface';\n" +
        "import { CalendarUtils } from '../../common/calendar-utils/calendar-utils.provider';\n" +
        'import {\n' +
        '  validateEvents,\n' +
        '  roundToNearest,\n' +
        '  trackByWeekDayHeaderDate,\n' +
        '  trackByHourSegment,\n' +
        '  trackByHour,\n' +
        '  getMinutesMoved,\n' +
        '  getDefaultEventEnd,\n' +
        '  addDaysWithExclusions,\n' +
        '  isDraggedWithinPeriod,\n' +
        '  shouldFireDroppedEvent,\n' +
        '  getWeekViewPeriod,\n' +
        '  trackByWeekAllDayEvent,\n' +
        '  trackByWeekTimeEvent,\n' +
        "} from '../../common/util/util';\n" +
        "import { DateAdapter } from '../../../date-adapters/date-adapter';\n" +
        'import {\n' +
        '  DragEndEvent,\n' +
        '  DropEvent,\n' +
        '  DragMoveEvent,\n' +
        '  ValidateDrag,\n' +
        "} from 'angular-draggable-droppable';\n" +
        "import { PlacementArray } from 'positioning';\n" +
        '\n' +
        'export interface WeekViewAllDayEventResize {\n' +
        '  originalOffset: number;\n' +
        '  originalSpan: number;\n' +
        '  edge: string;\n' +
        '}\n' +
        '\n' +
        'export interface CalendarWeekViewBeforeRenderEvent extends WeekView {\n' +
        '  header: WeekDay[];\n' +
        '}\n' +
        '\n' +
        '/**\n' +
        ' * Shows all events on a given week. Example usage:\n' +
        ' *\n' +
        ' * ```typescript\n' +
        ' * <mwl-calendar-week-view\n' +
        ' *  [viewDate]="viewDate"\n' +
        ' *  [events]="events">\n' +
        ' * </mwl-calendar-week-view>\n' +
        ' * ```\n' +
        ' */\n' +
        '@Component({\n' +
        "  selector: 'mwl-calendar-week-view',\n" +
        '  template: `\n' +
        '    <div class="cal-week-view" role="grid">\n' +
        '      <mwl-calendar-week-view-header\n' +
        '        [days]="days"\n' +
        '        [locale]="locale"\n' +
        '        [customTemplate]="headerTemplate"\n' +
        '        (dayHeaderClicked)="dayHeaderClicked.emit($event)"\n' +
        '        (eventDropped)="\n' +
        '          eventDropped({ dropData: $event }, $event.newStart, true)\n' +
        '        "\n' +
        '        (dragEnter)="dateDragEnter($event.date)"\n' +
        '      >\n' +
        '      </mwl-calendar-week-view-header>\n' +
        '      <div\n' +
        '        class="cal-all-day-events"\n' +
        '        #allDayEventsContainer\n' +
        '        *ngIf="view.allDayEventRows.length > 0"\n' +
        '        mwlDroppable\n' +
        `        (dragEnter)="dragEnter('allDay')"\n` +
        `        (dragLeave)="dragLeave('allDay')"\n` +
        '      >\n' +
        '        <div class="cal-day-columns">\n' +
        '          <div class="cal-time-label-column">\n' +
        '            <ng-container\n' +
        '              *ngTemplateOutlet="allDayEventsLabelTemplate"\n' +
        '            ></ng-container>\n' +
        '          </div>\n' +
        '          <div\n' +
        '            class="cal-day-column"\n' +
        '            *ngFor="let day of days; trackBy: trackByWeekDayHeaderDate"\n' +
        '            mwlDroppable\n' +
        '            dragOverClass="cal-drag-over"\n' +
        '            (drop)="eventDropped($event, day.date, true)"\n' +
        '            (dragEnter)="dateDragEnter(day.date)"\n' +
        '          ></div>\n' +
        '        </div>\n' +
        '        <div\n' +
        '          *ngFor="let eventRow of view.allDayEventRows; trackBy: trackById"\n' +
        '          #eventRowContainer\n' +
        '          class="cal-events-row"\n' +
        '        >\n' +
        '          <div\n' +
        '            *ngFor="\n' +
        '              let allDayEvent of eventRow.row;\n' +
        '              trackBy: trackByWeekAllDayEvent\n' +
        '            "\n' +
        '            #event\n' +
        '            class="cal-event-container"\n' +
        '            [class.cal-draggable]="\n' +
        '              allDayEvent.event.draggable && allDayEventResizes.size === 0\n' +
        '            "\n' +
        '            [class.cal-starts-within-week]="!allDayEvent.startsBeforeWeek"\n' +
        '            [class.cal-ends-within-week]="!allDayEvent.endsAfterWeek"\n' +
        '            [ngClass]="allDayEvent.event?.cssClass"\n' +
        '            [style.width.%]="(100 / days.length) * allDayEvent.span"\n' +
        '            [style.marginLeft.%]="\n' +
        '              rtl ? null : (100 / days.length) * allDayEvent.offset\n' +
        '            "\n' +
        '            [style.marginRight.%]="\n' +
        '              rtl ? (100 / days.length) * allDayEvent.offset : null\n' +
        '            "\n' +
        '            mwlResizable\n' +
        '            [resizeCursors]="resizeCursors"\n' +
        '            [resizeSnapGrid]="{ left: dayColumnWidth, right: dayColumnWidth }"\n' +
        '            [validateResize]="validateResize"\n' +
        '            (resizeStart)="\n' +
        '              allDayEventResizeStarted(eventRowContainer, allDayEvent, $event)\n' +
        '            "\n' +
        '            (resizing)="\n' +
        '              allDayEventResizing(allDayEvent, $event, dayColumnWidth)\n' +
        '            "\n' +
        '            (resizeEnd)="allDayEventResizeEnded(allDayEvent)"\n' +
        '            mwlDraggable\n' +
        '            dragActiveClass="cal-drag-active"\n' +
        '            [dropData]="{ event: allDayEvent.event, calendarId: calendarId }"\n' +
        '            [dragAxis]="{\n' +
        '              x: allDayEvent.event.draggable && allDayEventResizes.size === 0,\n' +
        '              y:\n' +
        '                !snapDraggedEvents &&\n' +
        '                allDayEvent.event.draggable &&\n' +
        '                allDayEventResizes.size === 0\n' +
        '            }"\n' +
        '            [dragSnapGrid]="snapDraggedEvents ? { x: dayColumnWidth } : {}"\n' +
        '            [validateDrag]="validateDrag"\n' +
        '            [touchStartLongPress]="{ delay: 300, delta: 30 }"\n' +
        '            (dragStart)="\n' +
        '              dragStarted(eventRowContainer, event, allDayEvent, false)\n' +
        '            "\n' +
        '            (dragging)="allDayEventDragMove()"\n' +
        '            (dragEnd)="dragEnded(allDayEvent, $event, dayColumnWidth)"\n' +
        '          >\n' +
        '            <div\n' +
        '              class="cal-resize-handle cal-resize-handle-before-start"\n' +
        '              *ngIf="\n' +
        '                allDayEvent.event?.resizable?.beforeStart &&\n' +
        '                !allDayEvent.startsBeforeWeek\n' +
        '              "\n' +
        '              mwlResizeHandle\n' +
        '              [resizeEdges]="{ left: true }"\n' +
        '            ></div>\n' +
        '            <mwl-calendar-week-view-event\n' +
        '              [locale]="locale"\n' +
        '              [weekEvent]="allDayEvent"\n' +
        '              [tooltipPlacement]="tooltipPlacement"\n' +
        '              [tooltipTemplate]="tooltipTemplate"\n' +
        '              [tooltipAppendToBody]="tooltipAppendToBody"\n' +
        '              [tooltipDelay]="tooltipDelay"\n' +
        '              [customTemplate]="eventTemplate"\n' +
        '              [eventTitleTemplate]="eventTitleTemplate"\n' +
        '              [eventActionsTemplate]="eventActionsTemplate"\n' +
        '              [daysInWeek]="daysInWeek"\n' +
        '              (eventClicked)="\n' +
        '                eventClicked.emit({\n' +
        '                  event: allDayEvent.event,\n' +
        '                  sourceEvent: $event.sourceEvent\n' +
        '                })\n' +
        '              "\n' +
        '            >\n' +
        '            </mwl-calendar-week-view-event>\n' +
        '            <div\n' +
        '              class="cal-resize-handle cal-resize-handle-after-end"\n' +
        '              *ngIf="\n' +
        '                allDayEvent.event?.resizable?.afterEnd &&\n' +
        '                !allDayEvent.endsAfterWeek\n' +
        '              "\n' +
        '              mwlResizeHandle\n' +
        '              [resizeEdges]="{ right: true }"\n' +
        '            ></div>\n' +
        '          </div>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '      <div\n' +
        '        class="cal-time-events"\n' +
        '        mwlDroppable\n' +
        `        (dragEnter)="dragEnter('time')"\n` +
        `        (dragLeave)="dragLeave('time')"\n` +
        '      >\n' +
        '        <div\n' +
        '          class="cal-time-label-column"\n' +
        '          *ngIf="view.hourColumns.length > 0 && daysInWeek !== 1"\n' +
        '        >\n' +
        '          <div\n' +
        '            *ngFor="\n' +
        '              let hour of view.hourColumns[0].hours;\n' +
        '              trackBy: trackByHour;\n' +
        '              let odd = odd\n' +
        '            "\n' +
        '            class="cal-hour"\n' +
        '            [class.cal-hour-odd]="odd"\n' +
        '          >\n' +
        '            <mwl-calendar-week-view-hour-segment\n' +
        '              *ngFor="let segment of hour.segments; trackBy: trackByHourSegment"\n' +
        '              [style.height.px]="hourSegmentHeight"\n' +
        '              [segment]="segment"\n' +
        '              [segmentHeight]="hourSegmentHeight"\n' +
        '              [locale]="locale"\n' +
        '              [customTemplate]="hourSegmentTemplate"\n' +
        '              [isTimeLabel]="true"\n' +
        '              [daysInWeek]="daysInWeek"\n' +
        '            >\n' +
        '            </mwl-calendar-week-view-hour-segment>\n' +
        '          </div>\n' +
        '        </div>\n' +
        '        <div\n' +
        '          class="cal-day-columns"\n' +
        '          [class.cal-resize-active]="timeEventResizes.size > 0"\n' +
        '          #dayColumns\n' +
        '        >\n' +
        '          <div\n' +
        '            class="cal-day-column"\n' +
        '            *ngFor="let column of view.hourColumns; trackBy: trackByHourColumn"\n' +
        '          >\n' +
        '            <mwl-calendar-week-view-current-time-marker\n' +
        '              [columnDate]="column.date"\n' +
        '              [dayStartHour]="dayStartHour"\n' +
        '              [dayStartMinute]="dayStartMinute"\n' +
        '              [dayEndHour]="dayEndHour"\n' +
        '              [dayEndMinute]="dayEndMinute"\n' +
        '              [hourSegments]="hourSegments"\n' +
        '              [hourDuration]="hourDuration"\n' +
        '              [hourSegmentHeight]="hourSegmentHeight"\n' +
        '              [customTemplate]="currentTimeMarkerTemplate"\n' +
        '            ></mwl-calendar-week-view-current-time-marker>\n' +
        '            <div class="cal-events-container">\n' +
        '              <div\n' +
        '                *ngFor="\n' +
        '                  let timeEvent of column.events;\n' +
        '                  trackBy: trackByWeekTimeEvent\n' +
        '                "\n' +
        '                #event\n' +
        '                class="cal-event-container"\n' +
        '                [class.cal-draggable]="\n' +
        '                  timeEvent.event.draggable && timeEventResizes.size === 0\n' +
        '                "\n' +
        '                [class.cal-starts-within-day]="!timeEvent.startsBeforeDay"\n' +
        '                [class.cal-ends-within-day]="!timeEvent.endsAfterDay"\n' +
        '                [ngClass]="timeEvent.event.cssClass"\n' +
        '                [hidden]="timeEvent.height === 0 && timeEvent.width === 0"\n' +
        '                [style.top.px]="timeEvent.top"\n' +
        '                [style.height.px]="timeEvent.height"\n' +
        '                [style.left.%]="timeEvent.left"\n' +
        '                [style.width.%]="timeEvent.width"\n' +
        '                mwlResizable\n' +
        '                [resizeCursors]="resizeCursors"\n' +
        '                [resizeSnapGrid]="{\n' +
        '                  left: dayColumnWidth,\n' +
        '                  '... 32619 more characters,
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/modules/week/calendar-week.module.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 3,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 3,
      fixableWarningCount: 0,
      source: "import { NgModule } from '@angular/core';\n" +
        "import { CommonModule } from '@angular/common';\n" +
        "import { ResizableModule } from 'angular-resizable-element';\n" +
        "import { DragAndDropModule } from 'angular-draggable-droppable';\n" +
        "import { CalendarWeekViewComponent } from './calendar-week-view/calendar-week-view.component';\n" +
        "import { CalendarWeekViewHeaderComponent } from './calendar-week-view/calendar-week-view-header/calendar-week-view-header.component';\n" +
        "import { CalendarWeekViewEventComponent } from './calendar-week-view/calendar-week-view-event/calendar-week-view-event.component';\n" +
        "import { CalendarCommonModule } from '../common/calendar-common.module';\n" +
        "import { CalendarWeekViewHourSegmentComponent } from './calendar-week-view/calendar-week-view-hour-segment/calendar-week-view-hour-segment.component';\n" +
        "import { CalendarWeekViewCurrentTimeMarkerComponent } from './calendar-week-view/calendar-week-view-current-time-marker/calendar-week-view-current-time-marker.component';\n" +
        '\n' +
        'export {\n' +
        '  CalendarWeekViewComponent,\n' +
        '  CalendarWeekViewBeforeRenderEvent,\n' +
        "} from './calendar-week-view/calendar-week-view.component';\n" +
        'export {\n' +
        '  WeekViewAllDayEvent as CalendarWeekViewAllDayEvent,\n' +
        '  WeekViewAllDayEventRow as CalendarWeekViewAllDayEventRow,\n' +
        '  GetWeekViewArgs as CalendarGetWeekViewArgs,\n' +
        "} from 'calendar-utils';\n" +
        "export { getWeekViewPeriod } from '../common/util/util';\n" +
        '\n' +
        '// needed for ivy, not part of the public api\n' +
        "export { CalendarWeekViewHeaderComponent as ɵCalendarWeekViewHeaderComponent } from './calendar-week-view/calendar-week-view-header/calendar-week-view-header.component';\n" +
        "export { CalendarWeekViewEventComponent as ɵCalendarWeekViewEventComponent } from './calendar-week-view/calendar-week-view-event/calendar-week-view-event.component';\n" +
        "export { CalendarWeekViewHourSegmentComponent as ɵCalendarWeekViewHourSegmentComponent } from './calendar-week-view/calendar-week-view-hour-segment/calendar-week-view-hour-segment.component';\n" +
        "export { CalendarWeekViewCurrentTimeMarkerComponent as ɵCalendarWeekViewCurrentTimeMarkerComponent } from './calendar-week-view/calendar-week-view-current-time-marker/calendar-week-view-current-time-marker.component';\n" +
        '\n' +
        '@NgModule({\n' +
        '  imports: [\n' +
        '    CommonModule,\n' +
        '    ResizableModule,\n' +
        '    DragAndDropModule,\n' +
        '    CalendarCommonModule,\n' +
        '  ],\n' +
        '  declarations: [\n' +
        '    CalendarWeekViewComponent,\n' +
        '    CalendarWeekViewHeaderComponent,\n' +
        '    CalendarWeekViewEventComponent,\n' +
        '    CalendarWeekViewHourSegmentComponent,\n' +
        '    CalendarWeekViewCurrentTimeMarkerComponent,\n' +
        '  ],\n' +
        '  exports: [\n' +
        '    ResizableModule,\n' +
        '    DragAndDropModule,\n' +
        '    CalendarWeekViewComponent,\n' +
        '    CalendarWeekViewHeaderComponent,\n' +
        '    CalendarWeekViewEventComponent,\n' +
        '    CalendarWeekViewHourSegmentComponent,\n' +
        '    CalendarWeekViewCurrentTimeMarkerComponent,\n' +
        '  ],\n' +
        '})\n' +
        'export class CalendarWeekModule {}\n',
      usedDeprecatedRules: []
    },
    {
      filePath: '/home/migudel/Documents/GII/42C/TFG/develop/repos/angular-calendar/projects/angular-calendar/src/test/util.ts',
      messages: [Array],
      suppressedMessages: [],
      errorCount: 2,
      fatalErrorCount: 0,
      warningCount: 0,
      fixableErrorCount: 0,
      fixableWarningCount: 0,
      source: "import { Component } from '@angular/core';\n" +
        "import { CalendarEvent } from 'angular-calendar';\n" +
        '\n' +
        'export function triggerDomEvent(\n' +
        '  eventType: string,\n' +
        '  target: HTMLElement | Element,\n' +
        '  eventData: object = {}\n' +
        ') {\n' +
        "  const event: Event = document.createEvent('Event');\n" +
        '  Object.assign(event, eventData);\n' +
        '  event.initEvent(eventType, true, true);\n' +
        '  target.dispatchEvent(event);\n' +
        '  return event;\n' +
        '}\n' +
        '\n' +
        '@Component({\n' +
        "  selector: 'mwl-external-event',\n" +
        '  template:\n' +
        `    '<div class="external-event" mwlDraggable [dropData]="{event: event}">{{ event.title }}</div>',\n` +
        '  styles: [\n' +
        '    `\n' +
        '      .external-event {\n' +
        '        position: fixed;\n' +
        '        top: 0;\n' +
        '        left: 0;\n' +
        '        width: 10px;\n' +
        '        height: 10px;\n' +
        '      }\n' +
        '    `,\n' +
        '  ],\n' +
        '})\n' +
        'export class ExternalEventComponent {\n' +
        '  event: CalendarEvent = {\n' +
        "    title: 'foo',\n" +
        '    start: new Date(),\n' +
        '    draggable: true,\n' +
        '    color: {\n' +
        "      primary: 'blue',\n" +
        "      secondary: 'lightblue',\n" +
        '    },\n' +
        '  };\n' +
        '}\n',
      usedDeprecatedRules: []
    }
  ]
}
